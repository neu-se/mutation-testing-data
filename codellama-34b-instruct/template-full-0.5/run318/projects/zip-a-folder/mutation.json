{"files":{"lib/ZipAFolder.ts":{"language":"typescript","mutants":[{"id":"0","mutatorName":"PrecomputedMutator","replacement":"o.compression !== COMPRESSION_LEVEL.uncompressed","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.309 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 211054\n    Received:   212456\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 24239616\n    Received:   24239616\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.52 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.52 |   85.71 |   94.28 | 26,41,197-199     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        8.661 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"3","mutatorName":"PrecomputedMutator","replacement":"{\n  src,\n  targetFilePath: tarFilePath,\n  format: 'tar',\n  zipAFolderOptions: {\n    compression: COMPRESSION_LEVEL.uncompressed\n  }\n}","status":"Timeout","location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"4","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.medium","status":"Timeout","location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"2","mutatorName":"PrecomputedMutator","replacement":"{\n  src,\n  targetFilePath: tarFilePath,\n  format: 'zip',\n  zipAFolderOptions\n}","status":"Timeout","location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"1","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.high","status":"Timeout","location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"5","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.high","status":"Timeout","location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"6","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions?.customWriteStream || targetFilePath","status":"Timeout","location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"9","mutatorName":"PrecomputedMutator","replacement":"targetFilePath.replace('zip', 'tar')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.272 s)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test/data'\"\n\n          174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(targetFilePath);\n          179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream :\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   88.73 |    47.85 |   78.57 |   88.57 |                       \n\n ZipAFolder.ts |   88.73 |    47.85 |   78.57 |   88.57 | 26,41,168,178,196-201 \n\n---------------|---------|----------|---------|---------|-----------------------\n\n stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test/data'\"\n\n          174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(targetFilePath);\n          179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |  \n       throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/tar-a-folder/.stryker-tmp/sandbox631080/test'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 1 skipped, 9 passed, 22 total\nSnapshots:   0 total\nTime:        6.479 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":71,"line":115},"start":{"column":57,"line":115}}},{"id":"10","mutatorName":"PrecomputedMutator","replacement":"targetFilePath.split('/').reverse().join('/')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.193 s)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access 'test.zip/data/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\"\n\n          174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(targetFilePath);\n          179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access 'test.zip/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'testUNCOMPRESSED.zip/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'test.zip/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.zip/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFol\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   88.73 |    47.47 |   78.57 |   88.57 |                       \n\n ZipAFolder.ts |   88.73 |    47.47 |   78.57 |   88.57 | 26,41,168,178,196-201 \n\n---------------|---------|----------|---------|---------|-----------------------\n\nderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.multi.zip/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access 'test.tgz/data/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\"\n\n          174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(targetFilePath);\n          179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access 'test.tgz/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'testUNCOMPRESSED.tar/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'test.tgz/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-\nline no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.tgz/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.multi.tgz/test/sandbox631080/.stryker-tmp/zip-a-folder/projects/llm-mutation-testing/Projects/NEU/Documents/jon'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 1 skipped, 9 passed, 22 total\nSnapshots:   0 total\nTime:        6.43 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":71,"line":115},"start":{"column":57,"line":115}}},{"id":"7","mutatorName":"PrecomputedMutator","replacement":"!zipAFolderOptions?.customWriteStream || targetFilePath","status":"Timeout","location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"8","mutatorName":"PrecomputedMutator","replacement":"targetFilePath + 'test'","status":"Timeout","location":{"end":{"column":71,"line":115},"start":{"column":57,"line":115}}},{"id":"11","mutatorName":"PrecomputedMutator","replacement":"targetBasePath !== src","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"12","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.length === src.length","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"13","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.includes(src)","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"14","mutatorName":"PrecomputedMutator","replacement":"isGlob(src)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.68 s)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      80 |\n      81 |     it('ZIP test folder failing', async () => {\n    > 82 |         expect.assertions(1);\n         |                ^\n      83 |         try {\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:82:16)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json, **/*.txt'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      142 |\n      143 |     it('TGZ test folder failing', async () => {\n    > 144 |         expect.assertions(1);\n          |                ^\n      145 |         try {\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:144:16)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json, **/*.txt'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   91.54 |    48.63 |   78.57 |   91.42 |                   \n\n ZipAFolder.ts |   91.54 |    48.63 |   78.57 |   91.42 | 26,41,196-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 1 skipped, 15 passed, 22 total\nSnapshots:   0 total\nTime:        8.809 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"15","mutatorName":"PrecomputedMutator","replacement":"src.startsWith('*')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.584 s)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      80 |\n      81 |     it('ZIP test folder failing', async () => {\n    > 82 |         expect.assertions(1);\n         |                ^\n      83 |         try {\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:82:16)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json, **/*.txt'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      142 |\n      143 |     it('TGZ test folder failing', async () => {\n    > 144 |         expect.assertions(1);\n          |                ^\n      145 |         try {\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:144:16)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json, **/*.txt'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   91.54 |    48.24 |   78.57 |   91.42 |                   \n\n ZipAFolder.ts |   91.54 |    48.24 |   78.57 |   91.42 | 26,41,196-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 1 skipped, 15 passed, 22 total\nSnapshots:   0 total\nTime:        8.879 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"16","mutatorName":"PrecomputedMutator","replacement":"!isGlob","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.982 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:128:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at compress (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at compress (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_\n---------------|---------|----------|---------|---------|---------------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s         \n---------------|---------|----------|---------|---------|---------------------------\n\nAll files      |   87.32 |    43.57 |   78.57 |   87.14 |                           \n\n ZipAFolder.ts |   87.32 |    43.57 |   78.57 |   87.14 | 26,41,172-174,178,196-201 \n\n---------------|---------|----------|---------|---------|---------------------------\n\n9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at compress (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at compress (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ?\n zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at compress (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at compress (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        6.34 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":28,"line":121},"start":{"column":22,"line":121}}},{"id":"18","mutatorName":"PrecomputedMutator","replacement":"src - 1","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.212 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.cons\ntants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (NaN)\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    51.75 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    51.75 |   85.71 |   94.28 | 26,41,197-199     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        6.42 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"17","mutatorName":"PrecomputedMutator","replacement":"src + 'foo'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.262 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/test/datafoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/test/datafoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/test/datafoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/test/datafoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/test/datafoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.\n<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/test/datafoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |   94.36 |    52.14 |   85.71 |   94.28 |                   \n ZipAFolder.ts |   94.36 |    52.14 |   85.71 |   94.28 | 26,41,197-199     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 1 skipped, 15 passed, 22 total\nSnapshots:   0 total\nTime:        6.466 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"19","mutatorName":"PrecomputedMutator","replacement":"src.replace('src', 'foo')","status":"Timeout","location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"20","mutatorName":"PrecomputedMutator","replacement":"fs.constants.W_OK","status":"Timeout","location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"21","mutatorName":"PrecomputedMutator","replacement":"fs.constants.X_OK","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.346 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 171146\n    Received:   459712\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.14 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.14 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        8.632 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"22","mutatorName":"PrecomputedMutator","replacement":"fs.constants.F_OK","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.553 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 100923\n    Received:   459580\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    51.75 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    51.75 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        8.886 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"25","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK)","status":"Survived","testsCompleted":1,"location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"23","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.R_OK)","status":"Timeout","location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"24","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.W_OK)","status":"Timeout","location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"27","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.substring(0, 1)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.339 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: EROFS: read-only file system, access '/'\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n \n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   90.14 |    48.24 |   78.57 |      90 |                   \n\n ZipAFolder.ts |   90.14 |    48.24 |   78.57 |      90 | 26,41,178,196-201 \n\n---------------|---------|----------|---------|---------|-------------------\n\n     at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: EROFS: read-only file system, access '/'\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: EROFS: read-only file system, access '/'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Functi\non.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 1 skipped, 9 passed, 22 total\nSnapshots:   0 total\nTime:        6.567 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"26","mutatorName":"PrecomputedMutator","replacement":"targetBasePath + 'foo'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.569 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   90.14 |    48.63 |   78.57 |      90 |                   \n\n ZipAFolder.ts |   90.14 |    48.63 |   78.57 |      90 | 26,41,178,196-201 \n\n---------------|---------|----------|---------|---------|-------------------\n\n:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox631080/testfoo'\n\n      174 |         await (stryMutAct_9fa48(\"25\") ? fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK) : stryMutAct_9fa48(\"24\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"23\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"23\", \"24\", \"25\"), fs.promises.access(stryMutAct_9fa48(\"28\") ? targetBasePath.split('.')[0] : stryMutAct_9fa48(\"27\") ? targetBasePath.substring(0, 1) : stryMutAct_9fa48(\"26\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"26\", \"27\", \"28\"), targetBasePath), fs.constants.R_OK | fs.constants.W_OK))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(targetFilePath);\n      179 |     } else if (stryMutAct_9fa48(\"31\") ? zipAFolderOptions.customWriteStream ? true : false : stryMutAct_9fa48(\"30\") ? zipAFolderOptions && !zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"29\") ? zipAFolderOptions || zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"29\", \"30\", \"31\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder\n.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        6.736 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"28","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.split('.')[0]","status":"Timeout","location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"29","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions || zipAFolderOptions.customWriteStream","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"30","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions && !zipAFolderOptions.customWriteStream","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"31","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions.customWriteStream ? true : false","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"32","mutatorName":"PrecomputedMutator","replacement":"archiver(format, {})","status":"Timeout","location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"33","mutatorName":"PrecomputedMutator","replacement":"archiver(format, {\n  gzip: true\n})","status":"Timeout","location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"34","mutatorName":"PrecomputedMutator","replacement":"archiver(format, {\n  zlib: {\n    level: 9\n  }\n})","status":"Timeout","location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"35","mutatorName":"PrecomputedMutator","replacement":"archiver.file","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                         \n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   81.69 |    35.01 |   71.42 |   81.42 |                   \n\n ZipAFolder.ts |   81.69 |    35.01 |   71.42 |   81.42 | 26,41,191-210     \n\n---------------|---------|----------|---------|---------|-------------------\n\n                                                                                                                                                                   ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject)\n : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : st\nryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") \n? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.54 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":55,"line":135},"start":{"column":47,"line":135}}},{"id":"37","mutatorName":"PrecomputedMutator","replacement":"archiver.finalize","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                         \n                                                                                                                                                                   ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject)\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   81.69 |    34.24 |   71.42 |   81.42 |                   \n\n ZipAFolder.ts |   81.69 |    34.24 |   71.42 |   81.42 | 26,41,191-210     \n\n---------------|---------|----------|---------|---------|-------------------\n\n : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : st\nryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") \n? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.552 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":55,"line":135},"start":{"column":47,"line":135}}},{"id":"36","mutatorName":"PrecomputedMutator","replacement":"archiver.directory","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                         \n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   81.69 |    34.63 |   71.42 |   81.42 |                   \n\n ZipAFolder.ts |   81.69 |    34.63 |   71.42 |   81.42 | 26,41,191-210     \n\n---------------|---------|----------|---------|---------|-------------------\n\n                                                                                                                                                                   ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject)\n : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : st\nryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") \n? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.992 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":55,"line":135},"start":{"column":47,"line":135}}},{"id":"40","mutatorName":"PrecomputedMutator","replacement":"\"gzip\"","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.062 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa4\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   81.69 |    34.24 |   71.42 |   81.42 |                   \n\n ZipAFolder.ts |   81.69 |    34.24 |   71.42 |   81.42 | 26,41,191-210     \n\n---------------|---------|----------|---------|---------|-------------------\n\n8(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : st\nryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa4\n8(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder\n Test › TGZ test globbing with multiple paths\n\n    create(gzip): format not registered\n\n      188 |     }) : stryMutAct_9fa48(\"33\") ? archiver(format, {\n      189 |       gzip: true\n    > 190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                            ^\n      191 |     return new Promise((resolve, reject) => {\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.compress (lib/ZipAFolder.ts:190:268)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        5.221 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":135},"start":{"column":56,"line":135}}},{"id":"38","mutatorName":"PrecomputedMutator","replacement":"\"tar\"","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.143 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   24741888\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.52 |   85.71 |   94.28 |                   \n ZipAFolder.ts |   94.36 |    52.52 |   85.71 |   94.28 | 26,41,197-199     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        7.469 s, estimated 9 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":135},"start":{"column":56,"line":135}}},{"id":"39","mutatorName":"PrecomputedMutator","replacement":"\"zip\"","status":"Timeout","location":{"end":{"column":62,"line":135},"start":{"column":56,"line":135}}},{"id":"41","mutatorName":"PrecomputedMutator","replacement":"archiverOptions || null","status":"Timeout","location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"42","mutatorName":"PrecomputedMutator","replacement":"archiverOptions && {}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.179 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 587457\n    Received:   587457\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 24741888\n    Received:   24741888\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.14 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.14 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        7.456 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"45","mutatorName":"PrecomputedMutator","replacement":"output.on('finish', reject)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.613 s)\n  ● Zip-A-Folder Test › ZIP test folder\n\n    thrown: undefined\n\n      53 |     });\n      54 |\n    > 55 |     it('ZIP test folder', async () => {\n         |     ^\n      56 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testZIP);\n      57 |\n      58 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:55:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    thrown: undefined\n\n      59 |     });\n      60 |\n    > 61 |     it('ZIP test folder using compression rate', async () => {\n         |     ^\n      62 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDZIP, {\n      63 |             compression: COMPRESSION_LEVEL.uncompressed,\n      64 |         });\n\n      at test/tests-ZipAFolder.ts:61:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    thrown: undefined\n\n      73 |     });\n      74 |\n    > 75 |     it('ZIP test folder direct via constant', async () => {\n         |     ^\n      76 |         await zip(path.resolve(__dirname, 'data/'), testZIP);\n      77 |\n      78 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:75:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    thrown: undefined\n\n       97 |     });\n       98 |\n    >  99 |     it('ZIP test globbing', async () => {\n          |     ^\n      100 |         await zip('**/*.json', testGlobZIP);\n      101 |\n      102 |         expect(fs.existsSync(testGlobZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:99:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    thrown: undefined\n\n      103 |     });\n      104 |\n    > 105 |     it('ZIP test globbing with multiple paths', async () => {\n          |     ^\n      106 |         await zip('**/*.json, **/*.txt', testGlobMultiZIP);\n      107 |\n      108 |         expect(fs.existsSync(testGlobMultiZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:105:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    thrown: undefined\n\n      115 |     });\n      116 |\n    > 117 |     it('TGZ test folder', async () => {\n          |     ^\n      118 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testTAR);\n      119 |\n      120 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:117:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    thrown: undefined\n\n      121 |     });\n      122 |\n    > 123 |     it('TGZ test folder using compression rate', async () => {\n          |     ^\n      124 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDTAR, {\n      125 |             compression: COMPRESSION_LEVEL.uncompressed,\n      126 |         });\n\n      at test/tests-ZipAFolder.ts:123:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    thrown: undefined\n\n      135 |     });\n      136 |\n    > 137 |     it('TGZ test folder direct via constant', async () => {\n          |     ^\n      138 |         await tar(path.resolve(__dirname, 'data/'), testTAR);\n      139 |\n      140 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:137:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    thrown: undefined\n\n      159 |     });\n      160 |\n    > 161 |     it('ZIP test custom writestream with zipfilepath empty string', async () => {\n          |     ^\n      162 |         const customWS = fs.createWriteStream('test/123.zip');\n      163 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      164 |         expect(fs.existsSync('test/123.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:161:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    thrown: undefined\n\n      165 |     });\n      166 |\n    > 167 |     it('ZIP test custom writestream with zipfilepath undefined', async () => {\n          |     ^\n      168 |         const customWS = fs.createWriteStream('test/1234.zip');\n      169 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      170 |         expect(fs.existsSync('test/1234.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:167:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    thrown: undefined\n\n      171 |     });\n      172 |\n    > 173 |     it('TGZ test custom writestream with tarfilepath empty string', async () => {\n          |     ^\n      174 |         const customWS = fs.createWriteStream('test/123.tgz');\n      175 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      176 |         expect(fs.existsSync('test/123.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:173:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    thrown: undefined\n\n      177 |     });\n      178 |\n    > 179 |     it('TGZ test custom writestream with tarfilepath undefined', async () => {\n          |     ^\n      180 |         const customWS = fs.createWriteStream('test/1234.tgz');\n      181 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      182 |         expect(fs.existsSync('test/1234.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:179:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    thrown: undefined\n\n      183 |     });\n      184 |\n    > 185 |     it('TGZ test globbing', async () => {\n          |     ^\n      186 |         await tar('**/*.json', testGlobTAR);\n      187 |\n      188 |         expect(fs.existsSync(testGlobTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:185:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    thrown: undefined\n\n      189 |     });\n      190 |\n    > 191 |     it('TGZ test globbing with multiple paths', async () => {\n          |     ^\n      192 |         await tar('**/*.json, **/*.txt', testGlobMultiTAR);\n      193 |\n      194 |         expect(fs.existsSync(testGlobMultiTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:191:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    50.19 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    50.19 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        7.746 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"43","mutatorName":"PrecomputedMutator","replacement":"archiverOptions ?? {}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.565 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 587457\n    Received:   587457\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.52 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.52 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        8.748 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"44","mutatorName":"PrecomputedMutator","replacement":"output.on('error', resolve)","status":"Timeout","location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"46","mutatorName":"PrecomputedMutator","replacement":"output.on('close', reject)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.587 s)\n  ● Zip-A-Folder Test › ZIP test folder\n\n    thrown: undefined\n\n      53 |     });\n      54 |\n    > 55 |     it('ZIP test folder', async () => {\n         |     ^\n      56 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testZIP);\n      57 |\n      58 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:55:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    thrown: undefined\n\n      59 |     });\n      60 |\n    > 61 |     it('ZIP test folder using compression rate', async () => {\n         |     ^\n      62 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDZIP, {\n      63 |             compression: COMPRESSION_LEVEL.uncompressed,\n      64 |         });\n\n      at test/tests-ZipAFolder.ts:61:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    thrown: undefined\n\n      73 |     });\n      74 |\n    > 75 |     it('ZIP test folder direct via constant', async () => {\n         |     ^\n      76 |         await zip(path.resolve(__dirname, 'data/'), testZIP);\n      77 |\n      78 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:75:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    thrown: undefined\n\n       97 |     });\n       98 |\n    >  99 |     it('ZIP test globbing', async () => {\n          |     ^\n      100 |         await zip('**/*.json', testGlobZIP);\n      101 |\n      102 |         expect(fs.existsSync(testGlobZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:99:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    thrown: undefined\n\n      103 |     });\n      104 |\n    > 105 |     it('ZIP test globbing with multiple paths', async () => {\n          |     ^\n      106 |         await zip('**/*.json, **/*.txt', testGlobMultiZIP);\n      107 |\n      108 |         expect(fs.existsSync(testGlobMultiZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:105:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    thrown: undefined\n\n      115 |     });\n      116 |\n    > 117 |     it('TGZ test folder', async () => {\n          |     ^\n      118 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testTAR);\n      119 |\n      120 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:117:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    thrown: undefined\n\n      121 |     });\n      122 |\n    > 123 |     it('TGZ test folder using compression rate', async () => {\n          |     ^\n      124 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDTAR, {\n      125 |             compression: COMPRESSION_LEVEL.uncompressed,\n      126 |         });\n\n      at test/tests-ZipAFolder.ts:123:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    thrown: undefined\n\n      135 |     });\n      136 |\n    > 137 |     it('TGZ test folder direct via constant', async () => {\n          |     ^\n      138 |         await tar(path.resolve(__dirname, 'data/'), testTAR);\n      139 |\n      140 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:137:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    thrown: undefined\n\n      159 |     });\n      160 |\n    > 161 |     it('ZIP test custom writestream with zipfilepath empty string', async () => {\n          |     ^\n      162 |         const customWS = fs.createWriteStream('test/123.zip');\n      163 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      164 |         expect(fs.existsSync('test/123.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:161:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    thrown: undefined\n\n      165 |     });\n      166 |\n    > 167 |     it('ZIP test custom writestream with zipfilepath undefined', async () => {\n          |     ^\n      168 |         const customWS = fs.createWriteStream('test/1234.zip');\n      169 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      170 |         expect(fs.existsSync('test/1234.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:167:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    thrown: undefined\n\n      171 |     });\n      172 |\n    > 173 |     it('TGZ test custom writestream with tarfilepath empty string', async () => {\n          |     ^\n      174 |         const customWS = fs.createWriteStream('test/123.tgz');\n      175 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      176 |         expect(fs.existsSync('test/123.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:173:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    thrown: undefined\n\n      177 |     });\n      178 |\n    > 179 |     it('TGZ test custom writestream with tarfilepath undefined', async () => {\n          |     ^\n      180 |         const customWS = fs.createWriteStream('test/1234.tgz');\n      181 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      182 |         expect(fs.existsSync('test/1234.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:179:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    thrown: undefined\n\n      183 |     });\n      184 |\n    > 185 |     it('TGZ test globbing', async () => {\n          |     ^\n      186 |         await tar('**/*.json', testGlobTAR);\n      187 |\n      188 |         expect(fs.existsSync(testGlobTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:185:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    thrown: undefined\n\n      189 |     });\n      190 |\n    > 191 |     it('TGZ test globbing with multiple paths', async () => {\n          |     ^\n      192 |         await tar('**/*.json, **/*.txt', testGlobMultiTAR);\n      193 |\n      194 |         expect(fs.existsSync(testGlobMultiTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:191:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |     49.8 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |     49.8 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        6.787 s, estimated 8 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"49","mutatorName":"PrecomputedMutator","replacement":"output.pipe","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOption\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |   94.36 |    48.63 |   85.71 |   94.28 |                   \n ZipAFolder.ts |   94.36 |    48.63 |   85.71 |   94.28 | 26,41,197-199     \n---------------|---------|----------|---------|---------|-------------------\n\ns ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolv\ne) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\"\n) ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa4\n8(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Cannot pipe, not readable\n\n      190 |     }) : stryMutAct_9fa48(\"32\") ? archiver(format, {}) : (stryCov_9fa48(\"32\", \"33\", \"34\"), (stryMutAct_9fa48(\"37\") ? archiver.finalize : stryMutAct_9fa48(\"36\") ? archiver.directory : stryMutAct_9fa48(\"35\") ? archiver.file : (stryCov_9fa48(\"35\", \"36\", \"37\"), archiver))(stryMutAct_9fa48(\"40\") ? \"gzip\" : stryMutAct_9fa48(\"39\") ? \"zip\" : stryMutAct_9fa48(\"38\") ? \"tar\" : (stryCov_9fa48(\"38\", \"39\", \"40\"), format), stryMutAct_9fa48(\"43\") ? archiverOptions ?? {} : stryMutAct_9fa48(\"42\") ? archiverOptions && {} : stryMutAct_9fa48(\"41\") ? archiverOptions || null : (stryCov_9fa48(\"41\", \"42\", \"43\"), archiverOptions || {})));\n      191 |     return new Promise((resolve, reject) => {\n    > 192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n          |                                       ^\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n\n      at pipe (lib/ZipAFolder.ts:192:39)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        2.983 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":138},"start":{"column":13,"line":138}}},{"id":"47","mutatorName":"PrecomputedMutator","replacement":"output.off","status":"Timeout","location":{"end":{"column":22,"line":138},"start":{"column":13,"line":138}}},{"id":"48","mutatorName":"PrecomputedMutator","replacement":"output.emit","status":"Timeout","location":{"end":{"column":22,"line":138},"start":{"column":13,"line":138}}},{"id":"54","mutatorName":"PrecomputedMutator","replacement":"resolve(new Error('Test error'))","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   0\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   0\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    84.5 |    38.91 |   78.57 |   84.28 |                   \n ZipAFolder.ts |    84.5 |    38.91 |   78.57 |   84.28 | 26,41,193-210     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        2.426 s, estimated 3 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":39,"line":138},"start":{"column":32,"line":138}}},{"id":"51","mutatorName":"PrecomputedMutator","replacement":"'finish'","status":"Survived","testsCompleted":1,"location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"53","mutatorName":"PrecomputedMutator","replacement":"reject","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.762 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    thrown: undefined\n\n      53 |     });\n      54 |\n    > 55 |     it('ZIP test folder', async () => {\n         |     ^\n      56 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testZIP);\n      57 |\n      58 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:55:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    thrown: undefined\n\n      59 |     });\n      60 |\n    > 61 |     it('ZIP test folder using compression rate', async () => {\n         |     ^\n      62 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDZIP, {\n      63 |             compression: COMPRESSION_LEVEL.uncompressed,\n      64 |         });\n\n      at test/tests-ZipAFolder.ts:61:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    thrown: undefined\n\n      73 |     });\n      74 |\n    > 75 |     it('ZIP test folder direct via constant', async () => {\n         |     ^\n      76 |         await zip(path.resolve(__dirname, 'data/'), testZIP);\n      77 |\n      78 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:75:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    thrown: undefined\n\n       97 |     });\n       98 |\n    >  99 |     it('ZIP test globbing', async () => {\n          |     ^\n      100 |         await zip('**/*.json', testGlobZIP);\n      101 |\n      102 |         expect(fs.existsSync(testGlobZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:99:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    thrown: undefined\n\n      103 |     });\n      104 |\n    > 105 |     it('ZIP test globbing with multiple paths', async () => {\n          |     ^\n      106 |         await zip('**/*.json, **/*.txt', testGlobMultiZIP);\n      107 |\n      108 |         expect(fs.existsSync(testGlobMultiZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:105:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    thrown: undefined\n\n      115 |     });\n      116 |\n    > 117 |     it('TGZ test folder', async () => {\n          |     ^\n      118 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testTAR);\n      119 |\n      120 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:117:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    thrown: undefined\n\n      121 |     });\n      122 |\n    > 123 |     it('TGZ test folder using compression rate', async () => {\n          |     ^\n      124 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDTAR, {\n      125 |             compression: COMPRESSION_LEVEL.uncompressed,\n      126 |         });\n\n      at test/tests-ZipAFolder.ts:123:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    thrown: undefined\n\n      135 |     });\n      136 |\n    > 137 |     it('TGZ test folder direct via constant', async () => {\n          |     ^\n      138 |         await tar(path.resolve(__dirname, 'data/'), testTAR);\n      139 |\n      140 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:137:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    thrown: undefined\n\n      159 |     });\n      160 |\n    > 161 |     it('ZIP test custom writestream with zipfilepath empty string', async () => {\n          |     ^\n      162 |         const customWS = fs.createWriteStream('test/123.zip');\n      163 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      164 |         expect(fs.existsSync('test/123.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:161:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    thrown: undefined\n\n      165 |     });\n      166 |\n    > 167 |     it('ZIP test custom writestream with zipfilepath undefined', async () => {\n          |     ^\n      168 |         const customWS = fs.createWriteStream('test/1234.zip');\n      169 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      170 |         expect(fs.existsSync('test/1234.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:167:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    thrown: undefined\n\n      171 |     });\n      172 |\n    > 173 |     it('TGZ test custom writestream with tarfilepath empty string', async () => {\n          |     ^\n      174 |         const customWS = fs.createWriteStream('test/123.tgz');\n      175 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      176 |         expect(fs.existsSync('test/123.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:173:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    thrown: undefined\n\n      177 |     });\n      178 |\n    > 179 |     it('TGZ test custom writestream with tarfilepath undefined', async () => {\n          |     ^\n      180 |         const customWS = fs.createWriteStream('test/1234.tgz');\n      181 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      182 |         expect(fs.existsSync('test/1234.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:179:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    thrown: undefined\n\n      183 |     });\n      184 |\n    > 185 |     it('TGZ test globbing', async () => {\n          |     ^\n      186 |         await tar('**/*.json', testGlobTAR);\n      187 |\n      188 |         expect(fs.existsSync(testGlobTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:185:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    thrown: undefined\n\n      189 |     });\n      190 |\n    > 191 |     it('TGZ test globbing with multiple paths', async () => {\n          |     ^\n      192 |         await tar('**/*.json, **/*.txt', testGlobMultiTAR);\n      193 |\n      194 |         expect(fs.existsSync(testGlobMultiTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:191:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.52 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.52 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        5.941 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":39,"line":138},"start":{"column":32,"line":138}}},{"id":"50","mutatorName":"PrecomputedMutator","replacement":"'end'","status":"Timeout","location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"52","mutatorName":"PrecomputedMutator","replacement":"'error'","status":"Timeout","location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"55","mutatorName":"PrecomputedMutator","replacement":"output.on('error', resolve)","status":"Survived","testsCompleted":1,"location":{"end":{"column":39,"line":139},"start":{"column":13,"line":139}}},{"id":"56","mutatorName":"PrecomputedMutator","replacement":"output.off","status":"Survived","testsCompleted":1,"location":{"end":{"column":22,"line":139},"start":{"column":13,"line":139}}},{"id":"60","mutatorName":"PrecomputedMutator","replacement":"output.write('buggy')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolde\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   87.32 |    42.41 |   78.57 |   87.14 |                   \n\n ZipAFolder.ts |   87.32 |    42.41 |   78.57 |   87.14 | 26,41,195-210     \n\n---------------|---------|----------|---------|---------|-------------------\n\nr.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      \n197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutA\nct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: dest.on is not a function\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.238 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":141},"start":{"column":29,"line":141}}},{"id":"57","mutatorName":"PrecomputedMutator","replacement":"'end'","status":"Survived","testsCompleted":1,"location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"61","mutatorName":"PrecomputedMutator","replacement":"undefined","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |   87.32 |    42.02 |   78.57 |   87.14 |                   \n ZipAFolder.ts |   87.32 |    42.02 |   78.57 |   87.14 | 26,41,195-210     \n---------------|---------|----------|---------|---------|-------------------\n\npipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? is\nGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\"\n, \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      192 |       stryMutAct_9fa48(\"49\") ? output.pipe('close', resolve) : stryMutAct_9fa48(\"48\") ? output.emit('close', resolve) : stryMutAct_9fa48(\"47\") ? output.off('close', resolve) : stryMutAct_9fa48(\"46\") ? output.on('close', reject) : stryMutAct_9fa48(\"45\") ? output.on('finish', reject) : stryMutAct_9fa48(\"44\") ? output.on('error', resolve) : (stryCov_9fa48(\"44\", \"45\", \"46\", \"47\", \"48\", \"49\"), output.on(stryMutAct_9fa48(\"52\") ? 'error' : stryMutAct_9fa48(\"51\") ? 'finish' : stryMutAct_9fa48(\"50\") ? 'end' : (stryCov_9fa48(\"50\", \"51\", \"52\"), 'close'), stryMutAct_9fa48(\"54\") ? resolve(new Error('Test error')) : stryMutAct_9fa48(\"53\") ? reject : (stryCov_9fa48(\"53\", \"54\"), resolve)));\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n    > 194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n          |                  ^\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:194:18)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.383 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":141},"start":{"column":29,"line":141}}},{"id":"58","mutatorName":"PrecomputedMutator","replacement":"'finish'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.891 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    thrown: undefined\n\n      53 |     });\n      54 |\n    > 55 |     it('ZIP test folder', async () => {\n         |     ^\n      56 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testZIP);\n      57 |\n      58 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:55:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    thrown: undefined\n\n      59 |     });\n      60 |\n    > 61 |     it('ZIP test folder using compression rate', async () => {\n         |     ^\n      62 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDZIP, {\n      63 |             compression: COMPRESSION_LEVEL.uncompressed,\n      64 |         });\n\n      at test/tests-ZipAFolder.ts:61:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    thrown: undefined\n\n      73 |     });\n      74 |\n    > 75 |     it('ZIP test folder direct via constant', async () => {\n         |     ^\n      76 |         await zip(path.resolve(__dirname, 'data/'), testZIP);\n      77 |\n      78 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:75:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    thrown: undefined\n\n       97 |     });\n       98 |\n    >  99 |     it('ZIP test globbing', async () => {\n          |     ^\n      100 |         await zip('**/*.json', testGlobZIP);\n      101 |\n      102 |         expect(fs.existsSync(testGlobZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:99:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    thrown: undefined\n\n      103 |     });\n      104 |\n    > 105 |     it('ZIP test globbing with multiple paths', async () => {\n          |     ^\n      106 |         await zip('**/*.json, **/*.txt', testGlobMultiZIP);\n      107 |\n      108 |         expect(fs.existsSync(testGlobMultiZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:105:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    thrown: undefined\n\n      115 |     });\n      116 |\n    > 117 |     it('TGZ test folder', async () => {\n          |     ^\n      118 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testTAR);\n      119 |\n      120 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:117:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    thrown: undefined\n\n      121 |     });\n      122 |\n    > 123 |     it('TGZ test folder using compression rate', async () => {\n          |     ^\n      124 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDTAR, {\n      125 |             compression: COMPRESSION_LEVEL.uncompressed,\n      126 |         });\n\n      at test/tests-ZipAFolder.ts:123:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    thrown: undefined\n\n      135 |     });\n      136 |\n    > 137 |     it('TGZ test folder direct via constant', async () => {\n          |     ^\n      138 |         await tar(path.resolve(__dirname, 'data/'), testTAR);\n      139 |\n      140 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:137:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    thrown: undefined\n\n      159 |     });\n      160 |\n    > 161 |     it('ZIP test custom writestream with zipfilepath empty string', async () => {\n          |     ^\n      162 |         const customWS = fs.createWriteStream('test/123.zip');\n      163 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      164 |         expect(fs.existsSync('test/123.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:161:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    thrown: undefined\n\n      165 |     });\n      166 |\n    > 167 |     it('ZIP test custom writestream with zipfilepath undefined', async () => {\n          |     ^\n      168 |         const customWS = fs.createWriteStream('test/1234.zip');\n      169 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      170 |         expect(fs.existsSync('test/1234.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:167:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    thrown: undefined\n\n      171 |     });\n      172 |\n    > 173 |     it('TGZ test custom writestream with tarfilepath empty string', async () => {\n          |     ^\n      174 |         const customWS = fs.createWriteStream('test/123.tgz');\n      175 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      176 |         expect(fs.existsSync('test/123.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:173:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    thrown: undefined\n\n      177 |     });\n      178 |\n    > 179 |     it('TGZ test custom writestream with tarfilepath undefined', async () => {\n          |     ^\n      180 |         const customWS = fs.createWriteStream('test/1234.tgz');\n      181 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      182 |         expect(fs.existsSync('test/1234.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:179:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    thrown: undefined\n\n      183 |     });\n      184 |\n    > 185 |     it('TGZ test globbing', async () => {\n          |     ^\n      186 |         await tar('**/*.json', testGlobTAR);\n      187 |\n      188 |         expect(fs.existsSync(testGlobTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:185:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    thrown: undefined\n\n      189 |     });\n      190 |\n    > 191 |     it('TGZ test globbing with multiple paths', async () => {\n          |     ^\n      192 |         await tar('**/*.json, **/*.txt', testGlobMultiTAR);\n      193 |\n      194 |         expect(fs.existsSync(testGlobMultiTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:191:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.14 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.14 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        7.088 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"59","mutatorName":"PrecomputedMutator","replacement":"'close'","status":"Survived","testsCompleted":1,"location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"63","mutatorName":"PrecomputedMutator","replacement":"!isGlob(src)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    51.75 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    51.75 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        4.976 s, estimated 5 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"62","mutatorName":"PrecomputedMutator","replacement":"output.end()","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   0\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   0\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    51.75 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    51.75 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        5.343 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":141},"start":{"column":29,"line":141}}},{"id":"65","mutatorName":"PrecomputedMutator","replacement":"isGlob === false","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/Zip\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   88.73 |    43.96 |   78.57 |   88.57 |                   \n\n ZipAFolder.ts |   88.73 |    43.96 |   78.57 |   88.57 | 26,41,196-210     \n---------------|---------|----------|---------|---------|-------------------\n\nAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob\n(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.871 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":23,"line":143},"start":{"column":17,"line":143}}},{"id":"66","mutatorName":"PrecomputedMutator","replacement":"isGlob !== true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/Zip\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   88.73 |    43.57 |   78.57 |   88.57 |                   \n\n ZipAFolder.ts |   88.73 |    43.57 |   78.57 |   88.57 | 26,41,196-210     \n\n---------------|---------|----------|---------|---------|-------------------\n\nAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob\n(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      193 |       stryMutAct_9fa48(\"56\") ? output.off('error', reject) : stryMutAct_9fa48(\"55\") ? output.on('error', resolve) : (stryCov_9fa48(\"55\", \"56\"), output.on(stryMutAct_9fa48(\"59\") ? 'close' : stryMutAct_9fa48(\"58\") ? 'finish' : stryMutAct_9fa48(\"57\") ? 'end' : (stryCov_9fa48(\"57\", \"58\", \"59\"), 'error'), reject));\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n    > 195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n          |                                                                                                                                                                                                                                                                   ^\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n\n      at lib/ZipAFolder.ts:195:259\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.208 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":23,"line":143},"start":{"column":17,"line":143}}},{"id":"64","mutatorName":"PrecomputedMutator","replacement":"isGlob(src) && src.length > 0","status":"Timeout","location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"67","mutatorName":"PrecomputedMutator","replacement":"src.substring","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.106 s)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: src.substring(...).forEach is not a function\n\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n    > 198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n          |                                                          ^\n      199 |           zipArchive.glob(globPart);\n      200 |         }) : (stryCov_9fa48(\"67\", \"68\"), src.split(stryMutAct_9fa48(\"71\") ? 'hello' : stryMutAct_9fa48(\"70\") ? '' : stryMutAct_9fa48(\"69\") ? ' ' : (stryCov_9fa48(\"69\", \"70\", \"71\"), ',')).forEach(globPart => {\n      201 |           zipArchive.glob(stryMutAct_9fa48(\"74\") ? globPart.split('').reverse().join('') : stryMutAct_9fa48(\"73\") ? globPart.substring(1) : stryMutAct_9fa48(\"72\") ? globPart.replace('glob', 'bug') : (stryCov_9fa48(\"72\", \"73\", \"74\"), globPart));\n\n      at forEach (lib/ZipAFolder.ts:198:58)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: src.substring(...).forEach is not a function\n\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n    > 198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n          |                                                          ^\n      199 |           zipArchive.glob(globPart);\n      200 |         }) : (stryCov_9fa48(\"67\", \"68\"), src.split(stryMutAct_9fa48(\"71\") ? 'hello' : stryMutAct_9fa48(\"70\") ? '' : stryMutAct_9fa48(\"69\") ? ' ' : (stryCov_9fa48(\"69\", \"70\", \"71\"), ',')).forEach(globPart => {\n      201 |           zipArchive.glob(stryMutAct_9fa48(\"74\") ? globPart.split('').reverse().join('') : stryMutAct_9fa48(\"73\") ? globPart.substring(1) : stryMutAct_9fa48(\"72\") ? globPart.replace('glob', 'bug') : (stryCov_9fa48(\"72\", \"73\", \"74\"), globPart));\n\n      at forEach (lib/ZipAFolder.ts:198:58)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: src.substring(...).forEach is not a function\n\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n    > 198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n          |                                                          ^\n      199 |           zipArchive.glob(globPart);\n      200 |         }) : (stryCov_9fa48(\"67\", \"68\"), src.split(stryMutAct_9fa48(\"71\") ? 'hello' : stryMutAct_9fa48(\"70\") ? '' : stryMutAct_9fa48(\"69\") ? ' ' : (stryCov_9fa48(\"69\", \"70\", \"71\"), ',')).forEach(globPart => {\n      201 |           zipArchive.glob(stryMutAct_9fa48(\"74\") ? globPart.split('').reverse().join('') : stryMutAct_9fa48(\"73\") ? globPart.substring(1) : stryMutAct_9fa48(\"72\") ? globPart.replace('glob', 'bug') : (stryCov_9fa48(\"72\", \"73\", \"74\"), globPart));\n\n      at forEach (lib/ZipAFolder.ts:198:58)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: src.substring(...).forEach is not a function\n\n      196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n      197 |           zipArchive.glob(globPart);\n    > 198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n          |                                                          ^\n      199 |           zipArchive.glob(globPart);\n      200 |         }) : (stryCov_9fa48(\"67\", \"68\"), src.split(stryMutAct_9fa48(\"71\") ? 'hello' : stryMutAct_9fa48(\"70\") ? '' : stryMutAct_9fa48(\"69\") ? ' ' : (stryCov_9fa48(\"69\", \"70\", \"71\"), ',')).forEach(globPart => {\n      201 |           zipArchive.glob(stryMutAct_9fa48(\"74\") ? globPart.split('').reverse().join('') : stryMutAct_9fa48(\"73\") ? globPart.substring(1) : stryMutAct_9fa48(\"72\") ? globPart.replace('glob', 'bug') : (stryCov_9fa48(\"72\", \"73\", \"74\"), globPart));\n\n      at forEach (lib/ZipAFolder.ts:198:58)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   92.95 |    50.19 |   78.57 |   92.85 |                   \n\n ZipAFolder.ts |   92.95 |    50.19 |   78.57 |   92.85 | 26,41,197-201     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 1 skipped, 17 passed, 22 total\nSnapshots:   0 total\nTime:        8.315 s, estimated 9 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":26,"line":144},"start":{"column":17,"line":144}}},{"id":"68","mutatorName":"PrecomputedMutator","replacement":"src.toUpperCase","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.264 s)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: src.toUpperCase(...).forEach is not a function\n\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n    > 196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n          |                                                       ^\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n      199 |           zipArchive.glob(globPart);\n\n      at forEach (lib/ZipAFolder.ts:196:55)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: src.toUpperCase(...).forEach is not a function\n\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n    > 196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n          |                                                       ^\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n      199 |           zipArchive.glob(globPart);\n\n      at forEach (lib/ZipAFolder.ts:196:55)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: src.toUpperCase(...).forEach is not a function\n\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n    > 196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n          |                                                       ^\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n      199 |           zipArchive.glob(globPart);\n\n      at forEach (lib/ZipAFolder.ts:196:55)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: src.toUpperCase(...).forEach is not a function\n\n      194 |       zipArchive.pipe(stryMutAct_9fa48(\"62\") ? output.end() : stryMutAct_9fa48(\"61\") ? undefined : stryMutAct_9fa48(\"60\") ? output.write('buggy') : (stryCov_9fa48(\"60\", \"61\", \"62\"), output));\n      195 |       if (stryMutAct_9fa48(\"64\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"63\") ? !isGlob(src) : (stryCov_9fa48(\"63\", \"64\"), (stryMutAct_9fa48(\"66\") ? isGlob !== true : stryMutAct_9fa48(\"65\") ? isGlob === false : (stryCov_9fa48(\"65\", \"66\"), isGlob))(src))) {\n    > 196 |         stryMutAct_9fa48(\"68\") ? src.toUpperCase(',').forEach(globPart => {\n          |                                                       ^\n      197 |           zipArchive.glob(globPart);\n      198 |         }) : stryMutAct_9fa48(\"67\") ? src.substring(',').forEach(globPart => {\n      199 |           zipArchive.glob(globPart);\n\n      at forEach (lib/ZipAFolder.ts:196:55)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   92.95 |     49.8 |   78.57 |   92.85 |                   \n\n ZipAFolder.ts |   92.95 |     49.8 |   78.57 |   92.85 | 26,41,197-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 1 skipped, 17 passed, 22 total\nSnapshots:   0 total\nTime:        8.516 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":26,"line":144},"start":{"column":17,"line":144}}},{"id":"69","mutatorName":"PrecomputedMutator","replacement":"' '","status":"Timeout","location":{"end":{"column":30,"line":144},"start":{"column":27,"line":144}}},{"id":"70","mutatorName":"PrecomputedMutator","replacement":"''","status":"Timeout","location":{"end":{"column":30,"line":144},"start":{"column":27,"line":144}}},{"id":"71","mutatorName":"PrecomputedMutator","replacement":"'hello'","status":"Timeout","location":{"end":{"column":30,"line":144},"start":{"column":27,"line":144}}},{"id":"72","mutatorName":"PrecomputedMutator","replacement":"globPart.replace('glob', 'bug')","status":"Timeout","location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"73","mutatorName":"PrecomputedMutator","replacement":"globPart.substring(1)","status":"Survived","testsCompleted":1,"location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"74","mutatorName":"PrecomputedMutator","replacement":"globPart.split('').reverse().join('')","status":"Survived","testsCompleted":1,"location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"78","mutatorName":"PrecomputedMutator","replacement":"src.slice(1)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   184894\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.52 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.52 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        5.094 s, estimated 9 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"75","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, true)","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"76","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, false, {\n  dereference: true\n})","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"77","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, false, {\n  exclude: ['**/.*']\n})","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (9.095 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   469571\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    49.41 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    49.41 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        9.238 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"80","mutatorName":"PrecomputedMutator","replacement":"src.split('').reverse().join('')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.018 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    51.75 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    51.75 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        5.263 s, estimated 9 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"79","mutatorName":"PrecomputedMutator","replacement":"src.toUpperCase()","status":"Timeout","location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"81","mutatorName":"PrecomputedMutator","replacement":"true","status":"Timeout","location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}},{"id":"84","mutatorName":"PrecomputedMutator","replacement":"zipArchive.append","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Unhandled error. (ArchiverError {\n      m\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.52 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.52 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nessage: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at errorOrDestroy (../../node_modules/readable-stream/lib/internal/streams/destroy.js:90:101)\n      at Archiver.onerror (../../node_modules/readable-stream/lib/_stream_readable.js:650:47)\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct\n_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Unhandled error. (ArchiverError {\n      message: 'entry name must be a non-empty string value',\n      code: 'ENTRYNAMEREQUIRED',\n      data: undefined\n    })\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                                                                                                                        ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Archiver.append (../../node_modules/archiver/lib/core.js:567:10)\n      at append (lib/ZipAFolder.ts:210:136)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.358 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":150},"start":{"column":13,"line":150}}},{"id":"86","mutatorName":"PrecomputedMutator","replacement":"zipArchive.pipe","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    51.75 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    51.75 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\n48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7\n)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      208 |         }) : stryMutAct_9fa48(\"75\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"75\", \"76\", \"77\"), zipArchive.directory(stryMutAct_9fa48(\"80\") ? src.split('').reverse().join('') : stryMutAct_9fa48(\"79\") ? src.toUpperCase() : stryMutAct_9fa48(\"78\") ? src.slice(1) : (stryCov_9fa48(\"78\", \"79\", \"80\"), src), stryMutAct_9fa48(\"83\") ? '**/*' : stryMutAct_9fa48(\"82\") ? '*' : stryMutAct_9fa48(\"81\") ? true : (stryCov_9fa48(\"81\", \"82\", \"83\"), false)));\n      209 |       }\n    > 210 |       stryMutAct_9fa48(\"86\") ? zipArchive.pipe() : stryMutAct_9fa48(\"85\") ? zipArchive.destroy() : stryMutAct_9fa48(\"84\") ? zipArchive.append() : (stryCov_9fa48(\"84\", \"85\", \"86\"), zipArchive.finalize());\n          |                                           ^\n      211 |     });\n      212 |   }\n      213 | }\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:210:43)\n      at Function.compress (lib/ZipAFolder.ts:191:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        3.839 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":150},"start":{"column":13,"line":150}}},{"id":"82","mutatorName":"PrecomputedMutator","replacement":"'*'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.071 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 236\n    Received:   459760\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   469985\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   94.36 |    52.14 |   85.71 |   94.28 |                   \n\n ZipAFolder.ts |   94.36 |    52.14 |   85.71 |   94.28 | 26,41,197-199     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        8.295 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}},{"id":"83","mutatorName":"PrecomputedMutator","replacement":"'**/*'","status":"Survived","testsCompleted":1,"location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}},{"id":"85","mutatorName":"PrecomputedMutator","replacement":"zipArchive.destroy","status":"Timeout","location":{"end":{"column":32,"line":150},"start":{"column":13,"line":150}}}],"source":"'use strict';\nimport {WriteStream} from 'fs';\nimport * as path from 'path';\nimport * as archiver from 'archiver';\nimport * as fs from 'fs';\nimport * as isGlob from 'is-glob';\n\nexport enum COMPRESSION_LEVEL {\n    uncompressed = 0,\n    medium = 5,\n    high = 9,\n}\n\n/**\n * Options to pass in to zip a folder\n * compression default is 'high'\n */\nexport type ZipAFolderOptions = {\n    compression?: COMPRESSION_LEVEL;\n    customWriteStream?: WriteStream;\n};\n\nexport class ZipAFolder {\n    /**\n     * Tars a given folder or a glob into a gzipped tar archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param tarFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async tar(\n        src: string,\n        tarFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: tarFilePath,\n                format: 'tar',\n                zipAFolderOptions,\n                archiverOptions: {\n                    gzip: true,\n                    gzipOptions: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    /**\n     * Zips a given folder or a glob into a zip archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param zipFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async zip(\n        src: string,\n        zipFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    store: true,\n                },\n            });\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    zlib: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    private static async compress({\n        src,\n        targetFilePath,\n        format,\n        zipAFolderOptions,\n        archiverOptions,\n    }: {\n        src: string;\n        targetFilePath?: string;\n        format: archiver.Format;\n        zipAFolderOptions?: ZipAFolderOptions;\n        archiverOptions?: archiver.ArchiverOptions;\n    }): Promise<void | Error> {\n        let output: WriteStream;\n\n        if (!zipAFolderOptions?.customWriteStream && targetFilePath) {\n            const targetBasePath: string = path.dirname(targetFilePath);\n\n            if (targetBasePath === src) {\n                throw new Error('Source and target folder must be different.');\n            }\n            try {\n                if (!isGlob(src)) {\n                    await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise\n                }\n                await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise\n            } catch (e: any) {\n                throw new Error(`Permission error: ${e.message}`);\n            }\n            output = fs.createWriteStream(targetFilePath);\n        } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {\n            output = zipAFolderOptions?.customWriteStream;\n        } else {\n            throw new Error('You must either provide a target file path or a custom write stream to write to.');\n        }\n\n        const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});\n\n        return new Promise((resolve, reject) => {\n            output.on('close', resolve);\n            output.on('error', reject);\n\n            zipArchive.pipe(output);\n\n            if (isGlob(src)) {\n                src.split(',').forEach((globPart) => {\n                    zipArchive.glob(globPart);\n                });\n            } else {\n                zipArchive.directory(src, false);\n            }\n            zipArchive.finalize();\n        });\n    }\n}\n\nexport const zip = ZipAFolder.zip;\nexport const tar = ZipAFolder.tar;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"All tests"}]}},"projectRoot":"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder","config":{"usePrecomputed":true,"mutate":["lib/ZipAFolder.ts"],"reporters":["json","html","progress"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunner":"command","testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"cucumber":{},"jest":{"projectType":"custom","enableFindRelatedTests":true},"mochaOptions":{},"tap":{"testFiles":["{**/@(test|tests|__test__|__tests__)/**,**/*.@(test|tests|spec)}.@(cjs|mjs|js|jsx|ts|tsx|mts|cts)"],"nodeArgs":["-r","{{hookFile}}","{{testFile}}"],"forceBail":true},"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.5","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.2.5","@stryker-mutator/karma-runner":"8.2.5","@stryker-mutator/jasmine-runner":"8.2.5","@stryker-mutator/jest-runner":"8.2.5","mocha":"10.4.0","jasmine-core":"5.1.2","jest":"29.7.0","typescript":"5.4.4","ts-jest":"29.1.2"}}}