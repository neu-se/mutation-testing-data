*** using precomputed mutations ***
[32m01:05:38 (2736) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m01:05:38 (2736) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m01:05:39 (2736) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m01:05:39 (2736) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m01:05:39 (2736) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m01:05:39 (2736) INFO ProjectReader[39m Found 1 of 1972 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 401 mutants from MUTATION_TESTING/template-onemutation_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in complex.js: Math.abs replaced with Math.acos
Mutant 1 in complex.js: x replaced with x + 1
Mutant 2 in complex.js: x replaced with x * x
Mutant 3 in complex.js: Math.abs replaced with Math.sin
Mutant 4 in complex.js: x replaced with x * x
Mutant 5 in complex.js: Math.exp replaced with Math.sin
Mutant 6 in complex.js: x replaced with x * x
Mutant 7 in complex.js: Math.exp replaced with Math.sin
Mutant 8 in complex.js: -x replaced with -y
Mutant 9 in complex.js: -b > x || x > b replaced with -b < x || x < b
Mutant 10 in complex.js: x replaced with x + 1
Mutant 11 in complex.js: Math.abs replaced with Math.sqrt
Mutant 12 in complex.js: y replaced with -y
Mutant 13 in complex.js: a < 3000 && b < 3000 replaced with a > 3000 || b > 3000
Mutant 14 in complex.js: a * a + b * b replaced with a * b + b * a
Mutant 15 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 16 in complex.js: 1 + b * b replaced with 1 - b * b
Mutant 17 in complex.js: 'Invalid Param' replaced with 'Invalid Param' + 1
Mutant 18 in complex.js: Math.abs replaced with Math.floor
Mutant 19 in complex.js: a replaced with b
Mutant 20 in complex.js: Math.abs replaced with Math.sqrt
Mutant 21 in complex.js: b replaced with a
Mutant 22 in complex.js: a === 0 replaced with a !== 0
Mutant 23 in complex.js: Math.log replaced with Math.sqrt
Mutant 24 in complex.js: _b replaced with _a
Mutant 25 in complex.js: b === 0 replaced with b !== 0
Mutant 26 in complex.js: Math.log replaced with Math.sqrt
Mutant 27 in complex.js: _a replaced with _b
Mutant 28 in complex.js: _a < 3000 && _b < 3000 replaced with _a < 3000 || _b < 3000
Mutant 29 in complex.js: Math.log replaced with Math.sqrt
Mutant 30 in complex.js: a * a + b * b replaced with a * b + b * a
Mutant 31 in complex.js: Math.log replaced with Math.log10
Mutant 32 in complex.js: a * a + b * b replaced with a * b + b * a
Mutant 33 in complex.js: a === undefined || a === null replaced with a === undefined || a === null || a === NaN
Mutant 34 in complex.js: b !== undefined replaced with b !== null
Mutant 35 in complex.js: typeof a replaced with a.constructor.name
Mutant 36 in complex.js: 'im' in a && 're' in a replaced with 'im' in a && 're' in b
Mutant 37 in complex.js: 'abs' in a && 'arg' in a replaced with 'abs' in a && 'arg' in b
Mutant 38 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with Number.isFinite(a['abs']) && Number.isFinite(a['arg'])
Mutant 39 in complex.js: Number.isFinite replaced with !Number.isFinite
Mutant 40 in complex.js: Number.isFinite replaced with Number.isNaN
Mutant 41 in complex.js: a['arg'] replaced with a['arg'] + 1
Mutant 42 in complex.js: Math.cos replaced with Math.sin
Mutant 43 in complex.js: a['arg'] replaced with a['arg'] + 1
Mutant 44 in complex.js: Math.sin replaced with Math.cos
Mutant 45 in complex.js: a['arg'] replaced with a['arg'] + 1
Mutant 46 in complex.js: 'r' in a && 'phi' in a replaced with 'r' in a && 'phi' in b
Mutant 47 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with Number.isFinite(a['r']) || Number.isFinite(a['phi'])
Mutant 48 in complex.js: Number.isFinite replaced with Number.isNaN
Mutant 49 in complex.js: Number.isFinite replaced with Number.isNaN
Mutant 50 in complex.js: a['phi'] replaced with a['arg']
Mutant 51 in complex.js: Math.cos replaced with Math.sin
Mutant 52 in complex.js: a['phi'] replaced with a['arg']
Mutant 53 in complex.js: Math.sin replaced with Math.cos
Mutant 54 in complex.js: a['phi'] replaced with a['arg']
Mutant 55 in complex.js: a.length === 2 replaced with a.length < 2
Mutant 56 in complex.js: a.match replaced with a.split
Mutant 57 in complex.js: tokens === null replaced with tokens == null
Mutant 58 in complex.js: for (var i = 0; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}

// Still something on the stack replaced with for (var i = 1; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}
Mutant 59 in complex.js: i < tokens.length replaced with i <= tokens.length
Mutant 60 in complex.js: i++ replaced with i--
Mutant 61 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with c === ' ' || c === '\t' || c === '\n' || c === '+'
Mutant 62 in complex.js: c === '+' replaced with c === '-'
Mutant 63 in complex.js: c === '-' replaced with c === '+'
Mutant 64 in complex.js: c === 'i' || c === 'I' replaced with c === 'j' || c === 'J'
Mutant 65 in complex.js: plus + minus === 0 replaced with plus + minus !== 0
Mutant 66 in complex.js: isNaN replaced with !isNaN
Mutant 67 in complex.js: tokens[i + 1] replaced with tokens[i - 1]
Mutant 68 in complex.js: parseFloat replaced with parseInt
Mutant 69 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 2 ? '-' : '') + tokens[i + 1] + '1'
Mutant 70 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with (minus % 2 ? '-' : '') + '0'
Mutant 71 in complex.js: plus + minus === 0 || isNaN(c) replaced with plus + minus === 0 || c === ' '
Mutant 72 in complex.js: isNaN replaced with isFinite
Mutant 73 in complex.js: c replaced with c + 1
Mutant 74 in complex.js: tokens[i + 1] === 'i' || tokens[i + 1] === 'I' replaced with tokens[i + 1] === 'i' || tokens[i + 1] === 'I' || tokens[i + 1] === 'j'
Mutant 75 in complex.js: parseFloat replaced with parseInt
Mutant 76 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 2 ? '+' : '') + c
Mutant 77 in complex.js: parseFloat replaced with parseInt
Mutant 78 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 2 ? '+' : '') + c
Mutant 79 in complex.js: plus + minus > 0 replaced with plus + minus < 0
Mutant 80 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with isFinite(z['re']) || isFinite(z['im'])
Mutant 81 in complex.js: isNaN replaced with !isNaN
Mutant 82 in complex.js: isNaN replaced with !isNaN
Mutant 83 in complex.js: !(this instanceof Complex) replaced with this instanceof Complex
Mutant 84 in complex.js: parse(a, b) replaced with parse(a + b)
Mutant 85 in complex.js: a replaced with a + 1
Mutant 86 in complex.js: b replaced with a
Mutant 87 in complex.js: this['abs'] replaced with this['abs'] + 1
Mutant 88 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 89 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 90 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 91 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 92 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 93 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 94 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 95 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 96 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 97 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 98 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 99 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 100 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 101 in complex.js: z['isZero'] replaced with z['isInfinite']
Mutant 102 in complex.js: this['isZero'] replaced with this['isInfinite']
Mutant 103 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 104 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 105 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 106 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 107 in complex.js: z['im'] === 0 && this['im'] === 0 replaced with z['im'] === 0 && this['re'] === 0
Mutant 108 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with (this['isZero']() || z['isZero']()) && (this['isInfinite']() || z['isInfinite']())
Mutant 109 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 110 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 111 in complex.js: this['isInfinite']() || z['isZero']() replaced with this['isInfinite']() && z['isZero']()
Mutant 112 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 113 in complex.js: z['isZero'] replaced with z['isInfinite']
Mutant 114 in complex.js: this['isZero']() || z['isInfinite']() replaced with this['isZero']() && z['isInfinite']()
Mutant 115 in complex.js: this['isZero'] replaced with this['isInfinite']
Mutant 116 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 117 in complex.js: 0 === d replaced with 0 < d
Mutant 118 in complex.js: Math.abs(c) < Math.abs(d) replaced with c < d
Mutant 119 in complex.js: Math.abs replaced with Math.floor
Mutant 120 in complex.js: c replaced with c * d
Mutant 121 in complex.js: Math.abs replaced with Math.floor
Mutant 122 in complex.js: z['isZero']() replaced with z['isInfinite']()
Mutant 123 in complex.js: z['im'] === 0 replaced with z['im'] !== 0
Mutant 124 in complex.js: b === 0 && a > 0 replaced with b === 0 && a < 0
Mutant 125 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(a * z['re'])
Mutant 126 in complex.js: Math.pow replaced with Math.sqrt
Mutant 127 in complex.js: a replaced with a + 1
Mutant 128 in complex.js: z['re'] replaced with z['im']
Mutant 129 in complex.js: a === 0 replaced with a !== 0
Mutant 130 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, z['im'])
Mutant 131 in complex.js: Math.pow replaced with Math.exp
Mutant 132 in complex.js: b replaced with a
Mutant 133 in complex.js: z['re'] replaced with z['im']
Mutant 134 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(a, z['re'])
Mutant 135 in complex.js: Math.pow replaced with Math.sqrt
Mutant 136 in complex.js: b replaced with a
Mutant 137 in complex.js: z['re'] replaced with z['im']
Mutant 138 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(a, z['re'])
Mutant 139 in complex.js: Math.pow replaced with Math.sqrt
Mutant 140 in complex.js: b replaced with a
Mutant 141 in complex.js: z['re'] replaced with z['im']
Mutant 142 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, z['im'])
Mutant 143 in complex.js: b replaced with b + 1
Mutant 144 in complex.js: z['re'] replaced with z['im']
Mutant 145 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 0 && b === 0 && z['re'] > 0 && z['im'] < 0
Mutant 146 in complex.js: Math.atan2(b, a) replaced with Math.atan2(b, b)
Mutant 147 in complex.js: b replaced with a
Mutant 148 in complex.js: a replaced with b
Mutant 149 in complex.js: logHypot(a, b) replaced with logHypot(a + b)
Mutant 150 in complex.js: a replaced with a + 1
Mutant 151 in complex.js: b replaced with a
Mutant 152 in complex.js: Math.exp replaced with Math.sqrt
Mutant 153 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['im'] * loh + z['re'] * arg
Mutant 154 in complex.js: Math.cos replaced with Math.sin
Mutant 155 in complex.js: b replaced with b + 1
Mutant 156 in complex.js: Math.sin replaced with Math.cos
Mutant 157 in complex.js: b replaced with -b
Mutant 158 in complex.js: this['abs'] replaced with this['re']
Mutant 159 in complex.js: a >= 0 replaced with a > 0
Mutant 160 in complex.js: b === 0 replaced with b == 0
Mutant 161 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 162 in complex.js: a replaced with a + 1
Mutant 163 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 164 in complex.js: 2.0 * (r + a) replaced with 2.0 * (r - a)
Mutant 165 in complex.js: Math.abs replaced with Math.acos
Mutant 166 in complex.js: b replaced with -b
Mutant 167 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 168 in complex.js: 2 * (r - a) replaced with 2 * (r + a)
Mutant 169 in complex.js: a <= 0 replaced with a < 0
Mutant 170 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 171 in complex.js: 2.0 * (r - a) replaced with 2.0 * (r + a)
Mutant 172 in complex.js: Math.abs replaced with Math.acos
Mutant 173 in complex.js: b replaced with -b
Mutant 174 in complex.js: 2 * (r + a) replaced with 2 * (r - a)
Mutant 175 in complex.js: Math.exp replaced with Math.sqrt
Mutant 176 in complex.js: this['re'] replaced with this['im']
Mutant 177 in complex.js: this['im'] === 0 replaced with this['im'] !== 0
Mutant 178 in complex.js: Math.cos replaced with Math.sin
Mutant 179 in complex.js: this['im'] replaced with this['re']
Mutant 180 in complex.js: Math.sin replaced with Math.cos
Mutant 181 in complex.js: this['im'] replaced with this['re']
Mutant 182 in complex.js: Math.expm1 replaced with Math.exp
Mutant 183 in complex.js: a replaced with a + 1
Mutant 184 in complex.js: Math.cos replaced with Math.sin
Mutant 185 in complex.js: b replaced with b + 1
Mutant 186 in complex.js: b replaced with b + 1
Mutant 187 in complex.js: a replaced with a + 1
Mutant 188 in complex.js: Math.sin replaced with Math.cos
Mutant 189 in complex.js: b replaced with -b
Mutant 190 in complex.js: b === 0 && a > 0 replaced with b === 0 && a < 0
Mutant 191 in complex.js: logHypot(a, b) replaced with logHypot(a + b)
Mutant 192 in complex.js: a replaced with a + 1
Mutant 193 in complex.js: b replaced with b + 1
Mutant 194 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a, b)
Mutant 195 in complex.js: b replaced with a
Mutant 196 in complex.js: a replaced with a + 1
Mutant 197 in complex.js: hypot(this['re'], this['im']) replaced with hypot(this['im'], this['re'])
Mutant 198 in complex.js: this['re'] replaced with this['im']
Mutant 199 in complex.js: this['im'] replaced with this['re']
Mutant 200 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(this['re'], this['im'])
Mutant 201 in complex.js: this['im'] replaced with this['re']
Mutant 202 in complex.js: this['re'] replaced with this['im']
Mutant 203 in complex.js: Math.sin replaced with Math.cos
Mutant 204 in complex.js: a replaced with a + 1
Mutant 205 in complex.js: cosh replaced with cos
Mutant 206 in complex.js: b replaced with b + 1
Mutant 207 in complex.js: Math.cos replaced with Math.sin
Mutant 208 in complex.js: a replaced with b
Mutant 209 in complex.js: sinh replaced with sin
Mutant 210 in complex.js: b replaced with -b
Mutant 211 in complex.js: Math.cos replaced with Math.sin
Mutant 212 in complex.js: a replaced with a + 1
Mutant 213 in complex.js: cosh replaced with -cosh
Mutant 214 in complex.js: b replaced with b + 1
Mutant 215 in complex.js: Math.sin replaced with Math.cos
Mutant 216 in complex.js: a replaced with -a
Mutant 217 in complex.js: sinh replaced with cosh
Mutant 218 in complex.js: b replaced with -b
Mutant 219 in complex.js: Math.cos replaced with Math.sin
Mutant 220 in complex.js: a replaced with a + 1
Mutant 221 in complex.js: cosh replaced with sinh
Mutant 222 in complex.js: b replaced with b + 1
Mutant 223 in complex.js: Math.sin replaced with Math.cos
Mutant 224 in complex.js: a replaced with b
Mutant 225 in complex.js: sinh replaced with cosh
Mutant 226 in complex.js: b replaced with -b
Mutant 227 in complex.js: Math.cos replaced with Math.sin
Mutant 228 in complex.js: a replaced with a + 1
Mutant 229 in complex.js: cosh replaced with sinh
Mutant 230 in complex.js: b replaced with b + 1
Mutant 231 in complex.js: Math.sin replaced with Math.cos
Mutant 232 in complex.js: a replaced with -a
Mutant 233 in complex.js: sinh replaced with cosh
Mutant 234 in complex.js: b replaced with a
Mutant 235 in complex.js: cosh replaced with sinh
Mutant 236 in complex.js: 2 * b replaced with 2 * a
Mutant 237 in complex.js: Math.cos replaced with Math.sin
Mutant 238 in complex.js: 2 * a replaced with 2 * b
Mutant 239 in complex.js: Math.cos replaced with Math.sin
Mutant 240 in complex.js: a replaced with a + 1
Mutant 241 in complex.js: cosh replaced with sinh
Mutant 242 in complex.js: b replaced with a
Mutant 243 in complex.js: Math.sin replaced with Math.cos
Mutant 244 in complex.js: a replaced with b
Mutant 245 in complex.js: sinh replaced with cosh
Mutant 246 in complex.js: b replaced with a
Mutant 247 in complex.js: cosh replaced with sinh
Mutant 248 in complex.js: 2 * b replaced with 2 * a
Mutant 249 in complex.js: Math.cos replaced with Math.sin
Mutant 250 in complex.js: 2 * a replaced with 2 * b
Mutant 251 in complex.js: Math.sin replaced with Math.cos
Mutant 252 in complex.js: a replaced with b
Mutant 253 in complex.js: cosh replaced with sinh
Mutant 254 in complex.js: b replaced with a
Mutant 255 in complex.js: Math.cos replaced with Math.sin
Mutant 256 in complex.js: a replaced with -a
Mutant 257 in complex.js: sinh replaced with cosh
Mutant 258 in complex.js: b replaced with -b
Mutant 259 in complex.js: a === 0 replaced with a !== 0
Mutant 260 in complex.js: b === 1 replaced with b === -1
Mutant 261 in complex.js: b === -1 replaced with b === 1
Mutant 262 in complex.js: b === 0 replaced with b == 0
Mutant 263 in complex.js: Math.atan2(1, a) replaced with Math.atan2(0, a)
Mutant 264 in complex.js: 1 replaced with 0
Mutant 265 in complex.js: a replaced with b
Mutant 266 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 267 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 268 in complex.js: a replaced with a + 1
Mutant 269 in complex.js: Math.cos replaced with Math.sin
Mutant 270 in complex.js: b replaced with a
Mutant 271 in complex.js: cosh replaced with sinh
Mutant 272 in complex.js: a replaced with a + 1
Mutant 273 in complex.js: Math.sin replaced with Math.cos
Mutant 274 in complex.js: b replaced with -b
Mutant 275 in complex.js: cosh replaced with sinh
Mutant 276 in complex.js: a replaced with a + 1
Mutant 277 in complex.js: Math.cos replaced with Math.sin
Mutant 278 in complex.js: b replaced with b + 1
Mutant 279 in complex.js: sinh replaced with sin
Mutant 280 in complex.js: a replaced with a + 1
Mutant 281 in complex.js: Math.sin replaced with Math.cos
Mutant 282 in complex.js: b replaced with b + 1
Mutant 283 in complex.js: cosh replaced with sinh
Mutant 284 in complex.js: a replaced with a + 1
Mutant 285 in complex.js: Math.cos replaced with Math.sin
Mutant 286 in complex.js: b replaced with b + 1
Mutant 287 in complex.js: sinh replaced with cosh
Mutant 288 in complex.js: a replaced with a + 1
Mutant 289 in complex.js: Math.sin replaced with Math.cos
Mutant 290 in complex.js: b replaced with -b
Mutant 291 in complex.js: cosh replaced with sinh
Mutant 292 in complex.js: a replaced with a + 1
Mutant 293 in complex.js: Math.cos replaced with Math.sin
Mutant 294 in complex.js: b replaced with b + 1
Mutant 295 in complex.js: sinh replaced with cosh
Mutant 296 in complex.js: a replaced with a + 1
Mutant 297 in complex.js: Math.sin replaced with Math.cos
Mutant 298 in complex.js: b replaced with -b
Mutant 299 in complex.js: Math.cos replaced with Math.sin
Mutant 300 in complex.js: 2 * b replaced with 2 * a
Mutant 301 in complex.js: cosh replaced with sinh
Mutant 302 in complex.js: 2 * a replaced with 2 * b
Mutant 303 in complex.js: sinh replaced with cosh
Mutant 304 in complex.js: a replaced with a + 1
Mutant 305 in complex.js: Math.cos replaced with Math.sin
Mutant 306 in complex.js: b replaced with -b
Mutant 307 in complex.js: cosh replaced with sinh
Mutant 308 in complex.js: a replaced with a + 1
Mutant 309 in complex.js: Math.sin replaced with Math.cos
Mutant 310 in complex.js: b replaced with -b
Mutant 311 in complex.js: Math.cos replaced with Math.sin
Mutant 312 in complex.js: 2 * b replaced with 2 * a
Mutant 313 in complex.js: cosh replaced with cos
Mutant 314 in complex.js: 2 * a replaced with 2 * b
Mutant 315 in complex.js: cosh replaced with sinh
Mutant 316 in complex.js: a replaced with a + 1
Mutant 317 in complex.js: Math.cos replaced with Math.sin
Mutant 318 in complex.js: b replaced with -b
Mutant 319 in complex.js: sinh replaced with cosh
Mutant 320 in complex.js: a replaced with a + 1
Mutant 321 in complex.js: Math.sin replaced with Math.cos
Mutant 322 in complex.js: b replaced with -b
Mutant 323 in complex.js: this['asin'] replaced with this['acos']
Mutant 324 in complex.js: this['acos'] replaced with this['acos'] + 1
Mutant 325 in complex.js: res['im'] <= 0 replaced with res['im'] < 0
Mutant 326 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(x['im'], x['re'])
Mutant 327 in complex.js: x['re'] replaced with x['im']
Mutant 328 in complex.js: x['im'] replaced with x['re']
Mutant 329 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(x['re'], temp)
Mutant 330 in complex.js: Math.atan2 replaced with Math.atan
Mutant 331 in complex.js: x['im'] replaced with x['re']
Mutant 332 in complex.js: temp replaced with temp + 1
Mutant 333 in complex.js: noIM replaced with noIM = false
Mutant 334 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 335 in complex.js: b === 0 replaced with b !== 0
Mutant 336 in complex.js: Math.log replaced with Math.sqrt
Mutant 337 in complex.js: a + Math.sqrt(a * a + 1) replaced with a - Math.sqrt(a * a + 1)
Mutant 338 in complex.js: Math.sqrt replaced with Math.abs
Mutant 339 in complex.js: a * a + 1 replaced with a * a - 1
Mutant 340 in complex.js: this['isZero']() replaced with this['isInfinite']()
Mutant 341 in complex.js: this['isZero']() replaced with this['isInfinite']()
Mutant 342 in complex.js: this['isInfinite']() replaced with this['isFinite']()
Mutant 343 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 344 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10, places || 1)
Mutant 345 in complex.js: Math.pow replaced with Math.sqrt
Mutant 346 in complex.js: 10 replaced with 0
Mutant 347 in complex.js: places || 0 replaced with places || 1
Mutant 348 in complex.js: Math.ceil replaced with Math.floor
Mutant 349 in complex.js: this['re'] * places replaced with this['im'] * places
Mutant 350 in complex.js: Math.ceil replaced with Math.floor
Mutant 351 in complex.js: this['im'] * places replaced with this['re'] * places
Mutant 352 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10, places || 1)
Mutant 353 in complex.js: Math.pow replaced with Math.sqrt
Mutant 354 in complex.js: 10 replaced with 0
Mutant 355 in complex.js: places || 0 replaced with places && 0
Mutant 356 in complex.js: Math.floor replaced with Math.ceil
Mutant 357 in complex.js: this['re'] * places replaced with this['im'] * places
Mutant 358 in complex.js: Math.floor replaced with Math.ceil
Mutant 359 in complex.js: this['im'] * places replaced with this['re'] * places
Mutant 360 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10, places || 1)
Mutant 361 in complex.js: Math.pow replaced with Math.sqrt
Mutant 362 in complex.js: 10 replaced with 0
Mutant 363 in complex.js: places || 0 replaced with places || 1
Mutant 364 in complex.js: Math.round replaced with Math.floor
Mutant 365 in complex.js: this['re'] * places replaced with this['im'] * places
Mutant 366 in complex.js: Math.round replaced with Math.floor
Mutant 367 in complex.js: this['im'] * places replaced with this['im'] * places + 1
Mutant 368 in complex.js: Math.abs replaced with Math.floor
Mutant 369 in complex.js: z['re'] - this['re'] replaced with z['im'] - this['im']
Mutant 370 in complex.js: Math.abs replaced with Math.floor
Mutant 371 in complex.js: z['im'] - this['im'] replaced with z['im'] + this['im']
Mutant 372 in complex.js: this['isNaN']() replaced with this['isFinite']()
Mutant 373 in complex.js: this['isInfinite']() replaced with this['isNaN']()
Mutant 374 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with Math.abs(a) <= Complex['EPSILON']
Mutant 375 in complex.js: Math.abs replaced with Math.floor
Mutant 376 in complex.js: a replaced with a + 1
Mutant 377 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with Math.abs(b) <= Complex['EPSILON']
Mutant 378 in complex.js: Math.abs replaced with Math.floor
Mutant 379 in complex.js: b replaced with -b
Mutant 380 in complex.js: b === 0 replaced with b == 0
Mutant 381 in complex.js: a !== 0 replaced with a !== 1
Mutant 382 in complex.js: b < 0 replaced with b > 0
Mutant 383 in complex.js: b < 0 replaced with b > 0
Mutant 384 in complex.js: 1 !== b replaced with b !== 1
Mutant 385 in complex.js: this['im'] === 0 replaced with this['im'] !== 0
Mutant 386 in complex.js: isNaN replaced with !isNaN
Mutant 387 in complex.js: this['re'] replaced with this['im']
Mutant 388 in complex.js: isNaN replaced with isFinite
Mutant 389 in complex.js: this['im'] replaced with this['re']
Mutant 390 in complex.js: isFinite replaced with !isFinite
Mutant 391 in complex.js: this['re'] replaced with this['im']
Mutant 392 in complex.js: isFinite replaced with isNaN
Mutant 393 in complex.js: this['im'] replaced with this['re']
Mutant 394 in complex.js: this['isNaN'] replaced with this['isInfinite']
Mutant 395 in complex.js: this['isFinite'] replaced with this['isInfinite']
Mutant 396 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define === 'function' && define['amd'] && false
Mutant 397 in complex.js: typeof exports === 'object' replaced with typeof exports === 'function'
Mutant 398 in complex.js: Object.defineProperty(Complex, "__esModule", {
  'value': true
}) replaced with Object.defineProperty(Complex, "__esModule", {
  'value': false
})
Mutant 399 in complex.js: Complex replaced with Complex.prototype.isInfinite = function () {
  return !(this['isNaN']() || this['isFinite']());
}
Mutant 400 in complex.js: {
  'value': true
} replaced with {
  'value': false
}
[32m01:05:39 (2736) INFO Instrumenter[39m Instrumented 1 source file(s) with 401 mutant(s)
[32m01:05:40 (2736) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m01:05:41 (2736) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m01:05:41 (2736) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m01:05:42 (2736) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 518 ms, overhead 1 ms).
Mutation testing 4% (elapsed: <1m, remaining: ~3m) 19/401 tested (12 survived, 0 timed out)
Mutation testing 9% (elapsed: <1m, remaining: ~3m) 38/401 tested (13 survived, 0 timed out)
Mutation testing 14% (elapsed: <1m, remaining: ~3m) 57/401 tested (14 survived, 0 timed out)
Mutation testing 19% (elapsed: <1m, remaining: ~2m) 77/401 tested (19 survived, 0 timed out)
Mutation testing 23% (elapsed: <1m, remaining: ~2m) 96/401 tested (26 survived, 0 timed out)
Mutation testing 28% (elapsed: ~1m, remaining: ~2m) 116/401 tested (36 survived, 0 timed out)
Mutation testing 33% (elapsed: ~1m, remaining: ~2m) 135/401 tested (41 survived, 0 timed out)
Mutation testing 38% (elapsed: ~1m, remaining: ~2m) 155/401 tested (46 survived, 0 timed out)
Mutation testing 43% (elapsed: ~1m, remaining: ~1m) 174/401 tested (49 survived, 0 timed out)
Mutation testing 48% (elapsed: ~1m, remaining: ~1m) 193/401 tested (51 survived, 0 timed out)
Mutation testing 53% (elapsed: ~1m, remaining: ~1m) 213/401 tested (52 survived, 0 timed out)
Mutation testing 57% (elapsed: ~2m, remaining: ~1m) 232/401 tested (52 survived, 0 timed out)
Mutation testing 62% (elapsed: ~2m, remaining: ~1m) 251/401 tested (68 survived, 0 timed out)
Mutation testing 67% (elapsed: ~2m, remaining: ~1m) 271/401 tested (84 survived, 0 timed out)
Mutation testing 72% (elapsed: ~2m, remaining: <1m) 290/401 tested (84 survived, 0 timed out)
Mutation testing 77% (elapsed: ~2m, remaining: <1m) 310/401 tested (95 survived, 0 timed out)
Mutation testing 82% (elapsed: ~2m, remaining: <1m) 329/401 tested (114 survived, 0 timed out)
Mutation testing 86% (elapsed: ~3m, remaining: <1m) 348/401 tested (130 survived, 0 timed out)
Mutation testing 91% (elapsed: ~3m, remaining: <1m) 368/401 tested (146 survived, 0 timed out)
Mutation testing 96% (elapsed: ~3m, remaining: <1m) 387/401 tested (154 survived, 0 timed out)

All tests
  ✓ All tests (killed 241)

[Survived] PrecomputedMutator
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.acos(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:21
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x + 1) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:51
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x * x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:12
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.sin(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:21
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x * x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:38
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.sin(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:47
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x * x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:52
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.sin(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-y)) * 0.5;

[Survived] PrecomputedMutator
complex.js:94:22
-       var b = Math.abs(y);
+       var b = Math.abs(-y);

[Survived] PrecomputedMutator
complex.js:106:16
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.cbrt(1 + b * b);

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(1 - b * b);

[Survived] PrecomputedMutator
complex.js:179:9
-       if (a === undefined || a === null) {
+       if (a === undefined || a === null || a === NaN) {

[Survived] PrecomputedMutator
complex.js:194:63
-               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
+               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'] + 1)) {

[Survived] PrecomputedMutator
complex.js:222:15
-             if (tokens === null) {
+             if (tokens == null) {

[Survived] PrecomputedMutator
complex.js:243:28
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
+                   z['im'] += parseInt((minus % 2 ? '-' : '') + tokens[i + 1]);

[Survived] PrecomputedMutator
complex.js:252:19
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (plus + minus === 0 || c === ' ') {

[Survived] PrecomputedMutator
complex.js:252:47
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (plus + minus === 0 || isNaN(c + 1)) {

[Survived] PrecomputedMutator
complex.js:256:19
-                 if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
+                 if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I' || tokens[i + 1] === 'j') {

[Survived] PrecomputedMutator
complex.js:267:15
-             if (plus + minus > 0) {
+             if (plus + minus < 0) {

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isFinite(z['re']) || isFinite(z['im'])) {

[Survived] PrecomputedMutator
complex.js:334:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() && z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isNaN']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:339:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:358:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() && z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isNaN']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:382:55
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isInfinite']() && z['isInfinite']())) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isNaN']())) {

[Survived] PrecomputedMutator
complex.js:387:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:416:11
-         if (this['isInfinite']() || z['isZero']()) {
+         if (this['isInfinite']() && z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:416:11
-         if (this['isInfinite']() || z['isZero']()) {
+         if (this['isNaN']() || z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isZero']() && z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:421:31
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isZero']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:437:11
-         if (Math.abs(c) < Math.abs(d)) {
+         if (Math.floor(c) < Math.abs(d)) {

[Survived] PrecomputedMutator
complex.js:469:11
-         if (z['isZero']()) {
+         if (z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:484:34
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['im']), 0);

[Survived] PrecomputedMutator
complex.js:484:46
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['im']), 0);

[Survived] PrecomputedMutator
complex.js:486:37
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.sqrt(b, z['re']));

[Survived] PrecomputedMutator
complex.js:486:49
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.pow(b, z['im']));

[Survived] PrecomputedMutator
complex.js:488:35
-                 return new Complex(-Math.pow(b, z['re']), 0);
+                 return new Complex(-Math.sqrt(b, z['re']), 0);

[Survived] PrecomputedMutator
complex.js:490:38
-                 return new Complex(0, -Math.pow(b, z['re']));
+                 return new Complex(0, -Math.pow(b, z['im']));

[Survived] PrecomputedMutator
complex.js:490:50
-                 return new Complex(0, -Math.pow(b, z['re']));
+                 return new Complex(0, -Math.pow(b, z['im']));

[Survived] PrecomputedMutator
complex.js:543:13
-           if (b === 0) {
+           if (b == 0) {

[Survived] PrecomputedMutator
complex.js:549:23
-           re = Math.abs(b) / Math.sqrt(2 * (r - a));
+           re = Math.abs(-b) / Math.sqrt(2 * (r - a));

[Survived] PrecomputedMutator
complex.js:555:23
-           im = Math.abs(b) / Math.sqrt(2 * (r + a));
+           im = Math.abs(-b) / Math.sqrt(2 * (r + a));

[Survived] PrecomputedMutator
complex.js:570:11
-         if (this['im'] === 0) {
+         if (this['im'] !== 0) {

[Survived] PrecomputedMutator
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (b === 0 && a < 0) {

[Survived] PrecomputedMutator
complex.js:628:14
-         return hypot(this['re'], this['im']);
+         return hypot(this['im'], this['re']);

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * sinh(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * a) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:41
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.sin(2 * a);

[Survived] PrecomputedMutator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * b);

[Survived] PrecomputedMutator
complex.js:730:9
-           Math.cos(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:18
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a + 1) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:23
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * sinh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:28
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(a) / d,

[Survived] PrecomputedMutator
complex.js:731:9
-           Math.sin(a) * sinh(b) / d);
+           Math.cos(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:18
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(b) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:23
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * cosh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:28
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * sinh(a) / d);

[Survived] PrecomputedMutator
complex.js:745:21
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * sinh(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:26
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * a) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:41
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.sin(2 * a);

[Survived] PrecomputedMutator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * b);

[Survived] PrecomputedMutator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.cos(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:18
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(b) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:23
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * sinh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(a) / d,

[Survived] PrecomputedMutator
complex.js:749:10
-           -Math.cos(a) * sinh(b) / d);
+           -Math.sin(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(-a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:24
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * cosh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(-b) / d);

[Survived] PrecomputedMutator
complex.js:812:13
-           if (b === 1) {
+           if (b === -1) {

[Survived] PrecomputedMutator
complex.js:816:13
-           if (b === -1) {
+           if (b === 1) {

[Survived] PrecomputedMutator
complex.js:842:11
-         if (b === 0) {
+         if (b == 0) {

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(0, a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(0, a), 0);

[Survived] PrecomputedMutator
complex.js:843:42
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, b), 0);

[Survived] PrecomputedMutator
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] PrecomputedMutator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] PrecomputedMutator
complex.js:989:15
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.sin(2 * b) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * a) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:33
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - sinh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(2 * b);

[Survived] PrecomputedMutator
complex.js:992:14
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * cosh(a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:19
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a + 1) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:24
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * Math.sin(b) / d,

[Survived] PrecomputedMutator
complex.js:992:33
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * Math.cos(-b) / d,

[Survived] PrecomputedMutator
complex.js:993:13
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * sinh(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a + 1) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:23
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.cos(b) / d);

[Survived] PrecomputedMutator
complex.js:993:32
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.sin(-b) / d);

[Survived] PrecomputedMutator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.sin(2 * b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:24
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * a) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:33
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cos(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(2 * b);

[Survived] PrecomputedMutator
complex.js:1010:13
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * sinh(a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:18
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a + 1) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:23
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.sin(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:32
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(-b) / d,

[Survived] PrecomputedMutator
complex.js:1011:14
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * cosh(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a + 1) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:24
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.cos(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:33
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(-b) / d);

[Survived] PrecomputedMutator
complex.js:1026:17
-         var res = this['asin']();
+         var res = this['acos']();

[Survived] PrecomputedMutator
complex.js:1046:17
-         var res = this['acos']();
+         var res = this['acos'] + 1();

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (res['im'] < 0) {

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['im'], x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:26
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['im'], x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['re'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan(x['im'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['re'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], temp + 1) / 2;

[Survived] PrecomputedMutator
complex.js:1087:11
-         if (noIM) {
+         if (noIM = false) {

[Survived] PrecomputedMutator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] PrecomputedMutator
complex.js:1131:11
-         if (b === 0) {
+         if (b !== 0) {

[Survived] PrecomputedMutator
complex.js:1135:15
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.sqrt(a + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a - Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:28
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.abs(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(a * a - 1))

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (this['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || 1);

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.sqrt(10, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(0, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || 1);

[Survived] PrecomputedMutator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.floor(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(this['im'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           Math.floor(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:19
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(this['re'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || 1);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.sqrt(10, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(0, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places && 0);

[Survived] PrecomputedMutator
complex.js:1243:9
-           Math.floor(this['re'] * places) / places,
+           Math.ceil(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1243:20
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this['im'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.ceil(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(this['re'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1254:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || 1);

[Survived] PrecomputedMutator
complex.js:1254:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || 1);

[Survived] PrecomputedMutator
complex.js:1257:9
-           Math.round(this['re'] * places) / places,
+           Math.floor(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1258:9
-           Math.round(this['im'] * places) / places);
+           Math.floor(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.floor(z['re'] - this['re']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1272:23
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1273:9
-           Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
+           Math.floor(z['im'] - this['im']) <= Complex['EPSILON'];

[Survived] PrecomputedMutator
complex.js:1305:11
-         if (Math.abs(a) < Complex['EPSILON']) {
+         if (Math.abs(a) <= Complex['EPSILON']) {

[Survived] PrecomputedMutator
complex.js:1309:11
-         if (Math.abs(b) < Complex['EPSILON']) {
+         if (Math.abs(b) <= Complex['EPSILON']) {

[Survived] PrecomputedMutator
complex.js:1309:20
-         if (Math.abs(b) < Complex['EPSILON']) {
+         if (Math.abs(-b) < Complex['EPSILON']) {

[Survived] PrecomputedMutator
complex.js:1314:11
-         if (b === 0) {
+         if (b == 0) {

[Survived] PrecomputedMutator
complex.js:1333:11
-         if (1 !== b) { // b is the absolute imaginary part
+         if (b !== 1) { // b is the absolute imaginary part

[Survived] PrecomputedMutator
complex.js:1368:20
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['im']) || isNaN(this['im']);

[Survived] PrecomputedMutator
complex.js:1368:41
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) || isNaN(this['re']);

[Survived] PrecomputedMutator
complex.js:1411:7
-     if (typeof define === 'function' && define['amd']) {
+     if (typeof define === 'function' && define['amd'] && false) {

[Survived] PrecomputedMutator
complex.js:1416:5
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': false
+   });

[Survived] PrecomputedMutator
complex.js:1416:27
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex.prototype.isInfinite = function () {
+     return !(this['isNaN']() || this['isFinite']());
+   }, "__esModule", { 'value': true });

[Survived] PrecomputedMutator
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': false
+   });

Ran 1.00 tests per mutant on average.
------------|---------|----------|-----------|------------|----------|----------|
File        | % score | # killed | # timeout | # survived | # no cov | # errors |
------------|---------|----------|-----------|------------|----------|----------|
All files   |   60.10 |      241 |         0 |        160 |        0 |        0 |
 complex.js |   60.10 |      241 |         0 |        160 |        0 |        0 |
------------|---------|----------|-----------|------------|----------|----------|
[32m01:09:08 (2736) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/reports/mutation/mutation.html
[32m01:09:08 (2736) INFO MutationTestExecutor[39m Done in 3 minutes 30 seconds.

real	3m31.481s
user	3m34.491s
sys	0m38.232s
