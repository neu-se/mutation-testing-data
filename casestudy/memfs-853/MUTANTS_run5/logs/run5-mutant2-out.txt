
> memfs@3.4.4 test
> jest --maxWorkers 2

FAIL src/__tests__/volume/appendFile.test.ts
  ● appendFile(file, data[, options], callback) › Simple write to non-existing file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFile.test.ts:6:37)

  ● appendFile(file, data[, options], callback) › Append to existing file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFile.test.ts:13:37)

FAIL src/__tests__/volume.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/lol'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at src/__tests__/volume.test.ts:897:26
      at src/__tests__/volume.test.ts:895:9

FAIL src/__tests__/promises.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at src/__tests__/promises.test.ts:73:17
      at src/__tests__/promises.test.ts:70:9

PASS src/__tests__/node.test.ts
PASS src/__tests__/index.test.ts
FAIL src/__tests__/volume/writeSync.test.ts
  ● .writeSync(fd, buffer, offset, length, position) › Write binary data to file

    EEXIST: file already exists, open '/data.bin'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/writeSync.test.ts:10:22)

  ● .writeSync(fd, buffer, offset, length, position) › Write string to file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/writeSync.test.ts:17:22)

FAIL src/__tests__/volume/writeFileSync.test.ts
  ● writeFileSync(path, data[, options]) › Create a file at root (/writeFileSync.txt)

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:8:37)

  ● writeFileSync(path, data[, options]) › Write to file by file descriptor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:15:37)

  ● writeFileSync(path, data[, options]) › Write to two files (second by fd)

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:23:37)

  ● writeFileSync(path, data[, options]) › Write at relative path that does not exist throws correct error

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:35:37)

FAIL src/__tests__/volume/closeSync.test.ts
  ● .closeSync(fd) › Closes file without errors

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:7:22)

  ● .closeSync(fd) › Correct error when file descriptor is not a number

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:11:30)

  ● .closeSync(fd) › Closing same file descriptor twice throws EBADF

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:32:22)

  ● .closeSync(fd) › Closing a file decreases the number of open files

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:43:22)

  ● .closeSync(fd) › When closing a file, its descriptor is added to the pool of descriptors to be reused

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:49:22)

FAIL src/__tests__/volume/write.test.ts
  ● write(fs, str, position, encoding, callback) › Simple write to file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/volume/write.test.ts:6:26)
      at Object.<anonymous> (src/__tests__/volume/write.test.ts:11:19)

FAIL src/__tests__/volume/openSync.test.ts
  ● openSync(path, mode[, flags]) › should return a file descriptor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/openSync.test.ts:6:25)

FAIL src/__tests__/volume/ReadStream.test.ts
  ● ReadStream › fs has ReadStream constructor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/ReadStream.test.ts:6:38)

  ● ReadStream › ReadStream has constructor and prototype property

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/ReadStream.test.ts:10:38)

  ● ReadStream › Can read basic file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/ReadStream.test.ts:15:38)

FAIL src/__tests__/volume/renameSync.test.ts
  ● renameSync(fromPath, toPath) › Renames a file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:6:37)

  ● renameSync(fromPath, toPath) › Updates deep links properly when renaming a directory

    EEXIST: file already exists, open '/foo/bar/qux/a.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:16:13)

  ● renameSync(fromPath, toPath) › Rename file two levels deep

    EEXIST: file already exists, open '/1/2'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:35:37)

  ● renameSync(fromPath, toPath) › Rename file three levels deep

    EEXIST: file already exists, open '/foo1'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:40:37)

  ● renameSync(fromPath, toPath) › Throws on no params

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:53:37)

  ● renameSync(fromPath, toPath) › Throws on only one param

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:59:37)

  ● renameSync(fromPath, toPath) › Throws if path is of wrong type

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:65:37)

FAIL src/__tests__/volume/rmSync.test.ts
  ● rmSync › remove directory with two files

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:6:37)

  ● rmSync › removes a single file

    EEXIST: file already exists, open '/a/b/c.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:17:37)

  ● rmSync › when file does not exist › throws by default

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:27:41)

  ● rmSync › when file does not exist › does not throw if "force" is set to true

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:33:41)

  ● rmSync › when deleting a directory › throws by default

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:41:41)

  ● rmSync › when deleting a directory › throws by when force flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:47:41)

  ● rmSync › when deleting a directory › deletes all directory contents when recursive flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:53:41)

  ● rmSync › when deleting a directory › deletes all directory contents recursively when recursive flag is set

    EEXIST: file already exists, open '/a/a/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:60:41)

FAIL src/__tests__/volume/rmPromise.test.ts
  ● rmSync › remove directory with two files

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:46:45
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › removes a single file

    EEXIST: file already exists, open '/a/b/c.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:66:45
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when file does not exist › throws by default

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:85:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when file does not exist › does not throw if "force" is set to true

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:110:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › throws by default

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:127:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › throws by when force flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:152:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › deletes all directory contents when recursive flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:177:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › deletes all directory contents recursively when recursive flag is set

    EEXIST: file already exists, open '/a/a/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:193:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

FAIL src/__tests__/volume/copyFileSync.test.ts
  ● copyFileSync(src, dest[, flags]) › method exists

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:7:37)

  ● copyFileSync(src, dest[, flags]) › throws on incorrect path arguments

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:11:37)

  ● copyFileSync(src, dest[, flags]) › copies file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:26:37)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_EXCL flag set › should copy file, if destination does not exit

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:34:41)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_EXCL flag set › should throw, if file already exists

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:42:41)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_FICLONE flag set › copies file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:55:41)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_FICLONE_FORCE flag set › always fails with ENOSYS

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:65:41)

FAIL src/__tests__/volume/copyFile.test.ts
  ● copyFile(src, dest[, flags], callback) › method exists

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFile.test.ts:7:37)

  ● copyFile(src, dest[, flags], callback) › copies a file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFile.test.ts:11:37)

  ● copyFile(src, dest[, flags], callback) › honors COPYFILE_EXCL flag

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFile.test.ts:27:37)

FAIL src/__tests__/volume/appendFileSync.test.ts
  ● appendFileSync(file, data, options) › Simple write to non-existing file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFileSync.test.ts:6:37)

  ● appendFileSync(file, data, options) › Append to existing file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFileSync.test.ts:11:37)

FAIL src/__tests__/volume/WriteStream.test.ts
  ● WriteStream › fs has WriteStream constructor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/WriteStream.test.ts:6:38)

  ● WriteStream › WriteStream has constructor and prototype property

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/WriteStream.test.ts:10:38)

  ● WriteStream › Can write basic file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/WriteStream.test.ts:15:38)

FAIL src/__tests__/volume/statSync.test.ts
  ● .statSync(...) › works with symlinks, #463

    EEXIST: file already exists, open '/c/index.js'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/statSync.test.ts:9:13)

FAIL src/__tests__/volume/realpathSync.test.ts
  ● .realpath(...) › works with symlinks, #463

    EEXIST: file already exists, open '/c/index.js'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/realpathSync.test.ts:9:13)

FAIL src/__tests__/volume/readSync.test.ts
  ● .readSync(fd, buffer, offset, length, position) › Basic read file

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readSync.test.ts:6:37)

FAIL src/__tests__/volume/mkdirSync.test.ts
  ● mkdirSync › can create a directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:6:37)

  ● mkdirSync › root directory is directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:12:37)

  ● mkdirSync › throws when re-creating existing directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:17:37)

  ● mkdirSync › throws when creating root directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:34:37)

FAIL src/__tests__/volume/exists.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/exists.test.ts:5:33

FAIL src/__tests__/volume/rename.test.ts
  ● renameSync(fromPath, toPath) › Renames a simple case

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rename.test.ts:6:37)

FAIL src/__tests__/volume/existsSync.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/existsSync.test.ts:5:33

PASS src/__tests__/setTimeoutUnref.test.ts
PASS src/__tests__/setImmediate.test.ts
FAIL src/__tests__/volume/toString.test.ts
  ● toString › allow files to be named "toString", #463

    EEXIST: file already exists, open '/toString'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/toString.test.ts:7:13)

FAIL src/__tests__/volume/readdirSync.test.ts
  ● readdirSync() › returns a single directory

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readdirSync.test.ts:6:37)

  ● readdirSync() › returns multiple directories

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readdirSync.test.ts:13:37)

  ● readdirSync() › respects symlinks

    EEXIST: file already exists, open '/a/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readdirSync.test.ts:28:37)

PASS src/__tests__/process.test.ts
FAIL src/__tests__/volume/callback-error.test.ts
  ● Test suite failed to run

    TypeError: Cannot assign to read only property 'performance' of object '[object global]'

    > 1 | jest.useFakeTimers('modern');
        |                          ^
      2 |
      3 | // Fixes https://github.com/streamich/memfs/issues/542
      4 | it('should throw error instead of callback', () => {

      at hijackMethod (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:946:32)
      at Object.install (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:1733:17)
      at FakeTimers.useFakeTimers (node_modules/@jest/fake-timers/build/modernFakeTimers.js:110:36)
      at Object.<anonymous> (src/__tests__/volume/callback-error.test.ts:1:26)

Summary of all failing tests
FAIL src/__tests__/volume/appendFile.test.ts
  ● appendFile(file, data[, options], callback) › Simple write to non-existing file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFile.test.ts:6:37)

  ● appendFile(file, data[, options], callback) › Append to existing file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFile.test.ts:13:37)

FAIL src/__tests__/volume.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/lol'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at src/__tests__/volume.test.ts:897:26
      at src/__tests__/volume.test.ts:895:9

FAIL src/__tests__/promises.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at src/__tests__/promises.test.ts:73:17
      at src/__tests__/promises.test.ts:70:9

FAIL src/__tests__/volume/writeSync.test.ts
  ● .writeSync(fd, buffer, offset, length, position) › Write binary data to file

    EEXIST: file already exists, open '/data.bin'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/writeSync.test.ts:10:22)

  ● .writeSync(fd, buffer, offset, length, position) › Write string to file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/writeSync.test.ts:17:22)

FAIL src/__tests__/volume/writeFileSync.test.ts
  ● writeFileSync(path, data[, options]) › Create a file at root (/writeFileSync.txt)

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:8:37)

  ● writeFileSync(path, data[, options]) › Write to file by file descriptor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:15:37)

  ● writeFileSync(path, data[, options]) › Write to two files (second by fd)

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:23:37)

  ● writeFileSync(path, data[, options]) › Write at relative path that does not exist throws correct error

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/writeFileSync.test.ts:35:37)

FAIL src/__tests__/volume/closeSync.test.ts
  ● .closeSync(fd) › Closes file without errors

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:7:22)

  ● .closeSync(fd) › Correct error when file descriptor is not a number

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:11:30)

  ● .closeSync(fd) › Closing same file descriptor twice throws EBADF

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:32:22)

  ● .closeSync(fd) › Closing a file decreases the number of open files

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:43:22)

  ● .closeSync(fd) › When closing a file, its descriptor is added to the pool of descriptors to be reused

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/closeSync.test.ts:49:22)

FAIL src/__tests__/volume/write.test.ts
  ● write(fs, str, position, encoding, callback) › Simple write to file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/volume/write.test.ts:6:26)
      at Object.<anonymous> (src/__tests__/volume/write.test.ts:11:19)

FAIL src/__tests__/volume/openSync.test.ts
  ● openSync(path, mode[, flags]) › should return a file descriptor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.openSync (src/volume.ts:869:21)
      at Object.<anonymous> (src/__tests__/volume/openSync.test.ts:6:25)

FAIL src/__tests__/volume/ReadStream.test.ts
  ● ReadStream › fs has ReadStream constructor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/ReadStream.test.ts:6:38)

  ● ReadStream › ReadStream has constructor and prototype property

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/ReadStream.test.ts:10:38)

  ● ReadStream › Can read basic file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/ReadStream.test.ts:15:38)

FAIL src/__tests__/volume/renameSync.test.ts
  ● renameSync(fromPath, toPath) › Renames a file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:6:37)

  ● renameSync(fromPath, toPath) › Updates deep links properly when renaming a directory

    EEXIST: file already exists, open '/foo/bar/qux/a.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:16:13)

  ● renameSync(fromPath, toPath) › Rename file two levels deep

    EEXIST: file already exists, open '/1/2'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:35:37)

  ● renameSync(fromPath, toPath) › Rename file three levels deep

    EEXIST: file already exists, open '/foo1'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:40:37)

  ● renameSync(fromPath, toPath) › Throws on no params

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:53:37)

  ● renameSync(fromPath, toPath) › Throws on only one param

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:59:37)

  ● renameSync(fromPath, toPath) › Throws if path is of wrong type

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/renameSync.test.ts:65:37)

FAIL src/__tests__/volume/rmSync.test.ts
  ● rmSync › remove directory with two files

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:6:37)

  ● rmSync › removes a single file

    EEXIST: file already exists, open '/a/b/c.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:17:37)

  ● rmSync › when file does not exist › throws by default

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:27:41)

  ● rmSync › when file does not exist › does not throw if "force" is set to true

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:33:41)

  ● rmSync › when deleting a directory › throws by default

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:41:41)

  ● rmSync › when deleting a directory › throws by when force flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:47:41)

  ● rmSync › when deleting a directory › deletes all directory contents when recursive flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:53:41)

  ● rmSync › when deleting a directory › deletes all directory contents recursively when recursive flag is set

    EEXIST: file already exists, open '/a/a/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rmSync.test.ts:60:41)

FAIL src/__tests__/volume/rmPromise.test.ts
  ● rmSync › remove directory with two files

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:46:45
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › removes a single file

    EEXIST: file already exists, open '/a/b/c.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:66:45
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when file does not exist › throws by default

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:85:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when file does not exist › does not throw if "force" is set to true

    EEXIST: file already exists, open '/foo.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:110:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › throws by default

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:127:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › throws by when force flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:152:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › deletes all directory contents when recursive flag is set

    EEXIST: file already exists, open '/usr/bin/bash'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:177:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

  ● rmSync › when deleting a directory › deletes all directory contents recursively when recursive flag is set

    EEXIST: file already exists, open '/a/a/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/rmPromise.test.ts:193:49
      at step (src/__tests__/volume/rmPromise.test.ts:33:23)

FAIL src/__tests__/volume/copyFileSync.test.ts
  ● copyFileSync(src, dest[, flags]) › method exists

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:7:37)

  ● copyFileSync(src, dest[, flags]) › throws on incorrect path arguments

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:11:37)

  ● copyFileSync(src, dest[, flags]) › copies file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:26:37)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_EXCL flag set › should copy file, if destination does not exit

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:34:41)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_EXCL flag set › should throw, if file already exists

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:42:41)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_FICLONE flag set › copies file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:55:41)

  ● copyFileSync(src, dest[, flags]) › when COPYFILE_FICLONE_FORCE flag set › always fails with ENOSYS

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFileSync.test.ts:65:41)

FAIL src/__tests__/volume/copyFile.test.ts
  ● copyFile(src, dest[, flags], callback) › method exists

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFile.test.ts:7:37)

  ● copyFile(src, dest[, flags], callback) › copies a file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFile.test.ts:11:37)

  ● copyFile(src, dest[, flags], callback) › honors COPYFILE_EXCL flag

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/copyFile.test.ts:27:37)

FAIL src/__tests__/volume/appendFileSync.test.ts
  ● appendFileSync(file, data, options) › Simple write to non-existing file

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFileSync.test.ts:6:37)

  ● appendFileSync(file, data, options) › Append to existing file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/appendFileSync.test.ts:11:37)

FAIL src/__tests__/volume/WriteStream.test.ts
  ● WriteStream › fs has WriteStream constructor

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/WriteStream.test.ts:6:38)

  ● WriteStream › WriteStream has constructor and prototype property

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/WriteStream.test.ts:10:38)

  ● WriteStream › Can write basic file

    EEXIST: file already exists, open '/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at createFs (src/__tests__/util.ts:12:59)
      at Object.<anonymous> (src/__tests__/volume/WriteStream.test.ts:15:38)

FAIL src/__tests__/volume/statSync.test.ts
  ● .statSync(...) › works with symlinks, #463

    EEXIST: file already exists, open '/c/index.js'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/statSync.test.ts:9:13)

FAIL src/__tests__/volume/realpathSync.test.ts
  ● .realpath(...) › works with symlinks, #463

    EEXIST: file already exists, open '/c/index.js'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/realpathSync.test.ts:9:13)

FAIL src/__tests__/volume/readSync.test.ts
  ● .readSync(fd, buffer, offset, length, position) › Basic read file

    EEXIST: file already exists, open '/test.txt'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readSync.test.ts:6:37)

FAIL src/__tests__/volume/mkdirSync.test.ts
  ● mkdirSync › can create a directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:6:37)

  ● mkdirSync › root directory is directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:12:37)

  ● mkdirSync › throws when re-creating existing directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:17:37)

  ● mkdirSync › throws when creating root directory

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/mkdirSync.test.ts:34:37)

FAIL src/__tests__/volume/exists.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/exists.test.ts:5:33

FAIL src/__tests__/volume/rename.test.ts
  ● renameSync(fromPath, toPath) › Renames a simple case

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/rename.test.ts:6:37)

FAIL src/__tests__/volume/existsSync.test.ts
  ● Test suite failed to run

    EEXIST: file already exists, open '/foo'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at src/__tests__/volume/existsSync.test.ts:5:33

FAIL src/__tests__/volume/toString.test.ts
  ● toString › allow files to be named "toString", #463

    EEXIST: file already exists, open '/toString'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Object.<anonymous> (src/__tests__/volume/toString.test.ts:7:13)

FAIL src/__tests__/volume/readdirSync.test.ts
  ● readdirSync() › returns a single directory

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readdirSync.test.ts:6:37)

  ● readdirSync() › returns multiple directories

    EEXIST: file already exists, open '/foo/bar'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readdirSync.test.ts:13:37)

  ● readdirSync() › respects symlinks

    EEXIST: file already exists, open '/a/a'

      126 |     case EACCES:
      127 |       return `EACCES: permission denied, ${func}${pathFormatted}`;
    > 128 |     case ENOTEMPTY:
          |                 ^
      129 |       return `ENOTEMPTY: directory not empty, ${func}${pathFormatted}`;
      130 |     case EMFILE:
      131 |       return `EMFILE: too many open files, ${func}${pathFormatted}`;

      at createError (src/volume.ts:128:17)
      at Volume.Object.<anonymous>.Volume.openFile (src/volume.ts:840:19)
      at Volume.Object.<anonymous>.Volume.openBase (src/volume.ts:858:25)
      at Volume.Object.<anonymous>.Volume.writeFileBase (src/volume.ts:1089:23)
      at Volume.Object.<anonymous>.Volume.writeFileSync (src/volume.ts:1114:14)
      at Volume.Object.<anonymous>.Volume.fromJSON (src/volume.ts:774:22)
      at Function.Object.<anonymous>.Volume.fromJSON (src/volume.ts:508:13)
      at create (src/__tests__/util.ts:7:26)
      at Object.<anonymous> (src/__tests__/volume/readdirSync.test.ts:28:37)

FAIL src/__tests__/volume/callback-error.test.ts
  ● Test suite failed to run

    TypeError: Cannot assign to read only property 'performance' of object '[object global]'

    > 1 | jest.useFakeTimers('modern');
        |                          ^
      2 |
      3 | // Fixes https://github.com/streamich/memfs/issues/542
      4 | it('should throw error instead of callback', () => {

      at hijackMethod (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:946:32)
      at Object.install (node_modules/@sinonjs/fake-timers/src/fake-timers-src.js:1733:17)
      at FakeTimers.useFakeTimers (node_modules/@jest/fake-timers/build/modernFakeTimers.js:110:36)
      at Object.<anonymous> (src/__tests__/volume/callback-error.test.ts:1:26)


Test Suites: 26 failed, 5 passed, 31 total
Tests:       68 failed, 4 skipped, 25 passed, 97 total
Snapshots:   0 total
Time:        3.474 s, estimated 8 s
Ran all test suites.
