*** using precomputed mutations ***
[32m00:36:16 (2420) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m00:36:16 (2420) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m00:36:17 (2420) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m00:36:17 (2420) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m00:36:17 (2420) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m00:36:17 (2420) INFO ProjectReader[39m Found 1 of 231 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 79 mutants from MUTATION_TESTING/template-full_mixtral-8x7b-instruct_0.0/mutants.json ***
Mutant 0 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression < COMPRESSION_LEVEL.uncompressed
Mutant 1 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression = COMPRESSION_LEVEL.medium
Mutant 2 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with COMPRESSION_LEVEL.uncompressed === o.compression
Mutant 3 in ZipAFolder.ts: ZipAFolder.compress replaced with ZipAFolder['compress']
Mutant 4 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  archiverOptions: zipAFolderOptions
}
Mutant 5 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression < COMPRESSION_LEVEL.uncompressed
Mutant 6 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with Object.keys(zipAFolderOptions || {}).length === 0 && targetFilePath
Mutant 7 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with !zipAFolderOptions?.customWriteStream && zipAFolderOptions?.targetFilePath
Mutant 8 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with !zipAFolderOptions?.customWriteStream && !zipAFolderOptions?.targetFilePath
Mutant 9 in ZipAFolder.ts: path.dirname replaced with '.'
Mutant 10 in ZipAFolder.ts: targetFilePath replaced with './' + targetFilePath
Mutant 11 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.toString() === src
Mutant 12 in ZipAFolder.ts: targetBasePath === src replaced with path.resolve(targetBasePath) === path.resolve(src)
Mutant 13 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.includes(src)
Mutant 14 in ZipAFolder.ts: !isGlob(src) replaced with src === ''
Mutant 15 in ZipAFolder.ts: !isGlob(src) replaced with typeof src !== 'string'
Mutant 16 in ZipAFolder.ts: !isGlob(src) replaced with !Array.isArray(src)
Mutant 17 in ZipAFolder.ts: src replaced with './' + src
Mutant 18 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.W_OK | fs.constants.R_OK)
Mutant 19 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(path.resolve(src), fs.constants.R_OK)
Mutant 20 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.X_OK)
Mutant 21 in ZipAFolder.ts: fs.promises.access replaced with fs.constants.F_OK
Mutant 22 in ZipAFolder.ts: fs.promises.access replaced with fs.accessSync
Mutant 23 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.stat
Mutant 24 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.W_OK | fs.constants.R_OK
Mutant 25 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.X_OK
Mutant 26 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.F_OK
Mutant 27 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.R_OK)
Mutant 28 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.W_OK)
Mutant 29 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(path.dirname(targetFilePath), fs.constants.R_OK | fs.constants.W_OK)
Mutant 30 in ZipAFolder.ts: fs.promises.access replaced with fs.access
Mutant 31 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.accessSync
Mutant 32 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.stat
Mutant 33 in ZipAFolder.ts: targetBasePath replaced with '.'
Mutant 34 in ZipAFolder.ts: targetBasePath replaced with __dirname
Mutant 35 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.F_OK
Mutant 36 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.W_OK
Mutant 37 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.R_OK + fs.constants.X_OK
Mutant 38 in ZipAFolder.ts: fs.createWriteStream replaced with fs.createReadStream
Mutant 39 in ZipAFolder.ts: targetFilePath replaced with './' + targetFilePath
Mutant 40 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions?.customWriteStream
Mutant 41 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, {})
Mutant 42 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver('tar', archiverOptions)
Mutant 43 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, archiverOptions || {
  zlib: {
    level: 1
  }
})
Mutant 44 in ZipAFolder.ts: format replaced with 'tar'
Mutant 45 in ZipAFolder.ts: format replaced with Math.random()
Mutant 46 in ZipAFolder.ts: archiverOptions || {} replaced with {}
Mutant 47 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions && {
  zlib: {
    level: o.compression
  }
}
Mutant 48 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || {
  gzip: {
    level: o.compression
  }
}
Mutant 49 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('end', resolve)
Mutant 50 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('finish', resolve)
Mutant 51 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('drain', resolve)
Mutant 52 in ZipAFolder.ts: 'close' replaced with 'end'
Mutant 53 in ZipAFolder.ts: 'close' replaced with 'finish'
Mutant 54 in ZipAFolder.ts: 'close' replaced with 'drain'
Mutant 55 in ZipAFolder.ts: output.on replaced with output.destroy
Mutant 56 in ZipAFolder.ts: 'error' replaced with 'warning'
Mutant 57 in ZipAFolder.ts: 'error' replaced with () => {}
Mutant 58 in ZipAFolder.ts: output replaced with output.destroy()
Mutant 59 in ZipAFolder.ts: isGlob(src) replaced with false
Mutant 60 in ZipAFolder.ts: isGlob(src) replaced with src.match(/\*/)
Mutant 61 in ZipAFolder.ts: isGlob(src) replaced with src.includes('.')
Mutant 62 in ZipAFolder.ts: src replaced with './'
Mutant 63 in ZipAFolder.ts: src replaced with '..'
Mutant 64 in ZipAFolder.ts: src replaced with ''
Mutant 65 in ZipAFolder.ts: ',' replaced with ''
Mutant 66 in ZipAFolder.ts: ',' replaced with src
Mutant 67 in ZipAFolder.ts: ',' replaced with '/'
Mutant 68 in ZipAFolder.ts: zipArchive.glob replaced with zipArchive['glob']
Mutant 69 in ZipAFolder.ts: globPart replaced with `./${globPart}`
Mutant 70 in ZipAFolder.ts: globPart replaced with './' + globPart
Mutant 71 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory('./')
Mutant 72 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, true)
Mutant 73 in ZipAFolder.ts: zipArchive.directory replaced with zipArchive['directory']
failed to parse replacement src.split('/').slice(0, -1).join('/'): SyntaxError: Invalid regular expression: //').slice(0, -1).join('//: Unmatched ')'
Mutant 74 in ZipAFolder.ts: src replaced with './'
Mutant 75 in ZipAFolder.ts: src replaced with '..'
Mutant 76 in ZipAFolder.ts: false replaced with true
Mutant 77 in ZipAFolder.ts: false replaced with zipArchive.bulk([{
  src,
  dest: ''
}])
[32m00:36:17 (2420) INFO Instrumenter[39m Instrumented 1 source file(s) with 78 mutant(s)
[32m00:36:17 (2420) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m00:36:18 (2420) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m00:36:18 (2420) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m00:36:24 (2420) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 5 seconds (net 5948 ms, overhead 1 ms).
Mutation testing 2% (elapsed: <1m, remaining: ~5m) 2/78 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~8m) 3/78 tested (2 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~7m) 5/78 tested (4 survived, 0 timed out)
Mutation testing 10% (elapsed: <1m, remaining: ~5m) 8/78 tested (5 survived, 0 timed out)
Mutation testing 12% (elapsed: <1m, remaining: ~5m) 10/78 tested (5 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~5m) 12/78 tested (6 survived, 0 timed out)
Mutation testing 17% (elapsed: ~1m, remaining: ~5m) 14/78 tested (8 survived, 0 timed out)
Mutation testing 20% (elapsed: ~1m, remaining: ~5m) 16/78 tested (8 survived, 0 timed out)
Mutation testing 23% (elapsed: ~1m, remaining: ~5m) 18/78 tested (9 survived, 0 timed out)
Mutation testing 25% (elapsed: ~1m, remaining: ~4m) 20/78 tested (11 survived, 0 timed out)
Mutation testing 28% (elapsed: ~1m, remaining: ~4m) 22/78 tested (12 survived, 0 timed out)
Mutation testing 30% (elapsed: ~2m, remaining: ~4m) 24/78 tested (14 survived, 0 timed out)
Mutation testing 33% (elapsed: ~2m, remaining: ~4m) 26/78 tested (16 survived, 0 timed out)
Mutation testing 35% (elapsed: ~2m, remaining: ~4m) 28/78 tested (18 survived, 0 timed out)
Mutation testing 39% (elapsed: ~2m, remaining: ~3m) 31/78 tested (20 survived, 0 timed out)
Mutation testing 42% (elapsed: ~2m, remaining: ~3m) 33/78 tested (21 survived, 0 timed out)
Mutation testing 44% (elapsed: ~2m, remaining: ~3m) 35/78 tested (23 survived, 0 timed out)
Mutation testing 47% (elapsed: ~3m, remaining: ~3m) 37/78 tested (25 survived, 0 timed out)
Mutation testing 48% (elapsed: ~3m, remaining: ~3m) 38/78 tested (26 survived, 0 timed out)
Mutation testing 50% (elapsed: ~3m, remaining: ~3m) 39/78 tested (26 survived, 1 timed out)
Mutation testing 52% (elapsed: ~3m, remaining: ~3m) 41/78 tested (27 survived, 1 timed out)
Mutation testing 55% (elapsed: ~3m, remaining: ~2m) 43/78 tested (27 survived, 1 timed out)
Mutation testing 58% (elapsed: ~3m, remaining: ~2m) 46/78 tested (28 survived, 1 timed out)
Mutation testing 61% (elapsed: ~4m, remaining: ~2m) 48/78 tested (28 survived, 1 timed out)
Mutation testing 62% (elapsed: ~4m, remaining: ~2m) 49/78 tested (28 survived, 1 timed out)
Mutation testing 65% (elapsed: ~4m, remaining: ~2m) 51/78 tested (29 survived, 2 timed out)
Mutation testing 65% (elapsed: ~4m, remaining: ~2m) 51/78 tested (29 survived, 2 timed out)
Mutation testing 66% (elapsed: ~4m, remaining: ~2m) 52/78 tested (29 survived, 3 timed out)
Mutation testing 67% (elapsed: ~4m, remaining: ~2m) 53/78 tested (29 survived, 4 timed out)
Mutation testing 69% (elapsed: ~5m, remaining: ~2m) 54/78 tested (30 survived, 4 timed out)
Mutation testing 71% (elapsed: ~5m, remaining: ~2m) 56/78 tested (30 survived, 5 timed out)
Mutation testing 74% (elapsed: ~5m, remaining: ~1m) 58/78 tested (32 survived, 5 timed out)
Mutation testing 76% (elapsed: ~5m, remaining: ~1m) 60/78 tested (33 survived, 5 timed out)
Mutation testing 79% (elapsed: ~5m, remaining: ~1m) 62/78 tested (34 survived, 5 timed out)
Mutation testing 82% (elapsed: ~5m, remaining: ~1m) 64/78 tested (36 survived, 5 timed out)
Mutation testing 84% (elapsed: ~6m, remaining: ~1m) 66/78 tested (38 survived, 5 timed out)
Mutation testing 84% (elapsed: ~6m, remaining: ~1m) 66/78 tested (38 survived, 5 timed out)
Mutation testing 85% (elapsed: ~6m, remaining: ~1m) 67/78 tested (38 survived, 6 timed out)
Mutation testing 88% (elapsed: ~6m, remaining: <1m) 69/78 tested (39 survived, 7 timed out)
Mutation testing 91% (elapsed: ~6m, remaining: <1m) 71/78 tested (41 survived, 7 timed out)
Mutation testing 91% (elapsed: ~6m, remaining: <1m) 71/78 tested (41 survived, 7 timed out)
Mutation testing 93% (elapsed: ~7m, remaining: <1m) 73/78 tested (42 survived, 8 timed out)
Mutation testing 94% (elapsed: ~7m, remaining: <1m) 74/78 tested (43 survived, 8 timed out)
Mutation testing 96% (elapsed: ~7m, remaining: <1m) 75/78 tested (43 survived, 9 timed out)
Mutation testing 96% (elapsed: ~7m, remaining: <1m) 75/78 tested (43 survived, 9 timed out)
Mutation testing 98% (elapsed: ~7m, remaining: <1m) 77/78 tested (44 survived, 10 timed out)

All tests
  ✓ All tests (killed 24)

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:40:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (o.compression < COMPRESSION_LEVEL.uncompressed) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:40:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (COMPRESSION_LEVEL.uncompressed === o.compression) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:19
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder['compress']({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'tar',
+     archiverOptions: zipAFolderOptions
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:74:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (o.compression < COMPRESSION_LEVEL.uncompressed) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.toString() === src) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (path.resolve(targetBasePath) === path.resolve(src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.includes(src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:121:29
-                   if (!isGlob(src)) {
+                   if (!isGlob('./' + src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK | fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(path.resolve(src), fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.accessSync(src, fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.stat(src, fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK | fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.F_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(path.dirname(targetFilePath), fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.stat(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:42
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access('.', fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:42
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(__dirname, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.F_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK + fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:129:20
-           } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {
+           } else if (zipAFolderOptions?.customWriteStream) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:47
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     zlib: {
+       level: 1
+     }
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:13
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:23
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('warning', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on(() => {}, reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:17
-               if (isGlob(src)) {
+               if (false) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:17
-               if (isGlob(src)) {
+               if (src.match(/\*/)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob('./')) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob('..')) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob('')) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split('').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:21
-                       zipArchive.glob(globPart);
+                       zipArchive['glob'](globPart);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(`./${globPart}`);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob('./' + globPart);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive['directory'](src, false);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

Ran 0.87 tests per mutant on average.
---------------|---------|----------|-----------|------------|----------|----------|
File           | % score | # killed | # timeout | # survived | # no cov | # errors |
---------------|---------|----------|-----------|------------|----------|----------|
All files      |   43.59 |       24 |        10 |         44 |        0 |        0 |
 ZipAFolder.ts |   43.59 |       24 |        10 |         44 |        0 |        0 |
---------------|---------|----------|-----------|------------|----------|----------|
[32m00:44:05 (2420) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/reports/mutation/mutation.html
[32m00:44:05 (2420) INFO MutationTestExecutor[39m Done in 7 minutes 48 seconds.

real	7m50.277s
user	7m8.881s
sys	0m54.497s
