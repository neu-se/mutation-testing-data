*** using precomputed mutations ***
[32m09:55:47 (2595) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m09:55:47 (2595) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m09:55:47 (2595) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m09:55:48 (2595) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m09:55:48 (2595) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m09:55:48 (2595) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 265 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.25/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with val !== undefined
Mutant 1 in dirty.js: val === undefined replaced with typeof val === 'undefined'
Mutant 2 in dirty.js: val === undefined replaced with val === null
Mutant 3 in dirty.js: key replaced with key + 'foo'
Mutant 4 in dirty.js: key replaced with key.toUpperCase()
Mutant 5 in dirty.js: key replaced with key.split('').reverse().join('')
Mutant 6 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val + 1)
Mutant 7 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val - 1)
Mutant 8 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val * 2)
Mutant 9 in dirty.js: key replaced with key--
Mutant 10 in dirty.js: key replaced with key = 'newKey'
Mutant 11 in dirty.js: val replaced with null
Mutant 12 in dirty.js: val replaced with undefined
Mutant 13 in dirty.js: val replaced with NaN
Mutant 14 in dirty.js: this.path replaced with this.path.toLowerCase()
Mutant 15 in dirty.js: this.path replaced with this.path.split('/').pop()
Mutant 16 in dirty.js: this._queue.get replaced with this._queue.has
Mutant 17 in dirty.js: this._queue.get replaced with this._queue.size
Mutant 18 in dirty.js: this._queue.get replaced with this._queue.keys
Mutant 19 in dirty.js: cb replaced with null
Mutant 20 in dirty.js: cb replaced with undefined
Mutant 21 in dirty.js: cb replaced with () => {}
Mutant 22 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, [])
Mutant 23 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, null)
Mutant 24 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, undefined)
Mutant 25 in dirty.js: key replaced with key + 1
Mutant 26 in dirty.js: key replaced with key.toUpperCase()
Mutant 27 in dirty.js: key replaced with key.split('').reverse().join('')
Mutant 28 in dirty.js: cbs replaced with cbs.slice()
Mutant 29 in dirty.js: cbs replaced with cbs.concat([])
Mutant 30 in dirty.js: cbs replaced with cbs.filter(() => true)
Mutant 31 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('error');
}
Mutant 32 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this._queue.clear();
}
Mutant 33 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this._data.clear();
}
Mutant 34 in dirty.js: cb replaced with !cb
Mutant 35 in dirty.js: cb replaced with cb && false
Mutant 36 in dirty.js: cb replaced with cb || true
Mutant 37 in dirty.js: cb replaced with null
Mutant 38 in dirty.js: 'drain' replaced with 'close'
Mutant 39 in dirty.js: 'drain' replaced with 'data'
Mutant 40 in dirty.js: this._data.get replaced with this._data.set
Mutant 41 in dirty.js: this._data.get replaced with this._data.clear
Mutant 42 in dirty.js: key replaced with this._data.get(key + '1')
Mutant 43 in dirty.js: key replaced with this._data.get(key + 1)
Mutant 44 in dirty.js: key replaced with this._data.get(key)
Mutant 45 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 46 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, 'undefined', cb)
Mutant 47 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, undefined, () => {})
Mutant 48 in dirty.js: key replaced with key + 1
Mutant 49 in dirty.js: key replaced with val + 1
Mutant 50 in dirty.js: key replaced with this._data.get(key) + 1
Mutant 51 in dirty.js: undefined replaced with null
Mutant 52 in dirty.js: undefined replaced with {}
Mutant 53 in dirty.js: undefined replaced with []
Mutant 54 in dirty.js: cb replaced with () => {}
Mutant 55 in dirty.js: cb replaced with undefined
Mutant 56 in dirty.js: cb replaced with () => {
  throw new Error('Test error');
}
Mutant 57 in dirty.js: this._data replaced with this._queue
Mutant 58 in dirty.js: this._data replaced with this._data.values()
Mutant 59 in dirty.js: this._data replaced with this._data.keys()
Mutant 60 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== false
Mutant 61 in dirty.js: fn(key, val) === false replaced with !fn(key, val)
Mutant 62 in dirty.js: fn(key, val) replaced with fn(key, this._data.get(key))
Mutant 63 in dirty.js: fn(key, val) replaced with fn(key, val + 1)
Mutant 64 in dirty.js: fn(key, val) replaced with fn(key, this._data.get(key) + 1)
Mutant 65 in dirty.js: key replaced with key + 1
Mutant 66 in dirty.js: key replaced with key + '1'
Mutant 67 in dirty.js: val replaced with val + 1
Mutant 68 in dirty.js: val replaced with undefined
Mutant 69 in dirty.js: val replaced with null
Mutant 70 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) + 1), cb)
Mutant 71 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) * 2), cb)
Mutant 72 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) - 1), cb)
Mutant 73 in dirty.js: this.set replaced with this.get
Mutant 74 in dirty.js: this.set replaced with this.rm
Mutant 75 in dirty.js: this.set replaced with this.update
Mutant 76 in dirty.js: key replaced with key + 1
Mutant 77 in dirty.js: key replaced with key - 1
Mutant 78 in dirty.js: key replaced with key * 2
Mutant 79 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key) + 1)
Mutant 80 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key) - 1)
Mutant 81 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key) * 2)
Mutant 82 in dirty.js: updater replaced with updater + 1
Mutant 83 in dirty.js: updater replaced with updater * 2
Mutant 84 in dirty.js: this.get replaced with this.update
Mutant 85 in dirty.js: this.get replaced with this.rm
Mutant 86 in dirty.js: key replaced with key + 1
Mutant 87 in dirty.js: key replaced with key * 2
Mutant 88 in dirty.js: key replaced with key.toUpperCase()
Mutant 89 in dirty.js: cb replaced with null
Mutant 90 in dirty.js: cb replaced with undefined
Mutant 91 in dirty.js: cb replaced with () => {}
Mutant 92 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites > 0
Mutant 93 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size || this._inFlightWrites < 0
Mutant 94 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites === 0
Mutant 95 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this.emit('drain'))
Mutant 96 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this.emit('close'))
Mutant 97 in dirty.js: 'drain' replaced with 'error'
Mutant 98 in dirty.js: 'drain' replaced with 'close'
Mutant 99 in dirty.js: 'drain' replaced with 'read_close'
Mutant 100 in dirty.js: () => this.close() replaced with () => this.close(true)
Mutant 101 in dirty.js: () => this.close() replaced with () => this.close(false)
Mutant 102 in dirty.js: this._readStream replaced with this._writeStream
Mutant 103 in dirty.js: this._readStream replaced with this._data
Mutant 104 in dirty.js: this._readStream replaced with this._queue
Mutant 105 in dirty.js: this._writeStream replaced with this._writeStream.end()
Mutant 106 in dirty.js: this._writeStream replaced with this._writeStream.destroy()
Mutant 107 in dirty.js: this._writeStream replaced with this._writeStream.cork()
Mutant 108 in dirty.js: this._writeStream.end replaced with this._writeStream.destroy
Mutant 109 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end()
Mutant 110 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.write('')
Mutant 111 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.cork()
Mutant 112 in dirty.js: !this.path replaced with this.path === undefined
Mutant 113 in dirty.js: !this.path replaced with this.path !== undefined
Mutant 114 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 115 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 116 in dirty.js: this.emit('load', 0) replaced with this.emit('load', NaN)
Mutant 117 in dirty.js: 'load' replaced with 'error'
Mutant 118 in dirty.js: 'load' replaced with 'close'
Mutant 119 in dirty.js: 'load' replaced with 'drain'
Mutant 120 in dirty.js: 0 replaced with 1
Mutant 121 in dirty.js: 0 replaced with null
Mutant 122 in dirty.js: 0 replaced with undefined
Mutant 123 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EACCES'
Mutant 124 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOTDIR'
Mutant 125 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOMEM'
Mutant 126 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 127 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 128 in dirty.js: this.emit('load', 0) replaced with this.emit('load', NaN)
Mutant 129 in dirty.js: 'load' replaced with 'error'
Mutant 130 in dirty.js: 'load' replaced with 'close'
Mutant 131 in dirty.js: 'load' replaced with 'drain'
Mutant 132 in dirty.js: 0 replaced with 1
Mutant 133 in dirty.js: 0 replaced with -1
Mutant 134 in dirty.js: 0 replaced with null
Mutant 135 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error(err))
Mutant 136 in dirty.js: this.emit('error', err) replaced with this.emit('error', err.message)
Mutant 137 in dirty.js: this.emit('error', err) replaced with this.emit('error', err.stack)
Mutant 138 in dirty.js: 'error' replaced with 'drain'
Mutant 139 in dirty.js: 'error' replaced with 'close'
Mutant 140 in dirty.js: err replaced with err.message
Mutant 141 in dirty.js: err replaced with err.code
Mutant 142 in dirty.js: err replaced with err.stack
Mutant 143 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') > -1
Mutant 144 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') === chunk.length - 1
Mutant 145 in dirty.js: chunk.lastIndexOf replaced with chunk.indexOf
Mutant 146 in dirty.js: chunk.lastIndexOf replaced with chunk.includes
Mutant 147 in dirty.js: chunk.lastIndexOf replaced with chunk.match
Mutant 148 in dirty.js: '\n' replaced with '\r\n'
Mutant 149 in dirty.js: '\n' replaced with '\t'
Mutant 150 in dirty.js: '\n' replaced with ''
Mutant 151 in dirty.js: '\n' replaced with '\r\n'
Mutant 152 in dirty.js: '\n' replaced with '\t'
Mutant 153 in dirty.js: '\n' replaced with ''
Mutant 154 in dirty.js: arr.pop replaced with arr.shift
Mutant 155 in dirty.js: !rowStr replaced with rowStr === ''
Mutant 156 in dirty.js: !rowStr replaced with rowStr.length === 0
Mutant 157 in dirty.js: !rowStr replaced with rowStr.trim() === ''
Mutant 158 in dirty.js: 'error' replaced with 'warning'
Mutant 159 in dirty.js: 'error' replaced with 'drain'
Mutant 160 in dirty.js: JSON.parse replaced with JSON.stringify
Mutant 161 in dirty.js: JSON.parse replaced with Number
Mutant 162 in dirty.js: JSON.parse replaced with Boolean
Mutant 163 in dirty.js: rowStr replaced with rowStr.toUpperCase()
Mutant 164 in dirty.js: rowStr replaced with rowStr.split('')
Mutant 165 in dirty.js: rowStr replaced with rowStr.replace('key', 'value')
Mutant 166 in dirty.js: !('key' in row) replaced with row.key === undefined
Mutant 167 in dirty.js: !('key' in row) replaced with !row.hasOwnProperty('key')
Mutant 168 in dirty.js: !('key' in row) replaced with row.key !== 'key'
Mutant 169 in dirty.js: 'error' replaced with 'warning'
Mutant 170 in dirty.js: 'error' replaced with 'error' + 'warning'
Mutant 171 in dirty.js: 'error' replaced with 'error' + 1
Mutant 172 in dirty.js: row.val === undefined replaced with row.val !== undefined
Mutant 173 in dirty.js: row.val === undefined replaced with row.val == null
Mutant 174 in dirty.js: row.val === undefined replaced with !row.val
Mutant 175 in dirty.js: row.key replaced with row.val
Mutant 176 in dirty.js: row.key replaced with row.key + 1
Mutant 177 in dirty.js: row.key replaced with row.key.toUpperCase()
Mutant 178 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.val, row.val)
Mutant 179 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.key)
Mutant 180 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.val + 1)
Mutant 181 in dirty.js: row.key replaced with row.val
Mutant 182 in dirty.js: row.key replaced with row.key + 1
Mutant 183 in dirty.js: row.key replaced with row.key.toUpperCase()
Mutant 184 in dirty.js: row.val replaced with row.key
Mutant 185 in dirty.js: row.val replaced with row.val + 1
Mutant 186 in dirty.js: row.val replaced with null
Mutant 187 in dirty.js: buffer.length replaced with buffer.length + 1
Mutant 188 in dirty.js: buffer.length replaced with buffer.length - 1
Mutant 189 in dirty.js: buffer.length replaced with buffer.length * 2
Mutant 190 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, 10)}`))
Mutant 191 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`))
Mutant 192 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.replace('corrupted', 'fixed')}`))
Mutant 193 in dirty.js: 'error' replaced with 'end'
Mutant 194 in dirty.js: 'error' replaced with 'data'
Mutant 195 in dirty.js: 'error' replaced with 'drain'
Mutant 196 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`)
Mutant 197 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`)
Mutant 198 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.replace('db', 'file')}`)
Mutant 199 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 200 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size * 2)
Mutant 201 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size - 1)
Mutant 202 in dirty.js: 'load' replaced with 'loaded'
Mutant 203 in dirty.js: 'load' replaced with 'load_complete'
Mutant 204 in dirty.js: 'load' replaced with 'load_error'
Mutant 205 in dirty.js: this._data.size replaced with this._data.length
Mutant 206 in dirty.js: this._data.size replaced with this._data.keys().length
Mutant 207 in dirty.js: this._data.size replaced with this._data.values().length
Mutant 208 in dirty.js: 'read_close' replaced with 'read_error'
Mutant 209 in dirty.js: 'read_close' replaced with 'write_error'
Mutant 210 in dirty.js: 'read_close' replaced with 'drain'
Mutant 211 in dirty.js: !this._queue.size replaced with this._queue.size > 0
Mutant 212 in dirty.js: !this._queue.size replaced with this._queue.size !== 0
Mutant 213 in dirty.js: !this._queue.size replaced with this._queue.size == 0
Mutant 214 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites < 0
Mutant 215 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites > 0
Mutant 216 in dirty.js: 'drain' replaced with 'error'
Mutant 217 in dirty.js: 'drain' replaced with 'end'
Mutant 218 in dirty.js: 'drain' replaced with 'close'
Mutant 219 in dirty.js: 'write_close' replaced with 'drain'
Mutant 220 in dirty.js: 'write_close' replaced with 'error'
Mutant 221 in dirty.js: 'write_close' replaced with 'close'
Mutant 222 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size && !this._waitForDrain
Mutant 223 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size || this._waitForDrain
Mutant 224 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.entries()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 225 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.keys()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 226 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.values()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 227 in dirty.js: this._queue replaced with this._data
Mutant 228 in dirty.js: this._queue replaced with this._queue.size()
Mutant 229 in dirty.js: this._queue replaced with this._queue.length
Mutant 230 in dirty.js: key replaced with this._data.get(key)
Mutant 231 in dirty.js: key replaced with key + 1
Mutant 232 in dirty.js: key replaced with key.toUpperCase()
Mutant 233 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) + 1
}
Mutant 234 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) * 2
}
Mutant 235 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) - 1
}
Mutant 236 in dirty.js: this._data.get replaced with this._data.set
Mutant 237 in dirty.js: this._data.get replaced with this._data.size
Mutant 238 in dirty.js: key replaced with this._data.get(key + 1)
Mutant 239 in dirty.js: !cbs.length && err != null replaced with cbs.length > 0 && err != null
Mutant 240 in dirty.js: !cbs.length && err != null replaced with !cbs.length && err == null
Mutant 241 in dirty.js: !cbs.length && err != null replaced with cbs.length > 0 && err == null
Mutant 242 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Something went wrong'))
Mutant 243 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 244 in dirty.js: this.emit('error', err) replaced with this.emit('error', undefined)
Mutant 245 in dirty.js: 'error' replaced with 'warning'
Mutant 246 in dirty.js: 'error' replaced with 'info'
Mutant 247 in dirty.js: err replaced with err.message
Mutant 248 in dirty.js: err replaced with null
Mutant 249 in dirty.js: err replaced with undefined
Mutant 250 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 && !this._waitForDrain
Mutant 251 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites <= 0 || !this._waitForDrain
Mutant 252 in dirty.js: 'drain' replaced with 'error'
Mutant 253 in dirty.js: 'drain' replaced with 'end'
Mutant 254 in dirty.js: 'drain' replaced with 'close'
Mutant 255 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.reverse()) cb(err);
Mutant 256 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.slice(1)) cb(err);
Mutant 257 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.filter(cb => cb !== cbs[0])) cb(err);
Mutant 258 in dirty.js: cbs replaced with cbs.reverse()
Mutant 259 in dirty.js: cbs replaced with cbs.slice(1)
Mutant 260 in dirty.js: cbs replaced with cbs.concat(cbs)
Mutant 261 in dirty.js: err replaced with undefined
Mutant 262 in dirty.js: err replaced with null
Mutant 263 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
Mutant 264 in dirty.js: this._waitForDrain replaced with this._waitForDrain === false
[32m09:55:48 (2595) INFO Instrumenter[39m Instrumented 2 source file(s) with 265 mutant(s)
[32m09:55:48 (2595) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m09:55:49 (2595) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m09:55:49 (2595) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m09:55:50 (2595) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 523 ms, overhead 1 ms).
Mutation testing 7% (elapsed: <1m, remaining: ~2m) 19/265 tested (2 survived, 0 timed out)
Mutation testing 11% (elapsed: <1m, remaining: ~2m) 30/265 tested (4 survived, 0 timed out)
Mutation testing 13% (elapsed: <1m, remaining: ~3m) 35/265 tested (5 survived, 0 timed out)
Mutation testing 17% (elapsed: <1m, remaining: ~3m) 46/265 tested (5 survived, 0 timed out)
Mutation testing 24% (elapsed: <1m, remaining: ~2m) 65/265 tested (9 survived, 0 timed out)
Mutation testing 31% (elapsed: ~1m, remaining: ~2m) 84/265 tested (9 survived, 0 timed out)
Mutation testing 38% (elapsed: ~1m, remaining: ~1m) 103/265 tested (22 survived, 0 timed out)
Mutation testing 44% (elapsed: ~1m, remaining: ~1m) 118/265 tested (26 survived, 0 timed out)
Mutation testing 44% (elapsed: ~1m, remaining: ~1m) 119/265 tested (26 survived, 1 timed out)
Mutation testing 49% (elapsed: ~1m, remaining: ~1m) 130/265 tested (26 survived, 2 timed out)
Mutation testing 50% (elapsed: ~1m, remaining: ~1m) 135/265 tested (26 survived, 4 timed out)
Mutation testing 58% (elapsed: ~2m, remaining: ~1m) 155/265 tested (38 survived, 4 timed out)
Mutation testing 65% (elapsed: ~2m, remaining: ~1m) 174/265 tested (49 survived, 4 timed out)
Mutation testing 72% (elapsed: ~2m, remaining: <1m) 193/265 tested (54 survived, 4 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 202/265 tested (60 survived, 4 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 204/265 tested (60 survived, 6 timed out)
Mutation testing 82% (elapsed: ~2m, remaining: <1m) 219/265 tested (70 survived, 7 timed out)
Mutation testing 83% (elapsed: ~3m, remaining: <1m) 222/265 tested (70 survived, 7 timed out)
Mutation testing 86% (elapsed: ~3m, remaining: <1m) 230/265 tested (71 survived, 9 timed out)
Mutation testing 91% (elapsed: ~3m, remaining: <1m) 242/265 tested (72 survived, 9 timed out)
Mutation testing 94% (elapsed: ~3m, remaining: <1m) 251/265 tested (80 survived, 10 timed out)
Mutation testing 95% (elapsed: ~3m, remaining: <1m) 254/265 tested (80 survived, 11 timed out)
Mutation testing 96% (elapsed: ~3m, remaining: <1m) 257/265 tested (81 survived, 12 timed out)

All tests
  ✓ All tests (killed 167)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (typeof val === 'undefined') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:19
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.has(key) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.slice());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.concat([]));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.filter(() => true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:5
-       this.set(key, undefined, cb);
+       this.set(key, undefined, () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, this._data.get(key)) === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size || this._inFlightWrites < 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.emit('drain'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.emit('close'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('close', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('read_close', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(false));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.end()) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.destroy()) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.cork());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error(err));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', err.stack);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('drain', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('close', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.code);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.stack);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.indexOf('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.includes('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.match('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:33
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.trim() === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('warning', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('drain', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.key === undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (!row.hasOwnProperty('key')) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warning', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error' + 'warning', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error' + 1, new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (!row.val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer.length * 2) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, 10)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.replace('corrupted', 'fixed')}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('data', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('drain', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.replace('db', 'file')}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('read_error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('write_error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size !== 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size == 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites < 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites > 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('end');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:5
-       for (const [key, cbs] of this._queue) {
-         this._queue.delete(key);
-         const data = `${JSON.stringify({key, val: this._data.get(key)})}\n`;
-         ++this._inFlightWrites;
-         this._waitForDrain = !this._writeStream.write(data, (err) => {
-           if (!cbs.length && err != null) this.emit('error', err);
-           if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
-           for (const cb of cbs) cb(err);
-         });
-         if (this._waitForDrain) break;
-       }
+       for (const [key, cbs] of this._queue.entries()) {
+     this._queue.delete(key);
+     const data = `${JSON.stringify({
+       key,
+       val: this._data.get(key)
+     })}\n`;
+     ++this._inFlightWrites;
+     this._waitForDrain = !this._writeStream.write(data, err => {
+       if (!cbs.length && err != null) this.emit('error', err);
+       if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
+       for (const cb of cbs) cb(err);
+     });
+     if (this._waitForDrain) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (cbs.length > 0 && err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Something went wrong'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('info', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:9
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain === false) break;

Ran 0.95 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   67.55 |      167 |        12 |         86 |        0 |        0 |
 dirty.js |   67.55 |      167 |        12 |         86 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m09:59:45 (2595) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m09:59:45 (2595) INFO MutationTestExecutor[39m Done in 3 minutes 58 seconds.

real	3m59.706s
user	2m19.990s
sys	0m24.945s
