{"files":{"lib/ZipAFolder.ts":{"language":"typescript","mutants":[{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      39 |             /You must either provide a target file path or a custom write stream to write to./\n      40 |         );\n    > 41 |         await expect(\n         |               ^\n      42 |             zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: undefined})\n      43 |         ).rejects.toThrow(/You must either provide a target file path or a custom write stream to write to./);\n      44 |         await expect(zipafolder.tar(path.resolve(__dirname, 'data/'), undefined)).rejects.toThrow(\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:41:15)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      110 |\n      111 |     it('TGZ test folder and tar target in same directory should throw an error', async () => {\n    > 112 |         await expect(zipafolder.tar(path.resolve(__dirname, 'data/'), testSameDirectoryTAR)).rejects.toThrow(\n          |               ^\n      113 |             /Source and target folder must be different./\n      114 |         );\n      115 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:15)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 10\n    Received:   117179\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      142 |\n      143 |     it('TGZ test folder failing', async () => {\n    > 144 |         expect.assertions(1);\n          |                ^\n      145 |         try {\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:144:16)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      151 |\n      152 |     it('TGZ test folder into a gzipped tarfile in a notexisting folder', async () => {\n    > 153 |         expect.assertions(1);\n          |                ^\n      154 |         try {\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:153:16)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   89.52 |     45.7 |     100 |   89.42 |                   \n\n ZipAFolder.ts |   89.52 |     45.7 |     100 |   89.42 | 26,41,81-104      \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 1 skipped, 16 passed, 22 total\nSnapshots:   0 total\nTime:        4.919 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":6,"line":56},"start":{"column":30,"line":35}}},{"id":"5","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 198085\n    Received:   212456\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 147689\n    Received:   24239616\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.23 |    52.03 |     100 |   95.19 |                   \n\n ZipAFolder.ts |   95.23 |    52.03 |     100 |   95.19 | 26,41,100-104     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        5.448 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"3","mutatorName":"LogicalOperator","replacement":"zipAFolderOptions && {\n  compression: COMPRESSION_LEVEL.high\n}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.099 s)\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"Cannot read properties of undefined (reading 'compression')\"\n\n          85 |         compression: COMPRESSION_LEVEL.high\n          86 |       })));\n        > 87 |       if (stryMutAct_9fa48(\"7\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"6\") ? false : stryMutAct_9fa48(\"5\") ? true : (stryCov_9fa48(\"5\", \"6\", \"7\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n             |                                                                                                                                                                                      ^\n          88 |         if (stryMutAct_9fa48(\"8\")) {\n          89 |           {}\n          90 |         } else {\n\n      at Function.compression [as tar] (lib/ZipAFolder.ts:87:182)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:44:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:44:91)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Cannot read properties of undefined (reading 'compression')\"\n\n          85 |         compression: COMPRESSION_LEVEL.high\n          86 |       })));\n        > 87 |       if (stryMutAct_9fa48(\"7\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"6\") ? false : stryMutAct_9fa48(\"5\") ? true : (stryCov_9fa48(\"5\", \"6\", \"7\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n             |                                                                                                                                                                                      ^\n          88 |         if (stryMutAct_9fa48(\"8\")) {\n          89 |           {}\n          90 |         } else {\n\n      at Function.compression [as tar] (lib/ZipAFolder.ts:87:182)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      85 |         compression: COMPRESSION_LEVEL.high\n      86 |       })));\n    > 87 |       if (stryMutAct_9fa48(\"7\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"6\") ? false : stryMutAct_9fa48(\"5\") ? true : (stryCov_9fa48(\"5\", \"6\", \"7\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n         |                                                                                                                                                                                      ^\n      88 |         if (stryMutAct_9fa48(\"8\")) {\n      89 |           {}\n      90 |         } else {\n\n      at Function.compression [as tar] (lib/ZipAFolder.ts:87:182)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      85 |         compression: COMPRESSION_LEVEL.high\n      86 |       })));\n    > 87 |       if (stryMutAct_9fa48(\"7\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"6\") ? false : stryMutAct_9fa48(\"5\") ? true : (stryCov_9fa48(\"5\", \"6\", \"7\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n         |                                                                                                                                                                                      ^\n      88 |         if (stryMutAct_9fa48(\"8\")) {\n      89 |           {}\n      90 |         } else {\n\n      at compression (lib/ZipAFolder.ts:87:182)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'compression')\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'compression')\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      85 |         compression: COMPRESSION_LEVEL.high\n      86 |       })));\n    > 87 |       if (stryMutAct_9fa48(\"7\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"6\") ? false : stryMutAct_9fa48(\"5\") ? true : (stryCov_9fa48(\"5\", \"6\", \"7\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n         |                                                                                                                                                                                      ^\n      88 |         if (stryMutAct_9fa48(\"8\")) {\n      89 |           {}\n      90 |         } else {\n\n      at compression (lib/ZipAFolder.ts:87:182)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      85 |         compression: COMPRESSION_LEVEL.high\n      86 |       })));\n    > 87 |       if (stryMutAct_9fa48(\"7\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"6\") ? false : stryMutAct_9fa48(\"5\") ? true : (stryCov_9fa48(\"5\", \"6\", \"7\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n         |                                                                                                                                                                                      ^\n      88 |         if (stryMutAct_9fa48(\"8\")) {\n      89 |           {}\n      90 |         } else {\n\n      at compression (lib/ZipAFolder.ts:87:182)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.23 |    51.58 |     100 |   95.19 |                   \n\n ZipAFolder.ts |   95.23 |    51.58 |     100 |   95.19 | 26,41,88-92       \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 1 skipped, 13 passed, 22 total\nSnapshots:   0 total\nTime:        5.235 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":38},"start":{"column":38,"line":36}}},{"id":"4","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.149 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 208553\n    Received:   211412\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        5.525 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":38},"start":{"column":59,"line":36}}},{"id":"2","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.379 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 215077\n    Received:   215077\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.23 |    51.13 |     100 |   95.19 |                   \n\n ZipAFolder.ts |   95.23 |    51.13 |     100 |   95.19 | 26,41,88-92       \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        5.528 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":38},"start":{"column":38,"line":36}}},{"id":"1","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":1,"location":{"end":{"column":10,"line":38},"start":{"column":38,"line":36}}},{"id":"6","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"9","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:92:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    54.29 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    54.29 |     100 |   98.07 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        4.102 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"7","mutatorName":"EqualityOperator","replacement":"o.compression !== COMPRESSION_LEVEL.uncompressed","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 24239616\n    Received:   24239616\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    54.29 |     100 |   98.07 |                   \n ZipAFolder.ts |   98.09 |    54.29 |     100 |   98.07 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        4.376 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"10","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.tar (lib/ZipAFolder.ts:92:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        4.284 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":87,"line":41},"start":{"column":82,"line":41}}},{"id":"8","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":10,"line":42},"start":{"column":63,"line":40}}},{"id":"12","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 32690\n    Received:   212456\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          240 |         } else {\n          241 |           stryCov_9fa48(\"59\");\n        > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n              |                 ^\n          243 |         }\n          244 |       }\n          245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:127:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? fal\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    53.39 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    53.39 |     100 |   98.07 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nse : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       11 failed, 1 skipped, 10 passed, 22 total\nSnapshots:   0 total\nTime:        3.775 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":14,"line":54},"start":{"column":39,"line":43}}},{"id":"11","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      39 |             /You must either provide a target file path or a custom write stream to write to./\n      40 |         );\n    > 41 |         await expect(\n         |               ^\n      42 |             zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: undefined})\n      43 |         ).rejects.toThrow(/You must either provide a target file path or a custom write stream to write to./);\n      44 |         await expect(zipafolder.tar(path.resolve(__dirname, 'data/'), undefined)).rejects.toThrow(\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:41:15)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      110 |\n      111 |     it('TGZ test folder and tar target in same directory should throw an error', async () => {\n    > 112 |         await expect(zipafolder.tar(path.resolve(__dirname, 'data/'), testSameDirectoryTAR)).rejects.toThrow(\n          |               ^\n      113 |             /Source and target folder must be different./\n      114 |         );\n      115 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:15)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 24239616\n    Received:   24239616\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      142 |\n      143 |     it('TGZ test folder failing', async () => {\n    > 144 |         expect.assertions(1);\n          |                ^\n      145 |         try {\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:144:16)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      151 |\n      152 |     it('TGZ test folder into a gzipped tarfile in a notexisting folder', async () => {\n    > 153 |         expect.assertions(1);\n          |                ^\n      154 |         try {\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:153:16)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   96.19 |    52.94 |     100 |   96.15 |                   \n\n ZipAFolder.ts |   96.19 |    52.94 |     100 |   96.15 | 26,41,103-104     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 1 skipped, 16 passed, 22 total\nSnapshots:   0 total\nTime:        4.054 s, estimated 7 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":55},"start":{"column":16,"line":42}}},{"id":"13","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › TGZ test folder\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.tar (lib/ZipAFolder.ts:104:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.tar (lib/ZipAFolder.ts:104:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:127:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at tar (lib/ZipAFolder.ts:104:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at tar (lib/ZipAFolder.ts:104:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at tar (lib/ZipAFolder.ts:104:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       7 failed, 1 skipped, 14 passed, 22 total\nSnapshots:   0 total\nTime:        3.864 s, estimated 7 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":30,"line":46},"start":{"column":25,"line":46}}},{"id":"17","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      33 |\n      34 |     it('Called without a targetFilePath or a customWriteStream should throw an error', async () => {\n    > 35 |         await expect(\n         |               ^\n      36 |             zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: undefined})\n      37 |         ).rejects.toThrow(/You must either provide a target file path or a custom write stream to write to./);\n      38 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), undefined)).rejects.toThrow(\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:35:15)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      48 |\n      49 |     it('ZIP test folder and zip target in same directory should throw an error', async () => {\n    > 50 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), testSameDirectoryZIP)).rejects.toThrow(\n         |               ^\n      51 |             /Source and target folder must be different./\n      52 |         );\n      53 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:15)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      80 |\n      81 |     it('ZIP test folder failing', async () => {\n    > 82 |         expect.assertions(1);\n         |                ^\n      83 |         try {\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:82:16)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      89 |\n      90 |     it('ZIP test folder into a zipfile in a notexisting folder', async () => {\n    > 91 |         expect.assertions(1);\n         |                ^\n      92 |         try {\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:91:16)\n\n\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   86.66 |    44.34 |     100 |   86.53 |                       \n\n ZipAFolder.ts |   86.66 |    44.34 |     100 |   86.53 | 26,41,132-158,238-242 \n---------------|---------|----------|---------|---------|-----------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 1 skipped, 17 passed, 22 total\nSnapshots:   0 total\nTime:        3.747 s, estimated 4 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":6,"line":97},"start":{"column":30,"line":69}}},{"id":"15","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 209074\n    Received:   335366\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 220117\n    Received:   24239616\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        4.397 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":49},"start":{"column":27,"line":49}}},{"id":"14","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 167424\n    Received:   335366\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 220117\n    Received:   24239616\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    54.29 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    54.29 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        4.56 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":18,"line":53},"start":{"column":34,"line":48}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 110177\n    Received:   335366\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |   95.23 |    51.13 |     100 |   95.19 |                   \n ZipAFolder.ts |   95.23 |    51.13 |     100 |   95.19 | 26,41,139-143     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        4.677 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":72},"start":{"column":38,"line":70}}},{"id":"16","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.023 s)\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 335366\n    Received:   335366\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 215077\n    Received:   215077\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        5.125 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":52},"start":{"column":34,"line":50}}},{"id":"20","mutatorName":"LogicalOperator","replacement":"zipAFolderOptions && {\n  compression: COMPRESSION_LEVEL.high\n}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.271 s)\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"Cannot read properties of undefined (reading 'compression')\"\n\n          136 |         compression: COMPRESSION_LEVEL.high\n          137 |       })));\n        > 138 |       if (stryMutAct_9fa48(\"24\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"23\") ? false : stryMutAct_9fa48(\"22\") ? true : (stryCov_9fa48(\"22\", \"23\", \"24\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n              |                                                                                                                                                                                            ^\n          139 |         if (stryMutAct_9fa48(\"25\")) {\n          140 |           {}\n          141 |         } else {\n\n      at Function.compression [as zip] (lib/ZipAFolder.ts:138:188)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:38:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:38:91)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Cannot read properties of undefined (reading 'compression')\"\n\n          136 |         compression: COMPRESSION_LEVEL.high\n          137 |       })));\n        > 138 |       if (stryMutAct_9fa48(\"24\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"23\") ? false : stryMutAct_9fa48(\"22\") ? true : (stryCov_9fa48(\"22\", \"23\", \"24\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n              |                                                                                                                                                                                            ^\n          139 |         if (stryMutAct_9fa48(\"25\")) {\n          140 |           {}\n          141 |         } else {\n\n      at Function.compression [as zip] (lib/ZipAFolder.ts:138:188)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      136 |         compression: COMPRESSION_LEVEL.high\n      137 |       })));\n    > 138 |       if (stryMutAct_9fa48(\"24\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"23\") ? false : stryMutAct_9fa48(\"22\") ? true : (stryCov_9fa48(\"22\", \"23\", \"24\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n          |                                                                                                                                                                                            ^\n      139 |         if (stryMutAct_9fa48(\"25\")) {\n      140 |           {}\n      141 |         } else {\n\n      at Function.compression [as zip] (lib/ZipAFolder.ts:138:188)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 212456\n    Received:   212456\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      136 |         compression: COMPRESSION_LEVEL.high\n      137 |       })));\n    > 138 |       if (stryMutAct_9fa48(\"24\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"23\") ? false : stryMutAct_9fa48(\"22\") ? true : (stryCov_9fa48(\"22\", \"23\", \"24\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n          |                                                                                                                                                                                            ^\n      139 |         if (stryMutAct_9fa48(\"25\")) {\n      140 |           {}\n      141 |         } else {\n\n      at compression (lib/ZipAFolder.ts:138:188)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'compression')\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'compression')\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      136 |         compression: COMPRESSION_LEVEL.high\n      137 |       })));\n    > 138 |       if (stryMutAct_9fa48(\"24\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"23\") ? false : stryMutAct_9fa48(\"22\") ? true : (stryCov_9fa48(\"22\", \"23\", \"24\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n          |                                                                                                                                                                                            ^\n      139 |         if (stryMutAct_9fa48(\"25\")) {\n      140 |           {}\n      141 |         } else {\n\n      at compression (lib/ZipAFolder.ts:138:188)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'compression')\n\n      136 |         compression: COMPRESSION_LEVEL.high\n      137 |       })));\n    > 138 |       if (stryMutAct_9fa48(\"24\") ? o.compression !== COMPRESSION_LEVEL.uncompressed : stryMutAct_9fa48(\"23\") ? false : stryMutAct_9fa48(\"22\") ? true : (stryCov_9fa48(\"22\", \"23\", \"24\"), o.compression === COMPRESSION_LEVEL.uncompressed)) {\n          |                                                                                                                                                                                            ^\n      139 |         if (stryMutAct_9fa48(\"25\")) {\n      140 |           {}\n      141 |         } else {\n\n      at compression (lib/ZipAFolder.ts:138:188)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.23 |    51.13 |     100 |   95.19 |                   \n\n ZipAFolder.ts |   95.23 |    51.13 |     100 |   95.19 | 26,41,139-143     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 1 skipped, 12 passed, 22 total\nSnapshots:   0 total\nTime:        5.35 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":72},"start":{"column":38,"line":70}}},{"id":"19","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","location":{"end":{"column":10,"line":72},"start":{"column":38,"line":70}}},{"id":"21","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 24232286\n    Received:   24232286\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        4.679 s, estimated 5 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":72},"start":{"column":59,"line":70}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   24232286\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   211412\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.23 |    52.48 |     100 |   95.19 |                   \n\n ZipAFolder.ts |   95.23 |    52.48 |     100 |   95.19 | 26,41,154-158     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        4.502 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"24","mutatorName":"EqualityOperator","replacement":"o.compression !== COMPRESSION_LEVEL.uncompressed","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 221016\n    Received:   24232286\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 46995\n    Received:   211412\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    54.29 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    54.29 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        4.405 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"23","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"25","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":10,"line":84},"start":{"column":63,"line":74}}},{"id":"26","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:143:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    53.84 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    53.84 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        4.31 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":14,"line":83},"start":{"column":39,"line":75}}},{"id":"30","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      33 |\n      34 |     it('Called without a targetFilePath or a customWriteStream should throw an error', async () => {\n    > 35 |         await expect(\n         |               ^\n      36 |             zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: undefined})\n      37 |         ).rejects.toThrow(/You must either provide a target file path or a custom write stream to write to./);\n      38 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), undefined)).rejects.toThrow(\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:35:15)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      48 |\n      49 |     it('ZIP test folder and zip target in same directory should throw an error', async () => {\n    > 50 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), testSameDirectoryZIP)).rejects.toThrow(\n         |               ^\n      51 |             /Source and target folder must be different./\n      52 |         );\n      53 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:15)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 49363\n    Received:   212456\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      80 |\n      81 |     it('ZIP test folder failing', async () => {\n    > 82 |         expect.assertions(1);\n         |                ^\n      83 |         try {\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:82:16)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      89 |\n      90 |     it('ZIP test folder into a zipfile in a notexisting folder', async () => {\n    > 91 |         expect.assertions(1);\n         |                ^\n      92 |         try {\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:91:16)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 46995\n    Received:   211412\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n\n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   93.33 |    52.03 |     100 |   93.26 |                       \n\n ZipAFolder.ts |   93.33 |    52.03 |     100 |   93.26 | 26,41,157-158,238-242 \n\n---------------|---------|----------|---------|---------|-----------------------\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 1 skipped, 15 passed, 22 total\nSnapshots:   0 total\nTime:        4.083 s, estimated 5 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":96},"start":{"column":16,"line":84}}},{"id":"31","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          240 |         } else {\n          241 |           stryCov_9fa48(\"59\");\n        > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n              |                 ^\n          243 |         }\n          244 |       }\n          245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:65:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target fil\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    53.84 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    53.84 |     100 |   98.07 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\ne path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        4.141 s, estimated 5 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":14,"line":95},"start":{"column":39,"line":85}}},{"id":"28","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.021 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 117179\n    Received:   211412\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    54.75 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    54.75 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        5.157 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":18,"line":82},"start":{"column":34,"line":80}}},{"id":"32","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.zip (lib/ZipAFolder.ts:158:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.zip (lib/ZipAFolder.ts:158:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:65:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at zip (lib/ZipAFolder.ts:158:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at zip (lib/ZipAFolder.ts:158:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at zip (lib/ZipAFolder.ts:158:11)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    create(): format not registered\n\n      243 |         }\n      244 |       }\n    > 245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n          |                                             ^\n      246 |       return new Promise((resolve, reject) => {\n      247 |         if (stryMutAct_9fa48(\"64\")) {\n      248 |           {}\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:245:45)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       7 failed, 1 skipped, 14 passed, 22 total\nSnapshots:   0 total\nTime:        4.225 s, estimated 5 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":30,"line":88},"start":{"column":25,"line":88}}},{"id":"29","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.2 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 202437\n    Received:   211412\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        5.264 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":81},"start":{"column":28,"line":81}}},{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      33 |\n      34 |     it('Called without a targetFilePath or a customWriteStream should throw an error', async () => {\n    > 35 |         await expect(\n         |               ^\n      36 |             zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: undefined})\n      37 |         ).rejects.toThrow(/You must either provide a target file path or a custom write stream to write to./);\n      38 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), undefined)).rejects.toThrow(\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:35:15)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      48 |\n      49 |     it('ZIP test folder and zip target in same directory should throw an error', async () => {\n    > 50 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), testSameDirectoryZIP)).rejects.toThrow(\n         |               ^\n      51 |             /Source and target folder must be different./\n      52 |         );\n      53 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:15)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 335366\n    Received:   335366\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      80 |\n      81 |     it('ZIP test folder failing', async () => {\n    > 82 |         expect.assertions(1);\n         |                ^\n      83 |         try {\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:82:16)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      89 |\n      90 |     it('ZIP test folder into a zipfile in a notexisting folder', async () => {\n    > 91 |         expect.assertions(1);\n         |                ^\n      92 |         try {\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:91:16)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      110 |\n      111 |     it('TGZ test folder and tar target in same directory should throw an error', async () => {\n    > 112 |         await expect(zipafolder.tar(path.resolve(__dirname, 'data/'), testSameDirectoryTAR)).rejects.toThrow(\n          |               ^\n      113 |             /Source and target folder must be different./\n      114 |         );\n      115 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:15)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      142 |\n      143 |     it('TGZ test folder failing', async () => {\n    > 144 |         expect.assertions(1);\n          |                ^\n      145 |         try {\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:144:16)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect.assertions(1)\n\n    Expected one assertion to be called but received zero assertion calls.\n\n      151 |\n      152 |     it('TGZ test folder into a gzipped tarfile in a notexisting folder', async () => {\n    > 153 |         expect.assertions(1);\n          |                ^\n      154 |         try {\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:153:16)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   54.28 |     28.5 |   83.33 |   53.84 |                   \n\n ZipAFolder.ts |   54.28 |     28.5 |   83.33 |   53.84 | 26,41,189-276     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 1 skipped, 13 passed, 22 total\nSnapshots:   0 total\nTime:        1.817 s, estimated 5 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":6,"line":152},"start":{"column":31,"line":111}}},{"id":"33","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.635 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 335366\n    Received:   335366\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    54.75 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    54.75 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        5.727 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":18,"line":94},"start":{"column":34,"line":90}}},{"id":"27","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":30,"line":78},"start":{"column":25,"line":78}}},{"id":"37","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          240 |         } else {\n          241 |           stryCov_9fa48(\"59\");\n        > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n              |                 ^\n          243 |         }\n          244 |       }\n          245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:143:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          240 |         } else {\n          241 |           stryCov_9fa48(\"59\");\n        > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n              |                 ^\n          243 |         }\n          244 |       }\n          245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    You mu\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   74.28 |    41.62 |   91.66 |   74.03 |                       \n\n ZipAFolder.ts |   74.28 |    41.62 |   91.66 |   74.03 | 26,41,192-228,255-264 \n\n---------------|---------|----------|---------|---------|-----------------------\n\nst either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:92:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       16 failed, 1 skipped, 5 passed, 22 total\nSnapshots:   0 total\nTime:        3.195 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"34","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 335366\n    Received:   335366\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |     55.2 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |     55.2 |     100 |   98.07 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        4.919 s, estimated 5 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":93},"start":{"column":27,"line":91}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"The \\\"path\\\" argument must be of type string. Received undefined\"\n\n          194 |         } else {\n          195 |           stryCov_9fa48(\"41\");\n        > 196 |           const targetBasePath: string = path.dirname(targetFilePath);\n              |                                               ^\n          197 |           if (stryMutAct_9fa48(\"44\") ? targetBasePath !== src : stryMutAct_9fa48(\"43\") ? false : stryMutAct_9fa48(\"42\") ? true : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetBasePath === src)) {\n          198 |             if (stryMutAct_9fa48(\"45\")) {\n          199 |               {}\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:196:47)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:36:24)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:37:19)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      194 |         } else {\n      195 |           stryCov_9fa48(\"41\");\n    > 196 |           const targetBasePath: string = path.dirname(targetFilePath);\n          |                                               ^\n      197 |           if (stryMutAct_9fa48(\"44\") ? targetBasePath !== src : stryMutAct_9fa48(\"43\") ? false : stryMutAct_9fa48(\"42\") ? true : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetBasePath === src)) {\n      198 |             if (stryMutAct_9fa48(\"45\")) {\n      199 |               {}\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:196:47)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      194 |         } else {\n      195 |           stryCov_9fa48(\"41\");\n    > 196 |           const targetBasePath: string = path.dirname(targetFilePath);\n          |                                               ^\n      197 |           if (stryMutAct_9fa48(\"44\") ? targetBasePath !== src : stryMutAct_9fa48(\"43\") ? false : stryMutAct_9fa48(\"42\") ? true : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetBasePath === src)) {\n      198 |             if (stryMutAct_9fa48(\"45\")) {\n      199 |               {}\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:196:47)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   91.42 |    44.79 |     100 |   91.34 |                   \n\n ZipAFolder.ts |   91.42 |    44.79 |     100 |   91.34 | 26,41,230-242     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 1 skipped, 16 passed, 22 total\nSnapshots:   0 total\nTime:        4.675 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"39","mutatorName":"BooleanLiteral","replacement":"zipAFolderOptions?.customWriteStream","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          240 |         } else {\n          241 |           stryCov_9fa48(\"59\");\n        > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n              |                 ^\n          243 |         }\n          244 |       }\n          245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:143:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          240 |         } else {\n          241 |           stryCov_9fa48(\"59\");\n        > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n              |                 ^\n          243 |         }\n          244 |       }\n          245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    You mu\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   74.28 |    45.24 |   91.66 |   74.03 |                       \n\n ZipAFolder.ts |   74.28 |    45.24 |   91.66 |   74.03 | 26,41,192-228,255-264 \n\n---------------|---------|----------|---------|---------|-----------------------\n\nst either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:92:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      240 |         } else {\n      241 |           stryCov_9fa48(\"59\");\n    > 242 |           throw new Error(stryMutAct_9fa48(\"60\") ? \"\" : (stryCov_9fa48(\"60\"), 'You must either provide a target file path or a custom write stream to write to.'));\n          |                 ^\n      243 |         }\n      244 |       }\n      245 |       const zipArchive: archiver.Archiver = archiver(format, stryMutAct_9fa48(\"63\") ? archiverOptions && {} : stryMutAct_9fa48(\"62\") ? false : stryMutAct_9fa48(\"61\") ? true : (stryCov_9fa48(\"61\", \"62\", \"63\"), archiverOptions || {}));\n\n      at Function.compress (lib/ZipAFolder.ts:242:17)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       16 failed, 1 skipped, 5 passed, 22 total\nSnapshots:   0 total\nTime:        2.977 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":50,"line":114},"start":{"column":13,"line":114}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Cannot read properties of undefined (reading 'on')\"\n\n          249 |         } else {\n          250 |           stryCov_9fa48(\"64\");\n        > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n              |                  ^\n          252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n          253 |           zipArchive.pipe(output);\n          254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:143:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'on')\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'on')\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Cannot read properties of undefined (reading 'on')\"\n\n          249 |         } else {\n          250 |           stryCov_9fa48(\"64\");\n        > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n              |                  ^\n          252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n          253 |           zipArchive.pipe(output);\n          254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\n---------------|---------|----------|---------|---------|-----------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\nAll files      |   75.23 |    47.05 |   91.66 |      75 |                       \n\n ZipAFolder.ts |   75.23 |    47.05 |   91.66 |      75 | 26,41,195-228,255-264 \n---------------|---------|----------|---------|---------|-----------------------\n\n\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:92:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'on')\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'on')\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'on')\n\n      249 |         } else {\n      250 |           stryCov_9fa48(\"64\");\n    > 251 |           output.on(stryMutAct_9fa48(\"65\") ? \"\" : (stryCov_9fa48(\"65\"), 'close'), resolve);\n          |                  ^\n      252 |           output.on(stryMutAct_9fa48(\"66\") ? \"\" : (stryCov_9fa48(\"66\"), 'error'), reject);\n      253 |           zipArchive.pipe(output);\n      254 |           if (stryMutAct_9fa48(\"68\") ? false : stryMutAct_9fa48(\"67\") ? true : (stryCov_9fa48(\"67\", \"68\"), isGlob(src))) {\n\n      at on (lib/ZipAFolder.ts:251:18)\n      at Function.compress (lib/ZipAFolder.ts:246:14)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\nTest Suites: 1 failed, 1 total\nTests:       16 failed, 1 skipped, 5 passed, 22 total\nSnapshots:   0 total\nTime:        2.834 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":10,"line":129},"start":{"column":70,"line":114}}},{"id":"38","mutatorName":"LogicalOperator","replacement":"!zipAFolderOptions?.customWriteStream || targetFilePath","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.505 s)\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"The \\\"path\\\" argument must be of type string. Received undefined\"\n\n          194 |         } else {\n          195 |           stryCov_9fa48(\"41\");\n        > 196 |           const targetBasePath: string = path.dirname(targetFilePath);\n              |                                               ^\n          197 |           if (stryMutAct_9fa48(\"44\") ? targetBasePath !== src : stryMutAct_9fa48(\"43\") ? false : stryMutAct_9fa48(\"42\") ? true : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetBasePath === src)) {\n          198 |             if (stryMutAct_9fa48(\"45\")) {\n          199 |               {}\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:196:47)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:36:24)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:37:19)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.23 |    52.03 |     100 |   95.19 |                   \n\n ZipAFolder.ts |   95.23 |    52.03 |     100 |   95.19 | 26,41,238-242     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        5.568 s, estimated 6 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"40","mutatorName":"OptionalChaining","replacement":"zipAFolderOptions.customWriteStream","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n          189 |       stryCov_9fa48(\"35\");\n          190 |       let output: WriteStream;\n        > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n              |                                                                                                                                                                                                                                                                                                                                     ^\n          192 |         if (stryMutAct_9fa48(\"41\")) {\n          193 |           {}\n          194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:38:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:38:91)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n          189 |       stryCov_9fa48(\"35\");\n          190 |       let output: WriteStream;\n        > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n              |                                                                                                                                                                                                                                                                                                                                     ^\n          192 |         if (stryMutAct_9fa48(\"41\")) {\n          193 |           {}\n          194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\")) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\")) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\"\n---------------|---------|----------|---------|---------|-------------------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s             \n---------------|---------|----------|---------|---------|-------------------------------\n\nAll files      |   86.66 |    49.32 |   91.66 |   86.53 |                               \n\n ZipAFolder.ts |   86.66 |    49.32 |   91.66 |   86.53 | 26,41,198-202,221-225,255-264 \n\n---------------|---------|----------|---------|---------|-------------------------------\n\n)) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\")) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n          189 |       stryCov_9fa48(\"35\");\n          190 |       let output: WriteStream;\n        > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n              |                                                                                                                                                                                                                                                                                                                                     ^\n          192 |         if (stryMutAct_9fa48(\"41\")) {\n          193 |           {}\n          194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\")) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\")) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\")) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compres\ns] (lib/ZipAFolder.ts:191:325)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: Cannot read properties of undefined (reading 'customWriteStream')\n\n      189 |       stryCov_9fa48(\"35\");\n      190 |       let output: WriteStream;\n    > 191 |       if (stryMutAct_9fa48(\"38\") ? !zipAFolderOptions?.customWriteStream || targetFilePath : stryMutAct_9fa48(\"37\") ? false : stryMutAct_9fa48(\"36\") ? true : (stryCov_9fa48(\"36\", \"37\", \"38\"), (stryMutAct_9fa48(\"39\") ? zipAFolderOptions?.customWriteStream : (stryCov_9fa48(\"39\"), !(stryMutAct_9fa48(\"40\") ? zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"40\"), zipAFolderOptions?.customWriteStream)))) && targetFilePath)) {\n          |                                                                                                                                                                                                                                                                                                                                     ^\n      192 |         if (stryMutAct_9fa48(\"41\")) {\n      193 |           {}\n      194 |         } else {\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:191:325)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       15 failed, 1 skipped, 6 passed, 22 total\nSnapshots:   0 total\nTime:        4.275 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":50,"line":114},"start":{"column":14,"line":114}}},{"id":"42","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:143:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:92:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Erro\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   80.95 |    49.32 |   91.66 |   80.76 |                       \n\n ZipAFolder.ts |   80.95 |    49.32 |   91.66 |   80.76 | 26,41,205-228,255-264 \n\n---------------|---------|----------|---------|---------|-----------------------\n\nr(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        3.621 s, estimated 5 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"44","mutatorName":"EqualityOperator","replacement":"targetBasePath !== src","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      48 |\n      49 |     it('ZIP test folder and zip target in same directory should throw an error', async () => {\n    > 50 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), testSameDirectoryZIP)).rejects.toThrow(\n         |               ^\n      51 |             /Source and target folder must be different./\n      52 |         );\n      53 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:15)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:143:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:158:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      110 |\n      111 |     it('TGZ test folder and tar target in same directory should throw an error', async () => {\n    > 112 |         await expect(zipafolder.tar(path.resolve(__dirname, 'data/'), testSameDirectoryTAR)).rejects.toThrow(\n          |               ^\n      113 |             /Source and target folder must be different./\n      114 |         );\n      115 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:15)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:92:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › \n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |   89.52 |    51.13 |   91.66 |   89.42 |                       \n\n ZipAFolder.ts |   89.52 |    51.13 |   91.66 |   89.42 | 26,41,221-225,255-264 \n---------------|---------|----------|---------|---------|-----------------------\n\nTGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Source and target folder must be different.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Source and target folder must be different.\n\n      200 |             } else {\n      201 |               stryCov_9fa48(\"45\");\n    > 202 |               throw new Error(stryMutAct_9fa48(\"46\") ? \"\" : (stryCov_9fa48(\"46\"), 'Source and target folder must be different.'));\n          |                     ^\n      203 |             }\n      204 |           }\n      205 |           try {\n\n      at Function.compress (lib/ZipAFolder.ts:202:21)\n      at compress (lib/ZipAFolder.ts:104:28)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       16 failed, 1 skipped, 5 passed, 22 total\nSnapshots:   0 total\nTime:        4.783 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"43","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"45","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":14,"line":119},"start":{"column":41,"line":117}}},{"id":"46","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":78,"line":118},"start":{"column":33,"line":118}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":14,"line":125},"start":{"column":17,"line":120}}},{"id":"48","mutatorName":"BooleanLiteral","replacement":"isGlob(src)","status":"Timeout","location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"49","mutatorName":"ConditionalExpression","replacement":"true","status":"Timeout","location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"50","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"51","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":18,"line":123},"start":{"column":35,"line":121}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":14,"line":127},"start":{"column":30,"line":125}}},{"id":"53","mutatorName":"StringLiteral","replacement":"``","status":"Timeout","location":{"end":{"column":65,"line":126},"start":{"column":33,"line":126}}},{"id":"54","mutatorName":"ConditionalExpression","replacement":"true","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"55","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"56","mutatorName":"LogicalOperator","replacement":"zipAFolderOptions || zipAFolderOptions.customWriteStream","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"57","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":10,"line":131},"start":{"column":78,"line":129}}},{"id":"58","mutatorName":"OptionalChaining","replacement":"zipAFolderOptions.customWriteStream","status":"Timeout","location":{"end":{"column":58,"line":130},"start":{"column":22,"line":130}}},{"id":"59","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":10,"line":133},"start":{"column":16,"line":131}}},{"id":"60","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":111,"line":132},"start":{"column":29,"line":132}}},{"id":"61","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.321 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 400374\n    Received:   18758970\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   42909696\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    54.29 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    54.29 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        8.441 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"62","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.491 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 10535611\n    Received:   18758970\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 42909696\n    Received:   42909696\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   98.09 |    53.84 |     100 |   98.07 |                   \n\n ZipAFolder.ts |   98.09 |    53.84 |     100 |   98.07 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        8.56 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"63","mutatorName":"LogicalOperator","replacement":"archiverOptions && {}","status":"Timeout","location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"67","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.23 |    53.84 |     100 |   95.19 |                   \n\n ZipAFolder.ts |   95.23 |    53.84 |     100 |   95.19 | 26,41,269-273     \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        2.564 s, estimated 9 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"64","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":10,"line":151},"start":{"column":49,"line":137}}},{"id":"72","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   4808008\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   96.19 |    54.75 |     100 |   96.15 |                   \n\n ZipAFolder.ts |   96.19 |    54.75 |     100 |   96.15 | 26,41,272-273     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        1.498 s, estimated 3 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":14,"line":149},"start":{"column":20,"line":147}}},{"id":"65","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"66","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"68","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"69","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":14,"line":147},"start":{"column":30,"line":143}}},{"id":"70","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":30,"line":144},"start":{"column":27,"line":144}}},{"id":"71","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":18,"line":146},"start":{"column":54,"line":144}}},{"id":"73","mutatorName":"BooleanLiteral","replacement":"true","status":"Survived","testsCompleted":1,"location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}}],"source":"'use strict';\nimport {WriteStream} from 'fs';\nimport * as path from 'path';\nimport * as archiver from 'archiver';\nimport * as fs from 'fs';\nimport * as isGlob from 'is-glob';\n\nexport enum COMPRESSION_LEVEL {\n    uncompressed = 0,\n    medium = 5,\n    high = 9,\n}\n\n/**\n * Options to pass in to zip a folder\n * compression default is 'high'\n */\nexport type ZipAFolderOptions = {\n    compression?: COMPRESSION_LEVEL;\n    customWriteStream?: WriteStream;\n};\n\nexport class ZipAFolder {\n    /**\n     * Tars a given folder or a glob into a gzipped tar archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param tarFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async tar(\n        src: string,\n        tarFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: tarFilePath,\n                format: 'tar',\n                zipAFolderOptions,\n                archiverOptions: {\n                    gzip: true,\n                    gzipOptions: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    /**\n     * Zips a given folder or a glob into a zip archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param zipFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async zip(\n        src: string,\n        zipFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    store: true,\n                },\n            });\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    zlib: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    private static async compress({\n        src,\n        targetFilePath,\n        format,\n        zipAFolderOptions,\n        archiverOptions,\n    }: {\n        src: string;\n        targetFilePath?: string;\n        format: archiver.Format;\n        zipAFolderOptions?: ZipAFolderOptions;\n        archiverOptions?: archiver.ArchiverOptions;\n    }): Promise<void | Error> {\n        let output: WriteStream;\n\n        if (!zipAFolderOptions?.customWriteStream && targetFilePath) {\n            const targetBasePath: string = path.dirname(targetFilePath);\n\n            if (targetBasePath === src) {\n                throw new Error('Source and target folder must be different.');\n            }\n            try {\n                if (!isGlob(src)) {\n                    await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise\n                }\n                await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise\n            } catch (e: any) {\n                throw new Error(`Permission error: ${e.message}`);\n            }\n            output = fs.createWriteStream(targetFilePath);\n        } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {\n            output = zipAFolderOptions?.customWriteStream;\n        } else {\n            throw new Error('You must either provide a target file path or a custom write stream to write to.');\n        }\n\n        const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});\n\n        return new Promise((resolve, reject) => {\n            output.on('close', resolve);\n            output.on('error', reject);\n\n            zipArchive.pipe(output);\n\n            if (isGlob(src)) {\n                src.split(',').forEach((globPart) => {\n                    zipArchive.glob(globPart);\n                });\n            } else {\n                zipArchive.directory(src, false);\n            }\n            zipArchive.finalize();\n        });\n    }\n}\n\nexport const zip = ZipAFolder.zip;\nexport const tar = ZipAFolder.tar;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"All tests"}]}},"projectRoot":"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder","config":{"mutate":["lib/ZipAFolder.ts"],"reporters":["json","html","progress"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunner":"command","testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"cucumber":{},"jest":{"projectType":"custom","enableFindRelatedTests":true},"mochaOptions":{},"tap":{"testFiles":["{**/@(test|tests|__test__|__tests__)/**,**/*.@(test|tests|spec)}.@(cjs|mjs|js|jsx|ts|tsx|mts|cts)"],"nodeArgs":["-r","{{hookFile}}","{{testFile}}"],"forceBail":true},"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.5","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.2.5","@stryker-mutator/karma-runner":"8.2.5","@stryker-mutator/jasmine-runner":"8.2.5","@stryker-mutator/jest-runner":"8.2.5","mocha":"10.4.0","jasmine-core":"5.1.2","jest":"29.7.0","typescript":"5.4.4","ts-jest":"29.1.2"}}}