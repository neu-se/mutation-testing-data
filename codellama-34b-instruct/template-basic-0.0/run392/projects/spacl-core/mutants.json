[
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 54,
    "originalCode": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null",
    "replacement": "spec.match(/[*+][^/]|[^/][*+]/) !== null",
    "promptId": 1,
    "completionId": 0,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 19,
    "endLine": 18,
    "endColumn": 25,
    "originalCode": "/\\/\\//",
    "replacement": "/^(?:\\/[^/]+){2,}$/",
    "promptId": 9,
    "completionId": 8,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 19,
    "endLine": 26,
    "endColumn": 33,
    "originalCode": "/[^/]:|:\\/|:$/",
    "replacement": "/^(?:\\/[^/]+){0,1}$/",
    "promptId": 13,
    "completionId": 12,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 19,
    "endLine": 29,
    "endColumn": 27,
    "originalCode": "/^.+\\/$/",
    "replacement": "/(?<!\\/)$/",
    "promptId": 16,
    "completionId": 15,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.match(this.regex) === null",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "min < 2",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "min < 2",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "opt && min < 2",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(a, b) => a + b",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'(?:/[^/]+)*'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 77,
    "originalCode": "parts.reduce((acc, seg) => seg + acc, '$')",
    "replacement": "parts.reduce((a, b) => a + b)",
    "promptId": 32,
    "completionId": 31,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('/')",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "'*'",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "part.startsWith(':')",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 23,
    "endLine": 111,
    "endColumn": 28,
    "originalCode": "/:.+/",
    "replacement": "/^[a-zA-Z0-9_]+$/",
    "promptId": 47,
    "completionId": 46,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 32,
    "endLine": 112,
    "endColumn": 33,
    "originalCode": "1",
    "replacement": "part.slice(1)",
    "promptId": 51,
    "completionId": 50,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "`/${part.replace(/([.$])/g, '\\\\$1')}`",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path)",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path)",
    "promptId": 83,
    "completionId": 82,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "rule.clone()",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set(policy.name)",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path)",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 26,
    "startColumn": 10,
    "endLine": 26,
    "endColumn": 31,
    "originalCode": "!(verb in this.verbs)",
    "replacement": "!this.verbs[verb]",
    "promptId": 113,
    "completionId": 112,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "this.regex.test(path)",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path)",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 18,
    "endLine": 60,
    "endColumn": 28,
    "originalCode": "path.match",
    "replacement": "match[index + 1]",
    "promptId": 122,
    "completionId": 121,
    "reason": "call/callee"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex.pattern",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "match.length > count",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "match[index + 1] !== prop",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop !== match[index]",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  }
]