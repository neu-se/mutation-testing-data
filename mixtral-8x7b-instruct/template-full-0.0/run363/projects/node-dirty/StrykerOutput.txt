*** using precomputed mutations ***
[32m13:42:31 (2638) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m13:42:31 (2638) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m13:42:31 (2638) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m13:42:31 (2638) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m13:42:31 (2638) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m13:42:32 (2638) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 203 mutants from MUTATION_TESTING/template-full_mixtral-8x7b-instruct_0.0/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with val == undefined
Mutant 1 in dirty.js: val === undefined replaced with val === void 0
Mutant 2 in dirty.js: val === undefined replaced with val === null
Mutant 3 in dirty.js: this._data.delete replaced with this._data['key'] = undefined
Mutant 4 in dirty.js: key replaced with null
Mutant 5 in dirty.js: key replaced with 1
Mutant 6 in dirty.js: key replaced with this._data
Mutant 7 in dirty.js: this._data.set(key, val) replaced with this._data.set(val, key)
Mutant 8 in dirty.js: this._data.set(key, val) replaced with this._data.set(this._data.set(key, 'buggy_value'))
Mutant 9 in dirty.js: key replaced with 'constant_key'
Mutant 10 in dirty.js: val replaced with null
Mutant 11 in dirty.js: val replaced with this.path
Mutant 12 in dirty.js: val replaced with Math.random()
Mutant 13 in dirty.js: this.path replaced with false
Mutant 14 in dirty.js: this.path replaced with null
Mutant 15 in dirty.js: this.path replaced with this.anotherProperty
Mutant 16 in dirty.js: this._queue.get replaced with this._queue.has
Mutant 17 in dirty.js: key replaced with '0'
Mutant 18 in dirty.js: key replaced with null
Mutant 19 in dirty.js: key replaced with this.path
Mutant 20 in dirty.js: cb replaced with this._queue.get(key).push(cb || function () {})
Mutant 21 in dirty.js: cbs.push replaced with cbs[cbs.length] = cb
Mutant 22 in dirty.js: cb replaced with () => cb()
Mutant 23 in dirty.js: cb replaced with cb.bind(null, null)
Mutant 24 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set([])
Mutant 25 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(this._queue)
Mutant 26 in dirty.js: key replaced with Symbol()
Mutant 27 in dirty.js: key replaced with null
Mutant 28 in dirty.js: key replaced with () => {}
Mutant 29 in dirty.js: cbs replaced with []
Mutant 30 in dirty.js: cbs replaced with null
Mutant 31 in dirty.js: cbs replaced with this._queue
Mutant 32 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with cb => cb && cb()
Mutant 33 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) {
    try {
      cb();
    } catch (e) {/* swallow the error */}
  }
  this.emit('drain');
}
Mutant 34 in dirty.js: cb replaced with null
Mutant 35 in dirty.js: cb replaced with 1
Mutant 36 in dirty.js: this._data.get replaced with this._data.has
Mutant 37 in dirty.js: this._data.get replaced with this._data.prototype.get
Mutant 38 in dirty.js: this._data.get replaced with this._data.set
Mutant 39 in dirty.js: key replaced with this._data.get(key).toString()
Mutant 40 in dirty.js: key replaced with this._data.get(key) || {}
Mutant 41 in dirty.js: key replaced with this._data.get(key + 'x')
Mutant 42 in dirty.js: this.set replaced with this._queue.set
Mutant 43 in dirty.js: this.set replaced with this.get
Mutant 44 in dirty.js: key replaced with '__nonexistentkey__'
Mutant 45 in dirty.js: key replaced with 'key', null
Mutant 46 in dirty.js: key replaced with 'key', '__nonexistentval__'
Mutant 47 in dirty.js: undefined replaced with null
Mutant 48 in dirty.js: undefined replaced with {}
Mutant 49 in dirty.js: undefined replaced with () => {}
Mutant 50 in dirty.js: cb replaced with () => cb
Mutant 51 in dirty.js: cb replaced with null
Mutant 52 in dirty.js: this._data replaced with this._data.clear()
Mutant 53 in dirty.js: this._data replaced with this._data.values()
Mutant 54 in dirty.js: this._data replaced with this._queue
Mutant 55 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== true
Mutant 56 in dirty.js: fn(key, val) === false replaced with !fn(key, val)
Mutant 57 in dirty.js: fn(key, val) === false replaced with fn.call(null, key, val) === false
Mutant 58 in dirty.js: fn(key, val) replaced with fn(val, key)
Mutant 59 in dirty.js: key replaced with 'wrong_key'
Mutant 60 in dirty.js: key replaced with this.get(key)
Mutant 61 in dirty.js: val replaced with 0
Mutant 62 in dirty.js: val replaced with {}
Mutant 63 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, this._data.get(key), cb)
Mutant 64 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this._data.get(key)), cb)
Mutant 65 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(key), cb)
Mutant 66 in dirty.js: this.set replaced with this._data.set
Mutant 67 in dirty.js: updater(this.get(key)) replaced with null
Mutant 68 in dirty.js: updater(this.get(key)) replaced with this._data.get(key) + 1
Mutant 69 in dirty.js: updater(this.get(key)) replaced with this.get(key + 'x')
Mutant 70 in dirty.js: updater replaced with 123
Mutant 71 in dirty.js: this.get(key) replaced with this.get(Math.random() * 100)
Mutant 72 in dirty.js: this.get(key) replaced with this.get(key).toUpperCase()
Mutant 73 in dirty.js: key replaced with 'key'
Mutant 74 in dirty.js: key replaced with this._data.keys().next().value
Mutant 75 in dirty.js: cb replaced with this._data.set(key, updater(this.get(key)))
Mutant 76 in dirty.js: cb replaced with this._data.set(key, updater(val))
Mutant 77 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size > 0 || this._inFlightWrites > 0
Mutant 78 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with Object.keys(this._queue).length > 0 || this._inFlightWrites > 0
Mutant 79 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this._close())
Mutant 80 in dirty.js: () => this.close() replaced with () => this.close = () => {}
Mutant 81 in dirty.js: () => this.close() replaced with () => this._readStream.destroy()
Mutant 82 in dirty.js: () => this.close() replaced with () => this._queue.clear()
Mutant 83 in dirty.js: this._readStream replaced with fs.createReadStream(this.path, {
  encoding: 'utf-8',
  flags: 'r'
})
Mutant 84 in dirty.js: this._readStream replaced with null
Mutant 85 in dirty.js: this._readStream replaced with this._readStream || fs.createReadStream(this.path, {
  encoding: 'utf-8',
  flags: 'r'
})
Mutant 86 in dirty.js: this._writeStream replaced with fs.createWriteStream('wrong_path')
Mutant 87 in dirty.js: this._writeStream replaced with this._readStream
Mutant 88 in dirty.js: this._writeStream replaced with null
Mutant 89 in dirty.js: !this.path replaced with this.path === null
Mutant 90 in dirty.js: !this.path replaced with !Boolean(this.path)
Mutant 91 in dirty.js: !this.path replaced with this.path.length === 0
Mutant 92 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 93 in dirty.js: this.emit('load', 0) replaced with this.emit('empty', 0)
Mutant 94 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size)
Mutant 95 in dirty.js: this.emit replaced with console.log
Mutant 96 in dirty.js: 0 replaced with {}
Mutant 97 in dirty.js: 0 replaced with this._data.size
Mutant 98 in dirty.js: 0 replaced with this.path
Mutant 99 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOTDIR'
Mutant 100 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EISDIR'
Mutant 101 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EACCES'
Mutant 102 in dirty.js: this.emit('load', 0) replaced with this.emit('load', null)
Mutant 103 in dirty.js: 0 replaced with -1
Mutant 104 in dirty.js: 0 replaced with null
Mutant 105 in dirty.js: 'error' replaced with 'warn'
Mutant 106 in dirty.js: err replaced with new Error('File not found')
Mutant 107 in dirty.js: err replaced with err || new Error('Unknown error')
Mutant 108 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.indexOf('\n') === -1
Mutant 109 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\\n') === -1
Mutant 110 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with buffer.length > 0
Mutant 111 in dirty.js: '\n' replaced with ''
Mutant 112 in dirty.js: '\n' replaced with ''
Mutant 113 in dirty.js: '\n' replaced with '\\n'
Mutant 114 in dirty.js: '\n' replaced with '<PLACEHOLDER>'
Mutant 115 in dirty.js: arr.pop replaced with []
Mutant 116 in dirty.js: !rowStr replaced with rowStr.trim() === ''
Mutant 117 in dirty.js: 'error' replaced with 'warn'
Mutant 118 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with 'Corrupted row at the end of the file'
Mutant 119 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('')
Mutant 120 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with null
Mutant 121 in dirty.js: JSON.parse replaced with eval
Mutant 122 in dirty.js: !('key' in row) replaced with row.hasOwnProperty('key')
Mutant 123 in dirty.js: !('key' in row) replaced with 'key' !== Object.keys(row)[0]
Mutant 124 in dirty.js: !('key' in row) replaced with !row.constructor.prototype.hasOwnProperty('key')
Mutant 125 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error('Corrupted row'))
Mutant 126 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('warning', new Error(`Could not load corrupted row: ${rowStr}`))
Mutant 127 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', {
  message: `Could not load corrupted row: ${rowStr}`
})
Mutant 128 in dirty.js: this.emit replaced with console.error
Mutant 129 in dirty.js: 'error' replaced with 'warn'
Mutant 130 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with 'Error'
Mutant 131 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with {}
Mutant 132 in dirty.js: row.val === undefined replaced with row.val == undefined
Mutant 133 in dirty.js: row.val === undefined replaced with row.val === null
Mutant 134 in dirty.js: row.key replaced with null
Mutant 135 in dirty.js: row.key replaced with 0
Mutant 136 in dirty.js: row.key replaced with this._data.keys().next().value
Mutant 137 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row['key'], row['val'])
Mutant 138 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(this._data.get(row.key), updater(this.get(key)))
Mutant 139 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, undefined)
Mutant 140 in dirty.js: this._data.set replaced with this._data.has
Mutant 141 in dirty.js: row.key replaced with null
Mutant 142 in dirty.js: row.val replaced with null
Mutant 143 in dirty.js: row.val replaced with 0
Mutant 144 in dirty.js: row.val replaced with this._data.get(key)
Mutant 145 in dirty.js: buffer.length replaced with buffer[0]
Mutant 146 in dirty.js: buffer.length replaced with this._data.size
Mutant 147 in dirty.js: buffer.length replaced with true
Mutant 148 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error('Corrupted row at the end of the db'))
Mutant 149 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', () => new Error('Corrupted row at the end of the db'))
Mutant 150 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('warn', new Error(`Corrupted row at the end of the db: ${buffer}`))
Mutant 151 in dirty.js: this.emit replaced with console.error
Mutant 152 in dirty.js: 'error' replaced with 'warn'
Mutant 153 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with 'Corrupted row at the end of the db'
Mutant 154 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error('Corrupted row at the end of the db')
Mutant 155 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with true
Mutant 156 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 157 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.clear())
Mutant 158 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.keys())
Mutant 159 in dirty.js: this._data.size replaced with this._data.length
Mutant 160 in dirty.js: this._data.size replaced with this._data.size + 1
Mutant 161 in dirty.js: this._data.size replaced with this.size()
Mutant 162 in dirty.js: !this._queue.size replaced with this._queue.length === 0
Mutant 163 in dirty.js: !this._queue.size replaced with this._queue.has(null)
Mutant 164 in dirty.js: !this._queue.size replaced with Object.keys(this._queue).length === 0
Mutant 165 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites < 0
Mutant 166 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites === 1
Mutant 167 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites >= 10
Mutant 168 in dirty.js: 'drain' replaced with 'drain', () => this.emit('drain'), this
Mutant 169 in dirty.js: 'drain' replaced with 'flush'
Mutant 170 in dirty.js: 'drain' replaced with 'drain', 42
Mutant 171 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size === 0 && this._waitForDrain
Mutant 172 in dirty.js: !this._queue.size || this._waitForDrain replaced with !this._queue.size && !this._waitForDrain
Mutant 173 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.length > 0 || this._waitForDrain
Mutant 174 in dirty.js: this._writeStream.cork replaced with this._writeStream.unshift
Mutant 175 in dirty.js: this._writeStream.cork replaced with this._writeStream.cork = false
Mutant 176 in dirty.js: this._queue replaced with Object.keys(this._queue)
Mutant 177 in dirty.js: this._queue.delete replaced with this._queue.has
Mutant 178 in dirty.js: key replaced with 'key'
Mutant 179 in dirty.js: key replaced with this.key
Mutant 180 in dirty.js: key replaced with Math.random()
Mutant 181 in dirty.js: this._data.get replaced with this._data.has
Mutant 182 in dirty.js: this._data.get replaced with this._data.set
Mutant 183 in dirty.js: key replaced with 'key'
Mutant 184 in dirty.js: !cbs.length && err != null replaced with cbs.length > 0 || err === null
Mutant 185 in dirty.js: this.emit('error', err) replaced with this.emit('warning', err)
Mutant 186 in dirty.js: this.emit('error', err) replaced with this.emit('error', 'Different Error')
Mutant 187 in dirty.js: this.emit('error', err) replaced with this.emit('error', () => err)
Mutant 188 in dirty.js: err replaced with null
Mutant 189 in dirty.js: err replaced with {}
Mutant 190 in dirty.js: err replaced with () => {}
Mutant 191 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 || this._waitForDrain
Mutant 192 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with !this._inFlightWrites || this._waitForDrain
Mutant 193 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites > 0 && !this._waitForDrain
Mutant 194 in dirty.js: cbs replaced with []
Mutant 195 in dirty.js: cbs replaced with cbs.slice()
Mutant 196 in dirty.js: cbs replaced with cbs.sort()
Mutant 197 in dirty.js: err replaced with null
Mutant 198 in dirty.js: err replaced with {}
Mutant 199 in dirty.js: err replaced with () => {}
Mutant 200 in dirty.js: this._waitForDrain replaced with false
Mutant 201 in dirty.js: this._waitForDrain replaced with this._queue.size > 0
Mutant 202 in dirty.js: this._writeStream.uncork replaced with this._writeStream.unshift
[32m13:42:32 (2638) INFO Instrumenter[39m Instrumented 2 source file(s) with 203 mutant(s)
[32m13:42:32 (2638) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m13:42:33 (2638) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m13:42:33 (2638) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m13:42:33 (2638) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 534 ms, overhead 0 ms).
Mutation testing 8% (elapsed: <1m, remaining: ~1m) 18/203 tested (4 survived, 0 timed out)
Mutation testing 15% (elapsed: <1m, remaining: ~1m) 31/203 tested (8 survived, 0 timed out)
Mutation testing 18% (elapsed: <1m, remaining: ~2m) 38/203 tested (9 survived, 1 timed out)
Mutation testing 27% (elapsed: <1m, remaining: ~1m) 56/203 tested (11 survived, 1 timed out)
Mutation testing 36% (elapsed: <1m, remaining: ~1m) 75/203 tested (15 survived, 1 timed out)
Mutation testing 43% (elapsed: ~1m, remaining: ~1m) 88/203 tested (21 survived, 1 timed out)
Mutation testing 46% (elapsed: ~1m, remaining: ~1m) 95/203 tested (23 survived, 2 timed out)
Mutation testing 51% (elapsed: ~1m, remaining: ~1m) 104/203 tested (24 survived, 3 timed out)
Mutation testing 60% (elapsed: ~1m, remaining: <1m) 122/203 tested (34 survived, 3 timed out)
Mutation testing 69% (elapsed: ~1m, remaining: <1m) 141/203 tested (44 survived, 3 timed out)
Mutation testing 78% (elapsed: ~1m, remaining: <1m) 160/203 tested (53 survived, 3 timed out)
Mutation testing 86% (elapsed: ~2m, remaining: <1m) 176/203 tested (66 survived, 3 timed out)
Mutation testing 88% (elapsed: ~2m, remaining: <1m) 179/203 tested (66 survived, 4 timed out)
Mutation testing 94% (elapsed: ~2m, remaining: <1m) 191/203 tested (72 survived, 4 timed out)
Mutation testing 94% (elapsed: ~2m, remaining: <1m) 192/203 tested (72 survived, 5 timed out)
Mutation testing 99% (elapsed: ~2m, remaining: <1m) 201/203 tested (76 survived, 6 timed out)

All tests
  ✓ All tests (killed 120)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val == undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val === void 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:19
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.has(key) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get('0') || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(null) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(this.path) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:24
-         if (cb) cbs.push(cb);
+         if (cb) cbs.push(() => cb());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:24
-         if (cb) cbs.push(cb);
+         if (cb) cbs.push(cb.bind(null, null));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) {
+       try {
+         cb();
+       } catch (e) {/* swallow the error */}
+     }
+     this.emit('drain');
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, () => cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn.call(null, key, val) === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this._data.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this._data.set(key, updater(this.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:36
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(this._data.keys().next().value)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size > 0 || this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (Object.keys(this._queue).length > 0 || this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close = () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._queue.clear());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:91:9
-       if (this._readStream) this._readStream.destroy();
+       if (null) this._readStream.destroy();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (fs.createWriteStream('wrong_path')) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:99:9
-       if (!this.path) {
+       if (!Boolean(this.path)) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:101:9
-           this.emit('load', 0);
+           this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:101:27
-           this.emit('load', 0);
+           this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('warn', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', new Error('File not found'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err || new Error('Unknown error'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.indexOf('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:33
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.trim() === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('warn', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', 'Corrupted row at the end of the file');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(''));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if ('key' !== Object.keys(row)[0]) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error('Corrupted row'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warning', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', {
+     message: `Could not load corrupted row: ${rowStr}`
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 console.error('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warn', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', 'Error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:145:15
-                 this._data.set(row.key, row.val);
+                 this._data.set(row['key'], row['val']);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer[0]) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error('Corrupted row at the end of the db'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', () => new Error('Corrupted row at the end of the db'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('warn', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               console.error('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('warn', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', 'Corrupted row at the end of the db');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error('Corrupted row at the end of the db'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', true);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:154:29
-             this.emit('load', this._data.size);
+             this.emit('load', this.size());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.has(null)) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (Object.keys(this._queue).length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites < 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites === 1) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites >= 10) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('drain', () => this.emit('drain'), this);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('flush');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('drain', 42);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size === 0 && this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (!this._queue.size && !this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.length > 0 || this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', 'Different Error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', () => err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.slice()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.sort()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._queue.size > 0) break;

Ran 0.97 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   62.07 |      120 |         6 |         77 |        0 |        0 |
 dirty.js |   62.07 |      120 |         6 |         77 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m13:45:14 (2638) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m13:45:14 (2638) INFO MutationTestExecutor[39m Done in 2 minutes 43 seconds.

real	2m44.863s
user	1m53.270s
sys	0m19.739s
