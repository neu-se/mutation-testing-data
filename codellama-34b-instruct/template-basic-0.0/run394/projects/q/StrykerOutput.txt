*** using precomputed mutations ***
[32m12:30:01 (2886) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m12:30:01 (2886) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m12:30:01 (2886) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/q/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m12:30:01 (2886) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m12:30:01 (2886) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m12:30:02 (2886) INFO ProjectReader[39m Found 2 of 4261 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 402 mutants from MUTATION_TESTING/template-basic_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in q.js: bootstrap("promise", definition) replaced with bootstrap("q")
Mutant 1 in q.js: bootstrap replaced with "promise"
Mutant 2 in q.js: "promise" replaced with "q"
Mutant 3 in q.js: definition replaced with "promise"
Mutant 4 in q.js: typeof exports === "object" && typeof module === "object" replaced with typeof module !== "undefined" && module.exports
Mutant 5 in q.js: define replaced with "q"
Mutant 6 in q.js: definition replaced with "q"
Mutant 7 in q.js: typeof window !== "undefined" || typeof self !== "undefined" replaced with typeof global !== "undefined"
Mutant 8 in q.js: captureLine replaced with __LINE__
Mutant 9 in q.js: head.next replaced with head.task !== void 0
Mutant 10 in q.js: domain replaced with domain && domain.enter()
Mutant 11 in q.js: runSingle(task, domain) replaced with runSingle(task)
Mutant 12 in q.js: domain replaced with tail
Mutant 13 in q.js: laterQueue.length replaced with laterQueue.length > 0
Mutant 14 in q.js: domain replaced with domain.exit()
Mutant 15 in q.js: domain replaced with domain.exit()
Mutant 16 in q.js: domain replaced with domain && domain.exit()
Mutant 17 in q.js: !flushing replaced with head.task !== void 0
Mutant 18 in q.js: setImmediate.bind(window, flush) replaced with setImmediate.bind(window)
Mutant 19 in q.js: flush replaced with function () {
  flush();
}
Mutant 20 in q.js: channel.port2.postMessage replaced with 0
Mutant 21 in q.js: 0 replaced with null
Mutant 22 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush)
Mutant 23 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush)
Mutant 24 in q.js: !flushing replaced with laterQueue.length > 0
Mutant 25 in q.js: call.apply(f, arguments) replaced with call.apply(f)
Mutant 26 in q.js: call.apply replaced with f
Mutant 27 in q.js: f replaced with undefined
Mutant 28 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 29 in q.js: Array.prototype.slice replaced with array_slice
Mutant 30 in q.js: arguments.length === 1 replaced with typeof basis === "undefined"
Mutant 31 in q.js: ++index >= length replaced with index < this.length
Mutant 32 in q.js: index < length replaced with index < this.length
Mutant 33 in q.js: index in this replaced with this[i] !== void 0
Mutant 34 in q.js: callback(basis, this[index], index) replaced with callback(basis)
Mutant 35 in q.js: basis replaced with value
Mutant 36 in q.js: this[index] replaced with this
Mutant 37 in q.js: i < this.length replaced with this.length
Mutant 38 in q.js: callback.call(thisp, value, index, self) replaced with callback(basis, this[index], index)
Mutant 39 in q.js: callback.call(thisp, value, index, self) replaced with callback.call(thisp)
Mutant 40 in q.js: index replaced with undefined
Mutant 41 in q.js: object replaced with Object.keys(this)
Mutant 42 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty.call(object, key)
Mutant 43 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(this)
Mutant 44 in q.js: key replaced with "hasOwnProperty"
Mutant 45 in q.js: key replaced with index
Mutant 46 in q.js: value replaced with Object(value)
Mutant 47 in q.js: object_toString replaced with "[object StopIteration]"
Mutant 48 in q.js: exception replaced with StopIteration
Mutant 49 in q.js: typeof ReturnValue !== "undefined" replaced with typeof QReturnValue === "function"
Mutant 50 in q.js: hasStacks && promise.stack && typeof error === "object" && error !== null && error.stack replaced with typeof error.__minimumStackCounter__ !== "undefined"
Mutant 51 in q.js: !!p replaced with p.source
Mutant 52 in q.js: p = p.source replaced with p.stackCounter
Mutant 53 in q.js: p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter) replaced with p.stackCounter > 0
Mutant 54 in q.js: error replaced with undefined
Mutant 55 in q.js: {
  value: p.stackCounter,
  configurable: true
} replaced with 0
Mutant 56 in q.js: error.stack replaced with "<PLACEHOLDER>"
Mutant 57 in q.js: "\n" + STACK_JUMP_SEPARATOR + "\n" replaced with "\n"
Mutant 58 in q.js: filterStackString replaced with concatedStacks
Mutant 59 in q.js: concatedStacks replaced with stackString
Mutant 60 in q.js: object_defineProperty(error, "stack", {
  value: stack,
  configurable: true
}) replaced with object_defineProperty(error)
Mutant 61 in q.js: {
  value: stack,
  configurable: true
} replaced with stack
Mutant 62 in q.js: !isInternalFrame(line) && !isNodeFrame(line) && line replaced with !isNodeFrame(stackLine) && !isInternalFrame(stackLine)
Mutant 63 in q.js: "(module.js:" replaced with "node.js"
Mutant 64 in q.js: "(node.js:" replaced with "node.js"
Mutant 65 in q.js: attempt1 replaced with attempt1[1] !== undefined && attempt1[2] !== undefined
Mutant 66 in q.js: Number replaced with i
Mutant 67 in q.js: attempt1[2] replaced with lineNumber
Mutant 68 in q.js: stackLine replaced with lines[i]
Mutant 69 in q.js: attempt2 replaced with attempt3[1] !== undefined
Mutant 70 in q.js: Number replaced with lineNumber
Mutant 71 in q.js: attempt2[2] replaced with lineNumber
Mutant 72 in q.js: stackLine replaced with firstLine
Mutant 73 in q.js: attempt3 replaced with attempt3[1] !== undefined
Mutant 74 in q.js: Number replaced with lineNumber
Mutant 75 in q.js: attempt3[2] replaced with lineNumber
Mutant 76 in q.js: !fileNameAndLineNumber replaced with fileName.indexOf("q.js") !== -1
Mutant 77 in q.js: !hasStacks replaced with !Q.longStackSupport
Mutant 78 in q.js: "@" replaced with "qFileName"
Mutant 79 in q.js: typeof console !== "undefined" && typeof console.warn === "function" replaced with Q.longStackSupport
Mutant 80 in q.js: callback.apply(callback, arguments) replaced with callback.apply(this)
Mutant 81 in q.js: callback replaced with Q.defer()
Mutant 82 in q.js: arguments replaced with array_slice(arguments, 3)
Mutant 83 in q.js: isPromiseAlike(value) replaced with value !== null && typeof value === "object" && typeof value.then === "function"
Mutant 84 in q.js: isPromiseAlike replaced with value instanceof Thenable
Mutant 85 in q.js: value replaced with lines[1]
Mutant 86 in q.js: defer.prototype replaced with Promise.prototype
Mutant 87 in q.js: object_create replaced with resolvedPromise
Mutant 88 in q.js: arguments replaced with messages.shift()
Mutant 89 in q.js: messages replaced with messages.length === 0
Mutant 90 in q.js: args replaced with array_slice(arguments, 1)
Mutant 91 in q.js: op === "when" && operands[1] replaced with operands[0] === "progress"
Mutant 92 in q.js: resolvedPromise.promiseDispatch.apply(resolvedPromise, args) replaced with resolvedPromise.promiseDispatch.apply(resolvedPromise)
Mutant 93 in q.js: args replaced with array_slice(args, 1)
Mutant 94 in q.js: messages replaced with resolvedPromise
Mutant 95 in q.js: nearer replaced with resolvedPromise
Mutant 96 in q.js: resolvedPromise replaced with value
Mutant 97 in q.js: isPromise(nearerValue) replaced with error == null
Mutant 98 in q.js: isPromise replaced with arguments[2]
Mutant 99 in q.js: nearerValue replaced with resolvedPromise
Mutant 100 in q.js: !resolvedPromise replaced with messages.length === 0
Mutant 101 in q.js: Q.longStackSupport && hasStacks replaced with Q.longStackSupport
Mutant 102 in q.js: "\n" replaced with "Error\n"
Mutant 103 in q.js: Q.longStackSupport && hasStacks replaced with resolvedPromise.stackCounter === longStackCounter
Mutant 104 in q.js: newPromise.promiseDispatch.apply(newPromise, message) replaced with newPromise.promiseDispatch.apply(resolvedPromise)
Mutant 105 in q.js: newPromise replaced with message
Mutant 106 in q.js: resolvedPromise replaced with resolvedPromise === Q(value)
Mutant 107 in q.js: Q(value) replaced with fulfill(value)
Mutant 108 in q.js: value replaced with Q(value)
Mutant 109 in q.js: fulfill(value) replaced with Q(value)
Mutant 110 in q.js: reason replaced with reject(reason)
Mutant 111 in q.js: resolvedPromise replaced with progressListeners.length > 0
Mutant 112 in q.js: error replaced with error != null
Mutant 113 in q.js: error replaced with reason
Mutant 114 in q.js: arguments.length > 2 replaced with array_slice(arguments, 2).length === 0
Mutant 115 in q.js: array_slice(arguments, 1) replaced with value
Mutant 116 in q.js: array_slice(arguments, 1) replaced with array_slice(array_slice(arguments, 2))
Mutant 117 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 118 in q.js: 1 replaced with array_slice(arguments, 2)
Mutant 119 in q.js: typeof resolver !== "function" replaced with typeof resolver === "function"
Mutant 120 in q.js: resolver(deferred.resolve, deferred.reject, deferred.notify) replaced with resolver(deferred.resolve)
Mutant 121 in q.js: deferred.notify replaced with progressListeners
Mutant 122 in q.js: x replaced with deferred.promise
Mutant 123 in q.js: Q replaced with this
Mutant 124 in q.js: [this, that] replaced with x, y
Mutant 125 in q.js: x === y replaced with Object.is(x, y)
Mutant 126 in q.js: this.then replaced with deferred.promise
Mutant 127 in q.js: Q.race replaced with function (value) {
  if (!done) {
    done = true;
    deferred.resolve(_fulfilled(value));
  }
}
Mutant 128 in q.js: fallback === void 0 replaced with descriptor[op]
Mutant 129 in q.js: inspect === void 0 replaced with inspected.state === "fulfilled"
Mutant 130 in q.js: object_create replaced with deferred.promise
Mutant 131 in q.js: Promise.prototype replaced with Object.prototype
Mutant 132 in q.js: descriptor[op] replaced with descriptor.hasOwnProperty(op)
Mutant 133 in q.js: descriptor[op].apply(promise, args) replaced with descriptor[op].apply(promise)
Mutant 134 in q.js: fallback.call(promise, op, args) replaced with fallback.call(promise)
Mutant 135 in q.js: op replaced with "when"
Mutant 136 in q.js: args replaced with resolve
Mutant 137 in q.js: resolve replaced with result !== undefined
Mutant 138 in q.js: result replaced with deferred.resolve(value)
Mutant 139 in q.js: inspect replaced with inspected.state === "fulfilled"
Mutant 140 in q.js: inspect replaced with inspected.value
Mutant 141 in q.js: inspected.state === "rejected" replaced with inspected.state === "fulfilled"
Mutant 142 in q.js: inspected.state === "pending" || inspected.state === "rejected" replaced with !done
Mutant 143 in q.js: defer replaced with deferred
Mutant 144 in q.js: typeof rejected === "function" replaced with !done
Mutant 145 in q.js: makeStackTraceLong(exception, self) replaced with makeStackTraceLong(exception)
Mutant 146 in q.js: exception replaced with Q.onerror
Mutant 147 in q.js: self replaced with "<PLACEHOLDER>"
Mutant 148 in q.js: newException replaced with reject(new Error("Promise does not support operation: " + op))
Mutant 149 in q.js: exception replaced with reject(exception)
Mutant 150 in q.js: done replaced with !done
Mutant 151 in q.js: Q.onerror replaced with Q.onerror(e)
Mutant 152 in q.js: !threw replaced with newValue !== undefined
Mutant 153 in q.js: newValue replaced with value
Mutant 154 in q.js: promise replaced with value
Mutant 155 in q.js: callback replaced with function (value) {
  return value;
}
Mutant 156 in q.js: callback replaced with value
Mutant 157 in q.js: callback.fcall replaced with value
not replacing callback.fcall with value
not replacing callback.fcall with value
Mutant 158 in q.js: Q replaced with Q.when
Mutant 159 in q.js: fulfilled replaced with function (value) {
  return value;
}
Mutant 160 in q.js: rejected replaced with function (exception) {
  if (Q.onerror) {
    Q.onerror(exception);
  } else {
    throw exception;
  }
}
Mutant 161 in q.js: function () {
  return value;
} replaced with function (value) {
  return value;
}
Mutant 162 in q.js: Q replaced with value
Mutant 163 in q.js: promise replaced with value
Mutant 164 in q.js: function () {
  throw reason;
} replaced with function (reason) {
  return Q.reject(reason);
}
Mutant 165 in q.js: Q replaced with unhandledRejections
Mutant 166 in q.js: value.inspect replaced with inspected
Mutant 167 in q.js: inspected.state === "fulfilled" replaced with inspected.state === "rejected"
Mutant 168 in q.js: object replaced with isPromiseAlike(object)
Mutant 169 in q.js: object replaced with value
Mutant 170 in q.js: object.inspect replaced with inspected.state === "pending"
not replacing object.inspect with inspected.state === "pending"
Mutant 171 in q.js: object.inspect replaced with inspected.state === "fulfilled"
not replacing object.inspect with inspected.state === "fulfilled"
Mutant 172 in q.js: object.inspect replaced with inspected.state === "rejected"
not replacing object.inspect with inspected.state === "rejected"
Mutant 173 in q.js: !trackUnhandledRejections replaced with unhandledRejections.length === 0
Mutant 174 in q.js: array_indexOf(unhandledRejections, promise) !== -1 replaced with array_indexOf(reportedUnhandledRejections, promise) === -1
Mutant 175 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections)
Mutant 176 in q.js: process.emit("unhandledRejection", reason, promise) replaced with process.emit("unhandledRejection")
Mutant 177 in q.js: reason && typeof reason.stack !== "undefined" replaced with reason instanceof Error
Mutant 178 in q.js: reason.stack replaced with reason
Mutant 179 in q.js: "(no stack) " + reason replaced with reason
Mutant 180 in q.js: !trackUnhandledRejections replaced with atReport !== -1
Mutant 181 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections)
Mutant 182 in q.js: array_indexOf(reportedUnhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections)
Mutant 183 in q.js: process.emit("rejectionHandled", unhandledReasons[at], promise) replaced with process.emit("unhandledRejectionHandled")
Mutant 184 in q.js: "rejectionHandled" replaced with "unhandledRejection"
Mutant 185 in q.js: unhandledReasons[at] replaced with reportedUnhandledRejections.splice(atReport, 1)
Mutant 186 in q.js: reportedUnhandledRejections.splice(atReport, 1) replaced with reportedUnhandledRejections.splice(atReport)
Mutant 187 in q.js: 1 replaced with atReport
Mutant 188 in q.js: unhandledRejections.splice(at, 1) replaced with unhandledRejections.splice(at)
Mutant 189 in q.js: 1 replaced with at
Mutant 190 in q.js: unhandledReasons.splice(at, 1) replaced with unhandledReasons.splice(at)
Mutant 191 in q.js: 1 replaced with at
Mutant 192 in q.js: rejected replaced with rejection.isHandled()
Mutant 193 in q.js: this replaced with rejection
Mutant 194 in q.js: trackRejection(rejection, reason) replaced with trackRejection(rejection)
Mutant 195 in q.js: name === null || name === void 0 replaced with typeof name === "undefined"
Mutant 196 in q.js: value.apply(void 0, args) replaced with value.apply(thisp)
Mutant 197 in q.js: void 0 replaced with this
Mutant 198 in q.js: value[name].apply(value, args) replaced with value[name].apply(value)
Mutant 199 in q.js: value replaced with this
Mutant 200 in q.js: value.apply(thisp, args) replaced with value.apply(thisp)
Mutant 201 in q.js: thisp replaced with this
Mutant 202 in q.js: defer replaced with deferred.promise
Mutant 203 in q.js: promise.then replaced with deferred.resolve
Mutant 204 in q.js: deferred.resolve replaced with function (rejected) {
  return rejected ? rejected(reason) : this;
}
Mutant 205 in q.js: deferred.reject replaced with function (rejected) {
  return rejected ? rejected(reason) : this;
}
Mutant 206 in q.js: deferred.notify replaced with function () {
  return this;
}
Mutant 207 in q.js: dispatch(object, op, args) replaced with dispatch(object)
Mutant 208 in q.js: dispatch replaced with object[name]
Mutant 209 in q.js: op replaced with "get"
Mutant 210 in q.js: Q replaced with object
Mutant 211 in q.js: Q replaced with value
Mutant 212 in q.js: fulfilled replaced with function (value) {
  return value;
}
Mutant 213 in q.js: this.all replaced with array
not replacing this.all with array
not replacing this.all with array
Mutant 214 in q.js: fulfilled.apply(void 0, array) replaced with fulfilled.apply(thisp)
Mutant 215 in q.js: fulfilled.apply replaced with array
Mutant 216 in q.js: void 0 replaced with thisp
Mutant 217 in q.js: typeof StopIteration === "undefined" replaced with generator.constructor.name === "GeneratorFunction"
Mutant 218 in q.js: generator[verb] replaced with result.value
Mutant 219 in q.js: when(result.value, callback, errback) replaced with when(result)
Mutant 220 in q.js: result.value replaced with result
Mutant 221 in q.js: callback replaced with reject
Mutant 222 in q.js: generator[verb] replaced with result.value
Mutant 223 in q.js: isStopIteration(exception) replaced with exception instanceof QReturnValue
Mutant 224 in q.js: exception.value replaced with result.value
Mutant 225 in q.js: when(result, callback, errback) replaced with when(result.value)
Mutant 226 in q.js: result replaced with result.value
Mutant 227 in q.js: callback replaced with function (result) {
  return result;
}
Mutant 228 in q.js: makeGenerator.apply(this, arguments) replaced with makeGenerator.apply(this)
Mutant 229 in q.js: continuer.bind(continuer, "next") replaced with continuer.bind(this)
Mutant 230 in q.js: continuer replaced with this
Mutant 231 in q.js: continuer.bind(continuer, "throw") replaced with continuer.bind("throw")
Mutant 232 in q.js: continuer replaced with errback
Mutant 233 in q.js: makeGenerator replaced with makeGenerator.apply(this, arguments)
Mutant 234 in q.js: arguments replaced with args
Mutant 235 in q.js: callback.apply(self, args) replaced with callback.apply(self)
Mutant 236 in q.js: Q(object).dispatch(op, args) replaced with Q(object).dispatch(op)
Mutant 237 in q.js: self.promiseDispatch(deferred.resolve, op, args) replaced with self.promiseDispatch(op)
Mutant 238 in q.js: deferred.resolve replaced with self
Mutant 239 in q.js: op replaced with deferred.resolve
Mutant 240 in q.js: Q(object).dispatch("get", [key]) replaced with Q(object).dispatch("get")
Mutant 241 in q.js: this.dispatch("get", [key]) replaced with this.dispatch("get")
Mutant 242 in q.js: Q(object).dispatch("set", [key, value]) replaced with Q(object).dispatch("set")
Mutant 243 in q.js: Q replaced with Promise.prototype
Mutant 244 in q.js: this.dispatch("set", [key, value]) replaced with this.dispatch("set")
Mutant 245 in q.js: [key, value] replaced with [value, key]
Mutant 246 in q.js: Q replaced with deferred.resolve
Mutant 247 in q.js: this.dispatch replaced with deferred.resolve
Mutant 248 in q.js: Q(object).dispatch("post", [name, args]) replaced with Q(object).dispatch("post")
Mutant 249 in q.js: Q(object).dispatch replaced with Q.post
Mutant 250 in q.js: Q replaced with this
Mutant 251 in q.js: object replaced with self
Mutant 252 in q.js: this.dispatch("post", [name, args]) replaced with this.dispatch("post")
Mutant 253 in q.js: [name, args] replaced with array_slice(arguments, 1)
Mutant 254 in q.js: Q(object).dispatch("post", [name, array_slice(arguments, 2)]) replaced with Q(object).dispatch("invoke")
Mutant 255 in q.js: Q(object).dispatch replaced with Q.post
Mutant 256 in q.js: Q replaced with promise
Mutant 257 in q.js: object replaced with this
Mutant 258 in q.js: "post" replaced with "invoke"
Mutant 259 in q.js: [name, array_slice(arguments, 2)] replaced with array_slice(arguments, 1)
Mutant 260 in q.js: array_slice(arguments, 2) replaced with array_slice(arguments)
Mutant 261 in q.js: this.dispatch("post", [name, array_slice(arguments, 1)]) replaced with this.dispatch("post")
Mutant 262 in q.js: [name, array_slice(arguments, 1)] replaced with array_slice(arguments, 2)
Mutant 263 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments)
Mutant 264 in q.js: 1 replaced with arguments.length - 1
Mutant 265 in q.js: Q(object).dispatch("apply", [void 0, args]) replaced with Q(object).dispatch("apply")
Mutant 266 in q.js: Q replaced with promise
Mutant 267 in q.js: object replaced with promise
Mutant 268 in q.js: this.dispatch("apply", [void 0, args]) replaced with this.dispatch("apply")
Mutant 269 in q.js: [void 0, args] replaced with [void 0, array_slice(arguments)]
Mutant 270 in q.js: Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]) replaced with Q(object).dispatch("post")
Mutant 271 in q.js: Q replaced with promise
Mutant 272 in q.js: object replaced with this
Mutant 273 in q.js: "apply" replaced with "call"
Mutant 274 in q.js: [void 0, array_slice(arguments, 1)] replaced with array_slice(arguments, 1)
Mutant 275 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments)
Mutant 276 in q.js: this.dispatch("apply", [void 0, array_slice(arguments)]) replaced with this.dispatch("apply")
Mutant 277 in q.js: [void 0, array_slice(arguments)] replaced with array_slice(arguments, 1)
Mutant 278 in q.js: Q replaced with promise
Mutant 279 in q.js: object replaced with promise
Mutant 280 in q.js: array_slice(arguments, 1) replaced with array_slice(args.concat(array_slice(arguments)))
Mutant 281 in q.js: 1 replaced with args.length
Mutant 282 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 283 in q.js: arguments replaced with args
Mutant 284 in q.js: array_slice replaced with arguments
Mutant 285 in q.js: Q(object).dispatch("keys", []) replaced with Q(object).dispatch("keys")
Mutant 286 in q.js: Q replaced with promise
Mutant 287 in q.js: [] replaced with [].slice.call(this)
Mutant 288 in q.js: this.dispatch("keys", []) replaced with this.dispatch("keys")
Mutant 289 in q.js: this.dispatch replaced with deferred.promise
Mutant 290 in q.js: [] replaced with void 0
Mutant 291 in q.js: isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled" replaced with promise.isFulfilled()
Mutant 292 in q.js: promise.inspect replaced with promise.value
Mutant 293 in q.js: --pendingCount === 0 replaced with pendingCount === 0
Mutant 294 in q.js: {
  index: index,
  value: progress
} replaced with progress
Mutant 295 in q.js: all replaced with this
Mutant 296 in q.js: onRejected replaced with deferred.reject
Mutant 297 in q.js: any replaced with deferred.promise
Mutant 298 in q.js: this replaced with promises
Mutant 299 in q.js: deprecate replaced with Q.allSettled
Mutant 300 in q.js: allResolved replaced with Q.allSettled
Mutant 301 in q.js: "allResolved" replaced with "allSettled"
Mutant 302 in q.js: "allSettled" replaced with "allResolved"
Mutant 303 in q.js: array_map(promises, Q) replaced with array_map(promise)
Mutant 304 in q.js: array_map replaced with promises
Mutant 305 in q.js: promises replaced with promise
Mutant 306 in q.js: Q replaced with function (promise) {
  return promise.inspect();
}
Mutant 307 in q.js: when(promise, noop, noop) replaced with when(promise)
Mutant 308 in q.js: noop replaced with function (err) {
  pendingCount--;
  if (pendingCount === 0) {
    var rejection = err || new Error("" + err);
    rejection.message = "Q can't get fulfillment value from any promise, all " + "promises were rejected. Last error message: " + rejection.message;
    deferred.reject(rejection);
  }
}
Mutant 309 in q.js: this replaced with promises
Mutant 310 in q.js: Q replaced with promise
Mutant 311 in q.js: regardless replaced with function (value) {
  return promise.inspect();
}
Mutant 312 in q.js: regardless replaced with function (err) {
  deferred.reject(err);
}
Mutant 313 in q.js: object replaced with promise
Mutant 314 in q.js: void 0 replaced with function (rejection) {
  throw rejection;
}
Mutant 315 in q.js: rejected replaced with function (err) {
  deferred.reject(err);
}
Mutant 316 in q.js: void 0 replaced with function (promise) {
  return promise.then(noop, noop);
}
Mutant 317 in q.js: Q(object).then replaced with this
Mutant 318 in q.js: void 0 replaced with function (promise) {
  return promise.inspect();
}
Mutant 319 in q.js: void 0 replaced with function (promise) {
  return promise.inspect();
}
Mutant 320 in q.js: progressed replaced with function (value) {
  return promise.inspect();
}
Mutant 321 in q.js: void 0 replaced with function (promise) {
  return promise.inspect();
}
Mutant 322 in q.js: void 0 replaced with function (value) {
  return value;
}
Mutant 323 in q.js: progressed replaced with promise
Mutant 324 in q.js: Q replaced with promise["finally"]
Mutant 325 in q.js: !callback || typeof callback.apply !== "function" replaced with promise.isPending()
Mutant 326 in q.js: callback replaced with promise
Mutant 327 in q.js: callback.fcall replaced with this
not replacing callback.fcall with this
not replacing callback.fcall with this
Mutant 328 in q.js: Q replaced with deferred.resolve
Mutant 329 in q.js: fulfilled replaced with function (value) {
  return value;
}
Mutant 330 in q.js: rejected replaced with function (value) {
  return value;
}
Mutant 331 in q.js: makeStackTraceLong(error, promise) replaced with makeStackTraceLong(error)
Mutant 332 in q.js: promise replaced with Q.onerror
Mutant 333 in q.js: Q.onerror replaced with Q.onerror !== void 0
Mutant 334 in q.js: this.then(fulfilled, rejected, progress) replaced with this.then(fulfilled)
Mutant 335 in q.js: this.then replaced with this
Mutant 336 in q.js: fulfilled replaced with function () {
  return value;
}
Mutant 337 in q.js: rejected replaced with function (reason) {
  throw reason;
}
Mutant 338 in q.js: void 0 replaced with function () {
  throw new Error("Unhandled rejection");
}
Mutant 339 in q.js: !error || "string" === typeof error replaced with error === null
Mutant 340 in q.js: timeout === void 0 replaced with typeof object === "number"
Mutant 341 in q.js: Q replaced with this
Mutant 342 in q.js: defer replaced with deferred
Mutant 343 in q.js: Q replaced with this
Mutant 344 in q.js: callback replaced with this
Mutant 345 in q.js: args replaced with array_slice(arguments, 1)
Mutant 346 in q.js: defer replaced with deferred
Mutant 347 in q.js: array_slice replaced with args
Mutant 348 in q.js: deferred.makeNodeResolver() replaced with deferred.resolve
Mutant 349 in q.js: this.fapply replaced with deferred.resolve
not replacing this.fapply with deferred.resolve
not replacing this.fapply with deferred.resolve
Mutant 350 in q.js: array_slice(arguments, 1) replaced with array_slice(args)
Mutant 351 in q.js: array_slice replaced with args
Mutant 352 in q.js: arguments replaced with args
Mutant 353 in q.js: callback replaced with this
Mutant 354 in q.js: arguments replaced with array_slice(arguments)
Mutant 355 in q.js: deferred.makeNodeResolver() replaced with deferred.resolve
Mutant 356 in q.js: callback === undefined replaced with typeof callback === "function"
Mutant 357 in q.js: array_slice(arguments, 1) replaced with array_slice(args)
Mutant 358 in q.js: arguments replaced with args
Mutant 359 in q.js: array_slice(arguments) replaced with args
Mutant 360 in q.js: callback replaced with this
Mutant 361 in q.js: array_slice replaced with args
Mutant 362 in q.js: arguments replaced with args
Mutant 363 in q.js: Q.denodeify.apply(void 0, args) replaced with Q.denodeify.apply(this)
Mutant 364 in q.js: void 0 replaced with this
Mutant 365 in q.js: array_slice(arguments, 2) replaced with array_slice(args)
Mutant 366 in q.js: arguments replaced with array_slice(arguments, 2)
Mutant 367 in q.js: defer replaced with deferred
Mutant 368 in q.js: deferred.makeNodeResolver() replaced with deferred.resolve
Mutant 369 in q.js: callback.apply(thisp, arguments) replaced with callback.apply(thisp)
Mutant 370 in q.js: arguments replaced with nodeArgs
Mutant 371 in q.js: bound replaced with this
Mutant 372 in q.js: array_slice(arguments, 0) replaced with array_slice(args.slice(1))
Mutant 373 in q.js: arguments replaced with this
Mutant 374 in q.js: 0 replaced with thisp
Mutant 375 in q.js: Q.nbind.apply(void 0, args) replaced with Q.nbind.apply(this)
Mutant 376 in q.js: Q.nbind.apply replaced with Promise.prototype.denodeify
Mutant 377 in q.js: Q(object).npost(name, args) replaced with Q(object).npost(object)
Mutant 378 in q.js: name replaced with thisp
Mutant 379 in q.js: args replaced with array_slice(arguments, 2)
Mutant 380 in q.js: array_slice replaced with args || []
Mutant 381 in q.js: args || [] replaced with args
Mutant 382 in q.js: [name, nodeArgs] replaced with [this, name, nodeArgs]
Mutant 383 in q.js: array_slice(arguments, 2) replaced with array_slice(array_slice(arguments, 1))
Mutant 384 in q.js: arguments replaced with array_slice(arguments, 2)
Mutant 385 in q.js: 2 replaced with 1
Mutant 386 in q.js: deferred.makeNodeResolver() replaced with deferred.resolve
Mutant 387 in q.js: Q(object).dispatch("post", [name, nodeArgs]) replaced with Q(object).dispatch("invoke")
not replacing Q(object).dispatch("post", [name, nodeArgs]) with Q(object).dispatch("invoke")
Mutant 388 in q.js: object replaced with this
Mutant 389 in q.js: "post" replaced with "dispatch"
Mutant 390 in q.js: array_slice(arguments, 1) replaced with array_slice(array_slice(arguments, 2))
Mutant 391 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 392 in q.js: 1 replaced with nodeArgs.length - 1
Mutant 393 in q.js: defer replaced with deferred
Mutant 394 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("invoke")
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("invoke")
Mutant 395 in q.js: "post" replaced with "invoke"
Mutant 396 in q.js: Q replaced with this
Mutant 397 in q.js: nodeback replaced with typeof nodeback === "function"
Mutant 398 in q.js: nodeback(null, value) replaced with nodeback(value)
Mutant 399 in queue.js: ends.promise.get replaced with next.promise
Mutant 400 in queue.js: error replaced with Q.reject(error)
Mutant 401 in queue.js: Q.reject replaced with error
[32m12:30:02 (2886) INFO Instrumenter[39m Instrumented 2 source file(s) with 402 mutant(s)
[32m12:30:03 (2886) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m12:30:05 (2886) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m12:30:05 (2886) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m12:30:11 (2886) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 6 seconds (net 6740 ms, overhead 0 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~1h 6m) 1/402 tested (1 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 6m) 2/402 tested (2 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~49m) 4/402 tested (4 survived, 0 timed out)
Mutation testing 1% (elapsed: <1m, remaining: ~52m) 5/402 tested (5 survived, 0 timed out)
Mutation testing 1% (elapsed: <1m, remaining: ~47m) 7/402 tested (7 survived, 0 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~43m) 9/402 tested (8 survived, 0 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~50m) 9/402 tested (8 survived, 0 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~47m) 11/402 tested (9 survived, 1 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~48m) 12/402 tested (10 survived, 1 timed out)
Mutation testing 3% (elapsed: ~1m, remaining: ~49m) 13/402 tested (10 survived, 2 timed out)
Mutation testing 3% (elapsed: ~1m, remaining: ~50m) 14/402 tested (11 survived, 2 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~48m) 16/402 tested (13 survived, 2 timed out)
Mutation testing 4% (elapsed: ~2m, remaining: ~49m) 17/402 tested (14 survived, 2 timed out)
Mutation testing 4% (elapsed: ~2m, remaining: ~52m) 17/402 tested (14 survived, 2 timed out)
Mutation testing 4% (elapsed: ~2m, remaining: ~50m) 19/402 tested (15 survived, 3 timed out)
Mutation testing 4% (elapsed: ~2m, remaining: ~50m) 20/402 tested (16 survived, 3 timed out)
Mutation testing 5% (elapsed: ~2m, remaining: ~48m) 22/402 tested (18 survived, 3 timed out)
Mutation testing 5% (elapsed: ~3m, remaining: ~49m) 23/402 tested (19 survived, 3 timed out)
Mutation testing 6% (elapsed: ~3m, remaining: ~45m) 26/402 tested (21 survived, 3 timed out)
Mutation testing 7% (elapsed: ~3m, remaining: ~41m) 30/402 tested (21 survived, 3 timed out)
Mutation testing 7% (elapsed: ~3m, remaining: ~40m) 32/402 tested (23 survived, 3 timed out)
Mutation testing 8% (elapsed: ~3m, remaining: ~41m) 33/402 tested (24 survived, 3 timed out)
Mutation testing 8% (elapsed: ~3m, remaining: ~40m) 35/402 tested (26 survived, 3 timed out)
Mutation testing 8% (elapsed: ~4m, remaining: ~40m) 36/402 tested (27 survived, 3 timed out)
Mutation testing 9% (elapsed: ~4m, remaining: ~39m) 38/402 tested (29 survived, 3 timed out)
Mutation testing 9% (elapsed: ~4m, remaining: ~40m) 39/402 tested (30 survived, 3 timed out)
Mutation testing 10% (elapsed: ~4m, remaining: ~39m) 41/402 tested (32 survived, 3 timed out)
Mutation testing 10% (elapsed: ~4m, remaining: ~40m) 42/402 tested (33 survived, 3 timed out)
Mutation testing 10% (elapsed: ~4m, remaining: ~39m) 44/402 tested (35 survived, 3 timed out)
Mutation testing 11% (elapsed: ~5m, remaining: ~39m) 45/402 tested (36 survived, 3 timed out)
Mutation testing 11% (elapsed: ~5m, remaining: ~39m) 47/402 tested (38 survived, 3 timed out)
Mutation testing 11% (elapsed: ~5m, remaining: ~39m) 48/402 tested (39 survived, 3 timed out)
Mutation testing 12% (elapsed: ~5m, remaining: ~38m) 50/402 tested (41 survived, 3 timed out)
Mutation testing 12% (elapsed: ~5m, remaining: ~39m) 51/402 tested (41 survived, 3 timed out)
Mutation testing 12% (elapsed: ~5m, remaining: ~39m) 52/402 tested (42 survived, 3 timed out)
Mutation testing 13% (elapsed: ~6m, remaining: ~38m) 54/402 tested (44 survived, 3 timed out)
Mutation testing 13% (elapsed: ~6m, remaining: ~38m) 55/402 tested (45 survived, 3 timed out)
Mutation testing 14% (elapsed: ~6m, remaining: ~38m) 57/402 tested (47 survived, 3 timed out)
Mutation testing 14% (elapsed: ~6m, remaining: ~38m) 58/402 tested (48 survived, 3 timed out)
Mutation testing 14% (elapsed: ~6m, remaining: ~38m) 60/402 tested (50 survived, 3 timed out)
Mutation testing 15% (elapsed: ~6m, remaining: ~38m) 61/402 tested (51 survived, 3 timed out)
Mutation testing 15% (elapsed: ~7m, remaining: ~37m) 63/402 tested (53 survived, 3 timed out)
Mutation testing 15% (elapsed: ~7m, remaining: ~37m) 64/402 tested (54 survived, 3 timed out)
Mutation testing 16% (elapsed: ~7m, remaining: ~36m) 67/402 tested (56 survived, 3 timed out)
Mutation testing 17% (elapsed: ~7m, remaining: ~34m) 72/402 tested (57 survived, 3 timed out)
Mutation testing 18% (elapsed: ~7m, remaining: ~34m) 73/402 tested (58 survived, 3 timed out)
Mutation testing 18% (elapsed: ~7m, remaining: ~34m) 75/402 tested (60 survived, 3 timed out)
Mutation testing 18% (elapsed: ~8m, remaining: ~34m) 76/402 tested (61 survived, 3 timed out)
Mutation testing 19% (elapsed: ~8m, remaining: ~33m) 78/402 tested (63 survived, 3 timed out)
Mutation testing 19% (elapsed: ~8m, remaining: ~34m) 79/402 tested (64 survived, 3 timed out)
Mutation testing 19% (elapsed: ~8m, remaining: ~34m) 80/402 tested (65 survived, 3 timed out)
Mutation testing 20% (elapsed: ~8m, remaining: ~33m) 82/402 tested (67 survived, 3 timed out)
Mutation testing 20% (elapsed: ~8m, remaining: ~33m) 83/402 tested (68 survived, 3 timed out)
Mutation testing 21% (elapsed: ~9m, remaining: ~33m) 86/402 tested (69 survived, 3 timed out)
Mutation testing 22% (elapsed: ~9m, remaining: ~31m) 91/402 tested (70 survived, 3 timed out)
Mutation testing 22% (elapsed: ~9m, remaining: ~31m) 92/402 tested (71 survived, 3 timed out)
Mutation testing 22% (elapsed: ~9m, remaining: ~32m) 92/402 tested (71 survived, 3 timed out)
Mutation testing 23% (elapsed: ~9m, remaining: ~31m) 95/402 tested (72 survived, 4 timed out)
Mutation testing 23% (elapsed: ~9m, remaining: ~31m) 96/402 tested (73 survived, 4 timed out)
Mutation testing 24% (elapsed: ~10m, remaining: ~31m) 97/402 tested (74 survived, 4 timed out)
Mutation testing 24% (elapsed: ~10m, remaining: ~31m) 99/402 tested (76 survived, 4 timed out)
Mutation testing 24% (elapsed: ~10m, remaining: ~31m) 100/402 tested (77 survived, 4 timed out)
Mutation testing 25% (elapsed: ~10m, remaining: ~30m) 102/402 tested (79 survived, 4 timed out)
Mutation testing 25% (elapsed: ~10m, remaining: ~30m) 103/402 tested (80 survived, 4 timed out)
Mutation testing 25% (elapsed: ~10m, remaining: ~31m) 104/402 tested (81 survived, 4 timed out)
Mutation testing 26% (elapsed: ~11m, remaining: ~31m) 105/402 tested (81 survived, 5 timed out)
Mutation testing 26% (elapsed: ~11m, remaining: ~30m) 107/402 tested (82 survived, 5 timed out)
Mutation testing 26% (elapsed: ~11m, remaining: ~30m) 108/402 tested (82 survived, 6 timed out)
Mutation testing 27% (elapsed: ~11m, remaining: ~30m) 109/402 tested (83 survived, 6 timed out)
Mutation testing 27% (elapsed: ~11m, remaining: ~30m) 110/402 tested (84 survived, 6 timed out)
Mutation testing 27% (elapsed: ~11m, remaining: ~31m) 111/402 tested (84 survived, 6 timed out)
Mutation testing 28% (elapsed: ~12m, remaining: ~30m) 113/402 tested (86 survived, 6 timed out)
Mutation testing 28% (elapsed: ~12m, remaining: ~30m) 114/402 tested (87 survived, 6 timed out)
Mutation testing 28% (elapsed: ~12m, remaining: ~30m) 116/402 tested (89 survived, 6 timed out)
Mutation testing 29% (elapsed: ~12m, remaining: ~30m) 117/402 tested (90 survived, 6 timed out)
Mutation testing 29% (elapsed: ~12m, remaining: ~30m) 119/402 tested (92 survived, 6 timed out)
Mutation testing 29% (elapsed: ~12m, remaining: ~30m) 120/402 tested (93 survived, 6 timed out)
Mutation testing 30% (elapsed: ~13m, remaining: ~29m) 122/402 tested (95 survived, 6 timed out)
Mutation testing 30% (elapsed: ~13m, remaining: ~29m) 123/402 tested (96 survived, 6 timed out)
Mutation testing 31% (elapsed: ~13m, remaining: ~29m) 125/402 tested (98 survived, 6 timed out)
Mutation testing 31% (elapsed: ~13m, remaining: ~29m) 126/402 tested (99 survived, 6 timed out)
Mutation testing 32% (elapsed: ~13m, remaining: ~28m) 129/402 tested (101 survived, 6 timed out)
Mutation testing 32% (elapsed: ~13m, remaining: ~28m) 131/402 tested (101 survived, 6 timed out)
Mutation testing 32% (elapsed: ~14m, remaining: ~28m) 132/402 tested (101 survived, 7 timed out)
Mutation testing 33% (elapsed: ~14m, remaining: ~28m) 133/402 tested (102 survived, 7 timed out)
Mutation testing 33% (elapsed: ~14m, remaining: ~28m) 134/402 tested (102 survived, 8 timed out)
Mutation testing 33% (elapsed: ~14m, remaining: ~28m) 135/402 tested (103 survived, 8 timed out)
Mutation testing 34% (elapsed: ~14m, remaining: ~28m) 137/402 tested (105 survived, 8 timed out)
Mutation testing 35% (elapsed: ~14m, remaining: ~27m) 141/402 tested (105 survived, 8 timed out)
Mutation testing 35% (elapsed: ~15m, remaining: ~26m) 144/402 tested (106 survived, 8 timed out)
Mutation testing 35% (elapsed: ~15m, remaining: ~27m) 144/402 tested (106 survived, 8 timed out)
Mutation testing 36% (elapsed: ~15m, remaining: ~27m) 145/402 tested (106 survived, 9 timed out)
Mutation testing 36% (elapsed: ~15m, remaining: ~27m) 146/402 tested (106 survived, 10 timed out)
Mutation testing 36% (elapsed: ~15m, remaining: ~27m) 147/402 tested (107 survived, 10 timed out)
Mutation testing 36% (elapsed: ~15m, remaining: ~27m) 148/402 tested (108 survived, 10 timed out)
Mutation testing 37% (elapsed: ~16m, remaining: ~27m) 149/402 tested (108 survived, 10 timed out)
Mutation testing 37% (elapsed: ~16m, remaining: ~27m) 150/402 tested (108 survived, 10 timed out)
Mutation testing 37% (elapsed: ~16m, remaining: ~27m) 150/402 tested (108 survived, 10 timed out)
Mutation testing 37% (elapsed: ~16m, remaining: ~27m) 152/402 tested (109 survived, 11 timed out)
Mutation testing 38% (elapsed: ~16m, remaining: ~27m) 153/402 tested (110 survived, 11 timed out)
Mutation testing 38% (elapsed: ~16m, remaining: ~26m) 155/402 tested (112 survived, 11 timed out)
Mutation testing 38% (elapsed: ~17m, remaining: ~26m) 156/402 tested (113 survived, 11 timed out)
Mutation testing 39% (elapsed: ~17m, remaining: ~26m) 158/402 tested (115 survived, 11 timed out)
Mutation testing 39% (elapsed: ~17m, remaining: ~26m) 159/402 tested (116 survived, 11 timed out)
Mutation testing 40% (elapsed: ~17m, remaining: ~26m) 161/402 tested (118 survived, 11 timed out)
Mutation testing 40% (elapsed: ~17m, remaining: ~26m) 162/402 tested (119 survived, 11 timed out)
Mutation testing 40% (elapsed: ~17m, remaining: ~25m) 164/402 tested (121 survived, 11 timed out)
Mutation testing 41% (elapsed: ~18m, remaining: ~25m) 165/402 tested (122 survived, 11 timed out)
Mutation testing 41% (elapsed: ~18m, remaining: ~25m) 166/402 tested (123 survived, 11 timed out)
Mutation testing 42% (elapsed: ~18m, remaining: ~25m) 169/402 tested (125 survived, 11 timed out)
Mutation testing 42% (elapsed: ~18m, remaining: ~25m) 170/402 tested (126 survived, 11 timed out)
Mutation testing 42% (elapsed: ~18m, remaining: ~24m) 172/402 tested (128 survived, 11 timed out)
Mutation testing 43% (elapsed: ~18m, remaining: ~24m) 173/402 tested (129 survived, 11 timed out)
Mutation testing 43% (elapsed: ~19m, remaining: ~24m) 175/402 tested (131 survived, 11 timed out)
Mutation testing 43% (elapsed: ~19m, remaining: ~24m) 176/402 tested (132 survived, 11 timed out)
Mutation testing 44% (elapsed: ~19m, remaining: ~24m) 178/402 tested (134 survived, 11 timed out)
Mutation testing 44% (elapsed: ~19m, remaining: ~24m) 179/402 tested (135 survived, 11 timed out)
Mutation testing 44% (elapsed: ~19m, remaining: ~24m) 180/402 tested (136 survived, 11 timed out)
Mutation testing 45% (elapsed: ~19m, remaining: ~24m) 181/402 tested (136 survived, 12 timed out)
Mutation testing 45% (elapsed: ~20m, remaining: ~24m) 182/402 tested (137 survived, 12 timed out)
Mutation testing 45% (elapsed: ~20m, remaining: ~23m) 184/402 tested (139 survived, 12 timed out)
Mutation testing 46% (elapsed: ~20m, remaining: ~23m) 185/402 tested (140 survived, 12 timed out)
Mutation testing 46% (elapsed: ~20m, remaining: ~23m) 187/402 tested (142 survived, 12 timed out)
Mutation testing 46% (elapsed: ~20m, remaining: ~23m) 188/402 tested (143 survived, 12 timed out)
Mutation testing 47% (elapsed: ~20m, remaining: ~23m) 190/402 tested (145 survived, 12 timed out)
Mutation testing 47% (elapsed: ~21m, remaining: ~23m) 191/402 tested (146 survived, 12 timed out)
Mutation testing 47% (elapsed: ~21m, remaining: ~23m) 192/402 tested (147 survived, 12 timed out)
Mutation testing 48% (elapsed: ~21m, remaining: ~23m) 193/402 tested (147 survived, 13 timed out)
Mutation testing 48% (elapsed: ~21m, remaining: ~23m) 194/402 tested (148 survived, 13 timed out)
Mutation testing 48% (elapsed: ~21m, remaining: ~22m) 196/402 tested (150 survived, 13 timed out)
Mutation testing 49% (elapsed: ~21m, remaining: ~22m) 197/402 tested (151 survived, 13 timed out)
Mutation testing 49% (elapsed: ~22m, remaining: ~22m) 199/402 tested (153 survived, 13 timed out)
Mutation testing 49% (elapsed: ~22m, remaining: ~22m) 200/402 tested (154 survived, 13 timed out)
Mutation testing 50% (elapsed: ~22m, remaining: ~22m) 202/402 tested (156 survived, 13 timed out)
Mutation testing 50% (elapsed: ~22m, remaining: ~22m) 203/402 tested (156 survived, 13 timed out)
Mutation testing 50% (elapsed: ~22m, remaining: ~21m) 205/402 tested (156 survived, 13 timed out)
Mutation testing 51% (elapsed: ~22m, remaining: ~21m) 206/402 tested (156 survived, 13 timed out)
Mutation testing 51% (elapsed: ~23m, remaining: ~21m) 207/402 tested (157 survived, 13 timed out)
Mutation testing 51% (elapsed: ~23m, remaining: ~21m) 209/402 tested (159 survived, 13 timed out)
Mutation testing 52% (elapsed: ~23m, remaining: ~21m) 210/402 tested (160 survived, 13 timed out)
Mutation testing 52% (elapsed: ~23m, remaining: ~21m) 212/402 tested (162 survived, 13 timed out)
Mutation testing 52% (elapsed: ~23m, remaining: ~21m) 213/402 tested (163 survived, 13 timed out)
Mutation testing 53% (elapsed: ~23m, remaining: ~20m) 215/402 tested (165 survived, 13 timed out)
Mutation testing 53% (elapsed: ~24m, remaining: ~20m) 216/402 tested (166 survived, 13 timed out)
Mutation testing 54% (elapsed: ~24m, remaining: ~20m) 218/402 tested (168 survived, 13 timed out)
Mutation testing 54% (elapsed: ~24m, remaining: ~20m) 219/402 tested (169 survived, 13 timed out)
Mutation testing 54% (elapsed: ~24m, remaining: ~20m) 221/402 tested (171 survived, 13 timed out)
Mutation testing 55% (elapsed: ~24m, remaining: ~20m) 222/402 tested (172 survived, 13 timed out)
Mutation testing 55% (elapsed: ~24m, remaining: ~19m) 224/402 tested (174 survived, 13 timed out)
Mutation testing 55% (elapsed: ~25m, remaining: ~19m) 225/402 tested (175 survived, 13 timed out)
Mutation testing 56% (elapsed: ~25m, remaining: ~19m) 227/402 tested (177 survived, 13 timed out)
Mutation testing 56% (elapsed: ~25m, remaining: ~19m) 228/402 tested (178 survived, 13 timed out)
Mutation testing 57% (elapsed: ~25m, remaining: ~19m) 230/402 tested (180 survived, 13 timed out)
Mutation testing 57% (elapsed: ~25m, remaining: ~19m) 231/402 tested (181 survived, 13 timed out)
Mutation testing 57% (elapsed: ~25m, remaining: ~18m) 233/402 tested (183 survived, 13 timed out)
Mutation testing 58% (elapsed: ~26m, remaining: ~18m) 234/402 tested (184 survived, 13 timed out)
Mutation testing 58% (elapsed: ~26m, remaining: ~18m) 236/402 tested (186 survived, 13 timed out)
Mutation testing 58% (elapsed: ~26m, remaining: ~18m) 237/402 tested (187 survived, 13 timed out)
Mutation testing 59% (elapsed: ~26m, remaining: ~18m) 239/402 tested (189 survived, 13 timed out)
Mutation testing 59% (elapsed: ~26m, remaining: ~18m) 240/402 tested (190 survived, 13 timed out)
Mutation testing 60% (elapsed: ~26m, remaining: ~17m) 242/402 tested (192 survived, 13 timed out)
Mutation testing 60% (elapsed: ~27m, remaining: ~17m) 243/402 tested (193 survived, 13 timed out)
Mutation testing 60% (elapsed: ~27m, remaining: ~17m) 245/402 tested (195 survived, 13 timed out)
Mutation testing 61% (elapsed: ~27m, remaining: ~17m) 246/402 tested (196 survived, 13 timed out)
Mutation testing 61% (elapsed: ~27m, remaining: ~17m) 248/402 tested (198 survived, 13 timed out)
Mutation testing 61% (elapsed: ~27m, remaining: ~17m) 249/402 tested (199 survived, 13 timed out)
Mutation testing 62% (elapsed: ~27m, remaining: ~16m) 250/402 tested (200 survived, 13 timed out)
Mutation testing 62% (elapsed: ~28m, remaining: ~16m) 252/402 tested (202 survived, 13 timed out)
Mutation testing 62% (elapsed: ~28m, remaining: ~16m) 253/402 tested (203 survived, 13 timed out)
Mutation testing 63% (elapsed: ~28m, remaining: ~16m) 255/402 tested (205 survived, 13 timed out)
Mutation testing 63% (elapsed: ~28m, remaining: ~16m) 256/402 tested (206 survived, 13 timed out)
Mutation testing 64% (elapsed: ~28m, remaining: ~16m) 258/402 tested (208 survived, 13 timed out)
Mutation testing 64% (elapsed: ~28m, remaining: ~15m) 259/402 tested (209 survived, 13 timed out)
Mutation testing 64% (elapsed: ~29m, remaining: ~15m) 261/402 tested (211 survived, 13 timed out)
Mutation testing 65% (elapsed: ~29m, remaining: ~15m) 262/402 tested (212 survived, 13 timed out)
Mutation testing 65% (elapsed: ~29m, remaining: ~15m) 264/402 tested (214 survived, 13 timed out)
Mutation testing 65% (elapsed: ~29m, remaining: ~15m) 265/402 tested (215 survived, 13 timed out)
Mutation testing 66% (elapsed: ~29m, remaining: ~15m) 267/402 tested (217 survived, 13 timed out)
Mutation testing 66% (elapsed: ~29m, remaining: ~14m) 268/402 tested (218 survived, 13 timed out)
Mutation testing 67% (elapsed: ~30m, remaining: ~14m) 270/402 tested (220 survived, 13 timed out)
Mutation testing 67% (elapsed: ~30m, remaining: ~14m) 271/402 tested (221 survived, 13 timed out)
Mutation testing 67% (elapsed: ~30m, remaining: ~14m) 273/402 tested (223 survived, 13 timed out)
Mutation testing 68% (elapsed: ~30m, remaining: ~14m) 274/402 tested (224 survived, 13 timed out)
Mutation testing 68% (elapsed: ~30m, remaining: ~14m) 276/402 tested (226 survived, 13 timed out)
Mutation testing 68% (elapsed: ~30m, remaining: ~13m) 277/402 tested (227 survived, 13 timed out)
Mutation testing 69% (elapsed: ~31m, remaining: ~13m) 279/402 tested (229 survived, 13 timed out)
Mutation testing 69% (elapsed: ~31m, remaining: ~13m) 280/402 tested (230 survived, 13 timed out)
Mutation testing 70% (elapsed: ~31m, remaining: ~13m) 282/402 tested (232 survived, 13 timed out)
Mutation testing 70% (elapsed: ~31m, remaining: ~13m) 283/402 tested (233 survived, 13 timed out)
Mutation testing 70% (elapsed: ~31m, remaining: ~13m) 285/402 tested (235 survived, 13 timed out)
Mutation testing 71% (elapsed: ~31m, remaining: ~12m) 286/402 tested (236 survived, 13 timed out)
Mutation testing 71% (elapsed: ~32m, remaining: ~12m) 288/402 tested (238 survived, 13 timed out)
Mutation testing 71% (elapsed: ~32m, remaining: ~12m) 289/402 tested (239 survived, 13 timed out)
Mutation testing 72% (elapsed: ~32m, remaining: ~12m) 291/402 tested (241 survived, 13 timed out)
Mutation testing 72% (elapsed: ~32m, remaining: ~12m) 292/402 tested (242 survived, 13 timed out)
Mutation testing 73% (elapsed: ~32m, remaining: ~12m) 294/402 tested (244 survived, 13 timed out)
Mutation testing 73% (elapsed: ~32m, remaining: ~11m) 295/402 tested (245 survived, 13 timed out)
Mutation testing 73% (elapsed: ~33m, remaining: ~11m) 297/402 tested (247 survived, 13 timed out)
Mutation testing 74% (elapsed: ~33m, remaining: ~11m) 298/402 tested (248 survived, 13 timed out)
Mutation testing 74% (elapsed: ~33m, remaining: ~11m) 300/402 tested (249 survived, 13 timed out)
Mutation testing 75% (elapsed: ~33m, remaining: ~11m) 302/402 tested (251 survived, 13 timed out)
Mutation testing 75% (elapsed: ~33m, remaining: ~11m) 303/402 tested (252 survived, 13 timed out)
Mutation testing 75% (elapsed: ~33m, remaining: ~10m) 305/402 tested (254 survived, 13 timed out)
Mutation testing 76% (elapsed: ~34m, remaining: ~10m) 306/402 tested (255 survived, 13 timed out)
Mutation testing 76% (elapsed: ~34m, remaining: ~10m) 308/402 tested (257 survived, 13 timed out)
Mutation testing 76% (elapsed: ~34m, remaining: ~10m) 309/402 tested (258 survived, 13 timed out)
Mutation testing 77% (elapsed: ~34m, remaining: ~10m) 311/402 tested (260 survived, 13 timed out)
Mutation testing 77% (elapsed: ~34m, remaining: ~10m) 312/402 tested (261 survived, 13 timed out)
Mutation testing 78% (elapsed: ~34m, remaining: ~9m) 314/402 tested (263 survived, 13 timed out)
Mutation testing 78% (elapsed: ~35m, remaining: ~9m) 315/402 tested (264 survived, 13 timed out)
Mutation testing 78% (elapsed: ~35m, remaining: ~9m) 317/402 tested (266 survived, 13 timed out)
Mutation testing 79% (elapsed: ~35m, remaining: ~9m) 318/402 tested (267 survived, 13 timed out)
Mutation testing 79% (elapsed: ~35m, remaining: ~9m) 320/402 tested (269 survived, 13 timed out)
Mutation testing 79% (elapsed: ~35m, remaining: ~9m) 321/402 tested (270 survived, 13 timed out)
Mutation testing 80% (elapsed: ~35m, remaining: ~8m) 323/402 tested (272 survived, 13 timed out)
Mutation testing 80% (elapsed: ~36m, remaining: ~8m) 324/402 tested (273 survived, 13 timed out)
Mutation testing 81% (elapsed: ~36m, remaining: ~8m) 326/402 tested (275 survived, 13 timed out)
Mutation testing 81% (elapsed: ~36m, remaining: ~8m) 327/402 tested (276 survived, 13 timed out)
Mutation testing 81% (elapsed: ~36m, remaining: ~8m) 329/402 tested (278 survived, 13 timed out)
Mutation testing 82% (elapsed: ~36m, remaining: ~8m) 330/402 tested (279 survived, 13 timed out)
Mutation testing 82% (elapsed: ~36m, remaining: ~7m) 332/402 tested (281 survived, 13 timed out)
Mutation testing 82% (elapsed: ~37m, remaining: ~7m) 333/402 tested (282 survived, 13 timed out)
Mutation testing 83% (elapsed: ~37m, remaining: ~7m) 335/402 tested (284 survived, 13 timed out)
Mutation testing 83% (elapsed: ~37m, remaining: ~7m) 336/402 tested (285 survived, 13 timed out)
Mutation testing 84% (elapsed: ~37m, remaining: ~7m) 338/402 tested (287 survived, 13 timed out)
Mutation testing 84% (elapsed: ~37m, remaining: ~7m) 339/402 tested (288 survived, 13 timed out)
Mutation testing 84% (elapsed: ~37m, remaining: ~6m) 340/402 tested (289 survived, 13 timed out)
Mutation testing 85% (elapsed: ~38m, remaining: ~6m) 342/402 tested (291 survived, 13 timed out)
Mutation testing 85% (elapsed: ~38m, remaining: ~6m) 343/402 tested (292 survived, 13 timed out)
Mutation testing 85% (elapsed: ~38m, remaining: ~6m) 345/402 tested (294 survived, 13 timed out)
Mutation testing 86% (elapsed: ~38m, remaining: ~6m) 346/402 tested (295 survived, 13 timed out)
Mutation testing 86% (elapsed: ~38m, remaining: ~6m) 348/402 tested (297 survived, 13 timed out)
Mutation testing 86% (elapsed: ~38m, remaining: ~5m) 349/402 tested (298 survived, 13 timed out)
Mutation testing 87% (elapsed: ~39m, remaining: ~5m) 351/402 tested (300 survived, 13 timed out)
Mutation testing 87% (elapsed: ~39m, remaining: ~5m) 352/402 tested (301 survived, 13 timed out)
Mutation testing 88% (elapsed: ~39m, remaining: ~5m) 354/402 tested (303 survived, 13 timed out)
Mutation testing 88% (elapsed: ~39m, remaining: ~5m) 355/402 tested (304 survived, 13 timed out)
Mutation testing 88% (elapsed: ~39m, remaining: ~5m) 357/402 tested (306 survived, 13 timed out)
Mutation testing 89% (elapsed: ~39m, remaining: ~4m) 358/402 tested (307 survived, 13 timed out)
Mutation testing 89% (elapsed: ~40m, remaining: ~4m) 360/402 tested (309 survived, 13 timed out)
Mutation testing 89% (elapsed: ~40m, remaining: ~4m) 361/402 tested (310 survived, 13 timed out)
Mutation testing 90% (elapsed: ~40m, remaining: ~4m) 363/402 tested (312 survived, 13 timed out)
Mutation testing 90% (elapsed: ~40m, remaining: ~4m) 364/402 tested (313 survived, 13 timed out)
Mutation testing 91% (elapsed: ~40m, remaining: ~4m) 366/402 tested (315 survived, 13 timed out)
Mutation testing 91% (elapsed: ~40m, remaining: ~3m) 367/402 tested (316 survived, 13 timed out)
Mutation testing 91% (elapsed: ~41m, remaining: ~3m) 369/402 tested (318 survived, 13 timed out)
Mutation testing 92% (elapsed: ~41m, remaining: ~3m) 370/402 tested (319 survived, 13 timed out)
Mutation testing 92% (elapsed: ~41m, remaining: ~3m) 372/402 tested (321 survived, 13 timed out)
Mutation testing 92% (elapsed: ~41m, remaining: ~3m) 373/402 tested (322 survived, 13 timed out)
Mutation testing 93% (elapsed: ~41m, remaining: ~3m) 375/402 tested (324 survived, 13 timed out)
Mutation testing 93% (elapsed: ~41m, remaining: ~2m) 376/402 tested (325 survived, 13 timed out)
Mutation testing 94% (elapsed: ~42m, remaining: ~2m) 378/402 tested (327 survived, 13 timed out)
Mutation testing 94% (elapsed: ~42m, remaining: ~2m) 379/402 tested (328 survived, 13 timed out)
Mutation testing 94% (elapsed: ~42m, remaining: ~2m) 381/402 tested (330 survived, 13 timed out)
Mutation testing 95% (elapsed: ~42m, remaining: ~2m) 382/402 tested (331 survived, 13 timed out)
Mutation testing 95% (elapsed: ~42m, remaining: ~2m) 384/402 tested (333 survived, 13 timed out)
Mutation testing 95% (elapsed: ~42m, remaining: ~1m) 385/402 tested (334 survived, 13 timed out)
Mutation testing 96% (elapsed: ~43m, remaining: ~1m) 387/402 tested (336 survived, 13 timed out)
Mutation testing 96% (elapsed: ~43m, remaining: ~1m) 388/402 tested (337 survived, 13 timed out)
Mutation testing 97% (elapsed: ~43m, remaining: ~1m) 390/402 tested (339 survived, 13 timed out)
Mutation testing 97% (elapsed: ~43m, remaining: ~1m) 391/402 tested (340 survived, 13 timed out)
Mutation testing 97% (elapsed: ~43m, remaining: ~1m) 393/402 tested (342 survived, 13 timed out)
Mutation testing 98% (elapsed: ~43m, remaining: <1m) 394/402 tested (343 survived, 13 timed out)
Mutation testing 98% (elapsed: ~44m, remaining: <1m) 396/402 tested (345 survived, 13 timed out)
Mutation testing 98% (elapsed: ~44m, remaining: <1m) 397/402 tested (346 survived, 13 timed out)
Mutation testing 99% (elapsed: ~44m, remaining: <1m) 399/402 tested (348 survived, 13 timed out)
Mutation testing 99% (elapsed: ~44m, remaining: <1m) 400/402 tested (349 survived, 13 timed out)

All tests
  ✓ All tests (killed 38)

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           bootstrap("q");

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           "promise"("promise", definition);

[Survived] PrecomputedMutator
q.js:39:19
-           bootstrap("promise", definition);
+           bootstrap("q", definition);

[Survived] PrecomputedMutator
q.js:39:30
-           bootstrap("promise", definition);
+           bootstrap("promise", "promise");

[Survived] PrecomputedMutator
q.js:42:16
-       } else if (typeof exports === "object" && typeof module === "object") {
+       } else if (typeof module !== "undefined" && module.exports) {

[Survived] PrecomputedMutator
q.js:47:9
-           define(definition);
+           "q"(definition);

[Survived] PrecomputedMutator
q.js:47:16
-           define(definition);
+           define("q");

[Survived] PrecomputedMutator
q.js:58:16
-       } else if (typeof window !== "undefined" || typeof self !== "undefined") {
+       } else if (typeof global !== "undefined") {

[Survived] PrecomputedMutator
q.js:121:17
-               if (domain) {
+               if (domain && domain.enter()) {

[Survived] PrecomputedMutator
q.js:125:13
-               runSingle(task, domain);
+               runSingle(task);

[Survived] PrecomputedMutator
q.js:128:16
-           while (laterQueue.length) {
+           while (laterQueue.length > 0) {

[Survived] PrecomputedMutator
q.js:147:21
-                   if (domain) {
+                   if (domain.exit()) {

[Survived] PrecomputedMutator
q.js:151:21
-                   if (domain) {
+                   if (domain.exit()) {

[Survived] PrecomputedMutator
q.js:166:13
-           if (domain) {
+           if (domain && domain.exit()) {

[Survived] PrecomputedMutator
q.js:203:27
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(window);

[Survived] PrecomputedMutator
q.js:203:53
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(window, function () {
+     flush();
+   });

[Survived] PrecomputedMutator
q.js:224:13
-               channel.port2.postMessage(0);
+               0(0);

[Survived] PrecomputedMutator
q.js:224:39
-               channel.port2.postMessage(0);
+               channel.port2.postMessage(null);

[Survived] PrecomputedMutator
q.js:227:13
-               setTimeout(flush, 0);
+               setTimeout(flush);

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               setTimeout(flush);

[Survived] PrecomputedMutator
q.js:242:13
-           if (!flushing) {
+           if (laterQueue.length > 0) {

[Survived] PrecomputedMutator
q.js:277:13
-           if (arguments.length === 1) {
+           if (typeof basis === "undefined") {

[Survived] PrecomputedMutator
q.js:285:21
-                   if (++index >= length) {
+                   if (index < this.length) {

[Survived] PrecomputedMutator
q.js:291:16
-           for (; index < length; index++) {
+           for (; index < this.length; index++) {

[Survived] PrecomputedMutator
q.js:293:17
-               if (index in this) {
+               if (this[i] !== void 0) {

[Survived] PrecomputedMutator
q.js:294:25
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis);

[Survived] PrecomputedMutator
q.js:294:34
-                   basis = callback(basis, this[index], index);
+                   basis = callback(value, this[index], index);

[Survived] PrecomputedMutator
q.js:294:41
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this, index);

[Survived] PrecomputedMutator
q.js:304:25
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; this.length; i++) {

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback(basis, this[index], index));

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp));

[Survived] PrecomputedMutator
q.js:318:54
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, undefined, self));

[Survived] PrecomputedMutator
q.js:339:21
-       for (var key in object) {
+       for (var key in Object.keys(this)) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty.call(object, key)) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(this)) {

[Survived] PrecomputedMutator
q.js:340:43
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, "hasOwnProperty")) {

[Survived] PrecomputedMutator
q.js:341:23
-               keys.push(key);
+               keys.push(index);

[Survived] PrecomputedMutator
q.js:350:29
-       return value === Object(value);
+       return value === Object(Object(value));

[Survived] PrecomputedMutator
q.js:358:9
-           object_toString(exception) === "[object StopIteration]" ||
+           "[object StopIteration]"(exception) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:358:25
-           object_toString(exception) === "[object StopIteration]" ||
+           object_toString(StopIteration) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:366:5
-   if (typeof ReturnValue !== "undefined") {
+   if (typeof QReturnValue === "function") {

[Survived] PrecomputedMutator
q.js:388:31
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; p.source; p = p.source) {

[Survived] PrecomputedMutator
q.js:388:36
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; !!p; p.stackCounter) {

[Survived] PrecomputedMutator
q.js:389:17
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+               if (p.stackCounter > 0) {

[Survived] PrecomputedMutator
q.js:390:39
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(undefined, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});

[Survived] PrecomputedMutator
q.js:390:73
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", 0);

[Survived] PrecomputedMutator
q.js:394:24
-           stacks.unshift(error.stack);
+           stacks.unshift("<PLACEHOLDER>");

[Survived] PrecomputedMutator
q.js:396:42
-           var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
+           var concatedStacks = stacks.join("\n");

[Survived] PrecomputedMutator
q.js:397:21
-           var stack = filterStackString(concatedStacks);
+           var stack = concatedStacks(concatedStacks);

[Survived] PrecomputedMutator
q.js:397:39
-           var stack = filterStackString(concatedStacks);
+           var stack = filterStackString(stackString);

[Survived] PrecomputedMutator
q.js:398:9
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error);

[Survived] PrecomputedMutator
q.js:398:47
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", stack);

[Survived] PrecomputedMutator
q.js:408:13
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+           if (!isNodeFrame(stackLine) && !isInternalFrame(stackLine)) {

[Survived] PrecomputedMutator
q.js:416:30
-       return stackLine.indexOf("(module.js:") !== -1 ||
+       return stackLine.indexOf("node.js") !== -1 ||

[Survived] PrecomputedMutator
q.js:417:30
-              stackLine.indexOf("(node.js:") !== -1;
+              stackLine.indexOf("node.js") !== -1;

[Survived] PrecomputedMutator
q.js:425:30
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], i(attempt1[2])];

[Survived] PrecomputedMutator
q.js:425:37
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], Number(lineNumber)];

[Survived] PrecomputedMutator
q.js:435:42
-       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
+       var attempt3 = /.*@(.+):(\d+)$/.exec(firstLine);

[Survived] PrecomputedMutator
q.js:436:9
-       if (attempt3) {
+       if (attempt3[1] !== undefined) {

[Survived] PrecomputedMutator
q.js:437:30
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], lineNumber(attempt3[2])];

[Survived] PrecomputedMutator
q.js:437:37
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], Number(lineNumber)];

[Survived] PrecomputedMutator
q.js:444:9
-       if (!fileNameAndLineNumber) {
+       if (fileName.indexOf("q.js") !== -1) {

[Survived] PrecomputedMutator
q.js:459:9
-       if (!hasStacks) {
+       if (!Q.longStackSupport) {

[Survived] PrecomputedMutator
q.js:467:42
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[0].indexOf("qFileName") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:480:13
-           if (typeof console !== "undefined" &&
-               typeof console.warn === "function") {
+           if (Q.longStackSupport) {

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.apply(this);

[Survived] PrecomputedMutator
q.js:485:31
-           return callback.apply(callback, arguments);
+           return callback.apply(Q.defer(), arguments);

[Survived] PrecomputedMutator
q.js:485:41
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, array_slice(arguments, 3));

[Survived] PrecomputedMutator
q.js:506:9
-       if (isPromiseAlike(value)) {
+       if (value !== null && typeof value === "object" && typeof value.then === "function") {

[Survived] PrecomputedMutator
q.js:558:34
-       var deferred = object_create(defer.prototype);
+       var deferred = object_create(Promise.prototype);

[Survived] PrecomputedMutator
q.js:565:17
-               if (op === "when" && operands[1]) { // progress operand
+               if (operands[0] === "progress") { // progress operand

[Survived] PrecomputedMutator
q.js:577:13
-           if (messages) {
+           if (resolvedPromise) {

[Survived] PrecomputedMutator
q.js:580:27
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = resolvedPromise(resolvedPromise);

[Survived] PrecomputedMutator
q.js:580:34
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearer(value);

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (error == null) {

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (arguments[2](nearerValue)) {

[Survived] PrecomputedMutator
q.js:581:23
-           if (isPromise(nearerValue)) {
+           if (isPromise(resolvedPromise)) {

[Survived] PrecomputedMutator
q.js:588:13
-           if (!resolvedPromise) {
+           if (messages.length === 0) {

[Survived] PrecomputedMutator
q.js:594:9
-       if (Q.longStackSupport && hasStacks) {
+       if (Q.longStackSupport) {

[Survived] PrecomputedMutator
q.js:604:63
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.indexOf("Error\n") + 1);

[Survived] PrecomputedMutator
q.js:616:13
-           if (Q.longStackSupport && hasStacks) {
+           if (resolvedPromise.stackCounter === longStackCounter) {

[Survived] PrecomputedMutator
q.js:624:50
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(message, message);

[Survived] PrecomputedMutator
q.js:638:18
-           become(Q(value));
+           become(Q(Q(value)));

[Survived] PrecomputedMutator
q.js:646:16
-           become(fulfill(value));
+           become(Q(value));

[Survived] PrecomputedMutator
q.js:656:13
-           if (resolvedPromise) {
+           if (progressListeners.length > 0) {

[Survived] PrecomputedMutator
q.js:678:13
-           if (error) {
+           if (error != null) {

[Survived] PrecomputedMutator
q.js:679:25
-               self.reject(error);
+               self.reject(reason);

[Survived] PrecomputedMutator
q.js:680:20
-           } else if (arguments.length > 2) {
+           } else if (array_slice(arguments, 2).length === 0) {

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(value);

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(array_slice(arguments, 2)));

[Survived] PrecomputedMutator
q.js:681:38
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(array_slice(arguments, 1), 1));

[Survived] PrecomputedMutator
q.js:681:49
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, array_slice(arguments, 2)));

[Survived] PrecomputedMutator
q.js:697:9
-       if (typeof resolver !== "function") {
+       if (typeof resolver === "function") {

[Survived] PrecomputedMutator
q.js:702:9
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve);

[Survived] PrecomputedMutator
q.js:702:53
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.reject, progressListeners);

[Survived] PrecomputedMutator
q.js:739:14
-       return Q(x).join(y);
+       return Q(deferred.promise).join(y);

[Survived] PrecomputedMutator
q.js:743:12
-       return Q([this, that]).spread(function (x, y) {
+       return this([this, that]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:743:14
-       return Q([this, that]).spread(function (x, y) {
+       return Q(x, y).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:744:13
-           if (x === y) {
+           if (Object.is(x, y)) {

[Survived] PrecomputedMutator
q.js:773:12
-       return this.then(Q.race);
+       return deferred.promise(Q.race);

[Survived] PrecomputedMutator
q.js:773:22
-       return this.then(Q.race);
+       return this.then(function (value) {
+     if (!done) {
+       done = true;
+       deferred.resolve(_fulfilled(value));
+     }
+   });

[Survived] PrecomputedMutator
q.js:807:17
-               if (descriptor[op]) {
+               if (descriptor.hasOwnProperty(op)) {

[Survived] PrecomputedMutator
q.js:810:26
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise);

[Survived] PrecomputedMutator
q.js:810:49
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, "when", args);

[Survived] PrecomputedMutator
q.js:810:53
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op, resolve);

[Survived] PrecomputedMutator
q.js:825:13
-           if (inspected.state === "rejected") {
+           if (inspected.state === "fulfilled") {

[Survived] PrecomputedMutator
q.js:862:32
-               makeStackTraceLong(exception, self);
+               makeStackTraceLong(Q.onerror, self);

[Survived] PrecomputedMutator
q.js:862:43
-               makeStackTraceLong(exception, self);
+               makeStackTraceLong(exception, "<PLACEHOLDER>");

[Survived] PrecomputedMutator
q.js:902:17
-               if (Q.onerror) {
+               if (Q.onerror(e)) {

[Survived] PrecomputedMutator
q.js:909:13
-           if (!threw) {
+           if (newValue !== undefined) {

[Survived] PrecomputedMutator
q.js:910:29
-               deferred.notify(newValue);
+               deferred.notify(value);

[Survived] PrecomputedMutator
q.js:918:14
-       return Q(promise).tap(callback);
+       return Q(value).tap(callback);

[Survived] PrecomputedMutator
q.js:918:27
-       return Q(promise).tap(callback);
+       return Q(promise).tap(function (value) {
+     return value;
+   });

[Survived] PrecomputedMutator
q.js:934:18
-       callback = Q(callback);
+       callback = Q(value);

[Survived] PrecomputedMutator
q.js:937:16
-           return callback.fcall(value).thenResolve(value);
+           return value(value).thenResolve(value);

[Survived] PrecomputedMutator
q.js:959:12
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q.when(value).then(fulfilled, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:26
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(function (value) {
+     return value;
+   }, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:37
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, function (exception) {
+     if (Q.onerror) {
+       Q.onerror(exception);
+     } else {
+       throw exception;
+     }
+   }, progressed);

[Survived] PrecomputedMutator
q.js:963:22
-       return this.then(function () { return value; });
+       return this.then(function (value) {
+     return value;
+   });

[Survived] PrecomputedMutator
q.js:967:12
-       return Q(promise).thenResolve(value);
+       return value(promise).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:14
-       return Q(promise).thenResolve(value);
+       return Q(value).thenResolve(value);

[Survived] PrecomputedMutator
q.js:971:22
-       return this.then(function () { throw reason; });
+       return this.then(function (reason) {
+     return Q.reject(reason);
+   });

[Survived] PrecomputedMutator
q.js:975:12
-       return Q(promise).thenReject(reason);
+       return unhandledRejections(promise).thenReject(reason);

[Survived] PrecomputedMutator
q.js:992:25
-           var inspected = value.inspect();
+           var inspected = inspected();

[Survived] PrecomputedMutator
q.js:993:13
-           if (inspected.state === "fulfilled") {
+           if (inspected.state === "rejected") {

[Survived] PrecomputedMutator
q.js:1020:22
-       return isPromise(object) && object.inspect().state === "pending";
+       return isPromise(value) && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1020:33
-       return isPromise(object) && object.inspect().state === "pending";
+       return isPromise(object) && inspected.state === "pending"().state === "pending";

[Survived] PrecomputedMutator
q.js:1033:34
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !isPromise(object) || inspected.state === "fulfilled"().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1045:33
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isPromise(object) && inspected.state === "rejected"().state === "rejected";

[Survived] PrecomputedMutator
q.js:1073:9
-       if (!trackUnhandledRejections) {
+       if (unhandledRejections.length === 0) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(reportedUnhandledRejections, promise) === -1) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(reportedUnhandledRejections) !== -1) {

[Survived] PrecomputedMutator
q.js:1079:17
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection");

[Survived] PrecomputedMutator
q.js:1086:9
-       if (reason && typeof reason.stack !== "undefined") {
+       if (reason instanceof Error) {

[Survived] PrecomputedMutator
q.js:1087:31
-           unhandledReasons.push(reason.stack);
+           unhandledReasons.push(reason);

[Survived] PrecomputedMutator
q.js:1089:31
-           unhandledReasons.push("(no stack) " + reason);
+           unhandledReasons.push(reason);

[Survived] PrecomputedMutator
q.js:1098:14
-       var at = array_indexOf(unhandledRejections, promise);
+       var at = array_indexOf(reportedUnhandledRejections);

[Survived] PrecomputedMutator
q.js:1102:32
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections);

[Survived] PrecomputedMutator
q.js:1104:21
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("unhandledRejectionHandled");

[Survived] PrecomputedMutator
q.js:1104:34
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("unhandledRejection", unhandledReasons[at], promise);

[Survived] PrecomputedMutator
q.js:1104:54
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", reportedUnhandledRejections.splice(atReport, 1), promise);

[Survived] PrecomputedMutator
q.js:1105:21
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport);

[Survived] PrecomputedMutator
q.js:1105:66
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, atReport);

[Survived] PrecomputedMutator
q.js:1109:9
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at);

[Survived] PrecomputedMutator
q.js:1109:40
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, at);

[Survived] PrecomputedMutator
q.js:1110:9
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at);

[Survived] PrecomputedMutator
q.js:1110:37
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, at);

[Survived] PrecomputedMutator
q.js:1140:34
-                   untrackRejection(this);
+                   untrackRejection(rejection);

[Survived] PrecomputedMutator
q.js:1151:5
-       trackRejection(rejection, reason);
+       trackRejection(rejection);

[Survived] PrecomputedMutator
q.js:1178:17
-               if (name === null || name === void 0) {
+               if (typeof name === "undefined") {

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.apply(thisp);

[Survived] PrecomputedMutator
q.js:1179:36
-                   return value.apply(void 0, args);
+                   return value.apply(this, args);

[Survived] PrecomputedMutator
q.js:1181:24
-                   return value[name].apply(value, args);
+                   return value[name].apply(value);

[Survived] PrecomputedMutator
q.js:1181:42
-                   return value[name].apply(value, args);
+                   return value[name].apply(this, args);

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.apply(thisp);

[Survived] PrecomputedMutator
q.js:1185:32
-               return value.apply(thisp, args);
+               return value.apply(this, args);

[Survived] PrecomputedMutator
q.js:1204:61
-               promise.then(deferred.resolve, deferred.reject, deferred.notify);
+               promise.then(deferred.resolve, deferred.reject, function () {
+     return this;
+   });

[Survived] PrecomputedMutator
q.js:1226:16
-           return dispatch(object, op, args);
+           return dispatch(object);

[Survived] PrecomputedMutator
q.js:1226:16
-           return dispatch(object, op, args);
+           return object[name](object, op, args);

[Survived] PrecomputedMutator
q.js:1226:33
-           return dispatch(object, op, args);
+           return dispatch(object, "get", args);

[Survived] PrecomputedMutator
q.js:1228:16
-           return Q(object).inspect();
+           return object(object).inspect();

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return value(value).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:28
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(function (value) {
+     return value;
+   }, rejected);

[Survived] PrecomputedMutator
q.js:1248:12
-       return this.all().then(function (array) {
+       return array().then(function (array) {

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(thisp);

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return array(void 0, array);

[Survived] PrecomputedMutator
q.js:1249:32
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(thisp, array);

[Survived] PrecomputedMutator
q.js:1295:17
-               if (typeof StopIteration === "undefined") {
+               if (generator.constructor.name === "GeneratorFunction") {

[Survived] PrecomputedMutator
q.js:1298:30
-                       result = generator[verb](arg);
+                       result = result.value(arg);

[Survived] PrecomputedMutator
q.js:1305:28
-                       return when(result.value, callback, errback);
+                       return when(result);

[Survived] PrecomputedMutator
q.js:1305:33
-                       return when(result.value, callback, errback);
+                       return when(result, callback, errback);

[Survived] PrecomputedMutator
q.js:1305:47
-                       return when(result.value, callback, errback);
+                       return when(result.value, reject, errback);

[Survived] PrecomputedMutator
q.js:1311:30
-                       result = generator[verb](arg);
+                       result = result.value(arg);

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (exception instanceof QReturnValue) {

[Survived] PrecomputedMutator
q.js:1314:34
-                           return Q(exception.value);
+                           return Q(result.value);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return when(result.value);

[Survived] PrecomputedMutator
q.js:1319:29
-                   return when(result, callback, errback);
+                   return when(result.value, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:37
-                   return when(result, callback, errback);
+                   return when(result, function (result) {
+     return result;
+   }, errback);

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(this);

[Survived] PrecomputedMutator
q.js:1323:24
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(this);

[Survived] PrecomputedMutator
q.js:1323:39
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(this, "next");

[Survived] PrecomputedMutator
q.js:1324:23
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind("throw");

[Survived] PrecomputedMutator
q.js:1324:38
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(errback, "throw");

[Survived] PrecomputedMutator
q.js:1338:20
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.async(makeGenerator.apply(this, arguments))());

[Survived] PrecomputedMutator
q.js:1389:34
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, all(args)], function (self, args) {

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.apply(self);

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op);

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(op);

[Survived] PrecomputedMutator
q.js:1411:30
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(self, op, args);

[Survived] PrecomputedMutator
q.js:1411:48
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, deferred.resolve, args);

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("get");

[Survived] PrecomputedMutator
q.js:1427:12
-       return this.dispatch("get", [key]);
+       return this.dispatch("get");

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set");

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Promise.prototype(object).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1442:12
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set");

[Survived] PrecomputedMutator
q.js:1442:33
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return deferred.resolve(object).dispatch("delete", [key]);

[Survived] PrecomputedMutator
q.js:1458:12
-       return this.dispatch("delete", [key]);
+       return deferred.resolve("delete", [key]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post");

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q.post("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return this(object).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:14
-       return Q(object).dispatch("post", [name, args]);
+       return Q(self).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1481:12
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post");

[Survived] PrecomputedMutator
q.js:1481:34
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("invoke");

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q.post("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return promise(object).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:14
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(this).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:31
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("invoke", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:39
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1494:46
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1500:12
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post");

[Survived] PrecomputedMutator
q.js:1500:34
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:1500:41
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1500:64
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, arguments.length - 1)]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("apply");

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return promise(object).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:14
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(promise).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1513:12
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply");

[Survived] PrecomputedMutator
q.js:1513:35
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [void 0, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("post");

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return promise(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:14
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(this).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:31
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("call", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:40
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1523:49
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1527:12
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply");

[Survived] PrecomputedMutator
q.js:1527:35
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1537:19
-       var promise = Q(object);
+       var promise = promise(object);

[Survived] PrecomputedMutator
q.js:1537:21
-       var promise = Q(object);
+       var promise = Q(promise);

[Survived] PrecomputedMutator
q.js:1538:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(args.concat(array_slice(arguments)));

[Survived] PrecomputedMutator
q.js:1538:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, args.length);

[Survived] PrecomputedMutator
q.js:1542:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 1))

[Survived] PrecomputedMutator
q.js:1548:28
-       var args = array_slice(arguments);
+       var args = array_slice(args);

[Survived] PrecomputedMutator
q.js:1552:25
-               args.concat(array_slice(arguments))
+               args.concat(arguments(arguments))

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys");

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return promise(object).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:39
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys", [].slice.call(this));

[Survived] PrecomputedMutator
q.js:1568:12
-       return this.dispatch("keys", []);
+       return this.dispatch("keys");

[Survived] PrecomputedMutator
q.js:1568:12
-       return this.dispatch("keys", []);
+       return deferred.promise("keys", []);

[Survived] PrecomputedMutator
q.js:1568:34
-       return this.dispatch("keys", []);
+       return this.dispatch("keys", void 0);

[Survived] PrecomputedMutator
q.js:1588:17
-                   isPromise(promise) &&
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   promise.isFulfilled()

[Survived] PrecomputedMutator
q.js:1589:29
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   (snapshot = promise.value()).state === "fulfilled"

[Survived] PrecomputedMutator
q.js:1598:29
-                           if (--pendingCount === 0) {
+                           if (pendingCount === 0) {

[Survived] PrecomputedMutator
q.js:1604:41
-                           deferred.notify({ index: index, value: progress });
+                           deferred.notify(progress);

[Survived] PrecomputedMutator
q.js:1617:12
-       return all(this);
+       return this(this);

[Survived] PrecomputedMutator
q.js:1641:36
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, deferred.reject, onProgress);

[Survived] PrecomputedMutator
q.js:1668:12
-       return any(this);
+       return deferred.promise(this);

[Survived] PrecomputedMutator
q.js:1668:16
-       return any(this);
+       return any(promises);

[Survived] PrecomputedMutator
q.js:1680:27
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(Q.allSettled, "allResolved", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:40
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allSettled", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:55
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allResolved", "allResolved");

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_map(promise);

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = promises(promises, Q);

[Survived] PrecomputedMutator
q.js:1683:30
-           promises = array_map(promises, Q);
+           promises = array_map(promise, Q);

[Survived] PrecomputedMutator
q.js:1683:40
-           promises = array_map(promises, Q);
+           promises = array_map(promises, function (promise) {
+     return promise.inspect();
+   });

[Survived] PrecomputedMutator
q.js:1685:20
-               return when(promise, noop, noop);
+               return when(promise);

[Survived] PrecomputedMutator
q.js:1685:40
-               return when(promise, noop, noop);
+               return when(promise, noop, function (err) {
+     pendingCount--;
+     if (pendingCount === 0) {
+       var rejection = err || new Error("" + err);
+       rejection.message = "Q can't get fulfillment value from any promise, all " + "promises were rejected. Last error message: " + rejection.message;
+       deferred.reject(rejection);
+     }
+   });

[Survived] PrecomputedMutator
q.js:1693:24
-       return allResolved(this);
+       return allResolved(promises);

[Survived] PrecomputedMutator
q.js:1714:23
-               promise = Q(promise);
+               promise = promise(promise);

[Survived] PrecomputedMutator
q.js:1718:33
-               return promise.then(regardless, regardless);
+               return promise.then(function (value) {
+     return promise.inspect();
+   }, regardless);

[Survived] PrecomputedMutator
q.js:1718:45
-               return promise.then(regardless, regardless);
+               return promise.then(regardless, function (err) {
+     deferred.reject(err);
+   });

[Survived] PrecomputedMutator
q.js:1734:14
-       return Q(object).then(void 0, rejected);
+       return Q(promise).then(void 0, rejected);

[Survived] PrecomputedMutator
q.js:1734:27
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(function (rejection) {
+     throw rejection;
+   }, rejected);

[Survived] PrecomputedMutator
q.js:1734:35
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(void 0, function (err) {
+     deferred.reject(err);
+   });

[Survived] PrecomputedMutator
q.js:1739:22
-       return this.then(void 0, rejected);
+       return this.then(function (promise) {
+     return promise.then(noop, noop);
+   }, rejected);

[Survived] PrecomputedMutator
q.js:1752:12
-       return Q(object).then(void 0, void 0, progressed);
+       return this(void 0, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:27
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(function (promise) {
+     return promise.inspect();
+   }, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:35
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, function (promise) {
+     return promise.inspect();
+   }, progressed);

[Survived] PrecomputedMutator
q.js:1752:43
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, void 0, function (value) {
+     return promise.inspect();
+   });

[Survived] PrecomputedMutator
q.js:1756:22
-       return this.then(void 0, void 0, progressed);
+       return this.then(function (promise) {
+     return promise.inspect();
+   }, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1756:30
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, function (value) {
+     return value;
+   }, progressed);

[Survived] PrecomputedMutator
q.js:1756:38
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, void 0, promise);

[Survived] PrecomputedMutator
q.js:1772:12
-       return Q(object)["finally"](callback);
+       return promise["finally"](object)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1777:9
-       if (!callback || typeof callback.apply !== "function") {
+       if (promise.isPending()) {

[Survived] PrecomputedMutator
q.js:1780:18
-       callback = Q(callback);
+       callback = Q(promise);

[Survived] PrecomputedMutator
q.js:1787:16
-           return callback.fcall().then(function () {
+           return this().then(function () {

[Survived] PrecomputedMutator
q.js:1800:12
-       return Q(object).done(fulfilled, rejected, progress);
+       return deferred.resolve(object).done(fulfilled, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:27
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(function (value) {
+     return value;
+   }, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:38
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, function (value) {
+     return value;
+   }, progress);

[Survived] PrecomputedMutator
q.js:1808:13
-               makeStackTraceLong(error, promise);
+               makeStackTraceLong(error);

[Survived] PrecomputedMutator
q.js:1808:39
-               makeStackTraceLong(error, promise);
+               makeStackTraceLong(error, Q.onerror);

[Survived] PrecomputedMutator
q.js:1809:17
-               if (Q.onerror) {
+               if (Q.onerror !== void 0) {

[Survived] PrecomputedMutator
q.js:1819:9
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled) :

[Survived] PrecomputedMutator
q.js:1819:9
-           this.then(fulfilled, rejected, progress) :
+           this(fulfilled, rejected, progress) :

[Survived] PrecomputedMutator
q.js:1819:19
-           this.then(fulfilled, rejected, progress) :
+           this.then(function () {
+     return value;
+   }, rejected, progress) :

[Survived] PrecomputedMutator
q.js:1819:30
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, function (reason) {
+     throw reason;
+   }, progress) :

[Survived] PrecomputedMutator
q.js:1826:18
-       promise.then(void 0, onUnhandledError);
+       promise.then(function () {
+     throw new Error("Unhandled rejection");
+   }, onUnhandledError);

[Survived] PrecomputedMutator
q.js:1845:13
-           if (!error || "string" === typeof error) {
+           if (error === null) {

[Survived] PrecomputedMutator
q.js:1873:9
-       if (timeout === void 0) {
+       if (typeof object === "number") {

[Survived] PrecomputedMutator
q.js:1877:12
-       return Q(object).delay(timeout);
+       return this(object).delay(timeout);

[Survived] PrecomputedMutator
q.js:1882:24
-           var deferred = defer();
+           var deferred = deferred();

[Survived] PrecomputedMutator
q.js:1900:12
-       return Q(callback).nfapply(args);
+       return this(callback).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:14
-       return Q(callback).nfapply(args);
+       return Q(this).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1904:20
-       var deferred = defer();
+       var deferred = deferred();

[Survived] PrecomputedMutator
q.js:1905:20
-       var nodeArgs = array_slice(args);
+       var nodeArgs = args(args);

[Survived] PrecomputedMutator
q.js:1906:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1907:5
-       this.fapply(nodeArgs).fail(deferred.reject);
+       deferred.resolve(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1921:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(args);

[Survived] PrecomputedMutator
q.js:1921:16
-       var args = array_slice(arguments, 1);
+       var args = args(arguments, 1);

[Survived] PrecomputedMutator
q.js:1921:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(args, 1);

[Survived] PrecomputedMutator
q.js:1922:14
-       return Q(callback).nfapply(args);
+       return Q(this).nfapply(args);

[Survived] PrecomputedMutator
q.js:1926:32
-       var nodeArgs = array_slice(arguments);
+       var nodeArgs = array_slice(array_slice(arguments));

[Survived] PrecomputedMutator
q.js:1928:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1943:9
-       if (callback === undefined) {
+       if (typeof callback === "function") {

[Survived] PrecomputedMutator
q.js:1946:20
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(args);

[Survived] PrecomputedMutator
q.js:1946:32
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(args, 1);

[Survived] PrecomputedMutator
q.js:1948:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(args);

[Survived] PrecomputedMutator
q.js:1951:11
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(this).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1958:16
-       var args = array_slice(arguments);
+       var args = args(arguments);

[Survived] PrecomputedMutator
q.js:1958:28
-       var args = array_slice(arguments);
+       var args = array_slice(args);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(this);

[Survived] PrecomputedMutator
q.js:1960:30
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(this, args);

[Survived] PrecomputedMutator
q.js:1964:20
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(args);

[Survived] PrecomputedMutator
q.js:1964:32
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(array_slice(arguments, 2), 2);

[Survived] PrecomputedMutator
q.js:1967:24
-           var deferred = defer();
+           var deferred = deferred();

[Survived] PrecomputedMutator
q.js:1968:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1970:20
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp);

[Survived] PrecomputedMutator
q.js:1970:42
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, nodeArgs);

[Survived] PrecomputedMutator
q.js:1972:11
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(this).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1978:16
-       var args = array_slice(arguments, 0);
+       var args = array_slice(args.slice(1));

[Survived] PrecomputedMutator
q.js:1978:28
-       var args = array_slice(arguments, 0);
+       var args = array_slice(this, 0);

[Survived] PrecomputedMutator
q.js:1978:39
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments, thisp);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(this);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Promise.prototype.denodeify(void 0, args);

[Survived] PrecomputedMutator
q.js:1994:12
-       return Q(object).npost(name, args);
+       return Q(object).npost(object);

[Survived] PrecomputedMutator
q.js:1994:28
-       return Q(object).npost(name, args);
+       return Q(object).npost(thisp, args);

[Survived] PrecomputedMutator
q.js:1994:34
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:1999:20
-       var nodeArgs = array_slice(args || []);
+       var nodeArgs = args || [](args || []);

[Survived] PrecomputedMutator
q.js:1999:32
-       var nodeArgs = array_slice(args || []);
+       var nodeArgs = array_slice(args);

[Survived] PrecomputedMutator
q.js:2002:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [this, name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2019:20
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:2019:32
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(array_slice(arguments, 2), 2);

[Survived] PrecomputedMutator
q.js:2019:43
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:2021:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.resolve);

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("invoke").fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:7
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(this).dispatch("post", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:24
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("dispatch", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2029:20
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:2029:32
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(array_slice(arguments, 1), 1);

[Survived] PrecomputedMutator
q.js:2029:43
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, nodeArgs.length - 1);

[Survived] PrecomputedMutator
q.js:2030:20
-       var deferred = defer();
+       var deferred = deferred();

[Survived] PrecomputedMutator
q.js:2032:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("invoke").fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("invoke", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2048:12
-       return Q(object).nodeify(nodeback);
+       return this(object).nodeify(nodeback);

[Survived] PrecomputedMutator
q.js:2052:9
-       if (nodeback) {
+       if (typeof nodeback === "function") {

[Survived] PrecomputedMutator
q.js:2055:17
-                   nodeback(null, value);
+                   nodeback(value);

[Survived] PrecomputedMutator
queue.js:19:28
-               ends.promise = ends.promise.get("tail");
+               ends.promise = next.promise("tail");

[Survived] PrecomputedMutator
queue.js:21:32
-                   closed.resolve(error);
+                   closed.resolve(Q.reject(error));

[Survived] PrecomputedMutator
queue.js:28:30
-               var end = {head: Q.reject(error)};
+               var end = {head: error(error)};

Ran 0.97 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   12.69 |       38 |        13 |        351 |        0 |        0 |
 q.js     |   12.78 |       38 |        13 |        348 |        0 |        0 |
 queue.js |    0.00 |        0 |         0 |          3 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m13:14:51 (2886) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/q/reports/mutation/mutation.html
[32m13:14:51 (2886) INFO MutationTestExecutor[39m Done in 44 minutes 50 seconds.

real	44m51.656s
user	7m59.643s
sys	1m22.663s
