*** using precomputed mutations ***
[32m14:22:08 (2378) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m14:22:08 (2378) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m14:22:08 (2378) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m14:22:08 (2378) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m14:22:08 (2378) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m14:22:08 (2378) INFO ProjectReader[39m Found 1 of 231 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 87 mutants from MUTATION_TESTING/template-full_codellama-13b-instruct_0.0/mutants.json ***
Mutant 0 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.high
Mutant 1 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.medium
Mutant 2 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.low
Mutant 3 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions,
  archiverOptions: {}
}
Mutant 4 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions,
  archiverOptions: {
    gzip: false
  }
}
Mutant 5 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.medium
Mutant 6 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.low
Mutant 7 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with !zipAFolderOptions?.customWriteStream || targetFilePath
Mutant 8 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with zipAFolderOptions?.customWriteStream && targetFilePath
Mutant 9 in ZipAFolder.ts: path.dirname replaced with path.basename
Mutant 10 in ZipAFolder.ts: path.dirname replaced with path.join
Mutant 11 in ZipAFolder.ts: path.dirname replaced with path.resolve
Mutant 12 in ZipAFolder.ts: targetFilePath replaced with targetFilePath + 'test'
Mutant 13 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.toUpperCase()
Mutant 14 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.replace('test', 'test2')
Mutant 15 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath !== src
Mutant 16 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath === src.toLowerCase()
Mutant 17 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.startsWith(src)
Mutant 18 in ZipAFolder.ts: !isGlob(src) replaced with isGlob(src)
Mutant 19 in ZipAFolder.ts: !isGlob(src) replaced with src.includes('*')
Mutant 20 in ZipAFolder.ts: src replaced with src.toLowerCase()
Mutant 21 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 22 in ZipAFolder.ts: src replaced with src.replace(/[a-z]/g, 'A')
Mutant 23 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.W_OK)
Mutant 24 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.R_OK | fs.constants.W_OK)
Mutant 25 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK)
Mutant 26 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 27 in ZipAFolder.ts: src replaced with src.toLowerCase()
Mutant 28 in ZipAFolder.ts: src replaced with src.replace(/ /g, '')
Mutant 29 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.W_OK
Mutant 30 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.R_OK | fs.constants.W_OK
Mutant 31 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.R_OK & fs.constants.W_OK
Mutant 32 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.R_OK)
Mutant 33 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.W_OK)
Mutant 34 in ZipAFolder.ts: targetBasePath replaced with targetBasePath + '/'
Mutant 35 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.toLowerCase()
Mutant 36 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.replace(/ /g, '')
Mutant 37 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.R_OK & fs.constants.W_OK
Mutant 38 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK
Mutant 39 in ZipAFolder.ts: targetFilePath replaced with targetFilePath + 'test'
Mutant 40 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.toUpperCase()
Mutant 41 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.replace(/[a-z]/g, 'A')
Mutant 42 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions?.customWriteStream
Mutant 43 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions?.customWriteStream || output
Mutant 44 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions?.customWriteStream ?? output
Mutant 45 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, archiverOptions || {
  zlib: {
    level: 9
  }
})
Mutant 46 in ZipAFolder.ts: format replaced with format.toLowerCase()
Mutant 47 in ZipAFolder.ts: format replaced with format.toUpperCase()
Mutant 48 in ZipAFolder.ts: format replaced with format.replace('zip', 'tar')
Mutant 49 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || {
  gzip: true
}
Mutant 50 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || {
  zlib: {
    level: 9
  }
}
Mutant 51 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || {
  store: true
}
Mutant 52 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('end', resolve)
Mutant 53 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('finish', resolve)
Mutant 54 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('error', reject)
Mutant 55 in ZipAFolder.ts: 'close' replaced with 'end'
Mutant 56 in ZipAFolder.ts: 'close' replaced with 'finish'
Mutant 57 in ZipAFolder.ts: 'close' replaced with 'error'
Mutant 58 in ZipAFolder.ts: resolve replaced with reject
Mutant 59 in ZipAFolder.ts: resolve replaced with resolve(null)
Mutant 60 in ZipAFolder.ts: resolve replaced with resolve(undefined)
Mutant 61 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('close', resolve)
Mutant 62 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('finish', resolve)
Mutant 63 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('end', resolve)
Mutant 64 in ZipAFolder.ts: 'error' replaced with 'close'
Mutant 65 in ZipAFolder.ts: 'error' replaced with 'finish'
Mutant 66 in ZipAFolder.ts: reject replaced with console.log('Error in zip/tar function')
Mutant 67 in ZipAFolder.ts: reject replaced with output.end()
Mutant 68 in ZipAFolder.ts: isGlob(src) replaced with isGlob(src) || true
Mutant 69 in ZipAFolder.ts: isGlob(src) replaced with isGlob(src) && false
Mutant 70 in ZipAFolder.ts: src replaced with src.split(',')
Mutant 71 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 72 in ZipAFolder.ts: src replaced with src.length
Mutant 73 in ZipAFolder.ts: ',' replaced with '*'
Mutant 74 in ZipAFolder.ts: ',' replaced with '?'
Mutant 75 in ZipAFolder.ts: globPart replaced with globPart.toLowerCase()
Mutant 76 in ZipAFolder.ts: globPart replaced with globPart.toUpperCase()
Mutant 77 in ZipAFolder.ts: globPart replaced with globPart.replace(/[a-z]/g, 'A')
Mutant 78 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, true)
Mutant 79 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, null)
Mutant 80 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, undefined)
Mutant 81 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 82 in ZipAFolder.ts: src replaced with src.toLowerCase()
Mutant 83 in ZipAFolder.ts: src replaced with src.split(',')
Mutant 84 in ZipAFolder.ts: false replaced with true
Mutant 85 in ZipAFolder.ts: false replaced with undefined
Mutant 86 in ZipAFolder.ts: false replaced with null
[32m14:22:08 (2378) INFO Instrumenter[39m Instrumented 1 source file(s) with 87 mutant(s)
[32m14:22:09 (2378) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m14:22:10 (2378) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m14:22:10 (2378) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m14:22:16 (2378) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 5 seconds (net 5964 ms, overhead 1 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~14m) 1/87 tested (0 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~9m) 3/87 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~8m) 5/87 tested (4 survived, 0 timed out)
Mutation testing 8% (elapsed: <1m, remaining: ~7m) 7/87 tested (5 survived, 0 timed out)
Mutation testing 11% (elapsed: <1m, remaining: ~6m) 10/87 tested (5 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~6m) 12/87 tested (5 survived, 0 timed out)
Mutation testing 16% (elapsed: ~1m, remaining: ~6m) 14/87 tested (6 survived, 0 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~5m) 16/87 tested (6 survived, 0 timed out)
Mutation testing 20% (elapsed: ~1m, remaining: ~5m) 18/87 tested (8 survived, 0 timed out)
Mutation testing 22% (elapsed: ~1m, remaining: ~5m) 20/87 tested (8 survived, 0 timed out)
Mutation testing 25% (elapsed: ~1m, remaining: ~5m) 22/87 tested (10 survived, 0 timed out)
Mutation testing 27% (elapsed: ~2m, remaining: ~5m) 24/87 tested (12 survived, 0 timed out)
Mutation testing 29% (elapsed: ~2m, remaining: ~5m) 26/87 tested (14 survived, 0 timed out)
Mutation testing 32% (elapsed: ~2m, remaining: ~4m) 28/87 tested (15 survived, 0 timed out)
Mutation testing 34% (elapsed: ~2m, remaining: ~4m) 30/87 tested (17 survived, 0 timed out)
Mutation testing 36% (elapsed: ~2m, remaining: ~4m) 32/87 tested (19 survived, 0 timed out)
Mutation testing 37% (elapsed: ~2m, remaining: ~4m) 33/87 tested (20 survived, 0 timed out)
Mutation testing 40% (elapsed: ~3m, remaining: ~4m) 35/87 tested (22 survived, 0 timed out)
Mutation testing 42% (elapsed: ~3m, remaining: ~4m) 37/87 tested (24 survived, 0 timed out)
Mutation testing 44% (elapsed: ~3m, remaining: ~4m) 39/87 tested (26 survived, 0 timed out)
Mutation testing 47% (elapsed: ~3m, remaining: ~3m) 41/87 tested (27 survived, 0 timed out)
Mutation testing 49% (elapsed: ~3m, remaining: ~3m) 43/87 tested (28 survived, 0 timed out)
Mutation testing 51% (elapsed: ~3m, remaining: ~3m) 45/87 tested (30 survived, 0 timed out)
Mutation testing 54% (elapsed: ~4m, remaining: ~3m) 47/87 tested (32 survived, 0 timed out)
Mutation testing 56% (elapsed: ~4m, remaining: ~3m) 49/87 tested (32 survived, 0 timed out)
Mutation testing 58% (elapsed: ~4m, remaining: ~3m) 51/87 tested (33 survived, 0 timed out)
Mutation testing 59% (elapsed: ~4m, remaining: ~3m) 52/87 tested (34 survived, 0 timed out)
Mutation testing 60% (elapsed: ~4m, remaining: ~2m) 53/87 tested (34 survived, 1 timed out)
Mutation testing 62% (elapsed: ~4m, remaining: ~2m) 54/87 tested (35 survived, 1 timed out)
Mutation testing 63% (elapsed: ~5m, remaining: ~2m) 55/87 tested (35 survived, 2 timed out)
Mutation testing 63% (elapsed: ~5m, remaining: ~3m) 55/87 tested (35 survived, 2 timed out)
Mutation testing 65% (elapsed: ~5m, remaining: ~2m) 57/87 tested (36 survived, 3 timed out)
Mutation testing 66% (elapsed: ~5m, remaining: ~2m) 58/87 tested (36 survived, 4 timed out)
Mutation testing 68% (elapsed: ~5m, remaining: ~2m) 60/87 tested (36 survived, 4 timed out)
Mutation testing 71% (elapsed: ~5m, remaining: ~2m) 62/87 tested (37 survived, 4 timed out)
Mutation testing 73% (elapsed: ~6m, remaining: ~2m) 64/87 tested (39 survived, 4 timed out)
Mutation testing 75% (elapsed: ~6m, remaining: ~1m) 66/87 tested (40 survived, 4 timed out)
Mutation testing 79% (elapsed: ~6m, remaining: ~1m) 69/87 tested (40 survived, 4 timed out)
Mutation testing 81% (elapsed: ~6m, remaining: ~1m) 71/87 tested (42 survived, 4 timed out)
Mutation testing 83% (elapsed: ~6m, remaining: ~1m) 73/87 tested (44 survived, 4 timed out)
Mutation testing 83% (elapsed: ~6m, remaining: ~1m) 73/87 tested (44 survived, 4 timed out)
Mutation testing 86% (elapsed: ~7m, remaining: ~1m) 75/87 tested (45 survived, 5 timed out)
Mutation testing 88% (elapsed: ~7m, remaining: <1m) 77/87 tested (47 survived, 5 timed out)
Mutation testing 90% (elapsed: ~7m, remaining: <1m) 79/87 tested (49 survived, 5 timed out)
Mutation testing 91% (elapsed: ~7m, remaining: <1m) 80/87 tested (50 survived, 5 timed out)
Mutation testing 95% (elapsed: ~7m, remaining: <1m) 83/87 tested (52 survived, 5 timed out)
Mutation testing 97% (elapsed: ~7m, remaining: <1m) 85/87 tested (53 survived, 5 timed out)

All tests
  ✓ All tests (killed 27)

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:40:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (o.compression === COMPRESSION_LEVEL.medium) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:40:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (o.compression === COMPRESSION_LEVEL.low) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'tar',
+     zipAFolderOptions,
+     archiverOptions: {}
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'tar',
+     zipAFolderOptions,
+     archiverOptions: {
+       gzip: false
+     }
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:74:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (o.compression === COMPRESSION_LEVEL.low) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:115:57
-               const targetBasePath: string = path.dirname(targetFilePath);
+               const targetBasePath: string = path.dirname(targetFilePath + 'test');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath === src.toLowerCase()) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.startsWith(src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:121:29
-                   if (!isGlob(src)) {
+                   if (!isGlob(src.toLowerCase())) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:121:29
-                   if (!isGlob(src)) {
+                   if (!isGlob(src.toUpperCase())) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:121:29
-                   if (!isGlob(src)) {
+                   if (!isGlob(src.replace(/[a-z]/g, 'A'))) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:46
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src.toLowerCase(), fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:46
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src.replace(/ /g, ''), fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.R_OK & fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:42
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath + '/', fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:42
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath.toLowerCase(), fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:42
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath.replace(/ /g, ''), fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:128:43
-               output = fs.createWriteStream(targetFilePath);
+               output = fs.createWriteStream(targetFilePath + 'test');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:129:20
-           } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {
+           } else if (zipAFolderOptions?.customWriteStream) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:129:20
-           } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {
+           } else if (zipAFolderOptions?.customWriteStream || output) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:129:20
-           } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {
+           } else if (zipAFolderOptions?.customWriteStream ?? output) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:47
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     zlib: {
+       level: 9
+     }
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:56
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format.toLowerCase(), archiverOptions || {});

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:64
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     zlib: {
+       level: 9
+     }
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:64
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     store: true
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:13
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:23
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.on('close', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.on('end', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('close', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:17
-               if (isGlob(src)) {
+               if (isGlob(src) && false) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(src.split(','))) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(src.toUpperCase())) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(src.length)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split('?').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.toLowerCase());

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.toUpperCase());

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.replace(/[a-z]/g, 'A'));

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, null);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, undefined);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:38
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src.toLowerCase(), false);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, undefined);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, null);

Ran 0.94 tests per mutant on average.
---------------|---------|----------|-----------|------------|----------|----------|
File           | % score | # killed | # timeout | # survived | # no cov | # errors |
---------------|---------|----------|-----------|------------|----------|----------|
All files      |   36.78 |       27 |         5 |         55 |        0 |        0 |
 ZipAFolder.ts |   36.78 |       27 |         5 |         55 |        0 |        0 |
---------------|---------|----------|-----------|------------|----------|----------|
[32m14:30:15 (2378) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/reports/mutation/mutation.html
[32m14:30:15 (2378) INFO MutationTestExecutor[39m Done in 8 minutes 6 seconds.

real	8m8.305s
user	8m58.367s
sys	1m6.527s
