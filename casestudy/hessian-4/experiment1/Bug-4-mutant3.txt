

  binary.test.js
    ✓ should read "foo" binary
    ✓ should write "foo"
    1) should read and write empty binary
    ✓ should write and read as java impl (690ms)
    v2.0
      ✓ should read zero length binary data
      ✓ should read short datas
      ✓ should read max length short datas
      ✓ should read long binary
      ✓ should write short binary
      ✓ should write and read as java impl (626ms)
      ✓ should read java hessian 1.0 bin format (339ms)

  boolean.test.js
    ✓ should read true and false
    ✓ should write true and false
    v2.0
      ✓ should read write as 1.0

  date.test.js
    2) should read date 2:51:31 May 8, 1998
    ✓ should write date 2:51:31 May 8, 1998
    ✓ should write date 0 and read
    3) should read date 09:51:31 May 8, 1998 UTC
    4) should read date 09:51:00 May 8, 1998 UTC
    ✓ should write date
    hessian 2.0
      5) should read date 09:51:31 May 8, 1998 UTC
      6) should read Compact: date in minutes, 09:51:00 May 8, 1998 UTC
      ✓ should write and read date
      ✓ should read 1.0 format

  double.test.js
    ✓ should read double 12.25
    ✓ should write double 12.25
    ✓ should write double 100
    ✓ should write double 0
    ✓ should write as java impl
    ✓ should read java bin format
    v2.0
      ✓ should read 0.0 and 1.0
      ✓ should read 8 bits double
      ✓ should read 16 bits double
      ✓ should read 32 bits float double
      ✓ should read normal double
      ✓ should write 0.0 and 1.0
      ✓ should write as java impl
      ✓ should read java bin format
      ✓ should read java hessian 1.0 bin format

  exception.test.js
    v1.0
      ✓ should read java exception as js error
    v2.0
      ✓ should read java exception as js error
      ✓ should read hessian 1.0 exception

  int.test.js
    ✓ should read integer 300
    ✓ should write integer 300
    ✓ should write integer 0
    ✓ should write number as java write
    ✓ should read java number bin
    v2.0
      ✓ should read compact integers
      ✓ should write number as java write
      ✓ should read java number bin
      ✓ should read hessian 1.0 number bin
      ✓ should write compact integers

  list.test.js
    ✓ should read int[] = {0, 1}
    7) should write int[] = {0, 1}
    ✓ should read write anonymous variable-length list = {0, null, "foobar"}
    ✓ should write and read untyped list
    ✓ should write and read typed fixed-length list
    v2.0
      ✓ should write and read untyped list
      ✓ should write and read typed fixed-length list
      ✓ should read hessian 1.0 untyped list

  long.test.js
    ✓ should write {$class: "java.lang.Long", $: null} => null
    ✓ should read long 300
    ✓ should write long 300
    ✓ should write long 0
    ✓ should write and read equal java impl
    v2.0
      ✓ should read compact long
      ✓ should read normal long
      ✓ should write compact long
      ✓ should write and read equal java impl
      ✓ should read 1.0 bin as well

  map.test.js
    ✓ should read Serialization of a Java Object
    8) should write {hasOwnProperty: 1, a: 0, b: false, c: null} obj
    ✓ should read A sparse array
    ✓ should write js object to no type hash map
    ✓ should decode successful when key is null
    v2.0
      ✓ should write a java Class instance
      ✓ should read java hash map
      ✓ should read a Circular java Object
      ✓ should write js object to no type hash map
      ✓ should read hessian 1.0 hash map
      ✓ should write simple map to java hash map

  null.test.js
    ✓ should read null
    ✓ should write null
    v2.0
      ✓ should read write as 1.0

  object.test.js
    v1.0
      9) should write null for property like: { a: { "$class": "yyy.yyy", "$": null } }
      ✓ should write object for property like: { a: { "$class": "yyy.yyy", "$": {} } }
      ✓ should _assertType error when encode wrong object
      ✓ should decode and encode ConnectionRequest
      ✓ should write enum Color
      ✓ should write enum with ref
      ✓ should read enum Color
      ✓ should write "{$class: "hessian.test.demo.Car", $: {a: 1}}"
      ✓ should read and write one car list
      ✓ should read and write two car list
      ✓ should read and write many cars
      java.util.concurrent.atomic.AtomicLong
        ✓ should read and write
    v2.0
      ✓ should decode and encode ConnectionRequest
      ✓ should decode hessian 1.0 ConnectionRequest
      ✓ should write enum Color
      ✓ should read hessian 1.0 enum Color
      ✓ should write enum with ref
      ✓ should read enum Color
      ✓ should write "{$class: "hessian.test.demo.Car", $: {a: 1}}"
      ✓ should read one car list
      ✓ should read two car list
      ✓ should read many cars
      ✓ should read hessian 1.0 one car list
      ✓ should read hessian 1.0 two car list
      ✓ should read hessian 1.0 many cars
      java.util.concurrent.atomic.AtomicLong
        ✓ should read and write

  string.test.js
    ✓ should read string
    10) should write string
    ✓ should read write empty string
    ✓ should read and write utf8 string as java (1031ms)
    ✓ should write string same as java write (351ms)
    - should write string same as java write exclude
    v2.0
      ✓ should read short strings
      ✓ should read "hello" in long form
      ✓ should read split into two chunks: s and short strings
      ✓ should write short strings
      ✓ should read java string
      ✓ should write string same as java write (346ms)
      - should write string same as java write exclude
      ✓ should read and write utf8 string as java (1024ms)

  utils.test.js
    getSerializer()
      ✓ should [int get writeArray
      ✓ should [string get writeArray

  hessian v1
    null
      ✓ should write and read null ok
    bool
      ✓ should write and read true ok
      ✓ should write and read false ok
    int
      ✓ should write and read int ok
      ✓ should write int error
      ✓ should read int error
    long
      ✓ should write and read long ok
      ✓ should write long error
      ✓ should read long error
    double
      ✓ should write and read double ok
      ✓ should read double error
    date
      ✓ should write and read Date ok
      ✓ should read date error
    bytes
      ✓ should write and read small bytes ok
      ✓ should write and read big bytes ok (296ms)
      ✓ should read bytes error
      ✓ should bytes length equal MAX_BYTE_TRUNK_SIZE work (88ms)
      ✓ should write type error
      ✓ should write and read empty bytes
    string
      ✓ should write and read small string ok
      ✓ should write and read big string ok
      ✓ should read string error
      ✓ should write type error
      ✓ should string length equal MAX_CHAR_TRUNK_SIZE work
      ✓ should write and read empty string
    object
      ✓ should write and get simple object ok
      ✓ should write null obejct ok
      ✓ should write and read object with circular ok
      ✓ should write and read complex object ok
      ✓ should read complex object type use positon ok
      ✓ should write "java.util.HashMap" treat as {}
      ✓ should write type error
    array
      ✓ should write and read simple array ok
      ✓ should write circular array ok
      ✓ should write and read complex array ok
      ✓ should write "java.util.ArrayList" treat as []
      ✓ should read unexpect end label
      ✓ should write type error
    java.lang.Object
      ✓ should encode and decode ok
    encode and decode
      ✓ should encode and decode work ok
      ✓ should decode error


  155 passing (5s)
  2 pending
  10 failing

  1) binary.test.js
       should read and write empty binary:
     Error: Assertion has no property Buffer
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/binary.test.js:33:23)

  2) date.test.js
       should read date 2:51:31 May 8, 1998:
     Error: Assertion has no property Date
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/date.test.js:26:20)

  3) date.test.js
       should read date 09:51:31 May 8, 1998 UTC:
     Error: Assertion has no property Date
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/date.test.js:43:19)

  4) date.test.js
       should read date 09:51:00 May 8, 1998 UTC:
     Error: Assertion has no property Date
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/date.test.js:52:19)

  5) date.test.js
       hessian 2.0
         should read date 09:51:31 May 8, 1998 UTC:
     Error: Assertion has no property Date
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/date.test.js:69:21)

  6) date.test.js
       hessian 2.0
         should read Compact: date in minutes, 09:51:00 May 8, 1998 UTC:
     Error: Assertion has no property Date
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/date.test.js:78:21)

  7) list.test.js
       should write int[] = {0, 1}:
     Error: Assertion has no property Buffer
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/list.test.js:47:21)

  8) map.test.js
       should write {hasOwnProperty: 1, a: 0, b: false, c: null} obj:
     Error: Assertion has no property Buffer
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/map.test.js:96:21)

  9) object.test.js
       v1.0
         should write null for property like: { a: { "$class": "yyy.yyy", "$": null } }:
     AssertionError: expected [Buffer: 4d 74 00 07 78 78 78 2e 78 78 78 53 00 01 61 4d 74 00 00 53 00 01 24 4e 53 00 06 24 63 6c 61 73 73 53 00 07 79 79 79 2e 79 79 79 7a 7a] to have property length of 17 (got 45)
      at Assertion.fail (node_modules/should/lib/assertion.js:196:17)
      at Proxy.prop.(anonymous function) (node_modules/should/lib/assertion.js:81:17)
      at Context.<anonymous> (test/object.test.js:29:18)

  10) string.test.js
       should write string:
     Error: Assertion has no property Buffer
      at Object.get (node_modules/should/lib/assertion.js:228:19)
      at Context.<anonymous> (test/string.test.js:34:19)



