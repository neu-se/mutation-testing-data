*** using precomputed mutations ***
[32m22:54:39 (2622) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m22:54:39 (2622) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m22:54:39 (2622) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m22:54:40 (2622) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m22:54:40 (2622) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m22:54:40 (2622) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 268 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with val !== undefined
Mutant 1 in dirty.js: val === undefined replaced with typeof val === 'undefined'
Mutant 2 in dirty.js: val === undefined replaced with !val
Mutant 3 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, 'val')
Mutant 4 in dirty.js: this._data.set(key, val) replaced with this._data.set(null, val)
Mutant 5 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val - 1)
Mutant 6 in dirty.js: key replaced with this._data.set(val, val)
Mutant 7 in dirty.js: key replaced with this._data.set(key + '_', val)
Mutant 8 in dirty.js: key replaced with this._data.set(key, val + 1)
Mutant 9 in dirty.js: val replaced with undefined
Mutant 10 in dirty.js: val replaced with Math.round(val)
Mutant 11 in dirty.js: val replaced with "abc" + val.toString()
Mutant 12 in dirty.js: this.path replaced with this.file
Mutant 13 in dirty.js: this.path replaced with this.settings.path
Mutant 14 in dirty.js: this.path replaced with fs.ReadStream.path
Mutant 15 in dirty.js: this._queue.get replaced with this._queue.has
Mutant 16 in dirty.js: this._queue.get replaced with this._queue.size
Mutant 17 in dirty.js: key replaced with cbs.push(cb)
Mutant 18 in dirty.js: key replaced with cbs.push(cbs.length)
Mutant 19 in dirty.js: key replaced with cbs.push(1)
Mutant 20 in dirty.js: cb replaced with cbs.push(cb) > 0
Mutant 21 in dirty.js: cb replaced with cbs.length === 0
Mutant 22 in dirty.js: cb replaced with cbs.includes(cb)
Mutant 23 in dirty.js: cbs.push replaced with cbs.shift
Mutant 24 in dirty.js: cbs.push replaced with cbs.pop
Mutant 25 in dirty.js: cbs.push replaced with cbs.unshift
Mutant 26 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(val, cbs)
Mutant 27 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, [cbs])
Mutant 28 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(null, cbs)
Mutant 29 in dirty.js: key replaced with key * 2
Mutant 30 in dirty.js: key replaced with key = 'abc'
Mutant 31 in dirty.js: cbs replaced with []
Mutant 32 in dirty.js: cbs replaced with this._queue.get(key) || []
Mutant 33 in dirty.js: cbs replaced with () => {}
Mutant 34 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  this.emit('drain');
}
Mutant 35 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb(new Error('Some error'));
  this.emit('drain');
}
Mutant 36 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('drain', new Error('Some error'));
}
Mutant 37 in dirty.js: this.emit replaced with this._data
Mutant 38 in dirty.js: this.emit replaced with this._queue
Mutant 39 in dirty.js: this.emit replaced with this._inFlightWrites
Mutant 40 in dirty.js: 'drain' replaced with 'empty'
Mutant 41 in dirty.js: 'drain' replaced with 'error'
Mutant 42 in dirty.js: 'drain' replaced with 'random'
Mutant 43 in dirty.js: key replaced with null
Mutant 44 in dirty.js: key replaced with undefined
Mutant 45 in dirty.js: key replaced with 'key' + key
Mutant 46 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 47 in dirty.js: this.set(key, undefined, cb) replaced with this.set(`key, '', cb`)
Mutant 48 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, {}, cb)
Mutant 49 in dirty.js: this.set replaced with this.del
Mutant 50 in dirty.js: this.set replaced with this.has
Mutant 51 in dirty.js: key replaced with undefined
Mutant 52 in dirty.js: key replaced with null
Mutant 53 in dirty.js: key replaced with "key"
Mutant 54 in dirty.js: undefined replaced with true
Mutant 55 in dirty.js: undefined replaced with 'undefined'
Mutant 56 in dirty.js: undefined replaced with val
Mutant 57 in dirty.js: cb replaced with cb(new Error('Dummy error'))
Mutant 58 in dirty.js: cb replaced with cb(null, 'Dummy value')
Mutant 59 in dirty.js: fn(key, val) === false replaced with fn(key, val) === 'wrong'
Mutant 60 in dirty.js: fn(key, val) === false replaced with fn(val, key) === false
Mutant 61 in dirty.js: fn(key, val) === false replaced with fn(key, val) === null
Mutant 62 in dirty.js: fn(key, val) replaced with fn(key, val - 1)
Mutant 63 in dirty.js: fn(key, val) replaced with fn(key, val + 1)
Mutant 64 in dirty.js: key replaced with 'undefined'
Mutant 65 in dirty.js: key replaced with 0
Mutant 66 in dirty.js: val replaced with val * 2
Mutant 67 in dirty.js: val replaced with val + 1
Mutant 68 in dirty.js: val replaced with typeof val
Mutant 69 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, undefined, cb)
Mutant 70 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(anotherKey, updater(this.get(key)), cb)
Mutant 71 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key)), undefined)
Mutant 72 in dirty.js: key replaced with undefined
Mutant 73 in dirty.js: key replaced with null
Mutant 74 in dirty.js: key replaced with ''
Mutant 75 in dirty.js: updater(this.get(key)) replaced with updater(this._data.get(key))
Mutant 76 in dirty.js: updater(this.get(key)) replaced with updater(key)
Mutant 77 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key) + 1)
Mutant 78 in dirty.js: this.get(key) replaced with this.get(key) + 1
Mutant 79 in dirty.js: this.get(key) replaced with this.get(key).length
Mutant 80 in dirty.js: this.get(key) replaced with Math.random()
Mutant 81 in dirty.js: this.get replaced with this.emit
Mutant 82 in dirty.js: this.get replaced with this.update
Mutant 83 in dirty.js: key replaced with val
Mutant 84 in dirty.js: key replaced with typeof key
Mutant 85 in dirty.js: key replaced with null
Mutant 86 in dirty.js: cb replaced with null
Mutant 87 in dirty.js: cb replaced with undefined
Mutant 88 in dirty.js: cb replaced with () => {}
Mutant 89 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size > 0
Mutant 90 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._inFlightWrites < 1
Mutant 91 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._data.size > 0
Mutant 92 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('end', () => this.close())
Mutant 93 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('error', () => this.close())
Mutant 94 in dirty.js: 'drain' replaced with 'dirty'
Mutant 95 in dirty.js: 'drain' replaced with 'flush'
Mutant 96 in dirty.js: 'drain' replaced with 'write'
Mutant 97 in dirty.js: this.close replaced with this.destroy
Mutant 98 in dirty.js: this.close replaced with this.closeStreams
Mutant 99 in dirty.js: this._readStream replaced with this._writeStream
Mutant 100 in dirty.js: this._readStream replaced with this._data
Mutant 101 in dirty.js: this._writeStream replaced with this.writeStream
Mutant 102 in dirty.js: this._writeStream replaced with this._writeStream = true
Mutant 103 in dirty.js: () => this._writeStream.destroy() replaced with () => this._readStream.destroy()
Mutant 104 in dirty.js: () => this._writeStream.destroy() replaced with () => this._data.clear()
Mutant 105 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.write(JSON.stringify({
  key,
  val: null
}))
Mutant 106 in dirty.js: !this.path replaced with this.path.length === 0
Mutant 107 in dirty.js: !this.path replaced with this.path.length > 0
Mutant 108 in dirty.js: !this.path replaced with this.path === null
Mutant 109 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 110 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 111 in dirty.js: this.emit('load', 0) replaced with this.emit('load', NaN)
Mutant 112 in dirty.js: 'load' replaced with ' '
Mutant 113 in dirty.js: 'load' replaced with 8
Mutant 114 in dirty.js: 'load' replaced with null
Mutant 115 in dirty.js: 0 replaced with 1
Mutant 116 in dirty.js: 0 replaced with null
Mutant 117 in dirty.js: 0 replaced with undefined
Mutant 118 in dirty.js: err.code === 'ENOENT' replaced with err !== 'ENOENT'
Mutant 119 in dirty.js: err.code === 'ENOENT' replaced with err.code !== 'ENOENT'
Mutant 120 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EACCES'
Mutant 121 in dirty.js: this.emit('load', 0) replaced with this.emit('error')
Mutant 122 in dirty.js: this.emit('load', 0) replaced with this.emit('error', new Error('test'))
Mutant 123 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 124 in dirty.js: 0 replaced with -1
Mutant 125 in dirty.js: 0 replaced with this
Mutant 126 in dirty.js: 0 replaced with function () {}
Mutant 127 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 128 in dirty.js: this.emit('error', err) replaced with this.emit('error', undefined)
Mutant 129 in dirty.js: this.emit('error', err) replaced with this.emit('error', {})
Mutant 130 in dirty.js: this.emit replaced with console.error
Mutant 131 in dirty.js: this.emit replaced with this.log
Mutant 132 in dirty.js: this.emit replaced with this.foo
Mutant 133 in dirty.js: 'error' replaced with ''
Mutant 134 in dirty.js: 'error' replaced with 'foo'
Mutant 135 in dirty.js: 'error' replaced with undefined
Mutant 136 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') !== -1
Mutant 137 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\\n') === -1
Mutant 138 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('&n') === -1
Mutant 139 in dirty.js: '\n' replaced with '\t'
Mutant 140 in dirty.js: '\n' replaced with ''
Mutant 141 in dirty.js: buffer.split replaced with buffer.unshift
Mutant 142 in dirty.js: buffer.split replaced with buffer.length
Mutant 143 in dirty.js: buffer.split replaced with buffer.reverse
Mutant 144 in dirty.js: '\n' replaced with '\t'
Mutant 145 in dirty.js: '\n' replaced with '\r'
Mutant 146 in dirty.js: '\n' replaced with ''
Mutant 147 in dirty.js: !rowStr replaced with rowStr.length > 0
Mutant 148 in dirty.js: !rowStr replaced with rowStr.includes('')
Mutant 149 in dirty.js: !rowStr replaced with rowStr.search(/^$/) !== -1
Mutant 150 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('load', 0)
Mutant 151 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', null)
Mutant 152 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('key', null)
Mutant 153 in dirty.js: 'error' replaced with 'warn'
Mutant 154 in dirty.js: 'error' replaced with 'info'
Mutant 155 in dirty.js: 'error' replaced with 'debug'
Mutant 156 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error("My custom error message")
Mutant 157 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with console.log("Malformed data detected")
Mutant 158 in dirty.js: JSON.parse replaced with 1 + 1
Mutant 159 in dirty.js: JSON.parse replaced with undefined
Mutant 160 in dirty.js: JSON.parse replaced with null
Mutant 161 in dirty.js: rowStr replaced with rowStr.substring(0, rowStr.length - 1)
Mutant 162 in dirty.js: rowStr replaced with rowStr[0].toUpperCase() + rowStr.substring(1)
Mutant 163 in dirty.js: rowStr replaced with rowStr.split('').reverse().join('')
Mutant 164 in dirty.js: !('key' in row) replaced with 'key' in row === null
Mutant 165 in dirty.js: !('key' in row) replaced with row.key !== row.key
Mutant 166 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', 'Could not load corrupted row: ' + rowStr)
Mutant 167 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('write', rowStr)
Mutant 168 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new TypeError(`Could not parse corrupted row: ${rowStr}`))
Mutant 169 in dirty.js: this.emit replaced with this.emitter
Mutant 170 in dirty.js: this.emit replaced with this.emitter.emit
Mutant 171 in dirty.js: this.emit replaced with this.emitFoo
Mutant 172 in dirty.js: 'error' replaced with 'errors'
Mutant 173 in dirty.js: 'error' replaced with 'success'
Mutant 174 in dirty.js: 'error' replaced with 'warning'
Mutant 175 in dirty.js: row.val === undefined replaced with row.val == undefined
Mutant 176 in dirty.js: row.val === undefined replaced with row.val !== undefined
Mutant 177 in dirty.js: row.val === undefined replaced with !row.val
Mutant 178 in dirty.js: row.key replaced with "foo"
Mutant 179 in dirty.js: row.key replaced with row.val
Mutant 180 in dirty.js: row.key replaced with JSON.stringify(row.key)
Mutant 181 in dirty.js: row.key replaced with row.property
Mutant 182 in dirty.js: row.key replaced with row["key"]
Mutant 183 in dirty.js: row.key replaced with this._queue.get(key)
Mutant 184 in dirty.js: row.val replaced with row.key
Mutant 185 in dirty.js: row.val replaced with undefined
Mutant 186 in dirty.js: row.val replaced with null
Mutant 187 in dirty.js: buffer.length replaced with undefined
Mutant 188 in dirty.js: buffer.length replaced with null
Mutant 189 in dirty.js: buffer.length replaced with ''
Mutant 190 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`))
Mutant 191 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit(Buffer.isBuffer(buffer) ? buffer : buffer.slice(0, -1))
Mutant 192 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit(this._data.size > 0 ? buffer : buffer.slice(0, -1))
Mutant 193 in dirty.js: this.emit replaced with this._writeStream
Mutant 194 in dirty.js: this.emit replaced with this._data
Mutant 195 in dirty.js: this.emit replaced with this._queue
Mutant 196 in dirty.js: 'error' replaced with 'end'
Mutant 197 in dirty.js: 'error' replaced with 'drain'
Mutant 198 in dirty.js: 'error' replaced with 'read_close'
Mutant 199 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the beginning of the db: ${buffer}`)
Mutant 200 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row in the middle of the db: ${buffer}`)
Mutant 201 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.split('').reverse().join('')}`)
Mutant 202 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size())
Mutant 203 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 204 in dirty.js: 'load' replaced with 'loaded'
Mutant 205 in dirty.js: 'load' replaced with 'flush'
Mutant 206 in dirty.js: 'load' replaced with 'drain'
Mutant 207 in dirty.js: this._data.size replaced with this._data.size - 1
Mutant 208 in dirty.js: this._data.size replaced with this._data.size = 0
Mutant 209 in dirty.js: 'read_close' replaced with 'close'
Mutant 210 in dirty.js: 'read_close' replaced with 'end'
Mutant 211 in dirty.js: 'read_close' replaced with 'error'
Mutant 212 in dirty.js: !this._queue.size replaced with this._queue.length === 0
Mutant 213 in dirty.js: !this._queue.size replaced with this._queue.size < 0
Mutant 214 in dirty.js: !this._queue.size replaced with this._queue.isEmpty()
Mutant 215 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites < 0
Mutant 216 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites > 0
Mutant 217 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites += 1
Mutant 218 in dirty.js: 'drain' replaced with 'error'
Mutant 219 in dirty.js: 'drain' replaced with 'read_close'
Mutant 220 in dirty.js: 'drain' replaced with 'write_close'
Mutant 221 in dirty.js: 'write_close' replaced with 'drain'
Mutant 222 in dirty.js: 'write_close' replaced with 'end'
Mutant 223 in dirty.js: 'write_close' replaced with 'error'
Mutant 224 in dirty.js: !this._queue.size || this._waitForDrain replaced with !this._queue.size && this._waitForDrain
Mutant 225 in dirty.js: !this._queue.size || this._waitForDrain replaced with !this._waitForDrain
Mutant 226 in dirty.js: this._writeStream.cork replaced with this._writeStream.end
Mutant 227 in dirty.js: this._writeStream.cork replaced with this._writeStream.uncork
Mutant 228 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cb] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 229 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, {}] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 230 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [value, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 231 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 232 in dirty.js: this._queue replaced with this._queue.size()
Mutant 233 in dirty.js: this._queue replaced with this._queue.length
Mutant 234 in dirty.js: this._queue replaced with this._queue.values().length
Mutant 235 in dirty.js: key replaced with this._inFlightWrites
Mutant 236 in dirty.js: key replaced with this._data.get(key)
Mutant 237 in dirty.js: key replaced with this._queue.size
Mutant 238 in dirty.js: JSON.stringify replaced with "key"
Mutant 239 in dirty.js: JSON.stringify replaced with "value"
Mutant 240 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key + 1)
}
Mutant 241 in dirty.js: this._data.get replaced with this._data.set
Mutant 242 in dirty.js: this._data.get replaced with this._data.keys
Mutant 243 in dirty.js: !cbs.length && err != null replaced with err === null
Mutant 244 in dirty.js: !cbs.length && err != null replaced with !cbs.length
Mutant 245 in dirty.js: !cbs.length && err != null replaced with true
Mutant 246 in dirty.js: 'error' replaced with 'data'
Mutant 247 in dirty.js: 'error' replaced with 'close'
Mutant 248 in dirty.js: 'error' replaced with 'read_close'
Mutant 249 in dirty.js: err replaced with 42
Mutant 250 in dirty.js: err replaced with 'foo'
Mutant 251 in dirty.js: err replaced with null
Mutant 252 in dirty.js: 'drain' replaced with 'error'
Mutant 253 in dirty.js: 'drain' replaced with 'close'
Mutant 254 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const nd of cbs) cb(err);
Mutant 255 in dirty.js: for (const cb of cbs) cb(err); replaced with for (let cb of cbs) cb(err);
Mutant 256 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb2 of cbs) cb(err);
Mutant 257 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb3 of cbs.values()) cb(err);
Mutant 258 in dirty.js: cbs replaced with () => cbs
Mutant 259 in dirty.js: cbs replaced with cbs.slice(0)
Mutant 260 in dirty.js: cbs replaced with cbs.filter(cb => cb != null)
Mutant 261 in dirty.js: cb replaced with cub
Mutant 262 in dirty.js: cb replaced with none
Mutant 263 in dirty.js: err replaced with err[0]
Mutant 264 in dirty.js: err replaced with err instanceof Error
Mutant 265 in dirty.js: this._waitForDrain replaced with false
Mutant 266 in dirty.js: this._waitForDrain replaced with this._queue.size
Mutant 267 in dirty.js: this._waitForDrain replaced with Object.keys(this._queue).length
[32m22:54:40 (2622) INFO Instrumenter[39m Instrumented 2 source file(s) with 268 mutant(s)
[32m22:54:40 (2622) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m22:54:41 (2622) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m22:54:41 (2622) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m22:54:42 (2622) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 513 ms, overhead 1 ms).
Mutation testing 7% (elapsed: <1m, remaining: ~2m) 19/268 tested (3 survived, 0 timed out)
Mutation testing 10% (elapsed: <1m, remaining: ~2m) 27/268 tested (4 survived, 0 timed out)
Mutation testing 12% (elapsed: <1m, remaining: ~3m) 34/268 tested (4 survived, 0 timed out)
Mutation testing 15% (elapsed: <1m, remaining: ~3m) 42/268 tested (5 survived, 0 timed out)
Mutation testing 22% (elapsed: <1m, remaining: ~2m) 61/268 tested (6 survived, 0 timed out)
Mutation testing 29% (elapsed: ~1m, remaining: ~2m) 80/268 tested (9 survived, 0 timed out)
Mutation testing 34% (elapsed: ~1m, remaining: ~2m) 92/268 tested (13 survived, 0 timed out)
Mutation testing 40% (elapsed: ~1m, remaining: ~1m) 108/268 tested (19 survived, 0 timed out)
Mutation testing 42% (elapsed: ~1m, remaining: ~2m) 113/268 tested (19 survived, 1 timed out)
Mutation testing 43% (elapsed: ~1m, remaining: ~2m) 116/268 tested (19 survived, 3 timed out)
Mutation testing 50% (elapsed: ~1m, remaining: ~1m) 135/268 tested (28 survived, 3 timed out)
Mutation testing 57% (elapsed: ~2m, remaining: ~1m) 154/268 tested (35 survived, 3 timed out)
Mutation testing 64% (elapsed: ~2m, remaining: ~1m) 174/268 tested (50 survived, 3 timed out)
Mutation testing 72% (elapsed: ~2m, remaining: <1m) 193/268 tested (60 survived, 3 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 204/268 tested (69 survived, 3 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 206/268 tested (69 survived, 5 timed out)
Mutation testing 82% (elapsed: ~2m, remaining: <1m) 221/268 tested (80 survived, 6 timed out)
Mutation testing 83% (elapsed: ~3m, remaining: <1m) 225/268 tested (81 survived, 6 timed out)
Mutation testing 88% (elapsed: ~3m, remaining: <1m) 237/268 tested (82 survived, 7 timed out)
Mutation testing 94% (elapsed: ~3m, remaining: <1m) 253/268 tested (89 survived, 7 timed out)
Mutation testing 97% (elapsed: ~3m, remaining: <1m) 262/268 tested (92 survived, 8 timed out)

All tests
  ✓ All tests (killed 164)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (typeof val === 'undefined') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (!val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:19
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.has(key) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:15
-         if (cb) cbs.push(cb);
+         if (cb) cbs.unshift(cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) cb();
+     this.emit('drain', new Error('Some error'));
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, val) === 'wrong') break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, val) === null) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:19
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this._data.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('end', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('dirty', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('flush', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('write', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._data.clear());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:113:15
-             if (err.code === 'ENOENT') {
+             if (err !== 'ENOENT') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             console.error('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.log('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.foo('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('foo', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit(undefined, err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:33
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.search(/^$/) !== -1) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('load', 0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('key', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('warn', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('info', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('debug', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error("My custom error message"));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', console.log("Malformed data detected"));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:133:32
-                 row = JSON.parse(rowStr);
+                 row = JSON.parse(rowStr[0].toUpperCase() + rowStr.substring(1));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if ('key' in row === null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.key !== row.key) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', 'Could not load corrupted row: ' + rowStr);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('write', rowStr);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new TypeError(`Could not parse corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emitter('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emitter.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emitFoo('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('errors', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('success', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warning', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (!row.val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:145:30
-                 this._data.set(row.key, row.val);
+                 this._data.set(row["key"], row.val);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if ('') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit(Buffer.isBuffer(buffer) ? buffer : buffer.slice(0, -1));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit(this._data.size > 0 ? buffer : buffer.slice(0, -1));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this._writeStream('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this._data('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this._queue('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('drain', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('read_close', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the beginning of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row in the middle of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.split('').reverse().join('')}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('end');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size < 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.isEmpty()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites < 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites > 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites += 1) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('read_close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('write_close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (!this._queue.size && this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:183:5
-       this._writeStream.cork();
+       this._writeStream.uncork();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (err === null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('data', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('close', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('read_close', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', 42);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', 'foo');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:9
-           for (const cb of cbs) cb(err);
+           for (let cb of cbs) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.slice(0)) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.filter(cb => cb != null)) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(err instanceof Error);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._queue.size) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (Object.keys(this._queue).length) break;

Ran 0.97 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   64.18 |      164 |         8 |         96 |        0 |        0 |
 dirty.js |   64.18 |      164 |         8 |         96 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m22:58:14 (2622) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m22:58:14 (2622) INFO MutationTestExecutor[39m Done in 3 minutes 35 seconds.

real	3m36.700s
user	2m22.837s
sys	0m24.309s
