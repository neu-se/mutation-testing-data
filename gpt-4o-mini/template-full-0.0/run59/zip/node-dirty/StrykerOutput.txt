*** using precomputed mutations ***
[32m13:27:12 (2919) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m13:27:12 (2919) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m13:27:12 (2919) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llmorpheus/llmorpheus/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m13:27:13 (2919) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m13:27:13 (2919) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m13:27:13 (2919) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 259 mutants from MUTATION_TESTING/template-full_gpt-4o-mini_0.0/mutants.json ***
Mutant 0 in dirty.js: this._load replaced with this._loadData
Mutant 1 in dirty.js: this._load replaced with this._load = null
Mutant 2 in dirty.js: val === undefined replaced with val === null
Mutant 3 in dirty.js: val === undefined replaced with val !== undefined
Mutant 4 in dirty.js: val === undefined replaced with this._data.has(key)
Mutant 5 in dirty.js: key replaced with 'key'
Mutant 6 in dirty.js: key replaced with null
Mutant 7 in dirty.js: key replaced with this._data.keys().next().value
Mutant 8 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, null)
Mutant 9 in dirty.js: this._data.set(key, val) replaced with this._data.set(val, key)
Mutant 10 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val + ' modified')
Mutant 11 in dirty.js: key replaced with 'key'
Mutant 12 in dirty.js: key replaced with null
Mutant 13 in dirty.js: key replaced with key + '1'
Mutant 14 in dirty.js: val replaced with null
Mutant 15 in dirty.js: val replaced with this._data.get(key)
Mutant 16 in dirty.js: val replaced with val + 1
Mutant 17 in dirty.js: this.path replaced with !this.path
Mutant 18 in dirty.js: this.path replaced with this._data.size > 0
Mutant 19 in dirty.js: this.path replaced with this.path === ''
Mutant 20 in dirty.js: this._queue.get replaced with this._queue.has
Mutant 21 in dirty.js: key replaced with 'unknownKey'
Mutant 22 in dirty.js: key replaced with null
Mutant 23 in dirty.js: key replaced with key + '1'
Mutant 24 in dirty.js: cb replaced with !cb
Mutant 25 in dirty.js: cb replaced with cbs.length > 0
Mutant 26 in dirty.js: cb replaced with key === null
Mutant 27 in dirty.js: cb replaced with null
Mutant 28 in dirty.js: cb replaced with () => {}
Mutant 29 in dirty.js: cb replaced with () => {
  throw new Error('Callback error');
}
Mutant 30 in dirty.js: key replaced with 'key'
Mutant 31 in dirty.js: key replaced with null
Mutant 32 in dirty.js: key replaced with this._data.size
Mutant 33 in dirty.js: cbs replaced with cbs.length
Mutant 34 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('error', new Error('Drain error'));
}
Mutant 35 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('drain', 'extra data');
}
Mutant 36 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('drain', null);
}
Mutant 37 in dirty.js: cb replaced with !cb
Mutant 38 in dirty.js: cb replaced with cb('error')
Mutant 39 in dirty.js: 'drain' replaced with 'load'
Mutant 40 in dirty.js: 'drain' replaced with 'finish'
Mutant 41 in dirty.js: key replaced with 'key'
Mutant 42 in dirty.js: key replaced with undefined
Mutant 43 in dirty.js: key replaced with this._data.keys().next().value
Mutant 44 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 45 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, undefined, null)
Mutant 46 in dirty.js: key replaced with 'wrongKey'
Mutant 47 in dirty.js: key replaced with null
Mutant 48 in dirty.js: key replaced with key + '1'
Mutant 49 in dirty.js: undefined replaced with null
Mutant 50 in dirty.js: undefined replaced with this._data.get(key)
Mutant 51 in dirty.js: for (const [key, val] of this._data) {
  if (fn(key, val) === false) break;
} replaced with for (const [key, val] of this._data.entries()) {
  if (fn(key, val) === false) break;
}
Mutant 52 in dirty.js: this._data replaced with this._data.keys()
Mutant 53 in dirty.js: this._data replaced with this._data.entries()
Mutant 54 in dirty.js: this._data replaced with this._data.values()
Mutant 55 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== true
Mutant 56 in dirty.js: fn(key, val) === false replaced with fn(val, key) === false
Mutant 57 in dirty.js: fn(key, val) === false replaced with fn(key) === false
Mutant 58 in dirty.js: fn(key, val) replaced with fn(key, null)
Mutant 59 in dirty.js: fn(key, val) replaced with fn(val, undefined)
Mutant 60 in dirty.js: key replaced with key + '1'
Mutant 61 in dirty.js: key replaced with undefined
Mutant 62 in dirty.js: val replaced with undefined
Mutant 63 in dirty.js: val replaced with val + 1
Mutant 64 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, this.get(key) + 1, cb)
Mutant 65 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, null, cb)
Mutant 66 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, this._data.get(key), cb)
Mutant 67 in dirty.js: key replaced with 'unknown_key'
Mutant 68 in dirty.js: key replaced with null
Mutant 69 in dirty.js: key replaced with this._data.keys().next().value
Mutant 70 in dirty.js: updater(this.get(key)) replaced with updater(this.size())
Mutant 71 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key) + 1)
Mutant 72 in dirty.js: updater(this.get(key)) replaced with updater(null)
Mutant 73 in dirty.js: this.get(key) replaced with this._data.get(key) + 1
Mutant 74 in dirty.js: this.get(key) replaced with this._data.has(key) ? this.get(key) : null
Mutant 75 in dirty.js: key replaced with 'nonExistentKey'
Mutant 76 in dirty.js: key replaced with this._data.keys().next().value
Mutant 77 in dirty.js: cb replaced with null
Mutant 78 in dirty.js: cb replaced with () => {}
Mutant 79 in dirty.js: cb replaced with this._queue.get(key)[0]
Mutant 80 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size === 0 && this._inFlightWrites === 0
Mutant 81 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size > 1
Mutant 82 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites < 0
Mutant 83 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('error', () => this.emit('error', new Error('Close failed')))
Mutant 84 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this._writeStream.end())
Mutant 85 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this._queue.clear())
Mutant 86 in dirty.js: this.once replaced with this.emit
Mutant 87 in dirty.js: this.once replaced with this.on
Mutant 88 in dirty.js: this.once replaced with this.removeListener
Mutant 89 in dirty.js: 'drain' replaced with 'error'
Mutant 90 in dirty.js: 'drain' replaced with 'load'
Mutant 91 in dirty.js: 'drain' replaced with 'finish'
Mutant 92 in dirty.js: () => this.close() replaced with () => this.emit('drain')
Mutant 93 in dirty.js: () => this.close() replaced with () => this._writeStream.end()
Mutant 94 in dirty.js: () => this.close() replaced with () => this._waitForDrain = true
Mutant 95 in dirty.js: this._readStream replaced with this._writeStream
Mutant 96 in dirty.js: this._readStream replaced with this._readStream.pause()
Mutant 97 in dirty.js: this._readStream replaced with this._readStream.destroySoon()
Mutant 98 in dirty.js: this._writeStream replaced with this._readStream
Mutant 99 in dirty.js: this._writeStream replaced with this._writeStream.write()
Mutant 100 in dirty.js: this._writeStream replaced with this._writeStream.destroy()
Mutant 101 in dirty.js: this._writeStream.end replaced with this._writeStream.write
Mutant 102 in dirty.js: this._writeStream.end replaced with this._writeStream.destroySoon
Mutant 103 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end('error')
Mutant 104 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.write('corrupted data')
Mutant 105 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.destroySoon()
Mutant 106 in dirty.js: !this.path replaced with this.path === ''
Mutant 107 in dirty.js: !this.path replaced with this.path != null
Mutant 108 in dirty.js: !this.path replaced with this.path.length > 0
Mutant 109 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 110 in dirty.js: this.emit('load', 0) replaced with this.emit('error', new Error('Failed to load database'))
Mutant 111 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size + 1)
Mutant 112 in dirty.js: 'load' replaced with 'error'
Mutant 113 in dirty.js: 'load' replaced with 'loaded'
Mutant 114 in dirty.js: 0 replaced with 1
Mutant 115 in dirty.js: 0 replaced with null
Mutant 116 in dirty.js: 0 replaced with this._data.size + 1
Mutant 117 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EACCES'
Mutant 118 in dirty.js: err.code === 'ENOENT' replaced with err.message.includes('not found')
Mutant 119 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOTDIR'
Mutant 120 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 121 in dirty.js: this.emit('load', 0) replaced with this.emit('error', new Error('File path is missing'))
Mutant 122 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size + 1)
Mutant 123 in dirty.js: 'load' replaced with 'error'
Mutant 124 in dirty.js: 'load' replaced with 'loaded'
Mutant 125 in dirty.js: 0 replaced with 1
Mutant 126 in dirty.js: 0 replaced with null
Mutant 127 in dirty.js: 0 replaced with this._data.size + 1
Mutant 128 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('File not found'))
Mutant 129 in dirty.js: this.emit('error', err) replaced with this.emit('load', err)
Mutant 130 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 131 in dirty.js: 'error' replaced with 'warning'
Mutant 132 in dirty.js: 'error' replaced with 'load'
Mutant 133 in dirty.js: 'error' replaced with 'info'
Mutant 134 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.indexOf('\n') === 0
Mutant 135 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.length === 0
Mutant 136 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') > 0
Mutant 137 in dirty.js: '\n' replaced with ';'
Mutant 138 in dirty.js: '\n' replaced with '\r\n'
Mutant 139 in dirty.js: '\n' replaced with '|'
Mutant 140 in dirty.js: '\n' replaced with ';'
Mutant 141 in dirty.js: '\n' replaced with ','
Mutant 142 in dirty.js: '\n' replaced with '\r\n'
Mutant 143 in dirty.js: !rowStr replaced with rowStr.length === 0
Mutant 144 in dirty.js: !rowStr replaced with rowStr === null
Mutant 145 in dirty.js: !rowStr replaced with rowStr === ''
Mutant 146 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('Empty lines are acceptable in a healthy database'))
Mutant 147 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('load', 0)
Mutant 148 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('Corrupted row detected'))
Mutant 149 in dirty.js: 'error' replaced with 'warning'
Mutant 150 in dirty.js: 'error' replaced with 'info'
Mutant 151 in dirty.js: 'error' replaced with 'critical'
Mutant 152 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Empty lines are acceptable in a healthy database')
Mutant 153 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Corrupted row detected')
Mutant 154 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Invalid row format')
Mutant 155 in dirty.js: rowStr replaced with rowStr.toUpperCase()
Mutant 156 in dirty.js: rowStr replaced with rowStr.split(',')
Mutant 157 in dirty.js: rowStr replaced with rowStr + 'extraData'
Mutant 158 in dirty.js: !('key' in row) replaced with row.key === undefined
Mutant 159 in dirty.js: !('key' in row) replaced with row.key == null
Mutant 160 in dirty.js: !('key' in row) replaced with row.hasOwnProperty('key')
Mutant 161 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Failed to parse row: ${row}`))
Mutant 162 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Could not load corrupted row: ${rowStr.toUpperCase()}`))
Mutant 163 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Row data is invalid: ${JSON.stringify(rowStr)}`))
Mutant 164 in dirty.js: 'error' replaced with 'warning'
Mutant 165 in dirty.js: 'error' replaced with 'info'
Mutant 166 in dirty.js: 'error' replaced with 'critical'
Mutant 167 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Failed to parse row: ${row}`)
Mutant 168 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Could not load corrupted row: ${JSON.stringify(row)}`)
Mutant 169 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Row data is invalid: ${rowStr.length}`)
Mutant 170 in dirty.js: row.val === undefined replaced with row.val === null
Mutant 171 in dirty.js: row.val === undefined replaced with row.val !== undefined && row.val !== null
Mutant 172 in dirty.js: row.val === undefined replaced with !row.val
Mutant 173 in dirty.js: row.key replaced with 'key'
Mutant 174 in dirty.js: row.key replaced with row.val
Mutant 175 in dirty.js: row.key replaced with undefined
Mutant 176 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, null)
Mutant 177 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(this._data.set(row.key, row.val + 1))
Mutant 178 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(this._data.set(row.key, this._data.get(row.key)))
Mutant 179 in dirty.js: row.key replaced with row.key + '1'
Mutant 180 in dirty.js: row.key replaced with row.val
Mutant 181 in dirty.js: row.key replaced with undefined
Mutant 182 in dirty.js: row.val replaced with row.val + 1
Mutant 183 in dirty.js: row.val replaced with null
Mutant 184 in dirty.js: row.val replaced with this._data.get('nonExistentKey')
Mutant 185 in dirty.js: buffer.length replaced with buffer === ''
Mutant 186 in dirty.js: buffer.length replaced with this._data.size === 0
Mutant 187 in dirty.js: buffer.length replaced with buffer.length > 10
Mutant 188 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row detected: ${buffer}`))
Mutant 189 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('load', new Error(`Corrupted row at the end of the db: ${buffer}`))
Mutant 190 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${this._data.size}`))
Mutant 191 in dirty.js: 'error' replaced with 'warning'
Mutant 192 in dirty.js: 'error' replaced with 'load'
Mutant 193 in dirty.js: 'error' replaced with 'data'
Mutant 194 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row detected: ${buffer}`)
Mutant 195 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 196 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.keys().length)
Mutant 197 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.get('nonexistentKey'))
Mutant 198 in dirty.js: this._data.size replaced with this._data.size + 1
Mutant 199 in dirty.js: this._data.size replaced with this._data.length
Mutant 200 in dirty.js: this._data.size replaced with this._data.keys().length
Mutant 201 in dirty.js: !this._queue.size replaced with this._queue.size > 0
Mutant 202 in dirty.js: !this._queue.size replaced with this._queue.size === 1
Mutant 203 in dirty.js: !this._queue.size replaced with this._inFlightWrites > 0
Mutant 204 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites > 0
Mutant 205 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites === 1
Mutant 206 in dirty.js: this._inFlightWrites <= 0 replaced with this._queue.size === 0
Mutant 207 in dirty.js: 'drain' replaced with 'error'
Mutant 208 in dirty.js: 'drain' replaced with 'write_close'
Mutant 209 in dirty.js: 'drain' replaced with 'load'
Mutant 210 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size === 0 && !this._waitForDrain
Mutant 211 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size > 0 && this._waitForDrain
Mutant 212 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size !== 0 || this._waitForDrain
Mutant 213 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 214 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._data) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 215 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.entries()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 216 in dirty.js: this._queue replaced with this._data
Mutant 217 in dirty.js: this._queue replaced with this._queue.size + 1
Mutant 218 in dirty.js: this._queue replaced with this._queue.keys()
Mutant 219 in dirty.js: this._queue.delete replaced with this._queue.add
Mutant 220 in dirty.js: this._queue.delete replaced with this._queue.clear
Mutant 221 in dirty.js: this._queue.delete replaced with this._queue.set
Mutant 222 in dirty.js: key replaced with this._data.keys().next().value
Mutant 223 in dirty.js: key replaced with null
Mutant 224 in dirty.js: key replaced with key + '1'
Mutant 225 in dirty.js: JSON.stringify replaced with JSON.parse
Mutant 226 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: null
}
Mutant 227 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key: this._data.get(key),
  val: this._data.get(key) + 1
}
Mutant 228 in dirty.js: key replaced with 'nonexistentKey'
Mutant 229 in dirty.js: key replaced with this._data.size
Mutant 230 in dirty.js: key replaced with key + '1'
Mutant 231 in dirty.js: !cbs.length && err != null replaced with cbs.length > 0 && err == null
Mutant 232 in dirty.js: !cbs.length && err != null replaced with !cbs.length || err === undefined
Mutant 233 in dirty.js: !cbs.length && err != null replaced with cbs.length === 0 && err != null
Mutant 234 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Write operation failed'))
Mutant 235 in dirty.js: this.emit('error', err) replaced with this.emit('warning', err)
Mutant 236 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 237 in dirty.js: 'error' replaced with 'warning'
Mutant 238 in dirty.js: 'error' replaced with 'info'
Mutant 239 in dirty.js: 'error' replaced with 'fail'
Mutant 240 in dirty.js: err replaced with null
Mutant 241 in dirty.js: err replaced with 'An error occurred'
Mutant 242 in dirty.js: err replaced with new Error('Write failed')
Mutant 243 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites > 0 || this._waitForDrain
Mutant 244 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites === 0 && this._waitForDrain
Mutant 245 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 && this._waitForDrain
Mutant 246 in dirty.js: 'drain' replaced with 'error'
Mutant 247 in dirty.js: 'drain' replaced with 'finish'
Mutant 248 in dirty.js: 'drain' replaced with 'load'
Mutant 249 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of this._queue) cb(err);
Mutant 250 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.slice(1)) cb(err);
Mutant 251 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.concat(null)) cb(err);
Mutant 252 in dirty.js: cbs replaced with null
Mutant 253 in dirty.js: cbs replaced with undefined
Mutant 254 in dirty.js: err replaced with true
Mutant 255 in dirty.js: err replaced with 'error'
Mutant 256 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
Mutant 257 in dirty.js: this._waitForDrain replaced with this._queue.size > 0
Mutant 258 in dirty.js: this._waitForDrain replaced with this._inFlightWrites > 0
[32m13:27:13 (2919) INFO Instrumenter[39m Instrumented 2 source file(s) with 259 mutant(s)
[32m13:27:13 (2919) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m13:27:14 (2919) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m13:27:14 (2919) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m13:27:14 (2919) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 327 ms, overhead 0 ms).
Mutation testing 9% (elapsed: <1m, remaining: ~1m) 25/259 tested (4 survived, 0 timed out)
Mutation testing 15% (elapsed: <1m, remaining: ~1m) 40/259 tested (6 survived, 0 timed out)
Mutation testing 27% (elapsed: <1m, remaining: ~1m) 70/259 tested (10 survived, 0 timed out)
Mutation testing 37% (elapsed: <1m, remaining: ~1m) 96/259 tested (28 survived, 0 timed out)
Mutation testing 43% (elapsed: <1m, remaining: ~1m) 113/259 tested (31 survived, 0 timed out)
Mutation testing 47% (elapsed: ~1m, remaining: ~1m) 124/259 tested (31 survived, 1 timed out)
Mutation testing 59% (elapsed: ~1m, remaining: <1m) 153/259 tested (49 survived, 2 timed out)
Mutation testing 71% (elapsed: ~1m, remaining: <1m) 186/259 tested (64 survived, 2 timed out)
Mutation testing 81% (elapsed: ~1m, remaining: <1m) 212/259 tested (83 survived, 2 timed out)
Mutation testing 86% (elapsed: ~1m, remaining: <1m) 224/259 tested (86 survived, 3 timed out)
Mutation testing 94% (elapsed: ~1m, remaining: <1m) 244/259 tested (96 survived, 3 timed out)
Mutation testing 94% (elapsed: ~2m, remaining: <1m) 245/259 tested (96 survived, 4 timed out)
Mutation testing 95% (elapsed: ~2m, remaining: <1m) 248/259 tested (96 survived, 6 timed out)

All tests
  ✓ All tests (killed 153)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:19
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.has(key) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get('unknownKey') || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(null) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key + '1') || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) cb();
+     this.emit('drain', 'extra data');
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) cb();
+     this.emit('drain', null);
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:5
-       this.set(key, undefined, cb);
+       this.set(key, undefined, null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:69:5
-       for (const [key, val] of this._data) {
-         if (fn(key, val) === false) break;
-       }
+       for (const [key, val] of this._data.entries()) {
+     if (fn(key, val) === false) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:69:30
-       for (const [key, val] of this._data) {
+       for (const [key, val] of this._data.entries()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:14
-       this.set(key, updater(this.get(key)), cb);
+       this.set(this._data.keys().next().value, updater(this.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:27
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this._data.has(key) ? this.get(key) : null), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:36
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(this._data.keys().next().value)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size > 1) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites < 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('error', () => this.emit('error', new Error('Close failed')));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._queue.clear());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.emit('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.on('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.removeListener('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('load', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('finish', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.emit('drain'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._waitForDrain = true);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.destroy()) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:28
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.destroySoon(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroySoon());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error('File not found'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('load', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('load', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('info', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.indexOf('\n') === 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.length === 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr === null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Empty lines are acceptable in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('load', 0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Corrupted row detected'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('warning', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('info', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('critical', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Empty lines are acceptable in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Corrupted row detected'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Invalid row format'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:133:32
-                 row = JSON.parse(rowStr);
+                 row = JSON.parse(rowStr.split(','));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.key === undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.key == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Failed to parse row: ${row}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Row data is invalid: ${JSON.stringify(rowStr)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warning', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('info', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('critical', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Failed to parse row: ${row}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Could not load corrupted row: ${JSON.stringify(row)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Row data is invalid: ${rowStr.length}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (!row.val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer.length > 10) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row detected: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('load', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${this._data.size}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('warning', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('load', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('data', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row detected: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size === 1) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites > 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites === 1) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._queue.size === 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('write_close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('load');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size === 0 && !this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size > 0 && this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:5
-       for (const [key, cbs] of this._queue) {
-         this._queue.delete(key);
-         const data = `${JSON.stringify({key, val: this._data.get(key)})}\n`;
-         ++this._inFlightWrites;
-         this._waitForDrain = !this._writeStream.write(data, (err) => {
-           if (!cbs.length && err != null) this.emit('error', err);
-           if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
-           for (const cb of cbs) cb(err);
-         });
-         if (this._waitForDrain) break;
-       }
+       for (const [key, cbs] of this._queue.entries()) {
+     this._queue.delete(key);
+     const data = `${JSON.stringify({
+       key,
+       val: this._data.get(key)
+     })}\n`;
+     ++this._inFlightWrites;
+     this._waitForDrain = !this._writeStream.write(data, err => {
+       if (!cbs.length && err != null) this.emit('error', err);
+       if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
+       for (const cb of cbs) cb(err);
+     });
+     if (this._waitForDrain) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:185:7
-         this._queue.delete(key);
+         this._queue.clear(key);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:185:26
-         this._queue.delete(key);
+         this._queue.delete(this._data.keys().next().value);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (cbs.length === 0 && err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Write operation failed'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('info', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('fail', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', 'An error occurred');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Write failed'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._queue.size > 0) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._inFlightWrites > 0) break;

Ran 0.97 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   61.78 |      153 |         7 |         99 |        0 |        0 |
 dirty.js |   61.78 |      153 |         7 |         99 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m13:29:33 (2919) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llmorpheus/llmorpheus/node-dirty/reports/mutation/mutation.html
[32m13:29:33 (2919) INFO MutationTestExecutor[39m Done in 2 minutes 20 seconds.

real	2m21.769s
user	1m24.454s
sys	0m15.867s
