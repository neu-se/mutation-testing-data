*** using precomputed mutations ***
[32m09:15:26 (2597) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m09:15:26 (2597) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m09:15:26 (2597) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m09:15:26 (2597) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m09:15:26 (2597) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m09:15:27 (2597) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 260 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with typeof val === 'undefined'
Mutant 1 in dirty.js: val === undefined replaced with val === undefined || val === null
Mutant 2 in dirty.js: val === undefined replaced with !val
Mutant 3 in dirty.js: key replaced with 0
Mutant 4 in dirty.js: key replaced with undefined
Mutant 5 in dirty.js: key replaced with Math.random()
Mutant 6 in dirty.js: key replaced with undefined
Mutant 7 in dirty.js: key replaced with this._data[key] = 42
Mutant 8 in dirty.js: val replaced with val + 1
Mutant 9 in dirty.js: val replaced with val ?? 42
Mutant 10 in dirty.js: this.path replaced with this._path
Mutant 11 in dirty.js: this.path replaced with this.path.toLowerCase()
Mutant 12 in dirty.js: this.path replaced with this.path.replace(/^/, '/')
Mutant 13 in dirty.js: key replaced with Math.random()
Mutant 14 in dirty.js: key replaced with key === null
Mutant 15 in dirty.js: key replaced with key.toString()
Mutant 16 in dirty.js: cb replaced with 1
Mutant 17 in dirty.js: cb replaced with !cbs
Mutant 18 in dirty.js: cb replaced with cbs.length
Mutant 19 in dirty.js: cbs.push replaced with cbs[cbs.length - 1] = cb
Mutant 20 in dirty.js: cb replaced with cb && cb()
Mutant 21 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, [cbs])
Mutant 22 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, cbs[0])
Mutant 23 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(undefined, cbs)
Mutant 24 in dirty.js: key replaced with key + 1
Mutant 25 in dirty.js: key replaced with key * 2
Mutant 26 in dirty.js: cbs replaced with cbs.shift()
Mutant 27 in dirty.js: cbs replaced with cbs.pop()
Mutant 28 in dirty.js: cbs replaced with cbs.filter(cb => !cb)
Mutant 29 in dirty.js: cb replaced with cb()
Mutant 30 in dirty.js: cb replaced with undefined
Mutant 31 in dirty.js: cb replaced with () => {}
Mutant 32 in dirty.js: 'drain' replaced with 'flush'
Mutant 33 in dirty.js: 'drain' replaced with ' '
Mutant 34 in dirty.js: 'drain' replaced with 'close'
Mutant 35 in dirty.js: key replaced with this._data.get(undefined)
Mutant 36 in dirty.js: key replaced with this._data.get(null)
Mutant 37 in dirty.js: key replaced with this._data.get(1)
Mutant 38 in dirty.js: this.set replaced with this.rm
Mutant 39 in dirty.js: this.set replaced with this.update
Mutant 40 in dirty.js: this.set replaced with this.get
Mutant 41 in dirty.js: key replaced with this.path
Mutant 42 in dirty.js: key replaced with this._data.get(key)
Mutant 43 in dirty.js: key replaced with key + 'Foo'
Mutant 44 in dirty.js: undefined replaced with null
Mutant 45 in dirty.js: undefined replaced with NaN
Mutant 46 in dirty.js: undefined replaced with "undefined"
Mutant 47 in dirty.js: cb replaced with undefined
Mutant 48 in dirty.js: cb replaced with null
Mutant 49 in dirty.js: cb replaced with function () {}
Mutant 50 in dirty.js: this._data replaced with this._queue
Mutant 51 in dirty.js: this._data replaced with this._data.keys()
Mutant 52 in dirty.js: this._data replaced with this._data.values()
Mutant 53 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== false
Mutant 54 in dirty.js: fn(key, val) === false replaced with val !== fn(key, val)
Mutant 55 in dirty.js: fn(key, val) === false replaced with fn(key, val) === true
Mutant 56 in dirty.js: fn(key, val) replaced with fn([key, val])
Mutant 57 in dirty.js: fn(key, val) replaced with fn(key, val.toUpperCase())
Mutant 58 in dirty.js: fn(key, val) replaced with fn(key + 1, val)
Mutant 59 in dirty.js: fn replaced with undefined
Mutant 60 in dirty.js: key replaced with key + 1
Mutant 61 in dirty.js: key replaced with val + 1
Mutant 62 in dirty.js: key replaced with key * 2 + 1
Mutant 63 in dirty.js: val replaced with [key]
Mutant 64 in dirty.js: val replaced with null
Mutant 65 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(this._data.set(key, updater(this.get(key)), cb))
Mutant 66 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(this._data.set(key, updater(this.get(key), cb)))
Mutant 67 in dirty.js: this.set replaced with this.update
Mutant 68 in dirty.js: this.set replaced with this._set
Mutant 69 in dirty.js: key replaced with console.log(key)
Mutant 70 in dirty.js: key replaced with key + 1
Mutant 71 in dirty.js: this.get(key) replaced with this._data.get(key)
Mutant 72 in dirty.js: this.get(key) replaced with this.get(key) + 1
Mutant 73 in dirty.js: this.get(key) replaced with Math.random()
Mutant 74 in dirty.js: this.get replaced with undefined
Mutant 75 in dirty.js: this.get replaced with null
Mutant 76 in dirty.js: key replaced with key !== null
Mutant 77 in dirty.js: key replaced with !key
Mutant 78 in dirty.js: key replaced with key.toString()
Mutant 79 in dirty.js: cb replaced with null
Mutant 80 in dirty.js: cb replaced with undefined
Mutant 81 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites > 0
Mutant 82 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with !this._queue.size || !this._inFlightWrites > 0
Mutant 83 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('data')
Mutant 84 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('error')
Mutant 85 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('write')
Mutant 86 in dirty.js: this.once replaced with this.set
Mutant 87 in dirty.js: this.once replaced with this._data.length
Mutant 88 in dirty.js: 'drain' replaced with 'stored'
Mutant 89 in dirty.js: 'drain' replaced with 'flush'
Mutant 90 in dirty.js: 'drain' replaced with 'error'
Mutant 91 in dirty.js: () => this.close() replaced with () => this.close(true)
Mutant 92 in dirty.js: () => this.close() replaced with () => this.close(false)
Mutant 93 in dirty.js: () => this.close() replaced with () => this.closeAfter(5000)
Mutant 94 in dirty.js: this._readStream replaced with this._writeStream.on('end', () => {
  if (buffer.length) {
    this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
  }
  this.emit('load', this._data.size);
})
Mutant 95 in dirty.js: this._readStream replaced with this._writeStream.on('error', () => {
  this.emit('error', new Error('Error writing to the database'));
})
Mutant 96 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end()
Mutant 97 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.write("error", () => this._writeStream.destroy())
Mutant 98 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.on("finish", () => this._writeStream.destroy())
Mutant 99 in dirty.js: !this.path replaced with !this.badPath
Mutant 100 in dirty.js: !this.path replaced with this.badPath !== undefined
Mutant 101 in dirty.js: !this.path replaced with this.path && this._load()
Mutant 102 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 103 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 104 in dirty.js: this.emit('load', 0) replaced with this.emit('load', NaN)
Mutant 105 in dirty.js: this.emit replaced with this.error
Mutant 106 in dirty.js: this.emit replaced with this.on
Mutant 107 in dirty.js: this.emit replaced with this.off
Mutant 108 in dirty.js: 'load' replaced with 'error'
Mutant 109 in dirty.js: 'load' replaced with 'foo'
Mutant 110 in dirty.js: 'load' replaced with 'load\''
Mutant 111 in dirty.js: err.code === 'ENOENT' replaced with err.code != 'ENOENT'
Mutant 112 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EINVAL'
Mutant 113 in dirty.js: this.emit('load', 0) replaced with this.emit('error', new Error('Failed to load database'))
Mutant 114 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 115 in dirty.js: this.emit('load', 0) replaced with this.emit('load')
Mutant 116 in dirty.js: this.emit replaced with this.emit = null
Mutant 117 in dirty.js: this.emit replaced with this.emit = undefined
Mutant 118 in dirty.js: 'load' replaced with 'close'
Mutant 119 in dirty.js: 'load' replaced with 'error'
Mutant 120 in dirty.js: 'load' replaced with '_flush'
Mutant 121 in dirty.js: 0 replaced with this._data.size - 1
Mutant 122 in dirty.js: 0 replaced with -1
Mutant 123 in dirty.js: this.emit('error', err) replaced with this.emit('drain', err)
Mutant 124 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 125 in dirty.js: this.emit('error', err) replaced with this.emit('drain', null)
Mutant 126 in dirty.js: 'error' replaced with 'warning'
Mutant 127 in dirty.js: 'error' replaced with ' '
Mutant 128 in dirty.js: err replaced with "error"
Mutant 129 in dirty.js: err replaced with null
Mutant 130 in dirty.js: err replaced with undefined
Mutant 131 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') === -2
Mutant 132 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('a') === -1
Mutant 133 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.length === 0
Mutant 134 in dirty.js: '\n' replaced with '\t'
Mutant 135 in dirty.js: '\n' replaced with ''
Mutant 136 in dirty.js: '\n' replaced with '!'
Mutant 137 in dirty.js: buffer.split replaced with buffer.slice
Mutant 138 in dirty.js: buffer.split replaced with buffer.replace
Mutant 139 in dirty.js: buffer.split replaced with buffer.reverse
Mutant 140 in dirty.js: '\n' replaced with '*'
Mutant 141 in dirty.js: '\n' replaced with ' '
Mutant 142 in dirty.js: '\n' replaced with 'John Doe'
Mutant 143 in dirty.js: !rowStr replaced with rowStr.length == 0
Mutant 144 in dirty.js: !rowStr replaced with rowStr === ''
Mutant 145 in dirty.js: !rowStr replaced with rowStr.trim() === ''
Mutant 146 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('The database contains an empty line'))
Mutant 147 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error(`The database contains an empty line (key: ${key}, value: ${val})`))
Mutant 148 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error(`The database contains an empty line (queue size: ${this._queue.size})`))
Mutant 149 in dirty.js: this.emit replaced with this.emission
Mutant 150 in dirty.js: this.emit replaced with message.emit
Mutant 151 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with () => {
  throw new Error('Empty lines never appear in a healthy database');
}
Mutant 152 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new TypeError('Empty lines never appear in a healthy database')
Mutant 153 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Empty lines never appear in a healthy database' + 1)
Mutant 154 in dirty.js: rowStr replaced with rowStr + rowStr
Mutant 155 in dirty.js: rowStr replaced with rowStr.toUpperCase()
Mutant 156 in dirty.js: rowStr replaced with JSON.parse(rowStr.slice(1))
Mutant 157 in dirty.js: !('key' in row) replaced with 'key' in row
Mutant 158 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Could not parse row: ${row}`))
Mutant 159 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error('Could not parse row'))
Mutant 160 in dirty.js: this.emit replaced with this.emitError
Mutant 161 in dirty.js: this.emit replaced with this.emitWarning
Mutant 162 in dirty.js: this.emit replaced with console.log
Mutant 163 in dirty.js: 'error' replaced with 'error', new Error('Could not load corrupted row: ' + rowStr)
Mutant 164 in dirty.js: 'error' replaced with 'error', new Error('Could not load corrupted row: ' + rowStr.trim())
Mutant 165 in dirty.js: 'error' replaced with 'error', new Error('Could not load corrupted row: ' + rowStr.substring(1))
Mutant 166 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer}`)
Mutant 167 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Invalid JSON in database: ${buffer}`)
Mutant 168 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Corrupted database: ${buffer}`)
Mutant 169 in dirty.js: row.val === undefined replaced with row.val !== undefined
Mutant 170 in dirty.js: row.val === undefined replaced with row.val == null
Mutant 171 in dirty.js: row.val === undefined replaced with row.val === null
Mutant 172 in dirty.js: row.key replaced with row.val
Mutant 173 in dirty.js: row.key replaced with row.key === null
Mutant 174 in dirty.js: row.key replaced with this.get(row.key)
Mutant 175 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.val, row.val)
Mutant 176 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.key)
Mutant 177 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.val * 2)
Mutant 178 in dirty.js: row.val replaced with row.key
Mutant 179 in dirty.js: row.val replaced with "undefined"
Mutant 180 in dirty.js: row.val replaced with null
Mutant 181 in dirty.js: buffer.length replaced with 0
Mutant 182 in dirty.js: buffer.length replaced with null
Mutant 183 in dirty.js: buffer.length replaced with ''
Mutant 184 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(1)}`))
Mutant 185 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${null}`))
Mutant 186 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${undefined}`))
Mutant 187 in dirty.js: this.emit replaced with this._emit
Mutant 188 in dirty.js: 'error' replaced with 'half-open'
Mutant 189 in dirty.js: 'error' replaced with 'close'
Mutant 190 in dirty.js: 'error' replaced with 'end'
Mutant 191 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the start of the db: ${buffer}`)
Mutant 192 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new SyntaxError(`Corrupted row at line ${buffer.length}: ${buffer}`)
Mutant 193 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error('Unexpected end of file')
Mutant 194 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.length)
Mutant 195 in dirty.js: this.emit('load', this._data.size) replaced with this.emit(`load`, 0)
Mutant 196 in dirty.js: this.emit('load', this._data.size) replaced with this.emit(`'load', 'fail'`)
Mutant 197 in dirty.js: 'load' replaced with `load_fail`
Mutant 198 in dirty.js: 'load' replaced with `load_success`
Mutant 199 in dirty.js: 'load' replaced with `fail`
Mutant 200 in dirty.js: this._data.size replaced with this._data.length
Mutant 201 in dirty.js: this._data.size replaced with this._data.keys().length
Mutant 202 in dirty.js: this._data.size replaced with this._data.values().length
Mutant 203 in dirty.js: 'read_close' replaced with `error`
Mutant 204 in dirty.js: 'read_close' replaced with `close`
Mutant 205 in dirty.js: 'read_close' replaced with `drain`
Mutant 206 in dirty.js: !this._queue.size replaced with this._queue.size > 0
Mutant 207 in dirty.js: !this._queue.size replaced with this._queue.size !== 0
Mutant 208 in dirty.js: !this._queue.size replaced with this._queue.length > 0
Mutant 209 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites >= 1
Mutant 210 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites === 0
Mutant 211 in dirty.js: this._inFlightWrites <= 0 replaced with this._queue.size <= 0
Mutant 212 in dirty.js: 'drain' replaced with 'error'
Mutant 213 in dirty.js: 'drain' replaced with 'data'
Mutant 214 in dirty.js: 'drain' replaced with 'end'
Mutant 215 in dirty.js: 'write_close' replaced with 'write_error'
Mutant 216 in dirty.js: 'write_close' replaced with 'read_error'
Mutant 217 in dirty.js: 'write_close' replaced with 'data_error'
Mutant 218 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size > 0 && !this._waitForDrain
Mutant 219 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size === 0 && this._waitForDrain
Mutant 220 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.entries()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 221 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of Object.entries(this._queue)) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 222 in dirty.js: this._queue replaced with this._data
Mutant 223 in dirty.js: this._queue replaced with this._writeStream
Mutant 224 in dirty.js: this._queue replaced with this.path
Mutant 225 in dirty.js: key replaced with key + '_bug'
Mutant 226 in dirty.js: key replaced with Math.random() * 100
Mutant 227 in dirty.js: key replaced with undefined
Mutant 228 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: null
}
Mutant 229 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) + 1
}
Mutant 230 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) - 1
}
Mutant 231 in dirty.js: this._data.get replaced with this._data.size
Mutant 232 in dirty.js: key replaced with key + 1
Mutant 233 in dirty.js: key replaced with undefined
Mutant 234 in dirty.js: key replaced with ''
Mutant 235 in dirty.js: !cbs.length && err != null replaced with err != null
Mutant 236 in dirty.js: !cbs.length && err != null replaced with cbs.length && err != null
Mutant 237 in dirty.js: !cbs.length && err != null replaced with !cbs.length && err == null
Mutant 238 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Something is wrong'))
Mutant 239 in dirty.js: this.emit('error', err) replaced with this.emit('error', err, 0)
Mutant 240 in dirty.js: this.emit('error', err) replaced with this.emit('error', err, 1)
Mutant 241 in dirty.js: this.emit replaced with this.emits
Mutant 242 in dirty.js: this.emit replaced with console.log
Mutant 243 in dirty.js: err replaced with undefined
Mutant 244 in dirty.js: err replaced with 0
Mutant 245 in dirty.js: err replaced with null
Mutant 246 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 && !this._waitForDrain
Mutant 247 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with !this._writeStream.writable
Mutant 248 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._queue.getLength() > 0
Mutant 249 in dirty.js: 'drain' replaced with 'write'
Mutant 250 in dirty.js: 'drain' replaced with 'close'
Mutant 251 in dirty.js: 'drain' replaced with 'flush'
Mutant 252 in dirty.js: cbs replaced with cbs.reverse()
Mutant 253 in dirty.js: cbs replaced with cbs.length
Mutant 254 in dirty.js: cbs replaced with cbs.pop()
Mutant 255 in dirty.js: err replaced with null
Mutant 256 in dirty.js: err replaced with err.message
Mutant 257 in dirty.js: err replaced with 5
Mutant 258 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
Mutant 259 in dirty.js: this._waitForDrain replaced with this._inFlightWrites > 0
[32m09:15:27 (2597) INFO Instrumenter[39m Instrumented 2 source file(s) with 260 mutant(s)
[32m09:15:27 (2597) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m09:15:28 (2597) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m09:15:28 (2597) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m09:15:28 (2597) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 525 ms, overhead 1 ms).
Mutation testing 6% (elapsed: <1m, remaining: ~2m) 17/260 tested (7 survived, 0 timed out)
Mutation testing 10% (elapsed: <1m, remaining: ~2m) 28/260 tested (7 survived, 0 timed out)
Mutation testing 12% (elapsed: <1m, remaining: ~3m) 33/260 tested (7 survived, 0 timed out)
Mutation testing 17% (elapsed: <1m, remaining: ~3m) 45/260 tested (7 survived, 0 timed out)
Mutation testing 24% (elapsed: <1m, remaining: ~2m) 64/260 tested (11 survived, 0 timed out)
Mutation testing 31% (elapsed: ~1m, remaining: ~2m) 82/260 tested (18 survived, 0 timed out)
Mutation testing 38% (elapsed: ~1m, remaining: ~1m) 99/260 tested (26 survived, 0 timed out)
Mutation testing 41% (elapsed: ~1m, remaining: ~1m) 109/260 tested (26 survived, 0 timed out)
Mutation testing 45% (elapsed: ~1m, remaining: ~1m) 118/260 tested (26 survived, 2 timed out)
Mutation testing 46% (elapsed: ~1m, remaining: ~1m) 120/260 tested (26 survived, 3 timed out)
Mutation testing 52% (elapsed: ~1m, remaining: ~1m) 136/260 tested (38 survived, 4 timed out)
Mutation testing 59% (elapsed: ~2m, remaining: ~1m) 155/260 tested (49 survived, 4 timed out)
Mutation testing 66% (elapsed: ~2m, remaining: ~1m) 174/260 tested (61 survived, 4 timed out)
Mutation testing 74% (elapsed: ~2m, remaining: <1m) 194/260 tested (74 survived, 4 timed out)
Mutation testing 75% (elapsed: ~2m, remaining: <1m) 197/260 tested (74 survived, 5 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 199/260 tested (74 survived, 7 timed out)
Mutation testing 80% (elapsed: ~2m, remaining: <1m) 210/260 tested (79 survived, 8 timed out)
Mutation testing 83% (elapsed: ~3m, remaining: <1m) 218/260 tested (84 survived, 8 timed out)
Mutation testing 85% (elapsed: ~3m, remaining: <1m) 221/260 tested (86 survived, 9 timed out)
Mutation testing 87% (elapsed: ~3m, remaining: <1m) 227/260 tested (86 survived, 10 timed out)
Mutation testing 93% (elapsed: ~3m, remaining: <1m) 244/260 tested (94 survived, 10 timed out)
Mutation testing 95% (elapsed: ~3m, remaining: <1m) 247/260 tested (96 survived, 11 timed out)
Mutation testing 96% (elapsed: ~3m, remaining: <1m) 250/260 tested (96 survived, 13 timed out)
Mutation testing 96% (elapsed: ~4m, remaining: <1m) 251/260 tested (96 survived, 14 timed out)

All tests
  ✓ All tests (killed 145)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (typeof val === 'undefined') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val === undefined || val === null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (!val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:31:27
-         this._data.set(key, val);
+         this._data.set(key, val ?? 42);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(Math.random()) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key === null) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key.toString()) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, function () {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, val) === true) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(this._data.set(key, updater(this.get(key)), cb));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(this._data.set(key, updater(this.get(key), cb)));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:27
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this._data.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:36
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key.toString())), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.set('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('stored', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('flush', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(false));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.on("finish", () => this._writeStream.destroy()));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('drain', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('drain', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit(' ', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', "error");

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('\n') === -2) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('a') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.length === 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:33
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.length == 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.trim() === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('The database contains an empty line'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(`The database contains an empty line (key: ${key}, value: ${val})`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(`The database contains an empty line (queue size: ${this._queue.size})`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emission('error', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 message.emit('error', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', () => {
+     throw new Error('Empty lines never appear in a healthy database');
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new TypeError('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Empty lines never appear in a healthy database' + 1));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Could not parse row: ${row}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error('Could not parse row'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emitError('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emitWarning('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 console.log('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error('Could not load corrupted row: ' + rowStr), new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error('Could not load corrupted row: ' + rowStr.trim()), new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error('Could not load corrupted row: ' + rowStr.substring(1)), new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Invalid JSON in database: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted database: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if ('') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${null}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${undefined}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this._emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('half-open', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('close', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the start of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new SyntaxError(`Corrupted row at line ${buffer.length}: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error('Unexpected end of file'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit(`close`);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size !== 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.length > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites >= 1) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites === 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._queue.size <= 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('data');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('end');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size === 0 && this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:5
-       for (const [key, cbs] of this._queue) {
-         this._queue.delete(key);
-         const data = `${JSON.stringify({key, val: this._data.get(key)})}\n`;
-         ++this._inFlightWrites;
-         this._waitForDrain = !this._writeStream.write(data, (err) => {
-           if (!cbs.length && err != null) this.emit('error', err);
-           if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
-           for (const cb of cbs) cb(err);
-         });
-         if (this._waitForDrain) break;
-       }
+       for (const [key, cbs] of this._queue.entries()) {
+     this._queue.delete(key);
+     const data = `${JSON.stringify({
+       key,
+       val: this._data.get(key)
+     })}\n`;
+     ++this._inFlightWrites;
+     this._waitForDrain = !this._writeStream.write(data, err => {
+       if (!cbs.length && err != null) this.emit('error', err);
+       if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
+       for (const cb of cbs) cb(err);
+     });
+     if (this._waitForDrain) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (cbs.length && err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Something is wrong'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err, 0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err, 1);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emits('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) console.log('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', 0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._inFlightWrites > 0) break;

Ran 0.94 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   61.54 |      145 |        15 |        100 |        0 |        0 |
 dirty.js |   61.54 |      145 |        15 |        100 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m09:19:33 (2597) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m09:19:33 (2597) INFO MutationTestExecutor[39m Done in 4 minutes 7 seconds.

real	4m8.759s
user	2m14.840s
sys	0m23.909s
