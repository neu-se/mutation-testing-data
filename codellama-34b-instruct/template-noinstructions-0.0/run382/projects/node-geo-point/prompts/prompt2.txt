Your task is to apply mutation testing to the following code:
```
const deg2rad = require('compute-deg2rad');
const rad2deg = require('compute-rad2deg');

const cos = Math.cos;
const asin = Math.asin;
const sin = Math.sin;
const acos = Math.acos;
const atan2 = Math.atan2;
const radius = 6371e3;

const isObject = (input) => typeof input === 'object' && input !== null;

export type Point = {
  type: 'Point';
  coordinates: [longitude: number, latitude: number];
};

export type LatLng = {
  latitude: number;
  longitude: number;
};

export type Tile = {
  x: number;
  y: number;
};

export class GeoPoint {
  readonly latitude: number;
  readonly longitude: number;

  /**
   *
   * @param latitude
   * @param longitude
   */
  constructor(latitude: number, longitude: number) {
    if (typeof latitude !== 'number' || typeof longitude !== 'number') {
      throw new RangeError('Bad geo point arguments');
    }

    if (<PLACEHOLDER>) {
      throw new RangeError('bad latitude value');
    }

    if (longitude < -180 || longitude > 180) {
      throw new RangeError('bad longitude value');
    }

    this.latitude = latitude;
    this.longitude = longitude;
  }

  /**
   *
   * @param point {{type: String, coordinates: Array}}
   * @returns {GeoPoint}
   */
  static fromGeoJSON(point: Point): GeoPoint {
    if (!isObject(point)) {
      throw new TypeError('GeoPoint: Argument must be an object');
    }

    if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {
      throw new TypeError('Object must have type and coordinates');
    }

    if (point.type !== 'Point') {
      throw new TypeError('The value of type should be \'Point\'');
    }

    if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {
      throw new TypeError('coordinates must be an array and contain 2 elements');
    }

    return this.fromLngLatArray(point.coordinates);
  }

  /**
   *
   * @param object {{latitude: Number, longitude: Number}}
   * @returns {GeoPoint}
   */
  static fromObject(object: LatLng): GeoPoint {
    if (!isObject(object)) {
      throw new TypeError('GeoPoint: Argument must be an object');
    }

    if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {
      throw new TypeError('Object must have latitude and longitude');
    }

    return new GeoPoint(object.latitude, object.longitude);
  }

  /**
   *
   * @param point1
   * @param point2
   * @returns {number}
   */
  static calculateDistance(point1: GeoPoint, point2: GeoPoint): number {
    const point1Rad = deg2rad(point1.latitude);
    const point2Rad = deg2rad(point2.latitude);
    const a = deg2rad(point2.longitude) - deg2rad(point1.longitude);
    const b = cos(point1Rad) * cos(point2Rad) * cos(a);
    const c = sin(point1Rad) * sin(point2Rad);
    const r = b + c;

    return acos(r > 1 ? 1 : r) * 6371392.896;
  }

  /**
   *
   * @param point1 {GeoPoint}
   * @param point2 {GeoPoint}
   * @returns {number}
   */
  static calculateBearing(point1: GeoPoint, point2: GeoPoint): number {
    const φ1 = deg2rad(point1.latitude), φ2 = deg2rad(point2.latitude);
    const Δλ = deg2rad(point2.longitude - point1.longitude);

    // see http://mathforum.org/library/drmath/view/55417.html
    const y = sin(Δλ) * cos(φ2);
    const x = cos(φ1) * sin(φ2) - sin(φ1) * cos(φ2) * cos(Δλ);
    const θ = atan2(y, x);

    return (rad2deg(θ) + 360) % 360;
  }

  /**
   *
   * @param coordinate {GeoPoint}
   * @param distance {Number} distance in meters
   * @param bearing {Number} bearing in degrees
   * @returns {GeoPoint}
   */
  static calculateDestination(coordinate: LatLng, distance: number, bearing: number): GeoPoint {
    // sinφ2 = sinφ1⋅cosδ + cosφ1⋅sinδ⋅cosθ
    // tanΔλ = sinθ⋅sinδ⋅cosφ1 / cosδ−sinφ1⋅sinφ2
    // see http://williams.best.vwh.net/avform.htm#LL
```

by replacing the PLACEHOLDER with a buggy code fragment that has different
behavior than the original code fragment, which was:
```
latitude < -90 || latitude > 90
```  

Provide three answers as fenced code blocks containing a single line of code,
using the following template:

Option 1: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 2: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 3: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Please conclude your response with "DONE."