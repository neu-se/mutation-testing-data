*** using precomputed mutations ***
[32m09:41:50 (2831) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m09:41:50 (2831) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m09:41:50 (2831) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m09:41:50 (2831) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m09:41:50 (2831) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m09:41:51 (2831) INFO ProjectReader[39m Found 1 of 1982 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 1042 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in complex.js: x replaced with x + 1
Mutant 1 in complex.js: x replaced with x - 1
Mutant 2 in complex.js: x replaced with x * 2
Mutant 3 in complex.js: Math.exp replaced with Math.log
Mutant 4 in complex.js: Math.exp replaced with Math.sin
Mutant 5 in complex.js: Math.exp replaced with Math.cos
Mutant 6 in complex.js: Math.exp replaced with 1 - x
Mutant 7 in complex.js: -x replaced with 0
Mutant 8 in complex.js: -x replaced with 2
Mutant 9 in complex.js: -x replaced with -2
Mutant 10 in complex.js: Math.abs replaced with Math.sqrt
Mutant 11 in complex.js: x replaced with 1 + x
Mutant 12 in complex.js: x replaced with x * x
Mutant 13 in complex.js: x replaced with 2 * x
Mutant 14 in complex.js: x replaced with x + 1
Mutant 15 in complex.js: x replaced with x * 2
Mutant 16 in complex.js: x replaced with x / 2
Mutant 17 in complex.js: Math.exp replaced with Math.sin
Mutant 18 in complex.js: Math.exp replaced with Math.tan
Mutant 19 in complex.js: Math.exp replaced with Math.atan
Mutant 20 in complex.js: -x replaced with x
Mutant 21 in complex.js: -x replaced with y
Mutant 22 in complex.js: -x replaced with a + b
Mutant 23 in complex.js: -b > x || x > b replaced with b == x
Mutant 24 in complex.js: -b > x || x > b replaced with x * (x - b) > 0
Mutant 25 in complex.js: -b > x || x > b replaced with cos(x) + sin(x) > 0
Mutant 26 in complex.js: Math.cos replaced with Math.sin
Mutant 27 in complex.js: Math.cos replaced with Math.sqrt
Mutant 28 in complex.js: Math.cos replaced with Math.random
Mutant 29 in complex.js: x replaced with -x
Mutant 30 in complex.js: x replaced with x + 1
Mutant 31 in complex.js: x replaced with 2 * x
Mutant 32 in complex.js: Math.abs replaced with -a
Mutant 33 in complex.js: Math.abs replaced with a * 2
Mutant 34 in complex.js: Math.abs replaced with a + 1
Mutant 35 in complex.js: x replaced with 1 / x
Mutant 36 in complex.js: x replaced with x * 2
Mutant 37 in complex.js: x replaced with x + 1
Mutant 38 in complex.js: Math.abs replaced with Math.acos
Mutant 39 in complex.js: y replaced with 1
Mutant 40 in complex.js: y replaced with Math.PI
Mutant 41 in complex.js: y replaced with x
Mutant 42 in complex.js: a < 3000 && b < 3000 replaced with a < 1000000000 && b < 1000000000
Mutant 43 in complex.js: a < 3000 && b < 3000 replaced with a < b && b < 3000
Mutant 44 in complex.js: a < 3000 && b < 3000 replaced with a < b && b < a
Mutant 45 in complex.js: Math.sqrt replaced with a * a - b * b
Mutant 46 in complex.js: Math.sqrt replaced with a * b
Mutant 47 in complex.js: Math.sqrt replaced with a / b
Mutant 48 in complex.js: Math.sqrt replaced with Math.floor
Mutant 49 in complex.js: Math.sqrt replaced with Math.ceil
Mutant 50 in complex.js: Math.sqrt replaced with Math.random
Mutant 51 in complex.js: 1 + b * b replaced with b * b - 1
Mutant 52 in complex.js: 1 + b * b replaced with b * b - a
Mutant 53 in complex.js: 1 + b * b replaced with Math.random() * b * b
Mutant 54 in complex.js: 'Invalid Param' replaced with 'Invalid input'
Mutant 55 in complex.js: 'Invalid Param' replaced with 'Incoherent input'
Mutant 56 in complex.js: 'Invalid Param' replaced with 'Error parsing input'
Mutant 57 in complex.js: Math.abs replaced with a + 1
Mutant 58 in complex.js: Math.abs replaced with a + 0
Mutant 59 in complex.js: a replaced with b - a
Mutant 60 in complex.js: a replaced with a + 1
Mutant 61 in complex.js: a replaced with a * Math.PI
Mutant 62 in complex.js: Math.abs replaced with Math.sin
Mutant 63 in complex.js: Math.abs replaced with x => x
Mutant 64 in complex.js: Math.abs replaced with x => x * x
Mutant 65 in complex.js: b replaced with 0
Mutant 66 in complex.js: b replaced with 1
Mutant 67 in complex.js: b replaced with null
Mutant 68 in complex.js: _b replaced with a
Mutant 69 in complex.js: _b replaced with a + b
Mutant 70 in complex.js: _b replaced with a * b
Mutant 71 in complex.js: b === 0 replaced with a === 0
Mutant 72 in complex.js: b === 0 replaced with b === 1
Mutant 73 in complex.js: b === 0 replaced with a >= b
Mutant 74 in complex.js: Math.log replaced with Math.atan
Mutant 75 in complex.js: Math.log replaced with Number.isNaN
Mutant 76 in complex.js: Math.log replaced with Math.random
Mutant 77 in complex.js: _a < 3000 && _b < 3000 replaced with _a < 3000 || _b < 3000
Mutant 78 in complex.js: _a < 3000 && _b < 3000 replaced with _a < 3000 !== _b < 3000
Mutant 79 in complex.js: _a < 3000 && _b < 3000 replaced with _a < 3000 ^ _b < 3000
Mutant 80 in complex.js: Math.log replaced with Math.exp
Mutant 81 in complex.js: Math.log replaced with Math.sin
Mutant 82 in complex.js: Math.log replaced with Math.cos
Mutant 83 in complex.js: a * a + b * b replaced with a * b + b * a
Mutant 84 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 85 in complex.js: a * a + b * b replaced with a * a + 2 * b * b
Mutant 86 in complex.js: a * a + b * b replaced with a * a * a + b * b
Mutant 87 in complex.js: a * a + b * b replaced with 2 * a * b + b * b
Mutant 88 in complex.js: a * a + b * b replaced with a * b + a * b
Mutant 89 in complex.js: a === undefined || a === null replaced with a == undefined || a == null
Mutant 90 in complex.js: a === undefined || a === null replaced with a != undefined || a != null
Mutant 91 in complex.js: a === undefined || a === null replaced with a && b
Mutant 92 in complex.js: b !== undefined replaced with a !== b || b !== undefined
Mutant 93 in complex.js: b !== undefined replaced with !(a > b)
Mutant 94 in complex.js: b !== undefined replaced with !(a < b)
Mutant 95 in complex.js: typeof a replaced with a + 'foo'
Mutant 96 in complex.js: typeof a replaced with a && true
Mutant 97 in complex.js: typeof a replaced with a * 2
Mutant 98 in complex.js: 'im' in a && 're' in a replaced with !('im' in a && 're' in a)
Mutant 99 in complex.js: 'im' in a && 're' in a replaced with 'im' in a || 're' in a
Mutant 100 in complex.js: 'im' in a && 're' in a replaced with a === null || !('im' in a && 're' in a)
Mutant 101 in complex.js: 'abs' in a && 'arg' in a replaced with 're' in a || 'im' in a
Mutant 102 in complex.js: 'abs' in a && 'arg' in a replaced with 'abs' in a && 'arg' in b
Mutant 103 in complex.js: 'abs' in a && 'arg' in a replaced with a['abs'] > 0 && a['arg'] > 0
Mutant 104 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with a['abs'] < 0 && a['arg'] < a['abs']
Mutant 105 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with a['abs'] <= 0 && a['arg'] <= a['abs']
Mutant 106 in complex.js: Number.isFinite replaced with a['abs'] = a['arg']
Mutant 107 in complex.js: Number.isFinite replaced with a['abs'] = NaN
Mutant 108 in complex.js: a['abs'] replaced with a['im']
Mutant 109 in complex.js: a['abs'] replaced with a['re']
Mutant 110 in complex.js: a['abs'] replaced with a['re'] * Math.sin(a['im'])
Mutant 111 in complex.js: Number.isFinite replaced with !Number.isFinite
Mutant 112 in complex.js: Number.isFinite replaced with Number.isNaN
Mutant 113 in complex.js: a['arg'] replaced with a['arg'] * 1000
Mutant 114 in complex.js: a['arg'] replaced with a['arg'] * -1
Mutant 115 in complex.js: a['arg'] replaced with a['arg'] + 3.14
Mutant 116 in complex.js: Math.cos replaced with Math.atan
Mutant 117 in complex.js: Math.cos replaced with Math.tan
Mutant 118 in complex.js: Math.cos replaced with Math.acos
Mutant 119 in complex.js: a['arg'] replaced with a['arg'] * 2
Mutant 120 in complex.js: a['arg'] replaced with a['arg'].toFixed(2)
Mutant 121 in complex.js: a['arg'] replaced with Math.sqrt(a['arg'])
Mutant 122 in complex.js: Math.sin replaced with Math.cos
Mutant 123 in complex.js: Math.sin replaced with z.im
Mutant 124 in complex.js: Math.sin replaced with a * b
Mutant 125 in complex.js: 'r' in a && 'phi' in a replaced with 'r' in a && 'theta' in a
Mutant 126 in complex.js: 'r' in a && 'phi' in a replaced with 'r' in a || 'phi' in a
Mutant 127 in complex.js: 'r' in a && 'phi' in a replaced with 'r' in a && 'phi' in a && (a.phi === 0 || a.r === 0)
Mutant 128 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with a['r'] > 1000 && a['phi'] < -Math.PI
Mutant 129 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with a['r'] > 0 && a['phi'] < -Math.PI
Mutant 130 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with a['r'] < 0 && a['phi'] > Math.PI
Mutant 131 in complex.js: Number.isFinite replaced with typeof a === "number"
Mutant 132 in complex.js: Number.isFinite replaced with a !== Infinity
Mutant 133 in complex.js: a['r'] replaced with b['r']
Mutant 134 in complex.js: a['r'] replaced with a['z']
Mutant 135 in complex.js: a['r'] replaced with a.r
Mutant 136 in complex.js: a['phi'] replaced with a['ARG']
Mutant 137 in complex.js: a['phi'] replaced with a['arg'] = null
Mutant 138 in complex.js: a['phi'] replaced with a['arg'] = 0
Mutant 139 in complex.js: Math.cos replaced with 1 + Math.cos
Mutant 140 in complex.js: Math.cos replaced with Math.sqrt
Mutant 141 in complex.js: a['phi'] replaced with a['pi']
Mutant 142 in complex.js: a['phi'] replaced with a['phi'] * 2
Mutant 143 in complex.js: a['phi'] replaced with Math.cos(a['phi'])
Mutant 144 in complex.js: Math.sin replaced with Math.cos
Mutant 145 in complex.js: Math.sin replaced with Math.tan
Mutant 146 in complex.js: Math.sin replaced with Math.asin
Mutant 147 in complex.js: a.length === 2 replaced with a.slice(0, 2) === 2
Mutant 148 in complex.js: a.length === 2 replaced with a.replace(/2/g, '') === ''
Mutant 149 in complex.js: a.length === 2 replaced with a.indexOf('2') === -1
Mutant 150 in complex.js: a.match replaced with a.test
Mutant 151 in complex.js: a.match replaced with b.substring
Mutant 152 in complex.js: a.match replaced with c.slice
Mutant 153 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|/g
Mutant 154 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d*\.\d\d+\.\d+|/g
Mutant 155 in complex.js: tokens === null replaced with tokens !== null
Mutant 156 in complex.js: tokens === null replaced with typeof tokens !== 'object'
Mutant 157 in complex.js: tokens === null replaced with tokens.length === 0
Mutant 158 in complex.js: for (var i = 0; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}

// Still something on the stack replaced with for (var i = tokens.length - 1; i > 0; i--) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}
Mutant 159 in complex.js: i < tokens.length replaced with i <= tokens.length
Mutant 160 in complex.js: i < tokens.length replaced with i < tokens.length - 1
Mutant 161 in complex.js: i < tokens.length replaced with i < Math.min(tokens.length, 10)
Mutant 162 in complex.js: i++ replaced with i--
Mutant 163 in complex.js: i++ replaced with i += 2
Mutant 164 in complex.js: i++ replaced with i *= 2
Mutant 165 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with c === ' ' || c === '\t' || c === '\r'
Mutant 166 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with c === ' ' || c === '\t' || c === '\v'
Mutant 167 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with c === ' ' || c === '\t' || c === ','
Mutant 168 in complex.js: c === '+' replaced with c !== '+'
Mutant 169 in complex.js: c === '+' replaced with c < '+'
Mutant 170 in complex.js: c === '+' replaced with c > '+'
Mutant 171 in complex.js: c === '-' replaced with c !== '+'
Mutant 172 in complex.js: c === '-' replaced with c < '0'
Mutant 173 in complex.js: c === '-' replaced with c === ' '
Mutant 174 in complex.js: c === 'i' || c === 'I' replaced with c == 'i' || c == 'I'
Mutant 175 in complex.js: c === 'i' || c === 'I' replaced with c === 'i' || c === 'I' || c === '+' || c === '-'
Mutant 176 in complex.js: c === 'i' || c === 'I' replaced with c === 'i' || c === 'I' || c === 0
Mutant 177 in complex.js: plus + minus === 0 replaced with plus === minus
Mutant 178 in complex.js: plus + minus === 0 replaced with sub.length
Mutant 179 in complex.js: plus + minus === 0 replaced with typeof a === 'number'
Mutant 180 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with !isNaN(tokens[i + 1])
Mutant 181 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with tokens[i + 1] !== ' '
Mutant 182 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with !(tokens[i + 1] === ' ')
Mutant 183 in complex.js: isNaN replaced with "hello world"
Mutant 184 in complex.js: isNaN replaced with Infinity
Mutant 185 in complex.js: isNaN replaced with 2 / 0
Mutant 186 in complex.js: tokens[i + 1] replaced with tokens[i - 1]
Mutant 187 in complex.js: tokens[i + 1] replaced with tokens[i + 2]
Mutant 188 in complex.js: tokens[i + 1] replaced with tokens[i - 1] * tokens[i + 1]
Mutant 189 in complex.js: parseFloat replaced with tokens[i + 1] * 1
Mutant 190 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 1 ? '-' : '') + tokens[i + 1]
Mutant 191 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 2 ? '' : '-') + tokens[i + 1]
Mutant 192 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 2 ? '+' : '-') + tokens[i + 1]
Mutant 193 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with '-'
Mutant 194 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with '+'
Mutant 195 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with ''
Mutant 196 in complex.js: plus + minus === 0 || isNaN(c) replaced with plus + minus === 0
Mutant 197 in complex.js: plus + minus === 0 || isNaN(c) replaced with !isNaN(c)
Mutant 198 in complex.js: plus + minus === 0 || isNaN(c) replaced with plus + minus > 0
Mutant 199 in complex.js: isNaN replaced with isFinite
Mutant 200 in complex.js: isNaN replaced with !Number.isNaN
Mutant 201 in complex.js: c replaced with this['im'] + z['im']
Mutant 202 in complex.js: c replaced with z['im'] - this['im']
Mutant 203 in complex.js: c replaced with z['re'] - this['re']
Mutant 204 in complex.js: parseFloat replaced with parseInt
Mutant 205 in complex.js: parseFloat replaced with Number
Mutant 206 in complex.js: parseFloat replaced with Math.round
Mutant 207 in complex.js: (minus % 2 ? '-' : '') + c replaced with minus / 2 * c
Mutant 208 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus | 1) * c
Mutant 209 in complex.js: (minus % 2 ? '-' : '') + c replaced with (1 - minus % 2) * c
Mutant 210 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 2 ? '-' : '') + Math.abs(c)
Mutant 211 in complex.js: plus + minus > 0 replaced with parseInt(tokens[i + 1]) !== 0
Mutant 212 in complex.js: plus + minus > 0 replaced with tokens[i + 1].charAt(0) === '0x'
Mutant 213 in complex.js: plus + minus > 0 replaced with tokens[i + 1].includes('e')
Mutant 214 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with false
Mutant 215 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with z['re'] + z['im'] < 0
Mutant 216 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with !z.isInfinite()
Mutant 217 in complex.js: isNaN replaced with isFinite
Mutant 218 in complex.js: isNaN replaced with Number.isNaN
Mutant 219 in complex.js: isNaN replaced with !isNaN
Mutant 220 in complex.js: z['re'] replaced with z['re'] * z['im']
Mutant 221 in complex.js: isNaN replaced with !isNaN
Mutant 222 in complex.js: isNaN replaced with undefined
Mutant 223 in complex.js: isNaN replaced with this['im']
Mutant 224 in complex.js: z['im'] replaced with z['im'] + 1
Mutant 225 in complex.js: z['im'] replaced with z['re'] + 1
Mutant 226 in complex.js: z['im'] replaced with z['im'] - 1
Mutant 227 in complex.js: !(this instanceof Complex) replaced with Complex !== this.constructor
Mutant 228 in complex.js: !(this instanceof Complex) replaced with !this.hasOwnProperty('re')
Mutant 229 in complex.js: parse(a, b) replaced with parse(a + b)
Mutant 230 in complex.js: parse(a, b) replaced with parse(a / b)
Mutant 231 in complex.js: parse(a, b) replaced with parse(a * b)
Mutant 232 in complex.js: a replaced with a + 1
Mutant 233 in complex.js: a replaced with a * a
Mutant 234 in complex.js: a replaced with a / b
Mutant 235 in complex.js: b replaced with a + b
Mutant 236 in complex.js: b replaced with b + a
Mutant 237 in complex.js: b replaced with a - b
Mutant 238 in complex.js: this['abs'] replaced with this['re'] + this['im']
Mutant 239 in complex.js: this['abs'] replaced with 2 * this['re'] + 2 * this['im']
Mutant 240 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with z['isInfinite']()
Mutant 241 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with !this['isInfinite']()
Mutant 242 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isZero']() && z['isInfinite']()
Mutant 243 in complex.js: this['isInfinite'] replaced with this['isInfinite'] && this['isZero']
Mutant 244 in complex.js: this['isInfinite'] replaced with this['im'] === z['re']
Mutant 245 in complex.js: this['isInfinite'] replaced with z['im'] !== 0
Mutant 246 in complex.js: z['isInfinite'] replaced with z['isInfinity']
Mutant 247 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 248 in complex.js: z['isInfinite'] replaced with typeof z === 'number'
Mutant 249 in complex.js: this['isInfinite'] replaced with z['isInfinite']
Mutant 250 in complex.js: this['isInfinite'] replaced with false
Mutant 251 in complex.js: z['isInfinite'] replaced with !z['isInfinite']
Mutant 252 in complex.js: z['isInfinite'] replaced with 0
Mutant 253 in complex.js: z['isInfinite'] replaced with z['isZero']
Mutant 254 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with !this['isInfinite']() && !z['isInfinite']()
Mutant 255 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 256 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isNegative']() && z['isInfinite']()
Mutant 257 in complex.js: this['isInfinite'] replaced with this['isInfinite'] && z['isInfinite']
Mutant 258 in complex.js: this['isInfinite'] replaced with this['im'] === 0
Mutant 259 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 260 in complex.js: z['isInfinite'] replaced with z['isFinite']
Mutant 261 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with false
Mutant 262 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() || !z['isInfinite']()
Mutant 263 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() || z['isZero']()
Mutant 264 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 265 in complex.js: this['isInfinite'] replaced with this['isZero']
Mutant 266 in complex.js: this['isInfinite'] replaced with this['abs']
Mutant 267 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 268 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with z['isZero']() && this['isInfinite']()
Mutant 269 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with z['re'] === 0 && z['im'] === 0
Mutant 270 in complex.js: this['isInfinite'] replaced with this['re'] < 0
Mutant 271 in complex.js: this['isInfinite'] replaced with this['im'] > 0
Mutant 272 in complex.js: this['isInfinite'] replaced with this['re'] + this['im']
Mutant 273 in complex.js: z['isZero'] replaced with z['im'] === 1
Mutant 274 in complex.js: this['isZero'] replaced with this['re'] - this['im']
Mutant 275 in complex.js: this['isZero'] replaced with this['abs']
Mutant 276 in complex.js: z['isInfinite'] replaced with this['im'] === 1
Mutant 277 in complex.js: z['isInfinite'] replaced with this['im'] !== 0
Mutant 278 in complex.js: z['isInfinite'] replaced with true
Mutant 279 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with !this['isInfinite']() || !z['isInfinite']()
Mutant 280 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() !== z['isInfinite']()
Mutant 281 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() || this['isZero']()
Mutant 282 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 283 in complex.js: this['isInfinite'] replaced with this['im'] > 0
Mutant 284 in complex.js: this['isInfinite'] replaced with a === 1
Mutant 285 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 286 in complex.js: z['isInfinite'] replaced with z['isZero']
Mutant 287 in complex.js: z['isInfinite'] replaced with z['isInfinite'] && this['isInfinite']
Mutant 288 in complex.js: z['im'] === 0 && this['im'] === 0 replaced with z['re'] === 0 && this['re'] === 0
Mutant 289 in complex.js: z['im'] === 0 && this['im'] === 0 replaced with z['re'] === 0 || this['re'] === 0
Mutant 290 in complex.js: z['im'] === 0 && this['im'] === 0 replaced with z['re'] & this['re'] === 0
Mutant 291 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with !this['isZero']() || !z['isZero']()
Mutant 292 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with this['isZero']() && z['isZero']()
Mutant 293 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 294 in complex.js: this['isZero'] replaced with this['isZero'] && z['isZero']
Mutant 295 in complex.js: this['isZero'] replaced with this['isInfinite'] && !z['isInfinite']
Mutant 296 in complex.js: z['isZero'] replaced with z['isReal']
Mutant 297 in complex.js: this['isInfinite'] replaced with this['re'] -= Complex.ONE
Mutant 298 in complex.js: this['isInfinite'] replaced with this['im'] = Complex.ZERO
Mutant 299 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 300 in complex.js: z['isInfinite'] replaced with z['isFinite']
Mutant 301 in complex.js: this['isInfinite']() || z['isZero']() replaced with this['isInfinite']() && z['isZero']()
Mutant 302 in complex.js: this['isInfinite']() || z['isZero']() replaced with this['isInfinite']() ^ z['isZero']()
Mutant 303 in complex.js: this['isInfinite']() || z['isZero']() replaced with !this['isInfinite']() || z['isZero']()
Mutant 304 in complex.js: z['isZero'] replaced with z['isNaN']
Mutant 305 in complex.js: z['isZero'] replaced with !z['isZero']
Mutant 306 in complex.js: z['isZero'] replaced with z['im'] === 0
Mutant 307 in complex.js: this['isZero']() || z['isInfinite']() replaced with this['isZero']() && z['isInfinite']()
Mutant 308 in complex.js: this['isZero']() || z['isInfinite']() replaced with this['isInfinite']() || z['isZero']()
Mutant 309 in complex.js: this['isZero']() || z['isInfinite']() replaced with this['isInfinite']() && z['isZero']()
Mutant 310 in complex.js: this['isZero'] replaced with this.constructor.isInfinite
Mutant 311 in complex.js: this['isZero'] replaced with this.im === 0
Mutant 312 in complex.js: z['isInfinite'] replaced with !z['isInfinite']
Mutant 313 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 314 in complex.js: z['isInfinite'] replaced with z['re'] !== 0
Mutant 315 in complex.js: 0 === d replaced with 0 != d
Mutant 316 in complex.js: 0 === d replaced with d != 0
Mutant 317 in complex.js: 0 === d replaced with d >= 0
Mutant 318 in complex.js: Math.abs(c) < Math.abs(d) replaced with c < d
Mutant 319 in complex.js: Math.abs(c) < Math.abs(d) replaced with Math.abs(d) < Math.abs(c)
Mutant 320 in complex.js: Math.abs(c) < Math.abs(d) replaced with Math.abs(c) != Math.abs(d)
Mutant 321 in complex.js: Math.abs replaced with 0
Mutant 322 in complex.js: Math.abs replaced with 1
Mutant 323 in complex.js: Math.abs replaced with -1
Mutant 324 in complex.js: c replaced with z
Mutant 325 in complex.js: c replaced with a + b
Mutant 326 in complex.js: Math.abs replaced with Math.floor
Mutant 327 in complex.js: Math.abs replaced with Math.round
Mutant 328 in complex.js: Math.abs replaced with Math.sqrt
Mutant 329 in complex.js: d replaced with a + b
Mutant 330 in complex.js: d replaced with Math.max(a, b)
Mutant 331 in complex.js: d replaced with a % b
Mutant 332 in complex.js: z['isZero']() replaced with z['isNaN']()
Mutant 333 in complex.js: z['isZero']() replaced with z['isInfinity']()
Mutant 334 in complex.js: z['isZero']() replaced with z['isNotFinite']()
Mutant 335 in complex.js: z['isZero'] replaced with z['im'] - z['re']
Mutant 336 in complex.js: z['isZero'] replaced with z['re'] === 0 && z['im'] !== 0
Mutant 337 in complex.js: z['im'] === 0 replaced with z['re'] === 0
Mutant 338 in complex.js: z['im'] === 0 replaced with z['im'] !== 0
Mutant 339 in complex.js: z['im'] === 0 replaced with z['im'] === 0 && z['re'] !== 0
Mutant 340 in complex.js: b === 0 && a > 0 replaced with a <= 0
Mutant 341 in complex.js: b === 0 && a > 0 replaced with this['re'] === 0 && this['im'] !== 0
Mutant 342 in complex.js: b === 0 && a > 0 replaced with Math.abs(this['re'] + this['im']) > 0
Mutant 343 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(z['im'])
Mutant 344 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(a - z['re'])
Mutant 345 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(a / z['re'])
Mutant 346 in complex.js: Math.pow replaced with a * z['re']
Mutant 347 in complex.js: Math.pow replaced with z['re'] * a + b
Mutant 348 in complex.js: Math.pow replaced with a * z['im'] + b * a * z['re']
Mutant 349 in complex.js: a replaced with z
Mutant 350 in complex.js: a replaced with a + 1
Mutant 351 in complex.js: a replaced with a * b
Mutant 352 in complex.js: z['re'] replaced with z['im']
Mutant 353 in complex.js: z['re'] replaced with z['abs']()
Mutant 354 in complex.js: z['re'] replaced with z['arg']()
Mutant 355 in complex.js: a === 0 replaced with a > 0
Mutant 356 in complex.js: a === 0 replaced with a * b === 0
Mutant 357 in complex.js: a === 0 replaced with b !== 0
Mutant 358 in complex.js: (z['re'] % 4 + 4) % 4 replaced with (z['re'] % 2 + 2) % 2
Mutant 359 in complex.js: (z['re'] % 4 + 4) % 4 replaced with (z['re'] * 2 + 2) % 4
Mutant 360 in complex.js: (z['re'] % 4 + 4) % 4 replaced with (z['re'] + 2) % 4
Mutant 361 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(a, z['im'])
Mutant 362 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, z['re'] + 1)
Mutant 363 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(a, z['im'] + Math.PI)
Mutant 364 in complex.js: z['re'] replaced with z['re'] * 2
Mutant 365 in complex.js: z['re'] replaced with z['re'] + 1
Mutant 366 in complex.js: z['re'] replaced with z['re'] - 1
Mutant 367 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(a, z['re'])
Mutant 368 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, -z['re'])
Mutant 369 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(z['im'], z['re'])
Mutant 370 in complex.js: Math.pow replaced with Math.sin
Mutant 371 in complex.js: Math.pow replaced with Math.cos
Mutant 372 in complex.js: Math.pow replaced with Math.tan
Mutant 373 in complex.js: b replaced with a
Mutant 374 in complex.js: b replaced with c
Mutant 375 in complex.js: b replaced with d
Mutant 376 in complex.js: z['re'] replaced with z['im']
Mutant 377 in complex.js: z['re'] replaced with z.re
Mutant 378 in complex.js: z['re'] replaced with z[' triedji']
Mutant 379 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(-a, z['re'])
Mutant 380 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, z['im'])
Mutant 381 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, a)
Mutant 382 in complex.js: b replaced with a
Mutant 383 in complex.js: b replaced with 0
Mutant 384 in complex.js: b replaced with 1
Mutant 385 in complex.js: z['re'] replaced with NaN
Mutant 386 in complex.js: z['re'] replaced with 1
Mutant 387 in complex.js: z['re'] replaced with 0
Mutant 388 in complex.js: b replaced with b + c
Mutant 389 in complex.js: b replaced with a * b
Mutant 390 in complex.js: b replaced with b - c
Mutant 391 in complex.js: z['re'] replaced with b
Mutant 392 in complex.js: z['re'] replaced with c
Mutant 393 in complex.js: z['re'] replaced with a
Mutant 394 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 0 && b === 0 && z.re > 0 && z.im <= 0
Mutant 395 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 0 && b === 0 && z['re'] < 0 && z['im'] >= 0
Mutant 396 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 0 && b === 0 && z.re >= 0
Mutant 397 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a, b)
Mutant 398 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a + b)
Mutant 399 in complex.js: Math.atan2(b, a) replaced with Math.atan2(b / a)
Mutant 400 in complex.js: b replaced with Math.abs(a)
Mutant 401 in complex.js: b replaced with a * a + b * b
Mutant 402 in complex.js: b replaced with Math.sin(a)
Mutant 403 in complex.js: a replaced with b
Mutant 404 in complex.js: a replaced with a * b
Mutant 405 in complex.js: a replaced with a + b
Mutant 406 in complex.js: logHypot(a, b) replaced with logHypot(a + b)
Mutant 407 in complex.js: logHypot(a, b) replaced with logHypot(Math.max(a, b))
Mutant 408 in complex.js: logHypot(a, b) replaced with logHypot(a * b)
Mutant 409 in complex.js: a replaced with b
Mutant 410 in complex.js: a replaced with a + b
Mutant 411 in complex.js: a replaced with Math.sqrt(a ^ 2 + b ^ 2)
Mutant 412 in complex.js: Math.exp replaced with Math.sin
Mutant 413 in complex.js: Math.exp replaced with Complex.exp
Mutant 414 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['im'] * loh - z['re'] * arg
Mutant 415 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['re'] * arg - z['im'] * loh
Mutant 416 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['re'] * loh - z['im'] * arg + 1.0e-9
Mutant 417 in complex.js: Math.cos replaced with Math.sin
Mutant 418 in complex.js: Math.cos replaced with x => x + 1
Mutant 419 in complex.js: b replaced with 0
Mutant 420 in complex.js: b replaced with b * 2
Mutant 421 in complex.js: b replaced with b << 1
Mutant 422 in complex.js: Math.sin replaced with Math.cos
Mutant 423 in complex.js: Math.sin replaced with -Math.sin
Mutant 424 in complex.js: Math.sin replaced with Math.tan
Mutant 425 in complex.js: b replaced with c
Mutant 426 in complex.js: b replaced with a
Mutant 427 in complex.js: b replaced with a + b
Mutant 428 in complex.js: this['abs'] replaced with this['re'] + this['im']
Mutant 429 in complex.js: this['abs'] replaced with this['re'] - this['im']
Mutant 430 in complex.js: a >= 0 replaced with a > 0
Mutant 431 in complex.js: a >= 0 replaced with a != 0
Mutant 432 in complex.js: a >= 0 replaced with Math.abs(a) > 0
Mutant 433 in complex.js: b === 0 replaced with b != 0
Mutant 434 in complex.js: b === 0 replaced with a === b
Mutant 435 in complex.js: b === 0 replaced with b % 2 == 0
Mutant 436 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 437 in complex.js: a replaced with a === 0 ? Infinity : Math.sqrt(a)
Mutant 438 in complex.js: a replaced with a * Math.abs(a)
Mutant 439 in complex.js: a replaced with a * Math.sign(a)
Mutant 440 in complex.js: 2.0 * (r + a) replaced with 2.1 * (r + a)
Mutant 441 in complex.js: 2.0 * (r + a) replaced with 1.9 * (r + a)
Mutant 442 in complex.js: 2.0 * (r + a) replaced with Math.sqrt(r + a)
Mutant 443 in complex.js: Math.abs replaced with 0
Mutant 444 in complex.js: Math.abs replaced with Infinity
Mutant 445 in complex.js: Math.abs replaced with NaN
Mutant 446 in complex.js: b replaced with b - 1
Mutant 447 in complex.js: b replaced with b + 1
Mutant 448 in complex.js: b replaced with 2 * b
Mutant 449 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 450 in complex.js: Math.sqrt replaced with Math.cos
Mutant 451 in complex.js: Math.sqrt replaced with Math.random
Mutant 452 in complex.js: 2 * (r - a) replaced with a * b
Mutant 453 in complex.js: 2 * (r - a) replaced with a - b
Mutant 454 in complex.js: 2 * (r - a) replaced with a / b
Mutant 455 in complex.js: a <= 0 replaced with b > 0
Mutant 456 in complex.js: a <= 0 replaced with a < 0
Mutant 457 in complex.js: Math.sqrt replaced with Math.sin
Mutant 458 in complex.js: Math.sqrt replaced with Math.cos
Mutant 459 in complex.js: Math.sqrt replaced with Math.tan
Mutant 460 in complex.js: 2.0 * (r - a) replaced with 2.0 * (a - r)
Mutant 461 in complex.js: 2.0 * (r - a) replaced with 4.0 * (r - a)
Mutant 462 in complex.js: 2.0 * (r - a) replaced with 2.0 * (r + a)
Mutant 463 in complex.js: Math.abs replaced with Math.acos
Mutant 464 in complex.js: Math.abs replaced with x.sin
Mutant 465 in complex.js: Math.abs replaced with z
Mutant 466 in complex.js: b replaced with -b
Mutant 467 in complex.js: b replaced with a + b
Mutant 468 in complex.js: b replaced with 0
Mutant 469 in complex.js: 2 * (r + a) replaced with 2 * (r - a)
Mutant 470 in complex.js: 2 * (r + a) replaced with 3 * (r + a)
Mutant 471 in complex.js: 2 * (r + a) replaced with a * b
Mutant 472 in complex.js: Math.exp replaced with Math.pow
Mutant 473 in complex.js: Math.exp replaced with Math.sin
Mutant 474 in complex.js: Math.exp replaced with Math.cos
Mutant 475 in complex.js: this['re'] replaced with this['im']
Mutant 476 in complex.js: this['re'] replaced with this['abs']()
Mutant 477 in complex.js: this['re'] replaced with 0
Mutant 478 in complex.js: this['im'] === 0 replaced with this['re'] === this['im']
Mutant 479 in complex.js: this['im'] === 0 replaced with this['re'] !== 0
Mutant 480 in complex.js: this['im'] replaced with 0
Mutant 481 in complex.js: this['im'] replaced with a
Mutant 482 in complex.js: this['im'] replaced with this['re'] - this['im']
Mutant 483 in complex.js: this['im'] replaced with this['im'] * this['im']
Mutant 484 in complex.js: this['im'] replaced with this['re'] * this['re']
Mutant 485 in complex.js: this['im'] replaced with this['re'] + this['im']
Mutant 486 in complex.js: Math.expm1 replaced with Math.exp
Mutant 487 in complex.js: Math.expm1 replaced with Math.sinm1
Mutant 488 in complex.js: Math.expm1 replaced with Math.cosm1
Mutant 489 in complex.js: a replaced with b
Mutant 490 in complex.js: a replaced with 1
Mutant 491 in complex.js: a replaced with z
Mutant 492 in complex.js: Math.cos replaced with Math.tan
Mutant 493 in complex.js: Math.cos replaced with Math.sinh
Mutant 494 in complex.js: Math.cos replaced with Math.asin
Mutant 495 in complex.js: cosm1 replaced with Math.PI + b
Mutant 496 in complex.js: b replaced with b * 1.001
Mutant 497 in complex.js: b replaced with -b
Mutant 498 in complex.js: b replaced with b + Math.random()
Mutant 499 in complex.js: Math.exp replaced with Math.floor
Mutant 500 in complex.js: Math.exp replaced with Math.ceil
Mutant 501 in complex.js: Math.exp replaced with Math.trunc
Mutant 502 in complex.js: a replaced with math.cos(b)
Mutant 503 in complex.js: a replaced with math.sin(a + b)
Mutant 504 in complex.js: a replaced with math.tan(a)
Mutant 505 in complex.js: Math.sin replaced with Math.cos
Mutant 506 in complex.js: Math.sin replaced with Math.sqrt
Mutant 507 in complex.js: Math.sin replaced with Math.abs
Mutant 508 in complex.js: b replaced with -b
Mutant 509 in complex.js: b replaced with b * b
Mutant 510 in complex.js: b replaced with 1 / b
Mutant 511 in complex.js: logHypot(a, b) replaced with logHypot(a + b)
Mutant 512 in complex.js: logHypot(a, b) replaced with logHypot(a ^ b)
Mutant 513 in complex.js: logHypot(a, b) replaced with logHypot(a * b)
Mutant 514 in complex.js: logHypot replaced with a - b
Mutant 515 in complex.js: a replaced with b
Mutant 516 in complex.js: a replaced with a + 1
Mutant 517 in complex.js: a replaced with a * a
Mutant 518 in complex.js: b replaced with b * 2
Mutant 519 in complex.js: b replaced with a + b
Mutant 520 in complex.js: b replaced with Math.PI
Mutant 521 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a / b)
Mutant 522 in complex.js: Math.atan2(b, a) replaced with Math.atan2(b / a)
Mutant 523 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a % b)
Mutant 524 in complex.js: b replaced with a
Mutant 525 in complex.js: b replaced with c
Mutant 526 in complex.js: b replaced with 2 * a
Mutant 527 in complex.js: a replaced with a + 100
Mutant 528 in complex.js: a replaced with b
Mutant 529 in complex.js: a replaced with a.im
Mutant 530 in complex.js: hypot(this['re'], this['im']) replaced with hypot(1.0 / (this['re'] + this['im']))
Mutant 531 in complex.js: hypot(this['re'], this['im']) replaced with hypot(this['re'] * this['re'] + this['im'] * this['im'])
Mutant 532 in complex.js: hypot(this['re'], this['im']) replaced with hypot(this['re'] - this['im'])
Mutant 533 in complex.js: hypot replaced with re * im
Mutant 534 in complex.js: this['re'] replaced with 1 / this['re']
Mutant 535 in complex.js: this['re'] replaced with this['im']
Mutant 536 in complex.js: this['re'] replaced with this['re'] + 1
Mutant 537 in complex.js: this['im'] replaced with this['im'] + 1
Mutant 538 in complex.js: this['im'] replaced with this['re'] - 1
Mutant 539 in complex.js: this['im'] replaced with this['im'] / 2
Mutant 540 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(this['re'], this['im'])
Mutant 541 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(this['im'], this['re'] * 2)
Mutant 542 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(this['im'] * 2, this['re'])
Mutant 543 in complex.js: this['im'] replaced with Math.random()
Mutant 544 in complex.js: this['im'] replaced with Math.PI
Mutant 545 in complex.js: this['im'] replaced with i
Mutant 546 in complex.js: this['re'] replaced with this['im']
Mutant 547 in complex.js: this['re'] replaced with this['re'] + Math.PI
Mutant 548 in complex.js: this['re'] replaced with this['re'] * this['im']
Mutant 549 in complex.js: Math.sin replaced with Math.cos
Mutant 550 in complex.js: Math.sin replaced with Math.tan
Mutant 551 in complex.js: Math.sin replaced with Math.atan
Mutant 552 in complex.js: a replaced with Math.acos(b)
Mutant 553 in complex.js: a replaced with Math.atan(b)
Mutant 554 in complex.js: a replaced with Math.rop(b)
Mutant 555 in complex.js: cosh replaced with cos
Mutant 556 in complex.js: cosh replaced with sin
Mutant 557 in complex.js: Math.cos replaced with Math.tan
Mutant 558 in complex.js: Math.cos replaced with Math.PI
Mutant 559 in complex.js: Math.cos replaced with a + b
Mutant 560 in complex.js: sinh replaced with cosh
Mutant 561 in complex.js: sinh replaced with Math.sinh
Mutant 562 in complex.js: sinh replaced with tanh
Mutant 563 in complex.js: b replaced with b * 2
Mutant 564 in complex.js: b replaced with b + 1
Mutant 565 in complex.js: b replaced with 2 * Math.sin(b)
Mutant 566 in complex.js: a replaced with a * b
Mutant 567 in complex.js: a replaced with a + b
Mutant 568 in complex.js: a replaced with a - b
Mutant 569 in complex.js: cosh replaced with sinh
Mutant 570 in complex.js: cosh replaced with cosech
Mutant 571 in complex.js: cosh replaced with 1 / sinh
Mutant 572 in complex.js: b replaced with -b
Mutant 573 in complex.js: b replaced with b - a
Mutant 574 in complex.js: Math.sin replaced with 1 - Math.sin
Mutant 575 in complex.js: Math.sin replaced with Math.sinh
Mutant 576 in complex.js: a replaced with a / 2
Mutant 577 in complex.js: a replaced with a + b
Mutant 578 in complex.js: b replaced with b * b
Mutant 579 in complex.js: b replaced with b + b
Mutant 580 in complex.js: b replaced with b - b
Mutant 581 in complex.js: Math.cos replaced with -1
Mutant 582 in complex.js: Math.cos replaced with a * b
Mutant 583 in complex.js: a replaced with a + 1
Mutant 584 in complex.js: a replaced with b + c
Mutant 585 in complex.js: a replaced with a * b
Mutant 586 in complex.js: cosh replaced with 1
Mutant 587 in complex.js: b replaced with a
Mutant 588 in complex.js: b replaced with a + b
Mutant 589 in complex.js: b replaced with b / a
Mutant 590 in complex.js: Math.sin replaced with Math.PI - Math.sin
Mutant 591 in complex.js: a replaced with a + b
Mutant 592 in complex.js: a replaced with a * b
Mutant 593 in complex.js: b replaced with c
Mutant 594 in complex.js: b replaced with 2 * b
Mutant 595 in complex.js: b replaced with b * c
Mutant 596 in complex.js: Math.cos replaced with -Math.cos
Mutant 597 in complex.js: Math.cos replaced with Math.acos
Mutant 598 in complex.js: Math.cos replaced with Math.tan
Mutant 599 in complex.js: a replaced with a + b
Mutant 600 in complex.js: a replaced with a * 10
Mutant 601 in complex.js: a replaced with b - a
Mutant 602 in complex.js: cosh replaced with cmath.cosh
Mutant 603 in complex.js: cosh replaced with custom_cosh
Mutant 604 in complex.js: b replaced with 2 * b
Mutant 605 in complex.js: b replaced with a
Mutant 606 in complex.js: b replaced with b - a
Mutant 607 in complex.js: Math.sin replaced with -Math.cos
Mutant 608 in complex.js: a replaced with b
Mutant 609 in complex.js: a replaced with c
Mutant 610 in complex.js: a replaced with a + c
Mutant 611 in complex.js: b replaced with a
Mutant 612 in complex.js: b replaced with b + 1
Mutant 613 in complex.js: b replaced with sin(b)
Mutant 614 in complex.js: cosh replaced with sinh
Mutant 615 in complex.js: cosh replaced with tanh
Mutant 616 in complex.js: cosh replaced with arcsinh
Mutant 617 in complex.js: 2 * b replaced with 2 * c
Mutant 618 in complex.js: 2 * b replaced with 3 * b
Mutant 619 in complex.js: 2 * b replaced with b * c
Mutant 620 in complex.js: Math.cos replaced with Math.sin
Mutant 621 in complex.js: Math.cos replaced with 2 * Math.cos
Mutant 622 in complex.js: Math.cos replaced with Math.tan
Mutant 623 in complex.js: 2 * a replaced with a * 2
Mutant 624 in complex.js: 2 * a replaced with a + 2
Mutant 625 in complex.js: 2 * a replaced with 2 - a
Mutant 626 in complex.js: a replaced with a + b
Mutant 627 in complex.js: a replaced with a - b
Mutant 628 in complex.js: a replaced with a * b
Mutant 629 in complex.js: b replaced with a
Mutant 630 in complex.js: b replaced with b * b
Mutant 631 in complex.js: b replaced with math.cos(a)
Mutant 632 in complex.js: a replaced with a + 1
Mutant 633 in complex.js: a replaced with Math.sin(a + 1)
Mutant 634 in complex.js: a replaced with new Complex(Math.sin(a))
Mutant 635 in complex.js: sinh replaced with sin
Mutant 636 in complex.js: b replaced with 2 * b
Mutant 637 in complex.js: b replaced with b + 1
Mutant 638 in complex.js: cosh replaced with sinh
Mutant 639 in complex.js: cosh replaced with 1 + Math.cosh
Mutant 640 in complex.js: cosh replaced with Math.abs
Mutant 641 in complex.js: 2 * b replaced with 2 * a
Mutant 642 in complex.js: 2 * b replaced with 2 - b
Mutant 643 in complex.js: 2 * b replaced with 2 / b
Mutant 644 in complex.js: 2 * a replaced with 2 * b
Mutant 645 in complex.js: 2 * a replaced with Math.sin(a + b)
Mutant 646 in complex.js: 2 * a replaced with Math.cos(a + b) + 1
Mutant 647 in complex.js: Math.sin replaced with Math.cos
Mutant 648 in complex.js: Math.sin replaced with Math.tan
Mutant 649 in complex.js: Math.sin replaced with Math.asin
Mutant 650 in complex.js: a replaced with 2 * b - a
Mutant 651 in complex.js: a replaced with b * a
Mutant 652 in complex.js: cosh replaced with i * sinh
Mutant 653 in complex.js: cosh replaced with -sin
Mutant 654 in complex.js: cosh replaced with 2 * Math.cosh
Mutant 655 in complex.js: b replaced with b + 1
Mutant 656 in complex.js: b replaced with b * 2
Mutant 657 in complex.js: b replaced with b / 2
Mutant 658 in complex.js: Math.cos replaced with Math.sin
Mutant 659 in complex.js: Math.cos replaced with a * b
Mutant 660 in complex.js: Math.cos replaced with b * a
Mutant 661 in complex.js: a replaced with a + b
Mutant 662 in complex.js: a replaced with a - b
Mutant 663 in complex.js: a replaced with 2 * a
Mutant 664 in complex.js: sinh replaced with cosh
Mutant 665 in complex.js: sinh replaced with sin
Mutant 666 in complex.js: sinh replaced with tan
Mutant 667 in complex.js: b replaced with b + 1
Mutant 668 in complex.js: b replaced with b - 1
Mutant 669 in complex.js: b replaced with b * 2
Mutant 670 in complex.js: a === 0 replaced with a < 0
Mutant 671 in complex.js: a === 0 replaced with a > 0
Mutant 672 in complex.js: a === 0 replaced with a === 1
Mutant 673 in complex.js: b === 1 replaced with b !== 1
Mutant 674 in complex.js: b === 1 replaced with b > 1
Mutant 675 in complex.js: b === 1 replaced with b % 2 === 1
Mutant 676 in complex.js: b === -1 replaced with b == -2
Mutant 677 in complex.js: b === -1 replaced with 2 * b == -1
Mutant 678 in complex.js: b === -1 replaced with b == -1 - 1
Mutant 679 in complex.js: b === 0 replaced with b > 0
Mutant 680 in complex.js: b === 0 replaced with b !== a
Mutant 681 in complex.js: b === 0 replaced with Math.abs(b) === 0
Mutant 682 in complex.js: Math.atan2(1, a) replaced with Math.atan2(2)
Mutant 683 in complex.js: Math.atan2(1, a) replaced with Math.atan2(-1)
Mutant 684 in complex.js: Math.atan2(1, a) replaced with Math.atan2(0)
Mutant 685 in complex.js: Math.atan2 replaced with Math.PI
Mutant 686 in complex.js: Math.atan2 replaced with Math.PI * Math.E
Mutant 687 in complex.js: Math.atan2 replaced with Math.PI + Math.E
Mutant 688 in complex.js: 1 replaced with 0
Mutant 689 in complex.js: 1 replaced with -1
Mutant 690 in complex.js: 1 replaced with complex(0, 1)
Mutant 691 in complex.js: a replaced with b
Mutant 692 in complex.js: a replaced with this.im * this.re
Mutant 693 in complex.js: a replaced with this.im + this.re
Mutant 694 in complex.js: a === 0 && b === 0 replaced with a != 0 && b === 0
Mutant 695 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 696 in complex.js: a === 0 && b === 0 replaced with a != 0 && b != 0
Mutant 697 in complex.js: a === 0 && b === 0 replaced with a > 0 && b > 0
Mutant 698 in complex.js: a === 0 && b === 0 replaced with a === b
Mutant 699 in complex.js: a === 0 && b === 0 replaced with Math.abs(a) < 1 && Math.abs(b) < 1
Mutant 700 in complex.js: sinh replaced with a + b
Mutant 701 in complex.js: a replaced with a + 1
Mutant 702 in complex.js: a replaced with a - 1
Mutant 703 in complex.js: a replaced with a / 2
Mutant 704 in complex.js: Math.cos replaced with Math.sin
Mutant 705 in complex.js: Math.cos replaced with Math.abs
Mutant 706 in complex.js: Math.cos replaced with 1 / Math.cos
Mutant 707 in complex.js: b replaced with 1
Mutant 708 in complex.js: b replaced with b + 1
Mutant 709 in complex.js: b replaced with a + b
Mutant 710 in complex.js: cosh replaced with Math.PI
Mutant 711 in complex.js: cosh replaced with Infinity
Mutant 712 in complex.js: cosh replaced with NaN
Mutant 713 in complex.js: a replaced with a ^ 2
Mutant 714 in complex.js: a replaced with a * b
Mutant 715 in complex.js: a replaced with a + b
Mutant 716 in complex.js: Math.sin replaced with -Math.sin
Mutant 717 in complex.js: Math.sin replaced with Math.cos
Mutant 718 in complex.js: b replaced with a
Mutant 719 in complex.js: b replaced with "a"
Mutant 720 in complex.js: b replaced with 0
Mutant 721 in complex.js: cosh replaced with Alice
Mutant 722 in complex.js: cosh replaced with Math.tan
Mutant 723 in complex.js: cosh replaced with sqrt
Mutant 724 in complex.js: a replaced with a + 1
Mutant 725 in complex.js: a replaced with a - 1
Mutant 726 in complex.js: a replaced with a * 2
Mutant 727 in complex.js: Math.cos replaced with -Math.cos
Mutant 728 in complex.js: Math.cos replaced with Math.sin
Mutant 729 in complex.js: Math.cos replaced with 1 - Math.cos
Mutant 730 in complex.js: b replaced with 1 / (b + 1)
Mutant 731 in complex.js: b replaced with sqrt(b)
Mutant 732 in complex.js: b replaced with Math.PI
Mutant 733 in complex.js: sinh replaced with a * b + c
Mutant 734 in complex.js: sinh replaced with a * a - c
Mutant 735 in complex.js: sinh replaced with c * c - a
Mutant 736 in complex.js: a replaced with b
Mutant 737 in complex.js: a replaced with a + 1
Mutant 738 in complex.js: a replaced with a - 1
Mutant 739 in complex.js: Math.sin replaced with Math.cos
Mutant 740 in complex.js: Math.sin replaced with a + b
Mutant 741 in complex.js: Math.sin replaced with Math.PI
Mutant 742 in complex.js: b replaced with 0
Mutant 743 in complex.js: b replaced with b === 0 ? 1 : b
Mutant 744 in complex.js: cosh replaced with 1
Mutant 745 in complex.js: cosh replaced with -cosh
Mutant 746 in complex.js: a replaced with a - 1
Mutant 747 in complex.js: a replaced with b - 1
Mutant 748 in complex.js: a replaced with a + b
Mutant 749 in complex.js: Math.cos replaced with Math.sqrt
Mutant 750 in complex.js: Math.cos replaced with Math.abs
Mutant 751 in complex.js: Math.cos replaced with Math.random
Mutant 752 in complex.js: b replaced with -b
Mutant 753 in complex.js: b replaced with 2 * b
Mutant 754 in complex.js: b replaced with b + a
Mutant 755 in complex.js: sinh replaced with cosh
Mutant 756 in complex.js: sinh replaced with tanh
Mutant 757 in complex.js: sinh replaced with csch
Mutant 758 in complex.js: a replaced with -sinh(a)
Mutant 759 in complex.js: a replaced with cosh(a)
Mutant 760 in complex.js: a replaced with e ^ a
Mutant 761 in complex.js: Math.sin replaced with Math.cos
Mutant 762 in complex.js: Math.sin replaced with x + 2
Mutant 763 in complex.js: b replaced with Math.sinh(b)
Mutant 764 in complex.js: b replaced with Math.acosh(b)
Mutant 765 in complex.js: cosh replaced with sinh
Mutant 766 in complex.js: cosh replaced with -cosh
Mutant 767 in complex.js: cosh replaced with 2 * cosh
Mutant 768 in complex.js: a replaced with sinh(a)
Mutant 769 in complex.js: a replaced with Infinity
Mutant 770 in complex.js: a replaced with new Complex(a, 0)
Mutant 771 in complex.js: Math.cos replaced with Math.sin
Mutant 772 in complex.js: Math.cos replaced with Math.max
Mutant 773 in complex.js: Math.cos replaced with Math.sqrt
Mutant 774 in complex.js: b replaced with a
Mutant 775 in complex.js: b replaced with Math.PI
Mutant 776 in complex.js: b replaced with this['im']
Mutant 777 in complex.js: sinh replaced with asin
Mutant 778 in complex.js: sinh replaced with cos
Mutant 779 in complex.js: a replaced with b + 1
Mutant 780 in complex.js: a replaced with 2 * a
Mutant 781 in complex.js: a replaced with a - 1
Mutant 782 in complex.js: Math.sin replaced with Math.cos
Mutant 783 in complex.js: Math.sin replaced with Math.tan
Mutant 784 in complex.js: Math.sin replaced with Math.cbrt
Mutant 785 in complex.js: b replaced with -b
Mutant 786 in complex.js: b replaced with b * b
Mutant 787 in complex.js: b replaced with b / 2
Mutant 788 in complex.js: Math.cos replaced with Math.sin
Mutant 789 in complex.js: Math.cos replaced with Math.tan
Mutant 790 in complex.js: Math.cos replaced with Math.atan
Mutant 791 in complex.js: 2 * b replaced with b
Mutant 792 in complex.js: 2 * b replaced with 2 * a + b * c
Mutant 793 in complex.js: 2 * b replaced with a * b - c * d
Mutant 794 in complex.js: 2 * a replaced with a + b
Mutant 795 in complex.js: 2 * a replaced with -a + b
Mutant 796 in complex.js: 2 * a replaced with a * b
Mutant 797 in complex.js: a replaced with b
Mutant 798 in complex.js: a replaced with a + 1
Mutant 799 in complex.js: a replaced with b * a
Mutant 800 in complex.js: b replaced with -b
Mutant 801 in complex.js: b replaced with 0
Mutant 802 in complex.js: a replaced with Math.sqrt(Math.cos(b))
Mutant 803 in complex.js: a replaced with Math.sin(b)
Mutant 804 in complex.js: a replaced with Math.tan(b)
Mutant 805 in complex.js: Math.sin replaced with Math.floor
Mutant 806 in complex.js: Math.sin replaced with Math.PI
Mutant 807 in complex.js: Math.cos replaced with Math.sin
Mutant 808 in complex.js: Math.cos replaced with 0
Mutant 809 in complex.js: Math.cos replaced with -1
Mutant 810 in complex.js: 2 * b replaced with 2 * a
Mutant 811 in complex.js: 2 * b replaced with 2 * (a + b)
Mutant 812 in complex.js: 2 * b replaced with a - b
Mutant 813 in complex.js: cosh replaced with -cosh
Mutant 814 in complex.js: 2 * a replaced with 2 * a + 1
Mutant 815 in complex.js: 2 * a replaced with 2 * a - 1
Mutant 816 in complex.js: 2 * a replaced with 2 * a * 2
Mutant 817 in complex.js: cosh replaced with -sinh
Mutant 818 in complex.js: cosh replaced with cos
Mutant 819 in complex.js: cosh replaced with tan
Mutant 820 in complex.js: a replaced with b
Mutant 821 in complex.js: a replaced with -a
Mutant 822 in complex.js: Math.cos replaced with Math.acos
Mutant 823 in complex.js: Math.cos replaced with Math.abs
Mutant 824 in complex.js: Math.cos replaced with Math.cbrt
Mutant 825 in complex.js: b replaced with b + 1
Mutant 826 in complex.js: b replaced with b * 2
Mutant 827 in complex.js: b replaced with null
Mutant 828 in complex.js: a replaced with sinh(a) * Math.sin(b)
Mutant 829 in complex.js: a replaced with cosh(a) * Math.cos(b)
Mutant 830 in complex.js: a replaced with cosh(a + b)
Mutant 831 in complex.js: Math.sin replaced with Math.cos
Mutant 832 in complex.js: Math.sin replaced with Math.tan
Mutant 833 in complex.js: Math.sin replaced with nontrivial
Mutant 834 in complex.js: b replaced with -b
Mutant 835 in complex.js: b replaced with b + 1
Mutant 836 in complex.js: b replaced with b / 2
Mutant 837 in complex.js: this['asin'] replaced with this['asinh']
Mutant 838 in complex.js: this['asin'] replaced with this['acos']
Mutant 839 in complex.js: this['asin'] replaced with this['atan']
Mutant 840 in complex.js: this['acos'] replaced with this['atan']
Mutant 841 in complex.js: this['acos'] replaced with this['acosh']
Mutant 842 in complex.js: this['acos'] replaced with this['asin']
Mutant 843 in complex.js: res['im'] <= 0 replaced with res['im'] < 0
Mutant 844 in complex.js: res['im'] <= 0 replaced with Math.abs(res['im']) <= 0
Mutant 845 in complex.js: res['im'] <= 0 replaced with 1 / res['im'] <= 0
Mutant 846 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(1 / (x['re'] + x['im']))
Mutant 847 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(1 / (x['re'] - x['im']))
Mutant 848 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(1 / (x['re'] * x['im']))
Mutant 849 in complex.js: x['re'] replaced with x['im']
Mutant 850 in complex.js: x['re'] replaced with -x['re']
Mutant 851 in complex.js: x['re'] replaced with x['re'] * Math.PI
Mutant 852 in complex.js: x['im'] replaced with b
Mutant 853 in complex.js: x['im'] replaced with -x['im']
Mutant 854 in complex.js: x['im'] replaced with x['re']
Mutant 855 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(x['im'] + x['re'])
Mutant 856 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(x['re'] - x['im'])
Mutant 857 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(x['im'] * x['re'])
Mutant 858 in complex.js: Math.atan2 replaced with Math.acos
Mutant 859 in complex.js: Math.atan2 replaced with Math.asin
Mutant 860 in complex.js: Math.atan2 replaced with Math.tan
Mutant 861 in complex.js: x['im'] replaced with x['re']
Mutant 862 in complex.js: x['im'] replaced with -x['re']
Mutant 863 in complex.js: x['im'] replaced with Complex.random()
Mutant 864 in complex.js: temp replaced with Math.atan2(b, b)
Mutant 865 in complex.js: temp replaced with Math.atan2(b, a)
Mutant 866 in complex.js: temp replaced with Math.atan2(-a, -b)
Mutant 867 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 868 in complex.js: a === 0 && b === 0 replaced with !a && b
Mutant 869 in complex.js: a === 0 && b === 0 replaced with a && b === 0
Mutant 870 in complex.js: b === 0 replaced with b === -0
Mutant 871 in complex.js: b === 0 replaced with b === 1
Mutant 872 in complex.js: b === 0 replaced with b === undefined
Mutant 873 in complex.js: Math.log replaced with 1 / Math.log
Mutant 874 in complex.js: Math.log replaced with Math.exp
Mutant 875 in complex.js: Math.log replaced with Math.sin
Mutant 876 in complex.js: a + Math.sqrt(a * a + 1) replaced with a - Math.sqrt(a * a + 1)
Mutant 877 in complex.js: a + Math.sqrt(a * a + 1) replaced with Math.PI + Math.sqrt(a * a + 1)
Mutant 878 in complex.js: a + Math.sqrt(a * a + 1) replaced with a * Math.sqrt(a * a + 1)
Mutant 879 in complex.js: Math.sqrt replaced with Math.round
Mutant 880 in complex.js: Math.sqrt replaced with Math.abs
Mutant 881 in complex.js: Math.sqrt replaced with Math.floor
Mutant 882 in complex.js: a * a + 1 replaced with a - 1
Mutant 883 in complex.js: a * a + 1 replaced with 2 * a
Mutant 884 in complex.js: this['isZero'] replaced with !this['isZero']
Mutant 885 in complex.js: this['isZero'] replaced with this['isZero'] && 1
Mutant 886 in complex.js: this['isZero'] replaced with this['isZero'] && !1
Mutant 887 in complex.js: this['isZero']() replaced with this['isInfinite']()
Mutant 888 in complex.js: this['isZero']() replaced with this['im'] === Infinity
Mutant 889 in complex.js: this['isZero']() replaced with this['re'] === Infinity
Mutant 890 in complex.js: this['isZero'] replaced with this['isReal']
Mutant 891 in complex.js: this['isZero'] replaced with this['im'] === 0
Mutant 892 in complex.js: this['isInfinite']() replaced with this['isZero']()
Mutant 893 in complex.js: this['isInfinite']() replaced with this['im'] === 0
Mutant 894 in complex.js: this['isInfinite']() replaced with this['re'] !== 0
Mutant 895 in complex.js: this['isInfinite'] replaced with this['re'] = 0
Mutant 896 in complex.js: this['isInfinite'] replaced with this['im'] = 0
Mutant 897 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10 * places || 0)
Mutant 898 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10 + places || 0)
Mutant 899 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10 + places ? 0 : places)
Mutant 900 in complex.js: Math.pow replaced with apow
Mutant 901 in complex.js: Math.pow replaced with Math.power
Mutant 902 in complex.js: 10 replaced with 5
Mutant 903 in complex.js: 10 replaced with 100
Mutant 904 in complex.js: 10 replaced with Math.PI
Mutant 905 in complex.js: places || 0 replaced with places || 1
Mutant 906 in complex.js: places || 0 replaced with places || Math.PI
Mutant 907 in complex.js: places || 0 replaced with places || "Hello World!"
Mutant 908 in complex.js: Math.ceil replaced with Math.round
Mutant 909 in complex.js: Math.ceil replaced with Math.abs
Mutant 910 in complex.js: Math.ceil replaced with Math.imul
Mutant 911 in complex.js: this['re'] * places replaced with a * places
Mutant 912 in complex.js: this['re'] * places replaced with places + b
Mutant 913 in complex.js: this['re'] * places replaced with b / places
Mutant 914 in complex.js: Math.ceil replaced with Math.sqrt
Mutant 915 in complex.js: Math.ceil replaced with Math.floor
Mutant 916 in complex.js: Math.ceil replaced with Math.sinh
Mutant 917 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10)
Mutant 918 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10, places || 1)
Mutant 919 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10, places * 5)
Mutant 920 in complex.js: 10 replaced with 9
Mutant 921 in complex.js: 10 replaced with 12
Mutant 922 in complex.js: 10 replaced with 5
Mutant 923 in complex.js: places || 0 replaced with -places || 0
Mutant 924 in complex.js: places || 0 replaced with Math.floor(places) || 0
Mutant 925 in complex.js: this['re'] * places replaced with this['im'] * places
Mutant 926 in complex.js: this['re'] * places replaced with this['re'] / places
Mutant 927 in complex.js: this['re'] * places replaced with this['re'] + places
Mutant 928 in complex.js: Math.floor replaced with Math.ceil
Mutant 929 in complex.js: Math.floor replaced with Math.round
Mutant 930 in complex.js: Math.floor replaced with Math.abs
Mutant 931 in complex.js: this['im'] * places replaced with this['re'] * places
Mutant 932 in complex.js: this['im'] * places replaced with b * places
Mutant 933 in complex.js: this['im'] * places replaced with -b * places
Mutant 934 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(0.5, places || 0)
Mutant 935 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(100, places || 0)
Mutant 936 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(places, 0)
Mutant 937 in complex.js: Math.pow replaced with 0
Mutant 938 in complex.js: Math.pow replaced with 2
Mutant 939 in complex.js: Math.pow replaced with 1 + 1
Mutant 940 in complex.js: 10 replaced with Math.max(1000, Math.min(1000, places))
Mutant 941 in complex.js: 10 replaced with Math.PI
Mutant 942 in complex.js: 10 replaced with function () {
  return 0;
}
Mutant 943 in complex.js: places || 0 replaced with places && 0
Mutant 944 in complex.js: places || 0 replaced with places ^ 0
Mutant 945 in complex.js: places || 0 replaced with places ? 0 : places
Mutant 946 in complex.js: Math.round replaced with Math.ceil
Mutant 947 in complex.js: Math.round replaced with Math.floor
Mutant 948 in complex.js: Math.round replaced with Math.trunc
Mutant 949 in complex.js: this['re'] * places replaced with b * places
Mutant 950 in complex.js: this['re'] * places replaced with this['im'] * places
Mutant 951 in complex.js: this['re'] * places replaced with Math.sqrt(this['re'] * places) / places
Mutant 952 in complex.js: Math.round replaced with Math.floor
Mutant 953 in complex.js: Math.round replaced with Math.ceil
Mutant 954 in complex.js: this['im'] * places replaced with this['im'] * Math.pow(10, places || 0)
Mutant 955 in complex.js: this['im'] * places replaced with this['im'] * (places || 0)
Mutant 956 in complex.js: this['im'] * places replaced with this['im'] * 10
Mutant 957 in complex.js: Math.abs replaced with Math.ceil
Mutant 958 in complex.js: Math.abs replaced with Math.floor
Mutant 959 in complex.js: Math.abs replaced with Math.round
Mutant 960 in complex.js: z['re'] - this['re'] replaced with -z['re'] - this['re']
Mutant 961 in complex.js: z['re'] - this['re'] replaced with z['im'] - this['im']
Mutant 962 in complex.js: z['re'] - this['re'] replaced with z['re'] - this["re"]
Mutant 963 in complex.js: Math.abs replaced with z['im'] - this['im'] !== 0
Mutant 964 in complex.js: z['im'] - this['im'] replaced with 1 - z['im'] - this['im']
Mutant 965 in complex.js: z['im'] - this['im'] replaced with z['im'] * this['im']
Mutant 966 in complex.js: this['isNaN']() replaced with !this['isNaN']()
Mutant 967 in complex.js: this['isNaN']() replaced with this['isFinite']()
Mutant 968 in complex.js: this['isNaN']() replaced with this['re'] > this['im']
Mutant 969 in complex.js: this['isNaN'] replaced with this['isInfinite']
Mutant 970 in complex.js: this['isInfinite']() replaced with -this['isInfinite']()
Mutant 971 in complex.js: this['isInfinite']() replaced with this['isFinite']()
Mutant 972 in complex.js: this['isInfinite']() replaced with isNaN(this['im'])
Mutant 973 in complex.js: this['isInfinite'] replaced with this['isInfinite'] !== Infinity
Mutant 974 in complex.js: this['isInfinite'] replaced with this['isInfinite'] === NaN
Mutant 975 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with a > Complex['EPSILON']
Mutant 976 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with Math.abs(a) > Complex['EPSILON']
Mutant 977 in complex.js: a replaced with a + 1
Mutant 978 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with Math.floor(b) < Complex['EPSILON']
Mutant 979 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with Math.ceil(b) < Complex['EPSILON']
Mutant 980 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with b < Complex['EPSILON']
Mutant 981 in complex.js: b replaced with this['im']
Mutant 982 in complex.js: b replaced with -this['im']
Mutant 983 in complex.js: b replaced with this['im'] + 1
Mutant 984 in complex.js: b === 0 replaced with b === 1
Mutant 985 in complex.js: b === 0 replaced with b !== a
Mutant 986 in complex.js: b === 0 replaced with a + b === 0
Mutant 987 in complex.js: a !== 0 replaced with !a
Mutant 988 in complex.js: a !== 0 replaced with a != 0
Mutant 989 in complex.js: a !== 0 replaced with a--
Mutant 990 in complex.js: b < 0 replaced with b > 0
Mutant 991 in complex.js: b < 0 replaced with b !== 0
Mutant 992 in complex.js: b < 0 replaced with b + 1 < 0
Mutant 993 in complex.js: b < 0 replaced with b > 0
Mutant 994 in complex.js: b < 0 replaced with !b
Mutant 995 in complex.js: b < 0 replaced with b === undefined
Mutant 996 in complex.js: 1 !== b replaced with b === 0
Mutant 997 in complex.js: 1 !== b replaced with b - 1
Mutant 998 in complex.js: 1 !== b replaced with 1 !== b && b !== 0
Mutant 999 in complex.js: this['im'] === 0 replaced with this['im'] != 0
Mutant 1000 in complex.js: this['im'] === 0 replaced with Math.abs(this['im']) < 1e-15
Mutant 1001 in complex.js: this['im'] === 0 replaced with !isFinite(this['im'])
Mutant 1002 in complex.js: isNaN replaced with this['re'] < 0
Mutant 1003 in complex.js: isNaN replaced with this['re'] != this['re']
Mutant 1004 in complex.js: this['re'] replaced with this['im']
Mutant 1005 in complex.js: this['re'] replaced with Math.sqrt(this['re'])
Mutant 1006 in complex.js: this['re'] replaced with Complex['I']
Mutant 1007 in complex.js: isNaN replaced with !isNaN
Mutant 1008 in complex.js: isNaN replaced with Number.isNaN
Mutant 1009 in complex.js: isNaN replaced with isfinite
Mutant 1010 in complex.js: this['im'] replaced with this['im'] + 1
Mutant 1011 in complex.js: this['im'] replaced with this['im'] * 2
Mutant 1012 in complex.js: this['im'] replaced with Math.sqrt(this['im'])
Mutant 1013 in complex.js: isFinite replaced with !isFinite
Mutant 1014 in complex.js: isFinite replaced with this['im'] === Infinity
Mutant 1015 in complex.js: this['re'] replaced with this['im']
Mutant 1016 in complex.js: this['re'] replaced with this['re'] + this['im']
Mutant 1017 in complex.js: this['re'] replaced with this['im'] - this['re']
Mutant 1018 in complex.js: isFinite replaced with !isFinite
Mutant 1019 in complex.js: this['im'] replaced with this['re']
Mutant 1020 in complex.js: this['im'] replaced with -this['im']
Mutant 1021 in complex.js: this['im'] replaced with this['im'] + 1
Mutant 1022 in complex.js: this['isNaN'] replaced with !this['isNaN']
Mutant 1023 in complex.js: this['isNaN'] replaced with this['isInfinite']
Mutant 1024 in complex.js: this['isFinite'] replaced with this['isInfinite']
Mutant 1025 in complex.js: this['isFinite'] replaced with !this['isFinite']
Mutant 1026 in complex.js: this['isFinite'] replaced with this['re'] > 0
Mutant 1027 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define === 'undefined'
Mutant 1028 in complex.js: typeof define === 'function' && define['amd'] replaced with define.amd === 'undefined'
Mutant 1029 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define !== 'function'
Mutant 1030 in complex.js: typeof exports === 'object' replaced with typeof module === 'function'
Mutant 1031 in complex.js: typeof exports === 'object' replaced with typeof define === 'string'
Mutant 1032 in complex.js: typeof exports === 'object' replaced with typeof exports === 'undefined'
Mutant 1033 in complex.js: Object.defineProperty(Complex, "__esModule", {
  'value': true
}) replaced with Object.defineProperty(Complex, '__esModule', true)
Mutant 1034 in complex.js: Object.defineProperty(Complex, "__esModule", {
  'value': true
}) replaced with Object.defineProperty(Complex, '__esModule', {
  'value': false
})
Mutant 1035 in complex.js: Object.defineProperty(Complex, "__esModule", {
  'value': true
}) replaced with Object.defineProperty(Complex, '__esModule', {
  'value': true,
  'num': 42
})
Mutant 1036 in complex.js: Complex replaced with Complex * 0
Mutant 1037 in complex.js: Complex replaced with Complex + '1'
Mutant 1038 in complex.js: Complex replaced with Complex + (1 ? 2 : 1)
Mutant 1039 in complex.js: {
  'value': true
} replaced with {
  'value': false
}
Mutant 1040 in complex.js: {
  'value': true
} replaced with {
  'value': null
}
Mutant 1041 in complex.js: {
  'value': true
} replaced with {
  'value2': true
}
[32m09:41:51 (2831) INFO Instrumenter[39m Instrumented 1 source file(s) with 1042 mutant(s)
[32m09:41:51 (2831) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m09:41:53 (2831) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m09:41:53 (2831) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m09:41:53 (2831) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 533 ms, overhead 0 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~8m) 19/1042 tested (19 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~9m) 37/1042 tested (24 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~8m) 56/1042 tested (31 survived, 0 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~8m) 75/1042 tested (34 survived, 0 timed out)
Mutation testing 8% (elapsed: <1m, remaining: ~8m) 93/1042 tested (36 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~8m) 112/1042 tested (37 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~8m) 131/1042 tested (41 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~7m) 150/1042 tested (42 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~8m) 164/1042 tested (44 survived, 0 timed out)
Mutation testing 17% (elapsed: ~1m, remaining: ~8m) 178/1042 tested (52 survived, 1 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~7m) 197/1042 tested (56 survived, 1 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~7m) 215/1042 tested (59 survived, 1 timed out)
Mutation testing 22% (elapsed: ~2m, remaining: ~7m) 234/1042 tested (66 survived, 1 timed out)
Mutation testing 24% (elapsed: ~2m, remaining: ~7m) 253/1042 tested (68 survived, 1 timed out)
Mutation testing 26% (elapsed: ~2m, remaining: ~7m) 273/1042 tested (77 survived, 1 timed out)
Mutation testing 28% (elapsed: ~2m, remaining: ~6m) 292/1042 tested (85 survived, 1 timed out)
Mutation testing 29% (elapsed: ~2m, remaining: ~6m) 311/1042 tested (90 survived, 1 timed out)
Mutation testing 31% (elapsed: ~3m, remaining: ~6m) 330/1042 tested (93 survived, 1 timed out)
Mutation testing 33% (elapsed: ~3m, remaining: ~6m) 350/1042 tested (95 survived, 1 timed out)
Mutation testing 35% (elapsed: ~3m, remaining: ~6m) 369/1042 tested (102 survived, 1 timed out)
Mutation testing 37% (elapsed: ~3m, remaining: ~5m) 388/1042 tested (105 survived, 1 timed out)
Mutation testing 39% (elapsed: ~3m, remaining: ~5m) 407/1042 tested (108 survived, 1 timed out)
Mutation testing 40% (elapsed: ~3m, remaining: ~5m) 426/1042 tested (108 survived, 1 timed out)
Mutation testing 42% (elapsed: ~4m, remaining: ~5m) 444/1042 tested (109 survived, 1 timed out)
Mutation testing 44% (elapsed: ~4m, remaining: ~5m) 463/1042 tested (109 survived, 1 timed out)
Mutation testing 46% (elapsed: ~4m, remaining: ~5m) 482/1042 tested (112 survived, 1 timed out)
Mutation testing 48% (elapsed: ~4m, remaining: ~4m) 501/1042 tested (113 survived, 1 timed out)
Mutation testing 49% (elapsed: ~4m, remaining: ~4m) 520/1042 tested (113 survived, 1 timed out)
Mutation testing 51% (elapsed: ~4m, remaining: ~4m) 538/1042 tested (113 survived, 1 timed out)
Mutation testing 53% (elapsed: ~5m, remaining: ~4m) 557/1042 tested (113 survived, 1 timed out)
Mutation testing 55% (elapsed: ~5m, remaining: ~4m) 576/1042 tested (115 survived, 1 timed out)
Mutation testing 57% (elapsed: ~5m, remaining: ~4m) 595/1042 tested (115 survived, 1 timed out)
Mutation testing 58% (elapsed: ~5m, remaining: ~3m) 614/1042 tested (115 survived, 1 timed out)
Mutation testing 60% (elapsed: ~5m, remaining: ~3m) 633/1042 tested (134 survived, 1 timed out)
Mutation testing 62% (elapsed: ~5m, remaining: ~3m) 651/1042 tested (152 survived, 1 timed out)
Mutation testing 64% (elapsed: ~6m, remaining: ~3m) 671/1042 tested (172 survived, 1 timed out)
Mutation testing 66% (elapsed: ~6m, remaining: ~3m) 689/1042 tested (188 survived, 1 timed out)
Mutation testing 67% (elapsed: ~6m, remaining: ~2m) 708/1042 tested (199 survived, 1 timed out)
Mutation testing 69% (elapsed: ~6m, remaining: ~2m) 727/1042 tested (199 survived, 1 timed out)
Mutation testing 71% (elapsed: ~6m, remaining: ~2m) 747/1042 tested (200 survived, 1 timed out)
Mutation testing 73% (elapsed: ~6m, remaining: ~2m) 765/1042 tested (201 survived, 1 timed out)
Mutation testing 75% (elapsed: ~7m, remaining: ~2m) 784/1042 tested (202 survived, 1 timed out)
Mutation testing 77% (elapsed: ~7m, remaining: ~2m) 803/1042 tested (217 survived, 1 timed out)
Mutation testing 78% (elapsed: ~7m, remaining: ~1m) 822/1042 tested (236 survived, 1 timed out)
Mutation testing 80% (elapsed: ~7m, remaining: ~1m) 841/1042 tested (255 survived, 1 timed out)
Mutation testing 82% (elapsed: ~7m, remaining: ~1m) 860/1042 tested (274 survived, 1 timed out)
Mutation testing 84% (elapsed: ~7m, remaining: ~1m) 879/1042 tested (293 survived, 1 timed out)
Mutation testing 86% (elapsed: ~8m, remaining: ~1m) 899/1042 tested (304 survived, 1 timed out)
Mutation testing 88% (elapsed: ~8m, remaining: ~1m) 918/1042 tested (323 survived, 1 timed out)
Mutation testing 89% (elapsed: ~8m, remaining: <1m) 937/1042 tested (340 survived, 1 timed out)
Mutation testing 91% (elapsed: ~8m, remaining: <1m) 956/1042 tested (348 survived, 1 timed out)
Mutation testing 93% (elapsed: ~8m, remaining: <1m) 975/1042 tested (354 survived, 1 timed out)
Mutation testing 95% (elapsed: ~8m, remaining: <1m) 993/1042 tested (357 survived, 1 timed out)
Mutation testing 97% (elapsed: ~9m, remaining: <1m) 1013/1042 tested (365 survived, 1 timed out)
Mutation testing 99% (elapsed: ~9m, remaining: <1m) 1033/1042 tested (369 survived, 1 timed out)

All tests
  ✓ All tests (killed 667)

[Survived] PrecomputedMutator
complex.js:41:21
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x + 1) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:21
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x - 1) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:21
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x * 2) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:42
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.log(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:42
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.sin(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:42
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.cos(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:56
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + 1 - x(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:65
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(0)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:65
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(2)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:65
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-2)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:12
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.sqrt(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:21
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(1 + x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:21
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x * x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:21
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(2 * x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:47
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x + 1) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:47
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x * 2) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:47
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x / 2) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:52
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.sin(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:52
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.tan(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:52
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.atan(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(y)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(a + b)) * 0.5;

[Survived] PrecomputedMutator
complex.js:58:23
-         return Math.cos(x) - 1.0;
+         return Math.cos(-x) - 1.0;

[Survived] PrecomputedMutator
complex.js:96:9
-       if (a < 3000 && b < 3000) {
+       if (a < 1000000000 && b < 1000000000) {

[Survived] PrecomputedMutator
complex.js:106:16
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.floor(1 + b * b);

[Survived] PrecomputedMutator
complex.js:106:16
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.ceil(1 + b * b);

[Survived] PrecomputedMutator
complex.js:106:16
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.random(1 + b * b);

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(b * b - 1);

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(b * b - a);

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(Math.random() * b * b);

[Survived] PrecomputedMutator
complex.js:122:23
-       var _a = Math.abs(a);
+       var _a = Math.abs(b - a);

[Survived] PrecomputedMutator
complex.js:123:14
-       var _b = Math.abs(b);
+       var _b = x => x(b);

[Survived] PrecomputedMutator
complex.js:126:23
-         return Math.log(_b);
+         return Math.log(a + b);

[Survived] PrecomputedMutator
complex.js:172:27
-       return 0.5 * Math.log(a * a + b * b) + Math.LN2;
+       return 0.5 * Math.log(a * a * a + b * b) + Math.LN2;

[Survived] PrecomputedMutator
complex.js:179:9
-       if (a === undefined || a === null) {
+       if (a == undefined || a == null) {

[Survived] PrecomputedMutator
complex.js:190:15
-             if ('im' in a && 're' in a) {
+             if ('im' in a || 're' in a) {

[Survived] PrecomputedMutator
complex.js:194:63
-               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
+               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'] * 1000)) {

[Survived] PrecomputedMutator
complex.js:194:63
-               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
+               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'] * -1)) {

[Survived] PrecomputedMutator
complex.js:194:63
-               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
+               if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'] + 3.14)) {

[Survived] PrecomputedMutator
complex.js:199:22
-             } else if ('r' in a && 'phi' in a) {
+             } else if ('r' in a || 'phi' in a) {

[Survived] PrecomputedMutator
complex.js:200:34
-               if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
+               if (!Number.isFinite(a.r) && Number.isFinite(a['phi'])) {

[Survived] PrecomputedMutator
complex.js:222:15
-             if (tokens === null) {
+             if (typeof tokens !== 'object') {

[Survived] PrecomputedMutator
complex.js:222:15
-             if (tokens === null) {
+             if (tokens.length === 0) {

[Survived] PrecomputedMutator
complex.js:230:17
-               if (c === ' ' || c === '\t' || c === '\n') {
+               if (c === ' ' || c === '\t' || c === '\r') {

[Survived] PrecomputedMutator
complex.js:230:17
-               if (c === ' ' || c === '\t' || c === '\n') {
+               if (c === ' ' || c === '\t' || c === '\v') {

[Survived] PrecomputedMutator
complex.js:230:17
-               if (c === ' ' || c === '\t' || c === '\n') {
+               if (c === ' ' || c === '\t' || c === ',') {

[Survived] PrecomputedMutator
complex.js:234:24
-               } else if (c === '-') {
+               } else if (c < '0') {

[Survived] PrecomputedMutator
complex.js:236:24
-               } else if (c === 'i' || c === 'I') {
+               } else if (c == 'i' || c == 'I') {

[Survived] PrecomputedMutator
complex.js:236:24
-               } else if (c === 'i' || c === 'I') {
+               } else if (c === 'i' || c === 'I' || c === '+' || c === '-') {

[Survived] PrecomputedMutator
complex.js:236:24
-               } else if (c === 'i' || c === 'I') {
+               } else if (c === 'i' || c === 'I' || c === 0) {

[Survived] PrecomputedMutator
complex.js:238:19
-                 if (plus + minus === 0) {
+                 if (plus === minus) {

[Survived] PrecomputedMutator
complex.js:238:19
-                 if (plus + minus === 0) {
+                 if (typeof a === 'number') {

[Survived] PrecomputedMutator
complex.js:242:51
-                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
+                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 2])) {

[Survived] PrecomputedMutator
complex.js:242:51
-                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
+                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i - 1] * tokens[i + 1])) {

[Survived] PrecomputedMutator
complex.js:252:19
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (plus + minus === 0) {

[Survived] PrecomputedMutator
complex.js:257:28
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
+                   z['im'] += Number((minus % 2 ? '-' : '') + c);

[Survived] PrecomputedMutator
complex.js:260:39
-                   z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
+                   z['re'] += parseFloat((minus % 2 ? '-' : '') + Math.abs(c));

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (false) {

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (z['re'] + z['im'] < 0) {

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isFinite(z['re']) || isNaN(z['im'])) {

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (Number.isNaN(z['re']) || isNaN(z['im'])) {

[Survived] PrecomputedMutator
complex.js:281:15
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re'] * z['im']) || isNaN(z['im'])) {

[Survived] PrecomputedMutator
complex.js:281:33
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re']) || isNaN(z['im'] + 1)) {

[Survived] PrecomputedMutator
complex.js:281:33
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re']) || isNaN(z['re'] + 1)) {

[Survived] PrecomputedMutator
complex.js:281:33
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re']) || isNaN(z['im'] - 1)) {

[Survived] PrecomputedMutator
complex.js:334:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (z['isInfinite']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:339:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:358:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (false) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isNaN']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isZero']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:382:11
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if (z['isZero']() && this['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:382:11
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if (z['re'] === 0 && z['im'] === 0) {

[Survived] PrecomputedMutator
complex.js:382:55
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['abs']() && z['isInfinite']())) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && this['im'] === 1())) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && this['im'] !== 0())) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && true())) {

[Survived] PrecomputedMutator
complex.js:387:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() !== z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:387:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || this['isZero']()) {

[Survived] PrecomputedMutator
complex.js:387:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:387:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:416:11
-         if (this['isInfinite']() || z['isZero']()) {
+         if (this['isInfinite']() && z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:416:35
-         if (this['isInfinite']() || z['isZero']()) {
+         if (this['isInfinite']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isZero']() && z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isInfinite']() && z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:421:31
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isZero']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:437:11
-         if (Math.abs(c) < Math.abs(d)) {
+         if (Math.abs(c) != Math.abs(d)) {

[Survived] PrecomputedMutator
complex.js:437:20
-         if (Math.abs(c) < Math.abs(d)) {
+         if (Math.abs(z) < Math.abs(d)) {

[Survived] PrecomputedMutator
complex.js:469:11
-         if (z['isZero']()) {
+         if (z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:474:11
-         if (z['im'] === 0) {
+         if (z['im'] === 0 && z['re'] !== 0) {

[Survived] PrecomputedMutator
complex.js:478:42
-             return new Complex(Math.pow(a, z['re']), 0);
+             return new Complex(Math.pow(a, z['abs']()), 0);

[Survived] PrecomputedMutator
complex.js:484:34
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(a, z['im']), 0);

[Survived] PrecomputedMutator
complex.js:484:34
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['re'] + 1), 0);

[Survived] PrecomputedMutator
complex.js:484:46
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['re'] * 2), 0);

[Survived] PrecomputedMutator
complex.js:484:46
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['re'] + 1), 0);

[Survived] PrecomputedMutator
complex.js:484:46
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['re'] - 1), 0);

[Survived] PrecomputedMutator
complex.js:486:37
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.pow(b, -z['re']));

[Survived] PrecomputedMutator
complex.js:486:49
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.pow(b, z['im']));

[Survived] PrecomputedMutator
complex.js:486:49
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.pow(b, z.re));

[Survived] PrecomputedMutator
complex.js:488:47
-                 return new Complex(-Math.pow(b, z['re']), 0);
+                 return new Complex(-Math.pow(b, 1), 0);

[Survived] PrecomputedMutator
complex.js:490:50
-                 return new Complex(0, -Math.pow(b, z['re']));
+                 return new Complex(0, -Math.pow(b, b));

[Survived] PrecomputedMutator
complex.js:490:50
-                 return new Complex(0, -Math.pow(b, z['re']));
+                 return new Complex(0, -Math.pow(b, a));

[Survived] PrecomputedMutator
complex.js:514:11
-         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
+         if (a === 0 && b === 0 && z.re >= 0) {

[Survived] PrecomputedMutator
complex.js:544:40
-             return new Complex(Math.sqrt(a), 0);
+             return new Complex(Math.sqrt(a * Math.sign(a)), 0);

[Survived] PrecomputedMutator
complex.js:555:23
-           im = Math.abs(b) / Math.sqrt(2 * (r + a));
+           im = Math.abs(-b) / Math.sqrt(2 * (r + a));

[Survived] PrecomputedMutator
complex.js:570:11
-         if (this['im'] === 0) {
+         if (this['re'] === this['im']) {

[Survived] PrecomputedMutator
complex.js:570:11
-         if (this['im'] === 0) {
+         if (this['re'] !== 0) {

[Survived] PrecomputedMutator
complex.js:598:45
-           Math.expm1(a) * Math.cos(b) + cosm1(b),
+           Math.expm1(a) * Math.cos(b) + cosm1(-b),

[Survived] PrecomputedMutator
complex.js:656:23
-           Math.cos(a) * sinh(b));
+           Math.cos(a) * Math.sinh(b));

[Survived] PrecomputedMutator
complex.js:673:28
-           Math.cos(a) * cosh(b),
+           Math.cos(a) * cosh(-b),

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * sinh(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * tanh(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * arcsinh(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * c) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(3 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(b * c) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:41
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.sin(2 * a);

[Survived] PrecomputedMutator
complex.js:727:41
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * 2 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:41
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.tan(2 * a);

[Survived] PrecomputedMutator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(a * 2);

[Survived] PrecomputedMutator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(a + 2);

[Survived] PrecomputedMutator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 - a);

[Survived] PrecomputedMutator
complex.js:730:18
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a + b) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:18
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a - b) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:18
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a * b) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:28
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(a) / d,

[Survived] PrecomputedMutator
complex.js:730:28
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(b * b) / d,

[Survived] PrecomputedMutator
complex.js:730:28
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(math.cos(a)) / d,

[Survived] PrecomputedMutator
complex.js:731:18
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a + 1) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:18
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(Math.sin(a + 1)) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:18
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(new Complex(Math.sin(a))) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:23
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * sin(b) / d);

[Survived] PrecomputedMutator
complex.js:731:28
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * sinh(2 * b) / d);

[Survived] PrecomputedMutator
complex.js:731:28
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * sinh(b + 1) / d);

[Survived] PrecomputedMutator
complex.js:745:21
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * sinh(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:21
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * 1 + Math.cosh(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:21
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * Math.abs(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:26
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * a) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:26
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 - b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:26
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 / b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * b);

[Survived] PrecomputedMutator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(Math.sin(a + b));

[Survived] PrecomputedMutator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(Math.cos(a + b) + 1);

[Survived] PrecomputedMutator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.cos(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.tan(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.asin(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:18
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(2 * b - a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:18
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(b * a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:23
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * i * sinh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:23
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * -sin(b) / d,

[Survived] PrecomputedMutator
complex.js:748:23
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * 2 * Math.cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b + 1) / d,

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b * 2) / d,

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b / 2) / d,

[Survived] PrecomputedMutator
complex.js:749:10
-           -Math.cos(a) * sinh(b) / d);
+           -Math.sin(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:10
-           -Math.cos(a) * sinh(b) / d);
+           -a * b(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:10
-           -Math.cos(a) * sinh(b) / d);
+           -b * a(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a + b) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a - b) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(2 * a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:24
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * cosh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:24
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sin(b) / d);

[Survived] PrecomputedMutator
complex.js:749:24
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * tan(b) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(b + 1) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(b - 1) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(b * 2) / d);

[Survived] PrecomputedMutator
complex.js:810:11
-         if (a === 0) {
+         if (a < 0) {

[Survived] PrecomputedMutator
complex.js:812:13
-           if (b === 1) {
+           if (b !== 1) {

[Survived] PrecomputedMutator
complex.js:812:13
-           if (b === 1) {
+           if (b > 1) {

[Survived] PrecomputedMutator
complex.js:812:13
-           if (b === 1) {
+           if (b % 2 === 1) {

[Survived] PrecomputedMutator
complex.js:816:13
-           if (b === -1) {
+           if (b == -2) {

[Survived] PrecomputedMutator
complex.js:816:13
-           if (b === -1) {
+           if (2 * b == -1) {

[Survived] PrecomputedMutator
complex.js:816:13
-           if (b === -1) {
+           if (b == -1 - 1) {

[Survived] PrecomputedMutator
complex.js:842:11
-         if (b === 0) {
+         if (b > 0) {

[Survived] PrecomputedMutator
complex.js:842:11
-         if (b === 0) {
+         if (b !== a) {

[Survived] PrecomputedMutator
complex.js:842:11
-         if (b === 0) {
+         if (Math.abs(b) === 0) {

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(2), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(-1), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(0), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.PI(1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.PI * Math.E(1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.PI + Math.E(1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(0, a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(-1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(complex(0, 1), a), 0);

[Survived] PrecomputedMutator
complex.js:843:42
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, b), 0);

[Survived] PrecomputedMutator
complex.js:843:42
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, this.im * this.re), 0);

[Survived] PrecomputedMutator
complex.js:843:42
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, this.im + this.re), 0);

[Survived] PrecomputedMutator
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (a != 0 && b === 0) {

[Survived] PrecomputedMutator
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] PrecomputedMutator
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (a != 0 && b != 0) {

[Survived] PrecomputedMutator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a > 0 && b > 0) {

[Survived] PrecomputedMutator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a === b) {

[Survived] PrecomputedMutator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (Math.abs(a) < 1 && Math.abs(b) < 1) {

[Survived] PrecomputedMutator
complex.js:939:28
-           sinh(a) * Math.sin(b));
+           sinh(a) * Math.sin(b === 0 ? 1 : b));

[Survived] PrecomputedMutator
complex.js:953:34
-         var d = cosh(a) + Math.cos(b);
+         var d = cosh(a) + Math.cos(-b);

[Survived] PrecomputedMutator
complex.js:971:20
-         var d = cosh(a) - Math.cos(b);
+         var d = cosh(new Complex(a, 0)) - Math.cos(b);

[Survived] PrecomputedMutator
complex.js:989:15
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.sin(2 * b) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:15
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.tan(2 * b) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:15
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.atan(2 * b) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(b) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * a + b * c) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(a * b - c * d) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(a + b);

[Survived] PrecomputedMutator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(-a + b);

[Survived] PrecomputedMutator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(a * b);

[Survived] PrecomputedMutator
complex.js:992:19
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(b) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:19
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a + 1) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:19
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(b * a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:33
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * Math.cos(-b) / d,

[Survived] PrecomputedMutator
complex.js:992:33
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * Math.cos(0) / d,

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(Math.sqrt(Math.cos(b))) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(Math.sin(b)) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(Math.tan(b)) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:23
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.floor(b) / d);

[Survived] PrecomputedMutator
complex.js:993:23
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.PI(b) / d);

[Survived] PrecomputedMutator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.sin(2 * b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = 0(2 * b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = -1(2 * b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:24
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * a) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:24
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * (a + b)) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:24
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(a - b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:33
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + -cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(2 * a + 1);

[Survived] PrecomputedMutator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(2 * a - 1);

[Survived] PrecomputedMutator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(2 * a * 2);

[Survived] PrecomputedMutator
complex.js:1010:13
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * -sinh(a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:13
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cos(a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:13
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * tan(a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:18
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(b) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:18
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(-a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:23
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.acos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:23
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.abs(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:23
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cbrt(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:32
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(b + 1) / d,

[Survived] PrecomputedMutator
complex.js:1010:32
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(b * 2) / d,

[Survived] PrecomputedMutator
complex.js:1010:32
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(null) / d,

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(sinh(a) * Math.sin(b)) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(cosh(a) * Math.cos(b)) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(cosh(a + b)) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:24
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.cos(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:24
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.tan(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:24
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * nontrivial(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:33
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(-b) / d);

[Survived] PrecomputedMutator
complex.js:1011:33
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(b + 1) / d);

[Survived] PrecomputedMutator
complex.js:1011:33
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(b / 2) / d);

[Survived] PrecomputedMutator
complex.js:1026:17
-         var res = this['asin']();
+         var res = this['asinh']();

[Survived] PrecomputedMutator
complex.js:1026:17
-         var res = this['asin']();
+         var res = this['acos']();

[Survived] PrecomputedMutator
complex.js:1026:17
-         var res = this['asin']();
+         var res = this['atan']();

[Survived] PrecomputedMutator
complex.js:1046:17
-         var res = this['acos']();
+         var res = this['atan']();

[Survived] PrecomputedMutator
complex.js:1046:17
-         var res = this['acos']();
+         var res = this['acosh']();

[Survived] PrecomputedMutator
complex.js:1046:17
-         var res = this['acos']();
+         var res = this['asin']();

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (res['im'] < 0) {

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (Math.abs(res['im']) <= 0) {

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (1 / res['im'] <= 0) {

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(1 / (x['re'] + x['im'])) / 2;

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(1 / (x['re'] - x['im'])) / 2;

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(1 / (x['re'] * x['im'])) / 2;

[Survived] PrecomputedMutator
complex.js:1085:26
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['im'], x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:26
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(-x['re'], x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:26
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'] * Math.PI, x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], b) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], -x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'] + x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['re'] - x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'] * x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.acos(x['im'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.asin(x['im'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.tan(x['im'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['re'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(-x['re'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(Complex.random(), temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], Math.atan2(b, b)) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], Math.atan2(b, a)) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], Math.atan2(-a, -b)) / 2;

[Survived] PrecomputedMutator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] PrecomputedMutator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (!a && b) {

[Survived] PrecomputedMutator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a && b === 0) {

[Survived] PrecomputedMutator
complex.js:1131:11
-         if (b === 0) {
+         if (b === -0) {

[Survived] PrecomputedMutator
complex.js:1131:11
-         if (b === 0) {
+         if (b === 1) {

[Survived] PrecomputedMutator
complex.js:1131:11
-         if (b === 0) {
+         if (b === undefined) {

[Survived] PrecomputedMutator
complex.js:1135:15
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? 1 / Math.log(a + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:15
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.exp(a + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:15
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.sin(a + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a - Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(Math.PI + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a * Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:28
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.round(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:28
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.abs(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:28
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.floor(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(a - 1))

[Survived] PrecomputedMutator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(2 * a))

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (!this['isZero']()) {

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (this['isZero'] && 1()) {

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (this['isZero'] && !1()) {

[Survived] PrecomputedMutator
complex.js:1187:11
-         if (this['isInfinite']()) {
+         if (this['im'] === 0) {

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10 * places || 0);

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10 + places || 0);

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10 + places ? 0 : places);

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = apow(10, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.power(10, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(5, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(100, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(Math.PI, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || 1);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || Math.PI);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || "Hello World!");

[Survived] PrecomputedMutator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.round(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.abs(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.imul(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(a * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(places + b) / places,

[Survived] PrecomputedMutator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(b / places) / places,

[Survived] PrecomputedMutator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           Math.sqrt(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           Math.floor(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           Math.sinh(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places || 1);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places * 5);

[Survived] PrecomputedMutator
complex.js:1240:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(9, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(12, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(5, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, -places || 0);

[Survived] PrecomputedMutator
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, Math.floor(places) || 0);

[Survived] PrecomputedMutator
complex.js:1243:20
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this['im'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1243:20
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this['re'] / places) / places,

[Survived] PrecomputedMutator
complex.js:1243:20
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this['re'] + places) / places,

[Survived] PrecomputedMutator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.ceil(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.round(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.abs(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(this['re'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(b * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(-b * places) / places);

[Survived] PrecomputedMutator
complex.js:1254:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(100, places || 0);

[Survived] PrecomputedMutator
complex.js:1254:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(Math.max(1000, Math.min(1000, places)), places || 0);

[Survived] PrecomputedMutator
complex.js:1254:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places ^ 0);

[Survived] PrecomputedMutator
complex.js:1257:9
-           Math.round(this['re'] * places) / places,
+           Math.ceil(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1257:9
-           Math.round(this['re'] * places) / places,
+           Math.floor(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1257:9
-           Math.round(this['re'] * places) / places,
+           Math.trunc(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1258:9
-           Math.round(this['im'] * places) / places);
+           Math.floor(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1258:9
-           Math.round(this['im'] * places) / places);
+           Math.ceil(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1258:20
-           Math.round(this['im'] * places) / places);
+           Math.round(this['im'] * (places || 0)) / places);

[Survived] PrecomputedMutator
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.ceil(z['re'] - this['re']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.floor(z['re'] - this['re']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.round(z['re'] - this['re']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1272:23
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1272:23
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.abs(z['re'] - this["re"]) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1301:11
-         if (this['isInfinite']()) {
+         if (-this['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:1309:20
-         if (Math.abs(b) < Complex['EPSILON']) {
+         if (Math.abs(this['im']) < Complex['EPSILON']) {

[Survived] PrecomputedMutator
complex.js:1309:20
-         if (Math.abs(b) < Complex['EPSILON']) {
+         if (Math.abs(-this['im']) < Complex['EPSILON']) {

[Survived] PrecomputedMutator
complex.js:1318:11
-         if (a !== 0) {
+         if (a != 0) {

[Survived] PrecomputedMutator
complex.js:1333:11
-         if (1 !== b) { // b is the absolute imaginary part
+         if (b - 1) { // b is the absolute imaginary part

[Survived] PrecomputedMutator
complex.js:1333:11
-         if (1 !== b) { // b is the absolute imaginary part
+         if (1 !== b && b !== 0) { // b is the absolute imaginary part

[Survived] PrecomputedMutator
complex.js:1356:11
-         if (this['im'] === 0) {
+         if (Math.abs(this['im']) < 1e-15) {

[Survived] PrecomputedMutator
complex.js:1368:20
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['im']) || isNaN(this['im']);

[Survived] PrecomputedMutator
complex.js:1368:20
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(Complex['I']) || isNaN(this['im']);

[Survived] PrecomputedMutator
complex.js:1368:35
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) || Number.isNaN(this['im']);

[Survived] PrecomputedMutator
complex.js:1368:41
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) || isNaN(this['im'] + 1);

[Survived] PrecomputedMutator
complex.js:1368:41
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) || isNaN(this['im'] * 2);

[Survived] PrecomputedMutator
complex.js:1388:23
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['re'] + this['im']) && isFinite(this['im']);

[Survived] PrecomputedMutator
complex.js:1388:23
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['im'] - this['re']) && isFinite(this['im']);

[Survived] PrecomputedMutator
complex.js:1388:47
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['re']) && isFinite(-this['im']);

[Survived] PrecomputedMutator
complex.js:1388:47
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['re']) && isFinite(this['im'] + 1);

[Survived] PrecomputedMutator
complex.js:1416:5
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, '__esModule', {
+     'value': false
+   });

[Survived] PrecomputedMutator
complex.js:1416:5
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, '__esModule', {
+     'value': true,
+     'num': 42
+   });

[Survived] PrecomputedMutator
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': false
+   });

[Survived] PrecomputedMutator
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': null
+   });

[Survived] PrecomputedMutator
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value2': true
+   });

Ran 1.00 tests per mutant on average.
------------|---------|----------|-----------|------------|----------|----------|
File        | % score | # killed | # timeout | # survived | # no cov | # errors |
------------|---------|----------|-----------|------------|----------|----------|
All files   |   64.11 |      667 |         1 |        374 |        0 |        0 |
 complex.js |   64.11 |      667 |         1 |        374 |        0 |        0 |
------------|---------|----------|-----------|------------|----------|----------|
[32m09:51:08 (2831) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/reports/mutation/mutation.html
[32m09:51:08 (2831) INFO MutationTestExecutor[39m Done in 9 minutes 18 seconds.

real	9m19.717s
user	9m25.238s
sys	1m37.591s
