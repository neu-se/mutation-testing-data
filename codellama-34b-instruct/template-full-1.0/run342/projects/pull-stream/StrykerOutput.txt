*** using precomputed mutations ***
[32m23:14:19 (2750) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m23:14:19 (2750) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m23:14:20 (2750) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m23:14:20 (2750) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m23:14:20 (2750) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m23:14:22 (2750) INFO ProjectReader[39m Found 31 of 1504 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 741 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in sinks) exports[k] = sources[k];
Mutant 1 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in throughs) exports[k] = sources[k];
Mutant 2 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in Object.keys(sources)) exports[k] = sources[k];
Mutant 3 in index.js: sources replaced with sources.slice(0)
Mutant 4 in index.js: sources replaced with sources.slice(1)
Mutant 5 in index.js: sources replaced with sources.splice(0, 1)
Mutant 6 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k in sinks) exports[k] = throughs[k];
Mutant 7 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k in sinks.everything) exports[k] = throughs[k];
Mutant 8 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k in throughs.reverse()) exports[k] = throughs[k];
Mutant 9 in index.js: throughs replaced with throughs.somethingElse
Mutant 10 in index.js: throughs replaced with throughs.map(x => x)
Mutant 11 in index.js: for (var k in sinks) exports[k] = sinks[k]; replaced with for (var l in sinks) exports[k] = sinks[k];
Mutant 12 in index.js: sinks replaced with sinks2
Mutant 13 in index.js: sinks replaced with null
Mutant 14 in index.js: sinks replaced with {}
Mutant 15 in pull.js: typeof a === 'function' && a.length === 1 replaced with typeof a === 'function' && a.length !== 1
Mutant 16 in pull.js: typeof a === 'function' && a.length === 1 replaced with a instanceof Function && a.length === 1
Mutant 17 in pull.js: typeof a === 'function' && a.length === 1 replaced with Array.isArray(a) && a.length === 1
Mutant 18 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = 1; i < length; i++) args[i] = arguments[i];
Mutant 19 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = 2; i < length; i++) args[i] = arguments[i];
Mutant 20 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = length - 1; i < length; i++) args[i] = arguments[i];
Mutant 21 in pull.js: i < length replaced with i <= length
Mutant 22 in pull.js: i < length replaced with i > length
Mutant 23 in pull.js: i < length replaced with i != length
Mutant 24 in pull.js: i++ replaced with i += 2
Mutant 25 in pull.js: i++ replaced with i += -1
Mutant 26 in pull.js: i++ replaced with i = 0
Mutant 27 in pull.js: args == null replaced with args = []
Mutant 28 in pull.js: args == null replaced with args[0] == null
Mutant 29 in pull.js: args == null replaced with read.length == 0
Mutant 30 in pull.js: length replaced with length - 1
Mutant 31 in pull.js: length replaced with length * 2
Mutant 32 in pull.js: length replaced with 0
Mutant 33 in pull.js: pull(read, ref[0]) replaced with pull(read + ref[0])
Mutant 34 in pull.js: pull(read, ref[0]) replaced with pull(read * ref[0])
Mutant 35 in pull.js: pull(read, ref[0]) replaced with pull(read || ref[0])
Mutant 36 in pull.js: read replaced with read + 1
Mutant 37 in pull.js: read replaced with read * 2
Mutant 38 in pull.js: read replaced with read - 1
Mutant 39 in pull.js: ref[0] replaced with ref[1]
Mutant 40 in pull.js: ref[0] replaced with ref[length - 1]
Mutant 41 in pull.js: ref[0] replaced with ref[Math.floor(Math.random() * length)]
Mutant 42 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(ref[0], ref[2])
Mutant 43 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[1], ref[2])
Mutant 44 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[0], ref[2])
Mutant 45 in pull.js: read replaced with read.apply(null, arguments)
Mutant 46 in pull.js: read replaced with read(arguments)
Mutant 47 in pull.js: ref[0] replaced with ref.length - 1
Mutant 48 in pull.js: ref[0] replaced with ref.shift()
Mutant 49 in pull.js: ref[1] replaced with ref[2]
Mutant 50 in pull.js: ref[1] replaced with ref[1] + 1
Mutant 51 in pull.js: ref[1] replaced with ref[1] * 2
Mutant 52 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[3])
Mutant 53 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[2], ref[1])
Mutant 54 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[1], ref[2], ref[0])
Mutant 55 in pull.js: read replaced with null
Mutant 56 in pull.js: read replaced with undefined
Mutant 57 in pull.js: read replaced with "test"
Mutant 58 in pull.js: ref[0] replaced with ref[-1]
Mutant 59 in pull.js: ref[0] replaced with ref[1]
Mutant 60 in pull.js: ref[0] replaced with ref[length]
Mutant 61 in pull.js: ref[1] replaced with ref[2]
Mutant 62 in pull.js: ref[1] replaced with ref[length - 1]
Mutant 63 in pull.js: ref[1] replaced with null
Mutant 64 in pull.js: ref[2] replaced with ref[0]
Mutant 65 in pull.js: ref[2] replaced with ref.length
Mutant 66 in pull.js: ref[2] replaced with ref[i + 1]
Mutant 67 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], ref[4])
Mutant 68 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], s[3])
Mutant 69 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], ref[0])
Mutant 70 in pull.js: read replaced with read + 1
Mutant 71 in pull.js: read replaced with read - 1
Mutant 72 in pull.js: read replaced with read * 2
Mutant 73 in pull.js: ref[0] replaced with ref[1]
Mutant 74 in pull.js: ref[0] replaced with ref.length
Mutant 75 in pull.js: ref[0] replaced with null
Mutant 76 in pull.js: ref[1] replaced with ref[2]
Mutant 77 in pull.js: ref[1] replaced with ref.length
Mutant 78 in pull.js: ref[2] replaced with ref[3]
Mutant 79 in pull.js: ref[2] replaced with ref[1]
Mutant 80 in pull.js: ref[2] replaced with ref[0]
Mutant 81 in pull.js: ref[3] replaced with ref[4]
Mutant 82 in pull.js: ref[3] replaced with ref[1]
Mutant 83 in pull.js: ref[3] replaced with ref[3] + 1
Mutant 84 in pull.js: ref.unshift replaced with ref.push
Mutant 85 in pull.js: ref.unshift replaced with ref.pop
Mutant 86 in pull.js: pull.apply(null, ref) replaced with pull.apply(ref, null)
Mutant 87 in pull.js: pull.apply(null, ref) replaced with pull.apply(null, ref, null)
Mutant 88 in pull.js: pull.apply(null, ref) replaced with pull.apply(ref, null, ref)
Mutant 89 in pull.js: null replaced with true
Mutant 90 in pull.js: null replaced with 0
Mutant 91 in pull.js: null replaced with []
Mutant 92 in pull.js: ref replaced with []
Mutant 93 in pull.js: ref replaced with null
Mutant 94 in pull.js: ref replaced with "string"
Mutant 95 in pull.js: read && typeof read.source === 'function' replaced with read && read.source
Mutant 96 in pull.js: read && typeof read.source === 'function' replaced with read && typeof read.source !== 'function'
Mutant 97 in pull.js: read && typeof read.source === 'function' replaced with read && typeof read.source === 'function' && read.source.length > 1
Mutant 98 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = 0; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 99 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = 2; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 100 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = length - 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 101 in pull.js: i < length replaced with i > length
Mutant 102 in pull.js: i < length replaced with i <= length
Mutant 103 in pull.js: i < length replaced with i < length - 1
Mutant 104 in pull.js: i++ replaced with i = 0
Mutant 105 in pull.js: i++ replaced with i = 1
Mutant 106 in pull.js: typeof s === 'function' replaced with s.source()
Mutant 107 in pull.js: typeof s === 'function' replaced with s.sink
Mutant 108 in pull.js: typeof s === 'function' replaced with s.source === s
Mutant 109 in pull.js: s replaced with s + 0
Mutant 110 in pull.js: s replaced with s - 1
Mutant 111 in pull.js: read replaced with read.title
Mutant 112 in pull.js: read replaced with read.apply(this, [])
Mutant 113 in pull.js: read replaced with read.bind(null)()
Mutant 114 in pull.js: s && typeof s === 'object' replaced with s || typeof s === 'object'
Mutant 115 in pull.js: s && typeof s === 'object' replaced with s && typeof s === 'function'
Mutant 116 in pull.js: s && typeof s === 'object' replaced with s !== 'object'
Mutant 117 in pull.js: s.sink replaced with read = s.sink
Mutant 118 in pull.js: s.sink replaced with read = s - 1
Mutant 119 in pull.js: s.sink replaced with read = null
Mutant 120 in pull.js: read replaced with read + 1
Mutant 121 in pull.js: read replaced with read - 1
Mutant 122 in pull.js: read replaced with read + 2
Mutant 123 in collect.js: arr.push replaced with arr.unshift
Mutant 124 in collect.js: arr.push replaced with arr.pop
Mutant 125 in collect.js: item replaced with arr[item]
Mutant 126 in collect.js: item replaced with arr.push(item * 2)
Mutant 127 in collect.js: item replaced with arr.splice(item, 1)
Mutant 128 in drain.js: !done replaced with done == null
Mutant 129 in drain.js: !done replaced with typeof done !== "function"
Mutant 130 in drain.js: !done replaced with done !== true
Mutant 131 in drain.js: abort replaced with true
Mutant 132 in drain.js: abort replaced with 1
Mutant 133 in drain.js: abort replaced with !abort
Mutant 134 in drain.js: loop replaced with false
Mutant 135 in drain.js: loop replaced with loop + 1
Mutant 136 in drain.js: loop replaced with !loop
Mutant 137 in drain.js: end = end || abort replaced with end = abort
Mutant 138 in drain.js: end = end || abort replaced with end = null
Mutant 139 in drain.js: end = end || abort replaced with end = abort || end
Mutant 140 in drain.js: done replaced with false && done
Mutant 141 in drain.js: done replaced with done == null
Mutant 142 in drain.js: done replaced with !!done
Mutant 143 in drain.js: end === true ? null : end replaced with end === true ? null : end && null
Mutant 144 in drain.js: end === true ? null : end replaced with end === true ? null : end || null
Mutant 145 in drain.js: console.warn replaced with console.error
Mutant 146 in drain.js: console.warn replaced with console.log
Mutant 147 in drain.js: console.warn replaced with console.trace
Mutant 148 in drain.js: doneLackingErr replaced with console.warn("doneLackingErr")
Mutant 149 in drain.js: doneLackingErr replaced with done(true)
Mutant 150 in drain.js: doneLackingErr replaced with console.warn("abort")
Mutant 151 in drain.js: op && false === op(data) || abort replaced with op && false === op.call(this, data) || abort
Mutant 152 in drain.js: op && false === op(data) || abort replaced with op && false === op.apply(this, [data]) || abort
Mutant 153 in drain.js: op replaced with op + 1
Mutant 154 in drain.js: op replaced with op - 1
Mutant 155 in drain.js: op replaced with !op
Mutant 156 in drain.js: data replaced with data.value
Mutant 157 in drain.js: data replaced with data * 2
Mutant 158 in drain.js: data replaced with 'string'
Mutant 159 in drain.js: read(abort || true, done || function () {}) replaced with read(abort && true, done && function () {})
Mutant 160 in drain.js: read(abort || true, done || function () {}) replaced with read(abort === true, done === function () {})
Mutant 161 in drain.js: read replaced with read + 1
Mutant 162 in drain.js: read replaced with read - 1
Mutant 163 in drain.js: read replaced with read * 2
Mutant 164 in drain.js: abort || true replaced with abort && true
Mutant 165 in drain.js: abort || true replaced with !abort
Mutant 166 in drain.js: abort || true replaced with abort ? true : false
Mutant 167 in drain.js: done || function () {} replaced with read(abort || true, done)
Mutant 168 in drain.js: done || function () {} replaced with read(abort || true, function (err) {
  console.warn(err);
  throw err;
})
Mutant 169 in drain.js: !loop replaced with loop
Mutant 170 in drain.js: !loop replaced with !cbed
Mutant 171 in drain.js: !loop replaced with read
Mutant 172 in drain.js: !cbed replaced with cbed
Mutant 173 in drain.js: !cbed replaced with abort
Mutant 174 in drain.js: !cbed replaced with null
Mutant 175 in drain.js: 'function' == typeof err replaced with 'boolean' == typeof err
Mutant 176 in drain.js: 'function' == typeof err replaced with err === true
Mutant 177 in drain.js: 'function' == typeof err replaced with typeof err !== 'function'
Mutant 178 in drain.js: read(abort, cb || function () {}) replaced with read(abort())
Mutant 179 in drain.js: read(abort, cb || function () {}) replaced with read(op(true))
Mutant 180 in drain.js: read replaced with abort
Mutant 181 in drain.js: read replaced with true
Mutant 182 in drain.js: read replaced with !op
Mutant 183 in drain.js: abort replaced with null
Mutant 184 in drain.js: abort replaced with undefined
Mutant 185 in drain.js: abort replaced with "aborted"
Mutant 186 in drain.js: cb || function () {} replaced with null
Mutant 187 in drain.js: cb || function () {} replaced with undefined
Mutant 188 in drain.js: cb || function () {} replaced with function () {}
Mutant 189 in find.js: !cb replaced with cb !== null
Mutant 190 in find.js: !cb replaced with typeof cb !== 'function'
Mutant 191 in find.js: !cb replaced with cb && (typeof cb !== 'function' || cb.constructor !== Function)
Mutant 192 in find.js: prop replaced with !prop
Mutant 193 in find.js: prop replaced with null
Mutant 194 in find.js: prop replaced with prop.foo
Mutant 195 in find.js: test replaced with test(data) === true
Mutant 196 in find.js: test replaced with !test(data)
Mutant 197 in find.js: test replaced with test(data) !== test
Mutant 198 in find.js: test replaced with !test
Mutant 199 in find.js: data replaced with "data"
Mutant 200 in find.js: data replaced with data.prop
Mutant 201 in find.js: data replaced with data[prop]
Mutant 202 in find.js: cb(null, data) replaced with cb(undefined, data)
Mutant 203 in find.js: cb(null, data) replaced with cb(true, data)
Mutant 204 in find.js: cb(null, data) replaced with cb('', data)
Mutant 205 in find.js: null replaced with undefined
Mutant 206 in find.js: null replaced with {}
Mutant 207 in find.js: ended replaced with !ended
Mutant 208 in find.js: ended replaced with ended = true
Mutant 209 in find.js: ended replaced with ended = false
Mutant 210 in find.js: cb(err === true ? null : err, null) replaced with cb(err === false ? null : err, null)
Mutant 211 in find.js: cb(err === true ? null : err, null) replaced with cb(err !== null ? err : null)
Mutant 212 in find.js: cb(err === true ? null : err, null) replaced with cb(err == null ? null : err)
Mutant 213 in find.js: err === true ? null : err replaced with error === true ? null : error
Mutant 214 in find.js: err === true ? null : err replaced with err instanceof TypeError ? null : err
Mutant 215 in find.js: err === true ? null : err replaced with err.message.indexOf('Not found') !== -1 ? null : err
Mutant 216 in find.js: null replaced with undefined
Mutant 217 in find.js: null replaced with "error"
Mutant 218 in find.js: null replaced with 0
Mutant 219 in log.js: console.log replaced with console.error
Mutant 220 in log.js: data replaced with console.log(data + 1)
Mutant 221 in log.js: data replaced with console.log(data.toUpperCase())
Mutant 222 in log.js: data replaced with console.log(data.length)
Mutant 223 in on-end.js: drain(null, done) replaced with drain(undefined, done)
Mutant 224 in on-end.js: drain(null, done) replaced with drain("", done)
Mutant 225 in on-end.js: drain(null, done) replaced with drain(0, done)
Mutant 226 in on-end.js: drain replaced with null
Mutant 227 in on-end.js: drain replaced with undefined
Mutant 228 in on-end.js: drain replaced with unresolved
Mutant 229 in on-end.js: null replaced with undefined
Mutant 230 in on-end.js: null replaced with 0
Mutant 231 in on-end.js: null replaced with 'foo'
Mutant 232 in on-end.js: done replaced with done(null)
Mutant 233 in on-end.js: done replaced with done()
Mutant 234 in reduce.js: !cb replaced with !acc
Mutant 235 in reduce.js: !cb replaced with cb === null
Mutant 236 in reduce.js: !cb replaced with typeof acc === 'undefined'
Mutant 237 in reduce.js: reducer(acc, data) replaced with reducer(acc + data)
Mutant 238 in reduce.js: reducer(acc, data) replaced with reducer(acc * data)
Mutant 239 in reduce.js: reducer(acc, data) replaced with reducer(acc[data])
Mutant 240 in reduce.js: acc replaced with null
Mutant 241 in reduce.js: acc replaced with undefined
Mutant 242 in reduce.js: acc replaced with "foo"
Mutant 243 in reduce.js: data replaced with null
Mutant 244 in reduce.js: data replaced with undefined
Mutant 245 in reduce.js: data replaced with {}
Mutant 246 in reduce.js: cb(err, acc) replaced with cb(null, acc)
Mutant 247 in reduce.js: cb(err, acc) replaced with cb(err)
Mutant 248 in reduce.js: cb(err, acc) replaced with cb(err, null)
Mutant 249 in reduce.js: cb replaced with acc = null
Mutant 250 in reduce.js: err replaced with null
Mutant 251 in reduce.js: err replaced with undefined
Mutant 252 in reduce.js: err replaced with ''
Mutant 253 in reduce.js: acc replaced with null
Mutant 254 in reduce.js: acc replaced with undefined
Mutant 255 in reduce.js: acc replaced with 0
Mutant 256 in reduce.js: arguments.length === 2 replaced with arguments.length === 3
Mutant 257 in reduce.js: arguments.length === 2 replaced with arguments.length === 1
Mutant 258 in reduce.js: arguments.length === 2 replaced with typeof arguments[0] === 'number'
Mutant 259 in reduce.js: cb replaced with null
Mutant 260 in reduce.js: cb replaced with undefined
Mutant 261 in reduce.js: end === true ? null : end replaced with null
Mutant 262 in reduce.js: end === true ? null : end replaced with acc = data
Mutant 263 in reduce.js: end === true ? null : end replaced with accelerate(source)
Mutant 264 in reduce.js: sink replaced with acc += data
Mutant 265 in reduce.js: source replaced with sink(source)
Mutant 266 in reduce.js: source replaced with sink(acc)
Mutant 267 in reduce.js: source replaced with sink(null)
Mutant 268 in count.js: end replaced with end = null
Mutant 269 in count.js: end replaced with i > max - 1
Mutant 270 in count.js: end replaced with max = 0
Mutant 271 in count.js: end replaced with i
Mutant 272 in count.js: end replaced with max
Mutant 273 in count.js: end replaced with null
Mutant 274 in count.js: i > max replaced with i === max
Mutant 275 in count.js: i > max replaced with i >= max
Mutant 276 in count.js: i > max replaced with i + 1 > max
Mutant 277 in count.js: true replaced with {
  urgent: true
}
Mutant 278 in count.js: true replaced with false
Mutant 279 in count.js: true replaced with null
Mutant 280 in count.js: cb(null, i++) replaced with cb(null, i--)
Mutant 281 in count.js: null replaced with 0
Mutant 282 in count.js: null replaced with "undefined"
Mutant 283 in count.js: null replaced with NaN
Mutant 284 in count.js: i++ replaced with i = 0
Mutant 285 in count.js: i++ replaced with max = 0
Mutant 286 in count.js: i++ replaced with i += 2
Mutant 287 in empty.js: true replaced with false
Mutant 288 in empty.js: true replaced with null
Mutant 289 in empty.js: true replaced with undefined
Mutant 290 in error.js: err replaced with null
Mutant 291 in error.js: err replaced with undefined
Mutant 292 in error.js: err replaced with new Error()
Mutant 293 in infinite.js: end replaced with end + 1
Mutant 294 in infinite.js: end replaced with end * 2
Mutant 295 in infinite.js: end replaced with end / 2
Mutant 296 in infinite.js: cb replaced with cb = null
Mutant 297 in infinite.js: end replaced with end + 1
Mutant 298 in infinite.js: end replaced with end ? null : generate()
Mutant 299 in infinite.js: end replaced with end && generate()
Mutant 300 in infinite.js: cb(null, generate()) replaced with cb(generate(null, generate()))
Mutant 301 in infinite.js: cb(null, generate()) replaced with cb(generate(null, generate() + 1))
Mutant 302 in infinite.js: cb(null, generate()) replaced with cb(generate(null, generate))
Mutant 303 in infinite.js: cb replaced with null
Mutant 304 in infinite.js: cb replaced with undefined
Mutant 305 in infinite.js: cb replaced with NaN
Mutant 306 in infinite.js: null replaced with undefined
Mutant 307 in infinite.js: null replaced with NaN
Mutant 308 in infinite.js: null replaced with ""
Mutant 309 in infinite.js: generate() replaced with generate(Math.random())
Mutant 310 in infinite.js: generate() replaced with generate(10)
Mutant 311 in infinite.js: generate() replaced with generate(null)
Mutant 312 in keys.js: object replaced with object.prototype
Mutant 313 in keys.js: object replaced with {}
Mutant 314 in keys.js: object replaced with function () {}
Mutant 315 in once.js: abort replaced with abort !== true
Mutant 316 in once.js: abort replaced with abort == true
Mutant 317 in once.js: abort replaced with abort === false
Mutant 318 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb(abort))
Mutant 319 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(abortCb(onAbort))
Mutant 320 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb(null, abort))
Mutant 321 in once.js: abortCb replaced with _value + value
Mutant 322 in once.js: abortCb replaced with null
Mutant 323 in once.js: cb replaced with abort
Mutant 324 in once.js: cb replaced with underscore.constant(cb)
Mutant 325 in once.js: cb replaced with function () {
  cb();
}
Mutant 326 in once.js: abort replaced with !abort
Mutant 327 in once.js: abort replaced with abort === null
Mutant 328 in once.js: abort replaced with abort && abort.toString()
Mutant 329 in once.js: onAbort replaced with onAbort = function () {}
Mutant 330 in once.js: value != null replaced with value == null
Mutant 331 in once.js: value != null replaced with value != undefined
Mutant 332 in once.js: value != null replaced with value !== null
Mutant 333 in once.js: cb(null, _value) replaced with cb(false)
Mutant 334 in once.js: cb(null, _value) replaced with cb(undefined)
Mutant 335 in once.js: cb(null, _value) replaced with cb(0)
Mutant 336 in once.js: cb replaced with !cb
Mutant 337 in once.js: cb replaced with cb || false
Mutant 338 in once.js: cb replaced with null
Mutant 339 in once.js: null replaced with undefined
Mutant 340 in once.js: null replaced with 0
Mutant 341 in once.js: null replaced with NaN
Mutant 342 in once.js: _value replaced with _value + 1
Mutant 343 in once.js: _value replaced with _value * 2
Mutant 344 in once.js: _value replaced with _value.toUpperCase()
Mutant 345 in once.js: cb replaced with !cb
Mutant 346 in once.js: cb replaced with cb + 1
Mutant 347 in values.js: !array replaced with array.length === 0
Mutant 348 in values.js: !array replaced with array.length > 10
Mutant 349 in values.js: !array replaced with array.indexOf(null) === -1
Mutant 350 in values.js: abort replaced with abort === false
Mutant 351 in values.js: abort replaced with !abort
Mutant 352 in values.js: abort replaced with array.length === 0
Mutant 353 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(null, abort, onAbort)
Mutant 354 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, null, onAbort)
Mutant 355 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, abort, null)
Mutant 356 in values.js: cb replaced with abortCb(null, abort, onAbort)
Mutant 357 in values.js: cb replaced with abortCb(1, abort, onAbort)
Mutant 358 in values.js: cb replaced with abortCb(function () {}, abort, onAbort)
Mutant 359 in values.js: abort replaced with true
Mutant 360 in values.js: abort replaced with false
Mutant 361 in values.js: abort replaced with !abort
Mutant 362 in values.js: onAbort replaced with onAbort && onAbort()
Mutant 363 in values.js: onAbort replaced with onAbort + 1
Mutant 364 in values.js: onAbort replaced with typeof onAbort
Mutant 365 in values.js: cb replaced with null
Mutant 366 in values.js: cb replaced with undefined
Mutant 367 in values.js: true replaced with false
Mutant 368 in values.js: true replaced with array[i++] > array[j++]
Mutant 369 in values.js: true replaced with array[i - 1] > array[j - 1]
Mutant 370 in values.js: !Array.isArray(array) replaced with Array.isArray(array)
Mutant 371 in values.js: !Array.isArray(array) replaced with array.length === 0
Mutant 372 in values.js: !Array.isArray(array) replaced with typeof array === 'object'
Mutant 373 in values.js: array replaced with array.size()
Mutant 374 in values.js: array replaced with array.length + 1
Mutant 375 in values.js: array replaced with array.slice(1)
Mutant 376 in values.js: array replaced with array.slice()
Mutant 377 in values.js: array replaced with array.length
Mutant 378 in values.js: array replaced with array.concat(array)
Mutant 379 in values.js: abort replaced with i > array.length
Mutant 380 in values.js: abort replaced with array[i] !== undefined
Mutant 381 in values.js: abort replaced with i + 1 < array.length
Mutant 382 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(-cb, abort, onAbort + cb, null, onAbort)
Mutant 383 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(-cb, abort, onAbort + cb, () => {}, onAbort)
Mutant 384 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(-cb, abort, onAbort + cb, undefined, onAbort)
Mutant 385 in values.js: cb replaced with abortCb(cb, abort)
Mutant 386 in values.js: cb replaced with abortCb(abort, cb)
Mutant 387 in values.js: cb replaced with abortCb(null, abort, onAbort)
Mutant 388 in values.js: abort replaced with abort + 1
Mutant 389 in values.js: abort replaced with abort ? true : false
Mutant 390 in values.js: onAbort replaced with onAbort()
Mutant 391 in values.js: onAbort replaced with onAbort + 1
Mutant 392 in values.js: onAbort replaced with onAbort.bind(this)
Mutant 393 in values.js: i >= array.length replaced with i < array.length - 1
Mutant 394 in values.js: i >= array.length replaced with i == array.length - 1
Mutant 395 in values.js: i >= array.length replaced with i >= array.length - 1
Mutant 396 in values.js: cb replaced with i > array.length
Mutant 397 in values.js: cb replaced with array.length - i
Mutant 398 in values.js: true replaced with array.length
Mutant 399 in values.js: true replaced with array[i++]
Mutant 400 in values.js: true replaced with i >= array.length
Mutant 401 in values.js: cb(null, array[i++]) replaced with cb(array[i + 1])
Mutant 402 in values.js: cb(null, array[i++]) replaced with cb(null, array[i + 1])
Mutant 403 in values.js: cb replaced with null
Mutant 404 in values.js: cb replaced with array[i++]
Mutant 405 in values.js: null replaced with undefined
Mutant 406 in values.js: array[i++] replaced with array[i + 1]
Mutant 407 in values.js: array[i++] replaced with array[i + 2]
Mutant 408 in async-map.js: !map replaced with !map.length
Mutant 409 in async-map.js: !map replaced with map || id
Mutant 410 in async-map.js: prop replaced with !prop
Mutant 411 in async-map.js: prop replaced with 1 + prop
Mutant 412 in async-map.js: prop replaced with prop + 1
Mutant 413 in async-map.js: map replaced with map = prop.apply(null, [])
Mutant 414 in async-map.js: map replaced with map = prop.apply(null, [1, 2, 3])
Mutant 415 in async-map.js: map replaced with map = prop.apply(null, ['a', 'b', 'c'])
Mutant 416 in async-map.js: aborted replaced with aborted === null
Mutant 417 in async-map.js: aborted replaced with !aborted
Mutant 418 in async-map.js: aborted replaced with null
Mutant 419 in async-map.js: aborted replaced with undefined
Mutant 420 in async-map.js: aborted replaced with new Error("Test error")
Mutant 421 in async-map.js: abort replaced with undefined
Mutant 422 in async-map.js: abort replaced with null
Mutant 423 in async-map.js: abort replaced with false
Mutant 424 in async-map.js: !busy replaced with busy
Mutant 425 in async-map.js: !busy replaced with aborted
Mutant 426 in async-map.js: cb replaced with abort
Mutant 427 in async-map.js: cb replaced with null
Mutant 428 in async-map.js: abort replaced with null
Mutant 429 in async-map.js: abort replaced with ""
Mutant 430 in async-map.js: abort replaced with NaN
Mutant 431 in async-map.js: busy replaced with !busy
Mutant 432 in async-map.js: busy replaced with abort
Mutant 433 in async-map.js: busy replaced with abort !== null
Mutant 434 in async-map.js: abort replaced with id
Mutant 435 in async-map.js: abort replaced with 1
Mutant 436 in async-map.js: abort replaced with undefined
Mutant 437 in async-map.js: end replaced with !end
Mutant 438 in async-map.js: end replaced with end && data
Mutant 439 in async-map.js: end replaced with end || data
Mutant 440 in async-map.js: end replaced with null
Mutant 441 in async-map.js: end replaced with undefined
Mutant 442 in async-map.js: end replaced with new Error('intentional error')
Mutant 443 in async-map.js: cb replaced with null
Mutant 444 in async-map.js: cb replaced with undefined
Mutant 445 in async-map.js: cb replaced with 0
Mutant 446 in async-map.js: aborted replaced with null
Mutant 447 in async-map.js: aborted replaced with aborted + 1
Mutant 448 in async-map.js: aborted replaced with undefined
Mutant 449 in async-map.js: aborted replaced with true
Mutant 450 in async-map.js: aborted replaced with !aborted
Mutant 451 in async-map.js: aborted replaced with aborted || true
Mutant 452 in async-map.js: cb replaced with aborted
Mutant 453 in async-map.js: cb replaced with null
Mutant 454 in async-map.js: cb replaced with undefined
Mutant 455 in async-map.js: aborted replaced with null
Mutant 456 in async-map.js: aborted replaced with undefined
Mutant 457 in async-map.js: abortCb replaced with abortCb = 0
Mutant 458 in async-map.js: abortCb replaced with abortCb = 'abc'
Mutant 459 in async-map.js: aborted replaced with aborted()
Mutant 460 in async-map.js: aborted replaced with "aborted"
Mutant 461 in async-map.js: aborted replaced with null
Mutant 462 in async-map.js: next(err, cb) replaced with next(err)
Mutant 463 in async-map.js: next(err, cb) replaced with next(cb(err))
Mutant 464 in async-map.js: next(err, cb) replaced with next(cb(null, err))
Mutant 465 in async-map.js: next replaced with null
Mutant 466 in async-map.js: next replaced with undefined
Mutant 467 in async-map.js: err replaced with null
Mutant 468 in async-map.js: err replaced with {}
Mutant 469 in async-map.js: err replaced with true
Mutant 470 in async-map.js: cb replaced with cb(null, null)
Mutant 471 in async-map.js: cb replaced with cb(err, data)
Mutant 472 in async-map.js: cb(null, data) replaced with cb(undefined)
Mutant 473 in async-map.js: cb(null, data) replaced with cb(0)
Mutant 474 in async-map.js: cb(null, data) replaced with cb("")
Mutant 475 in async-map.js: cb replaced with null
Mutant 476 in async-map.js: cb replaced with undefined
Mutant 477 in async-map.js: cb replaced with "hello"
Mutant 478 in async-map.js: null replaced with undefined
Mutant 479 in async-map.js: null replaced with 0
Mutant 480 in async-map.js: null replaced with {}
Mutant 481 in async-map.js: data replaced with null
Mutant 482 in async-map.js: data replaced with undefined
Mutant 483 in async-map.js: data replaced with new Error('some error message')
Mutant 484 in filter-not.js: tester replaced with test
Mutant 485 in filter-not.js: tester replaced with test[0]
Mutant 486 in filter-not.js: test replaced with !test
Mutant 487 in filter-not.js: test replaced with test(data)
Mutant 488 in filter-not.js: test replaced with test()
Mutant 489 in filter-not.js: function (data) {
  return !test(data);
} replaced with data => !test(data)
Mutant 490 in filter-not.js: function (data) {
  return !test(data);
} replaced with data => !Object.prototype.hasOwnProperty.call(data, 'test')
Mutant 491 in filter-not.js: function (data) {
  return !test(data);
} replaced with data => test(data)
Mutant 492 in filter-not.js: test replaced with !!data
Mutant 493 in filter.js: tester replaced with tester.test
Mutant 494 in filter.js: test replaced with test + ""
Mutant 495 in filter.js: test replaced with !test
Mutant 496 in filter.js: test replaced with test(undefined)
Mutant 497 in filter.js: !end && !test(data) replaced with end
Mutant 498 in filter.js: !end && !test(data) replaced with !test(data) || end
Mutant 499 in filter.js: test replaced with !data
Mutant 500 in filter.js: test replaced with test.length
Mutant 501 in filter.js: test replaced with undefined
Mutant 502 in filter.js: data replaced with data.substr(0, 5)
Mutant 503 in filter.js: data replaced with data.toUpperCase()
Mutant 504 in filter.js: data replaced with data.replace(/[^a-zA-Z0-9]/g, '')
Mutant 505 in filter.js: next(end, cb) replaced with next(end, data)
Mutant 506 in filter.js: next(end, cb) replaced with next(end, read(end, data))
Mutant 507 in filter.js: next(end, cb) replaced with next(end, cb(end, data))
Mutant 508 in filter.js: end replaced with end = true
Mutant 509 in filter.js: end replaced with null
Mutant 510 in filter.js: end replaced with 2
Mutant 511 in filter.js: cb(end, data) replaced with cb(end, null)
Mutant 512 in filter.js: cb(end, data) replaced with cb(undefined, data)
Mutant 513 in filter.js: end replaced with end + 1
Mutant 514 in filter.js: end replaced with end * 2
Mutant 515 in filter.js: end replaced with end - 1
Mutant 516 in filter.js: data replaced with test(data)
Mutant 517 in filter.js: data replaced with data + 1
Mutant 518 in filter.js: data replaced with test(data + 1)
Mutant 519 in flatten.js: abort replaced with abort === true
Mutant 520 in flatten.js: abort replaced with abort !== true
Mutant 521 in flatten.js: abort replaced with abort.value() === true
Mutant 522 in flatten.js: read(err || abort, cb) replaced with read(null)
Mutant 523 in flatten.js: read(err || abort, cb) replaced with read(!abort)
Mutant 524 in flatten.js: read(err || abort, cb) replaced with read(err || false)
Mutant 525 in flatten.js: err || abort replaced with err != abort
Mutant 526 in flatten.js: err || abort replaced with err && abort
Mutant 527 in flatten.js: err || abort replaced with !err && !abort
Mutant 528 in flatten.js: cb replaced with cb(err)
Mutant 529 in flatten.js: cb replaced with cb(data)
Mutant 530 in flatten.js: cb replaced with cb(null, data)
Mutant 531 in flatten.js: read(abort, cb) replaced with read(null, null)
Mutant 532 in flatten.js: read(abort, cb) replaced with read(abort, () => {})
Mutant 533 in flatten.js: read(abort, cb) replaced with read(abort, (err, data) => {})
Mutant 534 in flatten.js: abort replaced with null
Mutant 535 in flatten.js: abort replaced with undefined
Mutant 536 in flatten.js: abort replaced with "stream"
Mutant 537 in flatten.js: cb replaced with abort
Mutant 538 in flatten.js: cb replaced with read(true, null)
Mutant 539 in flatten.js: _read replaced with !_read
Mutant 540 in flatten.js: _read replaced with _read = 1
Mutant 541 in flatten.js: _read replaced with _read + 1
Mutant 542 in flatten.js: err replaced with !err
Mutant 543 in flatten.js: err replaced with err === undefined
Mutant 544 in flatten.js: err replaced with Object.prototype.hasOwnProperty.call(err, 'err')
Mutant 545 in flatten.js: err === true replaced with err
Mutant 546 in flatten.js: err === true replaced with !err
Mutant 547 in flatten.js: err === true replaced with err && err.message
Mutant 548 in flatten.js: cb replaced with abort
Mutant 549 in flatten.js: cb replaced with NaN
Mutant 550 in flatten.js: cb replaced with null
Mutant 551 in flatten.js: err replaced with null
Mutant 552 in flatten.js: err replaced with undefined
Mutant 553 in flatten.js: err replaced with new Error('read error')
Mutant 554 in flatten.js: cb(null, data) replaced with cb(undefined, data)
Mutant 555 in flatten.js: cb(null, data) replaced with cb(data, null)
Mutant 556 in flatten.js: cb(null, data) replaced with cb(data, undefined)
Mutant 557 in flatten.js: null replaced with undefined
Mutant 558 in flatten.js: null replaced with true
Mutant 559 in flatten.js: null replaced with NaN
Mutant 560 in flatten.js: data replaced with null
Mutant 561 in flatten.js: data replaced with undefined
Mutant 562 in flatten.js: data replaced with NaN
Mutant 563 in flatten.js: cb replaced with null
Mutant 564 in flatten.js: cb replaced with undefined
Mutant 565 in flatten.js: values replaced with stream.objects
Mutant 566 in flatten.js: values replaced with _stream
Mutant 567 in flatten.js: stream replaced with null
Mutant 568 in flatten.js: stream replaced with undefined
Mutant 569 in flatten.js: stream replaced with 0
Mutant 570 in flatten.js: 'function' !== typeof stream replaced with 'object' !== typeof stream
Mutant 571 in flatten.js: 'function' !== typeof stream replaced with !stream
Mutant 572 in flatten.js: 'function' !== typeof stream replaced with typeof stream === 'undefined'
Mutant 573 in flatten.js: once replaced with []
Mutant 574 in flatten.js: stream replaced with null
Mutant 575 in flatten.js: stream replaced with undefined
Mutant 576 in flatten.js: stream replaced with function () {}
Mutant 577 in map.js: !mapper replaced with mapper !== mapper
Mutant 578 in map.js: !mapper replaced with mapper.caller
Mutant 579 in map.js: !mapper replaced with mapper.property
Mutant 580 in map.js: prop replaced with prop[1]
Mutant 581 in map.js: prop replaced with prop.foo
Mutant 582 in map.js: mapper replaced with !mapper
Mutant 583 in map.js: mapper replaced with mapper + 1
Mutant 584 in map.js: mapper replaced with mapper.call(null)
Mutant 585 in map.js: mapper replaced with !mapper
Mutant 586 in map.js: mapper replaced with mapper && mapper.isNotAProperty
Mutant 587 in map.js: mapper replaced with read
Mutant 588 in map.js: data replaced with mapper(data, null)
Mutant 589 in map.js: data replaced with mapper(abort)
Mutant 590 in map.js: data replaced with mapper(null)
Mutant 591 in map.js: cb replaced with `null`
Mutant 592 in map.js: cb replaced with `undefined`
Mutant 593 in map.js: cb replaced with `false`
Mutant 594 in map.js: err replaced with end && err
Mutant 595 in map.js: err replaced with end || err
Mutant 596 in map.js: cb(end, data) replaced with cb(data, end)
Mutant 597 in map.js: cb(end, data) replaced with cb(null, data)
Mutant 598 in map.js: cb(end, data) replaced with cb(end, null)
Mutant 599 in map.js: cb replaced with !cb
Mutant 600 in map.js: cb replaced with cb + null
Mutant 601 in map.js: cb replaced with cb * null
Mutant 602 in map.js: end replaced with !end
Mutant 603 in map.js: end replaced with 1
Mutant 604 in map.js: end replaced with mapper
Mutant 605 in map.js: data replaced with null
Mutant 606 in map.js: data replaced with undefined
Mutant 607 in map.js: data replaced with "foo"
Mutant 608 in non-unique.js: unique(field, true) replaced with unique(field, false)
Mutant 609 in non-unique.js: unique(field, true) replaced with unique(field, null)
Mutant 610 in non-unique.js: unique(field, true) replaced with unique(field + 1, true)
Mutant 611 in non-unique.js: field replaced with field + 1
Mutant 612 in non-unique.js: field replaced with field * 2
Mutant 613 in non-unique.js: field replaced with field.toUpperCase()
Mutant 614 in non-unique.js: true replaced with false
Mutant 615 in non-unique.js: true replaced with null
Mutant 616 in non-unique.js: true replaced with !field
Mutant 617 in take.js: 'number' === typeof test replaced with 'object' === typeof test
Mutant 618 in take.js: 'number' === typeof test replaced with 'array' === typeof test
Mutant 619 in take.js: 'number' === typeof test replaced with 'function' === typeof test
Mutant 620 in take.js: cb replaced with !last ? null : cb
Mutant 621 in take.js: err || true replaced with true
Mutant 622 in take.js: err || true replaced with !err
Mutant 623 in take.js: err || true replaced with false
Mutant 624 in take.js: ended && !end replaced with !ended && end
Mutant 625 in take.js: ended && !end replaced with ended || end
Mutant 626 in take.js: ended && !end replaced with ended ^ end
Mutant 627 in take.js: cb replaced with cb(null, null)
Mutant 628 in take.js: cb replaced with cb(null, {})
Mutant 629 in take.js: cb replaced with cb(new Error(), data)
Mutant 630 in take.js: cb replaced with !cb
Mutant 631 in take.js: ended replaced with !ended
Mutant 632 in take.js: ended replaced with ended === false
Mutant 633 in take.js: ended = end replaced with ended === end
Mutant 634 in take.js: ended = end replaced with ended ?? end
Mutant 635 in take.js: ended = end replaced with ended && end
Mutant 636 in take.js: read(ended, cb) replaced with read(read(null, cb))
Mutant 637 in take.js: read(ended, cb) replaced with read(read(Math.random(ended), cb))
Mutant 638 in take.js: read(ended, cb) replaced with read(read(cb, ended))
Mutant 639 in take.js: read replaced with ended--
Mutant 640 in take.js: read replaced with !ended
Mutant 641 in take.js: ended replaced with "ended"
Mutant 642 in take.js: ended replaced with false
Mutant 643 in take.js: cb replaced with last ? cb(null, data) : terminate(cb)
Mutant 644 in take.js: cb replaced with cb(null, ended ? data : null)
Mutant 645 in take.js: cb replaced with cb(ended ? data : null, ended)
Mutant 646 in take.js: ended = ended || end replaced with ended = end
Mutant 647 in take.js: ended = ended || end replaced with ended = !end
Mutant 648 in take.js: ended = ended || end replaced with ended = opts.end
Mutant 649 in take.js: cb replaced with !cb
Mutant 650 in take.js: ended replaced with ended && last
Mutant 651 in take.js: ended replaced with !ended
Mutant 652 in take.js: ended replaced with !last
Mutant 653 in take.js: !test(data) replaced with last !== test(data)
Mutant 654 in take.js: data replaced with !data
Mutant 655 in take.js: data replaced with data + 1
Mutant 656 in take.js: data replaced with data.split('')
Mutant 657 in take.js: cb replaced with null
Mutant 658 in take.js: cb replaced with undefined
Mutant 659 in take.js: cb replaced with "abc"
Mutant 660 in take.js: null replaced with undefined
Mutant 661 in take.js: null replaced with ''
Mutant 662 in take.js: data replaced with [null, data]
Mutant 663 in take.js: data replaced with data.length
Mutant 664 in take.js: data replaced with Number.NaN
Mutant 665 in take.js: cb replaced with cb(null, data)
Mutant 666 in take.js: cb replaced with cb(null, null)
Mutant 667 in take.js: cb replaced with cb(ended)
Mutant 668 in take.js: cb(null, data) replaced with cb(undefined, data)
Mutant 669 in take.js: null replaced with undefined
Mutant 670 in take.js: null replaced with false
Mutant 671 in take.js: null replaced with true
Mutant 672 in take.js: data replaced with null
Mutant 673 in take.js: data replaced with undefined
Mutant 674 in take.js: data replaced with test
Mutant 675 in through.js: a || !onEnd replaced with a && onEnd
Mutant 676 in through.js: a || !onEnd replaced with !a || onEnd
Mutant 677 in through.js: a || !onEnd replaced with a || onEnd(null)
Mutant 678 in through.js: abort === true ? null : abort replaced with abort == true ? null : abort
Mutant 679 in through.js: abort === true ? null : abort replaced with abort === false ? null : abort
Mutant 680 in through.js: abort === true ? null : abort replaced with !abort ? null : abort
Mutant 681 in through.js: end replaced with !end
Mutant 682 in through.js: end replaced with end === true
Mutant 683 in through.js: end replaced with !end
Mutant 684 in through.js: end replaced with end - 1
Mutant 685 in through.js: end replaced with end * 2
Mutant 686 in through.js: !end replaced with end
Mutant 687 in through.js: !end replaced with null
Mutant 688 in through.js: op replaced with op && op
Mutant 689 in through.js: op replaced with !op
Mutant 690 in through.js: op replaced with null
Mutant 691 in through.js: data replaced with null
Mutant 692 in through.js: data replaced with undefined
Mutant 693 in through.js: data replaced with {
  data: data
}
Mutant 694 in through.js: end replaced with end + 1
Mutant 695 in through.js: end replaced with end - 1
Mutant 696 in through.js: end replaced with 0
Mutant 697 in through.js: cb(end, data) replaced with cb(data, end)
Mutant 698 in through.js: cb(end, data) replaced with cb(!end, data)
Mutant 699 in through.js: cb(end, data) replaced with cb(end ? data : null)
Mutant 700 in through.js: end replaced with null
Mutant 701 in through.js: end replaced with undefined
Mutant 702 in through.js: end replaced with !end
Mutant 703 in through.js: data replaced with null
Mutant 704 in through.js: data replaced with undefined
Mutant 705 in through.js: data replaced with 0
Mutant 706 in unique.js: prop replaced with undefined
Mutant 707 in unique.js: prop replaced with 'prop'
Mutant 708 in unique.js: field replaced with field.call(this, data)
Mutant 709 in unique.js: field replaced with field.bind(this, data)
Mutant 710 in unique.js: field replaced with field.prototype
Mutant 711 in unique.js: field replaced with field + 1
Mutant 712 in unique.js: field replaced with field - 1
Mutant 713 in unique.js: data replaced with data + Math.random()
Mutant 714 in unique.js: data replaced with data.substring(0, data.length - 1)
Mutant 715 in unique.js: data replaced with null
Mutant 716 in unique.js: seen[key] replaced with seen[key] === undefined
Mutant 717 in unique.js: seen[key] replaced with seen.hasOwnProperty(key)
Mutant 718 in unique.js: seen[key] replaced with field.hasOwnProperty(key)
Mutant 719 in abort-cb.js: abort replaced with abort + 1
Mutant 720 in abort-cb.js: abort replaced with !abort
Mutant 721 in abort-cb.js: abort replaced with undefined
Mutant 722 in abort-cb.js: abort === true ? null : abort replaced with onAbort && onAbort(abort)
Mutant 723 in abort-cb.js: abort === true ? null : abort replaced with onAbort && onAbort(abort())
Mutant 724 in abort-cb.js: abort === true ? null : abort replaced with onAbort && onAbort(abort.signal)
Mutant 725 in prop.js: key.exec replaced with key.match
Mutant 726 in prop.js: key.exec replaced with key.test
Mutant 727 in prop.js: key.exec replaced with key.search
Mutant 728 in prop.js: data replaced with data[0]
Mutant 729 in prop.js: data replaced with data.someOtherKey
Mutant 730 in prop.js: data replaced with data.key
Mutant 731 in tester.js: test.test replaced with !test.test
Mutant 732 in tester.js: test.test replaced with test.test === true
Mutant 733 in tester.js: data replaced with test.test(data.invalid)
Mutant 734 in tester.js: data replaced with test.test(data.length + 1)
Mutant 735 in tester.js: data replaced with test.test(data.replace('foo', 'bar'))
Mutant 736 in tester.js: prop replaced with prop.test
Mutant 737 in tester.js: prop replaced with id
Mutant 738 in tester.js: test replaced with test.test(data)
Mutant 739 in tester.js: test replaced with data != null
Mutant 740 in tester.js: test replaced with test.test(data) === true
[32m23:14:22 (2750) INFO Instrumenter[39m Instrumented 31 source file(s) with 741 mutant(s)
[32m23:14:22 (2750) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m23:14:24 (2750) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m23:14:24 (2750) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m23:14:25 (2750) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 1 second (net 1792 ms, overhead 1 ms).
Mutation testing 2% (elapsed: <1m, remaining: ~7m) 17/741 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~9m) 24/741 tested (3 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~13m) 26/741 tested (3 survived, 1 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~16m) 29/741 tested (4 survived, 2 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~16m) 35/741 tested (9 survived, 2 timed out)
Mutation testing 5% (elapsed: ~1m, remaining: ~17m) 41/741 tested (15 survived, 2 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~17m) 47/741 tested (16 survived, 2 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~16m) 55/741 tested (17 survived, 2 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~16m) 63/741 tested (17 survived, 2 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~15m) 70/741 tested (20 survived, 2 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~16m) 75/741 tested (25 survived, 2 timed out)
Mutation testing 10% (elapsed: ~2m, remaining: ~16m) 81/741 tested (31 survived, 2 timed out)
Mutation testing 11% (elapsed: ~2m, remaining: ~16m) 87/741 tested (37 survived, 2 timed out)
Mutation testing 12% (elapsed: ~2m, remaining: ~16m) 92/741 tested (42 survived, 2 timed out)
Mutation testing 13% (elapsed: ~2m, remaining: ~16m) 99/741 tested (47 survived, 2 timed out)
Mutation testing 13% (elapsed: ~2m, remaining: ~16m) 103/741 tested (48 survived, 3 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~16m) 109/741 tested (48 survived, 4 timed out)
Mutation testing 15% (elapsed: ~3m, remaining: ~15m) 118/741 tested (52 survived, 4 timed out)
Mutation testing 16% (elapsed: ~3m, remaining: ~15m) 124/741 tested (57 survived, 4 timed out)
Mutation testing 17% (elapsed: ~3m, remaining: ~15m) 133/741 tested (60 survived, 4 timed out)
Mutation testing 18% (elapsed: ~3m, remaining: ~15m) 137/741 tested (60 survived, 5 timed out)
Mutation testing 18% (elapsed: ~3m, remaining: ~16m) 138/741 tested (60 survived, 6 timed out)
Mutation testing 19% (elapsed: ~3m, remaining: ~16m) 143/741 tested (62 survived, 7 timed out)
Mutation testing 20% (elapsed: ~4m, remaining: ~15m) 149/741 tested (67 survived, 7 timed out)
Mutation testing 21% (elapsed: ~4m, remaining: ~15m) 159/741 tested (71 survived, 7 timed out)
Mutation testing 22% (elapsed: ~4m, remaining: ~15m) 166/741 tested (73 survived, 7 timed out)
Mutation testing 23% (elapsed: ~4m, remaining: ~14m) 173/741 tested (74 survived, 7 timed out)
Mutation testing 23% (elapsed: ~4m, remaining: ~15m) 174/741 tested (74 survived, 8 timed out)
Mutation testing 24% (elapsed: ~4m, remaining: ~14m) 182/741 tested (76 survived, 9 timed out)
Mutation testing 25% (elapsed: ~5m, remaining: ~14m) 189/741 tested (79 survived, 9 timed out)
Mutation testing 26% (elapsed: ~5m, remaining: ~14m) 196/741 tested (81 survived, 9 timed out)
Mutation testing 27% (elapsed: ~5m, remaining: ~14m) 203/741 tested (82 survived, 9 timed out)
Mutation testing 28% (elapsed: ~5m, remaining: ~13m) 210/741 tested (84 survived, 9 timed out)
Mutation testing 29% (elapsed: ~5m, remaining: ~13m) 216/741 tested (86 survived, 9 timed out)
Mutation testing 29% (elapsed: ~5m, remaining: ~13m) 222/741 tested (89 survived, 9 timed out)
Mutation testing 30% (elapsed: ~6m, remaining: ~13m) 229/741 tested (93 survived, 9 timed out)
Mutation testing 31% (elapsed: ~6m, remaining: ~13m) 235/741 tested (96 survived, 9 timed out)
Mutation testing 33% (elapsed: ~6m, remaining: ~12m) 248/741 tested (96 survived, 9 timed out)
Mutation testing 34% (elapsed: ~6m, remaining: ~12m) 259/741 tested (98 survived, 9 timed out)
Mutation testing 35% (elapsed: ~6m, remaining: ~11m) 265/741 tested (103 survived, 9 timed out)
Mutation testing 36% (elapsed: ~6m, remaining: ~11m) 272/741 tested (105 survived, 9 timed out)
Mutation testing 37% (elapsed: ~7m, remaining: ~11m) 279/741 tested (110 survived, 9 timed out)
Mutation testing 38% (elapsed: ~7m, remaining: ~11m) 287/741 tested (113 survived, 9 timed out)
Mutation testing 38% (elapsed: ~7m, remaining: ~11m) 288/741 tested (113 survived, 10 timed out)
Mutation testing 39% (elapsed: ~7m, remaining: ~11m) 289/741 tested (113 survived, 11 timed out)
Mutation testing 39% (elapsed: ~7m, remaining: ~11m) 293/741 tested (113 survived, 12 timed out)
Mutation testing 40% (elapsed: ~7m, remaining: ~11m) 297/741 tested (115 survived, 13 timed out)
Mutation testing 40% (elapsed: ~8m, remaining: ~11m) 300/741 tested (117 survived, 14 timed out)
Mutation testing 41% (elapsed: ~8m, remaining: ~11m) 308/741 tested (119 survived, 14 timed out)
Mutation testing 42% (elapsed: ~8m, remaining: ~11m) 314/741 tested (123 survived, 14 timed out)
Mutation testing 42% (elapsed: ~8m, remaining: ~11m) 317/741 tested (124 survived, 15 timed out)
Mutation testing 43% (elapsed: ~8m, remaining: ~11m) 322/741 tested (129 survived, 15 timed out)
Mutation testing 44% (elapsed: ~8m, remaining: ~11m) 328/741 tested (135 survived, 15 timed out)
Mutation testing 44% (elapsed: ~9m, remaining: ~11m) 333/741 tested (139 survived, 15 timed out)
Mutation testing 45% (elapsed: ~9m, remaining: ~10m) 340/741 tested (141 survived, 15 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~10m) 346/741 tested (143 survived, 15 timed out)
Mutation testing 47% (elapsed: ~9m, remaining: ~10m) 353/741 tested (147 survived, 15 timed out)
Mutation testing 48% (elapsed: ~9m, remaining: ~10m) 358/741 tested (152 survived, 15 timed out)
Mutation testing 49% (elapsed: ~9m, remaining: ~10m) 364/741 tested (158 survived, 15 timed out)
Mutation testing 49% (elapsed: ~10m, remaining: ~10m) 369/741 tested (163 survived, 15 timed out)
Mutation testing 50% (elapsed: ~10m, remaining: ~10m) 371/741 tested (164 survived, 16 timed out)
Mutation testing 50% (elapsed: ~10m, remaining: ~10m) 375/741 tested (166 survived, 17 timed out)
Mutation testing 51% (elapsed: ~10m, remaining: ~9m) 380/741 tested (166 survived, 17 timed out)
Mutation testing 51% (elapsed: ~10m, remaining: ~10m) 381/741 tested (166 survived, 18 timed out)
Mutation testing 52% (elapsed: ~10m, remaining: ~9m) 391/741 tested (166 survived, 19 timed out)
Mutation testing 53% (elapsed: ~11m, remaining: ~9m) 399/741 tested (166 survived, 19 timed out)
Mutation testing 54% (elapsed: ~11m, remaining: ~9m) 402/741 tested (167 survived, 20 timed out)
Mutation testing 54% (elapsed: ~11m, remaining: ~9m) 406/741 tested (168 survived, 21 timed out)
Mutation testing 54% (elapsed: ~11m, remaining: ~9m) 407/741 tested (168 survived, 22 timed out)
Mutation testing 56% (elapsed: ~11m, remaining: ~9m) 416/741 tested (169 survived, 23 timed out)
Mutation testing 56% (elapsed: ~11m, remaining: ~9m) 418/741 tested (170 survived, 24 timed out)
Mutation testing 58% (elapsed: ~12m, remaining: ~8m) 431/741 tested (173 survived, 24 timed out)
Mutation testing 58% (elapsed: ~12m, remaining: ~8m) 437/741 tested (175 survived, 24 timed out)
Mutation testing 59% (elapsed: ~12m, remaining: ~8m) 438/741 tested (175 survived, 25 timed out)
Mutation testing 59% (elapsed: ~12m, remaining: ~8m) 441/741 tested (175 survived, 27 timed out)
Mutation testing 60% (elapsed: ~12m, remaining: ~8m) 445/741 tested (176 survived, 28 timed out)
Mutation testing 62% (elapsed: ~12m, remaining: ~7m) 460/741 tested (177 survived, 28 timed out)
Mutation testing 63% (elapsed: ~13m, remaining: ~7m) 473/741 tested (178 survived, 28 timed out)
Mutation testing 65% (elapsed: ~13m, remaining: ~7m) 483/741 tested (180 survived, 28 timed out)
Mutation testing 65% (elapsed: ~13m, remaining: ~6m) 486/741 tested (180 survived, 28 timed out)
Mutation testing 66% (elapsed: ~13m, remaining: ~6m) 493/741 tested (181 survived, 29 timed out)
Mutation testing 66% (elapsed: ~13m, remaining: ~6m) 496/741 tested (181 survived, 30 timed out)
Mutation testing 67% (elapsed: ~13m, remaining: ~6m) 498/741 tested (181 survived, 31 timed out)
Mutation testing 67% (elapsed: ~14m, remaining: ~6m) 502/741 tested (181 survived, 32 timed out)
Mutation testing 68% (elapsed: ~14m, remaining: ~6m) 508/741 tested (184 survived, 32 timed out)
Mutation testing 69% (elapsed: ~14m, remaining: ~6m) 512/741 tested (187 survived, 32 timed out)
Mutation testing 69% (elapsed: ~14m, remaining: ~6m) 516/741 tested (188 survived, 33 timed out)
Mutation testing 70% (elapsed: ~14m, remaining: ~6m) 524/741 tested (189 survived, 33 timed out)
Mutation testing 71% (elapsed: ~14m, remaining: ~5m) 530/741 tested (190 survived, 33 timed out)
Mutation testing 72% (elapsed: ~15m, remaining: ~5m) 537/741 tested (190 survived, 33 timed out)
Mutation testing 73% (elapsed: ~15m, remaining: ~5m) 542/741 tested (191 survived, 33 timed out)
Mutation testing 73% (elapsed: ~15m, remaining: ~5m) 543/741 tested (191 survived, 34 timed out)
Mutation testing 74% (elapsed: ~15m, remaining: ~5m) 549/741 tested (191 survived, 35 timed out)
Mutation testing 74% (elapsed: ~15m, remaining: ~5m) 552/741 tested (191 survived, 36 timed out)
Mutation testing 74% (elapsed: ~15m, remaining: ~5m) 554/741 tested (191 survived, 37 timed out)
Mutation testing 75% (elapsed: ~16m, remaining: ~5m) 560/741 tested (194 survived, 37 timed out)
Mutation testing 76% (elapsed: ~16m, remaining: ~4m) 567/741 tested (194 survived, 37 timed out)
Mutation testing 77% (elapsed: ~16m, remaining: ~4m) 573/741 tested (194 survived, 37 timed out)
Mutation testing 78% (elapsed: ~16m, remaining: ~4m) 579/741 tested (196 survived, 37 timed out)
Mutation testing 79% (elapsed: ~16m, remaining: ~4m) 592/741 tested (197 survived, 37 timed out)
Mutation testing 80% (elapsed: ~16m, remaining: ~4m) 597/741 tested (198 survived, 37 timed out)
Mutation testing 82% (elapsed: ~17m, remaining: ~3m) 608/741 tested (198 survived, 38 timed out)
Mutation testing 82% (elapsed: ~17m, remaining: ~3m) 614/741 tested (201 survived, 38 timed out)
Mutation testing 84% (elapsed: ~17m, remaining: ~3m) 625/741 tested (203 survived, 38 timed out)
Mutation testing 85% (elapsed: ~17m, remaining: ~2m) 637/741 tested (206 survived, 38 timed out)
Mutation testing 87% (elapsed: ~17m, remaining: ~2m) 651/741 tested (208 survived, 38 timed out)
Mutation testing 89% (elapsed: ~17m, remaining: ~2m) 661/741 tested (211 survived, 38 timed out)
Mutation testing 90% (elapsed: ~18m, remaining: ~1m) 668/741 tested (212 survived, 38 timed out)
Mutation testing 91% (elapsed: ~18m, remaining: ~1m) 678/741 tested (215 survived, 38 timed out)
Mutation testing 92% (elapsed: ~18m, remaining: ~1m) 684/741 tested (221 survived, 38 timed out)
Mutation testing 93% (elapsed: ~18m, remaining: ~1m) 691/741 tested (224 survived, 38 timed out)
Mutation testing 93% (elapsed: ~18m, remaining: ~1m) 696/741 tested (229 survived, 38 timed out)
Mutation testing 94% (elapsed: ~18m, remaining: ~1m) 701/741 tested (230 survived, 39 timed out)
Mutation testing 95% (elapsed: ~19m, remaining: <1m) 706/741 tested (230 survived, 40 timed out)
Mutation testing 95% (elapsed: ~19m, remaining: <1m) 711/741 tested (230 survived, 40 timed out)
Mutation testing 96% (elapsed: ~19m, remaining: <1m) 717/741 tested (230 survived, 40 timed out)
Mutation testing 97% (elapsed: ~19m, remaining: <1m) 724/741 tested (231 survived, 40 timed out)
Mutation testing 98% (elapsed: ~19m, remaining: <1m) 730/741 tested (236 survived, 40 timed out)
Mutation testing 98% (elapsed: ~19m, remaining: <1m) 733/741 tested (237 survived, 40 timed out)
Mutation testing 99% (elapsed: ~20m, remaining: <1m) 735/741 tested (237 survived, 42 timed out)
Mutation testing 99% (elapsed: ~20m, remaining: <1m) 737/741 tested (237 survived, 43 timed out)

All tests
  ✓ All tests (killed 460)

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (done == null) {

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (typeof done !== "function") {

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (done !== true) {

[Survived] PrecomputedMutator
sinks/drain.js:24:16
-               if(end = end || abort) {
+               if(end = abort || end) {

[Survived] PrecomputedMutator
sinks/drain.js:26:18
-                 if(done) done(end === true ? null : end)
+                 if(!!done) done(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/drain.js:26:29
-                 if(done) done(end === true ? null : end)
+                 if(done) done(end === true ? null : end || null)

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.error(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.log(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.trace(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(console.warn("doneLackingErr"))

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(done(true))

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(console.warn("abort"))

[Survived] PrecomputedMutator
sinks/drain.js:32:21
-               else if(op && false === op(data) || abort) {
+               else if(op && false === op.call(this, data) || abort) {

[Survived] PrecomputedMutator
sinks/drain.js:32:21
-               else if(op && false === op(data) || abort) {
+               else if(op && false === op.apply(this, [data]) || abort) {

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(abort && true, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(!abort, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(abort ? true : false, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:49:8
-       if('function' == typeof err)
+       if('boolean' == typeof err)

[Survived] PrecomputedMutator
sinks/drain.js:49:8
-       if('function' == typeof err)
+       if(err === true)

[Survived] PrecomputedMutator
sinks/drain.js:52:26
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(null, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:26
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(undefined, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:33
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(abort, function () {})

[Survived] PrecomputedMutator
sinks/find.js:9:6
-     if(!cb)
+     if(typeof cb !== 'function')

[Survived] PrecomputedMutator
sinks/find.js:9:6
-     if(!cb)
+     if(cb && (typeof cb !== 'function' || cb.constructor !== Function))

[Survived] PrecomputedMutator
sinks/find.js:17:7
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:17:7
-         cb(null, data)
+         cb('', data)

[Survived] PrecomputedMutator
sinks/find.js:17:10
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:22:5
-       cb(err === true ? null : err, null)
+       cb(err === false ? null : err, null)

[Survived] PrecomputedMutator
sinks/find.js:22:8
-       cb(err === true ? null : err, null)
+       cb(err instanceof TypeError ? null : err, null)

[Survived] PrecomputedMutator
sinks/log.js:7:5
-       console.log(data)
+       console.error(data)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(console.log(data + 1))

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(console.log(data.toUpperCase()))

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(console.log(data.length))

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain("", done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain(0, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(0, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain('foo', done)

[Survived] PrecomputedMutator
sinks/reduce.js:12:7
-     if (arguments.length === 2)
+     if (arguments.length === 1)

[Survived] PrecomputedMutator
sinks/reduce.js:12:7
-     if (arguments.length === 2)
+     if (typeof arguments[0] === 'number')

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return null(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return undefined(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(null)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(acc = data)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(accelerate(source))

[Survived] PrecomputedMutator
sources/count.js:6:8
-       if(end) return cb && cb(end)
+       if(end = null) return cb && cb(end)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(i)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(max)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(null)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i === max)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i >= max)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i + 1 > max)

[Survived] PrecomputedMutator
sources/count.js:9:8
-       cb(null, i++)
+       cb(0, i++)

[Survived] PrecomputedMutator
sources/count.js:9:8
-       cb(null, i++)
+       cb(NaN, i++)

[Survived] PrecomputedMutator
sources/count.js:9:14
-       cb(null, i++)
+       cb(null, i += 2)

[Survived] PrecomputedMutator
sources/infinite.js:5:8
-       if(end) return cb && cb(end)
+       if(end * 2) return cb && cb(end)

[Survived] PrecomputedMutator
sources/infinite.js:5:8
-       if(end) return cb && cb(end)
+       if(end / 2) return cb && cb(end)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end + 1)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end && generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:15
-       return cb(null, generate())
+       return cb(undefined, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:15
-       return cb(null, generate())
+       return cb(NaN, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:15
-       return cb(null, generate())
+       return cb("", generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(Math.random()))

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(10))

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(null))

[Survived] PrecomputedMutator
sources/once.js:6:8
-       if(abort)
+       if(abort == true)

[Survived] PrecomputedMutator
sources/once.js:6:8
-       if(abort)
+       if(abort === false)

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb(abort))

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(abortCb(onAbort))

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb(null, abort))

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return _value + value(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return null(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(abort, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(underscore.constant(cb), abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(function () {
+     cb();
+   }, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, !abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort === null, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort && abort.toString(), onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort = function () {})

[Survived] PrecomputedMutator
sources/once.js:8:8
-       if(value != null) {
+       if(value != undefined) {

[Survived] PrecomputedMutator
sources/once.js:8:8
-       if(value != null) {
+       if(value !== null) {

[Survived] PrecomputedMutator
sources/once.js:10:7
-         cb(null, _value)
+         cb || false(null, _value)

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb(undefined, _value)

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb(0, _value)

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb(NaN, _value)

[Survived] PrecomputedMutator
sources/values.js:5:6
-     if(!array)
+     if(array.length === 0)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort === false) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(!abort) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(array.length === 0) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(null, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, null, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, null)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(abortCb(null, abort, onAbort), abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(abortCb(1, abort, onAbort), abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(abortCb(function () {}, abort, onAbort), abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, true, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, false, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, !abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort && onAbort())

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort + 1)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, typeof onAbort)

[Survived] PrecomputedMutator
sources/values.js:8:14
-         return cb(true)
+         return null(true)

[Survived] PrecomputedMutator
sources/values.js:8:14
-         return cb(true)
+         return undefined(true)

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(false)

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(array[i++] > array[j++])

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(array[i - 1] > array[j - 1])

[Survived] PrecomputedMutator
sources/values.js:10:6
-     if(!Array.isArray(array))
+     if(typeof array === 'object')

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(array.length + 1))

[Survived] PrecomputedMutator
sources/values.js:19:10
-         cb(true)
+         cb(i >= array.length)

[Survived] PrecomputedMutator
sources/values.js:21:10
-         cb(null, array[i++])
+         cb(undefined, array[i++])

[Survived] PrecomputedMutator
throughs/async-map.js:7:6
-     if(!map) return id
+     if(!map.length) return id

[Survived] PrecomputedMutator
throughs/async-map.js:12:10
-         if(aborted) return cb(aborted)
+         if(aborted === null) return cb(aborted)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(null)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(undefined)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(new Error("Test error"))

[Survived] PrecomputedMutator
throughs/async-map.js:23:19
-             else cb(abort)
+             else cb(id)

[Survived] PrecomputedMutator
throughs/async-map.js:23:19
-             else cb(abort)
+             else cb(1)

[Survived] PrecomputedMutator
throughs/async-map.js:28:22
-             if(end) cb(end)
+             if(end) cb(new Error('intentional error'))

[Survived] PrecomputedMutator
throughs/async-map.js:29:31
-             else if(aborted) cb(aborted)
+             else if(aborted) cb(aborted + 1)

[Survived] PrecomputedMutator
throughs/async-map.js:36:36
-                   abortCb && abortCb(aborted)
+                   abortCb && abortCb("aborted")

[Survived] PrecomputedMutator
throughs/async-map.js:39:23
-                 else cb(null, data)
+                 else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/async-map.js:39:23
-                 else cb(null, data)
+                 else cb(0, data)

[Survived] PrecomputedMutator
throughs/filter-not.js:8:17
-     return filter(function (data) { return !test(data) })
+     return filter(data => !test(data))

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, data)

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, read(end, data))

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, cb(end, data))

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end = true, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(null, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(2, cb)

[Survived] PrecomputedMutator
throughs/filter.js:17:14
-             cb(end, data)
+             cb(end * 2, data)

[Survived] PrecomputedMutator
throughs/flatten.js:11:11
-         if (abort) { //abort the current stream, and then stream of streams.
+         if (abort === true) { //abort the current stream, and then stream of streams.

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(err && abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:16:15
-         else if(_read) nextChunk()
+         else if(_read + 1) nextChunk()

[Survived] PrecomputedMutator
throughs/flatten.js:28:16
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/flatten.js:28:19
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/flatten.js:28:19
-             else cb(null, data)
+             else cb(NaN, data)

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(mapper !== mapper) return id

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(mapper.caller) return id

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(mapper.property) return id

[Survived] PrecomputedMutator
throughs/map.js:16:23
-               return cb(err)
+               return cb(end || err)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:10
-     return unique(field, true)
+     return unique(field + 1, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(field + 1, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(field * 2, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:24
-     return unique(field, true)
+     return unique(field, !field)

[Survived] PrecomputedMutator
throughs/take.js:19:26
-           last = false; cb(err || true)
+           last = false; cb(true)

[Survived] PrecomputedMutator
throughs/take.js:24:48
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : !cb(ended)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(!ended)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(ended === false)

[Survived] PrecomputedMutator
throughs/take.js:28:14
-             if(ended = ended || end) {
+             if(ended = end) {

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(ended && last)

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(!ended)

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(!last)

[Survived] PrecomputedMutator
throughs/take.js:34:23
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(undefined, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:34:23
-               last ? cb(null, data) : terminate(cb)
+               last ? cb('', data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:37:13
-               cb(null, data)
+               cb(undefined, data)

[Survived] PrecomputedMutator
throughs/take.js:37:16
-               cb(null, data)
+               cb(undefined, data)

[Survived] PrecomputedMutator
throughs/take.js:37:16
-               cb(null, data)
+               cb(false, data)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort == true ? null : abort)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort === false ? null : abort)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(!abort ? null : abort)

[Survived] PrecomputedMutator
throughs/through.js:15:10
-         if(end) once(end)
+         if(!end) once(end)

[Survived] PrecomputedMutator
throughs/through.js:15:10
-         if(end) once(end)
+         if(end === true) once(end)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(!end)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(end - 1)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(end * 2)

[Survived] PrecomputedMutator
throughs/through.js:17:24
-           if(!end) op && op(data)
+           if(!end) op && op && op(data)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(null)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(undefined)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op({
+     data: data
+   })

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(end + 1)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(end - 1)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(0)

[Survived] PrecomputedMutator
throughs/unique.js:13:8
-       if(seen[key]) return !!invert //false, by default
+       if(seen.hasOwnProperty(key)) return !!invert //false, by default

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.match(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.test(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.search(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data[0]); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data.someOtherKey); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data.key); return v && v[0] }

[Survived] PrecomputedMutator
util/tester.js:9:7
-       : prop (test) || id
+       : id (test) || id

[Survived] PrecomputedMutator
pull.js:5:7
-     if (typeof a === 'function' && a.length === 1) {
+     if (a instanceof Function && a.length === 1) {

[Survived] PrecomputedMutator
pull.js:7:20
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i <= length; i++)

[Survived] PrecomputedMutator
pull.js:7:20
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i != length; i++)

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (args[0] == null) {

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (read.length == 0) {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (length * 2) {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (0) {

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read + ref[0])

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read * ref[0])

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read || ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read + 1, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read * 2, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read - 1, ref[0])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[1])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[length - 1])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[Math.floor(Math.random() * length)])

[Survived] PrecomputedMutator
pull.js:23:22
-         case 3: return pull(read, ref[0], ref[1], ref[2])
+         case 3: return pull(read, ref[0], ref[2], ref[1])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[4])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], s[3])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[0])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read + 1, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read - 1, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read * 2, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[1], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref.length, ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, null, ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[2], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref.length, ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[3], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[1], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[0], ref[3])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[4])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[1])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3] + 1)

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.push(read)

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.pop(read)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(ref, null)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(null, ref, null)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(ref, null, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(true, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(0, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply([], ref)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, [])

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, null)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, "string")

[Survived] PrecomputedMutator
pull.js:34:7
-     if (read && typeof read.source === 'function') {
+     if (read && read.source) {

[Survived] PrecomputedMutator
pull.js:34:7
-     if (read && typeof read.source === 'function') {
+     if (read && typeof read.source === 'function' && read.source.length > 1) {

[Survived] PrecomputedMutator
pull.js:38:19
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i <= length; i++) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s || typeof s === 'object') {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s && typeof s === 'function') {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s !== 'object') {

[Survived] PrecomputedMutator
pull.js:43:7
-         s.sink(read)
+         read = s.sink(read)

[Survived] PrecomputedMutator
pull.js:43:7
-         s.sink(read)
+         read = s - 1(read)

[Survived] PrecomputedMutator
pull.js:43:7
-         s.sink(read)
+         read = null(read)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(read + 1)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(read - 1)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(read + 2)

Ran 0.94 tests per mutant on average.
----------------|---------|----------|-----------|------------|----------|----------|
File            | % score | # killed | # timeout | # survived | # no cov | # errors |
----------------|---------|----------|-----------|------------|----------|----------|
All files       |   67.88 |      460 |        43 |        238 |        0 |        0 |
 sinks          |   68.28 |       94 |         5 |         46 |        0 |        0 |
  collect.js    |  100.00 |        5 |         0 |          0 |        0 |        0 |
  drain.js      |   63.93 |       34 |         5 |         22 |        0 |        0 |
  find.js       |   76.67 |       23 |         0 |          7 |        0 |        0 |
  log.js        |    0.00 |        0 |         0 |          4 |        0 |        0 |
  on-end.js     |   45.45 |        5 |         0 |          6 |        0 |        0 |
  reduce.js     |   79.41 |       27 |         0 |          7 |        0 |        0 |
 sources        |   53.57 |       61 |        14 |         65 |        0 |        0 |
  count.js      |   47.37 |        9 |         0 |         10 |        0 |        0 |
  empty.js      |  100.00 |        0 |         3 |          0 |        0 |        0 |
  error.js      |  100.00 |        3 |         0 |          0 |        0 |        0 |
  infinite.js   |   47.37 |        7 |         2 |         10 |        0 |        0 |
  keys.js       |  100.00 |        3 |         0 |          0 |        0 |        0 |
  once.js       |   37.50 |       11 |         1 |         20 |        0 |        0 |
  values.js     |   59.02 |       28 |         8 |         25 |        0 |        0 |
 throughs       |   79.74 |      231 |        17 |         63 |        0 |        0 |
  async-map.js  |   84.21 |       59 |         5 |         12 |        0 |        0 |
  filter-not.js |   88.89 |        7 |         1 |          1 |        0 |        0 |
  filter.js     |   73.08 |       15 |         4 |          7 |        0 |        0 |
  flatten.js    |   89.66 |       48 |         4 |          6 |        0 |        0 |
  map.js        |   87.10 |       26 |         1 |          4 |        0 |        0 |
  non-unique.js |   55.56 |        5 |         0 |          4 |        0 |        0 |
  take.js       |   77.59 |       45 |         0 |         13 |        0 |        0 |
  through.js    |   51.61 |       14 |         2 |         15 |        0 |        0 |
  unique.js     |   92.31 |       12 |         0 |          1 |        0 |        0 |
 util           |   68.18 |       12 |         3 |          7 |        0 |        0 |
  abort-cb.js   |  100.00 |        6 |         0 |          0 |        0 |        0 |
  prop.js       |    0.00 |        0 |         0 |          6 |        0 |        0 |
  tester.js     |   90.00 |        6 |         3 |          1 |        0 |        0 |
 index.js       |  100.00 |       15 |         0 |          0 |        0 |        0 |
 pull.js        |   47.22 |       47 |         4 |         57 |        0 |        0 |
----------------|---------|----------|-----------|------------|----------|----------|
[32m23:34:40 (2750) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/reports/mutation/mutation.html
[32m23:34:40 (2750) INFO MutationTestExecutor[39m Done in 20 minutes 20 seconds.

real	20m22.060s
user	8m1.642s
sys	1m37.620s
