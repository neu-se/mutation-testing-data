*** using precomputed mutations ***
[32m13:38:38 (2432) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m13:38:38 (2432) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m13:38:39 (2432) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m13:38:39 (2432) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m13:38:39 (2432) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m13:38:39 (2432) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 260 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.5/mutants.json ***
Mutant 0 in matcher.ts: spec.match replaced with !spec.match
Mutant 1 in matcher.ts: spec.match replaced with spec.search
Mutant 2 in matcher.ts: spec.match replaced with spec.replace
Mutant 3 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/g
Mutant 4 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/i
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/s
Mutant 6 in matcher.ts: spec.match replaced with spec.search
Mutant 7 in matcher.ts: spec.match replaced with spec.test
Mutant 8 in matcher.ts: spec.match replaced with spec.exec
Mutant 9 in matcher.ts: /^\// replaced with /^[a-zA-Z0-9_/:~.$+*-]+$/
Mutant 10 in matcher.ts: /^\// replaced with /^(?:|[a-zA-Z0-9_/:~.$+*-]+)$/
Mutant 11 in matcher.ts: spec.match replaced with spec.search
Mutant 12 in matcher.ts: spec.match replaced with spec.includes
Mutant 13 in matcher.ts: spec.match replaced with spec.startsWith
Mutant 14 in matcher.ts: /\/\// replaced with /\/\/.*/
Mutant 15 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null
Mutant 16 in matcher.ts: spec.match replaced with spec.includes
Mutant 17 in matcher.ts: spec.match replaced with spec.search
Mutant 18 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/g
Mutant 19 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/i
Mutant 20 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 21 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === undefined
Mutant 22 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== spec.match(/^.+\/$/)
Mutant 23 in matcher.ts: spec.match replaced with spec.search
Mutant 24 in matcher.ts: spec.match replaced with spec.replace
Mutant 25 in matcher.ts: spec.match replaced with spec.split
Mutant 26 in matcher.ts: /^.+\/$/ replaced with /^.+\/(?!$)/
Mutant 27 in matcher.ts: /^.+\/$/ replaced with /^.+\/(?=.*\/)/
Mutant 28 in matcher.ts: /^.+\/$/ replaced with /^.+\/(?=\/.*)/
Mutant 29 in matcher.ts: spec replaced with spec.split('/').slice(1).reverse().join('')
Mutant 30 in matcher.ts: spec replaced with spec.split('/').slice(1).reverse().join('') + '/'
Mutant 31 in matcher.ts: spec replaced with spec.split('/').slice(1).reverse().join('') + '/*'
Mutant 32 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length >= 1 && string.endsWith('/')
Mutant 33 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 34 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 || string.endsWith('/')
Mutant 35 in matcher.ts: string.endsWith replaced with string.startsWith
Mutant 36 in matcher.ts: string.endsWith replaced with string.includes
Mutant 37 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 38 in matcher.ts: '/' replaced with ''
Mutant 39 in matcher.ts: '/' replaced with ' '
Mutant 40 in matcher.ts: '/' replaced with '/' + ' '
Mutant 41 in matcher.ts: max > 0 || any replaced with max > 1 || any
Mutant 42 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 43 in matcher.ts: max > 0 || any replaced with max > 0 || !any
Mutant 44 in matcher.ts: final && opt && min < 1 replaced with final && opt && min >= 1
Mutant 45 in matcher.ts: final && opt && min < 1 replaced with final && opt && min > 1
Mutant 46 in matcher.ts: final && opt && min < 1 replaced with final && opt && min !== 1
Mutant 47 in matcher.ts: min > 0 replaced with min < 0
Mutant 48 in matcher.ts: min > 0 replaced with min === 0
Mutant 49 in matcher.ts: min > 0 replaced with min !== 0
Mutant 50 in matcher.ts: true replaced with false
Mutant 51 in matcher.ts: true replaced with null
Mutant 52 in matcher.ts: true replaced with !final
Mutant 53 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '')
Mutant 54 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, ' ')
Mutant 55 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '\\')
Mutant 56 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + 'a'
Mutant 57 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc.substr(1)
Mutant 58 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc.split('').reverse().join('')
Mutant 59 in matcher.ts: '$' replaced with '$$'
Mutant 60 in matcher.ts: '$' replaced with '#'
Mutant 61 in matcher.ts: '$' replaced with '\\'
Mutant 62 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (let part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 63 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 64 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).filter(p => p !== '')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 65 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).map(p => p.toLowerCase())) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 66 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 67 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().join('/')
Mutant 68 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().map(x => x.replace(/^:/, ''))
Mutant 69 in matcher.ts: '/' replaced with '\\'
Mutant 70 in matcher.ts: '/' replaced with '|/'
Mutant 71 in matcher.ts: '/' replaced with '/.'
Mutant 72 in matcher.ts: 1 replaced with 0
Mutant 73 in matcher.ts: 1 replaced with -1
Mutant 74 in matcher.ts: 1 replaced with 1.5
Mutant 75 in matcher.ts: part replaced with part.length
Mutant 76 in matcher.ts: part replaced with part[0]
Mutant 77 in matcher.ts: part replaced with part.substring(1)
Mutant 78 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 79 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== part.match(/:.+/)
Mutant 80 in matcher.ts: /:.+/ replaced with /:.+?/
Mutant 81 in matcher.ts: /:.+/ replaced with /:[^/]+/
Mutant 82 in matcher.ts: /:.+/ replaced with /:[a-zA-Z0-9_-]+/
Mutant 83 in matcher.ts: part.slice(1) replaced with part.slice(0)
Mutant 84 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 85 in matcher.ts: part.slice(1) replaced with part.slice(1, 2)
Mutant 86 in matcher.ts: part.slice replaced with part.substring
Mutant 87 in matcher.ts: part.slice replaced with part.charAt
Mutant 88 in matcher.ts: part.slice replaced with part.split
Mutant 89 in matcher.ts: parts.push replaced with parts.pop
Mutant 90 in matcher.ts: parts.push replaced with parts.shift
Mutant 91 in matcher.ts: parts.push replaced with parts.unshift
Mutant 92 in matcher.ts: '/([^/]+)' replaced with '/([^/]+)/'
Mutant 93 in matcher.ts: '/([^/]+)' replaced with '/([^/]+)(?:\/|$)/'
Mutant 94 in matcher.ts: '/([^/]+)' replaced with '/([^/]+)(?:\/|$)?/'
Mutant 95 in matcher.ts: parts.push replaced with parts.pop
Mutant 96 in matcher.ts: parts.push replaced with parts.shift
Mutant 97 in matcher.ts: parts.push replaced with parts.unshift
Mutant 98 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1')}/`
Mutant 99 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1')}.*/`
Mutant 100 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1')}.+/`
Mutant 101 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '\\\$1')
Mutant 102 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '$1')
Mutant 103 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 104 in matcher.ts: /([.$])/g replaced with /\b([.$])\b/g
Mutant 105 in matcher.ts: /([.$])/g replaced with /(\W)([.$])/g
Mutant 106 in matcher.ts: '\\$1' replaced with '\\$2'
Mutant 107 in matcher.ts: '\\$1' replaced with '\\$0'
Mutant 108 in matcher.ts: '\\$1' replaced with '\\$123'
Mutant 109 in matcher.ts: props.reverse replaced with props.length
Mutant 110 in policy.ts: this.rules.push replaced with this.rules.pop
Mutant 111 in policy.ts: this.rules.push replaced with this.rules.shift
Mutant 112 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 113 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 114 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.query(path, verb, ctx))
Mutant 115 in policy.ts: this.rules replaced with this.rules.slice(0, this.rules.length - 1)
Mutant 116 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.clone())
Mutant 117 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.clone() + 1)
Mutant 118 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.clone() * 2)
Mutant 119 in policy.ts: path replaced with path.split()
Mutant 120 in policy.ts: path replaced with path.toUpperCase()
Mutant 121 in policy.ts: path replaced with path.substring(1)
Mutant 122 in policy.ts: verb replaced with verb.toUpperCase()
Mutant 123 in policy.ts: verb replaced with verb.length
Mutant 124 in policy.ts: verb replaced with verb.charAt(0)
Mutant 125 in policy.ts: ctx replaced with undefined
Mutant 126 in policy.ts: ctx replaced with null
Mutant 127 in policy.ts: ctx replaced with 0
Mutant 128 in policy.ts: res === false replaced with res === null
Mutant 129 in policy.ts: res === false replaced with res === undefined
Mutant 130 in policy.ts: res === false replaced with res === true
Mutant 131 in policy.ts: res === true replaced with res !== true
Mutant 132 in policy.ts: res === true replaced with res !== false
Mutant 133 in policy.ts: res === true replaced with res !== null
Mutant 134 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 135 in policy.ts: this.rules replaced with this.rules.slice(1)
Mutant 136 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.matches(path, ctx))
Mutant 137 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) && rule.matches(path, ctx)
Mutant 138 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) || rule.matches(path, ctx)
Mutant 139 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) ^ rule.matches(path, ctx)
Mutant 140 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.parent)
Mutant 141 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.children)
Mutant 142 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.siblings)
Mutant 143 in policy.ts: path replaced with path.toUpperCase()
Mutant 144 in policy.ts: path replaced with path.substring(1)
Mutant 145 in policy.ts: path replaced with path.split('/').pop()
Mutant 146 in policy.ts: ctx replaced with null
Mutant 147 in policy.ts: ctx replaced with undefined
Mutant 148 in policy.ts: ctx replaced with Math.random()
Mutant 149 in policy.ts: this.rules.map replaced with this.rules.forEach
Mutant 150 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 151 in policy.ts: this.rules.map replaced with this.rules.some
Mutant 152 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(name, false)
Mutant 153 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(name, true)
Mutant 154 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(name, !deep)
Mutant 155 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name.toLowerCase(), policy]
Mutant 156 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.clone()]
Mutant 157 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 158 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (let policy of policies) {
  this.set(policy.name, policy);
}
Mutant 159 in policymap.ts: policies replaced with policies.slice()
Mutant 160 in policymap.ts: policies replaced with policies.filter(policy => policy.name !== 'default')
Mutant 161 in policymap.ts: policies replaced with policies.map(policy => policy.name)
Mutant 162 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 163 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, policy.name)
Mutant 164 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, this.get(policy.name))
Mutant 165 in policymap.ts: this.set replaced with this.clear
Mutant 166 in policymap.ts: policy.name replaced with policy.name.toLowerCase()
Mutant 167 in policymap.ts: policy.name replaced with policy.name.toUpperCase()
Mutant 168 in policymap.ts: policy.name replaced with policy.name.substring(1)
Mutant 169 in policymap.ts: policy replaced with policy.name
Mutant 170 in policymap.ts: policy replaced with policy.name.toLowerCase()
Mutant 171 in policymap.ts: policy replaced with policy.name.toUpperCase()
Mutant 172 in policymap.ts: this.get replaced with this.has
Mutant 173 in policymap.ts: this.get replaced with this.values
Mutant 174 in policymap.ts: this.get replaced with this.entries
Mutant 175 in policymap.ts: name replaced with name.toLowerCase()
Mutant 176 in policymap.ts: name replaced with name.split('').reverse().join('')
Mutant 177 in policymap.ts: name replaced with name.length
Mutant 178 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path + verb, ctx)
Mutant 179 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb + ctx)
Mutant 180 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx + path)
Mutant 181 in policymap.ts: path replaced with path.substring(1)
Mutant 182 in policymap.ts: path replaced with path.toUpperCase()
Mutant 183 in policymap.ts: path replaced with path.split('/').join('\\')
Mutant 184 in policymap.ts: verb replaced with " "
Mutant 185 in policymap.ts: verb replaced with !verb
Mutant 186 in policymap.ts: verb replaced with verb.toLowerCase()
Mutant 187 in policymap.ts: ctx replaced with null
Mutant 188 in policymap.ts: ctx replaced with undefined
Mutant 189 in policymap.ts: ctx replaced with 0
Mutant 190 in policymap.ts: this.get replaced with this.has
Mutant 191 in policymap.ts: this.get replaced with this.set
Mutant 192 in policymap.ts: name replaced with undefined
Mutant 193 in policymap.ts: name replaced with null
Mutant 194 in policymap.ts: name replaced with ''
Mutant 195 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + ctx)
Mutant 196 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path || ctx)
Mutant 197 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path && ctx)
Mutant 198 in policymap.ts: policy.matches replaced with policy.match
Mutant 199 in policymap.ts: path replaced with path.toLowerCase()
Mutant 200 in policymap.ts: path replaced with path.replace('a', 'b')
Mutant 201 in policymap.ts: path replaced with path.split('').reverse().join('')
Mutant 202 in policymap.ts: ctx replaced with ctx.path
Mutant 203 in policymap.ts: ctx replaced with ctx.verb
Mutant 204 in policymap.ts: ctx replaced with ctx.name
Mutant 205 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.keys()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 206 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.values()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 207 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of Object.keys(verbs)) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 208 in rule.ts: verbs replaced with verbs.values()
Mutant 209 in rule.ts: verbs replaced with verbs.keys()
Mutant 210 in rule.ts: verbs replaced with Object.values(verbs)
Mutant 211 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 212 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs && this.verbs[verb]
Mutant 213 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs && !this.verbs[verb]
Mutant 214 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.keys()) {
  this.verbs[verb] = false;
}
Mutant 215 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.values()) {
  this.verbs[verb] = false;
}
Mutant 216 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.entries()) {
  this.verbs[verb] = false;
}
Mutant 217 in rule.ts: verbs replaced with verbs.keys()
Mutant 218 in rule.ts: verbs replaced with verbs.values()
Mutant 219 in rule.ts: verbs replaced with verbs.entries()
Mutant 220 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.matches(path, ctx) && verb in this.verbs
Mutant 221 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !(verb in this.verbs)
Mutant 222 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && this.verbs[verb] === false
Mutant 223 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.replace(this.regex, ''), ctx)
Mutant 224 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.match(this.regex), ctx)
Mutant 225 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.split(this.regex), ctx)
Mutant 226 in rule.ts: this.matches replaced with this.matches && false
Mutant 227 in rule.ts: this.matches replaced with this.matches || true
Mutant 228 in rule.ts: path replaced with path.toLowerCase()
Mutant 229 in rule.ts: path replaced with path.substring(1)
Mutant 230 in rule.ts: path replaced with path.split('/')[0]
Mutant 231 in rule.ts: ctx replaced with ctx.length
Mutant 232 in rule.ts: ctx replaced with ctx.toString()
Mutant 233 in rule.ts: path.match replaced with path.search
Mutant 234 in rule.ts: this.regex replaced with this.regex.test(path)
Mutant 235 in rule.ts: this.regex replaced with this.regex.prototype.exec(path)
Mutant 236 in rule.ts: this.regex replaced with /this.regex/
Mutant 237 in rule.ts: match === null replaced with match !== null
Mutant 238 in rule.ts: match === null replaced with match.length === 0
Mutant 239 in rule.ts: match === null replaced with match.indexOf('') === 0
Mutant 240 in rule.ts: count > 0 replaced with count < 0
Mutant 241 in rule.ts: count > 0 replaced with count === 0
Mutant 242 in rule.ts: count > 0 replaced with count > 1
Mutant 243 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 244 in rule.ts: ctx === undefined replaced with ctx.length === 0
Mutant 245 in rule.ts: ctx === undefined replaced with ctx.props.length === 0
Mutant 246 in rule.ts: index < count replaced with index <= count
Mutant 247 in rule.ts: index < count replaced with index > count
Mutant 248 in rule.ts: index < count replaced with index == count
Mutant 249 in rule.ts: index++ replaced with index += 2
Mutant 250 in rule.ts: index++ replaced with index--
Mutant 251 in rule.ts: index++ replaced with index = 0
Mutant 252 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] === prop
Mutant 253 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined || match[index + 1] === prop
Mutant 254 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.keys()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 255 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.values()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 256 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.entries()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 257 in rule.ts: this.verbs replaced with this.verbs.keys()
Mutant 258 in rule.ts: this.verbs replaced with this.verbs.values()
Mutant 259 in rule.ts: this.verbs replaced with this.verbs.entries()
[32m13:38:39 (2432) INFO Instrumenter[39m Instrumented 6 source file(s) with 260 mutant(s)
[32m13:38:40 (2432) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m13:38:41 (2432) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m13:38:41 (2432) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m13:38:45 (2432) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4388 ms, overhead 2 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~14m) 3/260 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~14m) 6/260 tested (3 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~13m) 9/260 tested (3 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~13m) 12/260 tested (3 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~14m) 14/260 tested (3 survived, 0 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~14m) 17/260 tested (4 survived, 0 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~14m) 20/260 tested (6 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~13m) 23/260 tested (7 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~13m) 26/260 tested (7 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~13m) 29/260 tested (7 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~13m) 32/260 tested (7 survived, 0 timed out)
Mutation testing 13% (elapsed: ~2m, remaining: ~12m) 35/260 tested (7 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~12m) 39/260 tested (8 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~12m) 42/260 tested (10 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~11m) 45/260 tested (10 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~11m) 48/260 tested (10 survived, 0 timed out)
Mutation testing 19% (elapsed: ~2m, remaining: ~11m) 51/260 tested (11 survived, 0 timed out)
Mutation testing 20% (elapsed: ~3m, remaining: ~11m) 54/260 tested (11 survived, 0 timed out)
Mutation testing 21% (elapsed: ~3m, remaining: ~11m) 57/260 tested (11 survived, 0 timed out)
Mutation testing 23% (elapsed: ~3m, remaining: ~11m) 60/260 tested (11 survived, 0 timed out)
Mutation testing 24% (elapsed: ~3m, remaining: ~10m) 63/260 tested (12 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~10m) 66/260 tested (12 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~10m) 69/260 tested (12 survived, 0 timed out)
Mutation testing 27% (elapsed: ~4m, remaining: ~10m) 72/260 tested (12 survived, 0 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~10m) 75/260 tested (13 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~10m) 78/260 tested (13 survived, 0 timed out)
Mutation testing 31% (elapsed: ~4m, remaining: ~9m) 81/260 tested (15 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~9m) 84/260 tested (17 survived, 0 timed out)
Mutation testing 33% (elapsed: ~4m, remaining: ~9m) 87/260 tested (18 survived, 0 timed out)
Mutation testing 34% (elapsed: ~5m, remaining: ~9m) 90/260 tested (18 survived, 0 timed out)
Mutation testing 35% (elapsed: ~5m, remaining: ~9m) 93/260 tested (18 survived, 0 timed out)
Mutation testing 36% (elapsed: ~5m, remaining: ~9m) 96/260 tested (18 survived, 0 timed out)
Mutation testing 38% (elapsed: ~5m, remaining: ~8m) 99/260 tested (18 survived, 0 timed out)
Mutation testing 39% (elapsed: ~5m, remaining: ~8m) 103/260 tested (19 survived, 0 timed out)
Mutation testing 40% (elapsed: ~5m, remaining: ~8m) 106/260 tested (19 survived, 0 timed out)
Mutation testing 41% (elapsed: ~6m, remaining: ~8m) 109/260 tested (19 survived, 0 timed out)
Mutation testing 43% (elapsed: ~6m, remaining: ~8m) 112/260 tested (19 survived, 0 timed out)
Mutation testing 44% (elapsed: ~6m, remaining: ~7m) 115/260 tested (21 survived, 0 timed out)
Mutation testing 45% (elapsed: ~6m, remaining: ~7m) 118/260 tested (21 survived, 0 timed out)
Mutation testing 46% (elapsed: ~6m, remaining: ~7m) 121/260 tested (21 survived, 0 timed out)
Mutation testing 47% (elapsed: ~6m, remaining: ~7m) 124/260 tested (21 survived, 0 timed out)
Mutation testing 48% (elapsed: ~7m, remaining: ~7m) 127/260 tested (21 survived, 0 timed out)
Mutation testing 50% (elapsed: ~7m, remaining: ~7m) 130/260 tested (21 survived, 0 timed out)
Mutation testing 51% (elapsed: ~7m, remaining: ~6m) 134/260 tested (22 survived, 0 timed out)
Mutation testing 52% (elapsed: ~7m, remaining: ~6m) 137/260 tested (24 survived, 0 timed out)
Mutation testing 53% (elapsed: ~7m, remaining: ~6m) 140/260 tested (26 survived, 0 timed out)
Mutation testing 55% (elapsed: ~7m, remaining: ~6m) 143/260 tested (26 survived, 0 timed out)
Mutation testing 56% (elapsed: ~8m, remaining: ~6m) 146/260 tested (26 survived, 0 timed out)
Mutation testing 57% (elapsed: ~8m, remaining: ~6m) 149/260 tested (26 survived, 0 timed out)
Mutation testing 58% (elapsed: ~8m, remaining: ~5m) 152/260 tested (26 survived, 0 timed out)
Mutation testing 59% (elapsed: ~8m, remaining: ~5m) 155/260 tested (26 survived, 0 timed out)
Mutation testing 61% (elapsed: ~8m, remaining: ~5m) 159/260 tested (29 survived, 0 timed out)
Mutation testing 62% (elapsed: ~8m, remaining: ~5m) 162/260 tested (31 survived, 0 timed out)
Mutation testing 63% (elapsed: ~9m, remaining: ~5m) 165/260 tested (31 survived, 0 timed out)
Mutation testing 64% (elapsed: ~9m, remaining: ~5m) 168/260 tested (32 survived, 0 timed out)
Mutation testing 65% (elapsed: ~9m, remaining: ~4m) 171/260 tested (32 survived, 0 timed out)
Mutation testing 66% (elapsed: ~9m, remaining: ~4m) 174/260 tested (32 survived, 0 timed out)
Mutation testing 68% (elapsed: ~9m, remaining: ~4m) 177/260 tested (33 survived, 0 timed out)
Mutation testing 69% (elapsed: ~9m, remaining: ~4m) 181/260 tested (33 survived, 0 timed out)
Mutation testing 70% (elapsed: ~10m, remaining: ~4m) 184/260 tested (33 survived, 0 timed out)
Mutation testing 71% (elapsed: ~10m, remaining: ~3m) 187/260 tested (34 survived, 0 timed out)
Mutation testing 73% (elapsed: ~10m, remaining: ~3m) 190/260 tested (34 survived, 0 timed out)
Mutation testing 74% (elapsed: ~10m, remaining: ~3m) 193/260 tested (34 survived, 0 timed out)
Mutation testing 75% (elapsed: ~10m, remaining: ~3m) 196/260 tested (34 survived, 0 timed out)
Mutation testing 76% (elapsed: ~10m, remaining: ~3m) 199/260 tested (34 survived, 0 timed out)
Mutation testing 78% (elapsed: ~11m, remaining: ~3m) 203/260 tested (35 survived, 0 timed out)
Mutation testing 79% (elapsed: ~11m, remaining: ~2m) 206/260 tested (35 survived, 0 timed out)
Mutation testing 80% (elapsed: ~11m, remaining: ~2m) 209/260 tested (37 survived, 0 timed out)
Mutation testing 81% (elapsed: ~11m, remaining: ~2m) 212/260 tested (38 survived, 0 timed out)
Mutation testing 82% (elapsed: ~11m, remaining: ~2m) 215/260 tested (38 survived, 0 timed out)
Mutation testing 83% (elapsed: ~11m, remaining: ~2m) 218/260 tested (39 survived, 0 timed out)
Mutation testing 85% (elapsed: ~12m, remaining: ~2m) 221/260 tested (40 survived, 0 timed out)
Mutation testing 86% (elapsed: ~12m, remaining: ~1m) 224/260 tested (40 survived, 0 timed out)
Mutation testing 87% (elapsed: ~12m, remaining: ~1m) 227/260 tested (40 survived, 0 timed out)
Mutation testing 88% (elapsed: ~12m, remaining: ~1m) 230/260 tested (41 survived, 0 timed out)
Mutation testing 90% (elapsed: ~12m, remaining: ~1m) 234/260 tested (41 survived, 0 timed out)
Mutation testing 91% (elapsed: ~12m, remaining: ~1m) 237/260 tested (41 survived, 0 timed out)
Mutation testing 92% (elapsed: ~13m, remaining: ~1m) 240/260 tested (41 survived, 0 timed out)
Mutation testing 93% (elapsed: ~13m, remaining: <1m) 243/260 tested (41 survived, 0 timed out)
Mutation testing 94% (elapsed: ~13m, remaining: <1m) 246/260 tested (41 survived, 0 timed out)
Mutation testing 95% (elapsed: ~13m, remaining: <1m) 249/260 tested (41 survived, 0 timed out)
Mutation testing 96% (elapsed: ~13m, remaining: <1m) 251/260 tested (42 survived, 0 timed out)
Mutation testing 96% (elapsed: ~13m, remaining: <1m) 252/260 tested (42 survived, 1 timed out)
Mutation testing 98% (elapsed: ~14m, remaining: <1m) 255/260 tested (42 survived, 1 timed out)
Mutation testing 99% (elapsed: ~14m, remaining: <1m) 259/260 tested (42 survived, 1 timed out)

All tests
  ✓ All tests (killed 217)

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/g) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/i) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/s) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:18:20
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/\/\/.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/g) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/i) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:29:9
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/$/) !== spec.match(/^.+\/$/)) {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith(' ')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/' + ' ')) {

[Survived] PrecomputedMutator
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (min !== 0) {

[Survived] PrecomputedMutator
src/matcher.ts:92:3
-     for (const part of spec.split('/').slice(1).reverse()) {
-       switch (part) {
-         case '+':
-           min++
-           max++
-           break
-         case '++':
-           max++
-           break
-         case '*':
-           min++
-           any = true
-           break
-         case '**':
-           any = true
-           break
-         default:
-           flatten()
-           opt = false
-           if (part.match(/:.+/) !== null) {
-             props.push(part.slice(1))
-             parts.push('/([^/]+)')
-           } else {
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
-           }
-       }
-     }
+     for (let part of spec.split('/').slice(1).reverse()) {
+     switch (part) {
+       case '+':
+         min++;
+         max++;
+         break;
+       case '++':
+         max++;
+         break;
+       case '*':
+         min++;
+         any = true;
+         break;
+       case '**':
+         any = true;
+         break;
+       default:
+         flatten();
+         opt = false;
+         if (part.match(/:.+/) !== null) {
+           props.push(part.slice(1));
+           parts.push('/([^/]+)');
+         } else {
+           parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
+         }
+     }
+   }

[Survived] PrecomputedMutator
src/matcher.ts:92:44
-     for (const part of spec.split('/').slice(1).reverse()) {
+     for (const part of spec.split('/').slice(1.5).reverse()) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.+/) !== part.match(/:.+/)) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.+?/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:[^/]+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:[a-zA-Z0-9_-]+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substring(1))

[Survived] PrecomputedMutator
src/matcher.ts:115:26
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
+             parts.push(`/${part.replace(/([.$])/g, '\\\$1')}`)

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:37:11
-         if (res === true) {
+         if (res !== null) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.filter(rule => rule.matches(path, ctx))) {

[Survived] PrecomputedMutator
src/policy.ts:49:11
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path, ctx) && rule.matches(path, ctx)) {

[Survived] PrecomputedMutator
src/policy.ts:49:11
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path, ctx) || rule.matches(path, ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:7:24
-       super(policies.map((policy) => [policy.name, policy]))
+       super(policies.map(policy => [policy.name.toLowerCase(), policy]))

[Survived] PrecomputedMutator
src/policymap.ts:7:24
-       super(policies.map((policy) => [policy.name, policy]))
+       super(policies.map(policy => [policy.name, policy.clone()]))

[Survived] PrecomputedMutator
src/policymap.ts:12:5
-       for (const policy of policies) {
-         this.set(policy.name, policy)
-       }
+       for (let policy of policies) {
+     this.set(policy.name, policy);
+   }

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.slice()) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.filter(policy => policy.name !== 'default')) {

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy.name.toLowerCase(), policy)

[Survived] PrecomputedMutator
src/policymap.ts:28:29
-       const policy = this.get(name)
+       const policy = this.get(name.toLowerCase())

[Survived] PrecomputedMutator
src/policymap.ts:30:28
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policymap.ts:41:24
-         ? policy.matches(path, ctx)
+         ? policy.matches(path.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.values()) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of verbs.values()) {

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of Object.values(verbs)) {

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.values()) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.values()) {

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   83.85 |      217 |         1 |         42 |        0 |        0 |
 matcher.ts   |   82.73 |       91 |         0 |         19 |        0 |        0 |
 policy.ts    |   84.44 |       38 |         0 |          7 |        0 |        0 |
 policymap.ts |   82.00 |       41 |         0 |          9 |        0 |        0 |
 rule.ts      |   87.27 |       47 |         1 |          7 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m13:52:58 (2432) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m13:52:58 (2432) INFO MutationTestExecutor[39m Done in 14 minutes 19 seconds.

real	14m21.295s
user	19m10.683s
sys	1m25.099s
