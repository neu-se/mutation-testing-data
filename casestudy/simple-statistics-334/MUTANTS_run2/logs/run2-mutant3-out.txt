
> simple-statistics@7.0.0 test
> microbundle --name ss && tap --coverage test/*.test.js --jobs=4 && npm run jsdoctest

Build "ss" to dist:
      7.65 kB: simple-statistics.js.gz
      6.38 kB: simple-statistics.js.br
       7.7 kB: simple-statistics.mjs.gz
      6.39 kB: simple-statistics.mjs.br
      7.68 kB: simple-statistics.min.js.gz
      6.41 kB: simple-statistics.min.js.br
TAP version 13
ok 1 - test/add_to_mean.test.js # time=944.338ms {
    # Subtest: addToMean
        # Subtest: can get add a single value to a mean
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 1 - can get add a single value to a mean # time=2.715ms
        
        1..1
    ok 1 - addToMean # time=8.4ms
    
    1..1
    # time=13.706ms
}

ok 2 - test/bayes.test.js # time=908.418ms {
    # Subtest: BayesianClassifier
        # Subtest: makes an easy call with one training round
            ok 1 - should be equivalent
            1..1
        ok 1 - makes an easy call with one training round # time=2.279ms
        
        # Subtest: makes fify-fifty call
            ok 1 - should be equivalent
            1..1
        ok 2 - makes fify-fifty call # time=0.887ms
        
        # Subtest: makes seventy-five/twenty-five call
            ok 1 - should be equivalent
            1..1
        ok 3 - makes seventy-five/twenty-five call # time=0.951ms
        
        # Subtest: tests multiple properties
            ok 1 - should be equivalent
            1..1
        ok 4 - tests multiple properties # time=0.974ms
        
        # Subtest: classifies multiple things
            ok 1 - should be equivalent
            ok 2 - should be equivalent
            1..2
        ok 5 - classifies multiple things # time=1.07ms
        
        1..5
    ok 1 - BayesianClassifier # time=26.057ms
    
    1..1
    # time=40.683ms
}

ok 3 - test/bernoulli_distribution.test.js # time=944.391ms {
    # Subtest: bernoulliDistribution
        # Subtest: can return generate probability and cumulative probability distributions for p = 0.3
            ok 1 - expect truthy value
            ok 2 - 0.0001
            ok 3 - 0.0001
            1..3
        ok 1 - can return generate probability and cumulative probability distributions for p = 0.3 # time=3.026ms
        
        # Subtest: can return null when p is not a valid probability
            ok 1 - p should be greater than 0.0
            ok 2 - p should be less than 1.0
            1..2
        ok 2 - can return null when p is not a valid probability # time=1.568ms
        
        1..2
    ok 1 - bernoulliDistribution # time=13.64ms
    
    1..1
    # time=19.13ms
}

ok 4 - test/binomial_distribution.test.js # time=902.673ms {
    # Subtest: binomialDistribution
        # Subtest: can return generate probability and cumulative probability distributions for n = 6, p = 0.3
            ok 1 - should be equal
            ok 2 - 0.0001
            ok 3 - 0.0001
            ok 4 - 0.0001
            ok 5 - 0.0001
            ok 6 - 0.0001
            ok 7 - 0.0001
            ok 8 - 0.0001
            1..8
        ok 1 - can return generate probability and cumulative probability distributions for n = 6, p = 0.3 # time=3.728ms
        
        # Subtest: can return null when p or n are not valid parameters
            ok 1 - n should be strictly positive
            ok 2 - n should be an integer
            ok 3 - p should be greater than 0.0
            ok 4 - p should be less than 1.0
            1..4
        ok 2 - can return null when p or n are not valid parameters # time=1.394ms
        
        1..2
    ok 1 - binomialDistribution # time=14.551ms
    
    1..1
    # time=25.059ms
}

ok 5 - test/bisect.test.js # time=573.962ms {
    # Subtest: bisect
        # Subtest: can find root of sin and cos
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - Throws if it exceeds the number of iterations allowed
            ok 4 - Throws with syntax error f must be a function
            1..4
        ok 1 - can find root of sin and cos # time=3.722ms
        
        1..1
    ok 1 - bisect # time=9.169ms
    
    1..1
    # time=11.852ms
}

ok 6 - test/chi_squared_goodness_of_fit.test.js # time=579.848ms {
    # Subtest: chiSquaredGoodnessOfFit
        # Subtest: can reject the null hypothesis with level of confidence specified at 0.05
            ok 1 - should be equal
            1..1
        ok 1 - can reject the null hypothesis with level of confidence specified at 0.05 # time=2.566ms
        
        # Subtest: can accept the null hypothesis with level of confidence specified at 0.10
            ok 1 - should be equal
            1..1
        ok 2 - can accept the null hypothesis with level of confidence specified at 0.10 # time=1.223ms
        
        # Subtest: can tolerate gaps in distribution
            ok 1 - should be equal
            1..1
        ok 3 - can tolerate gaps in distribution # time=0.951ms
        
        1..3
    ok 1 - chiSquaredGoodnessOfFit # time=17.69ms
    
    1..1
    # time=22.394ms
}

ok 7 - test/chunk.test.js # time=564.414ms {
    # Subtest: chunk
        # Subtest: can get chunks of an array
            ok 1 - should be equivalent
            ok 2 - should be equivalent
            ok 3 - should be equivalent
            ok 4 - should be equivalent
            ok 5 - should be equivalent
            ok 6 - should be equivalent
            ok 7 - should be equivalent
            ok 8 - Throws with zero chunk size
            ok 9 - Throws with non-integer chunk size
            1..9
        ok 1 - can get chunks of an array # time=5.18ms
        
        1..1
    ok 1 - chunk # time=10.59ms
    
    1..1
    # time=13.382ms
}

ok 8 - test/ckmeans.test.js # time=554.692ms {
    # Subtest: C k-means
        ok 1 - exports fn
        ok 2 - Cannot generate more values than input
        ok 3 - single-value case
        ok 4 - same-value case
        ok 5 - should be equivalent
        ok 6 - should be equivalent
        ok 7 - should be equivalent
        ok 8 - should be equivalent
        ok 9 - should be equivalent
        ok 10 - should be equivalent
        ok 11 - should be equivalent
        ok 12 - should be equivalent
        ok 13 - should be equivalent
        ok 14 - should be equivalent
        ok 15 - should be equivalent
        ok 16 - should be equivalent
        1..16
    ok 1 - C k-means # time=6.69ms
    
    1..1
    # time=9.887ms
}

ok 9 - test/combinations.test.js # time=621.158ms {
    # Subtest: combinations
        # Subtest: generates 1 permutation
            ok 1 - should be equivalent
            1..1
        ok 1 - generates 1 permutation # time=3.18ms
        
        # Subtest: generates combinations of 1,2,3 choosing two at a time
            ok 1 - should be equivalent
            1..1
        ok 2 - generates combinations of 1,2,3 choosing two at a time # time=1.532ms
        
        1..2
    ok 1 - combinations # time=15.914ms
    
    1..1
    # time=19.051ms
}

ok 10 - test/combinations_replacement.test.js # time=624.922ms {
    # Subtest: combinations
        # Subtest: generates 1 permutation
            ok 1 - should be equivalent
            1..1
        ok 1 - generates 1 permutation # time=2.997ms
        
        # Subtest: generates combinations of 1,2 choosing two at a time, with replacement
            ok 1 - should be equivalent
            1..1
        ok 2 - generates combinations of 1,2 choosing two at a time, with replacement # time=1.148ms
        
        1..2
    ok 1 - combinations # time=14.967ms
    
    1..1
    # time=17.998ms
}

ok 11 - test/combine_means.test.js # time=613.441ms {
    # Subtest: combineMeans
        # Subtest: can combine the means of two lists
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 1 - can combine the means of two lists # time=3.015ms
        
        1..1
    ok 1 - combineMeans # time=8.742ms
    
    1..1
    # time=12.007ms
}

ok 12 - test/combine_variances.test.js # time=614.951ms {
    # Subtest: combineVariances
        # Subtest: can combine the variances of two lists
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 1 - can combine the variances of two lists # time=3.018ms
        
        1..1
    ok 1 - combineVariances # time=8.947ms
    
    1..1
    # time=11.828ms
}

ok 13 - test/cumulative.test.js # time=617.687ms {
    # Subtest: cumulativeStdNormalProbability
        # Subtest: wikipedia test example works
            ok 1 - should be equal
            1..1
        ok 1 - wikipedia test example works # time=2.211ms
        
        # Subtest: nondecreasing
            1..0
        ok 2 - nondecreasing # time=0.907ms
        
        # Subtest: matches errorFunction
            1..0
        ok 3 - matches errorFunction # time=1.214ms
        
        # Subtest: symmetry
            ok 1 - should be equal
            1..1
        ok 4 - symmetry # time=0.893ms
        
        # Subtest: inverse
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            ok 4 - should be equal
            ok 5 - should be equal
            ok 6 - should be equal
            ok 7 - should be equal
            ok 8 - should be equal
            ok 9 - should be equal
            ok 10 - should be equal
            ok 11 - should be equal
            ok 12 - should be equal
            ok 13 - should be equal
            ok 14 - should be equal
            ok 15 - should be equal
            ok 16 - should be equal
            ok 17 - should be equal
            ok 18 - should be equal
            ok 19 - should be equal
            ok 20 - should be equal
            ok 21 - should be equal
            ok 22 - should be equal
            ok 23 - should be equal
            ok 24 - should be equal
            ok 25 - should be equal
            ok 26 - should be equal
            ok 27 - should be equal
            ok 28 - should be equal
            ok 29 - should be equal
            ok 30 - should be equal
            ok 31 - should be equal
            ok 32 - should be equal
            ok 33 - should be equal
            ok 34 - should be equal
            ok 35 - should be equal
            ok 36 - should be equal
            ok 37 - should be equal
            ok 38 - should be equal
            ok 39 - should be equal
            ok 40 - should be equal
            ok 41 - should be equal
            ok 42 - should be equal
            ok 43 - should be equal
            ok 44 - should be equal
            ok 45 - should be equal
            ok 46 - should be equal
            ok 47 - should be equal
            ok 48 - should be equal
            ok 49 - should be equal
            ok 50 - should be equal
            ok 51 - should be equal
            ok 52 - should be equal
            ok 53 - should be equal
            ok 54 - should be equal
            ok 55 - should be equal
            ok 56 - should be equal
            ok 57 - should be equal
            ok 58 - should be equal
            ok 59 - should be equal
            ok 60 - should be equal
            ok 61 - should be equal
            ok 62 - should be equal
            ok 63 - should be equal
            ok 64 - should be equal
            ok 65 - should be equal
            ok 66 - should be equal
            ok 67 - should be equal
            ok 68 - should be equal
            ok 69 - should be equal
            ok 70 - should be equal
            ok 71 - should be equal
            ok 72 - should be equal
            ok 73 - should be equal
            ok 74 - should be equal
            ok 75 - should be equal
            ok 76 - should be equal
            ok 77 - should be equal
            ok 78 - should be equal
            ok 79 - should be equal
            ok 80 - should be equal
            ok 81 - should be equal
            ok 82 - should be equal
            ok 83 - should be equal
            ok 84 - should be equal
            ok 85 - should be equal
            ok 86 - should be equal
            ok 87 - should be equal
            ok 88 - should be equal
            ok 89 - should be equal
            ok 90 - should be equal
            ok 91 - should be equal
            ok 92 - should be equal
            ok 93 - should be equal
            ok 94 - should be equal
            ok 95 - should be equal
            ok 96 - should be equal
            ok 97 - should be equal
            ok 98 - should be equal
            ok 99 - should be equal
            ok 100 - should be equal
            ok 101 - should be equal
            1..101
        ok 5 - inverse # time=13.424ms
        
        1..5
    ok 1 - cumulativeStdNormalProbability # time=36.744ms
    
    1..1
    # time=39.722ms
}

ok 14 - test/equal_interval_breaks.test.js # time=555.957ms {
    # Subtest: equalIntervalBreaks
        ok 1 - 1-length case
        ok 2 - three breaks
        ok 3 - two breaks
        ok 4 - one break
        1..4
    ok 1 - equalIntervalBreaks # time=3.435ms
    
    1..1
    # time=6.864ms
}

ok 15 - test/error_function.test.js # time=611.977ms {
    # Subtest: errorFunction
        1..0
    ok 1 - errorFunction # time=4.745ms
    
    # Subtest: symmetry
        ok 1 - should be equal
        1..1
    ok 2 - symmetry # time=0.818ms
    
    # Subtest: inverse
        ok 1 - should be equal
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equal
        ok 5 - should be equal
        ok 6 - should be equal
        ok 7 - should be equal
        ok 8 - should be equal
        ok 9 - should be equal
        ok 10 - should be equal
        ok 11 - should be equal
        ok 12 - should be equal
        ok 13 - should be equal
        ok 14 - should be equal
        ok 15 - should be equal
        ok 16 - should be equal
        ok 17 - should be equal
        ok 18 - should be equal
        ok 19 - should be equal
        ok 20 - should be equal
        ok 21 - should be equal
        ok 22 - should be equal
        ok 23 - should be equal
        ok 24 - should be equal
        ok 25 - should be equal
        ok 26 - should be equal
        ok 27 - should be equal
        ok 28 - should be equal
        ok 29 - should be equal
        ok 30 - should be equal
        ok 31 - should be equal
        ok 32 - should be equal
        ok 33 - should be equal
        ok 34 - should be equal
        ok 35 - should be equal
        ok 36 - should be equal
        ok 37 - should be equal
        ok 38 - should be equal
        ok 39 - should be equal
        ok 40 - should be equal
        ok 41 - should be equal
        ok 42 - should be equal
        ok 43 - should be equal
        ok 44 - should be equal
        ok 45 - should be equal
        ok 46 - should be equal
        ok 47 - should be equal
        ok 48 - should be equal
        ok 49 - should be equal
        ok 50 - should be equal
        ok 51 - should be equal
        ok 52 - should be equal
        ok 53 - should be equal
        ok 54 - should be equal
        ok 55 - should be equal
        ok 56 - should be equal
        ok 57 - should be equal
        ok 58 - should be equal
        ok 59 - should be equal
        ok 60 - should be equal
        ok 61 - should be equal
        ok 62 - should be equal
        ok 63 - should be equal
        ok 64 - should be equal
        ok 65 - should be equal
        ok 66 - should be equal
        ok 67 - should be equal
        ok 68 - should be equal
        ok 69 - should be equal
        ok 70 - should be equal
        ok 71 - should be equal
        ok 72 - should be equal
        ok 73 - should be equal
        ok 74 - should be equal
        ok 75 - should be equal
        ok 76 - should be equal
        ok 77 - should be equal
        ok 78 - should be equal
        ok 79 - should be equal
        ok 80 - should be equal
        ok 81 - should be equal
        ok 82 - should be equal
        ok 83 - should be equal
        ok 84 - should be equal
        ok 85 - should be equal
        ok 86 - should be equal
        ok 87 - should be equal
        ok 88 - should be equal
        ok 89 - should be equal
        ok 90 - should be equal
        ok 91 - should be equal
        ok 92 - should be equal
        ok 93 - should be equal
        ok 94 - should be equal
        ok 95 - should be equal
        ok 96 - should be equal
        ok 97 - should be equal
        ok 98 - should be equal
        ok 99 - should be equal
        ok 100 - should be equal
        ok 101 - should be equal
        ok 102 - should be equal
        ok 103 - should be equal
        ok 104 - should be equal
        ok 105 - should be equal
        ok 106 - should be equal
        ok 107 - should be equal
        ok 108 - should be equal
        ok 109 - should be equal
        ok 110 - should be equal
        ok 111 - should be equal
        ok 112 - should be equal
        ok 113 - should be equal
        ok 114 - should be equal
        ok 115 - should be equal
        ok 116 - should be equal
        ok 117 - should be equal
        ok 118 - should be equal
        ok 119 - should be equal
        ok 120 - should be equal
        ok 121 - should be equal
        ok 122 - should be equal
        ok 123 - should be equal
        ok 124 - should be equal
        ok 125 - should be equal
        ok 126 - should be equal
        ok 127 - should be equal
        ok 128 - should be equal
        ok 129 - should be equal
        ok 130 - should be equal
        ok 131 - should be equal
        ok 132 - should be equal
        ok 133 - should be equal
        ok 134 - should be equal
        ok 135 - should be equal
        ok 136 - should be equal
        ok 137 - should be equal
        ok 138 - should be equal
        ok 139 - should be equal
        ok 140 - should be equal
        ok 141 - should be equal
        ok 142 - should be equal
        ok 143 - should be equal
        ok 144 - should be equal
        ok 145 - should be equal
        ok 146 - should be equal
        ok 147 - should be equal
        ok 148 - should be equal
        ok 149 - should be equal
        ok 150 - should be equal
        ok 151 - should be equal
        ok 152 - should be equal
        ok 153 - should be equal
        ok 154 - should be equal
        ok 155 - should be equal
        ok 156 - should be equal
        ok 157 - should be equal
        ok 158 - should be equal
        ok 159 - should be equal
        ok 160 - should be equal
        ok 161 - should be equal
        ok 162 - should be equal
        ok 163 - should be equal
        ok 164 - should be equal
        ok 165 - should be equal
        ok 166 - should be equal
        ok 167 - should be equal
        ok 168 - should be equal
        ok 169 - should be equal
        ok 170 - should be equal
        ok 171 - should be equal
        ok 172 - should be equal
        ok 173 - should be equal
        ok 174 - should be equal
        ok 175 - should be equal
        ok 176 - should be equal
        ok 177 - should be equal
        ok 178 - should be equal
        ok 179 - should be equal
        ok 180 - should be equal
        ok 181 - should be equal
        ok 182 - should be equal
        ok 183 - should be equal
        ok 184 - should be equal
        ok 185 - should be equal
        ok 186 - should be equal
        ok 187 - should be equal
        ok 188 - should be equal
        ok 189 - should be equal
        ok 190 - should be equal
        ok 191 - should be equal
        ok 192 - should be equal
        ok 193 - should be equal
        ok 194 - should be equal
        ok 195 - should be equal
        ok 196 - should be equal
        ok 197 - should be equal
        ok 198 - should be equal
        ok 199 - should be equal
        ok 200 - should be equal
        1..200
    ok 3 - inverse # time=43.791ms
    
    1..3
    # time=56.974ms
}

ok 16 - test/factorial.test.js # time=610.535ms {
    # Subtest: factorial
        # Subtest: cannot calculate the factorial of a number lower than zero
            ok 1 - expected to throw
            1..1
        ok 1 - cannot calculate the factorial of a number lower than zero # time=2.267ms
        
        # Subtest: rejects floating-point inputs
            ok 1 - expected to throw
            1..1
        ok 2 - rejects floating-point inputs # time=1.239ms
        
        # Subtest: can calculate 0! = 1
            ok 1 - should be equal
            1..1
        ok 3 - can calculate 0! = 1 # time=1.015ms
        
        # Subtest: can calculate 1! = 1
            ok 1 - should be equal
            1..1
        ok 4 - can calculate 1! = 1 # time=1.131ms
        
        # Subtest: can calculate 100! = 1
            ok 1 - should be equal
            1..1
        ok 5 - can calculate 100! = 1 # time=1.882ms
        
        1..5
    ok 1 - factorial # time=53.023ms
    
    1..1
    # time=57.105ms
}

not ok 17 - test/gamma.test.js # time=628.941ms
  ---
  timeout: 240000
  file: test/gamma.test.js
  childId: 16
  command: /usr/local/bin/node
  args:
    - '-r'
    - >-
      /Users/franktip/git/mutation-testing-data/casestudy/simple-statistics-633/simple-statistics/node_modules/esm/esm.js
    - test/gamma.test.js
  stdio:
    - 0
    - pipe
    - 2
  cwd: >-
    /Users/franktip/git/mutation-testing-data/casestudy/simple-statistics-633/simple-statistics
  exitCode: 1
  ...
{
    # Subtest: gamma
        # Subtest: gamma for integer should return whole number
            ok 1 - should be equal
            1..1
        ok 1 - gamma for integer should return whole number # time=2.168ms
        
        # Subtest: gamma for positive real float should be correct
            not ok 1 - should be equal
              ---
              found: 13098426.03915616
              wanted: 13098426.039156161
              compare: '==='
              at:
                line: 12
                column: 11
                file: test/gamma.test.js
                type: Test
              stack: |
                Test.<anonymous> (test/gamma.test.js:12:11)
                Test.<anonymous> (test/gamma.test.js:11:7)
                Object.<anonymous> (test/gamma.test.js:6:1)
                Generator.next (<anonymous>)
                Object.<anonymous> (node_modules/append-transform/index.js:62:4)
                Object.<anonymous> (node_modules/nyc/bin/wrap.js:27:4)
                Generator.next (<anonymous>)
                Generator.next (<anonymous>)
              source: |
                t.equal(ss.gamma(11.54), 13098426.039156161);
              ...
            
            1..1
            # failed 1 test
        not ok 2 - gamma for positive real float should be correct # time=11.918ms
        
        # Subtest: gamma for negative real float should be correct
            not ok 1 - should be equal
              ---
              found: -3.4197935207248555e-52
              wanted: -3.419793520724856e-52
              compare: '==='
              at:
                line: 16
                column: 11
                file: test/gamma.test.js
                type: Test
              stack: |
                Test.<anonymous> (test/gamma.test.js:16:11)
                Test.<anonymous> (test/gamma.test.js:15:7)
                Object.<anonymous> (test/gamma.test.js:6:1)
                Generator.next (<anonymous>)
                Object.<anonymous> (node_modules/append-transform/index.js:62:4)
                Object.<anonymous> (node_modules/nyc/bin/wrap.js:27:4)
                Generator.next (<anonymous>)
                Generator.next (<anonymous>)
              source: |
                t.equal(ss.gamma(-42.5), -3.419793520724856e-52);
              ...
            
            1..1
            # failed 1 test
        not ok 3 - gamma for negative real float should be correct # time=5.445ms
        
        # Subtest: gamma for negative integer should return NaN
            ok 1 - expect truthy value
            1..1
        ok 4 - gamma for negative integer should return NaN # time=1.201ms
        
        # Subtest: gamma for zero should return NaN
            ok 1 - expect truthy value
            1..1
        ok 5 - gamma for zero should return NaN # time=0.827ms
        
        1..5
        # failed 2 of 5 tests
    not ok 1 - gamma # time=42.126ms
    
    1..1
    # failed 1 test
    # time=47.033ms
}

ok 18 - test/gammaln.test.js # time=579.313ms {
    # Subtest: gammaln
        # Subtest: gammaln for positive real float should be correct
            ok 1 - should be equal
            1..1
        ok 1 - gammaln for positive real float should be correct # time=2.42ms
        
        # Subtest: exp(gammaln(n)) for n should equal gamma(n)
            ok 1 - should be equal
            1..1
        ok 2 - exp(gammaln(n)) for n should equal gamma(n) # time=1.081ms
        
        # Subtest: gammaln for negative n should be Infinity
            ok 1 - should be equal
            1..1
        ok 3 - gammaln for negative n should be Infinity # time=0.982ms
        
        # Subtest: gammaln for n === 0 should return NaN
            ok 1 - should be equal
            1..1
        ok 4 - gammaln for n === 0 should return NaN # time=1.038ms
        
        1..4
    ok 1 - gammaln # time=22.973ms
    
    1..1
    # time=26.687ms
}

ok 19 - test/geometric_mean.test.js # time=577.091ms {
    # Subtest: geometric mean
        # Subtest: can get the mean of two numbers
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 1 - can get the mean of two numbers # time=3.465ms
        
        # Subtest: cannot calculate for empty lists
            ok 1 - expected to throw
            1..1
        ok 2 - cannot calculate for empty lists # time=1.419ms
        
        # Subtest: cannot calculate for lists with negative numbers
            ok 1 - expected to throw
            1..1
        ok 3 - cannot calculate for lists with negative numbers # time=1.044ms
        
        1..3
    ok 1 - geometric mean # time=21.523ms
    
    1..1
    # time=26.773ms
}

ok 20 - test/harmonic_mean.test.js # time=575.011ms {
    # Subtest: harmonicMean
        # Subtest: can get the mean of two or more numbers
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 1 - can get the mean of two or more numbers # time=3.362ms
        
        # Subtest: cannot calculate for empty lists
            ok 1 - expected to throw
            1..1
        ok 2 - cannot calculate for empty lists # time=1.378ms
        
        # Subtest: cannot calculate for lists with negative numbers
            ok 1 - expected to throw
            1..1
        ok 3 - cannot calculate for lists with negative numbers # time=1.027ms
        
        1..3
    ok 1 - harmonicMean # time=21.244ms
    
    1..1
    # time=26.942ms
}

ok 21 - test/iqr.test.js # time=603.399ms {
    # Subtest: interquartile range (iqr)
        # Subtest: can get proper iqr of an even-length list
            ok 1 - should be equal
            1..1
        ok 1 - can get proper iqr of an even-length list # time=3.122ms
        
        # Subtest: can get proper iqr of an odd-length list
            ok 1 - should be equal
            1..1
        ok 2 - can get proper iqr of an odd-length list # time=1.725ms
        
        # Subtest: an iqr of a zero-length list cannot be calculated
            ok 1 - expected to throw
            1..1
        ok 3 - an iqr of a zero-length list cannot be calculated # time=1.126ms
        
        1..3
    ok 1 - interquartile range (iqr) # time=21.408ms
    
    1..1
    # time=26.808ms
}

ok 22 - test/kernel_density_estimation.test.js # time=592.947ms {
    # Subtest: kernel density estimation
        # Subtest: default kernel and bandwidth
            ok 1 - density(-3) = 0.006725383080803049 != 0.00622253574711248
            ok 2 - density(-2) = 0.09535649908332725 != 0.0955008985482363
            ok 3 - density(-1) = 0.26263648397806405 != 0.26278412857974
            ok 4 - density(0) = 0.3521783483093786 != 0.35334369527338
            ok 5 - density(1) = 0.21390865841745316 != 0.214348469979353
            ok 6 - density(2) = 0.0654843034111212 != 0.0652701909587952
            ok 7 - density(3) = 0.0033136835339548664 != 0.00303679902517155
            1..7
        ok 1 - default kernel and bandwidth # time=6.139ms
        
        1..1
    ok 1 - kernel density estimation # time=12.186ms
    
    1..1
    # time=15.36ms
}

ok 23 - test/linear_regression.test.js # time=608.473ms {
    # Subtest: linear regression
        # Subtest: correctly generates a line for a 0, 0 to 1, 1 dataset
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 1 - correctly generates a line for a 0, 0 to 1, 1 dataset # time=3.508ms
        
        # Subtest: correctly generates a line for a 0, 0 to 1, 0 dataset
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 2 - correctly generates a line for a 0, 0 to 1, 0 dataset # time=1.625ms
        
        # Subtest: handles a single-point sample
            ok 1 - should be equivalent
            1..1
        ok 3 - handles a single-point sample # time=1.202ms
        
        # Subtest: a straight line will have a slope of 0
            ok 1 - should be equivalent
            1..1
        ok 4 - a straight line will have a slope of 0 # time=0.965ms
        
        # Subtest: a line at 50% grade
            ok 1 - should be equivalent
            1..1
        ok 5 - a line at 50% grade # time=0.81ms
        
        # Subtest: a line with a high y-intercept
            ok 1 - should be equivalent
            1..1
        ok 6 - a line with a high y-intercept # time=0.743ms
        
        1..6
    ok 1 - linear regression # time=34.066ms
    
    1..1
    # time=38.77ms
}

ok 24 - test/mad.test.js # time=596.16ms {
    # Subtest: median absolute deviation (mad)
        # Subtest: median absolute deviation of an example on wikipedia
            ok 1 - should be equal
            1..1
        ok 1 - median absolute deviation of an example on wikipedia # time=3.237ms
        
        # Subtest: median absolute deviation of 0-10
            ok 1 - should be equal
            1..1
        ok 2 - median absolute deviation of 0-10 # time=1.13ms
        
        # Subtest: median absolute deviation of one number is zero
            ok 1 - should be equal
            1..1
        ok 3 - median absolute deviation of one number is zero # time=0.947ms
        
        # Subtest: zero-length corner case
            ok 1 - expected to throw
            1..1
        ok 4 - zero-length corner case # time=1.209ms
        
        1..4
    ok 1 - median absolute deviation (mad) # time=24.176ms
    
    1..1
    # time=27.465ms
}

ok 25 - test/mean.test.js # time=614.792ms {
    # Subtest: mean
        # Subtest: can get the mean of two numbers
            ok 1 - should be equal
            1..1
        ok 1 - can get the mean of two numbers # time=2.688ms
        
        # Subtest: can get the mean of one number
            ok 1 - should be equal
            1..1
        ok 2 - can get the mean of one number # time=1.079ms
        
        # Subtest: an empty list has no average
            ok 1 - expected to throw
            1..1
        ok 3 - an empty list has no average # time=0.913ms
        
        1..3
    ok 1 - mean # time=19.571ms
    
    1..1
    # time=24.998ms
}

ok 26 - test/median.test.js # time=631.699ms {
    # Subtest: median
        # Subtest: can get the median of three numbers
            ok 1 - should be equal
            1..1
        ok 1 - can get the median of three numbers # time=2.69ms
        
        # Subtest: can get the median of two numbers
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 2 - can get the median of two numbers # time=1.361ms
        
        # Subtest: can get the median of four numbers
            ok 1 - should be equal
            1..1
        ok 3 - can get the median of four numbers # time=0.838ms
        
        # Subtest: cannot calculate the median of an empty list
            ok 1 - expected to throw
            1..1
        ok 4 - cannot calculate the median of an empty list # time=1.125ms
        
        # Subtest: sorts numbers numerically
            ok 1 - should be equal
            1..1
        ok 5 - sorts numbers numerically # time=0.782ms
        
        # Subtest: does not change the sorting order of its input
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 6 - does not change the sorting order of its input # time=1.211ms
        
        1..6
    ok 1 - median # time=33.399ms
    
    1..1
    # time=38.487ms
}

ok 27 - test/minmax.test.js # time=635.972ms {
    # Subtest: min
        ok 1 - zero length array throws
        # Subtest: can get the minimum of one number
            ok 1 - should be equal
            1..1
        ok 2 - can get the minimum of one number # time=1.833ms
        
        # Subtest: can get the minimum of three numbers
            ok 1 - should be equal
            1..1
        ok 3 - can get the minimum of three numbers # time=0.963ms
        
        1..3
    ok 1 - min # time=13.486ms
    
    # Subtest: max
        ok 1 - zero length array throws
        # Subtest: can get the maximum of three numbers
            ok 1 - should be equal
            1..1
        ok 2 - can get the maximum of three numbers # time=1.125ms
        
        1..2
    ok 2 - max # time=6.246ms
    
    # Subtest: extent
        ok 1 - zero length array throws
        # Subtest: can get the extent of one number
            ok 1 - should be equivalent
            ok 2 - should be equal
            1..2
        ok 2 - can get the extent of one number # time=1.381ms
        
        # Subtest: can get the extent of three numbers
            ok 1 - should be equivalent
            1..1
        ok 3 - can get the extent of three numbers # time=1.009ms
        
        1..3
    ok 3 - extent # time=10.691ms
    
    # Subtest: sorted
        ok 1 - maxSorted
        ok 2 - minSorted
        ok 3 - extentSorted
        1..3
    ok 4 - sorted # time=0.763ms
    
    1..4
    # time=44.3ms
}

ok 28 - test/mode.test.js # time=660.74ms {
    # Subtest: mode
        # Subtest: mode
            # Subtest: the mode of a single-number array is that one number
                ok 1 - should be equal
                1..1
            ok 1 - the mode of a single-number array is that one number # time=3.401ms
            
            # Subtest: the mode of a two-number array is that one number
                ok 1 - should be equal
                1..1
            ok 2 - the mode of a two-number array is that one number # time=1.229ms
            
            # Subtest: other cases
                ok 1 - should be equal
                ok 2 - should be equal
                ok 3 - should be equal
                ok 4 - should be equal
                ok 5 - should be equal
                ok 6 - should be equal
                ok 7 - should be equal
                ok 8 - should be equal
                1..8
            ok 3 - other cases # time=3.208ms
            
            # Subtest: the mode of an empty array is null
                ok 1 - expected to throw
                1..1
            ok 4 - the mode of an empty array is null # time=1.004ms
            
            # Subtest: the mode of a three-number array with two same numbers is the repeated one
                ok 1 - should be equal
                1..1
            ok 5 - the mode of a three-number array with two same numbers is the repeated one # time=0.834ms
            
            1..5
        ok 1 - mode # time=30.583ms
        
        # Subtest: modeFast
            # Subtest: the mode of a single-number array is that one number
                ok 1 - should be equal
                1..1
            ok 1 - the mode of a single-number array is that one number # time=0.957ms
            
            # Subtest: the mode of a two-number array is that one number
                ok 1 - should be equal
                1..1
            ok 2 - the mode of a two-number array is that one number # time=0.685ms
            
            # Subtest: other cases
                ok 1 - should be equal
                ok 2 - should be equal
                ok 3 - should be equal
                ok 4 - should be equal
                ok 5 - should be equal
                ok 6 - should be equal
                ok 7 - should be equal
                ok 8 - should be equal
                1..8
            ok 3 - other cases # time=1.809ms
            
            # Subtest: the mode of an empty array is null
                ok 1 - expected to throw
                1..1
            ok 4 - the mode of an empty array is null # time=0.587ms
            
            # Subtest: the mode of a three-number array with two same numbers is the repeated one
                ok 1 - should be equal
                1..1
            ok 5 - the mode of a three-number array with two same numbers is the repeated one # time=0.613ms
            
            1..5
        ok 2 - modeFast # time=24.526ms
        
        # Subtest: mode sorted
            ok 1 - should be equal
            1..1
        ok 3 - mode sorted # time=0.484ms
        
        1..3
    ok 1 - mode # time=68.114ms
    
    1..1
    # time=71.035ms
}

ok 29 - test/normal_distribution.test.js # time=632.841ms {
    # Subtest: natural distribution and z-score
        # Subtest: normal table is exposed in the API
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 1 - normal table is exposed in the API # time=2.853ms
        
        # Subtest: P(Z <= 0.4) is 0.6554
            ok 1 - should be equal
            1..1
        ok 2 - P(Z <= 0.4) is 0.6554 # time=1.175ms
        
        # Subtest: P(Z <= -1.20) is 0.1151
            ok 1 - should be equal
            1..1
        ok 3 - P(Z <= -1.20) is 0.1151 # time=0.861ms
        
        # Subtest: P(X <= 82) when X ~ N (80, 25) is 0.6554
            ok 1 - should be equal
            1..1
        ok 4 - P(X <= 82) when X ~ N (80, 25) is 0.6554 # time=0.873ms
        
        # Subtest: P(X >= 90) when X ~ N (80, 25) is 0.0228
            ok 1 - should be equal
            1..1
        ok 5 - P(X >= 90) when X ~ N (80, 25) is 0.0228 # time=0.638ms
        
        # Subtest: P(X <= 74) when X ~ N (80, 25) is 0.1151
            ok 1 - should be equal
            1..1
        ok 6 - P(X <= 74) when X ~ N (80, 25) is 0.1151 # time=0.87ms
        
        # Subtest: P(78 <= X <= 88) when X ~ N (80, 25) is 0.6006
            ok 1 - should be equal
            1..1
        ok 7 - P(78 <= X <= 88) when X ~ N (80, 25) is 0.6006 # time=0.9ms
        
        1..7
    ok 1 - natural distribution and z-score # time=36.155ms
    
    1..1
    # time=41.279ms
}

ok 30 - test/numeric_sort.test.js # time=602.232ms {
    # Subtest: numericSort
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        ok 3 - should be equivalent
        ok 4 - does not mutate input
        1..4
    ok 1 - numericSort # time=3.73ms
    
    1..1
    # time=7.392ms
}

ok 31 - test/perceptron.test.js # time=622.918ms {
    # Subtest: perceptron
        # Subtest: initializes to zeros if label is zero
            ok 1 - should be equivalent
            ok 2 - should be equal
            1..2
        ok 1 - initializes to zeros if label is zero # time=3.044ms
        
        # Subtest: initializes to values if label is one
            ok 1 - should be equivalent
            ok 2 - should be equal
            1..2
        ok 2 - initializes to values if label is one # time=1.327ms
        
        # Subtest: learns to separate one from two
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 3 - learns to separate one from two # time=1.239ms
        
        # Subtest: learns a diagonal boundary
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            ok 4 - should be equal
            1..4
        ok 4 - learns a diagonal boundary # time=1.46ms
        
        1..4
    ok 1 - perceptron # time=24.863ms
    
    1..1
    # time=28.147ms
}

ok 32 - test/permutation_test.test.js # time=653.887ms {
    # Subtest: permutation test
        # Subtest: P-value of identical distributions being different should be 1
            ok 1 - should be equal
            1..1
        ok 1 - P-value of identical distributions being different should be 1 # time=12.124ms
        
        # Subtest: P-value of distribution less than itself should be 1
            ok 1 - should be equal
            1..1
        ok 2 - P-value of distribution less than itself should be 1 # time=5.65ms
        
        # Subtest: P-value of small sample greater than large sample should be 0
            ok 1 - should be equal
            1..1
        ok 3 - P-value of small sample greater than large sample should be 0 # time=14.501ms
        
        # Subtest: permutationTest should throw error if wrong argument received
            ok 1 - alternative must be one of specified options
            1..1
        ok 4 - permutationTest should throw error if wrong argument received # time=1.252ms
        
        1..4
    ok 1 - permutation test # time=51.346ms
    
    1..1
    # time=54.512ms
}

ok 33 - test/permutations_heap.test.js # time=579.92ms {
    # Subtest: permutationsHeap
        # Subtest: generates 1 permutation
            ok 1 - should be equivalent
            1..1
        ok 1 - generates 1 permutation # time=2.44ms
        
        # Subtest: generates 1, 2, 3 permutations
            ok 1 - should be equivalent
            1..1
        ok 2 - generates 1, 2, 3 permutations # time=1.243ms
        
        1..2
    ok 1 - permutationsHeap # time=13.375ms
    
    1..1
    # time=16.942ms
}

ok 34 - test/poisson_distribution.test.js # time=592.108ms {
    # Subtest: poissonDistribution
        # Subtest: can return generate probability and cumulative probability distributions for lambda = 3.0
            ok 1 - should be equal
            ok 2 - 0.0001
            1..2
        ok 1 - can return generate probability and cumulative probability distributions for lambda = 3.0 # time=2.734ms
        
        # Subtest: can generate probability and cumulative probability distributions for lambda = 4.0
            ok 1 - should be equal
            ok 2 - 0.0001
            1..2
        ok 2 - can generate probability and cumulative probability distributions for lambda = 4.0 # time=1.453ms
        
        # Subtest: can generate probability and cumulative probability distributions for lambda = 5.5
            ok 1 - should be equal
            ok 2 - 0.0001
            1..2
        ok 3 - can generate probability and cumulative probability distributions for lambda = 5.5 # time=1.29ms
        
        # Subtest: can generate probability and cumulative probability distributions for lambda = 9.5
            ok 1 - should be equal
            ok 2 - 0.0001
            1..2
        ok 4 - can generate probability and cumulative probability distributions for lambda = 9.5 # time=1.124ms
        
        # Subtest: can return undefined when lambda <= 0
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 5 - can return undefined when lambda <= 0 # time=1.002ms
        
        1..5
    ok 1 - poissonDistribution # time=28.711ms
    
    1..1
    # time=33.661ms
}

ok 35 - test/product.test.js # time=588.735ms {
    # Subtest: product
        # Subtest: can get the product of one number
            ok 1 - should be equal
            1..1
        ok 1 - can get the product of one number # time=2.428ms
        
        # Subtest: can get the product of two numbers
            ok 1 - should be equal
            1..1
        ok 2 - can get the product of two numbers # time=1.004ms
        
        # Subtest: can get the product of a negative number
            ok 1 - should be equal
            1..1
        ok 3 - can get the product of a negative number # time=1.023ms
        
        # Subtest: the product of no numbers is one - the multiplicative identity
            ok 1 - should be equal
            1..1
        ok 4 - the product of no numbers is one - the multiplicative identity # time=0.971ms
        
        1..4
    ok 1 - product # time=23.396ms
    
    1..1
    # time=28.005ms
}

not ok 36 - test/quantile.test.js # time=631.115ms
  ---
  timeout: 240000
  file: test/quantile.test.js
  childId: 35
  command: /usr/local/bin/node
  args:
    - '-r'
    - >-
      /Users/franktip/git/mutation-testing-data/casestudy/simple-statistics-633/simple-statistics/node_modules/esm/esm.js
    - test/quantile.test.js
  stdio:
    - 0
    - pipe
    - 2
  cwd: >-
    /Users/franktip/git/mutation-testing-data/casestudy/simple-statistics-633/simple-statistics
  exitCode: 1
  ...
{
    # Subtest: quantile
        # Subtest: can get proper quantiles of an even-length list
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 1 - can get proper quantiles of an even-length list # time=3.255ms
        
        # Subtest: can get proper quantiles of an odd-length list
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 2 - can get proper quantiles of an odd-length list # time=1.466ms
        
        # Subtest: the median quantile is equal to the median
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 3 - the median quantile is equal to the median # time=1.364ms
        
        ok 4 - a zero-length list throws an error
        # Subtest: test odd-value case
            ok 1 - should be equal
            1..1
        ok 5 - test odd-value case # time=0.986ms
        
        # Subtest: bad bounds throw an error
            ok 1 - expected to throw
            ok 2 - expected to throw
            1..2
        ok 6 - bad bounds throw an error # time=1.167ms
        
        # Subtest: max quantile is equal to the max
            ok 1 - should be equal
            1..1
        ok 7 - max quantile is equal to the max # time=0.855ms
        
        # Subtest: min quantile is equal to the min
            ok 1 - should be equal
            1..1
        ok 8 - min quantile is equal to the min # time=0.812ms
        
        # Subtest: if quantile arg is an array, response is an array of quantiles
            not ok 1 - 1 is not a function
              ---
              stack: |
                src/bisect.js:41:21
                Object.p [as quantile] (src/bisect.js:41:21)
                Test.<anonymous> (test/quantile.test.js:66:28)
              at:
                line: 41
                column: 21
                file: src/bisect.js
              type: TypeError
              tapCaught: testFunctionThrow
              test: 'if quantile arg is an array, response is an array of quantiles'
              source: |
                throw new Error("maximum number of iterations exceeded");
              ...
            
            1..1
            # failed 1 test
        not ok 9 - if quantile arg is an array, response is an array of quantiles # time=23.826ms
        
        # Subtest: can get an array of quantiles on a small number of elements
            not ok 1 - 1 is not a function
              ---
              stack: |
                src/bisect.js:41:21
                Object.p [as quantile] (src/bisect.js:41:21)
                Test.<anonymous> (test/quantile.test.js:82:23)
              at:
                line: 41
                column: 21
                file: src/bisect.js
              type: TypeError
              tapCaught: testFunctionThrow
              test: can get an array of quantiles on a small number of elements
              source: |
                throw new Error("maximum number of iterations exceeded");
              ...
            
            1..1
            # failed 1 test
        not ok 10 - can get an array of quantiles on a small number of elements # time=3.387ms
        
        1..10
        # failed 2 of 10 tests
    not ok 1 - quantile # time=70.354ms
    
    1..1
    # failed 1 test
    # time=75.83ms
}

ok 37 - test/quantile_rank.test.js # time=562.926ms {
    # Subtest: quantileRank
        # Subtest: can get proper quantile ranks
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            ok 4 - should be equal
            ok 5 - should be equal
            ok 6 - should be equal
            1..6
        ok 1 - can get proper quantile ranks # time=3.94ms
        
        1..1
    ok 1 - quantileRank # time=9.423ms
    
    1..1
    # time=12.198ms
}

ok 38 - test/quantile_rank_sorted.test.js # time=556.459ms {
    # Subtest: quantileRankSorted
        # Subtest: can get proper quantile ranks
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            ok 4 - should be equal
            ok 5 - should be equal
            1..5
        ok 1 - can get proper quantile ranks # time=3.56ms
        
        1..1
    ok 1 - quantileRankSorted # time=9.525ms
    
    1..1
    # time=12.386ms
}

ok 39 - test/quantilesorted.test.js # time=561.584ms {
    # Subtest: quantileSorted
        # Subtest: can get proper quantiles of an even-length list
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 1 - can get proper quantiles of an even-length list # time=3.205ms
        
        1..1
    ok 1 - quantileSorted # time=9.076ms
    
    1..1
    # time=12.059ms
}

ok 40 - test/quickselect.test.js # time=563.112ms {
    # Subtest: quickselect
        ok 1 - should be equivalent
        1..1
    ok 1 - quickselect # time=2.831ms
    
    # Subtest: quickselect long arrays
        ok 1 - should be equal
        1..1
    ok 2 - quickselect long arrays # time=1.428ms
    
    # Subtest: quickselect long arrays L35 coverage
        ok 1 - should be equal
        1..1
    ok 3 - quickselect long arrays L35 coverage # time=1.052ms
    
    1..3
    # time=15.503ms
}

ok 41 - test/r_squared.test.js # time=594.891ms {
    # Subtest: r-squared
        # Subtest: says that the r squared of a two-point line is perfect
            ok 1 - should be equal
            1..1
        ok 1 - says that the r squared of a two-point line is perfect # time=3.353ms
        
        # Subtest: says that the r squared of a three-point line is not perfect
            ok 1 - should not be equal
            1..1
        ok 2 - says that the r squared of a three-point line is not perfect # time=1.467ms
        
        # Subtest: r-squared of single sample is 1
            ok 1 - should be equal
            1..1
        ok 3 - r-squared of single sample is 1 # time=0.875ms
        
        1..3
    ok 1 - r-squared # time=18.641ms
    
    1..1
    # time=23.547ms
}

ok 42 - test/root_mean_square.test.js # time=583.176ms {
    # Subtest: root_mean_square
        # Subtest: can get the RMS of two or more numbers
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 1 - can get the RMS of two or more numbers # time=3.153ms
        
        # Subtest: returns null for empty lists
            ok 1 - expected to throw
            1..1
        ok 2 - returns null for empty lists # time=1.25ms
        
        1..2
    ok 1 - root_mean_square # time=14.151ms
    
    1..1
    # time=17.375ms
}

ok 43 - test/sample.test.js # time=577.158ms {
    # Subtest: sample
        ok 1 - edge case - zero array
        ok 2 - edge case - zero array
        ok 3 - edge case - zero array
        ok 4 - edge case - sample of 1
        ok 5 - should be equivalent
        ok 6 - should be equivalent
        ok 7 - should be equivalent
        ok 8 - should be equivalent
        ok 9 - non-number contents
        1..9
    ok 1 - sample # time=5.248ms
    
    1..1
    # time=9.437ms
}

ok 44 - test/sample_correlation.test.js # time=593.19ms {
    # Subtest: sample correlation
        # Subtest: can get the sample correlation of identical arrays
            ok 1 - should be equal
            1..1
        ok 1 - can get the sample correlation of identical arrays # time=2.657ms
        
        # Subtest: can get the sample correlation of different arrays
            ok 1 - should be equal
            1..1
        ok 2 - can get the sample correlation of different arrays # time=1.022ms
        
        # Subtest: zero-length corner case
            ok 1 - expected to throw
            1..1
        ok 3 - zero-length corner case # time=1.148ms
        
        1..3
    ok 1 - sample correlation # time=17.214ms
    
    1..1
    # time=22.196ms
}

ok 45 - test/sample_covariance.test.js # time=580.173ms {
    # Subtest: sample covariance
        # Subtest: can get perfect negative covariance
            ok 1 - should be equal
            1..1
        ok 1 - can get perfect negative covariance # time=2.877ms
        
        # Subtest: covariance of something with itself is its variance
            ok 1 - should be equal
            1..1
        ok 2 - covariance of something with itself is its variance # time=1.02ms
        
        # Subtest: covariance is zero for something with no correlation
            ok 1 - should be equal
            1..1
        ok 3 - covariance is zero for something with no correlation # time=0.982ms
        
        # Subtest: zero-length corner case
            ok 1 - expected to throw
            1..1
        ok 4 - zero-length corner case # time=1.09ms
        
        1..4
    ok 1 - sample covariance # time=22.133ms
    
    1..1
    # time=25.402ms
}

ok 46 - test/sample_kurtosis.test.js # time=590.094ms {
    # Subtest: sample kurtosis
        # Subtest: the kurtosis of an empty sample is null
            ok 1 - expected to throw
            1..1
        ok 1 - the kurtosis of an empty sample is null # time=2.793ms
        
        # Subtest: the kurtosis of an sample with one number is null
            ok 1 - expected to throw
            1..1
        ok 2 - the kurtosis of an sample with one number is null # time=0.989ms
        
        # Subtest: the kurtosis of an sample with two numbers is null
            ok 1 - expected to throw
            1..1
        ok 3 - the kurtosis of an sample with two numbers is null # time=0.939ms
        
        # Subtest: the kurtosis of an sample with three numbers is null
            ok 1 - expected to throw
            1..1
        ok 4 - the kurtosis of an sample with three numbers is null # time=1.048ms
        
        # Subtest: can calculate the kurtosis of SAS example 1
            ok 1 - should be equal
            1..1
        ok 5 - can calculate the kurtosis of SAS example 1 # time=0.877ms
        
        # Subtest: can calculate the kurtosis of SAS example 2
            ok 1 - should be equal
            1..1
        ok 6 - can calculate the kurtosis of SAS example 2 # time=0.828ms
        
        # Subtest: can calculate the kurtosis of SAS example 3
            ok 1 - should be equal
            1..1
        ok 7 - can calculate the kurtosis of SAS example 3 # time=0.622ms
        
        # Subtest: can calculate the kurtosis of SAS example 4
            ok 1 - should be equal
            1..1
        ok 8 - can calculate the kurtosis of SAS example 4 # time=0.69ms
        
        1..8
    ok 1 - sample kurtosis # time=38.248ms
    
    1..1
    # time=43.654ms
}

ok 47 - test/sample_skewness.test.js # time=588.106ms {
    # Subtest: sample skewness
        # Subtest: the skewness of an empty sample is null
            ok 1 - expected to throw
            1..1
        ok 1 - the skewness of an empty sample is null # time=2.539ms
        
        # Subtest: the skewness of an sample with one number is null
            ok 1 - expected to throw
            1..1
        ok 2 - the skewness of an sample with one number is null # time=0.953ms
        
        # Subtest: the skewness of an sample with two numbers is null
            ok 1 - expected to throw
            1..1
        ok 3 - the skewness of an sample with two numbers is null # time=1.13ms
        
        # Subtest: can calculate the skewness of SAS example 1
            ok 1 - should be equal
            1..1
        ok 4 - can calculate the skewness of SAS example 1 # time=1.11ms
        
        # Subtest: can calculate the skewness of SAS example 2
            ok 1 - should be equal
            1..1
        ok 5 - can calculate the skewness of SAS example 2 # time=0.647ms
        
        # Subtest: can calculate the skewness of SAS example 3
            ok 1 - should be equal
            1..1
        ok 6 - can calculate the skewness of SAS example 3 # time=0.722ms
        
        1..6
    ok 1 - sample skewness # time=31.032ms
    
    1..1
    # time=33.847ms
}

ok 48 - test/sample_standard_deviation.test.js # time=564.908ms {
    # Subtest: sampleStandardDeviation
        # Subtest: can get the standard deviation of an example on wikipedia
            ok 1 - should be equal
            1..1
        ok 1 - can get the standard deviation of an example on wikipedia # time=2.706ms
        
        ok 2 - zero-length corner case
        1..2
    ok 1 - sampleStandardDeviation # time=8.975ms
    
    1..1
    # time=12.051ms
}

ok 49 - test/sample_variance.test.js # time=585.67ms {
    # Subtest: sample variance
        # Subtest: can get the sample variance of a six-sided die
            ok 1 - should be equal
            1..1
        ok 1 - can get the sample variance of a six-sided die # time=2.255ms
        
        # Subtest: can get the sample variance of numbers 1-10
            ok 1 - should be equal
            1..1
        ok 2 - can get the sample variance of numbers 1-10 # time=0.953ms
        
        # Subtest: the sample variance of two numbers that are the same is 0
            ok 1 - should be equal
            1..1
        ok 3 - the sample variance of two numbers that are the same is 0 # time=1.141ms
        
        ok 4 - the sample variance of one number cannot be calculated
        ok 5 - the sample variance of no numbers cannot be calculated
        1..5
    ok 1 - sample variance # time=18.114ms
    
    1..1
    # time=22.483ms
}

ok 50 - test/sample_with_replacement.test.js # time=582.767ms {
    # Subtest: sampleWithReplacement
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        ok 3 - should be equivalent
        ok 4 - should be equivalent
        ok 5 - should be equivalent
        1..5
    ok 1 - sampleWithReplacement # time=3.779ms
    
    1..1
    # time=7.937ms
}

ok 51 - test/shuffle.test.js # time=583.849ms {
    # Subtest: shuffle
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        ok 3 - does not change original array
        ok 4 - should be equivalent
        ok 5 - does not change original array
        1..5
    ok 1 - shuffle # time=4.298ms
    
    # Subtest: shuffleInPlace
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        ok 3 - changes original array
        1..3
    ok 2 - shuffleInPlace # time=1.161ms
    
    # Subtest: shuffleInPlace truly random
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 3 - shuffleInPlace truly random # time=1.002ms
    
    1..3
    # time=17.377ms
}

ok 52 - test/sign.test.js # time=571.798ms {
    # Subtest: bisect
        # Subtest: can find sign of number
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            ok 4 - should be equal
            ok 5 - should be equal
            ok 6 - should be equal
            ok 7 - Throws with syntax error x is not a number
            1..7
        ok 1 - can find sign of number # time=4.611ms
        
        1..1
    ok 1 - bisect # time=10.072ms
    
    1..1
    # time=13.122ms
}

ok 53 - test/standard_deviation.test.js # time=583.144ms {
    # Subtest: standardDeviation
        # Subtest: can get the standard deviation of an example on wikipedia
            ok 1 - should be equal
            1..1
        ok 1 - can get the standard deviation of an example on wikipedia # time=2.435ms
        
        # Subtest: can get the standard deviation of 1-3
            ok 1 - should be equal
            1..1
        ok 2 - can get the standard deviation of 1-3 # time=1.322ms
        
        # Subtest: zero-length array corner case
            ok 1 - expected to throw
            1..1
        ok 3 - zero-length array corner case # time=1.377ms
        
        # Subtest: can get the standard deviation of 1-10
            ok 1 - should be equal
            1..1
        ok 4 - can get the standard deviation of 1-10 # time=0.919ms
        
        # Subtest: the standard deviation of one number is zero
            ok 1 - should be equal
            1..1
        ok 5 - the standard deviation of one number is zero # time=0.7ms
        
        1..5
    ok 1 - standardDeviation # time=26.417ms
    
    1..1
    # time=29.37ms
}

ok 54 - test/standard_normal_table.test.js # time=564.66ms {
    # Subtest: standardNormalTable
        1..0
    ok 1 - standardNormalTable # time=5.304ms
    
    # Subtest: all entries are numeric
        1..0
    ok 2 - all entries are numeric # time=0.675ms
    
    1..2
    # time=10.506ms
}

ok 55 - test/subtract_from_mean.test.js # time=563.457ms {
    # Subtest: subtractFromMean
        # Subtest: can remove a single value from a mean
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 1 - can remove a single value from a mean # time=2.766ms
        
        1..1
    ok 1 - subtractFromMean # time=9.247ms
    
    1..1
    # time=12.1ms
}

ok 56 - test/sum.test.js # time=578.695ms {
    # Subtest: sum
        # Subtest: can get the sum of two numbers
            ok 1 - should be equal
            1..1
        ok 1 - can get the sum of two numbers # time=2.358ms
        
        # Subtest: the sum of no numbers is zero
            ok 1 - should be equal
            1..1
        ok 2 - the sum of no numbers is zero # time=1.59ms
        
        1..2
    ok 1 - sum # time=14.206ms
    
    # Subtest: sumSimple
        # Subtest: can get the sum of two numbers
            ok 1 - should be equal
            1..1
        ok 1 - can get the sum of two numbers # time=1.122ms
        
        # Subtest: can get the sum of two numbers
            ok 1 - should be equal
            ok 2 - should be equal
            1..2
        ok 2 - can get the sum of two numbers # time=1.065ms
        
        # Subtest: the sum of no numbers is zero
            ok 1 - should be equal
            1..1
        ok 3 - the sum of no numbers is zero # time=0.766ms
        
        1..3
    ok 2 - sumSimple # time=14.034ms
    
    1..2
    # time=34.186ms
}

ok 57 - test/sum_nth_power_deviations.test.js # time=569.583ms {
    # Subtest: sumNthPowerDeviations
        ok 1 - should be equal
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equal
        1..4
    ok 1 - sumNthPowerDeviations # time=3.63ms
    
    1..1
    # time=6.688ms
}

ok 58 - test/t_test.test.js # time=570.714ms {
    # Subtest: t test
        # Subtest: can compare a known value to the mean of samples
            ok 1 - should be equal
            1..1
        ok 1 - can compare a known value to the mean of samples # time=2.344ms
        
        1..1
    ok 1 - t test # time=8.179ms
    
    1..1
    # time=10.867ms
}

ok 59 - test/t_test_two_sample.test.js # time=578.855ms {
    # Subtest: tTestTwoSample
        # Subtest: can test independency of two samples
            ok 1 - should be equal
            1..1
        ok 1 - can test independency of two samples # time=2.434ms
        
        # Subtest: can test independency of two samples (mu == -2)
            ok 1 - should be equal
            1..1
        ok 2 - can test independency of two samples (mu == -2) # time=1.152ms
        
        # Subtest: can test independency of two samples of different lengths
            ok 1 - should be equal
            1..1
        ok 3 - can test independency of two samples of different lengths # time=0.849ms
        
        # Subtest: has an edge case for one sample being of size zero
            ok 1 - should be equal
            ok 2 - should be equal
            ok 3 - should be equal
            1..3
        ok 4 - has an edge case for one sample being of size zero # time=1.675ms
        
        1..4
    ok 1 - tTestTwoSample # time=23.213ms
    
    1..1
    # time=26.186ms
}

ok 60 - test/unique_count_sorted.test.js # time=559.331ms {
    # Subtest: uniqueCountSorted
        ok 1 - should be equal
        ok 2 - should be equal
        ok 3 - should be equal
        ok 4 - should be equal
        ok 5 - should be equal
        ok 6 - should be equal
        ok 7 - should be equal
        1..7
    ok 1 - uniqueCountSorted # time=4.029ms
    
    1..1
    # time=7.102ms
}

ok 61 - test/variance.test.js # time=526.096ms {
    # Subtest: variance
        # Subtest: can get the variance of a six-sided die
            ok 1 - should be equal
            1..1
        ok 1 - can get the variance of a six-sided die # time=2.497ms
        
        # Subtest: the variance of one number is zero
            ok 1 - should be equal
            1..1
        ok 2 - the variance of one number is zero # time=0.855ms
        
        # Subtest: the variance of no numbers cannot be calculated
            ok 1 - expected to throw
            1..1
        ok 3 - the variance of no numbers cannot be calculated # time=1.126ms
        
        1..3
    ok 1 - variance # time=15.799ms
    
    1..1
    # time=20.655ms
}

ok 62 - test/z_score.test.js # time=516.667ms {
    # Subtest: zScore
        ok 1 - should be equal
        ok 2 - should be equal
        ok 3 - should be equal
        1..3
    ok 1 - zScore # time=2.621ms
    
    1..1
    # time=5.717ms
}

1..62
# failed 2 of 62 tests
# time=9743.515ms
--------------------------------------|----------|----------|----------|----------|-------------------|
File                                  |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |
--------------------------------------|----------|----------|----------|----------|-------------------|
All files                             |    96.98 |    93.75 |      100 |    96.83 |                   |
 add_to_mean.js                       |      100 |      100 |      100 |      100 |                   |
 bayesian_classifier.js               |      100 |      100 |      100 |      100 |                   |
 bernoulli_distribution.js            |      100 |      100 |      100 |      100 |                   |
 binomial_distribution.js             |      100 |      100 |      100 |      100 |                   |
 bisect.js                            |      100 |      100 |      100 |      100 |                   |
 chi_squared_distribution_table.js    |      100 |      100 |      100 |      100 |                   |
 chi_squared_goodness_of_fit.js       |      100 |      100 |      100 |      100 |                   |
 chunk.js                             |      100 |      100 |      100 |      100 |                   |
 ckmeans.js                           |      100 |    96.88 |      100 |      100 |                95 |
 combinations.js                      |      100 |      100 |      100 |      100 |                   |
 combinations_replacement.js          |      100 |      100 |      100 |      100 |                   |
 combine_means.js                     |      100 |      100 |      100 |      100 |                   |
 combine_variances.js                 |      100 |      100 |      100 |      100 |                   |
 cumulative_std_normal_probability.js |      100 |      100 |      100 |      100 |                   |
 epsilon.js                           |      100 |      100 |      100 |      100 |                   |
 equal_interval_breaks.js             |      100 |      100 |      100 |      100 |                   |
 error_function.js                    |      100 |      100 |      100 |      100 |                   |
 extent.js                            |      100 |      100 |      100 |      100 |                   |
 extent_sorted.js                     |      100 |      100 |      100 |      100 |                   |
 factorial.js                         |      100 |      100 |      100 |      100 |                   |
 gamma.js                             |      100 |      100 |      100 |      100 |                   |
 gammaln.js                           |      100 |      100 |      100 |      100 |                   |
 geometric_mean.js                    |      100 |      100 |      100 |      100 |                   |
 harmonic_mean.js                     |      100 |      100 |      100 |      100 |                   |
 interquartile_range.js               |      100 |       75 |      100 |      100 |                21 |
 inverse_error_function.js            |      100 |      100 |      100 |      100 |                   |
 kernel_density_estimation.js         |    62.96 |    28.57 |      100 |    62.96 |... 69,70,71,75,77 |
 linear_regression.js                 |      100 |      100 |      100 |      100 |                   |
 linear_regression_line.js            |      100 |      100 |      100 |      100 |                   |
 max.js                               |      100 |      100 |      100 |      100 |                   |
 max_sorted.js                        |      100 |      100 |      100 |      100 |                   |
 mean.js                              |      100 |      100 |      100 |      100 |                   |
 median.js                            |      100 |      100 |      100 |      100 |                   |
 median_absolute_deviation.js         |      100 |      100 |      100 |      100 |                   |
 median_sorted.js                     |      100 |      100 |      100 |      100 |                   |
 min.js                               |      100 |      100 |      100 |      100 |                   |
 min_sorted.js                        |      100 |      100 |      100 |      100 |                   |
 mode.js                              |      100 |      100 |      100 |      100 |                   |
 mode_fast.js                         |      100 |      100 |      100 |      100 |                   |
 mode_sorted.js                       |      100 |      100 |      100 |      100 |                   |
 numeric_sort.js                      |      100 |      100 |      100 |      100 |                   |
 perceptron.js                        |    90.48 |    85.71 |      100 |    89.47 |             44,74 |
 permutation_test.js                  |      100 |    94.74 |      100 |      100 |                90 |
 permutations_heap.js                 |      100 |      100 |      100 |      100 |                   |
 poisson_distribution.js              |      100 |      100 |      100 |      100 |                   |
 probit.js                            |      100 |      100 |      100 |      100 |                   |
 product.js                           |      100 |      100 |      100 |      100 |                   |
 quantile.js                          |       80 |    92.86 |      100 |    81.82 |       33,35,36,38 |
 quantile_rank.js                     |      100 |      100 |      100 |      100 |                   |
 quantile_rank_sorted.js              |      100 |      100 |      100 |      100 |                   |
 quantile_sorted.js                   |      100 |      100 |      100 |      100 |                   |
 quickselect.js                       |      100 |      100 |      100 |      100 |                   |
 r_squared.js                         |      100 |      100 |      100 |      100 |                   |
 root_mean_square.js                  |      100 |      100 |      100 |      100 |                   |
 sample.js                            |      100 |      100 |      100 |      100 |                   |
 sample_correlation.js                |      100 |      100 |      100 |      100 |                   |
 sample_covariance.js                 |    90.91 |       75 |      100 |       90 |                19 |
 sample_kurtosis.js                   |      100 |      100 |      100 |      100 |                   |
 sample_skewness.js                   |      100 |      100 |      100 |      100 |                   |
 sample_standard_deviation.js         |      100 |      100 |      100 |      100 |                   |
 sample_variance.js                   |      100 |      100 |      100 |      100 |                   |
 sample_with_replacement.js           |      100 |       75 |      100 |      100 |                22 |
 shuffle.js                           |      100 |      100 |      100 |      100 |                   |
 shuffle_in_place.js                  |      100 |      100 |      100 |      100 |                   |
 sign.js                              |      100 |      100 |      100 |      100 |                   |
 standard_deviation.js                |      100 |      100 |      100 |      100 |                   |
 standard_normal_table.js             |      100 |      100 |      100 |      100 |                   |
 subtract_from_mean.js                |      100 |      100 |      100 |      100 |                   |
 sum.js                               |      100 |      100 |      100 |      100 |                   |
 sum_nth_power_deviations.js          |      100 |      100 |      100 |      100 |                   |
 sum_simple.js                        |      100 |      100 |      100 |      100 |                   |
 t_test.js                            |      100 |      100 |      100 |      100 |                   |
 t_test_two_sample.js                 |      100 |    91.67 |      100 |      100 |                55 |
 unique_count_sorted.js               |      100 |      100 |      100 |      100 |                   |
 variance.js                          |      100 |      100 |      100 |      100 |                   |
 z_score.js                           |      100 |      100 |      100 |      100 |                   |
--------------------------------------|----------|----------|----------|----------|-------------------|
