[32m13:06:19 (2108) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m13:06:19 (2108) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m13:06:19 (2108) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[32m13:06:19 (2108) INFO ProjectReader[39m Found 6 of 25 file(s) to be mutated.
*** using standard mutators ***
Mutant 0 in matcher.ts: '1.1' replaced with ""
Mutant 1 in matcher.ts: {
  if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
    throw new Error('Path contains invalid characters');
  }
  if (spec.match(/^\//) === null) {
    throw new Error('Path must begin with a slash');
  }
  if (spec.match(/\/\//) !== null) {
    throw new Error('Path contains empty segments');
  }
  if (spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null) {
    throw new Error('Path contains malformed wildcards');
  }
  if (spec.match(/[^/]:|:\/|:$/) !== null) {
    throw new Error('Path contains malformed captures');
  }
  if (spec.match(/^.+\/$/) !== null) {
    throw new Error('Path must not end with a slash');
  }
  const {
    regex,
    props
  } = compile(spec);
  super(regex);
  this.spec = spec;
  this.props = props;
} replaced with {}
Mutant 2 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with true
Mutant 3 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with false
Mutant 4 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /[a-zA-Z0-9_/:~.$+*-]*$/
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*/
Mutant 7 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]$/
Mutant 8 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[^a-zA-Z0-9_/:~.$+*-]*$/
Mutant 9 in matcher.ts: {
  throw new Error('Path contains invalid characters');
} replaced with {}
Mutant 10 in matcher.ts: 'Path contains invalid characters' replaced with ""
Mutant 11 in matcher.ts: spec.match(/^\//) === null replaced with true
Mutant 12 in matcher.ts: spec.match(/^\//) === null replaced with false
Mutant 13 in matcher.ts: spec.match(/^\//) === null replaced with spec.match(/^\//) !== null
Mutant 14 in matcher.ts: /^\// replaced with /\//
Mutant 15 in matcher.ts: {
  throw new Error('Path must begin with a slash');
} replaced with {}
Mutant 16 in matcher.ts: 'Path must begin with a slash' replaced with ""
Mutant 17 in matcher.ts: spec.match(/\/\//) !== null replaced with true
Mutant 18 in matcher.ts: spec.match(/\/\//) !== null replaced with false
Mutant 19 in matcher.ts: spec.match(/\/\//) !== null replaced with spec.match(/\/\//) === null
Mutant 20 in matcher.ts: {
  throw new Error('Path contains empty segments');
} replaced with {}
Mutant 21 in matcher.ts: 'Path contains empty segments' replaced with ""
Mutant 22 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with true
Mutant 23 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with false
Mutant 24 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null
Mutant 25 in matcher.ts: version === '1' || version === '1.0' replaced with true
Mutant 26 in matcher.ts: version === '1' || version === '1.0' replaced with false
Mutant 27 in matcher.ts: version === '1' || version === '1.0' replaced with version === '1' && version === '1.0'
Mutant 28 in matcher.ts: version === '1' replaced with false
Mutant 29 in matcher.ts: version === '1' replaced with version !== '1'
Mutant 30 in matcher.ts: '1' replaced with ""
Mutant 31 in matcher.ts: version === '1.0' replaced with false
Mutant 32 in matcher.ts: version === '1.0' replaced with version !== '1.0'
Mutant 33 in matcher.ts: '1.0' replaced with ""
Mutant 34 in matcher.ts: /[*+][^/]|[^/][*+]/ replaced with /[^*+][^/]|[^/][*+]/
Mutant 35 in matcher.ts: /[*+][^/]|[^/][*+]/ replaced with /[*+][/]|[^/][*+]/
Mutant 36 in matcher.ts: /[*+][^/]|[^/][*+]/ replaced with /[*+][^/]|[/][*+]/
Mutant 37 in matcher.ts: /[*+][^/]|[^/][*+]/ replaced with /[*+][^/]|[^/][^*+]/
Mutant 38 in matcher.ts: /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/ replaced with /\*[*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/
Mutant 39 in matcher.ts: /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/ replaced with /\*[^*/]|\+[+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/
Mutant 40 in matcher.ts: /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/ replaced with /\*[^*/]|\+[^+/]|[/*]\*|[^/+]\+|\*\*\*|\+\+\+/
Mutant 41 in matcher.ts: /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/ replaced with /\*[^*/]|\+[^+/]|[^/*]\*|[/+]\+|\*\*\*|\+\+\+/
Mutant 42 in matcher.ts: {
  throw new Error('Path contains malformed wildcards');
} replaced with {}
Mutant 43 in matcher.ts: 'Path contains malformed wildcards' replaced with ""
Mutant 44 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with true
Mutant 45 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with false
Mutant 46 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) === null
Mutant 47 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[/]:|:\/|:$/
Mutant 48 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:/
Mutant 49 in matcher.ts: {
  throw new Error('Path contains malformed captures');
} replaced with {}
Mutant 50 in matcher.ts: 'Path contains malformed captures' replaced with ""
Mutant 51 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with true
Mutant 52 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with false
Mutant 53 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 54 in matcher.ts: /^.+\/$/ replaced with /.+\/$/
Mutant 55 in matcher.ts: /^.+\/$/ replaced with /^.+\//
Mutant 56 in matcher.ts: /^.+\/$/ replaced with /^.\/$/
Mutant 57 in matcher.ts: {
  throw new Error('Path must not end with a slash');
} replaced with {}
Mutant 58 in matcher.ts: 'Path must not end with a slash' replaced with ""
Mutant 59 in matcher.ts: {
  if (string.length > 1 && string.endsWith('/')) {
    return null;
  }
  return super[Symbol.match](string);
} replaced with {}
Mutant 60 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with true
Mutant 61 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with false
Mutant 62 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 || string.endsWith('/')
Mutant 63 in matcher.ts: string.length > 1 replaced with true
Mutant 64 in matcher.ts: string.length > 1 replaced with string.length >= 1
Mutant 65 in matcher.ts: string.length > 1 replaced with string.length <= 1
Mutant 66 in matcher.ts: string.endsWith('/') replaced with string.startsWith('/')
Mutant 67 in matcher.ts: '/' replaced with ""
Mutant 68 in matcher.ts: {
  return null;
} replaced with {}
Mutant 69 in matcher.ts: '1.1' replaced with ""
Mutant 70 in matcher.ts: {
  return new Matcher(spec, version);
} replaced with {}
Mutant 71 in matcher.ts: {
  const parts: string[] = [];
  const props: string[] = [];
  let min = 0;
  let max = 0;
  let any = false;
  let opt = true;
  function flatten(final: boolean = false): void {
    if (max > 0 || any) {
      if (final && opt && min < 1) {
        min = 1;
      } else if (min > 0) {
        opt = false;
      }
      parts.push(any ? min < 2 ? min < 1 ? '(?:/[^/]+)*' : '(?:/[^/]+)+' : `(?:/[^/]+){${min},}` : max === 1 ? min === 1 ? '/[^/]+' : '(?:/[^/]+)?' : min === max ? `(?:/[^/]+){${min}}` : `(?:/[^/]+){${min},${max}}`);
    }
    min = 0;
    max = 0;
    any = false;
  }
  function finalise(): string {
    flatten(true);
    return (opt ? '^/$|^' : '^') + parts.reduce((acc, seg) => seg + acc, '$');
  }
  for (const part of spec.split('/').slice(1).reverse()) {
    switch (part) {
      case '+':
        min++;
        max++;
        break;
      case '++':
        max++;
        break;
      case '*':
        min++;
        any = true;
        break;
      case '**':
        any = true;
        break;
      default:
        flatten();
        opt = false;
        if (part.match(/:.+/) !== null) {
          props.push(part.slice(1));
          parts.push('/([^/]+)');
        } else {
          parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
        }
    }
  }
  return {
    regex: finalise(),
    props: props.reverse()
  };
} replaced with {}
Mutant 72 in matcher.ts: [] replaced with ["Stryker was here"]
Mutant 73 in matcher.ts: [] replaced with ["Stryker was here"]
Mutant 74 in matcher.ts: false replaced with true
Mutant 75 in matcher.ts: true replaced with false
Mutant 76 in matcher.ts: false replaced with true
Mutant 77 in matcher.ts: {
  if (max > 0 || any) {
    if (final && opt && min < 1) {
      min = 1;
    } else if (min > 0) {
      opt = false;
    }
    parts.push(any ? min < 2 ? min < 1 ? '(?:/[^/]+)*' : '(?:/[^/]+)+' : `(?:/[^/]+){${min},}` : max === 1 ? min === 1 ? '/[^/]+' : '(?:/[^/]+)?' : min === max ? `(?:/[^/]+){${min}}` : `(?:/[^/]+){${min},${max}}`);
  }
  min = 0;
  max = 0;
  any = false;
} replaced with {}
Mutant 78 in matcher.ts: max > 0 || any replaced with true
Mutant 79 in matcher.ts: max > 0 || any replaced with false
Mutant 80 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 81 in matcher.ts: max > 0 replaced with false
Mutant 82 in matcher.ts: max > 0 replaced with max >= 0
Mutant 83 in matcher.ts: max > 0 replaced with max <= 0
Mutant 84 in matcher.ts: {
  if (final && opt && min < 1) {
    min = 1;
  } else if (min > 0) {
    opt = false;
  }
  parts.push(any ? min < 2 ? min < 1 ? '(?:/[^/]+)*' : '(?:/[^/]+)+' : `(?:/[^/]+){${min},}` : max === 1 ? min === 1 ? '/[^/]+' : '(?:/[^/]+)?' : min === max ? `(?:/[^/]+){${min}}` : `(?:/[^/]+){${min},${max}}`);
} replaced with {}
Mutant 85 in matcher.ts: final && opt && min < 1 replaced with true
Mutant 86 in matcher.ts: final && opt && min < 1 replaced with false
Mutant 87 in matcher.ts: final && opt && min < 1 replaced with final && opt || min < 1
Mutant 88 in matcher.ts: final && opt replaced with true
Mutant 89 in matcher.ts: final && opt replaced with final || opt
Mutant 90 in matcher.ts: min < 1 replaced with true
Mutant 91 in matcher.ts: min < 1 replaced with min <= 1
Mutant 92 in matcher.ts: min < 1 replaced with min >= 1
Mutant 93 in matcher.ts: {
  min = 1;
} replaced with {}
Mutant 94 in matcher.ts: min > 0 replaced with true
Mutant 95 in matcher.ts: min > 0 replaced with false
Mutant 96 in matcher.ts: min > 0 replaced with min >= 0
Mutant 97 in matcher.ts: min > 0 replaced with min <= 0
Mutant 98 in matcher.ts: {
  opt = false;
} replaced with {}
Mutant 99 in matcher.ts: false replaced with true
Mutant 100 in matcher.ts: min < 2 replaced with true
Mutant 101 in matcher.ts: min < 2 replaced with false
Mutant 102 in matcher.ts: min < 2 replaced with min <= 2
Mutant 103 in matcher.ts: min < 2 replaced with min >= 2
Mutant 104 in matcher.ts: min < 1 replaced with true
Mutant 105 in matcher.ts: min < 1 replaced with false
Mutant 106 in matcher.ts: min < 1 replaced with min <= 1
Mutant 107 in matcher.ts: min < 1 replaced with min >= 1
Mutant 108 in matcher.ts: '(?:/[^/]+)*' replaced with ""
Mutant 109 in matcher.ts: '(?:/[^/]+)+' replaced with ""
Mutant 110 in matcher.ts: `(?:/[^/]+){${min},}` replaced with ``
Mutant 111 in matcher.ts: max === 1 replaced with true
Mutant 112 in matcher.ts: max === 1 replaced with false
Mutant 113 in matcher.ts: max === 1 replaced with max !== 1
Mutant 114 in matcher.ts: min === 1 replaced with true
Mutant 115 in matcher.ts: min === 1 replaced with false
Mutant 116 in matcher.ts: min === 1 replaced with min !== 1
Mutant 117 in matcher.ts: '/[^/]+' replaced with ""
Mutant 118 in matcher.ts: '(?:/[^/]+)?' replaced with ""
Mutant 119 in matcher.ts: min === max replaced with true
Mutant 120 in matcher.ts: min === max replaced with false
Mutant 121 in matcher.ts: min === max replaced with min !== max
Mutant 122 in matcher.ts: `(?:/[^/]+){${min}}` replaced with ``
Mutant 123 in matcher.ts: `(?:/[^/]+){${min},${max}}` replaced with ``
Mutant 124 in matcher.ts: false replaced with true
Mutant 125 in matcher.ts: {
  flatten(true);
  return (opt ? '^/$|^' : '^') + parts.reduce((acc, seg) => seg + acc, '$');
} replaced with {}
Mutant 126 in matcher.ts: true replaced with false
Mutant 127 in matcher.ts: (opt ? '^/$|^' : '^') + parts.reduce((acc, seg) => seg + acc, '$') replaced with (opt ? '^/$|^' : '^') - parts.reduce((acc, seg) => seg + acc, '$')
Mutant 128 in matcher.ts: '^/$|^' replaced with ""
Mutant 129 in matcher.ts: '^' replaced with ""
Mutant 130 in matcher.ts: (acc, seg) => seg + acc replaced with () => undefined
Mutant 131 in matcher.ts: seg + acc replaced with seg - acc
Mutant 132 in matcher.ts: '$' replaced with ""
Mutant 133 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1)
Mutant 134 in matcher.ts: spec.split('/').slice(1) replaced with spec.split('/')
not replacing spec.split('/').slice(1) with spec.split('/')
Mutant 135 in matcher.ts: '/' replaced with ""
Mutant 136 in matcher.ts: {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with {}
Mutant 137 in matcher.ts: case '+':
  min++;
  max++;
  break; replaced with case '+':
Mutant 138 in matcher.ts: '+' replaced with ""
Mutant 139 in matcher.ts: min++ replaced with min--
Mutant 140 in matcher.ts: max++ replaced with max--
Mutant 141 in matcher.ts: case '++':
  max++;
  break; replaced with case '++':
Mutant 142 in matcher.ts: '++' replaced with ""
Mutant 143 in matcher.ts: max++ replaced with max--
Mutant 144 in matcher.ts: case '*':
  min++;
  any = true;
  break; replaced with case '*':
Mutant 145 in matcher.ts: '*' replaced with ""
Mutant 146 in matcher.ts: min++ replaced with min--
Mutant 147 in matcher.ts: true replaced with false
Mutant 148 in matcher.ts: case '**':
  any = true;
  break; replaced with case '**':
Mutant 149 in matcher.ts: '**' replaced with ""
Mutant 150 in matcher.ts: true replaced with false
Mutant 151 in matcher.ts: default:
  flatten();
  opt = false;
  if (part.match(/:.+/) !== null) {
    props.push(part.slice(1));
    parts.push('/([^/]+)');
  } else {
    parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
  } replaced with default:
Mutant 152 in matcher.ts: false replaced with true
Mutant 153 in matcher.ts: part.match(/:.+/) !== null replaced with true
Mutant 154 in matcher.ts: part.match(/:.+/) !== null replaced with false
Mutant 155 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 156 in matcher.ts: /:.+/ replaced with /:./
Mutant 157 in matcher.ts: {
  props.push(part.slice(1));
  parts.push('/([^/]+)');
} replaced with {}
Mutant 158 in matcher.ts: part.slice(1) replaced with part
Mutant 159 in matcher.ts: '/([^/]+)' replaced with ""
Mutant 160 in matcher.ts: {
  parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
} replaced with {}
Mutant 161 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with ``
Mutant 162 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 163 in matcher.ts: '\\$1' replaced with ""
Mutant 164 in matcher.ts: {
  regex: finalise(),
  props: props.reverse()
} replaced with {}
Mutant 165 in matcher.ts: props.reverse() replaced with props
Mutant 166 in policy.ts: {
  this.name = name;
  this.rules = rules;
} replaced with {}
Mutant 167 in policy.ts: {
  this.rules.push(...rules);
  return this;
} replaced with {}
Mutant 168 in policy.ts: {
  let allow = null;
  for (const rule of this.rules) {
    const res = rule.query(path, verb, ctx);
    if (res === false) {
      return false;
    }
    if (res === true) {
      allow = true;
    }
  }
  return allow;
} replaced with {}
Mutant 169 in policy.ts: {
  const res = rule.query(path, verb, ctx);
  if (res === false) {
    return false;
  }
  if (res === true) {
    allow = true;
  }
} replaced with {}
Mutant 170 in policy.ts: res === false replaced with true
Mutant 171 in policy.ts: res === false replaced with false
Mutant 172 in policy.ts: res === false replaced with res !== false
Mutant 173 in policy.ts: false replaced with true
Mutant 174 in policy.ts: {
  return false;
} replaced with {}
Mutant 175 in policy.ts: false replaced with true
Mutant 176 in policy.ts: res === true replaced with true
Mutant 177 in policy.ts: res === true replaced with false
Mutant 178 in policy.ts: res === true replaced with res !== true
Mutant 179 in policy.ts: true replaced with false
Mutant 180 in policy.ts: {
  allow = true;
} replaced with {}
Mutant 181 in policy.ts: true replaced with false
Mutant 182 in policy.ts: {
  for (const rule of this.rules) {
    if (rule.matches(path, ctx)) {
      return true;
    }
  }
  return false;
} replaced with {}
Mutant 183 in policy.ts: {
  if (rule.matches(path, ctx)) {
    return true;
  }
} replaced with {}
Mutant 184 in policy.ts: rule.matches(path, ctx) replaced with true
Mutant 185 in policy.ts: rule.matches(path, ctx) replaced with false
Mutant 186 in policy.ts: {
  return true;
} replaced with {}
Mutant 187 in policy.ts: true replaced with false
Mutant 188 in policy.ts: false replaced with true
Mutant 189 in policy.ts: true replaced with false
Mutant 190 in policy.ts: {
  return deep ? new Policy(name, ...this.rules.map(rule => rule.clone())) : new Policy(name, ...this.rules);
} replaced with {}
Mutant 191 in policy.ts: rule => rule.clone() replaced with () => undefined
Mutant 192 in policy.ts: {
  return new Policy(name, ...rules);
} replaced with {}
Mutant 193 in policymap.ts: {
  super(policies.map(policy => [policy.name, policy]));
} replaced with {}
Mutant 194 in policymap.ts: policy => [policy.name, policy] replaced with () => undefined
Mutant 195 in policymap.ts: [policy.name, policy] replaced with []
Mutant 196 in policymap.ts: {
  for (const policy of policies) {
    this.set(policy.name, policy);
  }
  return this;
} replaced with {}
Mutant 197 in policymap.ts: {
  this.set(policy.name, policy);
} replaced with {}
Mutant 198 in policymap.ts: {
  const policy = this.get(name);
  return policy !== undefined ? policy.query(path, verb, ctx) : null;
} replaced with {}
Mutant 199 in policymap.ts: policy !== undefined replaced with true
Mutant 200 in policymap.ts: policy !== undefined replaced with false
Mutant 201 in policymap.ts: policy !== undefined replaced with policy === undefined
Mutant 202 in policymap.ts: {
  const policy = this.get(name);
  return policy !== undefined ? policy.matches(path, ctx) : false;
} replaced with {}
Mutant 203 in policymap.ts: policy !== undefined replaced with true
Mutant 204 in policymap.ts: policy !== undefined replaced with false
Mutant 205 in policymap.ts: policy !== undefined replaced with policy === undefined
Mutant 206 in policymap.ts: false replaced with true
Mutant 207 in policymap.ts: {
  return new PolicyMap(...policies);
} replaced with {}
Mutant 208 in rule.ts: {
  this.regex = spec instanceof Matcher ? spec : new Matcher(spec);
} replaced with {}
Mutant 209 in rule.ts: {
  for (const verb of verbs) {
    if (!(verb in this.verbs)) {
      this.verbs[verb] = true;
    }
  }
  return this;
} replaced with {}
Mutant 210 in rule.ts: {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with {}
Mutant 211 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 212 in rule.ts: !(verb in this.verbs) replaced with true
Mutant 213 in rule.ts: !(verb in this.verbs) replaced with false
Mutant 214 in rule.ts: {
  this.verbs[verb] = true;
} replaced with {}
Mutant 215 in rule.ts: true replaced with false
Mutant 216 in rule.ts: {
  for (const verb of verbs) {
    this.verbs[verb] = false;
  }
  return this;
} replaced with {}
Mutant 217 in rule.ts: {
  this.verbs[verb] = false;
} replaced with {}
Mutant 218 in rule.ts: false replaced with true
Mutant 219 in rule.ts: {
  if (this.matches(path, ctx) && verb in this.verbs) {
    return this.verbs[verb];
  }
  return null;
} replaced with {}
Mutant 220 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with true
Mutant 221 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with false
Mutant 222 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 223 in rule.ts: {
  return this.verbs[verb];
} replaced with {}
Mutant 224 in rule.ts: {
  const match = path.match(this.regex);
  if (match === null) {
    return false;
  }
  const count = this.regex.props.length;
  if (count > 0) {
    if (ctx === undefined) {
      return false;
    }
    for (let index = 0; index < count; index++) {
      const prop = ctx[this.regex.props[index]];
      if (prop === undefined || match[index + 1] !== prop) {
        return false;
      }
    }
  }
  return true;
} replaced with {}
Mutant 225 in rule.ts: match === null replaced with true
Mutant 226 in rule.ts: match === null replaced with false
Mutant 227 in rule.ts: match === null replaced with match !== null
Mutant 228 in rule.ts: {
  return false;
} replaced with {}
Mutant 229 in rule.ts: false replaced with true
Mutant 230 in rule.ts: count > 0 replaced with true
Mutant 231 in rule.ts: count > 0 replaced with false
Mutant 232 in rule.ts: count > 0 replaced with count >= 0
Mutant 233 in rule.ts: count > 0 replaced with count <= 0
Mutant 234 in rule.ts: {
  if (ctx === undefined) {
    return false;
  }
  for (let index = 0; index < count; index++) {
    const prop = ctx[this.regex.props[index]];
    if (prop === undefined || match[index + 1] !== prop) {
      return false;
    }
  }
} replaced with {}
Mutant 235 in rule.ts: ctx === undefined replaced with true
Mutant 236 in rule.ts: ctx === undefined replaced with false
Mutant 237 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 238 in rule.ts: {
  return false;
} replaced with {}
Mutant 239 in rule.ts: false replaced with true
Mutant 240 in rule.ts: index < count replaced with false
Mutant 241 in rule.ts: index < count replaced with index <= count
Mutant 242 in rule.ts: index < count replaced with index >= count
Mutant 243 in rule.ts: index++ replaced with index--
Mutant 244 in rule.ts: {
  const prop = ctx[this.regex.props[index]];
  if (prop === undefined || match[index + 1] !== prop) {
    return false;
  }
} replaced with {}
Mutant 245 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with true
Mutant 246 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with false
Mutant 247 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined && match[index + 1] !== prop
Mutant 248 in rule.ts: prop === undefined replaced with false
Mutant 249 in rule.ts: prop === undefined replaced with prop !== undefined
Mutant 250 in rule.ts: match[index + 1] !== prop replaced with false
Mutant 251 in rule.ts: match[index + 1] !== prop replaced with match[index + 1] === prop
Mutant 252 in rule.ts: index + 1 replaced with index - 1
Mutant 253 in rule.ts: {
  return false;
} replaced with {}
Mutant 254 in rule.ts: false replaced with true
Mutant 255 in rule.ts: true replaced with false
Mutant 256 in rule.ts: {
  const rule = new Rule(spec);
  for (const verb in this.verbs) {
    rule.verbs[verb] = this.verbs[verb];
  }
  return rule;
} replaced with {}
Mutant 257 in rule.ts: {
  rule.verbs[verb] = this.verbs[verb];
} replaced with {}
Mutant 258 in rule.ts: {
  return new Rule(spec);
} replaced with {}
[32m13:06:20 (2108) INFO Instrumenter[39m Instrumented 6 source file(s) with 259 mutant(s)
[32m13:06:20 (2108) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m13:06:21 (2108) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m13:06:21 (2108) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m13:06:25 (2108) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4026 ms, overhead 1 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~14m) 3/259 tested (1 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~14m) 6/259 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~13m) 9/259 tested (1 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~13m) 12/259 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~13m) 15/259 tested (2 survived, 0 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~13m) 18/259 tested (3 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~13m) 21/259 tested (3 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~13m) 24/259 tested (4 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~12m) 28/259 tested (4 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~12m) 31/259 tested (4 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~12m) 34/259 tested (4 survived, 0 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~12m) 37/259 tested (7 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~11m) 41/259 tested (8 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~11m) 44/259 tested (9 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~11m) 47/259 tested (9 survived, 0 timed out)
Mutation testing 19% (elapsed: ~2m, remaining: ~11m) 50/259 tested (9 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~11m) 53/259 tested (10 survived, 0 timed out)
Mutation testing 21% (elapsed: ~3m, remaining: ~10m) 56/259 tested (11 survived, 0 timed out)
Mutation testing 22% (elapsed: ~3m, remaining: ~10m) 59/259 tested (12 survived, 0 timed out)
Mutation testing 24% (elapsed: ~3m, remaining: ~10m) 63/259 tested (13 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~10m) 66/259 tested (13 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~10m) 69/259 tested (14 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~9m) 72/259 tested (15 survived, 0 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~9m) 75/259 tested (15 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~9m) 79/259 tested (15 survived, 0 timed out)
Mutation testing 31% (elapsed: ~4m, remaining: ~9m) 82/259 tested (15 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~9m) 85/259 tested (15 survived, 0 timed out)
Mutation testing 33% (elapsed: ~4m, remaining: ~9m) 88/259 tested (15 survived, 0 timed out)
Mutation testing 35% (elapsed: ~4m, remaining: ~8m) 92/259 tested (15 survived, 0 timed out)
Mutation testing 36% (elapsed: ~5m, remaining: ~8m) 95/259 tested (16 survived, 0 timed out)
Mutation testing 37% (elapsed: ~5m, remaining: ~8m) 98/259 tested (17 survived, 0 timed out)
Mutation testing 39% (elapsed: ~5m, remaining: ~8m) 102/259 tested (17 survived, 0 timed out)
Mutation testing 40% (elapsed: ~5m, remaining: ~8m) 105/259 tested (17 survived, 0 timed out)
Mutation testing 41% (elapsed: ~5m, remaining: ~7m) 108/259 tested (17 survived, 0 timed out)
Mutation testing 42% (elapsed: ~5m, remaining: ~7m) 111/259 tested (17 survived, 0 timed out)
Mutation testing 44% (elapsed: ~6m, remaining: ~7m) 115/259 tested (17 survived, 0 timed out)
Mutation testing 45% (elapsed: ~6m, remaining: ~7m) 118/259 tested (17 survived, 0 timed out)
Mutation testing 46% (elapsed: ~6m, remaining: ~7m) 121/259 tested (17 survived, 0 timed out)
Mutation testing 47% (elapsed: ~6m, remaining: ~7m) 124/259 tested (17 survived, 0 timed out)
Mutation testing 49% (elapsed: ~6m, remaining: ~6m) 128/259 tested (17 survived, 0 timed out)
Mutation testing 50% (elapsed: ~6m, remaining: ~6m) 131/259 tested (17 survived, 0 timed out)
Mutation testing 51% (elapsed: ~7m, remaining: ~6m) 134/259 tested (17 survived, 0 timed out)
Mutation testing 52% (elapsed: ~7m, remaining: ~6m) 137/259 tested (17 survived, 0 timed out)
Mutation testing 54% (elapsed: ~7m, remaining: ~6m) 140/259 tested (17 survived, 0 timed out)
Mutation testing 55% (elapsed: ~7m, remaining: ~5m) 144/259 tested (17 survived, 0 timed out)
Mutation testing 56% (elapsed: ~7m, remaining: ~5m) 147/259 tested (17 survived, 0 timed out)
Mutation testing 57% (elapsed: ~7m, remaining: ~5m) 150/259 tested (17 survived, 0 timed out)
Mutation testing 59% (elapsed: ~8m, remaining: ~5m) 153/259 tested (17 survived, 0 timed out)
Mutation testing 60% (elapsed: ~8m, remaining: ~5m) 156/259 tested (17 survived, 0 timed out)
Mutation testing 61% (elapsed: ~8m, remaining: ~5m) 160/259 tested (18 survived, 0 timed out)
Mutation testing 62% (elapsed: ~8m, remaining: ~5m) 163/259 tested (18 survived, 0 timed out)
Mutation testing 64% (elapsed: ~8m, remaining: ~4m) 166/259 tested (18 survived, 0 timed out)
Mutation testing 65% (elapsed: ~8m, remaining: ~4m) 169/259 tested (18 survived, 0 timed out)
Mutation testing 66% (elapsed: ~9m, remaining: ~4m) 172/259 tested (18 survived, 0 timed out)
Mutation testing 67% (elapsed: ~9m, remaining: ~4m) 176/259 tested (18 survived, 0 timed out)
Mutation testing 69% (elapsed: ~9m, remaining: ~4m) 179/259 tested (18 survived, 0 timed out)
Mutation testing 70% (elapsed: ~9m, remaining: ~4m) 182/259 tested (18 survived, 0 timed out)
Mutation testing 71% (elapsed: ~9m, remaining: ~3m) 186/259 tested (18 survived, 0 timed out)
Mutation testing 72% (elapsed: ~9m, remaining: ~3m) 189/259 tested (18 survived, 0 timed out)
Mutation testing 74% (elapsed: ~10m, remaining: ~3m) 192/259 tested (19 survived, 0 timed out)
Mutation testing 75% (elapsed: ~10m, remaining: ~3m) 195/259 tested (19 survived, 0 timed out)
Mutation testing 76% (elapsed: ~10m, remaining: ~3m) 199/259 tested (19 survived, 0 timed out)
Mutation testing 77% (elapsed: ~10m, remaining: ~2m) 202/259 tested (19 survived, 0 timed out)
Mutation testing 79% (elapsed: ~10m, remaining: ~2m) 205/259 tested (19 survived, 0 timed out)
Mutation testing 80% (elapsed: ~10m, remaining: ~2m) 209/259 tested (19 survived, 0 timed out)
Mutation testing 81% (elapsed: ~11m, remaining: ~2m) 212/259 tested (19 survived, 0 timed out)
Mutation testing 83% (elapsed: ~11m, remaining: ~2m) 215/259 tested (19 survived, 0 timed out)
Mutation testing 84% (elapsed: ~11m, remaining: ~2m) 218/259 tested (19 survived, 0 timed out)
Mutation testing 85% (elapsed: ~11m, remaining: ~1m) 222/259 tested (19 survived, 0 timed out)
Mutation testing 86% (elapsed: ~11m, remaining: ~1m) 225/259 tested (19 survived, 0 timed out)
Mutation testing 88% (elapsed: ~11m, remaining: ~1m) 228/259 tested (19 survived, 0 timed out)
Mutation testing 89% (elapsed: ~12m, remaining: ~1m) 231/259 tested (19 survived, 0 timed out)
Mutation testing 90% (elapsed: ~12m, remaining: ~1m) 234/259 tested (19 survived, 0 timed out)
Mutation testing 91% (elapsed: ~12m, remaining: ~1m) 238/259 tested (19 survived, 0 timed out)
Mutation testing 93% (elapsed: ~12m, remaining: <1m) 241/259 tested (19 survived, 0 timed out)
Mutation testing 94% (elapsed: ~12m, remaining: <1m) 244/259 tested (19 survived, 0 timed out)
Mutation testing 95% (elapsed: ~12m, remaining: <1m) 247/259 tested (19 survived, 0 timed out)
Mutation testing 96% (elapsed: ~13m, remaining: <1m) 250/259 tested (20 survived, 0 timed out)
Mutation testing 97% (elapsed: ~13m, remaining: <1m) 253/259 tested (20 survived, 0 timed out)
Mutation testing 99% (elapsed: ~13m, remaining: <1m) 257/259 tested (20 survived, 0 timed out)

All tests
  ✓ All tests (killed 239)

[Survived] StringLiteral
src/matcher.ts:11:61
-     constructor (spec: string, version: '1' | '1.0' | '1.1' = '1.1') {
+     constructor (spec: string, version: '1' | '1.0' | '1.1' = "") {

[Survived] StringLiteral
src/matcher.ts:13:23
-         throw new Error('Path contains invalid characters')
+         throw new Error("")

[Survived] StringLiteral
src/matcher.ts:16:23
-         throw new Error('Path must begin with a slash')
+         throw new Error("")

[Survived] StringLiteral
src/matcher.ts:19:23
-         throw new Error('Path contains empty segments')
+         throw new Error("")

[Survived] Regex
src/matcher.ts:22:9
-         ? /[*+][^/]|[^/][*+]/
+         ? /[^*+][^/]|[^/][*+]/

[Survived] Regex
src/matcher.ts:22:9
-         ? /[*+][^/]|[^/][*+]/
+         ? /[*+][/]|[^/][*+]/

[Survived] Regex
src/matcher.ts:22:9
-         ? /[*+][^/]|[^/][*+]/
+         ? /[*+][^/]|[/][*+]/

[Survived] Regex
src/matcher.ts:22:9
-         ? /[*+][^/]|[^/][*+]/
+         ? /[*+][^/]|[^/][^*+]/

[Survived] StringLiteral
src/matcher.ts:24:23
-         throw new Error('Path contains malformed wildcards')
+         throw new Error("")

[Survived] StringLiteral
src/matcher.ts:27:23
-         throw new Error('Path contains malformed captures')
+         throw new Error("")

[Survived] Regex
src/matcher.ts:29:20
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/.+\/$/) !== null) {

[Survived] StringLiteral
src/matcher.ts:30:23
-         throw new Error('Path must not end with a slash')
+         throw new Error("")

[Survived] ConditionalExpression
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (false) {

[Survived] BlockStatement
src/matcher.ts:39:52
-       if (string.length > 1 && string.endsWith('/')) {
-         return null
-       }
+       if (string.length > 1 && string.endsWith('/')) {}

[Survived] StringLiteral
src/matcher.ts:48:60
-     static for (spec: string, version: '1' | '1.0' | '1.1' = '1.1'): Matcher {
+     static for (spec: string, version: '1' | '1.0' | '1.1' = ""): Matcher {

[Survived] ConditionalExpression
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (true) {

[Survived] EqualityOperator
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (min >= 0) {

[Survived] Regex
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:./) !== null) {

[Survived] BooleanLiteral
src/policy.ts:59:52
-     clone (name: string = this.name, deep: boolean = true): Policy {
+     clone (name: string = this.name, deep: boolean = false): Policy {

[Survived] ConditionalExpression
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (false || match[index + 1] !== prop) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   92.28 |      239 |         0 |         20 |        0 |        0 |
 matcher.ts   |   89.16 |      148 |         0 |         18 |        0 |        0 |
 policy.ts    |   96.30 |       26 |         0 |          1 |        0 |        0 |
 policymap.ts |  100.00 |       15 |         0 |          0 |        0 |        0 |
 rule.ts      |   98.04 |       50 |         0 |          1 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m13:19:51 (2108) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m13:19:51 (2108) INFO MutationTestExecutor[39m Done in 13 minutes 32 seconds.

real	13m33.547s
user	18m54.975s
sys	1m25.315s
