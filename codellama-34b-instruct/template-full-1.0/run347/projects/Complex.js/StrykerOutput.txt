*** using precomputed mutations ***
[32m12:54:05 (2817) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m12:54:05 (2817) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m12:54:05 (2817) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m12:54:06 (2817) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m12:54:06 (2817) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m12:54:06 (2817) INFO ProjectReader[39m Found 1 of 1982 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 1018 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in complex.js: Math.abs replaced with a + b * 0
Mutant 1 in complex.js: Math.abs replaced with a - b * 0
Mutant 2 in complex.js: Math.abs replaced with a + b * 1
Mutant 3 in complex.js: x replaced with cos(x)
Mutant 4 in complex.js: x replaced with abs(x) < 1e-8 ? 1 : x
Mutant 5 in complex.js: x replaced with sin(x)
Mutant 6 in complex.js: Math.exp replaced with Math.sin
Mutant 7 in complex.js: Math.exp replaced with Math.tan
Mutant 8 in complex.js: Math.exp replaced with Math.log
Mutant 9 in complex.js: x replaced with 0
Mutant 10 in complex.js: x replaced with cosh(x) + 1
Mutant 11 in complex.js: x replaced with Complex.ONE.negate()
Mutant 12 in complex.js: Math.exp replaced with Math.log
Mutant 13 in complex.js: Math.exp replaced with Math.log10
Mutant 14 in complex.js: Math.exp replaced with Math.log2
Mutant 15 in complex.js: -x replaced with -Math.exp(x)
Mutant 16 in complex.js: -x replaced with Math.exp(x) - 1
Mutant 17 in complex.js: x replaced with 1 / (x - 1)
Mutant 18 in complex.js: x replaced with 1 / (x + 1)
Mutant 19 in complex.js: Math.exp replaced with Math.log
Mutant 20 in complex.js: Math.exp replaced with Math.abs
Mutant 21 in complex.js: Math.exp replaced with Math.tanh
Mutant 22 in complex.js: x replaced with x + 1
Mutant 23 in complex.js: x replaced with x - 1
Mutant 24 in complex.js: x replaced with -x
Mutant 25 in complex.js: Math.exp replaced with Math.pow
Mutant 26 in complex.js: Math.exp replaced with 1
Mutant 27 in complex.js: -x replaced with Math.abs(x)
Mutant 28 in complex.js: -x replaced with x + 1
Mutant 29 in complex.js: -x replaced with x * 2
Mutant 30 in complex.js: x replaced with x + 1
Mutant 31 in complex.js: x replaced with x * 2
Mutant 32 in complex.js: x replaced with x - 1
Mutant 33 in complex.js: Math.abs replaced with x * y
Mutant 34 in complex.js: x replaced with x + y
Mutant 35 in complex.js: x replaced with x * y
Mutant 36 in complex.js: x replaced with x / y
Mutant 37 in complex.js: Math.abs replaced with Math.floor
Mutant 38 in complex.js: Math.abs replaced with Math.ceil
Mutant 39 in complex.js: Math.abs replaced with Math.round
Mutant 40 in complex.js: y replaced with y + 4
Mutant 41 in complex.js: y replaced with -y
Mutant 42 in complex.js: y replaced with y * 2
Mutant 43 in complex.js: a < 3000 && b < 3000 replaced with a < 3001 || b < 3001
Mutant 44 in complex.js: Math.sqrt replaced with a * a + b * b
Mutant 45 in complex.js: a * a + b * b replaced with a * b + a * b
Mutant 46 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 47 in complex.js: a * a + b * b replaced with (a + b) * (a + b)
Mutant 48 in complex.js: a < b replaced with a === b
Mutant 49 in complex.js: a < b replaced with a && b
Mutant 50 in complex.js: Math.sqrt replaced with Math.exp
Mutant 51 in complex.js: Math.sqrt replaced with Math.abs
Mutant 52 in complex.js: Math.sqrt replaced with Math.log
Mutant 53 in complex.js: 1 + b * b replaced with b * b - 1
Mutant 54 in complex.js: 1 + b * b replaced with 1 - b * b
Mutant 55 in complex.js: 1 + b * b replaced with b * b + 1
Mutant 56 in complex.js: SyntaxError replaced with TypeError
Mutant 57 in complex.js: SyntaxError replaced with 0
Mutant 58 in complex.js: SyntaxError replaced with null
Mutant 59 in complex.js: Math.abs replaced with Math.min
Mutant 60 in complex.js: Math.abs replaced with Math.sqrt
Mutant 61 in complex.js: Math.abs replaced with Math.random
Mutant 62 in complex.js: a replaced with b
Mutant 63 in complex.js: a replaced with a + b
Mutant 64 in complex.js: a replaced with a * b
Mutant 65 in complex.js: Math.abs replaced with Math.round
Mutant 66 in complex.js: Math.abs replaced with Math.ceil
Mutant 67 in complex.js: Math.abs replaced with Math.floor
Mutant 68 in complex.js: b replaced with _b = 0
Mutant 69 in complex.js: b replaced with a + b
Mutant 70 in complex.js: b replaced with Math.sqrt(a * a + b * b)
Mutant 71 in complex.js: a === 0 replaced with a > 0
Mutant 72 in complex.js: a === 0 replaced with a !== 0
Mutant 73 in complex.js: a === 0 replaced with a !== a
Mutant 74 in complex.js: Math.log replaced with 0
Mutant 75 in complex.js: Math.log replaced with Math.sqrt
Mutant 76 in complex.js: Math.log replaced with Number.MAX_VALUE
Mutant 77 in complex.js: _b replaced with 1 * b
Mutant 78 in complex.js: _b replaced with b + 1
Mutant 79 in complex.js: _b replaced with Math.abs(b)
Mutant 80 in complex.js: b === 0 replaced with b != 0
Mutant 81 in complex.js: b === 0 replaced with !b
Mutant 82 in complex.js: Math.log replaced with 0.0
Mutant 83 in complex.js: Math.log replaced with 1.0
Mutant 84 in complex.js: Math.log replaced with NaN
Mutant 85 in complex.js: _a replaced with a
Mutant 86 in complex.js: _a replaced with b
Mutant 87 in complex.js: _a replaced with _b
Mutant 88 in complex.js: _a < 3000 && _b < 3000 replaced with _a < 3000 && _b > 3000
Mutant 89 in complex.js: _a < 3000 && _b < 3000 replaced with _a + _b < 3000
Mutant 90 in complex.js: _a < 3000 && _b < 3000 replaced with _a > 3000 || _b < 3000
Mutant 91 in complex.js: Math.log replaced with Math.sqrt
Mutant 92 in complex.js: Math.log replaced with Math.abs
Mutant 93 in complex.js: Math.log replaced with Math.pow
Mutant 94 in complex.js: a * a + b * b replaced with a - b
Mutant 95 in complex.js: a * a + b * b replaced with a + b + 1
Mutant 96 in complex.js: a * a + b * b replaced with b * b
Mutant 97 in complex.js: Math.log replaced with Math.sqrt
Mutant 98 in complex.js: Math.log replaced with 1 / Math.log
Mutant 99 in complex.js: Math.log replaced with Math.log10
Mutant 100 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 101 in complex.js: a * a + b * b replaced with (a + b) * (a + b)
Mutant 102 in complex.js: a * a + b * b replaced with Math.abs(a * a + b * b)
Mutant 103 in complex.js: a === undefined || a === null replaced with a != undefined && a != null
Mutant 104 in complex.js: a === undefined || a === null replaced with a === NaN
Mutant 105 in complex.js: a === undefined || a === null replaced with a.length === 0
Mutant 106 in complex.js: b !== undefined replaced with b !== null
Mutant 107 in complex.js: b !== undefined replaced with !Boolean(b)
Mutant 108 in complex.js: b !== undefined replaced with isNaN(b)
Mutant 109 in complex.js: typeof a replaced with a + b
Mutant 110 in complex.js: typeof a replaced with !a
Mutant 111 in complex.js: typeof a replaced with a - b
Mutant 112 in complex.js: 'im' in a && 're' in a replaced with a['re'] && a['im']
Mutant 113 in complex.js: 'im' in a && 're' in a replaced with a['re'] || a['im']
Mutant 114 in complex.js: 'im' in a && 're' in a replaced with typeof a['re'] === 'number' && typeof a['im'] === 'number'
Mutant 115 in complex.js: 'abs' in a && 'arg' in a replaced with 'abs' in a || 'arg' in a
Mutant 116 in complex.js: 'abs' in a && 'arg' in a replaced with !'abs' in a || 'arg' in a
Mutant 117 in complex.js: 'abs' in a && 'arg' in a replaced with 'abs' in a ^ 'arg' in a
Mutant 118 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with `Number.isFinite (a ['arg']) && Number.isFinite (a ['abs'])`
Mutant 119 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with `!(a ['arg'] == Infinity && a ['abs'] == Infinity)`
Mutant 120 in complex.js: a['abs'] replaced with a['arg']
Mutant 121 in complex.js: a['abs'] replaced with a['re']
Mutant 122 in complex.js: a['abs'] replaced with 0
Mutant 123 in complex.js: Number.isFinite replaced with Number.isNaN
Mutant 124 in complex.js: Number.isFinite replaced with -a.im
Mutant 125 in complex.js: a['arg'] replaced with a - b
Mutant 126 in complex.js: Math.cos replaced with 1 / Math.cos
Mutant 127 in complex.js: Math.cos replaced with Math.sin
Mutant 128 in complex.js: Math.cos replaced with Math.tan
Mutant 129 in complex.js: a['arg'] replaced with a.arg
Mutant 130 in complex.js: a['arg'] replaced with a != null ? a.arg : 0
Mutant 131 in complex.js: Math.sin replaced with Math.sinh
Mutant 132 in complex.js: Math.sin replaced with Math.tan
Mutant 133 in complex.js: Math.sin replaced with Math.sqrt
Mutant 134 in complex.js: a['arg'] replaced with a['arg'] + Math.PI
Mutant 135 in complex.js: a['arg'] replaced with a['arg'] * Math.sin(b)
Mutant 136 in complex.js: a['arg'] replaced with a['arg'] - Math.cos(b)
Mutant 137 in complex.js: 'r' in a && 'phi' in a replaced with 'r' in a && 'arg' in a
Mutant 138 in complex.js: 'r' in a && 'phi' in a replaced with 'r' in a && 're' in a
Mutant 139 in complex.js: 'r' in a && 'phi' in a replaced with 'phi' in b && 'arg' in b
Mutant 140 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with isFinite(a['r']) && !isFinite(a['phi'])
Mutant 141 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with !Number.isFinite(a['r']) || Number.isFinite(a['phi'])
Mutant 142 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with Number.isFinite(a['r']) && Number.isFinite(a['phi'])
Mutant 143 in complex.js: a['r'] replaced with a['r'] + 1
Mutant 144 in complex.js: a['r'] replaced with a + 1
Mutant 145 in complex.js: Number.isFinite replaced with 2 + Number.isFinite
Mutant 146 in complex.js: a['phi'] replaced with a[Math.tan(b)]
Mutant 147 in complex.js: a['phi'] replaced with a[b()]
Mutant 148 in complex.js: Math.cos replaced with a + b
Mutant 149 in complex.js: Math.cos replaced with 2 * a
Mutant 150 in complex.js: Math.cos replaced with a ^ 2
Mutant 151 in complex.js: a['phi'] replaced with a
Mutant 152 in complex.js: a['phi'] replaced with b
Mutant 153 in complex.js: a['phi'] replaced with c
Mutant 154 in complex.js: a['phi'] replaced with Math.random()
Mutant 155 in complex.js: a['phi'] replaced with a['otherProperty']
Mutant 156 in complex.js: a['phi'] replaced with a.property
Mutant 157 in complex.js: a.length === 2 replaced with a.length < 2
Mutant 158 in complex.js: a.length === 2 replaced with a.length > 2
Mutant 159 in complex.js: a.length === 2 replaced with a.length === 1
Mutant 160 in complex.js: a.match replaced with a.split
Mutant 161 in complex.js: a.match replaced with a.indexOf
Mutant 162 in complex.js: a.match replaced with a.lastIndexOf
Mutant 163 in complex.js: tokens === null replaced with tokens <= null
Mutant 164 in complex.js: tokens === null replaced with !tokens
Mutant 165 in complex.js: for (var i = 0; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}

// Still something on the stack replaced with for (var i = 1; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}
Mutant 166 in complex.js: for (var i = 0; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}

// Still something on the stack replaced with for (var i = -1; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}
Mutant 167 in complex.js: for (var i = 0; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}

// Still something on the stack replaced with for (var i = tokens.length - 1; i < tokens.length; i++) {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
}
Mutant 168 in complex.js: i < tokens.length replaced with i <= tokens.length
Mutant 169 in complex.js: i < tokens.length replaced with i == tokens.length
Mutant 170 in complex.js: i < tokens.length replaced with !(i == tokens.length - 1)
Mutant 171 in complex.js: c === '+' replaced with c !== '+'
Mutant 172 in complex.js: c === '+' replaced with c !== ' ' - '+'
Mutant 173 in complex.js: c === '+' replaced with c !== ' *'
Mutant 174 in complex.js: c === '-' replaced with c !== '-'
Mutant 175 in complex.js: c === '-' replaced with c !== ' '
Mutant 176 in complex.js: c === '-' replaced with c === 'z'
Mutant 177 in complex.js: c === 'i' || c === 'I' replaced with c === 'j' || c === 'J'
Mutant 178 in complex.js: c === 'i' || c === 'I' replaced with c === ('i' != 'j')
Mutant 179 in complex.js: c === 'i' || c === 'I' replaced with c !== 'i' && c !== 'I'
Mutant 180 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) && tokens[i + 1] !== null
Mutant 181 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) && tokens[i + 1].length === 1
Mutant 182 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) && tokens[i + 1].trim() !== ''
Mutant 183 in complex.js: isNaN replaced with isForInfinity
Mutant 184 in complex.js: isNaN replaced with Math.isNan
Mutant 185 in complex.js: isNaN replaced with !Number.isNaN
Mutant 186 in complex.js: parseFloat replaced with Infinity
Mutant 187 in complex.js: parseFloat replaced with NaN
Mutant 188 in complex.js: parseFloat replaced with 0
Mutant 189 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 3 ? '-' : '') + tokens[i + 1]
Mutant 190 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 2 ? '-' : '') + tokens[i - 1]
Mutant 191 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 2 ? '+' : '') + tokens[i + 1]
Mutant 192 in complex.js: parseFloat replaced with parseInt
Mutant 193 in complex.js: parseFloat replaced with NaN
Mutant 194 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with (minus % 2 ? '' : '-') + '1'
Mutant 195 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with minus % 2 ? '1' : '-1'
Mutant 196 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with (minus % 2 ? '-' : '') + 1
Mutant 197 in complex.js: plus + minus === 0 || isNaN(c) replaced with plus + minus == 1 || isNaN(c)
Mutant 198 in complex.js: plus + minus === 0 || isNaN(c) replaced with plus + minus + 1 == 0 || isNaN(c)
Mutant 199 in complex.js: plus + minus === 0 || isNaN(c) replaced with plus + minus + 1 == 0 || c == 0
Mutant 200 in complex.js: isNaN replaced with !isNaN
Mutant 201 in complex.js: isNaN replaced with a === a
Mutant 202 in complex.js: isNaN replaced with z['im'] < -1
Mutant 203 in complex.js: tokens[i + 1] === 'i' || tokens[i + 1] === 'I' replaced with tokens[i + 1] !== 'i' && tokens[i + 1] !== 'I'
Mutant 204 in complex.js: tokens[i + 1] === 'i' || tokens[i + 1] === 'I' replaced with tokens[i + 1] === 'j' || tokens[i + 1] === 'J'
Mutant 205 in complex.js: tokens[i + 1] === 'i' || tokens[i + 1] === 'I' replaced with false
Mutant 206 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 1 ? '-' : '') + c
Mutant 207 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 2 ? '+' : '') + c
Mutant 208 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 2 ? '-' : '') + b
Mutant 209 in complex.js: parseFloat replaced with null
Mutant 210 in complex.js: parseFloat replaced with "foo"
Mutant 211 in complex.js: (minus % 2 ? '-' : '') + c replaced with "t"
Mutant 212 in complex.js: (minus % 2 ? '-' : '') + c replaced with Math.random()
Mutant 213 in complex.js: (minus % 2 ? '-' : '') + c replaced with NaN
Mutant 214 in complex.js: plus + minus > 0 replaced with plus > minus
Mutant 215 in complex.js: plus + minus > 0 replaced with plus % minus
Mutant 216 in complex.js: plus + minus > 0 replaced with plus - minus
Mutant 217 in complex.js: parser_exit replaced with 42
Mutant 218 in complex.js: parser_exit replaced with NaN
Mutant 219 in complex.js: parser_exit replaced with Infinity
Mutant 220 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with isFinite(z['re']) || isFinite(z['im'])
Mutant 221 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with z['re'] + z['im'] < 0
Mutant 222 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with z['re'] < 0 && z['im'] < 0
Mutant 223 in complex.js: isNaN replaced with !isNaN
Mutant 224 in complex.js: isNaN replaced with Number.isNaN
Mutant 225 in complex.js: z['re'] replaced with z['re'] + z['re']
Mutant 226 in complex.js: z['re'] replaced with z['re'] / 2
Mutant 227 in complex.js: z['im'] replaced with Complex['INFINITY']
Mutant 228 in complex.js: z['im'] replaced with this['im']
Mutant 229 in complex.js: !(this instanceof Complex) replaced with this != Complex
Mutant 230 in complex.js: !(this instanceof Complex) replaced with Complex.prototype.isPrototypeOf(this)
Mutant 231 in complex.js: !(this instanceof Complex) replaced with !(this.constructor === Complex)
Mutant 232 in complex.js: parse(a, b) replaced with parse(a + b)
Mutant 233 in complex.js: parse(a, b) replaced with parse(a || b)
Mutant 234 in complex.js: parse(a, b) replaced with parse(a ? b : 0)
Mutant 235 in complex.js: a replaced with a + b
Mutant 236 in complex.js: a replaced with a - b
Mutant 237 in complex.js: a replaced with a * b
Mutant 238 in complex.js: b replaced with c
Mutant 239 in complex.js: b replaced with a + b
Mutant 240 in complex.js: this['abs'] replaced with this['abs'] * -1
Mutant 241 in complex.js: this['abs'] replaced with this['abs'] + 1
Mutant 242 in complex.js: this['abs'] replaced with this['abs'] - 1
Mutant 243 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 244 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() && !z['isInfinite']()
Mutant 245 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() ? z['isInfinite']() : false
Mutant 246 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 247 in complex.js: z['isInfinite'] replaced with z['im'] === 0
Mutant 248 in complex.js: z['isInfinite'] replaced with z['re'] === 0
Mutant 249 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isFinite']() || z['isFinite']()
Mutant 250 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isNaN']() || z['isNaN']()
Mutant 251 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 252 in complex.js: this['isInfinite'] replaced with !this['isInfinite']
Mutant 253 in complex.js: this['isInfinite'] replaced with null
Mutant 254 in complex.js: z['isInfinite'] replaced with !z['isInfinite']
Mutant 255 in complex.js: z['isInfinite'] replaced with z['isInfinite'] && z['re'] === 0
Mutant 256 in complex.js: z['isInfinite'] replaced with z['isInfinite'] || z['re'] === 0
Mutant 257 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with !this.isInfinite() && !z.isInfinite()
Mutant 258 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this.isInfinite() || z.isInfinite()
Mutant 259 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this.re !== 0 && z.re !== 0
Mutant 260 in complex.js: this['isInfinite'] replaced with this['isZero']
Mutant 261 in complex.js: this['isInfinite'] replaced with this['abs']
Mutant 262 in complex.js: this['isInfinite'] replaced with this['NaN']
Mutant 263 in complex.js: z['isInfinite'] replaced with z !== Infinity
Mutant 264 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 265 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isNegative']() && z['isInfinite']()
Mutant 266 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && this['abs']() > z['abs']()
Mutant 267 in complex.js: this['isInfinite'] replaced with !this['isInfinite']
Mutant 268 in complex.js: this['isInfinite'] replaced with this['isFinite']
Mutant 269 in complex.js: this['isInfinite'] replaced with this['isZero']
Mutant 270 in complex.js: z['isInfinite'] replaced with z['isFinite']
Mutant 271 in complex.js: z['isInfinite'] replaced with !z['isInfinite']
Mutant 272 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with this['isInfinite']() && !z['isZero']() || !this['isInfinite']() && z['isInfinite']()
Mutant 273 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with this['isZero']() && !z['isInfinite']() || !this['isZero']() && z['isZero']()
Mutant 274 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with this['isInfinite']() && !z['isInfinite']() || !this['isInfinite']() && z['isInfinite']()
Mutant 275 in complex.js: this['isInfinite'] replaced with this['re'] !== this['im']
Mutant 276 in complex.js: z['isZero'] replaced with z['isNaN']
Mutant 277 in complex.js: z['isZero'] replaced with z['isPositive']
Mutant 278 in complex.js: this['isZero'] replaced with this['im']
Mutant 279 in complex.js: this['isZero'] replaced with null
Mutant 280 in complex.js: z['isInfinite'] replaced with z['im'] !== 0
Mutant 281 in complex.js: z['isInfinite'] replaced with z['im'] === 0 && z['re'] > 0
Mutant 282 in complex.js: z['isInfinite'] replaced with z['re'] > 0 && z['im'] === 0
Mutant 283 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isNaFFinite']() || z['isNaFFinite']()
Mutant 284 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 285 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() ^ z['isInfinite']()
Mutant 286 in complex.js: this['isInfinite'] replaced with z['isNan']
Mutant 287 in complex.js: this['isInfinite'] replaced with z['isFinite']
Mutant 288 in complex.js: this['isInfinite'] replaced with z['divideByZero']
Mutant 289 in complex.js: z['isInfinite'] replaced with z['isNaN']
Mutant 290 in complex.js: z['isInfinite'] replaced with a !== 0
Mutant 291 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 292 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 293 in complex.js: this['isZero'] replaced with !this['isZero']
Mutant 294 in complex.js: this['isZero'] replaced with this['re'] === 0
Mutant 295 in complex.js: z['isZero'] replaced with z['re'] === 0
Mutant 296 in complex.js: z['isZero'] replaced with z['im'] === 0
Mutant 297 in complex.js: this['isInfinite'] replaced with this['isNaN']
Mutant 298 in complex.js: this['isInfinite'] replaced with this['isZero']
Mutant 299 in complex.js: this['isInfinite'] replaced with Complex['NAN']
Mutant 300 in complex.js: z['isInfinite'] replaced with !z['isInfinite']
Mutant 301 in complex.js: z['isInfinite'] replaced with z['isNaNN']
Mutant 302 in complex.js: z['isInfinite'] replaced with z['isZero']
Mutant 303 in complex.js: this['isInfinite']() || z['isZero']() replaced with !(this['isInfinite']() || z['isZero']())
Mutant 304 in complex.js: this['isInfinite']() || z['isZero']() replaced with this['isFinite']() && z['isZero']()
Mutant 305 in complex.js: this['isInfinite']() || z['isZero']() replaced with !this['isInfinite']() && z['isZero']()
Mutant 306 in complex.js: this['isInfinite'] replaced with this['isInfinite'] && z['isInfinite']
Mutant 307 in complex.js: z['isZero'] replaced with z['re'] < 0
Mutant 308 in complex.js: this['isZero']() || z['isInfinite']() replaced with z['isInfinite']() && this['isZero']()
Mutant 309 in complex.js: this['isZero']() || z['isInfinite']() replaced with z['isInfinite']() || this['isNaN']()
Mutant 310 in complex.js: this['isZero']() || z['isInfinite']() replaced with z['isNaN']() && this['isZero']()
Mutant 311 in complex.js: this['isZero'] replaced with this['isInfinite']
Mutant 312 in complex.js: this['isZero'] replaced with this['re'] == 0
Mutant 313 in complex.js: this['isZero'] replaced with this['im'] == 0
Mutant 314 in complex.js: z['isInfinite'] replaced with !z['isInfinite']
Mutant 315 in complex.js: z['isInfinite'] replaced with z['isInfinite'] && this['isInfinite']
Mutant 316 in complex.js: z['isInfinite'] replaced with this['isInfinite'] && z['isInfinite'] && this['re'] !== z['re']
Mutant 317 in complex.js: 0 === d replaced with a > d
Mutant 318 in complex.js: 0 === d replaced with c === d
Mutant 319 in complex.js: 0 === d replaced with Math.abs(d) < Math.abs(c)
Mutant 320 in complex.js: Math.abs(c) < Math.abs(d) replaced with c < d
Mutant 321 in complex.js: Math.abs(c) < Math.abs(d) replaced with c > d
Mutant 322 in complex.js: Math.abs(c) < Math.abs(d) replaced with c != d
Mutant 323 in complex.js: Math.abs replaced with Math.floor
Mutant 324 in complex.js: Math.abs replaced with a * a
Mutant 325 in complex.js: c replaced with c * c
Mutant 326 in complex.js: c replaced with -c
Mutant 327 in complex.js: c replaced with 1 / c
Mutant 328 in complex.js: d replaced with a
Mutant 329 in complex.js: d replaced with b
Mutant 330 in complex.js: d replaced with -1
Mutant 331 in complex.js: z['isZero']() replaced with z['isInfinite']()
Mutant 332 in complex.js: z['isZero']() replaced with z['im'] != 0
Mutant 333 in complex.js: z['isZero']() replaced with this['re'] < 0
Mutant 334 in complex.js: z['isZero'] replaced with z['re']
Mutant 335 in complex.js: z['isZero'] replaced with z['im'] === 0 && z['re'] !== 0
Mutant 336 in complex.js: z['im'] === 0 replaced with z['im'] !== 0
Mutant 337 in complex.js: z['im'] === 0 replaced with z['real'] === 0
Mutant 338 in complex.js: z['im'] === 0 replaced with z['imaginary'] === 0
Mutant 339 in complex.js: b === 0 && a > 0 replaced with a > b && b === 0
Mutant 340 in complex.js: b === 0 && a > 0 replaced with a * b === 0
Mutant 341 in complex.js: b === 0 && a > 0 replaced with !b && a > 0
Mutant 342 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(z['im'])
Mutant 343 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(z['re'] * z['re'])
Mutant 344 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(this['re'] * z['re'])
Mutant 345 in complex.js: Math.pow replaced with a + z['re']
Mutant 346 in complex.js: a replaced with 0
Mutant 347 in complex.js: a replaced with a + 1
Mutant 348 in complex.js: a replaced with a * Math.random()
Mutant 349 in complex.js: z['re'] replaced with z['im']
Mutant 350 in complex.js: z['re'] replaced with 2 * z['re']
Mutant 351 in complex.js: z['re'] replaced with z['re'] * Complex['I']
Mutant 352 in complex.js: a === 0 replaced with a !== 0
Mutant 353 in complex.js: a === 0 replaced with b > 0
Mutant 354 in complex.js: a === 0 replaced with a > 0 && b > 0
Mutant 355 in complex.js: (z['re'] % 4 + 4) % 4 replaced with (z['re'] % 4 + 5) % 4
Mutant 356 in complex.js: (z['re'] % 4 + 4) % 4 replaced with (z['re'] % 4 + 3) % 4
Mutant 357 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(a, z['im'])
Mutant 358 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, z['re'] * 2)
Mutant 359 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b, z['re'] + 1)
Mutant 360 in complex.js: Math.pow replaced with a * b - a - b
Mutant 361 in complex.js: Math.pow replaced with a / b
Mutant 362 in complex.js: b replaced with BigInt(b)
Mutant 363 in complex.js: b replaced with b ^ 2
Mutant 364 in complex.js: b replaced with b === 0
Mutant 365 in complex.js: z['re'] replaced with z['re'] + 1
Mutant 366 in complex.js: z['re'] replaced with z['im']
Mutant 367 in complex.js: z['re'] replaced with -z['re']
Mutant 368 in complex.js: b replaced with a
Mutant 369 in complex.js: b replaced with this
Mutant 370 in complex.js: b replaced with Complex['ZERO']
Mutant 371 in complex.js: z['re'] replaced with z['im']
Mutant 372 in complex.js: z['re'] replaced with z * z
Mutant 373 in complex.js: z['re'] replaced with z['re'] + z['im']
Mutant 374 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(a * Math.pow(Math.pow(a, z['re']), z['im']))
Mutant 375 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(z['re'] * Math.pow(a, z['im']))
Mutant 376 in complex.js: Math.pow replaced with Math.exp
Mutant 377 in complex.js: Math.pow replaced with Math.sin
Mutant 378 in complex.js: Math.pow replaced with Math.tan
Mutant 379 in complex.js: b replaced with -b
Mutant 380 in complex.js: b replaced with b + 1
Mutant 381 in complex.js: b replaced with b * b
Mutant 382 in complex.js: z['re'] replaced with 0
Mutant 383 in complex.js: z['re'] replaced with z['im']
Mutant 384 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(z['re'] - 1)
Mutant 385 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(z['re'] + 1)
Mutant 386 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b * z['re'])
Mutant 387 in complex.js: Math.pow replaced with b / a
Mutant 388 in complex.js: b replaced with b + 1
Mutant 389 in complex.js: b replaced with a * b
Mutant 390 in complex.js: b replaced with Math.exp(a) * b
Mutant 391 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 1 && b === 0 && z['re'] > 0 && z['im'] >= 0
Mutant 392 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 0 && b === 1 && z['re'] > 0 && z['im'] >= 0
Mutant 393 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 1
Mutant 394 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a, b)
Mutant 395 in complex.js: Math.atan2(b, a) replaced with Math.atan2(sqrt(b), sqrt(a))
Mutant 396 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a + b)
Mutant 397 in complex.js: Math.atan2 replaced with Math.acos
Mutant 398 in complex.js: b replaced with a
Mutant 399 in complex.js: b replaced with b + 1
Mutant 400 in complex.js: b replaced with a + b
Mutant 401 in complex.js: logHypot(a, b) replaced with logHypot(a * b)
Mutant 402 in complex.js: logHypot(a, b) replaced with logHypot(a - b)
Mutant 403 in complex.js: logHypot(a, b) replaced with logHypot(a + b)
Mutant 404 in complex.js: a replaced with a + 1
Mutant 405 in complex.js: a replaced with b
Mutant 406 in complex.js: a replaced with a - b
Mutant 407 in complex.js: b replaced with b + 1
Mutant 408 in complex.js: b replaced with 2 * b
Mutant 409 in complex.js: b replaced with sin(b)
Mutant 410 in complex.js: Math.exp replaced with Math.sqrt
Mutant 411 in complex.js: Math.exp replaced with 1
Mutant 412 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['im'] * loh - z['re'] * arg
Mutant 413 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['re'] * (loh + arg)
Mutant 414 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['im'] * loh - z['re'] * arg + 1
Mutant 415 in complex.js: Math.cos replaced with Math.tan
Mutant 416 in complex.js: b replaced with b * 2
Mutant 417 in complex.js: b replaced with b + c
Mutant 418 in complex.js: b replaced with b / Math.sqrt(2)
Mutant 419 in complex.js: Math.sin replaced with Math.cos
Mutant 420 in complex.js: Math.sin replaced with Math.sinh
Mutant 421 in complex.js: b replaced with a
Mutant 422 in complex.js: b replaced with a + b
Mutant 423 in complex.js: b replaced with Math.sin(b)
Mutant 424 in complex.js: this['abs'] replaced with this['abs'] + 1
Mutant 425 in complex.js: this['abs'] replaced with this['abs'] * 2
Mutant 426 in complex.js: this['abs'] replaced with this['abs'] - 1
Mutant 427 in complex.js: b === 0 replaced with a === 0
Mutant 428 in complex.js: b === 0 replaced with b !== 0
Mutant 429 in complex.js: b === 0 replaced with b < 0
Mutant 430 in complex.js: Math.sqrt replaced with a
Mutant 431 in complex.js: Math.sqrt replaced with b / a
Mutant 432 in complex.js: a replaced with a * Math.sqrt(Math.abs(b))
Mutant 433 in complex.js: a replaced with a * Math.abs(b / b)
Mutant 434 in complex.js: Math.sqrt replaced with Math.cbrt
Mutant 435 in complex.js: Math.sqrt replaced with Math.abs
Mutant 436 in complex.js: Math.sqrt replaced with Math.max
Mutant 437 in complex.js: 2.0 * (r + a) replaced with r * 2 + a
Mutant 438 in complex.js: 2.0 * (r + a) replaced with 2.0 * (r + a) + 1
Mutant 439 in complex.js: 2.0 * (r + a) replaced with 2.0 * (r + a) % 2
Mutant 440 in complex.js: Math.abs replaced with -b
Mutant 441 in complex.js: Math.abs replaced with a
Mutant 442 in complex.js: Math.abs replaced with 1
Mutant 443 in complex.js: b replaced with a + b
Mutant 444 in complex.js: b replaced with a - b
Mutant 445 in complex.js: b replaced with Math.abs(a - b)
Mutant 446 in complex.js: 2 * (r - a) replaced with 1 + 2 * (r - a)
Mutant 447 in complex.js: 2 * (r - a) replaced with 2 * r - a
Mutant 448 in complex.js: 2 * (r - a) replaced with a / 2 - r
Mutant 449 in complex.js: a <= 0 replaced with a == 0
Mutant 450 in complex.js: a <= 0 replaced with a !== 0
Mutant 451 in complex.js: a <= 0 replaced with a < -10
Mutant 452 in complex.js: Math.sqrt replaced with Math.exp
Mutant 453 in complex.js: Math.sqrt replaced with Math.atan
Mutant 454 in complex.js: Math.sqrt replaced with Math.random
Mutant 455 in complex.js: 2.0 * (r - a) replaced with 2.0 * (a - b.r)
Mutant 456 in complex.js: 2.0 * (r - a) replaced with 3.0 * (r + a)
Mutant 457 in complex.js: Math.abs replaced with -Math.abs
Mutant 458 in complex.js: Math.abs replaced with Math.sin
Mutant 459 in complex.js: Math.abs replaced with 1 / Math.abs
Mutant 460 in complex.js: Math.sqrt replaced with NaN
Mutant 461 in complex.js: Math.sqrt replaced with Math.log
Mutant 462 in complex.js: Math.sqrt replaced with Math.PI
Mutant 463 in complex.js: 2 * (r + a) replaced with 2 * (r - a)
Mutant 464 in complex.js: 2 * (r + a) replaced with 2 * (r + b)
Mutant 465 in complex.js: 2 * (r + a) replaced with 2 * (r + a + b)
Mutant 466 in complex.js: this['re'] replaced with this['im']
Mutant 467 in complex.js: this['re'] replaced with this['re'] + 1
Mutant 468 in complex.js: this['re'] replaced with this['im'] - 1
Mutant 469 in complex.js: this['im'] === 0 replaced with this['im'] === 0.000001
Mutant 470 in complex.js: this['im'] === 0 replaced with this['im'] !== 0
Mutant 471 in complex.js: this['im'] === 0 replaced with Math.abs(this['im']) < 0.000001
Mutant 472 in complex.js: Math.cos replaced with Math.sin
Mutant 473 in complex.js: this['im'] replaced with -this['im']
Mutant 474 in complex.js: this['im'] replaced with this['re']
Mutant 475 in complex.js: this['im'] replaced with A * this['im']
Mutant 476 in complex.js: Math.sin replaced with !Math.sin
Mutant 477 in complex.js: Math.sin replaced with Math.cos
Mutant 478 in complex.js: Math.sin replaced with Math.tan
Mutant 479 in complex.js: this['im'] replaced with 0
Mutant 480 in complex.js: this['im'] replaced with Math.PI
Mutant 481 in complex.js: this['im'] replaced with Math.exp(Math.PI)
Mutant 482 in complex.js: a replaced with a ? 1 : 0
Mutant 483 in complex.js: a replaced with Math.sqrt(a)
Mutant 484 in complex.js: a replaced with Math.abs(a)
Mutant 485 in complex.js: Math.cos replaced with !cos
Mutant 486 in complex.js: Math.cos replaced with cos + 1
Mutant 487 in complex.js: b replaced with 2 * b
Mutant 488 in complex.js: b replaced with b + 1
Mutant 489 in complex.js: b replaced with -b
Mutant 490 in complex.js: b replaced with 0
Mutant 491 in complex.js: b replaced with "foo"
Mutant 492 in complex.js: b replaced with b + 1
Mutant 493 in complex.js: a replaced with b
Mutant 494 in complex.js: a replaced with -a
Mutant 495 in complex.js: Math.sin replaced with Math.cos
Mutant 496 in complex.js: Math.sin replaced with b
Mutant 497 in complex.js: b replaced with -b
Mutant 498 in complex.js: b replaced with b + 1
Mutant 499 in complex.js: b replaced with b / 2
Mutant 500 in complex.js: b === 0 && a > 0 replaced with a > b && a > 0
Mutant 501 in complex.js: b === 0 && a > 0 replaced with a > 0 && b === 0
Mutant 502 in complex.js: b === 0 && a > 0 replaced with a > 0 && b === 0 || a < 0 && b === 0
Mutant 503 in complex.js: logHypot(a, b) replaced with logHypot(a + 1, b)
Mutant 504 in complex.js: logHypot(a, b) replaced with logHypot(a, b - 1)
Mutant 505 in complex.js: logHypot(a, b) replaced with logHypot(a - 1, b + 1)
Mutant 506 in complex.js: a replaced with 2 * this['re'] * this['im']
Mutant 507 in complex.js: a replaced with this['im'] * this['re']
Mutant 508 in complex.js: a replaced with (this['re'] + this['im']) * this['im']
Mutant 509 in complex.js: b replaced with a
Mutant 510 in complex.js: b replaced with a * b
Mutant 511 in complex.js: b replaced with b * b
Mutant 512 in complex.js: Math.atan2(b, a) replaced with Math.atan2(b, b)
Mutant 513 in complex.js: Math.atan2(b, a) replaced with Math.atan2(a + b, b)
Mutant 514 in complex.js: Math.atan2(b, a) replaced with Math.atan2(b, a + b)
Mutant 515 in complex.js: Math.atan2 replaced with Math.atan3
Mutant 516 in complex.js: b replaced with b + 1
Mutant 517 in complex.js: b replaced with b * 2
Mutant 518 in complex.js: b replaced with a - b
Mutant 519 in complex.js: a replaced with b
Mutant 520 in complex.js: a replaced with a + b
Mutant 521 in complex.js: a replaced with a * b
Mutant 522 in complex.js: hypot(this['re'], this['im']) replaced with hypot(returnsComplex(rand(), rand()))
Mutant 523 in complex.js: hypot(this['re'], this['im']) replaced with hypot(returnsComplex(this['im'], this['re']))
Mutant 524 in complex.js: hypot(this['re'], this['im']) replaced with hypot(returnsComplex(this['im'] + this['re'], this['im'] - this['re']))
Mutant 525 in complex.js: this['re'] replaced with this['im']
Mutant 526 in complex.js: this['re'] replaced with this['re'] + this['im']
Mutant 527 in complex.js: this['re'] replaced with Math.sqrt(this['re'] * this['re'] + this['im'] * this['im'])
Mutant 528 in complex.js: this['im'] replaced with this.im
Mutant 529 in complex.js: this['im'] replaced with this.re
Mutant 530 in complex.js: this['im'] replaced with this['im'] + 1
Mutant 531 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(this['im'] + this['re'])
Mutant 532 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(this['im'] - this['re'])
Mutant 533 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(this['im'] * this['re'])
Mutant 534 in complex.js: Math.atan2 replaced with Math.tan
Mutant 535 in complex.js: Math.atan2 replaced with a + b / c
Mutant 536 in complex.js: Math.atan2 replaced with a - b / c
Mutant 537 in complex.js: this['im'] replaced with Math.abs(this['im'])
Mutant 538 in complex.js: this['im'] replaced with this['im'] ^ 2
Mutant 539 in complex.js: this['im'] replaced with Math.log10(this['im'])
Mutant 540 in complex.js: this['re'] replaced with this['im']
Mutant 541 in complex.js: this['re'] replaced with -this['re']
Mutant 542 in complex.js: this['re'] replaced with this['abs']()
Mutant 543 in complex.js: Math.sin replaced with Math.cos
Mutant 544 in complex.js: Math.sin replaced with Math.tan
Mutant 545 in complex.js: Math.sin replaced with Math.asin
Mutant 546 in complex.js: cosh replaced with 0
Mutant 547 in complex.js: cosh replaced with 1
Mutant 548 in complex.js: cosh replaced with NaN
Mutant 549 in complex.js: b replaced with b - 1
Mutant 550 in complex.js: b replaced with -b
Mutant 551 in complex.js: b replaced with Math.sin(a)
Mutant 552 in complex.js: Math.cos replaced with Math.sin
Mutant 553 in complex.js: Math.cos replaced with Math.tan
Mutant 554 in complex.js: Math.cos replaced with Math.acos
Mutant 555 in complex.js: a replaced with a + 1
Mutant 556 in complex.js: a replaced with a - 1
Mutant 557 in complex.js: a replaced with a ^ 2
Mutant 558 in complex.js: b replaced with -b
Mutant 559 in complex.js: b replaced with Math.pow(b, 2)
Mutant 560 in complex.js: b replaced with Math.log(b)
Mutant 561 in complex.js: Math.cos replaced with -Math.sin
Mutant 562 in complex.js: Math.cos replaced with Math.tan
Mutant 563 in complex.js: Math.cos replaced with Math.acos
Mutant 564 in complex.js: a replaced with a - 1
Mutant 565 in complex.js: a replaced with b * a
Mutant 566 in complex.js: a replaced with a + b
Mutant 567 in complex.js: cosh replaced with a + b
Mutant 568 in complex.js: cosh replaced with a / b
Mutant 569 in complex.js: cosh replaced with a ^ b
Mutant 570 in complex.js: Math.sin replaced with Math.cos
Mutant 571 in complex.js: Math.sin replaced with a + b
Mutant 572 in complex.js: Math.sin replaced with Math.tan
Mutant 573 in complex.js: b replaced with 1
Mutant 574 in complex.js: b replaced with 'a' + 'b'
Mutant 575 in complex.js: b replaced with a % 2
Mutant 576 in complex.js: a replaced with a + 1e-15
Mutant 577 in complex.js: a replaced with -a
Mutant 578 in complex.js: a replaced with a * (1 + 1e-15)
Mutant 579 in complex.js: cosh replaced with cos
Mutant 580 in complex.js: cosh replaced with Math.cos
Mutant 581 in complex.js: cosh replaced with sin
Mutant 582 in complex.js: b replaced with a
Mutant 583 in complex.js: b replaced with this['re'] + this['im']
Mutant 584 in complex.js: b replaced with b / a
Mutant 585 in complex.js: Math.sin replaced with Math.sinh
Mutant 586 in complex.js: Math.sin replaced with Math.asin
Mutant 587 in complex.js: Math.sin replaced with c * Math.sin
Mutant 588 in complex.js: b replaced with b * Math.cos(a)
Mutant 589 in complex.js: b replaced with b - a
Mutant 590 in complex.js: b replaced with Math.sin(a) * b
Mutant 591 in complex.js: Math.cos replaced with i + Math.cos
Mutant 592 in complex.js: Math.cos replaced with Math.sin
Mutant 593 in complex.js: Math.cos replaced with Math.PI - Math.cos
Mutant 594 in complex.js: a replaced with Math.PI / 2 - a
Mutant 595 in complex.js: a replaced with 2 * a
Mutant 596 in complex.js: a replaced with 1 - a
Mutant 597 in complex.js: cosh replaced with b * b + a * a - 1
Mutant 598 in complex.js: cosh replaced with b * b - a * a + 1
Mutant 599 in complex.js: cosh replaced with -b * b - a * a + 1
Mutant 600 in complex.js: b replaced with -b
Mutant 601 in complex.js: b replaced with b + 1
Mutant 602 in complex.js: b replaced with b * b
Mutant 603 in complex.js: Math.sin replaced with Math.cos
Mutant 604 in complex.js: Math.sin replaced with Math.abs
Mutant 605 in complex.js: a replaced with b
Mutant 606 in complex.js: a replaced with Math.PI
Mutant 607 in complex.js: a replaced with function () {
  return 0;
}
Mutant 608 in complex.js: sinh replaced with sin
Mutant 609 in complex.js: sinh replaced with cosh
Mutant 610 in complex.js: sinh replaced with tanh
Mutant 611 in complex.js: cosh replaced with 2 * b
Mutant 612 in complex.js: cosh replaced with 2 * a
Mutant 613 in complex.js: cosh replaced with b * a
Mutant 614 in complex.js: 2 * b replaced with b + 1
Mutant 615 in complex.js: 2 * b replaced with a + b
Mutant 616 in complex.js: 2 * b replaced with a - b
Mutant 617 in complex.js: 2 * a replaced with 2 * c
Mutant 618 in complex.js: 2 * a replaced with a + b
Mutant 619 in complex.js: 2 * a replaced with Math.Max(a, b)
Mutant 620 in complex.js: Math.cos replaced with Math.sin
Mutant 621 in complex.js: Math.cos replaced with Math.tan
Mutant 622 in complex.js: Math.cos replaced with Math.sqrt
Mutant 623 in complex.js: a replaced with a + b
Mutant 624 in complex.js: a replaced with a - b
Mutant 625 in complex.js: cosh replaced with sinh
Mutant 626 in complex.js: cosh replaced with cot
Mutant 627 in complex.js: b replaced with a + b
Mutant 628 in complex.js: b replaced with a - b
Mutant 629 in complex.js: b replaced with b * 2
Mutant 630 in complex.js: Math.sin replaced with Math.cos
Mutant 631 in complex.js: a replaced with -Math.sin(a) * sin(a) * cos(b)
Mutant 632 in complex.js: a replaced with 0.5 * Math.sin(a) * cos(b)
Mutant 633 in complex.js: sinh replaced with sin
Mutant 634 in complex.js: sinh replaced with cos
Mutant 635 in complex.js: sinh replaced with tan
Mutant 636 in complex.js: cosh replaced with sinh
Mutant 637 in complex.js: 2 * a replaced with Math.tan(a)
Mutant 638 in complex.js: 2 * a replaced with a + b
Mutant 639 in complex.js: 2 * a replaced with Math.asin(a)
Mutant 640 in complex.js: Math.sin replaced with Math.cos
Mutant 641 in complex.js: Math.sin replaced with Math.sqrt
Mutant 642 in complex.js: Math.sin replaced with Math.PI
Mutant 643 in complex.js: a replaced with -a
Mutant 644 in complex.js: a replaced with b
Mutant 645 in complex.js: a replaced with 2 * a
Mutant 646 in complex.js: b replaced with a
Mutant 647 in complex.js: b replaced with b * a
Mutant 648 in complex.js: b replaced with b ^ a
Mutant 649 in complex.js: Math.cos replaced with -Math.cos
Mutant 650 in complex.js: Math.cos replaced with 1 / Math.cos
Mutant 651 in complex.js: Math.cos replaced with Math.sin
Mutant 652 in complex.js: a replaced with Math.cos(a) * sinh(b)
Mutant 653 in complex.js: a replaced with Math.sin(a) * cos(b)
Mutant 654 in complex.js: a replaced with Math.sin(b) * cos(a)
Mutant 655 in complex.js: sinh replaced with cosh
Mutant 656 in complex.js: sinh replaced with tanh
Mutant 657 in complex.js: sinh replaced with cis
Mutant 658 in complex.js: b replaced with new Complex(Math.sin(a) * sinh(b), Math.cos(a) * cosh(b))
Mutant 659 in complex.js: b replaced with new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b))
Mutant 660 in complex.js: b replaced with new Complex(Math.sin(a) * cosh(b), Math.cos(a) * -sinh(b))
Mutant 661 in complex.js: a === 0 replaced with a > 0
Mutant 662 in complex.js: a === 0 replaced with b !== 0
Mutant 663 in complex.js: a === 0 replaced with a !== 0 && b !== 0
Mutant 664 in complex.js: b === -1 replaced with b === 1.1
Mutant 665 in complex.js: b === -1 replaced with b !== 1.1
Mutant 666 in complex.js: b === -1 replaced with b === 0
Mutant 667 in complex.js: b === 0 replaced with b !== 0
Mutant 668 in complex.js: b === 0 replaced with b === 1
Mutant 669 in complex.js: b === 0 replaced with b !== undefined
Mutant 670 in complex.js: Math.atan2(1, a) replaced with Math.atan2(0, a)
Mutant 671 in complex.js: Math.atan2(1, a) replaced with Math.atan2(1, -a)
Mutant 672 in complex.js: Math.atan2(1, a) replaced with Math.atan2(a, 0)
Mutant 673 in complex.js: Math.atan2 replaced with Math.atan
Mutant 674 in complex.js: Math.atan2 replaced with Math.acos
Mutant 675 in complex.js: Math.atan2 replaced with Math.sin
Mutant 676 in complex.js: 1 replaced with 0
Mutant 677 in complex.js: 1 replaced with -1
Mutant 678 in complex.js: 1 replaced with a + 1
Mutant 679 in complex.js: a replaced with -b
Mutant 680 in complex.js: a replaced with 2 * a
Mutant 681 in complex.js: a replaced with a + b
Mutant 682 in complex.js: a === 0 && b === 0 replaced with a != 0 && b != 0
Mutant 683 in complex.js: a === 0 && b === 0 replaced with a == 0 & b == 0
Mutant 684 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 685 in complex.js: a === 0 && b === 0 replaced with a !== 0 && b !== 0
Mutant 686 in complex.js: sinh replaced with sin
Mutant 687 in complex.js: sinh replaced with Math.sinh
Mutant 688 in complex.js: a replaced with -a
Mutant 689 in complex.js: a replaced with a * Math.PI
Mutant 690 in complex.js: a replaced with a / 2
Mutant 691 in complex.js: Math.cos replaced with Math.tan
Mutant 692 in complex.js: Math.cos replaced with 2 * Math.sin
Mutant 693 in complex.js: Math.cos replaced with Math.asin
Mutant 694 in complex.js: cosh replaced with 2 * a
Mutant 695 in complex.js: cosh replaced with a + b
Mutant 696 in complex.js: cosh replaced with a - b
Mutant 697 in complex.js: a replaced with -a
Mutant 698 in complex.js: a replaced with a + 1
Mutant 699 in complex.js: a replaced with a * 2
Mutant 700 in complex.js: Math.sin replaced with Math.cos
Mutant 701 in complex.js: Math.sin replaced with Math.tan
Mutant 702 in complex.js: Math.sin replaced with Math.acos
Mutant 703 in complex.js: b replaced with -b
Mutant 704 in complex.js: b replaced with b + 1
Mutant 705 in complex.js: b replaced with sin(b)
Mutant 706 in complex.js: cosh replaced with coshx
Mutant 707 in complex.js: cosh replaced with -cosh
Mutant 708 in complex.js: a replaced with a * 2
Mutant 709 in complex.js: a replaced with a + 1
Mutant 710 in complex.js: a replaced with a - 2
Mutant 711 in complex.js: Math.cos replaced with Math.sin
Mutant 712 in complex.js: Math.cos replaced with Math.sqrt
Mutant 713 in complex.js: Math.cos replaced with Math.log10
Mutant 714 in complex.js: b replaced with a + b
Mutant 715 in complex.js: b replaced with a - b
Mutant 716 in complex.js: b replaced with a * b
Mutant 717 in complex.js: a replaced with a + 1
Mutant 718 in complex.js: a replaced with a - 1
Mutant 719 in complex.js: a replaced with a * b
Mutant 720 in complex.js: b replaced with b / d
Mutant 721 in complex.js: b replaced with a / d
Mutant 722 in complex.js: cosh replaced with 1 / y
Mutant 723 in complex.js: cosh replaced with x * y
Mutant 724 in complex.js: cosh replaced with y - x
Mutant 725 in complex.js: a replaced with a + 1
Mutant 726 in complex.js: a replaced with a - 1
Mutant 727 in complex.js: a replaced with -a
Mutant 728 in complex.js: Math.cos replaced with Math.tan
Mutant 729 in complex.js: Math.cos replaced with this.re + Math.cos
Mutant 730 in complex.js: b replaced with -b
Mutant 731 in complex.js: b replaced with a
Mutant 732 in complex.js: b replaced with Math.PI
Mutant 733 in complex.js: a replaced with a - b
Mutant 734 in complex.js: a replaced with c
Mutant 735 in complex.js: a replaced with a * b
Mutant 736 in complex.js: Math.sin replaced with Math.cosh
Mutant 737 in complex.js: Math.sin replaced with Math.acos
Mutant 738 in complex.js: Math.sin replaced with Math.asin
Mutant 739 in complex.js: b replaced with Math.sinh(b)
Mutant 740 in complex.js: b replaced with -b
Mutant 741 in complex.js: b replaced with i * b
Mutant 742 in complex.js: cosh replaced with cos
Mutant 743 in complex.js: cosh replaced with imAnd
Mutant 744 in complex.js: cosh replaced with a / 0
Mutant 745 in complex.js: a replaced with a + 1
Mutant 746 in complex.js: a replaced with b / a
Mutant 747 in complex.js: a replaced with a + b
Mutant 748 in complex.js: Math.cos replaced with Math.cosh
Mutant 749 in complex.js: Math.cos replaced with 2 * Math.cos
Mutant 750 in complex.js: Math.cos replaced with Math.sin
Mutant 751 in complex.js: b replaced with -b
Mutant 752 in complex.js: b replaced with 2 * b
Mutant 753 in complex.js: b replaced with b * b
Mutant 754 in complex.js: sinh replaced with sin
Mutant 755 in complex.js: sinh replaced with tan
Mutant 756 in complex.js: sinh replaced with asin
Mutant 757 in complex.js: a replaced with null
Mutant 758 in complex.js: a replaced with undefined
Mutant 759 in complex.js: a replaced with -a
Mutant 760 in complex.js: Math.sin replaced with a / c
Mutant 761 in complex.js: Math.sin replaced with b / c
Mutant 762 in complex.js: Math.sin replaced with a / b
Mutant 763 in complex.js: b replaced with -b
Mutant 764 in complex.js: b replaced with 2 * b
Mutant 765 in complex.js: b replaced with b + 1
Mutant 766 in complex.js: Math.cos replaced with Math.tan
Mutant 767 in complex.js: 2 * b replaced with 2 * a
Mutant 768 in complex.js: 2 * b replaced with 1
Mutant 769 in complex.js: 2 * a replaced with 2 * b
Mutant 770 in complex.js: 2 * a replaced with Math.random() * 2 * a
Mutant 771 in complex.js: 2 * a replaced with a + 2 * b
Mutant 772 in complex.js: sinh replaced with cosh
Mutant 773 in complex.js: a replaced with a * 2
Mutant 774 in complex.js: a replaced with b / a
Mutant 775 in complex.js: a replaced with a + 1
Mutant 776 in complex.js: Math.cos replaced with this['im'] * Math.PI
Mutant 777 in complex.js: b replaced with a
Mutant 778 in complex.js: b replaced with 1 + b
Mutant 779 in complex.js: cosh replaced with coth
Mutant 780 in complex.js: cosh replaced with sinh
Mutant 781 in complex.js: cosh replaced with tanh
Mutant 782 in complex.js: a replaced with -a
Mutant 783 in complex.js: a replaced with a + 1
Mutant 784 in complex.js: a replaced with a + b
Mutant 785 in complex.js: Math.sin replaced with Math.sinh
Mutant 786 in complex.js: Math.sin replaced with Math.cosh
Mutant 787 in complex.js: Math.sin replaced with Math.tanh
Mutant 788 in complex.js: b replaced with -infinity
Mutant 789 in complex.js: b replaced with NaN
Mutant 790 in complex.js: b replaced with Math.ceil(b)
Mutant 791 in complex.js: Math.cos replaced with Math.tan
Mutant 792 in complex.js: Math.cos replaced with Math.sin
Mutant 793 in complex.js: Math.cos replaced with Math.cosh
Mutant 794 in complex.js: 2 * b replaced with to
Mutant 795 in complex.js: 2 * a replaced with a + 1
Mutant 796 in complex.js: 2 * a replaced with sinh(a) * Math.cos(b)
Mutant 797 in complex.js: 2 * a replaced with this.im
Mutant 798 in complex.js: a replaced with a + 1
Mutant 799 in complex.js: a replaced with a * Math.PI
Mutant 800 in complex.js: Math.cos replaced with Math.cosh
Mutant 801 in complex.js: Math.cos replaced with Math.acos
Mutant 802 in complex.js: Math.cos replaced with 10000 * Math.cos
Mutant 803 in complex.js: b replaced with b + 1
Mutant 804 in complex.js: b replaced with b - 1
Mutant 805 in complex.js: b replaced with b * 2
Mutant 806 in complex.js: sinh replaced with cosh
Mutant 807 in complex.js: sinh replaced with asinh
Mutant 808 in complex.js: sinh replaced with tanh
Mutant 809 in complex.js: a replaced with 1
Mutant 810 in complex.js: a replaced with 'string'
Mutant 811 in complex.js: a replaced with new Complex(1, 2)
Mutant 812 in complex.js: Math.sin replaced with Math.cos
Mutant 813 in complex.js: Math.sin replaced with x * Math.sin
Mutant 814 in complex.js: b replaced with c
Mutant 815 in complex.js: b replaced with -b
Mutant 816 in complex.js: b replaced with 1 / b
Mutant 817 in complex.js: this['asin'] replaced with this['asinh']
Mutant 818 in complex.js: this['asin'] replaced with this['acosh']
Mutant 819 in complex.js: this['asin'] replaced with this['atanh']
Mutant 820 in complex.js: this['acos'] replaced with this['ones']
Mutant 821 in complex.js: this['acos'] replaced with this['sin']
Mutant 822 in complex.js: this['acos'] replaced with this['acosh']
Mutant 823 in complex.js: res['im'] <= 0 replaced with res['im'] >= 0
Mutant 824 in complex.js: res['im'] <= 0 replaced with res['acosh'] <= 0
Mutant 825 in complex.js: res['im'] <= 0 replaced with Math.abs(res['im']) <= 0
Mutant 826 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(x['im'], x['re'])
Mutant 827 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(x['im'] + x['re'])
Mutant 828 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(-x['im'] * x['re'])
Mutant 829 in complex.js: logHypot replaced with logMinus
Mutant 830 in complex.js: logHypot replaced with logPlus
Mutant 831 in complex.js: logHypot replaced with logOne
Mutant 832 in complex.js: x['im'] replaced with x['re']
Mutant 833 in complex.js: x['im'] replaced with 2 * x['im']
Mutant 834 in complex.js: x['im'] replaced with x['im'] + 1
Mutant 835 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(x['re'], temp)
Mutant 836 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(temp, x['im'])
Mutant 837 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(x['im'], x['re'])
Mutant 838 in complex.js: Math.atan2 replaced with Math.acos
Mutant 839 in complex.js: Math.atan2 replaced with Math.acot
Mutant 840 in complex.js: Math.atan2 replaced with Math.acsc
Mutant 841 in complex.js: x['im'] replaced with 1
Mutant 842 in complex.js: x['im'] replaced with -1
Mutant 843 in complex.js: x['im'] replaced with a + b
Mutant 844 in complex.js: temp replaced with !temp
Mutant 845 in complex.js: temp replaced with temp + 1
Mutant 846 in complex.js: temp replaced with Math.random() * temp
Mutant 847 in complex.js: noIM replaced with !noIM
Mutant 848 in complex.js: noIM replaced with noIM = false
Mutant 849 in complex.js: a === 0 && b === 0 replaced with a !== 1 && b === 0
Mutant 850 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 851 in complex.js: Math.log replaced with Math.tan
Mutant 852 in complex.js: Math.log replaced with Math.sin
Mutant 853 in complex.js: Math.log replaced with Math.cos
Mutant 854 in complex.js: a + Math.sqrt(a * a + 1) replaced with a - Math.sqrt(a * a + 1)
Mutant 855 in complex.js: a + Math.sqrt(a * a + 1) replaced with a * Math.sqrt(a * a + 1)
Mutant 856 in complex.js: a + Math.sqrt(a * a + 1) replaced with Math.sqrt(a * a + 1) - a
Mutant 857 in complex.js: a * a + 1 replaced with a * b + 1
Mutant 858 in complex.js: a * a + 1 replaced with a * 1 + b * b
Mutant 859 in complex.js: a * a + 1 replaced with Math.sqrt(a)
Mutant 860 in complex.js: this['isZero']() replaced with this['isInfinite']()
Mutant 861 in complex.js: this['isZero']() replaced with !this['isInfinite']()
Mutant 862 in complex.js: this['isZero']() replaced with this['isNaN']()
Mutant 863 in complex.js: this['isZero'] replaced with !this['isZero']
Mutant 864 in complex.js: this['isZero'] replaced with 1 + this['isZero']
Mutant 865 in complex.js: this['isZero'] replaced with this['isOne']
Mutant 866 in complex.js: this['isZero'] replaced with this['isInfinity']
Mutant 867 in complex.js: this['isZero'] replaced with this['im'] == 0
Mutant 868 in complex.js: this['isZero'] replaced with this['re'] != 0
Mutant 869 in complex.js: this['isInfinite']() replaced with this['isFinite']()
Mutant 870 in complex.js: this['isInfinite']() replaced with this['isNan']()
Mutant 871 in complex.js: this['isInfinite']() replaced with this['toExponential']() > 0
Mutant 872 in complex.js: this['isInfinite'] replaced with this['re'] === Infinity
Mutant 873 in complex.js: this['isInfinite'] replaced with this['im'] !== 0
Mutant 874 in complex.js: this['isInfinite'] replaced with !this['isInfinite'] && this['re'] === Infinity
Mutant 875 in complex.js: Math.pow replaced with Math.exp
Mutant 876 in complex.js: 10 replaced with 9
Mutant 877 in complex.js: 10 replaced with 0
Mutant 878 in complex.js: 10 replaced with Infinity
Mutant 879 in complex.js: places || 0 replaced with places ^ 0
Mutant 880 in complex.js: places || 0 replaced with places * 0
Mutant 881 in complex.js: places || 0 replaced with -places || 0
Mutant 882 in complex.js: Math.ceil replaced with Math.floor
Mutant 883 in complex.js: Math.ceil replaced with Math.round
Mutant 884 in complex.js: Math.ceil replaced with Math.abs
Mutant 885 in complex.js: this['re'] * places replaced with this['im'] * places
Mutant 886 in complex.js: this['re'] * places replaced with this['re'] - places
Mutant 887 in complex.js: this['re'] * places replaced with this['im'] + places
Mutant 888 in complex.js: Math.ceil replaced with a < b
Mutant 889 in complex.js: Math.ceil replaced with Math.floor
Mutant 890 in complex.js: Math.ceil replaced with Math.sqrt
Mutant 891 in complex.js: this['im'] * places replaced with Complex['ZERO'] * places
Mutant 892 in complex.js: this['im'] * places replaced with this['re'] * places
Mutant 893 in complex.js: this['im'] * places replaced with Math.random() * places
Mutant 894 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(Math.pow(10, places || 1))
Mutant 895 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(Math.pow(10, places + 1))
Mutant 896 in complex.js: Math.pow replaced with Math.sqrt
Mutant 897 in complex.js: Math.pow replaced with Math.max
Mutant 898 in complex.js: 10 replaced with 0
Mutant 899 in complex.js: 10 replaced with a
Mutant 900 in complex.js: 10 replaced with -b
Mutant 901 in complex.js: places || 0 replaced with places && 0
Mutant 902 in complex.js: places || 0 replaced with places ? 0 : places
Mutant 903 in complex.js: places || 0 replaced with Math.min(places, 0)
Mutant 904 in complex.js: Math.floor replaced with Math.ceil
Mutant 905 in complex.js: Math.floor replaced with Math.round
Mutant 906 in complex.js: Math.floor replaced with Math.abs
Mutant 907 in complex.js: Math.floor replaced with Math.ceil
Mutant 908 in complex.js: Math.floor replaced with Math.round
Mutant 909 in complex.js: Math.floor replaced with Math.abs
Mutant 910 in complex.js: this['im'] * places replaced with a / b
Mutant 911 in complex.js: this['im'] * places replaced with a % b
Mutant 912 in complex.js: Math.pow replaced with 10 - places
Mutant 913 in complex.js: Math.pow replaced with places = 10 - places
Mutant 914 in complex.js: 10 replaced with 0
Mutant 915 in complex.js: 10 replaced with -1
Mutant 916 in complex.js: 10 replaced with Infinity
Mutant 917 in complex.js: Math.round replaced with Math.floor
Mutant 918 in complex.js: Math.round replaced with Math.ceil
Mutant 919 in complex.js: this['re'] * places replaced with this['im'] * places
Mutant 920 in complex.js: this['re'] * places replaced with -this['re'] * places
Mutant 921 in complex.js: this['re'] * places replaced with this['re'] * (places + 1)
Mutant 922 in complex.js: Math.round replaced with Math.floor
Mutant 923 in complex.js: Math.round replaced with Math.ceil
Mutant 924 in complex.js: Math.round replaced with Math.sin
Mutant 925 in complex.js: this['im'] * places replaced with this['re'] * places
Mutant 926 in complex.js: this['im'] * places replaced with this['im'] + places
Mutant 927 in complex.js: this['im'] * places replaced with places - this['im']
Mutant 928 in complex.js: Math.abs replaced with Math.floor
Mutant 929 in complex.js: Math.abs replaced with Math.ceil
Mutant 930 in complex.js: Math.abs replaced with z['im'] - this['im']
Mutant 931 in complex.js: z['re'] - this['re'] replaced with z['im'] - this['im']
Mutant 932 in complex.js: z['re'] - this['re'] replaced with z['re'] * this['re']
Mutant 933 in complex.js: z['re'] - this['re'] replaced with z['im'] * this['im']
Mutant 934 in complex.js: z['im'] - this['im'] replaced with z.re - this.im
Mutant 935 in complex.js: z['im'] - this['im'] replaced with z.im + this.re
Mutant 936 in complex.js: z['im'] - this['im'] replaced with z.conjugate().im - this.im
Mutant 937 in complex.js: this['isNaN']() replaced with this['re'] === NaN
Mutant 938 in complex.js: this['isNaN']() replaced with this['re'] !== this['im']
Mutant 939 in complex.js: this['isNaN'] replaced with !this['isNaN']
Mutant 940 in complex.js: this['isNaN'] replaced with this['re'] || this['im']
Mutant 941 in complex.js: this['isInfinite']() replaced with !this['isInfinite']()
Mutant 942 in complex.js: this['isInfinite']() replaced with this.property = NaN
Mutant 943 in complex.js: this['isInfinite']() replaced with this.property = Infinity
Mutant 944 in complex.js: this['isInfinite'] replaced with this.isInfinite
Mutant 945 in complex.js: this['isInfinite'] replaced with !this.isInfinite
Mutant 946 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with Math.abs(a) >= Complex['EPSILON']
Mutant 947 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with Math.abs(b) < Complex['EPSILON']
Mutant 948 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with a === 0 || b === 0
Mutant 949 in complex.js: Math.abs replaced with Math.sin
Mutant 950 in complex.js: Math.abs replaced with x = 10
Mutant 951 in complex.js: Math.abs replaced with this['im']
Mutant 952 in complex.js: a replaced with a * b
Mutant 953 in complex.js: a replaced with a + b
Mutant 954 in complex.js: a replaced with a * Math.random()
Mutant 955 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with b <= Complex['EPSILON']
Mutant 956 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with b < Complex['EPSILON']
Mutant 957 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with b != Complex['EPSILON']
Mutant 958 in complex.js: b replaced with a
Mutant 959 in complex.js: b replaced with this['im']
Mutant 960 in complex.js: b replaced with Complex['PI']
Mutant 961 in complex.js: a !== 0 replaced with b !== 0
Mutant 962 in complex.js: a !== 0 replaced with !a
Mutant 963 in complex.js: a !== 0 replaced with a == 0
Mutant 964 in complex.js: b < 0 replaced with b !== 0
Mutant 965 in complex.js: b < 0 replaced with b < 1
Mutant 966 in complex.js: b < 0 replaced with b > 0
Mutant 967 in complex.js: b < 0 replaced with b >= 0
Mutant 968 in complex.js: b < 0 replaced with !b
Mutant 969 in complex.js: 1 !== b replaced with a + b >= 1
Mutant 970 in complex.js: 1 !== b replaced with -1 > a + b
Mutant 971 in complex.js: 1 !== b replaced with a + b < -1
Mutant 972 in complex.js: this['im'] === 0 replaced with this['re'] === 0
Mutant 973 in complex.js: this['im'] === 0 replaced with this['re'] !== 0
Mutant 974 in complex.js: this['im'] === 0 replaced with this['im'] + 1 === 0
Mutant 975 in complex.js: isNaN replaced with !isNaN
Mutant 976 in complex.js: this['re'] replaced with this['im']
Mutant 977 in complex.js: this['re'] replaced with a['re']
Mutant 978 in complex.js: this['re'] replaced with Complex['INFINITY']['re']
Mutant 979 in complex.js: isNaN replaced with isInfinity
Mutant 980 in complex.js: isNaN replaced with isFinite
Mutant 981 in complex.js: isNaN replaced with !isFinite
Mutant 982 in complex.js: this['im'] replaced with this['im'] * 2
Mutant 983 in complex.js: this['im'] replaced with this['im'] + 1
Mutant 984 in complex.js: this['im'] replaced with this['im'] > 0
Mutant 985 in complex.js: isFinite replaced with !isFinite
Mutant 986 in complex.js: isFinite replaced with this.im === Infinity
Mutant 987 in complex.js: this['re'] replaced with this['im']
Mutant 988 in complex.js: this['re'] replaced with this['re'] + this['im']
Mutant 989 in complex.js: this['re'] replaced with this['re'] * this['im']
Mutant 990 in complex.js: isFinite replaced with !isFinite
Mutant 991 in complex.js: isFinite replaced with isFinite * isFinite
Mutant 992 in complex.js: isFinite replaced with isFinite + isFinite
Mutant 993 in complex.js: this['im'] replaced with this['re']
Mutant 994 in complex.js: this['im'] replaced with this['im'] * 2
Mutant 995 in complex.js: this['im'] replaced with Math.abs(this['im'])
Mutant 996 in complex.js: this['isNaN'] replaced with this['isFinite']
Mutant 997 in complex.js: this['isNaN'] replaced with this['re']['isNaN']
Mutant 998 in complex.js: this['isNaN'] replaced with this['im']['isNaN']
Mutant 999 in complex.js: this['isFinite'] replaced with !this['isFinite']
Mutant 1000 in complex.js: this['isFinite'] replaced with True
Mutant 1001 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define !== 'function' || !define['amd']
Mutant 1002 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define === 'function' && define['amd'] === false
Mutant 1003 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define !== 'function' || !define['amd'] || define['amd'] !== true
Mutant 1004 in complex.js: typeof exports === 'object' replaced with -typeof exports === 'object' + typeof define === 'function'
Mutant 1005 in complex.js: typeof exports === 'object' replaced with -typeof exports === 'object' + typeof module === 'object'
Mutant 1006 in complex.js: Object.defineProperty(Complex, "__esModule", {
  'value': true
}) replaced with Object.defineProperty(Complex, "__esModule", {
  'value': false
})
Mutant 1007 in complex.js: Object.defineProperty(Complex, "__esModule", {
  'value': true
}) replaced with Object.defineProperty(Complex, "__esModule", {
  'value': NaN
})
Mutant 1008 in complex.js: Object.defineProperty(Complex, "__esModule", {
  'value': true
}) replaced with Object.defineProperty(Complex, "__esModule", {
  'value': undefined
})
Mutant 1009 in complex.js: Complex replaced with undefined
Mutant 1010 in complex.js: Complex replaced with {}
Mutant 1011 in complex.js: Complex replaced with null
Mutant 1012 in complex.js: "__esModule" replaced with "wasFlipped"
Mutant 1013 in complex.js: "__esModule" replaced with "flipped"
Mutant 1014 in complex.js: "__esModule" replaced with "add"
Mutant 1015 in complex.js: {
  'value': true
} replaced with {
  'value': false
}
Mutant 1016 in complex.js: {
  'value': true
} replaced with {
  'value': NaN
}
Mutant 1017 in complex.js: {
  'value': true
} replaced with {
  'value': function () {
    throw new Error('Custom error message');
  }()
}
[32m12:54:06 (2817) INFO Instrumenter[39m Instrumented 1 source file(s) with 1018 mutant(s)
[32m12:54:07 (2817) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m12:54:08 (2817) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m12:54:08 (2817) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m12:54:08 (2817) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 515 ms, overhead 0 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~8m) 19/1018 tested (19 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~8m) 38/1018 tested (30 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~8m) 57/1018 tested (40 survived, 0 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~8m) 76/1018 tested (46 survived, 0 timed out)
Mutation testing 9% (elapsed: <1m, remaining: ~8m) 96/1018 tested (51 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~7m) 115/1018 tested (53 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~7m) 134/1018 tested (57 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~7m) 154/1018 tested (58 survived, 0 timed out)
Mutation testing 16% (elapsed: ~1m, remaining: ~7m) 173/1018 tested (59 survived, 0 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~7m) 192/1018 tested (63 survived, 0 timed out)
Mutation testing 20% (elapsed: ~1m, remaining: ~7m) 211/1018 tested (66 survived, 0 timed out)
Mutation testing 22% (elapsed: ~2m, remaining: ~6m) 231/1018 tested (79 survived, 0 timed out)
Mutation testing 24% (elapsed: ~2m, remaining: ~6m) 250/1018 tested (81 survived, 0 timed out)
Mutation testing 26% (elapsed: ~2m, remaining: ~6m) 269/1018 tested (87 survived, 0 timed out)
Mutation testing 28% (elapsed: ~2m, remaining: ~6m) 289/1018 tested (93 survived, 0 timed out)
Mutation testing 30% (elapsed: ~2m, remaining: ~6m) 308/1018 tested (94 survived, 0 timed out)
Mutation testing 32% (elapsed: ~2m, remaining: ~5m) 328/1018 tested (102 survived, 0 timed out)
Mutation testing 34% (elapsed: ~3m, remaining: ~5m) 348/1018 tested (105 survived, 0 timed out)
Mutation testing 36% (elapsed: ~3m, remaining: ~5m) 367/1018 tested (110 survived, 0 timed out)
Mutation testing 37% (elapsed: ~3m, remaining: ~5m) 386/1018 tested (116 survived, 0 timed out)
Mutation testing 39% (elapsed: ~3m, remaining: ~5m) 406/1018 tested (118 survived, 0 timed out)
Mutation testing 41% (elapsed: ~3m, remaining: ~5m) 425/1018 tested (118 survived, 0 timed out)
Mutation testing 43% (elapsed: ~3m, remaining: ~4m) 444/1018 tested (118 survived, 0 timed out)
Mutation testing 45% (elapsed: ~4m, remaining: ~4m) 463/1018 tested (118 survived, 0 timed out)
Mutation testing 47% (elapsed: ~4m, remaining: ~4m) 483/1018 tested (122 survived, 0 timed out)
Mutation testing 49% (elapsed: ~4m, remaining: ~4m) 502/1018 tested (126 survived, 0 timed out)
Mutation testing 51% (elapsed: ~4m, remaining: ~4m) 521/1018 tested (127 survived, 0 timed out)
Mutation testing 53% (elapsed: ~4m, remaining: ~4m) 540/1018 tested (128 survived, 0 timed out)
Mutation testing 55% (elapsed: ~4m, remaining: ~3m) 560/1018 tested (129 survived, 0 timed out)
Mutation testing 56% (elapsed: ~5m, remaining: ~3m) 579/1018 tested (130 survived, 0 timed out)
Mutation testing 58% (elapsed: ~5m, remaining: ~3m) 598/1018 tested (130 survived, 0 timed out)
Mutation testing 60% (elapsed: ~5m, remaining: ~3m) 617/1018 tested (137 survived, 0 timed out)
Mutation testing 62% (elapsed: ~5m, remaining: ~3m) 637/1018 tested (157 survived, 0 timed out)
Mutation testing 64% (elapsed: ~5m, remaining: ~3m) 656/1018 tested (176 survived, 0 timed out)
Mutation testing 66% (elapsed: ~5m, remaining: ~2m) 675/1018 tested (192 survived, 0 timed out)
Mutation testing 68% (elapsed: ~6m, remaining: ~2m) 695/1018 tested (204 survived, 0 timed out)
Mutation testing 70% (elapsed: ~6m, remaining: ~2m) 714/1018 tested (206 survived, 0 timed out)
Mutation testing 72% (elapsed: ~6m, remaining: ~2m) 733/1018 tested (209 survived, 0 timed out)
Mutation testing 73% (elapsed: ~6m, remaining: ~2m) 752/1018 tested (210 survived, 0 timed out)
Mutation testing 75% (elapsed: ~6m, remaining: ~2m) 772/1018 tested (216 survived, 0 timed out)
Mutation testing 77% (elapsed: ~6m, remaining: ~1m) 791/1018 tested (235 survived, 0 timed out)
Mutation testing 79% (elapsed: ~7m, remaining: ~1m) 811/1018 tested (255 survived, 0 timed out)
Mutation testing 81% (elapsed: ~7m, remaining: ~1m) 830/1018 tested (274 survived, 0 timed out)
Mutation testing 83% (elapsed: ~7m, remaining: ~1m) 849/1018 tested (293 survived, 0 timed out)
Mutation testing 85% (elapsed: ~7m, remaining: ~1m) 869/1018 tested (310 survived, 0 timed out)
Mutation testing 87% (elapsed: ~7m, remaining: ~1m) 888/1018 tested (323 survived, 0 timed out)
Mutation testing 89% (elapsed: ~7m, remaining: <1m) 907/1018 tested (342 survived, 0 timed out)
Mutation testing 91% (elapsed: ~8m, remaining: <1m) 927/1018 tested (351 survived, 0 timed out)
Mutation testing 92% (elapsed: ~8m, remaining: <1m) 946/1018 tested (355 survived, 0 timed out)
Mutation testing 94% (elapsed: ~8m, remaining: <1m) 965/1018 tested (357 survived, 0 timed out)
Mutation testing 96% (elapsed: ~8m, remaining: <1m) 984/1018 tested (362 survived, 0 timed out)
Mutation testing 98% (elapsed: ~8m, remaining: <1m) 1005/1018 tested (369 survived, 0 timed out)

All tests
  ✓ All tests (killed 640)

[Survived] PrecomputedMutator
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return a + b * 0(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return a - b * 0(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return a + b * 1(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:21
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(cos(x)) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:21
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(abs(x) < 1e-8 ? 1 : x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:21
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(sin(x)) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:42
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.sin(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:42
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.tan(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:42
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.log(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:51
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(0) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:51
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(cosh(x) + 1) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:51
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(Complex.ONE.negate()) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:56
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.log(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:56
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.log10(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:56
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.log2(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:65
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-Math.exp(x))) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:65
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(Math.exp(x) - 1)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:21
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(1 / (x - 1)) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:21
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(1 / (x + 1)) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:38
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.log(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:38
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.abs(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:38
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.tanh(x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:47
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x + 1) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:47
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x - 1) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:47
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(-x) - Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:52
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.pow(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:52
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - 1(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(Math.abs(x))) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(x + 1)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(x * 2)) * 0.5;

[Survived] PrecomputedMutator
complex.js:94:22
-       var b = Math.abs(y);
+       var b = Math.abs(-y);

[Survived] PrecomputedMutator
complex.js:96:9
-       if (a < 3000 && b < 3000) {
+       if (a < 3001 || b < 3001) {

[Survived] PrecomputedMutator
complex.js:100:9
-       if (a < b) {
+       if (a === b) {

[Survived] PrecomputedMutator
complex.js:100:9
-       if (a < b) {
+       if (a && b) {

[Survived] PrecomputedMutator
complex.js:106:16
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.exp(1 + b * b);

[Survived] PrecomputedMutator
complex.js:106:16
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.abs(1 + b * b);

[Survived] PrecomputedMutator
complex.js:106:16
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.log(1 + b * b);

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(b * b - 1);

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(1 - b * b);

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(b * b + 1);

[Survived] PrecomputedMutator
complex.js:122:23
-       var _a = Math.abs(a);
+       var _a = Math.abs(a + b);

[Survived] PrecomputedMutator
complex.js:123:14
-       var _b = Math.abs(b);
+       var _b = Math.round(b);

[Survived] PrecomputedMutator
complex.js:123:14
-       var _b = Math.abs(b);
+       var _b = Math.ceil(b);

[Survived] PrecomputedMutator
complex.js:123:14
-       var _b = Math.abs(b);
+       var _b = Math.floor(b);

[Survived] PrecomputedMutator
complex.js:123:23
-       var _b = Math.abs(b);
+       var _b = Math.abs(a + b);

[Survived] PrecomputedMutator
complex.js:123:23
-       var _b = Math.abs(b);
+       var _b = Math.abs(Math.sqrt(a * a + b * b));

[Survived] PrecomputedMutator
complex.js:126:23
-         return Math.log(_b);
+         return Math.log(1 * b);

[Survived] PrecomputedMutator
complex.js:126:23
-         return Math.log(_b);
+         return Math.log(Math.abs(b));

[Survived] PrecomputedMutator
complex.js:129:9
-       if (b === 0) {
+       if (!b) {

[Survived] PrecomputedMutator
complex.js:133:9
-       if (_a < 3000 && _b < 3000) {
+       if (_a + _b < 3000) {

[Survived] PrecomputedMutator
complex.js:133:9
-       if (_a < 3000 && _b < 3000) {
+       if (_a > 3000 || _b < 3000) {

[Survived] PrecomputedMutator
complex.js:172:27
-       return 0.5 * Math.log(a * a + b * b) + Math.LN2;
+       return 0.5 * Math.log(Math.abs(a * a + b * b)) + Math.LN2;

[Survived] PrecomputedMutator
complex.js:190:15
-             if ('im' in a && 're' in a) {
+             if (typeof a['re'] === 'number' && typeof a['im'] === 'number') {

[Survived] PrecomputedMutator
complex.js:193:22
-             } else if ('abs' in a && 'arg' in a) {
+             } else if ('abs' in a || 'arg' in a) {

[Survived] PrecomputedMutator
complex.js:193:22
-             } else if ('abs' in a && 'arg' in a) {
+             } else if (!'abs' in a || 'arg' in a) {

[Survived] PrecomputedMutator
complex.js:197:43
-               z['re'] = a['abs'] * Math.cos(a['arg']);
+               z['re'] = a['abs'] * Math.cos(a.arg);

[Survived] PrecomputedMutator
complex.js:197:43
-               z['re'] = a['abs'] * Math.cos(a['arg']);
+               z['re'] = a['abs'] * Math.cos(a != null ? a.arg : 0);

[Survived] PrecomputedMutator
complex.js:200:34
-               if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
+               if (!Number.isFinite(a['r'] + 1) && Number.isFinite(a['phi'])) {

[Survived] PrecomputedMutator
complex.js:222:15
-             if (tokens === null) {
+             if (!tokens) {

[Survived] PrecomputedMutator
complex.js:242:19
-                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
+                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) && tokens[i + 1] !== null) {

[Survived] PrecomputedMutator
complex.js:242:19
-                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
+                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) && tokens[i + 1].length === 1) {

[Survived] PrecomputedMutator
complex.js:242:19
-                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
+                 if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) && tokens[i + 1].trim() !== '') {

[Survived] PrecomputedMutator
complex.js:243:39
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
+                   z['im'] += parseFloat((minus % 3 ? '-' : '') + tokens[i + 1]);

[Survived] PrecomputedMutator
complex.js:246:28
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
+                   z['im'] += parseInt((minus % 2 ? '-' : '') + '1');

[Survived] PrecomputedMutator
complex.js:246:39
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
+                   z['im'] += parseFloat((minus % 2 ? '-' : '') + 1);

[Survived] PrecomputedMutator
complex.js:252:19
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (plus + minus + 1 == 0 || isNaN(c)) {

[Survived] PrecomputedMutator
complex.js:267:15
-             if (plus + minus > 0) {
+             if (plus > minus) {

[Survived] PrecomputedMutator
complex.js:267:15
-             if (plus + minus > 0) {
+             if (plus % minus) {

[Survived] PrecomputedMutator
complex.js:267:15
-             if (plus + minus > 0) {
+             if (plus - minus) {

[Survived] PrecomputedMutator
complex.js:278:11
-             parser_exit();
+             42();

[Survived] PrecomputedMutator
complex.js:278:11
-             parser_exit();
+             NaN();

[Survived] PrecomputedMutator
complex.js:278:11
-             parser_exit();
+             Infinity();

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isFinite(z['re']) || isFinite(z['im'])) {

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (z['re'] + z['im'] < 0) {

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (z['re'] < 0 && z['im'] < 0) {

[Survived] PrecomputedMutator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (Number.isNaN(z['re']) || isNaN(z['im'])) {

[Survived] PrecomputedMutator
complex.js:281:15
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re'] + z['re']) || isNaN(z['im'])) {

[Survived] PrecomputedMutator
complex.js:281:15
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re'] / 2) || isNaN(z['im'])) {

[Survived] PrecomputedMutator
complex.js:281:33
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re']) || isNaN(Complex['INFINITY'])) {

[Survived] PrecomputedMutator
complex.js:334:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:334:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['isInfinite']() ? z['isInfinite']() : false) {

[Survived] PrecomputedMutator
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isNaN']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() && z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:358:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this.isInfinite() || z.isInfinite()) {

[Survived] PrecomputedMutator
complex.js:358:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['abs']() && z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() && z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() && this['abs']() > z['abs']()) {

[Survived] PrecomputedMutator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isZero']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:382:11
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if (this['isZero']() && !z['isInfinite']() || !this['isZero']() && z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['im'] !== 0())) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['im'] === 0 && z['re'] > 0())) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['re'] > 0 && z['im'] === 0())) {

[Survived] PrecomputedMutator
complex.js:387:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() ^ z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:387:35
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (z['isInfinite']() && this['isZero']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (z['isInfinite']() || this['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (z['isNaN']() && this['isZero']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:432:11
-         if (0 === d) {
+         if (Math.abs(d) < Math.abs(c)) {

[Survived] PrecomputedMutator
complex.js:437:11
-         if (Math.abs(c) < Math.abs(d)) {
+         if (c != d) {

[Survived] PrecomputedMutator
complex.js:437:11
-         if (Math.abs(c) < Math.abs(d)) {
+         if (Math.floor(c) < Math.abs(d)) {

[Survived] PrecomputedMutator
complex.js:437:20
-         if (Math.abs(c) < Math.abs(d)) {
+         if (Math.abs(-c) < Math.abs(d)) {

[Survived] PrecomputedMutator
complex.js:469:11
-         if (z['isZero']()) {
+         if (z['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:476:13
-           if (b === 0 && a > 0) {
+           if (a > b && b === 0) {

[Survived] PrecomputedMutator
complex.js:476:13
-           if (b === 0 && a > 0) {
+           if (!b && a > 0) {

[Survived] PrecomputedMutator
complex.js:484:34
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(a, z['im']), 0);

[Survived] PrecomputedMutator
complex.js:484:34
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['re'] * 2), 0);

[Survived] PrecomputedMutator
complex.js:484:34
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['re'] + 1), 0);

[Survived] PrecomputedMutator
complex.js:484:46
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['re'] + 1), 0);

[Survived] PrecomputedMutator
complex.js:484:46
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, z['im']), 0);

[Survived] PrecomputedMutator
complex.js:484:46
-                 return new Complex(Math.pow(b, z['re']), 0);
+                 return new Complex(Math.pow(b, -z['re']), 0);

[Survived] PrecomputedMutator
complex.js:486:49
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.pow(b, z['im']));

[Survived] PrecomputedMutator
complex.js:486:49
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.pow(b, z * z));

[Survived] PrecomputedMutator
complex.js:486:49
-                 return new Complex(0, Math.pow(b, z['re']));
+                 return new Complex(0, Math.pow(b, z['re'] + z['im']));

[Survived] PrecomputedMutator
complex.js:488:44
-                 return new Complex(-Math.pow(b, z['re']), 0);
+                 return new Complex(-Math.pow(-b, z['re']), 0);

[Survived] PrecomputedMutator
complex.js:488:44
-                 return new Complex(-Math.pow(b, z['re']), 0);
+                 return new Complex(-Math.pow(b * b, z['re']), 0);

[Survived] PrecomputedMutator
complex.js:490:47
-                 return new Complex(0, -Math.pow(b, z['re']));
+                 return new Complex(0, -Math.pow(Math.exp(a) * b, z['re']));

[Survived] PrecomputedMutator
complex.js:514:11
-         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
+         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 1) {

[Survived] PrecomputedMutator
complex.js:570:11
-         if (this['im'] === 0) {
+         if (this['im'] === 0.000001) {

[Survived] PrecomputedMutator
complex.js:570:11
-         if (this['im'] === 0) {
+         if (this['im'] !== 0) {

[Survived] PrecomputedMutator
complex.js:570:11
-         if (this['im'] === 0) {
+         if (Math.abs(this['im']) < 0.000001) {

[Survived] PrecomputedMutator
complex.js:574:24
-           tmp * Math.cos(this['im']),
+           tmp * Math.cos(-this['im']),

[Survived] PrecomputedMutator
complex.js:598:20
-           Math.expm1(a) * Math.cos(b) + cosm1(b),
+           Math.expm1(Math.abs(a)) * Math.cos(b) + cosm1(b),

[Survived] PrecomputedMutator
complex.js:598:34
-           Math.expm1(a) * Math.cos(b) + cosm1(b),
+           Math.expm1(a) * Math.cos(-b) + cosm1(b),

[Survived] PrecomputedMutator
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (a > b && a > 0) {

[Survived] PrecomputedMutator
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (a > 0 && b === 0) {

[Survived] PrecomputedMutator
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (a > 0 && b === 0 || a < 0 && b === 0) {

[Survived] PrecomputedMutator
complex.js:628:32
-         return hypot(this['re'], this['im']);
+         return hypot(this['re'], this.im);

[Survived] PrecomputedMutator
complex.js:655:28
-           Math.sin(a) * cosh(b),
+           Math.sin(a) * cosh(-b),

[Survived] PrecomputedMutator
complex.js:691:24
-         var d = Math.cos(a) + cosh(b);
+         var d = Math.cos(-a) + cosh(b);

[Survived] PrecomputedMutator
complex.js:709:34
-         var d = Math.cos(a) - cosh(b);
+         var d = Math.cos(a) - cosh(-b);

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * 2 * b(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * 2 * a(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * b * a(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(b + 1) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(a + b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(a - b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * c);

[Survived] PrecomputedMutator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(a + b);

[Survived] PrecomputedMutator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(Math.Max(a, b));

[Survived] PrecomputedMutator
complex.js:730:9
-           Math.cos(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:9
-           Math.cos(a) * cosh(b) / d,
+           Math.tan(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:9
-           Math.cos(a) * cosh(b) / d,
+           Math.sqrt(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:18
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a + b) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:18
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a - b) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:23
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * sinh(b) / d,

[Survived] PrecomputedMutator
complex.js:730:23
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cot(b) / d,

[Survived] PrecomputedMutator
complex.js:730:28
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(a + b) / d,

[Survived] PrecomputedMutator
complex.js:730:28
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(a - b) / d,

[Survived] PrecomputedMutator
complex.js:730:28
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(b * 2) / d,

[Survived] PrecomputedMutator
complex.js:731:9
-           Math.sin(a) * sinh(b) / d);
+           Math.cos(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:18
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(-Math.sin(a) * sin(a) * cos(b)) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:18
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(0.5 * Math.sin(a) * cos(b)) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:23
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * sin(b) / d);

[Survived] PrecomputedMutator
complex.js:731:23
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * cos(b) / d);

[Survived] PrecomputedMutator
complex.js:731:23
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * tan(b) / d);

[Survived] PrecomputedMutator
complex.js:745:21
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * sinh(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(Math.tan(a));

[Survived] PrecomputedMutator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(a + b);

[Survived] PrecomputedMutator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(Math.asin(a));

[Survived] PrecomputedMutator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.cos(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.sqrt(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.PI(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:18
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(-a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:18
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(b) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:18
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(2 * a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(a) / d,

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b * a) / d,

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b ^ a) / d,

[Survived] PrecomputedMutator
complex.js:749:10
-           -Math.cos(a) * sinh(b) / d);
+           --Math.cos(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:10
-           -Math.cos(a) * sinh(b) / d);
+           -1 / Math.cos(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:10
-           -Math.cos(a) * sinh(b) / d);
+           -Math.sin(a) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(Math.cos(a) * sinh(b)) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(Math.sin(a) * cos(b)) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(Math.sin(b) * cos(a)) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:24
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * cosh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:24
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * tanh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:24
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * cis(b) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(new Complex(Math.sin(a) * sinh(b), Math.cos(a) * cosh(b))) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b))) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(new Complex(Math.sin(a) * cosh(b), Math.cos(a) * -sinh(b))) / d);

[Survived] PrecomputedMutator
complex.js:816:13
-           if (b === -1) {
+           if (b === 1.1) {

[Survived] PrecomputedMutator
complex.js:816:13
-           if (b === -1) {
+           if (b !== 1.1) {

[Survived] PrecomputedMutator
complex.js:816:13
-           if (b === -1) {
+           if (b === 0) {

[Survived] PrecomputedMutator
complex.js:842:11
-         if (b === 0) {
+         if (b !== 0) {

[Survived] PrecomputedMutator
complex.js:842:11
-         if (b === 0) {
+         if (b === 1) {

[Survived] PrecomputedMutator
complex.js:842:11
-         if (b === 0) {
+         if (b !== undefined) {

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(0, a), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, -a), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(a, 0), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan(1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.acos(1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.sin(1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(0, a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(-1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(a + 1, a), 0);

[Survived] PrecomputedMutator
complex.js:843:42
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, -b), 0);

[Survived] PrecomputedMutator
complex.js:843:42
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, 2 * a), 0);

[Survived] PrecomputedMutator
complex.js:843:42
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(1, a + b), 0);

[Survived] PrecomputedMutator
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (a != 0 && b != 0) {

[Survived] PrecomputedMutator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a == 0 & b == 0) {

[Survived] PrecomputedMutator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] PrecomputedMutator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a !== 0 && b !== 0) {

[Survived] PrecomputedMutator
complex.js:921:9
-           sinh(a) * Math.cos(b),
+           Math.sinh(a) * Math.cos(b),

[Survived] PrecomputedMutator
complex.js:922:14
-           cosh(a) * Math.sin(b));
+           cosh(-a) * Math.sin(b));

[Survived] PrecomputedMutator
complex.js:938:14
-           cosh(a) * Math.cos(b),
+           cosh(a - 2) * Math.cos(b),

[Survived] PrecomputedMutator
complex.js:938:28
-           cosh(a) * Math.cos(b),
+           cosh(a) * Math.cos(a * b),

[Survived] PrecomputedMutator
complex.js:953:20
-         var d = cosh(a) + Math.cos(b);
+         var d = cosh(-a) + Math.cos(b);

[Survived] PrecomputedMutator
complex.js:953:34
-         var d = cosh(a) + Math.cos(b);
+         var d = cosh(a) + Math.cos(-b);

[Survived] PrecomputedMutator
complex.js:971:34
-         var d = cosh(a) - Math.cos(b);
+         var d = cosh(a) - Math.cos(-b);

[Survived] PrecomputedMutator
complex.js:989:15
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.tan(2 * b) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * a) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(1) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(2 * b);

[Survived] PrecomputedMutator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(Math.random() * 2 * a);

[Survived] PrecomputedMutator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(a + 2 * b);

[Survived] PrecomputedMutator
complex.js:992:14
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * cosh(a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:19
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a * 2) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:19
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(b / a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:19
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a + 1) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:992:24
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * this['im'] * Math.PI(b) / d,

[Survived] PrecomputedMutator
complex.js:992:33
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * Math.cos(a) / d,

[Survived] PrecomputedMutator
complex.js:992:33
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * Math.cos(1 + b) / d,

[Survived] PrecomputedMutator
complex.js:993:13
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * coth(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:13
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * sinh(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:13
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * tanh(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(-a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a + 1) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a + b) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:993:23
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:993:23
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.cosh(b) / d);

[Survived] PrecomputedMutator
complex.js:993:23
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.tanh(b) / d);

[Survived] PrecomputedMutator
complex.js:993:32
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.sin(-infinity) / d);

[Survived] PrecomputedMutator
complex.js:993:32
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.sin(NaN) / d);

[Survived] PrecomputedMutator
complex.js:993:32
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.sin(Math.ceil(b)) / d);

[Survived] PrecomputedMutator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.tan(2 * b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.sin(2 * b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cosh(2 * b) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:24
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(to) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(a + 1);

[Survived] PrecomputedMutator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(sinh(a) * Math.cos(b));

[Survived] PrecomputedMutator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(this.im);

[Survived] PrecomputedMutator
complex.js:1010:18
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a + 1) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:18
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a * Math.PI) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:23
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:23
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.acos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:23
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * 10000 * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:1010:32
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(b + 1) / d,

[Survived] PrecomputedMutator
complex.js:1010:32
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(b - 1) / d,

[Survived] PrecomputedMutator
complex.js:1010:32
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(b * 2) / d,

[Survived] PrecomputedMutator
complex.js:1011:14
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * cosh(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:14
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * asinh(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:14
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * tanh(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(1) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh('string') * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(new Complex(1, 2)) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:24
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.cos(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:24
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * x * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:33
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(c) / d);

[Survived] PrecomputedMutator
complex.js:1011:33
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(-b) / d);

[Survived] PrecomputedMutator
complex.js:1011:33
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(1 / b) / d);

[Survived] PrecomputedMutator
complex.js:1026:17
-         var res = this['asin']();
+         var res = this['asinh']();

[Survived] PrecomputedMutator
complex.js:1026:17
-         var res = this['asin']();
+         var res = this['acosh']();

[Survived] PrecomputedMutator
complex.js:1026:17
-         var res = this['asin']();
+         var res = this['atanh']();

[Survived] PrecomputedMutator
complex.js:1046:17
-         var res = this['acos']();
+         var res = this['ones']();

[Survived] PrecomputedMutator
complex.js:1046:17
-         var res = this['acos']();
+         var res = this['sin']();

[Survived] PrecomputedMutator
complex.js:1046:17
-         var res = this['acos']();
+         var res = this['acosh']();

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (res['im'] >= 0) {

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (res['acosh'] <= 0) {

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (Math.abs(res['im']) <= 0) {

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['im'], x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['im'] + x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(-x['im'] * x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logMinus(x['re'], x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logPlus(x['re'], x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logOne(x['re'], x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], 2 * x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], x['im'] + 1) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['re'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(temp, x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], x['re']) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.acos(x['im'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.acot(x['im'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.acsc(x['im'], temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(1, temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(-1, temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(a + b, temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], !temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], temp + 1) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], Math.random() * temp) / 2;

[Survived] PrecomputedMutator
complex.js:1087:11
-         if (noIM) {
+         if (!noIM) {

[Survived] PrecomputedMutator
complex.js:1087:11
-         if (noIM) {
+         if (noIM = false) {

[Survived] PrecomputedMutator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a !== 1 && b === 0) {

[Survived] PrecomputedMutator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] PrecomputedMutator
complex.js:1135:15
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.tan(a + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:15
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.sin(a + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:15
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.cos(a + Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a - Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a * Math.sqrt(a * a + 1))

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(Math.sqrt(a * a + 1) - a)

[Survived] PrecomputedMutator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(a * b + 1))

[Survived] PrecomputedMutator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(a * 1 + b * b))

[Survived] PrecomputedMutator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(Math.sqrt(a)))

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (this['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (!this['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (this['isNaN']()) {

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (!this['isZero']()) {

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (1 + this['isZero']()) {

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (this['isOne']()) {

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.exp(10, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(9, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(0, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(Infinity, places || 0);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places ^ 0);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places * 0);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, -places || 0);

[Survived] PrecomputedMutator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.floor(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.round(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.abs(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(this['im'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(this['re'] - places) / places,

[Survived] PrecomputedMutator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(this['im'] + places) / places,

[Survived] PrecomputedMutator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           a < b(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           Math.floor(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           Math.sqrt(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:19
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(Complex['ZERO'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:19
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(this['re'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1230:19
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(Math.random() * places) / places);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(Math.pow(10, places || 1));

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(Math.pow(10, places + 1));

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.sqrt(10, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.max(10, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(0, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(a, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:25
-         places = Math.pow(10, places || 0);
+         places = Math.pow(-b, places || 0);

[Survived] PrecomputedMutator
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places && 0);

[Survived] PrecomputedMutator
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places ? 0 : places);

[Survived] PrecomputedMutator
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, Math.min(places, 0));

[Survived] PrecomputedMutator
complex.js:1243:9
-           Math.floor(this['re'] * places) / places,
+           Math.ceil(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1243:9
-           Math.floor(this['re'] * places) / places,
+           Math.round(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1243:9
-           Math.floor(this['re'] * places) / places,
+           Math.abs(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.ceil(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.round(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.abs(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(a / b) / places);

[Survived] PrecomputedMutator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(a % b) / places);

[Survived] PrecomputedMutator
complex.js:1257:9
-           Math.round(this['re'] * places) / places,
+           Math.floor(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1257:9
-           Math.round(this['re'] * places) / places,
+           Math.ceil(this['re'] * places) / places,

[Survived] PrecomputedMutator
complex.js:1258:9
-           Math.round(this['im'] * places) / places);
+           Math.floor(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1258:9
-           Math.round(this['im'] * places) / places);
+           Math.ceil(this['im'] * places) / places);

[Survived] PrecomputedMutator
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.floor(z['re'] - this['re']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.ceil(z['re'] - this['re']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1272:23
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] &&

[Survived] PrecomputedMutator
complex.js:1301:11
-         if (this['isInfinite']()) {
+         if (this.isInfinite()) {

[Survived] PrecomputedMutator
complex.js:1305:20
-         if (Math.abs(a) < Complex['EPSILON']) {
+         if (Math.abs(a * Math.random()) < Complex['EPSILON']) {

[Survived] PrecomputedMutator
complex.js:1309:20
-         if (Math.abs(b) < Complex['EPSILON']) {
+         if (Math.abs(this['im']) < Complex['EPSILON']) {

[Survived] PrecomputedMutator
complex.js:1356:11
-         if (this['im'] === 0) {
+         if (this['re'] !== 0) {

[Survived] PrecomputedMutator
complex.js:1368:20
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['im']) || isNaN(this['im']);

[Survived] PrecomputedMutator
complex.js:1368:20
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(Complex['INFINITY']['re']) || isNaN(this['im']);

[Survived] PrecomputedMutator
complex.js:1368:41
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) || isNaN(this['im'] * 2);

[Survived] PrecomputedMutator
complex.js:1368:41
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) || isNaN(this['im'] + 1);

[Survived] PrecomputedMutator
complex.js:1368:41
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) || isNaN(this['im'] > 0);

[Survived] PrecomputedMutator
complex.js:1388:23
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['re'] + this['im']) && isFinite(this['im']);

[Survived] PrecomputedMutator
complex.js:1388:23
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['re'] * this['im']) && isFinite(this['im']);

[Survived] PrecomputedMutator
complex.js:1388:47
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['re']) && isFinite(this['im'] * 2);

[Survived] PrecomputedMutator
complex.js:1388:47
-         return isFinite(this['re']) && isFinite(this['im']);
+         return isFinite(this['re']) && isFinite(Math.abs(this['im']));

[Survived] PrecomputedMutator
complex.js:1398:16
-         return !(this['isNaN']() || this['isFinite']());
+         return !(this['isFinite']() || this['isFinite']());

[Survived] PrecomputedMutator
complex.js:1411:7
-     if (typeof define === 'function' && define['amd']) {
+     if (typeof define === 'function' && define['amd'] === false) {

[Survived] PrecomputedMutator
complex.js:1416:5
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': false
+   });

[Survived] PrecomputedMutator
complex.js:1416:5
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': NaN
+   });

[Survived] PrecomputedMutator
complex.js:1416:5
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': undefined
+   });

[Survived] PrecomputedMutator
complex.js:1416:27
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty({}, "__esModule", { 'value': true });

[Survived] PrecomputedMutator
complex.js:1416:36
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "wasFlipped", { 'value': true });

[Survived] PrecomputedMutator
complex.js:1416:36
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "flipped", { 'value': true });

[Survived] PrecomputedMutator
complex.js:1416:36
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "add", { 'value': true });

[Survived] PrecomputedMutator
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': false
+   });

[Survived] PrecomputedMutator
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     'value': NaN
+   });

Ran 1.00 tests per mutant on average.
------------|---------|----------|-----------|------------|----------|----------|
File        | % score | # killed | # timeout | # survived | # no cov | # errors |
------------|---------|----------|-----------|------------|----------|----------|
All files   |   62.87 |      640 |         0 |        378 |        0 |        0 |
 complex.js |   62.87 |      640 |         0 |        378 |        0 |        0 |
------------|---------|----------|-----------|------------|----------|----------|
[32m13:02:55 (2817) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/reports/mutation/mutation.html
[32m13:02:55 (2817) INFO MutationTestExecutor[39m Done in 8 minutes 50 seconds.

real	8m51.509s
user	9m1.394s
sys	1m33.634s
