*** using precomputed mutations ***
[32m02:29:18 (2761) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m02:29:18 (2761) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m02:29:18 (2761) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m02:29:19 (2761) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m02:29:19 (2761) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m02:29:19 (2761) INFO ProjectReader[39m Found 1 of 1982 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 184 mutants from MUTATION_TESTING/template-basic_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in complex.js: Math.abs replaced with 1
Mutant 1 in complex.js: Math.exp replaced with -x
Mutant 2 in complex.js: Math.exp replaced with -x
Mutant 3 in complex.js: -x replaced with -Math.exp(-x)
Mutant 4 in complex.js: -b > x || x > b replaced with Math.abs(x) < 1e-9
Mutant 5 in complex.js: Math.abs replaced with a
Mutant 6 in complex.js: x replaced with a
Mutant 7 in complex.js: Math.abs replaced with b * b
Mutant 8 in complex.js: y replaced with b
Mutant 9 in complex.js: a < 3000 && b < 3000 replaced with a < b
Mutant 10 in complex.js: a < b replaced with a > b
Mutant 11 in complex.js: 1 + b * b replaced with 1 - b * b / a * a
Mutant 12 in complex.js: SyntaxError replaced with 'Invalid Param'
Mutant 13 in complex.js: 'Invalid Param' replaced with "Invalid argument for Complex constructor"
Mutant 14 in complex.js: Math.abs replaced with a
Mutant 15 in complex.js: b replaced with _b
Mutant 16 in complex.js: a === 0 replaced with _a < 3000 && _b < 3000
Mutant 17 in complex.js: _b replaced with _a
Mutant 18 in complex.js: b === 0 replaced with _a < 3000 && _b < 3000
Mutant 19 in complex.js: _a replaced with _b
Mutant 20 in complex.js: _a < 3000 && _b < 3000 replaced with _a > _b
Mutant 21 in complex.js: a * a + b * b replaced with hypot(a, b)
Mutant 22 in complex.js: 'im' in a && 're' in a replaced with 'abs' in a && 'arg' in a
Mutant 23 in complex.js: 'abs' in a && 'arg' in a replaced with a['abs'] !== undefined && a['arg'] !== undefined
Mutant 24 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with plus % 2 === 1
Mutant 25 in complex.js: a['abs'] replaced with a['arg']
Mutant 26 in complex.js: a['arg'] replaced with a['phi']
Mutant 27 in complex.js: a['arg'] replaced with a['phi']
Mutant 28 in complex.js: 'r' in a && 'phi' in a replaced with c === 'r' || c === 'R'
Mutant 29 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with minus % 2 === 1
Mutant 30 in complex.js: a['r'] replaced with c
Mutant 31 in complex.js: a['phi'] replaced with tokens[i + 1]
Mutant 32 in complex.js: a.length === 2 replaced with Array.isArray(a)
Mutant 33 in complex.js: a.match replaced with /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g
Mutant 34 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g
Mutant 35 in complex.js: tokens === null replaced with tokens[i + 1] === ' ' || tokens[i + 1] === '\t' || tokens[i + 1] === '\n'
Mutant 36 in complex.js: i < tokens.length replaced with i
Mutant 37 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with c === '+' || c === '-'
Mutant 38 in complex.js: c === 'i' || c === 'I' replaced with c !== 'i' && c !== 'I'
Mutant 39 in complex.js: plus + minus === 0 replaced with z['im'] !== 0
Mutant 40 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with tokens[i + 1] === 'i' || tokens[i + 1] === 'I'
Mutant 41 in complex.js: tokens[i + 1] replaced with z['im']
Mutant 42 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with c
Mutant 43 in complex.js: (minus % 2 ? '-' : '') + '1' replaced with c
Mutant 44 in complex.js: c replaced with z['re']
Mutant 45 in complex.js: parseFloat replaced with this['re'] + z['re']
Mutant 46 in complex.js: (minus % 2 ? '-' : '') + c replaced with c
Mutant 47 in complex.js: plus + minus > 0 replaced with z['im'] !== 0
Mutant 48 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with this['isNaN']() || z['isNaN']()
Mutant 49 in complex.js: isNaN replaced with z['re'] !== 0 || z['im'] !== 0
Mutant 50 in complex.js: z['re'] replaced with this['re']
Mutant 51 in complex.js: isNaN replaced with z['im'] !== 0
Mutant 52 in complex.js: !(this instanceof Complex) replaced with this instanceof Complex
Mutant 53 in complex.js: parse(a, b) replaced with parse(this)
Mutant 54 in complex.js: a replaced with this
Mutant 55 in complex.js: b replaced with this
Mutant 56 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']()
Mutant 57 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with a === 0 && b === 0
Mutant 58 in complex.js: this['isInfinite'] replaced with z['re'] === 0
Mutant 59 in complex.js: z['isZero'] replaced with z['re'] === 0
Mutant 60 in complex.js: this['isZero'] replaced with z['re'] === 0
Mutant 61 in complex.js: z['isInfinite'] replaced with z['re'] === 0
Mutant 62 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isZero']()
Mutant 63 in complex.js: this['isInfinite'] replaced with z['re'] === 0
Mutant 64 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with this['re'] === 0 && this['im'] === 0 || z['re'] === 0 && z['im'] === 0
Mutant 65 in complex.js: this['isInfinite']() || z['isZero']() replaced with this['isInfinite']() && z['isZero']()
Mutant 66 in complex.js: this['isZero']() || z['isInfinite']() replaced with z['im'] === 0 && this['im'] === 0
Mutant 67 in complex.js: 0 === d replaced with c === 0
Mutant 68 in complex.js: Math.abs(c) < Math.abs(d) replaced with z['re'] > 0
Mutant 69 in complex.js: c replaced with Math.abs(a)
Mutant 70 in complex.js: d replaced with a
Mutant 71 in complex.js: z['isZero']() replaced with z['re'] === 0 && z['im'] === 0
Mutant 72 in complex.js: z['im'] === 0 replaced with z['isReal']()
Mutant 73 in complex.js: b === 0 && a > 0 replaced with z['re'] > 0 && z['im'] >= 0
Mutant 74 in complex.js: Math.pow(a, z['re']) replaced with Math.pow(a)
Mutant 75 in complex.js: a === 0 replaced with z['re'] === 0 && z['im'] === 0
Mutant 76 in complex.js: (z['re'] % 4 + 4) % 4 replaced with (z['re'] + 1) % 4
Mutant 77 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b)
Mutant 78 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b)
Mutant 79 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b)
Mutant 80 in complex.js: b replaced with a
Mutant 81 in complex.js: Math.pow(b, z['re']) replaced with Math.pow(b)
Mutant 82 in complex.js: b replaced with a
Mutant 83 in complex.js: Math.atan2(b, a) replaced with Math.atan2(b)
Mutant 84 in complex.js: a replaced with b
Mutant 85 in complex.js: logHypot(a, b) replaced with logHypot(a * a + b * b)
Mutant 86 in complex.js: a replaced with Math.sqrt(a * a + b * b)
Mutant 87 in complex.js: z['re'] * loh - z['im'] * arg replaced with a * Math.log(r) - b * arg(z_1)
Mutant 88 in complex.js: b replaced with b * Math.log(a)
Mutant 89 in complex.js: a >= 0 replaced with a <= 0
Mutant 90 in complex.js: b === 0 replaced with a === 0 && b === 0
Mutant 91 in complex.js: 2.0 * (r + a) replaced with a * a + b * b
Mutant 92 in complex.js: b replaced with Math.expm1(a) * Math.cos(b) + cosm1(b)
Mutant 93 in complex.js: 2 * (r - a) replaced with 2 * (r + a)
Mutant 94 in complex.js: a <= 0 replaced with b < 0
Mutant 95 in complex.js: 2.0 * (r - a) replaced with 2 * (r - a)
Mutant 96 in complex.js: b replaced with Math.sin(a) * Math.cosh(b) + Math.cos(a) * Math.sinh(b)
Mutant 97 in complex.js: 2 * (r + a) replaced with 2 * (r - a)
Mutant 98 in complex.js: this['re'] replaced with this['im']
Mutant 99 in complex.js: this['im'] === 0 replaced with b === 0
Mutant 100 in complex.js: this['im'] replaced with b
Mutant 101 in complex.js: a replaced with a + b
Mutant 102 in complex.js: a replaced with Math.exp(a) * Math.sin(b)
Mutant 103 in complex.js: b === 0 && a > 0 replaced with a === 0 && b === 0
Mutant 104 in complex.js: logHypot(a, b) replaced with logHypot(a + b)
Mutant 105 in complex.js: Math.atan2(b, a) replaced with Math.atan2(b)
Mutant 106 in complex.js: hypot(this['re'], this['im']) replaced with hypot(a * b)
Mutant 107 in complex.js: this['re'] replaced with hypot(a, b)
Mutant 108 in complex.js: Math.atan2(this['im'], this['re']) replaced with Math.atan2(b)
Mutant 109 in complex.js: this['im'] replaced with b
Mutant 110 in complex.js: this['re'] replaced with a
Mutant 111 in complex.js: a replaced with b
Mutant 112 in complex.js: a replaced with b
Mutant 113 in complex.js: b replaced with -Math.sinh(b)
Mutant 114 in complex.js: b replaced with -b
Mutant 115 in complex.js: b replaced with -b
Mutant 116 in complex.js: cosh replaced with 2 * b
Mutant 117 in complex.js: Math.cos replaced with 2 * a
Mutant 118 in complex.js: Math.cos replaced with Math.PI / 2
Mutant 119 in complex.js: a replaced with -Math.cos(a)
Mutant 120 in complex.js: b replaced with -b
Mutant 121 in complex.js: cosh replaced with 2 * b
Mutant 122 in complex.js: Math.cos replaced with 2 * a
Mutant 123 in complex.js: b replaced with -b
Mutant 124 in complex.js: a replaced with -b
Mutant 125 in complex.js: b replaced with -b
Mutant 126 in complex.js: a === 0 replaced with b !== 0
Mutant 127 in complex.js: Math.atan2(1, a) replaced with Math.atan2(a)
Mutant 128 in complex.js: 1 replaced with a
Mutant 129 in complex.js: a replaced with -b
Mutant 130 in complex.js: a replaced with sinh(a)
Mutant 131 in complex.js: b replaced with -Math.sin(b)
Mutant 132 in complex.js: b replaced with 2 * b
Mutant 133 in complex.js: Math.sin replaced with -b
Mutant 134 in complex.js: b replaced with -b
Mutant 135 in complex.js: 2 * b replaced with 2 * Math.PI
Mutant 136 in complex.js: cosh replaced with 2 * a
Mutant 137 in complex.js: sinh replaced with a
Mutant 138 in complex.js: a replaced with 2 * a
Mutant 139 in complex.js: 2 * b replaced with Math.PI
Mutant 140 in complex.js: cosh replaced with 2 * a
Mutant 141 in complex.js: sinh replaced with -b
Mutant 142 in complex.js: a replaced with -b
Mutant 143 in complex.js: res['im'] <= 0 replaced with a > 1 && b === 0
Mutant 144 in complex.js: logHypot(x['re'], x['im']) replaced with logHypot(d)
Mutant 145 in complex.js: x['re'] replaced with Math.sqrt(1 + d)
Mutant 146 in complex.js: x['im'] replaced with b
Mutant 147 in complex.js: Math.atan2(x['im'], temp) replaced with Math.atan2(b)
Mutant 148 in complex.js: x['im'] replaced with b
Mutant 149 in complex.js: temp replaced with x['im']
Mutant 150 in complex.js: noIM replaced with a !== 0 ? -b / a : 0
Mutant 151 in complex.js: a === 0 && b === 0 replaced with a === 1 && b === 0
Mutant 152 in complex.js: b === 0 replaced with a === 0 && b === 0
Mutant 153 in complex.js: a + Math.sqrt(a * a + 1) replaced with Math.abs(a)
Mutant 154 in complex.js: a * a + 1 replaced with 1 + c
Mutant 155 in complex.js: this['isZero'] replaced with b === 0
Mutant 156 in complex.js: this['isZero']() replaced with this['isInfinite']()
Mutant 157 in complex.js: this['isInfinite']() replaced with this['isZero']()
Mutant 158 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10)
Mutant 159 in complex.js: places || 0 replaced with 10
Mutant 160 in complex.js: this['im'] * places replaced with b
Mutant 161 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10)
Mutant 162 in complex.js: this['re'] * places replaced with this['im']
Mutant 163 in complex.js: this['im'] * places replaced with b
Mutant 164 in complex.js: Math.pow(10, places || 0) replaced with Math.pow(10)
Mutant 165 in complex.js: places || 0 replaced with Math.abs(this['im'])
Mutant 166 in complex.js: this['re'] * places replaced with this['im']
Mutant 167 in complex.js: this['im'] * places replaced with b
Mutant 168 in complex.js: z['re'] - this['re'] replaced with Math.abs(z['re'] - this['re']) <= Complex['EPSILON']
Mutant 169 in complex.js: z['im'] - this['im'] replaced with Math.abs(z['im'] - this['im'])
Mutant 170 in complex.js: this['isNaN']() replaced with this['isInfinite']()
Mutant 171 in complex.js: this['isInfinite']() replaced with b === Infinity
Mutant 172 in complex.js: a replaced with Math.abs(this['im'])
Mutant 173 in complex.js: b === 0 replaced with this['im'] === 0
Mutant 174 in complex.js: a !== 0 replaced with b !== 0
Mutant 175 in complex.js: b < 0 replaced with b > 0
Mutant 176 in complex.js: b < 0 replaced with b !== 0
Mutant 177 in complex.js: 1 !== b replaced with b === Math.abs(b)
Mutant 178 in complex.js: this['im'] === 0 replaced with this['re'] !== 0
Mutant 179 in complex.js: this['isFinite'] replaced with this['im'] !== 0
Mutant 180 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define === 'function' && define.amd
Mutant 181 in complex.js: typeof exports === 'object' replaced with typeof exports === 'object' && typeof module === 'object'
Mutant 182 in complex.js: Complex replaced with 'exports'
Mutant 183 in complex.js: {
  'value': true
} replaced with {
  value: true
}
[32m02:29:19 (2761) INFO Instrumenter[39m Instrumented 1 source file(s) with 184 mutant(s)
[32m02:29:19 (2761) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m02:29:21 (2761) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m02:29:21 (2761) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m02:29:21 (2761) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 513 ms, overhead 2 ms).
Mutation testing 10% (elapsed: <1m, remaining: ~1m) 19/184 tested (6 survived, 0 timed out)
Mutation testing 21% (elapsed: <1m, remaining: ~1m) 39/184 tested (10 survived, 0 timed out)
Mutation testing 32% (elapsed: <1m, remaining: ~1m) 59/184 tested (12 survived, 0 timed out)
Mutation testing 42% (elapsed: <1m, remaining: <1m) 78/184 tested (17 survived, 0 timed out)
Mutation testing 53% (elapsed: <1m, remaining: <1m) 98/184 tested (19 survived, 0 timed out)
Mutation testing 64% (elapsed: ~1m, remaining: <1m) 118/184 tested (23 survived, 0 timed out)
Mutation testing 75% (elapsed: ~1m, remaining: <1m) 138/184 tested (36 survived, 0 timed out)
Mutation testing 85% (elapsed: ~1m, remaining: <1m) 158/184 tested (54 survived, 0 timed out)
Mutation testing 96% (elapsed: ~1m, remaining: <1m) 178/184 tested (61 survived, 0 timed out)

All tests
  ✓ All tests (killed 119)

[Survived] PrecomputedMutator
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return 1(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:41:56
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + -x(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:52
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - -x(-x)) * 0.5;

[Survived] PrecomputedMutator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-Math.exp(-x))) * 0.5;

[Survived] PrecomputedMutator
complex.js:100:9
-       if (a < b) {
+       if (a > b) {

[Survived] PrecomputedMutator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(1 - b * b / a * a);

[Survived] PrecomputedMutator
complex.js:133:9
-       if (_a < 3000 && _b < 3000) {
+       if (_a > _b) {

[Survived] PrecomputedMutator
complex.js:193:22
-             } else if ('abs' in a && 'arg' in a) {
+             } else if (a['abs'] !== undefined && a['arg'] !== undefined) {

[Survived] PrecomputedMutator
complex.js:205:22
-             } else if (a.length === 2) { // Quick array check
+             } else if (Array.isArray(a)) { // Quick array check

[Survived] PrecomputedMutator
complex.js:222:15
-             if (tokens === null) {
+             if (tokens[i + 1] === ' ' || tokens[i + 1] === '\t' || tokens[i + 1] === '\n') {

[Survived] PrecomputedMutator
complex.js:252:47
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (plus + minus === 0 || isNaN(z['re'])) {

[Survived] PrecomputedMutator
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']()) {

[Survived] PrecomputedMutator
complex.js:382:75
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['re'] === 0())) {

[Survived] PrecomputedMutator
complex.js:416:11
-         if (this['isInfinite']() || z['isZero']()) {
+         if (this['isInfinite']() && z['isZero']()) {

[Survived] PrecomputedMutator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (z['im'] === 0 && this['im'] === 0) {

[Survived] PrecomputedMutator
complex.js:469:11
-         if (z['isZero']()) {
+         if (z['re'] === 0 && z['im'] === 0) {

[Survived] PrecomputedMutator
complex.js:480:20
-           } else if (a === 0) { // If base is fully imaginary
+           } else if (z['re'] === 0 && z['im'] === 0) { // If base is fully imaginary

[Survived] PrecomputedMutator
complex.js:543:13
-           if (b === 0) {
+           if (a === 0 && b === 0) {

[Survived] PrecomputedMutator
complex.js:553:30
-           im = 0.5 * Math.sqrt(2.0 * (r - a));
+           im = 0.5 * Math.sqrt(2 * (r - a));

[Survived] PrecomputedMutator
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (a === 0 && b === 0) {

[Survived] PrecomputedMutator
complex.js:709:34
-         var d = Math.cos(a) - cosh(b);
+         var d = Math.cos(a) - cosh(-b);

[Survived] PrecomputedMutator
complex.js:727:21
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * 2 * b(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:727:41
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * 2 * a(2 * a);

[Survived] PrecomputedMutator
complex.js:730:9
-           Math.cos(a) * cosh(b) / d,
+           Math.PI / 2(a) * cosh(b) / d,

[Survived] PrecomputedMutator
complex.js:731:18
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(-Math.cos(a)) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:731:28
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * sinh(-b) / d);

[Survived] PrecomputedMutator
complex.js:745:21
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * 2 * b(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] PrecomputedMutator
complex.js:745:41
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * 2 * a(2 * a);

[Survived] PrecomputedMutator
complex.js:748:28
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(-b) / d,

[Survived] PrecomputedMutator
complex.js:749:19
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(-b) * sinh(b) / d);

[Survived] PrecomputedMutator
complex.js:749:29
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(-b) / d);

[Survived] PrecomputedMutator
complex.js:843:28
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(a), 0);

[Survived] PrecomputedMutator
complex.js:843:39
-           return new Complex(Math.atan2(1, a), 0);
+           return new Complex(Math.atan2(a, a), 0);

[Survived] PrecomputedMutator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * Math.PI) - cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:989:33
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - 2 * a(2 * a);

[Survived] PrecomputedMutator
complex.js:992:14
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * a(a) * Math.cos(b) / d,

[Survived] PrecomputedMutator
complex.js:993:18
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(2 * a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1007:24
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(Math.PI) + cosh(2 * a);

[Survived] PrecomputedMutator
complex.js:1007:33
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + 2 * a(2 * a);

[Survived] PrecomputedMutator
complex.js:1011:14
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * -b(a) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1011:19
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(-b) * Math.sin(b) / d);

[Survived] PrecomputedMutator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (a > 1 && b === 0) {

[Survived] PrecomputedMutator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(d) / 2;

[Survived] PrecomputedMutator
complex.js:1085:26
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(Math.sqrt(1 + d), x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1085:35
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], b) / 2;

[Survived] PrecomputedMutator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(b) / 2;

[Survived] PrecomputedMutator
complex.js:1086:28
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(b, temp) / 2;

[Survived] PrecomputedMutator
complex.js:1086:37
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], x['im']) / 2;

[Survived] PrecomputedMutator
complex.js:1087:11
-         if (noIM) {
+         if (a !== 0 ? -b / a : 0) {

[Survived] PrecomputedMutator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a === 1 && b === 0) {

[Survived] PrecomputedMutator
complex.js:1131:11
-         if (b === 0) {
+         if (a === 0 && b === 0) {

[Survived] PrecomputedMutator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(Math.abs(a))

[Survived] PrecomputedMutator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(1 + c))

[Survived] PrecomputedMutator
complex.js:1161:11
-         if (this['isZero']()) {
+         if (b === 0()) {

[Survived] PrecomputedMutator
complex.js:1226:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10);

[Survived] PrecomputedMutator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, 10);

[Survived] PrecomputedMutator
complex.js:1230:19
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(b) / places);

[Survived] PrecomputedMutator
complex.js:1240:16
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10);

[Survived] PrecomputedMutator
complex.js:1243:20
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this['im']) / places,

[Survived] PrecomputedMutator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(b) / places);

[Survived] PrecomputedMutator
complex.js:1273:18
-           Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
+           Math.abs(Math.abs(z['im'] - this['im'])) <= Complex['EPSILON'];

[Survived] PrecomputedMutator
complex.js:1356:11
-         if (this['im'] === 0) {
+         if (this['re'] !== 0) {

[Survived] PrecomputedMutator
complex.js:1411:7
-     if (typeof define === 'function' && define['amd']) {
+     if (typeof define === 'function' && define.amd) {

[Survived] PrecomputedMutator
complex.js:1415:14
-     } else if (typeof exports === 'object') {
+     } else if (typeof exports === 'object' && typeof module === 'object') {

[Survived] PrecomputedMutator
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {
+     value: true
+   });

Ran 1.00 tests per mutant on average.
------------|---------|----------|-----------|------------|----------|----------|
File        | % score | # killed | # timeout | # survived | # no cov | # errors |
------------|---------|----------|-----------|------------|----------|----------|
All files   |   64.67 |      119 |         0 |         65 |        0 |        0 |
 complex.js |   64.67 |      119 |         0 |         65 |        0 |        0 |
------------|---------|----------|-----------|------------|----------|----------|
[32m02:30:54 (2761) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/reports/mutation/mutation.html
[32m02:30:54 (2761) INFO MutationTestExecutor[39m Done in 1 minute 36 seconds.

real	1m37.587s
user	1m40.047s
sys	0m17.700s
