*** using precomputed mutations ***
[32m02:48:03 (2965) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m02:48:03 (2965) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m02:48:03 (2965) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/q/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m02:48:03 (2965) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m02:48:03 (2965) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m02:48:04 (2965) INFO ProjectReader[39m Found 2 of 4261 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 703 mutants from MUTATION_TESTING/template-onemutation_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in q.js: typeof bootstrap === "function" replaced with typeof bootstrap !== "function"
Mutant 1 in q.js: bootstrap("promise", definition) replaced with bootstrap("promise", definition + 1)
Mutant 2 in q.js: bootstrap replaced with "promise"
Mutant 3 in q.js: "promise" replaced with "buggy"
Mutant 4 in q.js: definition replaced with function () {
  throw new Error("I'm a bug!");
}
Mutant 5 in q.js: typeof exports === "object" && typeof module === "object" replaced with typeof exports === "function" && typeof module === "function"
Mutant 6 in q.js: typeof define === "function" && define.amd replaced with typeof define === "function" && define.amd && define.amd.define
Mutant 7 in q.js: definition replaced with definition()
Mutant 8 in q.js: typeof ses !== "undefined" replaced with typeof ses !== "undefined" && ses.ok()
Mutant 9 in q.js: !ses.ok() replaced with ses.ok()
Mutant 10 in q.js: ses.ok replaced with ses.notOk
Mutant 11 in q.js: typeof window !== "undefined" || typeof self !== "undefined" replaced with typeof window !== "undefined" && typeof self !== "undefined"
Mutant 12 in q.js: captureLine replaced with captureLine + 1
Mutant 13 in q.js: head.next replaced with head.next.next
Mutant 14 in q.js: domain replaced with domain.exit()
Mutant 15 in q.js: domain.enter replaced with domain.exit
Mutant 16 in q.js: runSingle(task, domain) replaced with runSingle(task, domain, undefined)
Mutant 17 in q.js: task replaced with task()
Mutant 18 in q.js: domain replaced with null
Mutant 19 in q.js: laterQueue.length replaced with laterQueue.length + 1
Mutant 20 in q.js: laterQueue.pop replaced with laterQueue.shift
Mutant 21 in q.js: task replaced with null
Mutant 22 in q.js: isNodeJS replaced with !isNodeJS
Mutant 23 in q.js: domain replaced with domain.exit()
Mutant 24 in q.js: domain.exit replaced with domain.enter
Mutant 25 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, 1)
Mutant 26 in q.js: 0 replaced with 1
Mutant 27 in q.js: domain replaced with !domain
Mutant 28 in q.js: domain.enter replaced with domain.exit
Mutant 29 in q.js: domain replaced with !domain
Mutant 30 in q.js: domain.exit replaced with domain.enter
Mutant 31 in q.js: !flushing replaced with flushing
Mutant 32 in q.js: flush replaced with flush()
Mutant 33 in q.js: typeof window !== "undefined" replaced with typeof window === "undefined"
Mutant 34 in q.js: setImmediate.bind(window, flush) replaced with setImmediate.bind(null, flush)
Mutant 35 in q.js: window replaced with document
Mutant 36 in q.js: typeof MessageChannel !== "undefined" replaced with typeof MessageChannel === "undefined"
Mutant 37 in q.js: channel.port2.postMessage replaced with channel.port1.postMessage
Mutant 38 in q.js: 0 replaced with 1
Mutant 39 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, 1)
Mutant 40 in q.js: 0 replaced with 1
Mutant 41 in q.js: requestPortTick replaced with requestTick
Mutant 42 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, 1)
Mutant 43 in q.js: setTimeout replaced with setInterval
Mutant 44 in q.js: flush replaced with flush()
Mutant 45 in q.js: 0 replaced with 1
Mutant 46 in q.js: laterQueue.push replaced with laterQueue.unshift
Mutant 47 in q.js: task replaced with null
Mutant 48 in q.js: !flushing replaced with flushing
Mutant 49 in q.js: requestTick replaced with requestPortTick
Mutant 50 in q.js: call.apply(f, arguments) replaced with call.apply(f, arguments[0])
Mutant 51 in q.js: call.apply replaced with call.bind
Mutant 52 in q.js: f replaced with f.bind(null)
Mutant 53 in q.js: arguments replaced with [].concat(arguments)
Mutant 54 in q.js: Array.prototype.slice replaced with Array.prototype.reverse
Mutant 55 in q.js: arguments.length === 1 replaced with arguments.length < 1
Mutant 56 in q.js: 1 replaced with 0
Mutant 57 in q.js: index in this replaced with index in this && this[index] !== undefined
Mutant 58 in q.js: index < length replaced with index <= length
Mutant 59 in q.js: index++ replaced with index--
Mutant 60 in q.js: index in this replaced with index in this.length
Mutant 61 in q.js: callback(basis, this[index], index) replaced with callback(basis, this[index], index + 1)
Mutant 62 in q.js: basis replaced with basis + 1
Mutant 63 in q.js: this[index] replaced with this[index + 1]
Mutant 64 in q.js: index replaced with index + 1
Mutant 65 in q.js: i < this.length replaced with i <= this.length
Mutant 66 in q.js: i++ replaced with i--
Mutant 67 in q.js: this[i] === value replaced with this[i] !== value
Mutant 68 in q.js: collect.push replaced with collect.pop
Mutant 69 in q.js: callback.call(thisp, value, index, self) replaced with callback.call(thisp, index, value, self)
Mutant 70 in q.js: callback.call(thisp, value, index, self) replaced with callback.call(thisp, value, index, self, undefined)
Mutant 71 in q.js: callback.call replaced with callback.apply
Mutant 72 in q.js: thisp replaced with null
Mutant 73 in q.js: value replaced with undefined
Mutant 74 in q.js: index replaced with index + 1
Mutant 75 in q.js: for (var key in object) {
  if (object_hasOwnProperty(object, key)) {
    keys.push(key);
  }
} replaced with for (var key of object) {
  if (object_hasOwnProperty(object, key)) {
    keys.push(key);
  }
}
Mutant 76 in q.js: object replaced with null
Mutant 77 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object, key) || key === "hasOwnProperty"
Mutant 78 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object[key])
Mutant 79 in q.js: object replaced with null
Mutant 80 in q.js: key replaced with this[key]
Mutant 81 in q.js: Object replaced with null
Mutant 82 in q.js: value replaced with null
Mutant 83 in q.js: object_toString replaced with object_hasOwnProperty
Mutant 84 in q.js: exception replaced with exception.message
Mutant 85 in q.js: typeof ReturnValue !== "undefined" replaced with typeof ReturnValue !== "string"
Mutant 86 in q.js: hasStacks && promise.stack && typeof error === "object" && error !== null && error.stack replaced with hasStacks && promise.stack && typeof error === "object" && error !== null && error.stack && false
Mutant 87 in q.js: for (var p = promise; !!p; p = p.source) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
} replaced with for (var p = promise.source; !!p; p = p.source) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
}
Mutant 88 in q.js: for (var p = promise; !!p; p = p.source) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
} replaced with for (var p = promise; !p; p = p.source) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
}
Mutant 89 in q.js: !!p replaced with !p
Mutant 90 in q.js: p = p.source replaced with p = p.source.source
Mutant 91 in q.js: p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter) replaced with p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ < p.stackCounter)
Mutant 92 in q.js: object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter,
  configurable: true
}) replaced with object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter + 1,
  configurable: true
})
Mutant 93 in q.js: "__minimumStackCounter__" replaced with "__maximumStackCounter__"
Mutant 94 in q.js: {
  value: p.stackCounter,
  configurable: true
} replaced with {
  value: p.stackCounter + 1,
  configurable: true
}
Mutant 95 in q.js: stacks.unshift replaced with stacks.push
Mutant 96 in q.js: p.stack replaced with p.stack.slice(0, -1)
Mutant 97 in q.js: stacks.unshift replaced with stacks.push
Mutant 98 in q.js: error.stack replaced with error.message
Mutant 99 in q.js: concatedStacks replaced with concatedStacks.split("\n").reverse().join("\n")
Mutant 100 in q.js: object_defineProperty(error, "stack", {
  value: stack,
  configurable: true
}) replaced with object_defineProperty(error, "stack", {
  value: stack,
  enumerable: true
})
Mutant 101 in q.js: "stack" replaced with "stackTrace"
Mutant 102 in q.js: {
  value: stack,
  configurable: true
} replaced with {
  value: stack + "foo",
  configurable: true
}
Mutant 103 in q.js: "\n" replaced with "\r\n"
Mutant 104 in q.js: for (var i = 0; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
} replaced with for (var i = 1; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
}
Mutant 105 in q.js: i < lines.length replaced with i <= lines.length
Mutant 106 in q.js: isInternalFrame replaced with isNodeFrame
Mutant 107 in q.js: desiredLines.push replaced with desiredLines.pop
Mutant 108 in q.js: line replaced with line.replace("From previous event:", "From previous event: ")
Mutant 109 in q.js: desiredLines.join replaced with desiredLines.push
Mutant 110 in q.js: "\n" replaced with "\t"
Mutant 111 in q.js: stackLine.indexOf replaced with stackLine.includes
Mutant 112 in q.js: stackLine.indexOf replaced with stackLine.includes
Mutant 113 in q.js: stackLine replaced with stackLine.split("@")[1]
Mutant 114 in q.js: attempt1 replaced with attempt1[1] === undefined
Mutant 115 in q.js: Number replaced with String
Mutant 116 in q.js: attempt1[2] replaced with attempt1[1]
Mutant 117 in q.js: attempt2 replaced with attempt2[1]
Mutant 118 in q.js: Number replaced with String
Mutant 119 in q.js: attempt2[2] replaced with attempt2[1]
Mutant 120 in q.js: stackLine replaced with stackLine.split("@")[1]
Mutant 121 in q.js: attempt3 replaced with attempt3[1]
Mutant 122 in q.js: Number replaced with String
Mutant 123 in q.js: attempt3[2] replaced with attempt3[1]
Mutant 124 in q.js: getFileNameAndLineNumber replaced with getFileNameAndLineNumber[0]
Mutant 125 in q.js: stackLine replaced with stackLine.split("@")[1]
Mutant 126 in q.js: !fileNameAndLineNumber replaced with fileNameAndLineNumber[0] === undefined
Mutant 127 in q.js: "\n" replaced with "\r"
Mutant 128 in q.js: lines[0].indexOf replaced with lines[1].indexOf
Mutant 129 in q.js: "@" replaced with "#"
Mutant 130 in q.js: getFileNameAndLineNumber replaced with getFileNameAndLineNumber[0]
Mutant 131 in q.js: firstLine replaced with firstLine.split(":")[0]
Mutant 132 in q.js: !fileNameAndLineNumber replaced with !fileNameAndLineNumber[0]
Mutant 133 in q.js: typeof console !== "undefined" && typeof console.warn === "function" replaced with typeof console !== "undefined" && typeof console.warn === "function" && typeof console.warn.call === "function"
Mutant 134 in q.js: callback.apply replaced with callback.call
Mutant 135 in q.js: callback replaced with callback.apply(this, arguments)
Mutant 136 in q.js: arguments replaced with []
Mutant 137 in q.js: value instanceof Promise replaced with value.constructor === Promise
Mutant 138 in q.js: isPromiseAlike(value) replaced with value.then
Mutant 139 in q.js: value replaced with value + 1
Mutant 140 in q.js: fulfill replaced with reject
Mutant 141 in q.js: value replaced with null
Mutant 142 in q.js: Promise.prototype replaced with Object.prototype
Mutant 143 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 144 in q.js: messages replaced with messages.length
Mutant 145 in q.js: messages.push replaced with messages.unshift
Mutant 146 in q.js: args replaced with [args]
Mutant 147 in q.js: op === "when" && operands[1] replaced with op === "when" && operands[2]
Mutant 148 in q.js: progressListeners.push replaced with progressListeners.pop
Mutant 149 in q.js: operands[1] replaced with operands[2]
Mutant 150 in q.js: resolvedPromise.promiseDispatch.apply(resolvedPromise, args) replaced with resolvedPromise.promiseDispatch.apply(resolvedPromise.promiseDispatch.apply(resolvedPromise, args))
Mutant 151 in q.js: resolvedPromise.promiseDispatch.apply replaced with resolvedPromise.promiseDispatch.call
Mutant 152 in q.js: resolvedPromise replaced with resolvedPromise.promise
Mutant 153 in q.js: args replaced with [args[0], args[1], args[2]]
Mutant 154 in q.js: messages replaced with messages.length
Mutant 155 in q.js: nearer replaced with nearerValue
Mutant 156 in q.js: resolvedPromise replaced with resolvedPromise.promise
Mutant 157 in q.js: isPromise(nearerValue) replaced with nearerValue === value
Mutant 158 in q.js: isPromise replaced with isPromiseAlike
Mutant 159 in q.js: nearerValue replaced with nearerValue + 1
Mutant 160 in q.js: !resolvedPromise replaced with resolvedPromise
Mutant 161 in q.js: Q.longStackSupport && hasStacks replaced with !Q.longStackSupport || !hasStacks
Mutant 162 in q.js: e.stack.indexOf("\n") + 1 replaced with e.stack.lastIndexOf("\n") + 1
Mutant 163 in q.js: "\n" replaced with "\t"
Mutant 164 in q.js: Q.longStackSupport && hasStacks replaced with !Q.longStackSupport || !hasStacks
Mutant 165 in q.js: newPromise.promiseDispatch.apply(newPromise, message) replaced with newPromise.promiseDispatch.apply(newPromise, message[0])
Mutant 166 in q.js: newPromise.promiseDispatch.apply replaced with newPromise.promiseDispatch.call
Mutant 167 in q.js: newPromise replaced with newPromise.promise
Mutant 168 in q.js: message replaced with message.slice(1)
Mutant 169 in q.js: resolvedPromise replaced with !resolvedPromise
Mutant 170 in q.js: Q replaced with reject
Mutant 171 in q.js: value replaced with null
Mutant 172 in q.js: resolvedPromise replaced with !resolvedPromise
Mutant 173 in q.js: fulfill(value) replaced with reject(value)
Mutant 174 in q.js: value replaced with value + 1
Mutant 175 in q.js: resolvedPromise replaced with !resolvedPromise
Mutant 176 in q.js: reject(reason) replaced with reject(new Error(reason))
Mutant 177 in q.js: reason replaced with null
Mutant 178 in q.js: resolvedPromise replaced with resolvedPromise === true
Mutant 179 in q.js: progress replaced with progress + 1
Mutant 180 in q.js: error replaced with error.message
Mutant 181 in q.js: arguments.length > 2 replaced with arguments.length > 1
Mutant 182 in q.js: self.resolve replaced with self.reject
Mutant 183 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 2)
Mutant 184 in q.js: arguments replaced with arguments.slice(1)
Mutant 185 in q.js: self.resolve replaced with self.fulfill
Mutant 186 in q.js: value replaced with null
Mutant 187 in q.js: typeof resolver !== "function" replaced with resolver !== "function"
Mutant 188 in q.js: resolver(deferred.resolve, deferred.reject, deferred.notify) replaced with resolver(deferred.reject, deferred.resolve, deferred.notify)
Mutant 189 in q.js: deferred.resolve replaced with deferred.reject
Mutant 190 in q.js: deferred.reject replaced with deferred.fulfill
Mutant 191 in q.js: deferred.notify replaced with deferred.notify(progress)
Mutant 192 in q.js: deferred.reject replaced with deferred.fulfill
Mutant 193 in q.js: reason replaced with reason.message
Mutant 194 in q.js: Q replaced with Q.reject
Mutant 195 in q.js: x replaced with y
Mutant 196 in q.js: y replaced with x
Mutant 197 in q.js: Q replaced with Q.reject
Mutant 198 in q.js: [this, that] replaced with [that, this]
Mutant 199 in q.js: x === y replaced with x !== y
Mutant 200 in q.js: i < len replaced with i <= len
Mutant 201 in q.js: i++ replaced with i--
Mutant 202 in q.js: Q(answerPs[i]).then(resolve, reject) replaced with Q(answerPs[i]).then(reject, resolve)
Mutant 203 in q.js: Q replaced with Q.reject
Mutant 204 in q.js: answerPs[i] replaced with answerPs[i + 1]
Mutant 205 in q.js: resolve replaced with reject
Mutant 206 in q.js: reject replaced with resolve
Mutant 207 in q.js: Q.race replaced with Q.reject
Mutant 208 in q.js: fallback === void 0 replaced with fallback === null
Mutant 209 in q.js: inspect === void 0 replaced with inspect !== void 0
Mutant 210 in q.js: Promise.prototype replaced with Object.prototype
Mutant 211 in q.js: descriptor[op] replaced with descriptor[op] + 1
Mutant 212 in q.js: descriptor[op].apply(promise, args) replaced with descriptor[op].apply(promise, args, 1)
Mutant 213 in q.js: promise replaced with null
Mutant 214 in q.js: args replaced with args.slice(1)
Mutant 215 in q.js: fallback.call(promise, op, args) replaced with fallback.call(promise.reject)
Mutant 216 in q.js: promise replaced with null
Mutant 217 in q.js: op replaced with op + 1
Mutant 218 in q.js: args replaced with args[0]
Mutant 219 in q.js: reject replaced with resolve
Mutant 220 in q.js: exception replaced with new Error("Q can't join: not the same: " + x + " " + y)
Mutant 221 in q.js: resolve replaced with reject
Mutant 222 in q.js: resolve replaced with reject
Mutant 223 in q.js: result replaced with reject(exception)
Mutant 224 in q.js: inspect replaced with inspect.state
Mutant 225 in q.js: inspected.state === "rejected" replaced with inspected.state === "fulfilled"
Mutant 226 in q.js: inspected.state === "pending" || inspected.state === "rejected" replaced with inspected.state === "fulfilled"
Mutant 227 in q.js: fulfilled replaced with rejected
Mutant 228 in q.js: value replaced with null
Mutant 229 in q.js: exception replaced with new Error("New error message")
Mutant 230 in q.js: typeof rejected === "function" replaced with rejected instanceof Function
Mutant 231 in q.js: makeStackTraceLong(exception, self) replaced with makeStackTraceLong(exception, self, 1)
Mutant 232 in q.js: exception replaced with null
Mutant 233 in q.js: newException replaced with newException.message
Mutant 234 in q.js: exception replaced with null
Mutant 235 in q.js: progressed replaced with progressed + 1
Mutant 236 in q.js: value replaced with null
Mutant 237 in q.js: done replaced with !done
Mutant 238 in q.js: deferred.resolve replaced with deferred.reject
Mutant 239 in q.js: _fulfilled(value) replaced with _rejected(value)
Mutant 240 in q.js: value replaced with null
Mutant 241 in q.js: done replaced with !done
Mutant 242 in q.js: deferred.resolve replaced with deferred.reject
Mutant 243 in q.js: _rejected(exception) replaced with _fulfilled(exception)
Mutant 244 in q.js: exception replaced with exception.message
Mutant 245 in q.js: _progressed replaced with _rejected
Mutant 246 in q.js: value replaced with null
Mutant 247 in q.js: Q.onerror replaced with Q.onerror()
Mutant 248 in q.js: e replaced with e.message
Mutant 249 in q.js: !threw replaced with threw
Mutant 250 in q.js: deferred.notify replaced with deferred.reject
Mutant 251 in q.js: newValue replaced with null
Mutant 252 in q.js: Q replaced with Q.reject
Mutant 253 in q.js: promise replaced with Q.reject(value)
Mutant 254 in q.js: callback replaced with function () {
  throw new Error("Callback failed");
}
Mutant 255 in q.js: Q replaced with Q.fcall
Mutant 256 in q.js: callback replaced with null
Mutant 257 in q.js: callback.fcall replaced with callback.fapply
not replacing callback.fcall with callback.fapply
not replacing callback.fcall with callback.fapply
Mutant 258 in q.js: value replaced with null
Mutant 259 in q.js: value replaced with null
Mutant 260 in q.js: Q(value).then(fulfilled, rejected, progressed) replaced with Q(value).then(rejected, fulfilled, progressed)
Mutant 261 in q.js: Q replaced with Q.reject
Mutant 262 in q.js: value replaced with null
Mutant 263 in q.js: fulfilled replaced with rejected
Mutant 264 in q.js: rejected replaced with resolved
Mutant 265 in q.js: progressed replaced with function () {}
Mutant 266 in q.js: function () {
  return value;
} replaced with function () {
  return value + 1;
}
Mutant 267 in q.js: Q replaced with Q.reject
Mutant 268 in q.js: promise replaced with Q.reject(value)
Mutant 269 in q.js: value replaced with null
Mutant 270 in q.js: this.then replaced with this.then.then
Mutant 271 in q.js: function () {
  throw reason;
} replaced with function () {
  return reason;
}
Mutant 272 in q.js: Q replaced with Q.reject
Mutant 273 in q.js: promise replaced with Q.reject(reason)
Mutant 274 in q.js: reason replaced with reason.message
Mutant 275 in q.js: isPromise(value) replaced with isPromiseAlike(value)
Mutant 276 in q.js: value replaced with null
Mutant 277 in q.js: inspected.state === "fulfilled" replaced with inspected.state === "rejected"
Mutant 278 in q.js: object replaced with object.then
Mutant 279 in q.js: isPromise replaced with isPromiseAlike
Mutant 280 in q.js: object replaced with object.inspect().value
Mutant 281 in q.js: this.inspect replaced with this.inspect.state
not replacing this.inspect with this.inspect.state
Mutant 282 in q.js: isPromise replaced with !isPromise
Mutant 283 in q.js: object replaced with object.inspect().value
Mutant 284 in q.js: this.inspect replaced with this.inspect.state
not replacing this.inspect with this.inspect.state
Mutant 285 in q.js: isPromise replaced with isPromiseAlike
Mutant 286 in q.js: object replaced with object.inspect().state === "rejected"
Mutant 287 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections === false
Mutant 288 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections
Mutant 289 in q.js: array_indexOf(unhandledRejections, promise) !== -1 replaced with unhandledRejections.includes(promise)
Mutant 290 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(unhandledRejections, reason)
Mutant 291 in q.js: array_indexOf replaced with array_lastIndexOf
Mutant 292 in q.js: unhandledRejections replaced with unhandledRejections.slice()
Mutant 293 in q.js: promise replaced with reportedUnhandledRejections[at]
Mutant 294 in q.js: reason replaced with reason.stack
Mutant 295 in q.js: reportedUnhandledRejections.push replaced with reportedUnhandledRejections.pop
Mutant 296 in q.js: unhandledRejections.push replaced with unhandledReasons.push
Mutant 297 in q.js: promise replaced with null
Mutant 298 in q.js: reason && typeof reason.stack !== "undefined" replaced with reason && reason.stack !== undefined
Mutant 299 in q.js: unhandledReasons.push replaced with unhandledReasons.pop
Mutant 300 in q.js: reason.stack replaced with reason.stack.slice(0)
Mutant 301 in q.js: unhandledReasons.push replaced with unhandledReasons.pop
Mutant 302 in q.js: "(no stack) " + reason replaced with "(no stack) " + reason.message
Mutant 303 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections === false
Mutant 304 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(unhandledRejections.slice(0, -1), promise)
Mutant 305 in q.js: array_indexOf replaced with array_lastIndexOf
Mutant 306 in q.js: unhandledRejections replaced with unhandledRejections.slice()
Mutant 307 in q.js: promise replaced with promise.then(function () {})
Mutant 308 in q.js: at !== -1 replaced with at < 0
Mutant 309 in q.js: array_indexOf(reportedUnhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections, unhandledRejections)
Mutant 310 in q.js: array_indexOf replaced with array_lastIndexOf
Mutant 311 in q.js: reportedUnhandledRejections replaced with reportedUnhandledRejections.length
Mutant 312 in q.js: promise replaced with reportedUnhandledRejections[atReport]
Mutant 313 in q.js: atReport !== -1 replaced with atReport === -1
Mutant 314 in q.js: process.emit("rejectionHandled", unhandledReasons[at], promise) replaced with process.emit("rejectionHandled", unhandledReasons[at], unhandledRejections[at])
Mutant 315 in q.js: "rejectionHandled" replaced with "unhandledRejection"
Mutant 316 in q.js: unhandledReasons[at] replaced with unhandledReasons[at + 1]
Mutant 317 in q.js: promise replaced with reportedUnhandledRejections[atReport]
Mutant 318 in q.js: reportedUnhandledRejections.splice(atReport, 1) replaced with reportedUnhandledRejections.splice(atReport, 0)
Mutant 319 in q.js: atReport replaced with atReport.length - 1
Mutant 320 in q.js: unhandledRejections.splice(at, 1) replaced with unhandledRejections.splice(at, 0)
Mutant 321 in q.js: at replaced with at - 1
Mutant 322 in q.js: 1 replaced with 2
Mutant 323 in q.js: unhandledReasons.splice(at, 1) replaced with unhandledReasons.splice(at, 0)
Mutant 324 in q.js: at replaced with at - 1
Mutant 325 in q.js: 1 replaced with 0
Mutant 326 in q.js: rejected replaced with !rejected
Mutant 327 in q.js: this replaced with null
Mutant 328 in q.js: reason replaced with null
Mutant 329 in q.js: trackRejection replaced with untrackRejection
Mutant 330 in q.js: rejection replaced with null
Mutant 331 in q.js: reason replaced with null
Mutant 332 in q.js: name === null || name === void 0 replaced with name == null
Mutant 333 in q.js: value.apply(void 0, args) replaced with value.apply(null, args)
Mutant 334 in q.js: value.apply replaced with value.call
Mutant 335 in q.js: void 0 replaced with null
Mutant 336 in q.js: args replaced with args.slice()
Mutant 337 in q.js: value[name].apply(value, args) replaced with value[name].apply(value.apply(this, args))
Mutant 338 in q.js: value replaced with undefined
Mutant 339 in q.js: args replaced with args.slice()
Mutant 340 in q.js: value.apply(thisp, args) replaced with value.apply(thisp, args.slice())
Mutant 341 in q.js: value.apply replaced with value.call
Mutant 342 in q.js: thisp replaced with void 0
Mutant 343 in q.js: args replaced with args.slice()
Mutant 344 in q.js: object_keys replaced with object_values
Mutant 345 in q.js: value replaced with value.length
Mutant 346 in q.js: deferred.resolve replaced with deferred.reject
Mutant 347 in q.js: deferred.reject replaced with deferred.resolve
Mutant 348 in q.js: deferred.notify replaced with deferred.reject
Mutant 349 in q.js: deferred.reject replaced with deferred.resolve
Mutant 350 in q.js: dispatch(object, op, args) replaced with dispatch(object, op, args[0])
Mutant 351 in q.js: object replaced with null
Mutant 352 in q.js: op replaced with op + 1
Mutant 353 in q.js: args replaced with args.slice(1)
Mutant 354 in q.js: Q replaced with Q.reject
Mutant 355 in q.js: object replaced with null
Mutant 356 in q.js: Q(value).spread(fulfilled, rejected) replaced with Q(value).spread(rejected, fulfilled)
Mutant 357 in q.js: Q replaced with Q.reject
Mutant 358 in q.js: value replaced with null
Mutant 359 in q.js: fulfilled replaced with rejected
Mutant 360 in q.js: rejected replaced with fulfilled
Mutant 361 in q.js: this.all replaced with this.then
not replacing this.all with this.then
not replacing this.all with this.then
Mutant 362 in q.js: fulfilled.apply(void 0, array) replaced with fulfilled.apply(array, void 0)
Mutant 363 in q.js: fulfilled.apply replaced with fulfilled.call
Mutant 364 in q.js: void 0 replaced with null
Mutant 365 in q.js: array replaced with array.slice()
Mutant 366 in q.js: typeof StopIteration === "undefined" replaced with typeof StopIteration !== "undefined"
Mutant 367 in q.js: arg replaced with null
Mutant 368 in q.js: exception replaced with exception.message
Mutant 369 in q.js: result.done replaced with result.value
Mutant 370 in q.js: when(result.value, callback, errback) replaced with when(result.value, errback, callback)
Mutant 371 in q.js: callback replaced with reject
Mutant 372 in q.js: errback replaced with reject
Mutant 373 in q.js: arg replaced with arg + 1
Mutant 374 in q.js: isStopIteration(exception) replaced with exception instanceof StopIteration
Mutant 375 in q.js: exception replaced with exception.value
Mutant 376 in q.js: Q replaced with Q.reject
Mutant 377 in q.js: exception.value replaced with exception
Mutant 378 in q.js: exception replaced with exception.message
Mutant 379 in q.js: when(result, callback, errback) replaced with when(result.value, callback, errback)
Mutant 380 in q.js: when replaced with Q.reject
Mutant 381 in q.js: result replaced with result.value
Mutant 382 in q.js: callback replaced with errback
Mutant 383 in q.js: errback replaced with reject
Mutant 384 in q.js: makeGenerator.apply(this, arguments) replaced with makeGenerator.apply(null)
Mutant 385 in q.js: makeGenerator.apply replaced with makeGenerator.call
Mutant 386 in q.js: this replaced with null
Mutant 387 in q.js: arguments replaced with [].slice.call(arguments)
Mutant 388 in q.js: continuer.bind(continuer, "next") replaced with continuer.bind(continuer, "throw")
Mutant 389 in q.js: continuer replaced with continuer.bind(continuer, "throw")
Mutant 390 in q.js: "next" replaced with "throw"
Mutant 391 in q.js: continuer.bind(continuer, "throw") replaced with continuer.bind(continuer.bind(continuer, "throw"))
Mutant 392 in q.js: continuer replaced with continuer.bind(continuer, "throw")
Mutant 393 in q.js: "throw" replaced with "send"
Mutant 394 in q.js: callback replaced with errback
Mutant 395 in q.js: Q.done replaced with Q.fail
Mutant 396 in q.js: Q.async replaced with Q.reject
not replacing Q.async with Q.reject
Mutant 397 in q.js: makeGenerator replaced with makeGenerator.bind(this)
Mutant 398 in q.js: all replaced with none
Mutant 399 in q.js: arguments replaced with arguments.slice(1)
Mutant 400 in q.js: callback.apply(self, args) replaced with callback.apply(self, args, undefined)
Mutant 401 in q.js: callback.apply replaced with callback.call
Mutant 402 in q.js: self replaced with null
Mutant 403 in q.js: args replaced with args.slice(1)
Mutant 404 in q.js: Q(object).dispatch(op, args) replaced with Q(object).dispatch(op, args.slice(1))
Mutant 405 in q.js: Q replaced with Q.reject
Mutant 406 in q.js: object replaced with null
Mutant 407 in q.js: op replaced with op + "d"
Mutant 408 in q.js: args replaced with args[0]
Mutant 409 in q.js: defer replaced with deferred
Mutant 410 in q.js: self.promiseDispatch(deferred.resolve, op, args) replaced with self.promiseDispatch(deferred.reject, op, args)
Mutant 411 in q.js: deferred.resolve replaced with deferred.reject
Mutant 412 in q.js: op replaced with op + 1
Mutant 413 in q.js: args replaced with args.slice(1)
Mutant 414 in q.js: Q(object).dispatch("get", [key]) replaced with Q(object).dispatch("set", [key, undefined])
Mutant 415 in q.js: Q replaced with Q.reject
Mutant 416 in q.js: object replaced with null
Mutant 417 in q.js: "get" replaced with "set"
Mutant 418 in q.js: [key] replaced with [key + 1]
Mutant 419 in q.js: this.dispatch("get", [key]) replaced with this.dispatch("set", [key, undefined])
Mutant 420 in q.js: "get" replaced with "set"
Mutant 421 in q.js: [key] replaced with [key, key]
Mutant 422 in q.js: Q(object).dispatch("set", [key, value]) replaced with Q(object).dispatch("set", [value, key])
Mutant 423 in q.js: Q replaced with Q.reject
Mutant 424 in q.js: object replaced with null
Mutant 425 in q.js: [key, value] replaced with [value, key]
Mutant 426 in q.js: this.dispatch("set", [key, value]) replaced with this.dispatch("set", [value, key])
Mutant 427 in q.js: [key, value] replaced with [value, key]
Mutant 428 in q.js: Q(object).dispatch("delete", [key]) replaced with Q(object).dispatch("set", [key, undefined])
Mutant 429 in q.js: Q replaced with Q.reject
Mutant 430 in q.js: object replaced with null
Mutant 431 in q.js: "delete" replaced with "set"
Mutant 432 in q.js: [key] replaced with [key, value]
Mutant 433 in q.js: [key] replaced with [key, value]
Mutant 434 in q.js: Q(object).dispatch("post", [name, args]) replaced with Q(object).dispatch("post", [name, args.slice(1)])
Mutant 435 in q.js: Q replaced with Q.reject
Mutant 436 in q.js: object replaced with null
Mutant 437 in q.js: "post" replaced with "get"
Mutant 438 in q.js: [name, args] replaced with [name, args, 0]
Mutant 439 in q.js: this.dispatch("post", [name, args]) replaced with this.dispatch("post", [args, name])
Mutant 440 in q.js: "post" replaced with "put"
Mutant 441 in q.js: [name, args] replaced with [name, args, 1]
Mutant 442 in q.js: Q(object).dispatch("post", [name, array_slice(arguments, 2)]) replaced with Q(object).dispatch("post", [name, array_slice(arguments, 1)])
Mutant 443 in q.js: Q replaced with Q.reject
Mutant 444 in q.js: object replaced with null
Mutant 445 in q.js: "post" replaced with "get"
Mutant 446 in q.js: [name, array_slice(arguments, 2)] replaced with [name, array_slice(arguments, 1)]
Mutant 447 in q.js: arguments replaced with arguments[0]
Mutant 448 in q.js: this.dispatch("post", [name, array_slice(arguments, 1)]) replaced with this.dispatch("post", [name, array_slice(arguments, 2)])
Mutant 449 in q.js: "post" replaced with "put"
Mutant 450 in q.js: [name, array_slice(arguments, 1)] replaced with [name, array_slice(arguments, 2)]
Mutant 451 in q.js: arguments replaced with arguments[0]
Mutant 452 in q.js: Q(object).dispatch("apply", [void 0, args]) replaced with Q(object).dispatch("call", [void 0, args])
Mutant 453 in q.js: Q replaced with Q.reject
Mutant 454 in q.js: object replaced with null
Mutant 455 in q.js: "apply" replaced with "call"
Mutant 456 in q.js: [void 0, args] replaced with [void 0, args.slice(1)]
Mutant 457 in q.js: this.dispatch("apply", [void 0, args]) replaced with this.dispatch("apply", [this, args])
Mutant 458 in q.js: "apply" replaced with "call"
Mutant 459 in q.js: [void 0, args] replaced with [void 0, args.slice(1)]
Mutant 460 in q.js: Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]) replaced with Q(object).dispatch("apply", [this, array_slice(arguments, 1)])
Mutant 461 in q.js: Q replaced with Q.reject
Mutant 462 in q.js: object replaced with null
Mutant 463 in q.js: "apply" replaced with "call"
Mutant 464 in q.js: [void 0, array_slice(arguments, 1)] replaced with [void 0, array_slice(arguments, 2)]
Mutant 465 in q.js: arguments replaced with arguments.slice(1)
Mutant 466 in q.js: this.dispatch("apply", [void 0, array_slice(arguments)]) replaced with this.dispatch("apply", [this, array_slice(arguments)])
Mutant 467 in q.js: "apply" replaced with "call"
Mutant 468 in q.js: [void 0, array_slice(arguments)] replaced with [void 0, array_slice(arguments, 1)]
Mutant 469 in q.js: arguments replaced with arguments.slice(1)
Mutant 470 in q.js: object replaced with null
Mutant 471 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 2)
Mutant 472 in q.js: arguments replaced with arguments.slice(1)
Mutant 473 in q.js: 1 replaced with 1 + 1
Mutant 474 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 475 in q.js: arguments replaced with arguments.slice(1)
Mutant 476 in q.js: arguments replaced with args
Mutant 477 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 478 in q.js: arguments replaced with null
Mutant 479 in q.js: Q(object).dispatch("keys", []) replaced with Q(object).dispatch("values", [])
Mutant 480 in q.js: Q replaced with Q.reject
Mutant 481 in q.js: object replaced with null
Mutant 482 in q.js: "keys" replaced with "values"
Mutant 483 in q.js: [] replaced with [1]
Mutant 484 in q.js: this.dispatch("keys", []) replaced with this.dispatch("values", [])
Mutant 485 in q.js: "keys" replaced with "values"
Mutant 486 in q.js: [] replaced with [1]
Mutant 487 in q.js: defer replaced with deferred
Mutant 488 in q.js: isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled" replaced with isPromise(promise) && (snapshot = promise.inspect()).state === "rejected"
Mutant 489 in q.js: isPromise replaced with !isPromise
Mutant 490 in q.js: promise.inspect replaced with promise.inspect.value
Mutant 491 in q.js: --pendingCount === 0 replaced with pendingCount < 0
Mutant 492 in q.js: deferred.resolve replaced with deferred.reject
Mutant 493 in q.js: promises replaced with promises.slice(1)
Mutant 494 in q.js: deferred.notify replaced with deferred.reject
Mutant 495 in q.js: {
  index: index,
  value: progress
} replaced with {
  index: index,
  value: progress + 1
}
Mutant 496 in q.js: pendingCount === 0 replaced with pendingCount < 0
Mutant 497 in q.js: deferred.resolve replaced with deferred.reject
Mutant 498 in q.js: promises replaced with promises.slice(1)
Mutant 499 in q.js: all replaced with none
Mutant 500 in q.js: this replaced with this.then(function (promises) {
  return all(array_map(promises, function (promise) {
    promise = Q(promise);
    function regardless() {
      return promise.inspect();
    }
    return promise.then(regardless, regardless);
  }));
})
Mutant 501 in q.js: promises.length === 0 replaced with promises.length < 0
Mutant 502 in q.js: Q.resolve replaced with Q.reject
Mutant 503 in q.js: when(promise, onFulfilled, onRejected, onProgress) replaced with when(promise.then(onFulfilled, onRejected, onProgress))
Mutant 504 in q.js: promise replaced with promise.then(onFulfilled, onRejected)
Mutant 505 in q.js: onFulfilled replaced with onRejected
Mutant 506 in q.js: onRejected replaced with onFulfilled
Mutant 507 in q.js: onProgress replaced with onRejected
Mutant 508 in q.js: deferred.resolve replaced with deferred.reject
Mutant 509 in q.js: result replaced with null
Mutant 510 in q.js: pendingCount === 0 replaced with pendingCount < 0
Mutant 511 in q.js: deferred.reject replaced with deferred.resolve
Mutant 512 in q.js: rejection replaced with rejection.message
Mutant 513 in q.js: any replaced with all
Mutant 514 in q.js: this replaced with null
Mutant 515 in q.js: allResolved replaced with allSettled
Mutant 516 in q.js: "allResolved" replaced with "allSettled"
Mutant 517 in q.js: "allSettled" replaced with "allResolved"
Mutant 518 in q.js: array_map(promises, Q) replaced with array_map(promises, Q.reject)
Mutant 519 in q.js: array_map replaced with array_filter
Mutant 520 in q.js: promises replaced with promises.slice(0)
Mutant 521 in q.js: Q replaced with Q.reject
Mutant 522 in q.js: when(promise, noop, noop) replaced with when(promise.then(noop, noop))
Mutant 523 in q.js: promise replaced with promise.then(noop, noop)
Mutant 524 in q.js: noop replaced with function (err) {
  deferred.reject(err);
}
Mutant 525 in q.js: allResolved replaced with allSettled
Mutant 526 in q.js: this replaced with null
Mutant 527 in q.js: Q replaced with Q.reject
Mutant 528 in q.js: promises replaced with promises.reverse()
Mutant 529 in q.js: Q replaced with Q.reject
Mutant 530 in q.js: promise replaced with promise.then(function (value) {
  return value + 1;
})
Mutant 531 in q.js: promise.inspect replaced with promise.inspect.rejected
Mutant 532 in q.js: promise.then(regardless, regardless) replaced with promise.then(regardless, regardless, regardless)
Mutant 533 in q.js: regardless replaced with rejected
Mutant 534 in q.js: regardless replaced with rejected
Mutant 535 in q.js: Q(object).then(void 0, rejected) replaced with Q(object).then(rejected, void 0)
Mutant 536 in q.js: Q replaced with Q.reject
Mutant 537 in q.js: object replaced with null
Mutant 538 in q.js: void 0 replaced with null
Mutant 539 in q.js: rejected replaced with resolved
Mutant 540 in q.js: this.then(void 0, rejected) replaced with this.then(null, rejected)
Mutant 541 in q.js: void 0 replaced with null
Mutant 542 in q.js: rejected replaced with resolved
Mutant 543 in q.js: Q replaced with Q.reject
Mutant 544 in q.js: object replaced with null
Mutant 545 in q.js: void 0 replaced with null
Mutant 546 in q.js: void 0 replaced with null
Mutant 547 in q.js: progressed replaced with function (value) {
  return value;
}
Mutant 548 in q.js: this.then(void 0, void 0, progressed) replaced with this.then(null, null, progressed)
Mutant 549 in q.js: void 0 replaced with null
Mutant 550 in q.js: void 0 replaced with null
Mutant 551 in q.js: progressed replaced with function (value) {
  return value;
}
Mutant 552 in q.js: Q replaced with Q.reject
Mutant 553 in q.js: object replaced with null
Mutant 554 in q.js: callback replaced with function () {
  throw new Error("Q can't apply finally callback");
}
Mutant 555 in q.js: !callback || typeof callback.apply !== "function" replaced with callback.apply === "function"
Mutant 556 in q.js: Q replaced with Q.reject
Mutant 557 in q.js: callback replaced with function () {
  throw new Error("Q can't apply finally callback");
}
Mutant 558 in q.js: Q(object).done(fulfilled, rejected, progress) replaced with Q(object).done(rejected, fulfilled, progress)
Mutant 559 in q.js: Q replaced with Q.reject
Mutant 560 in q.js: object replaced with null
Mutant 561 in q.js: fulfilled replaced with rejected
Mutant 562 in q.js: rejected replaced with fulfilled
Mutant 563 in q.js: progress replaced with rejected
Mutant 564 in q.js: makeStackTraceLong(error, promise) replaced with makeStackTraceLong(error, promise.then())
Mutant 565 in q.js: fulfilled replaced with rejected
Mutant 566 in q.js: rejected replaced with resolved
Mutant 567 in q.js: progress replaced with progressed
Mutant 568 in q.js: onUnhandledError replaced with onUnhandledError.bind(null)
Mutant 569 in q.js: promise.then(void 0, onUnhandledError) replaced with promise.then(onUnhandledError, void 0)
Mutant 570 in q.js: void 0 replaced with null
Mutant 571 in q.js: onUnhandledError replaced with onUnhandledError()
Mutant 572 in q.js: Q(object).timeout(ms, error) replaced with Q(object).timeout(ms, new Error("Timed out after " + ms + " ms"))
Mutant 573 in q.js: Q replaced with Q.reject
Mutant 574 in q.js: object replaced with null
Mutant 575 in q.js: ms replaced with 0
Mutant 576 in q.js: error replaced with error.message
Mutant 577 in q.js: !error || "string" === typeof error replaced with error && "string" === typeof error
Mutant 578 in q.js: deferred.reject replaced with deferred.resolve
Mutant 579 in q.js: error replaced with null
Mutant 580 in q.js: clearTimeout replaced with clearInterval
Mutant 581 in q.js: timeoutId replaced with null
Mutant 582 in q.js: deferred.resolve replaced with deferred.reject
Mutant 583 in q.js: value replaced with null
Mutant 584 in q.js: clearTimeout replaced with clearInterval
Mutant 585 in q.js: timeoutId replaced with null
Mutant 586 in q.js: deferred.reject replaced with deferred.resolve
Mutant 587 in q.js: exception replaced with error
Mutant 588 in q.js: timeout === void 0 replaced with timeout !== void 0
Mutant 589 in q.js: Q replaced with Q.reject
Mutant 590 in q.js: object replaced with null
Mutant 591 in q.js: timeout replaced with timeout + 1
Mutant 592 in q.js: deferred.resolve replaced with deferred.reject
Mutant 593 in q.js: value replaced with null
Mutant 594 in q.js: Q replaced with Q.reject
Mutant 595 in q.js: callback replaced with null
Mutant 596 in q.js: args replaced with null
Mutant 597 in q.js: args replaced with args.slice(1)
Mutant 598 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 599 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 600 in q.js: this.fapply replaced with this.fail
not replacing this.fapply with this.fail
not replacing this.fapply with this.fail
Mutant 601 in q.js: nodeArgs replaced with nodeArgs.slice(0)
Mutant 602 in q.js: deferred.reject replaced with deferred.resolve
Mutant 603 in q.js: array_slice(arguments, 1) replaced with array_slice(array_slice(arguments, 2))
Mutant 604 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 605 in q.js: 1 replaced with 2
Mutant 606 in q.js: callback replaced with null
Mutant 607 in q.js: args replaced with args.slice(1)
Mutant 608 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 609 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 610 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 611 in q.js: nodeArgs replaced with nodeArgs.slice(0, -1)
Mutant 612 in q.js: deferred.reject replaced with deferred.resolve
Mutant 613 in q.js: callback === undefined replaced with callback !== undefined
Mutant 614 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 2)
Mutant 615 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 616 in q.js: 1 replaced with 2
Mutant 617 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 618 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 619 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 620 in q.js: Q replaced with Q.fapply
Mutant 621 in q.js: callback replaced with undefined
Mutant 622 in q.js: nodeArgs replaced with nodeArgs.slice(0)
Mutant 623 in q.js: deferred.reject replaced with deferred.resolve
Mutant 624 in q.js: arguments replaced with arguments.slice(1)
Mutant 625 in q.js: args.unshift replaced with args.push
Mutant 626 in q.js: this replaced with null
Mutant 627 in q.js: Q.denodeify.apply(void 0, args) replaced with Q.denodeify.apply(null, args)
Mutant 628 in q.js: Q.denodeify.apply replaced with Q.denodeify.call
Mutant 629 in q.js: void 0 replaced with null
Mutant 630 in q.js: args replaced with args.slice(1)
Mutant 631 in q.js: array_slice(arguments, 2) replaced with array_slice(arguments, 3)
Mutant 632 in q.js: arguments replaced with array_slice(arguments, 2)
Mutant 633 in q.js: 2 replaced with 1
Mutant 634 in q.js: baseArgs.concat replaced with baseArgs.push
Mutant 635 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 636 in q.js: arguments replaced with null
Mutant 637 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 638 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 639 in q.js: callback.apply(thisp, arguments) replaced with callback.apply(thisp, arguments[0])
Mutant 640 in q.js: callback.apply replaced with callback.call
Mutant 641 in q.js: thisp replaced with null
Mutant 642 in q.js: arguments replaced with nodeArgs
Mutant 643 in q.js: bound replaced with undefined
Mutant 644 in q.js: nodeArgs replaced with nodeArgs.slice(0)
Mutant 645 in q.js: deferred.reject replaced with deferred.resolve
Mutant 646 in q.js: array_slice(arguments, 0) replaced with array_slice(arguments, 1)
Mutant 647 in q.js: arguments replaced with null
Mutant 648 in q.js: 0 replaced with 1
Mutant 649 in q.js: args.unshift replaced with args.push
Mutant 650 in q.js: this replaced with null
Mutant 651 in q.js: Q.nbind.apply(void 0, args) replaced with Q.nbind.apply(null, args)
Mutant 652 in q.js: Q.nbind.apply replaced with Q.nbind.call
Mutant 653 in q.js: void 0 replaced with null
Mutant 654 in q.js: args replaced with args.slice(1)
Mutant 655 in q.js: Q(object).npost(name, args) replaced with Q(object).npost(name, args.slice(1))
Mutant 656 in q.js: Q replaced with Q.reject
Mutant 657 in q.js: object replaced with null
Mutant 658 in q.js: name replaced with "foo"
Mutant 659 in q.js: args replaced with args.slice(1)
Mutant 660 in q.js: args || [] replaced with args && []
Mutant 661 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 662 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 663 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("post", [name, nodeArgs, deferred.makeNodeResolver()])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("post", [name, nodeArgs, deferred.makeNodeResolver()])
Mutant 664 in q.js: "post" replaced with "get"
Mutant 665 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, deferred.makeNodeResolver()]
Mutant 666 in q.js: deferred.reject replaced with deferred.resolve
Mutant 667 in q.js: array_slice(arguments, 2) replaced with array_slice(arguments, 1)
Mutant 668 in q.js: arguments replaced with arguments.slice(2)
Mutant 669 in q.js: 2 replaced with 1
Mutant 670 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 671 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 672 in q.js: Q(object).dispatch("post", [name, nodeArgs]) replaced with Q(object).dispatch("get", [name, nodeArgs])
not replacing Q(object).dispatch("post", [name, nodeArgs]) with Q(object).dispatch("get", [name, nodeArgs])
Mutant 673 in q.js: Q replaced with Q.reject
Mutant 674 in q.js: object replaced with null
Mutant 675 in q.js: "post" replaced with "get"
Mutant 676 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, deferred.makeNodeResolver()]
Mutant 677 in q.js: deferred.reject replaced with deferred.resolve
Mutant 678 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 2)
Mutant 679 in q.js: arguments replaced with null
Mutant 680 in q.js: 1 replaced with 2
Mutant 681 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 682 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 683 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("send", [name, nodeArgs])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("send", [name, nodeArgs])
Mutant 684 in q.js: "post" replaced with "send"
Mutant 685 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, deferred.makeNodeResolver()]
Mutant 686 in q.js: deferred.reject replaced with deferred.resolve
Mutant 687 in q.js: Q replaced with Q.reject
Mutant 688 in q.js: object replaced with null
Mutant 689 in q.js: nodeback replaced with nodeback()
Mutant 690 in q.js: nodeback replaced with !nodeback
Mutant 691 in q.js: nodeback(null, value) replaced with nodeback(undefined, value)
Mutant 692 in q.js: null replaced with undefined
Mutant 693 in q.js: value replaced with null
Mutant 694 in q.js: error replaced with null
Mutant 695 in q.js: captureLine replaced with captureLine + 1
Mutant 696 in queue.js: "head" replaced with "tail"
Mutant 697 in queue.js: "tail" replaced with "head"
Mutant 698 in queue.js: closed.resolve replaced with closed.reject
Mutant 699 in queue.js: error replaced with null
Mutant 700 in queue.js: Q.reject replaced with Q.resolve
Mutant 701 in queue.js: error replaced with null
Mutant 702 in queue.js: ends.resolve replaced with ends.reject
[32m02:48:05 (2965) INFO Instrumenter[39m Instrumented 2 source file(s) with 703 mutant(s)
[32m02:48:05 (2965) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m02:48:07 (2965) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m02:48:07 (2965) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m02:48:14 (2965) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 6 seconds (net 6919 ms, overhead 0 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~58m) 2/703 tested (1 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 17m) 3/703 tested (2 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~58m) 6/703 tested (4 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 6m) 7/703 tested (5 survived, 0 timed out)
Mutation testing 1% (elapsed: <1m, remaining: ~1h 4m) 9/703 tested (7 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 9m) 10/703 tested (8 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 7m) 12/703 tested (10 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 10m) 13/703 tested (10 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 13m) 14/703 tested (10 survived, 1 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 22m) 14/703 tested (10 survived, 1 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~1h 18m) 16/703 tested (11 survived, 2 timed out)
Mutation testing 2% (elapsed: ~2m, remaining: ~1h 16m) 18/703 tested (12 survived, 2 timed out)
Mutation testing 2% (elapsed: ~2m, remaining: ~1h 13m) 20/703 tested (13 survived, 2 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 8m) 23/703 tested (15 survived, 2 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 10m) 24/703 tested (16 survived, 2 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 9m) 26/703 tested (18 survived, 2 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 10m) 27/703 tested (19 survived, 2 timed out)
Mutation testing 4% (elapsed: ~3m, remaining: ~1h 9m) 29/703 tested (21 survived, 2 timed out)
Mutation testing 4% (elapsed: ~3m, remaining: ~1h 13m) 29/703 tested (21 survived, 2 timed out)
Mutation testing 4% (elapsed: ~3m, remaining: ~1h 14m) 30/703 tested (21 survived, 3 timed out)
Mutation testing 4% (elapsed: ~3m, remaining: ~1h 15m) 31/703 tested (22 survived, 3 timed out)
Mutation testing 4% (elapsed: ~3m, remaining: ~1h 14m) 33/703 tested (22 survived, 4 timed out)
Mutation testing 4% (elapsed: ~3m, remaining: ~1h 15m) 34/703 tested (23 survived, 4 timed out)
Mutation testing 5% (elapsed: ~4m, remaining: ~1h 14m) 36/703 tested (25 survived, 4 timed out)
Mutation testing 5% (elapsed: ~4m, remaining: ~1h 15m) 37/703 tested (26 survived, 4 timed out)
Mutation testing 5% (elapsed: ~4m, remaining: ~1h 13m) 39/703 tested (28 survived, 4 timed out)
Mutation testing 5% (elapsed: ~4m, remaining: ~1h 14m) 40/703 tested (29 survived, 4 timed out)
Mutation testing 5% (elapsed: ~4m, remaining: ~1h 13m) 42/703 tested (31 survived, 4 timed out)
Mutation testing 6% (elapsed: ~4m, remaining: ~1h 14m) 43/703 tested (32 survived, 4 timed out)
Mutation testing 6% (elapsed: ~5m, remaining: ~1h 13m) 45/703 tested (34 survived, 4 timed out)
Mutation testing 6% (elapsed: ~5m, remaining: ~1h 13m) 46/703 tested (35 survived, 4 timed out)
Mutation testing 6% (elapsed: ~5m, remaining: ~1h 11m) 49/703 tested (37 survived, 4 timed out)
Mutation testing 7% (elapsed: ~5m, remaining: ~1h 10m) 51/703 tested (37 survived, 4 timed out)
Mutation testing 7% (elapsed: ~5m, remaining: ~1h 6m) 55/703 tested (37 survived, 5 timed out)
Mutation testing 7% (elapsed: ~5m, remaining: ~1h 7m) 56/703 tested (38 survived, 5 timed out)
Mutation testing 8% (elapsed: ~6m, remaining: ~1h 8m) 57/703 tested (39 survived, 5 timed out)
Mutation testing 8% (elapsed: ~6m, remaining: ~1h 7m) 59/703 tested (41 survived, 5 timed out)
Mutation testing 8% (elapsed: ~6m, remaining: ~1h 7m) 60/703 tested (42 survived, 5 timed out)
Mutation testing 8% (elapsed: ~6m, remaining: ~1h 7m) 62/703 tested (44 survived, 5 timed out)
Mutation testing 8% (elapsed: ~6m, remaining: ~1h 7m) 63/703 tested (45 survived, 5 timed out)
Mutation testing 9% (elapsed: ~6m, remaining: ~1h 7m) 65/703 tested (47 survived, 5 timed out)
Mutation testing 9% (elapsed: ~7m, remaining: ~1h 7m) 66/703 tested (48 survived, 5 timed out)
Mutation testing 9% (elapsed: ~7m, remaining: ~1h 6m) 68/703 tested (50 survived, 5 timed out)
Mutation testing 9% (elapsed: ~7m, remaining: ~1h 7m) 69/703 tested (51 survived, 5 timed out)
Mutation testing 10% (elapsed: ~7m, remaining: ~1h 6m) 71/703 tested (53 survived, 5 timed out)
Mutation testing 10% (elapsed: ~7m, remaining: ~1h 7m) 72/703 tested (54 survived, 5 timed out)
Mutation testing 10% (elapsed: ~7m, remaining: ~1h 6m) 74/703 tested (56 survived, 5 timed out)
Mutation testing 10% (elapsed: ~8m, remaining: ~1h 6m) 75/703 tested (57 survived, 5 timed out)
Mutation testing 10% (elapsed: ~8m, remaining: ~1h 6m) 77/703 tested (59 survived, 5 timed out)
Mutation testing 11% (elapsed: ~8m, remaining: ~1h 6m) 78/703 tested (60 survived, 5 timed out)
Mutation testing 11% (elapsed: ~8m, remaining: ~1h 6m) 80/703 tested (62 survived, 5 timed out)
Mutation testing 11% (elapsed: ~8m, remaining: ~1h 5m) 82/703 tested (63 survived, 5 timed out)
Mutation testing 11% (elapsed: ~8m, remaining: ~1h 5m) 83/703 tested (63 survived, 5 timed out)
Mutation testing 12% (elapsed: ~9m, remaining: ~1h 4m) 86/703 tested (65 survived, 5 timed out)
Mutation testing 12% (elapsed: ~9m, remaining: ~1h 4m) 87/703 tested (66 survived, 5 timed out)
Mutation testing 12% (elapsed: ~9m, remaining: ~1h 4m) 89/703 tested (68 survived, 5 timed out)
Mutation testing 12% (elapsed: ~9m, remaining: ~1h 4m) 90/703 tested (69 survived, 5 timed out)
Mutation testing 13% (elapsed: ~9m, remaining: ~1h 4m) 92/703 tested (71 survived, 5 timed out)
Mutation testing 13% (elapsed: ~9m, remaining: ~1h 4m) 93/703 tested (72 survived, 5 timed out)
Mutation testing 13% (elapsed: ~10m, remaining: ~1h 4m) 95/703 tested (74 survived, 5 timed out)
Mutation testing 13% (elapsed: ~10m, remaining: ~1h 4m) 96/703 tested (75 survived, 5 timed out)
Mutation testing 13% (elapsed: ~10m, remaining: ~1h 3m) 98/703 tested (77 survived, 5 timed out)
Mutation testing 14% (elapsed: ~10m, remaining: ~1h 4m) 99/703 tested (78 survived, 5 timed out)
Mutation testing 14% (elapsed: ~10m, remaining: ~1h 3m) 101/703 tested (80 survived, 5 timed out)
Mutation testing 14% (elapsed: ~10m, remaining: ~1h 3m) 102/703 tested (81 survived, 5 timed out)
Mutation testing 14% (elapsed: ~11m, remaining: ~1h 3m) 104/703 tested (83 survived, 5 timed out)
Mutation testing 14% (elapsed: ~11m, remaining: ~1h 3m) 105/703 tested (84 survived, 5 timed out)
Mutation testing 15% (elapsed: ~11m, remaining: ~1h 3m) 107/703 tested (86 survived, 5 timed out)
Mutation testing 15% (elapsed: ~11m, remaining: ~1h 3m) 108/703 tested (87 survived, 5 timed out)
Mutation testing 15% (elapsed: ~11m, remaining: ~1h 2m) 110/703 tested (89 survived, 5 timed out)
Mutation testing 15% (elapsed: ~11m, remaining: ~1h 3m) 111/703 tested (90 survived, 5 timed out)
Mutation testing 16% (elapsed: ~12m, remaining: ~1h 2m) 113/703 tested (92 survived, 5 timed out)
Mutation testing 16% (elapsed: ~12m, remaining: ~1h 2m) 115/703 tested (93 survived, 5 timed out)
Mutation testing 16% (elapsed: ~12m, remaining: ~1h 2m) 116/703 tested (94 survived, 5 timed out)
Mutation testing 16% (elapsed: ~12m, remaining: ~1h 1m) 118/703 tested (96 survived, 5 timed out)
Mutation testing 16% (elapsed: ~12m, remaining: ~1h 2m) 119/703 tested (97 survived, 5 timed out)
Mutation testing 17% (elapsed: ~12m, remaining: ~1h 1m) 121/703 tested (99 survived, 5 timed out)
Mutation testing 17% (elapsed: ~13m, remaining: ~1h 1m) 122/703 tested (100 survived, 5 timed out)
Mutation testing 17% (elapsed: ~13m, remaining: ~1h 1m) 124/703 tested (102 survived, 5 timed out)
Mutation testing 17% (elapsed: ~13m, remaining: ~1h 1m) 125/703 tested (103 survived, 5 timed out)
Mutation testing 18% (elapsed: ~13m, remaining: ~1h 1m) 127/703 tested (105 survived, 5 timed out)
Mutation testing 18% (elapsed: ~13m, remaining: ~1h 1m) 128/703 tested (106 survived, 5 timed out)
Mutation testing 18% (elapsed: ~13m, remaining: ~1h 0m) 131/703 tested (108 survived, 5 timed out)
Mutation testing 18% (elapsed: ~14m, remaining: ~1h 0m) 132/703 tested (109 survived, 5 timed out)
Mutation testing 19% (elapsed: ~14m, remaining: ~1h 0m) 134/703 tested (111 survived, 5 timed out)
Mutation testing 19% (elapsed: ~14m, remaining: ~1h 0m) 135/703 tested (112 survived, 5 timed out)
Mutation testing 19% (elapsed: ~14m, remaining: ~59m) 137/703 tested (114 survived, 5 timed out)
Mutation testing 19% (elapsed: ~14m, remaining: ~58m) 140/703 tested (114 survived, 5 timed out)
Mutation testing 19% (elapsed: ~14m, remaining: ~59m) 140/703 tested (114 survived, 5 timed out)
Mutation testing 20% (elapsed: ~15m, remaining: ~59m) 141/703 tested (114 survived, 6 timed out)
Mutation testing 20% (elapsed: ~15m, remaining: ~1h 0m) 141/703 tested (114 survived, 6 timed out)
Mutation testing 20% (elapsed: ~15m, remaining: ~59m) 145/703 tested (114 survived, 7 timed out)
Mutation testing 21% (elapsed: ~15m, remaining: ~58m) 148/703 tested (115 survived, 7 timed out)
Mutation testing 21% (elapsed: ~15m, remaining: ~58m) 149/703 tested (116 survived, 7 timed out)
Mutation testing 21% (elapsed: ~15m, remaining: ~57m) 151/703 tested (118 survived, 7 timed out)
Mutation testing 21% (elapsed: ~16m, remaining: ~57m) 153/703 tested (119 survived, 7 timed out)
Mutation testing 21% (elapsed: ~16m, remaining: ~57m) 154/703 tested (120 survived, 7 timed out)
Mutation testing 22% (elapsed: ~16m, remaining: ~57m) 156/703 tested (122 survived, 7 timed out)
Mutation testing 22% (elapsed: ~16m, remaining: ~57m) 157/703 tested (123 survived, 7 timed out)
Mutation testing 22% (elapsed: ~16m, remaining: ~57m) 159/703 tested (125 survived, 7 timed out)
Mutation testing 22% (elapsed: ~16m, remaining: ~57m) 160/703 tested (126 survived, 7 timed out)
Mutation testing 23% (elapsed: ~17m, remaining: ~56m) 162/703 tested (128 survived, 7 timed out)
Mutation testing 23% (elapsed: ~17m, remaining: ~56m) 163/703 tested (129 survived, 7 timed out)
Mutation testing 23% (elapsed: ~17m, remaining: ~56m) 165/703 tested (131 survived, 7 timed out)
Mutation testing 23% (elapsed: ~17m, remaining: ~57m) 165/703 tested (131 survived, 7 timed out)
Mutation testing 23% (elapsed: ~17m, remaining: ~56m) 167/703 tested (131 survived, 8 timed out)
Mutation testing 24% (elapsed: ~17m, remaining: ~55m) 170/703 tested (132 survived, 8 timed out)
Mutation testing 24% (elapsed: ~18m, remaining: ~56m) 170/703 tested (132 survived, 8 timed out)
Mutation testing 24% (elapsed: ~18m, remaining: ~56m) 171/703 tested (132 survived, 9 timed out)
Mutation testing 24% (elapsed: ~18m, remaining: ~56m) 172/703 tested (132 survived, 10 timed out)
Mutation testing 24% (elapsed: ~18m, remaining: ~56m) 173/703 tested (133 survived, 10 timed out)
Mutation testing 24% (elapsed: ~18m, remaining: ~56m) 175/703 tested (135 survived, 10 timed out)
Mutation testing 25% (elapsed: ~18m, remaining: ~56m) 176/703 tested (135 survived, 10 timed out)
Mutation testing 25% (elapsed: ~19m, remaining: ~56m) 177/703 tested (135 survived, 10 timed out)
Mutation testing 25% (elapsed: ~19m, remaining: ~56m) 178/703 tested (135 survived, 10 timed out)
Mutation testing 25% (elapsed: ~19m, remaining: ~56m) 180/703 tested (137 survived, 10 timed out)
Mutation testing 25% (elapsed: ~19m, remaining: ~56m) 181/703 tested (138 survived, 10 timed out)
Mutation testing 26% (elapsed: ~19m, remaining: ~55m) 183/703 tested (140 survived, 10 timed out)
Mutation testing 26% (elapsed: ~19m, remaining: ~55m) 184/703 tested (141 survived, 10 timed out)
Mutation testing 26% (elapsed: ~20m, remaining: ~55m) 186/703 tested (143 survived, 10 timed out)
Mutation testing 26% (elapsed: ~20m, remaining: ~55m) 187/703 tested (144 survived, 10 timed out)
Mutation testing 26% (elapsed: ~20m, remaining: ~55m) 189/703 tested (146 survived, 10 timed out)
Mutation testing 27% (elapsed: ~20m, remaining: ~55m) 190/703 tested (147 survived, 10 timed out)
Mutation testing 27% (elapsed: ~20m, remaining: ~55m) 191/703 tested (148 survived, 10 timed out)
Mutation testing 27% (elapsed: ~20m, remaining: ~55m) 193/703 tested (150 survived, 10 timed out)
Mutation testing 27% (elapsed: ~21m, remaining: ~55m) 194/703 tested (151 survived, 10 timed out)
Mutation testing 27% (elapsed: ~21m, remaining: ~54m) 196/703 tested (153 survived, 10 timed out)
Mutation testing 28% (elapsed: ~21m, remaining: ~54m) 197/703 tested (154 survived, 10 timed out)
Mutation testing 28% (elapsed: ~21m, remaining: ~54m) 199/703 tested (156 survived, 10 timed out)
Mutation testing 28% (elapsed: ~21m, remaining: ~54m) 200/703 tested (157 survived, 10 timed out)
Mutation testing 28% (elapsed: ~21m, remaining: ~54m) 202/703 tested (159 survived, 10 timed out)
Mutation testing 28% (elapsed: ~22m, remaining: ~54m) 203/703 tested (160 survived, 10 timed out)
Mutation testing 29% (elapsed: ~22m, remaining: ~53m) 205/703 tested (162 survived, 10 timed out)
Mutation testing 29% (elapsed: ~22m, remaining: ~53m) 206/703 tested (163 survived, 10 timed out)
Mutation testing 29% (elapsed: ~22m, remaining: ~53m) 208/703 tested (165 survived, 10 timed out)
Mutation testing 29% (elapsed: ~22m, remaining: ~53m) 209/703 tested (166 survived, 10 timed out)
Mutation testing 29% (elapsed: ~22m, remaining: ~53m) 210/703 tested (167 survived, 10 timed out)
Mutation testing 30% (elapsed: ~23m, remaining: ~53m) 211/703 tested (167 survived, 11 timed out)
Mutation testing 30% (elapsed: ~23m, remaining: ~53m) 212/703 tested (168 survived, 11 timed out)
Mutation testing 30% (elapsed: ~23m, remaining: ~53m) 214/703 tested (170 survived, 11 timed out)
Mutation testing 30% (elapsed: ~23m, remaining: ~53m) 214/703 tested (170 survived, 11 timed out)
Mutation testing 30% (elapsed: ~23m, remaining: ~53m) 216/703 tested (171 survived, 12 timed out)
Mutation testing 30% (elapsed: ~23m, remaining: ~53m) 217/703 tested (172 survived, 12 timed out)
Mutation testing 31% (elapsed: ~24m, remaining: ~53m) 219/703 tested (174 survived, 12 timed out)
Mutation testing 31% (elapsed: ~24m, remaining: ~53m) 220/703 tested (175 survived, 12 timed out)
Mutation testing 31% (elapsed: ~24m, remaining: ~52m) 222/703 tested (176 survived, 12 timed out)
Mutation testing 31% (elapsed: ~24m, remaining: ~52m) 223/703 tested (176 survived, 13 timed out)
Mutation testing 32% (elapsed: ~24m, remaining: ~52m) 225/703 tested (177 survived, 13 timed out)
Mutation testing 32% (elapsed: ~24m, remaining: ~52m) 226/703 tested (178 survived, 13 timed out)
Mutation testing 32% (elapsed: ~25m, remaining: ~52m) 227/703 tested (179 survived, 13 timed out)
Mutation testing 32% (elapsed: ~25m, remaining: ~52m) 228/703 tested (179 survived, 14 timed out)
Mutation testing 32% (elapsed: ~25m, remaining: ~52m) 228/703 tested (179 survived, 14 timed out)
Mutation testing 32% (elapsed: ~25m, remaining: ~52m) 229/703 tested (179 survived, 15 timed out)
Mutation testing 32% (elapsed: ~25m, remaining: ~52m) 230/703 tested (179 survived, 15 timed out)
Mutation testing 33% (elapsed: ~25m, remaining: ~52m) 232/703 tested (181 survived, 15 timed out)
Mutation testing 33% (elapsed: ~26m, remaining: ~52m) 232/703 tested (181 survived, 15 timed out)
Mutation testing 33% (elapsed: ~26m, remaining: ~52m) 233/703 tested (181 survived, 16 timed out)
Mutation testing 33% (elapsed: ~26m, remaining: ~52m) 234/703 tested (181 survived, 16 timed out)
Mutation testing 33% (elapsed: ~26m, remaining: ~52m) 235/703 tested (181 survived, 16 timed out)
Mutation testing 33% (elapsed: ~26m, remaining: ~52m) 237/703 tested (183 survived, 16 timed out)
Mutation testing 33% (elapsed: ~26m, remaining: ~52m) 237/703 tested (183 survived, 16 timed out)
Mutation testing 33% (elapsed: ~27m, remaining: ~52m) 238/703 tested (183 survived, 17 timed out)
Mutation testing 33% (elapsed: ~27m, remaining: ~53m) 238/703 tested (183 survived, 17 timed out)
Mutation testing 33% (elapsed: ~27m, remaining: ~53m) 239/703 tested (183 survived, 18 timed out)
Mutation testing 34% (elapsed: ~27m, remaining: ~53m) 240/703 tested (183 survived, 19 timed out)
Mutation testing 34% (elapsed: ~27m, remaining: ~53m) 240/703 tested (183 survived, 19 timed out)
Mutation testing 34% (elapsed: ~27m, remaining: ~53m) 241/703 tested (183 survived, 20 timed out)
Mutation testing 34% (elapsed: ~28m, remaining: ~53m) 242/703 tested (183 survived, 21 timed out)
Mutation testing 34% (elapsed: ~28m, remaining: ~53m) 242/703 tested (183 survived, 21 timed out)
Mutation testing 34% (elapsed: ~28m, remaining: ~53m) 243/703 tested (183 survived, 22 timed out)
Mutation testing 34% (elapsed: ~28m, remaining: ~53m) 244/703 tested (183 survived, 23 timed out)
Mutation testing 34% (elapsed: ~28m, remaining: ~53m) 244/703 tested (183 survived, 23 timed out)
Mutation testing 34% (elapsed: ~28m, remaining: ~53m) 246/703 tested (184 survived, 24 timed out)
Mutation testing 35% (elapsed: ~29m, remaining: ~53m) 247/703 tested (185 survived, 24 timed out)
Mutation testing 35% (elapsed: ~29m, remaining: ~53m) 249/703 tested (187 survived, 24 timed out)
Mutation testing 35% (elapsed: ~29m, remaining: ~53m) 250/703 tested (188 survived, 24 timed out)
Mutation testing 35% (elapsed: ~29m, remaining: ~53m) 251/703 tested (189 survived, 24 timed out)
Mutation testing 35% (elapsed: ~29m, remaining: ~52m) 253/703 tested (191 survived, 24 timed out)
Mutation testing 36% (elapsed: ~29m, remaining: ~52m) 254/703 tested (192 survived, 24 timed out)
Mutation testing 36% (elapsed: ~30m, remaining: ~52m) 256/703 tested (194 survived, 24 timed out)
Mutation testing 36% (elapsed: ~30m, remaining: ~52m) 257/703 tested (195 survived, 24 timed out)
Mutation testing 36% (elapsed: ~30m, remaining: ~52m) 259/703 tested (197 survived, 24 timed out)
Mutation testing 36% (elapsed: ~30m, remaining: ~51m) 260/703 tested (198 survived, 24 timed out)
Mutation testing 37% (elapsed: ~30m, remaining: ~51m) 262/703 tested (200 survived, 24 timed out)
Mutation testing 37% (elapsed: ~30m, remaining: ~51m) 263/703 tested (201 survived, 24 timed out)
Mutation testing 37% (elapsed: ~31m, remaining: ~51m) 265/703 tested (203 survived, 24 timed out)
Mutation testing 37% (elapsed: ~31m, remaining: ~51m) 266/703 tested (204 survived, 24 timed out)
Mutation testing 38% (elapsed: ~31m, remaining: ~50m) 268/703 tested (206 survived, 24 timed out)
Mutation testing 38% (elapsed: ~31m, remaining: ~50m) 269/703 tested (207 survived, 24 timed out)
Mutation testing 38% (elapsed: ~31m, remaining: ~50m) 271/703 tested (209 survived, 24 timed out)
Mutation testing 38% (elapsed: ~31m, remaining: ~50m) 272/703 tested (210 survived, 24 timed out)
Mutation testing 38% (elapsed: ~32m, remaining: ~50m) 274/703 tested (212 survived, 24 timed out)
Mutation testing 39% (elapsed: ~32m, remaining: ~50m) 275/703 tested (213 survived, 24 timed out)
Mutation testing 39% (elapsed: ~32m, remaining: ~49m) 277/703 tested (215 survived, 24 timed out)
Mutation testing 39% (elapsed: ~32m, remaining: ~49m) 279/703 tested (216 survived, 24 timed out)
Mutation testing 39% (elapsed: ~32m, remaining: ~49m) 281/703 tested (218 survived, 24 timed out)
Mutation testing 40% (elapsed: ~32m, remaining: ~49m) 282/703 tested (219 survived, 24 timed out)
Mutation testing 40% (elapsed: ~33m, remaining: ~48m) 284/703 tested (221 survived, 24 timed out)
Mutation testing 40% (elapsed: ~33m, remaining: ~48m) 285/703 tested (222 survived, 24 timed out)
Mutation testing 40% (elapsed: ~33m, remaining: ~48m) 286/703 tested (223 survived, 24 timed out)
Mutation testing 40% (elapsed: ~33m, remaining: ~48m) 288/703 tested (225 survived, 24 timed out)
Mutation testing 41% (elapsed: ~33m, remaining: ~48m) 289/703 tested (226 survived, 24 timed out)
Mutation testing 41% (elapsed: ~33m, remaining: ~47m) 292/703 tested (228 survived, 24 timed out)
Mutation testing 41% (elapsed: ~34m, remaining: ~47m) 294/703 tested (229 survived, 24 timed out)
Mutation testing 42% (elapsed: ~34m, remaining: ~46m) 296/703 tested (231 survived, 24 timed out)
Mutation testing 42% (elapsed: ~34m, remaining: ~46m) 297/703 tested (232 survived, 24 timed out)
Mutation testing 42% (elapsed: ~34m, remaining: ~46m) 299/703 tested (234 survived, 24 timed out)
Mutation testing 42% (elapsed: ~34m, remaining: ~46m) 300/703 tested (235 survived, 24 timed out)
Mutation testing 42% (elapsed: ~34m, remaining: ~46m) 302/703 tested (237 survived, 24 timed out)
Mutation testing 43% (elapsed: ~35m, remaining: ~46m) 303/703 tested (237 survived, 24 timed out)
Mutation testing 43% (elapsed: ~35m, remaining: ~46m) 304/703 tested (238 survived, 24 timed out)
Mutation testing 43% (elapsed: ~35m, remaining: ~46m) 305/703 tested (239 survived, 24 timed out)
Mutation testing 43% (elapsed: ~35m, remaining: ~46m) 306/703 tested (239 survived, 25 timed out)
Mutation testing 43% (elapsed: ~35m, remaining: ~46m) 307/703 tested (240 survived, 25 timed out)
Mutation testing 43% (elapsed: ~35m, remaining: ~45m) 308/703 tested (240 survived, 26 timed out)
Mutation testing 43% (elapsed: ~36m, remaining: ~45m) 309/703 tested (241 survived, 26 timed out)
Mutation testing 44% (elapsed: ~36m, remaining: ~45m) 311/703 tested (242 survived, 26 timed out)
Mutation testing 44% (elapsed: ~36m, remaining: ~45m) 313/703 tested (244 survived, 26 timed out)
Mutation testing 44% (elapsed: ~36m, remaining: ~45m) 314/703 tested (245 survived, 26 timed out)
Mutation testing 44% (elapsed: ~36m, remaining: ~44m) 316/703 tested (247 survived, 26 timed out)
Mutation testing 45% (elapsed: ~36m, remaining: ~44m) 317/703 tested (248 survived, 26 timed out)
Mutation testing 45% (elapsed: ~37m, remaining: ~44m) 319/703 tested (250 survived, 26 timed out)
Mutation testing 45% (elapsed: ~37m, remaining: ~44m) 320/703 tested (251 survived, 26 timed out)
Mutation testing 45% (elapsed: ~37m, remaining: ~44m) 322/703 tested (253 survived, 26 timed out)
Mutation testing 45% (elapsed: ~37m, remaining: ~44m) 323/703 tested (254 survived, 26 timed out)
Mutation testing 46% (elapsed: ~37m, remaining: ~43m) 325/703 tested (256 survived, 26 timed out)
Mutation testing 46% (elapsed: ~37m, remaining: ~43m) 326/703 tested (257 survived, 26 timed out)
Mutation testing 46% (elapsed: ~38m, remaining: ~43m) 328/703 tested (259 survived, 26 timed out)
Mutation testing 46% (elapsed: ~38m, remaining: ~43m) 328/703 tested (259 survived, 26 timed out)
Mutation testing 46% (elapsed: ~38m, remaining: ~43m) 329/703 tested (259 survived, 27 timed out)
Mutation testing 47% (elapsed: ~38m, remaining: ~43m) 331/703 tested (261 survived, 27 timed out)
Mutation testing 47% (elapsed: ~38m, remaining: ~43m) 332/703 tested (262 survived, 27 timed out)
Mutation testing 47% (elapsed: ~38m, remaining: ~42m) 334/703 tested (264 survived, 27 timed out)
Mutation testing 47% (elapsed: ~39m, remaining: ~42m) 335/703 tested (265 survived, 27 timed out)
Mutation testing 47% (elapsed: ~39m, remaining: ~42m) 337/703 tested (267 survived, 27 timed out)
Mutation testing 48% (elapsed: ~39m, remaining: ~42m) 338/703 tested (268 survived, 27 timed out)
Mutation testing 48% (elapsed: ~39m, remaining: ~42m) 340/703 tested (270 survived, 27 timed out)
Mutation testing 48% (elapsed: ~39m, remaining: ~42m) 341/703 tested (271 survived, 27 timed out)
Mutation testing 48% (elapsed: ~39m, remaining: ~41m) 343/703 tested (273 survived, 27 timed out)
Mutation testing 48% (elapsed: ~40m, remaining: ~41m) 344/703 tested (274 survived, 27 timed out)
Mutation testing 49% (elapsed: ~40m, remaining: ~41m) 346/703 tested (276 survived, 27 timed out)
Mutation testing 49% (elapsed: ~40m, remaining: ~41m) 347/703 tested (276 survived, 27 timed out)
Mutation testing 49% (elapsed: ~40m, remaining: ~41m) 349/703 tested (277 survived, 27 timed out)
Mutation testing 49% (elapsed: ~40m, remaining: ~41m) 350/703 tested (278 survived, 27 timed out)
Mutation testing 50% (elapsed: ~40m, remaining: ~40m) 352/703 tested (280 survived, 27 timed out)
Mutation testing 50% (elapsed: ~41m, remaining: ~40m) 353/703 tested (281 survived, 27 timed out)
Mutation testing 50% (elapsed: ~41m, remaining: ~40m) 355/703 tested (283 survived, 27 timed out)
Mutation testing 50% (elapsed: ~41m, remaining: ~40m) 356/703 tested (284 survived, 27 timed out)
Mutation testing 50% (elapsed: ~41m, remaining: ~39m) 358/703 tested (286 survived, 27 timed out)
Mutation testing 51% (elapsed: ~41m, remaining: ~39m) 359/703 tested (287 survived, 27 timed out)
Mutation testing 51% (elapsed: ~41m, remaining: ~39m) 360/703 tested (288 survived, 27 timed out)
Mutation testing 51% (elapsed: ~42m, remaining: ~39m) 362/703 tested (290 survived, 27 timed out)
Mutation testing 51% (elapsed: ~42m, remaining: ~39m) 363/703 tested (291 survived, 27 timed out)
Mutation testing 51% (elapsed: ~42m, remaining: ~39m) 365/703 tested (293 survived, 27 timed out)
Mutation testing 52% (elapsed: ~42m, remaining: ~39m) 366/703 tested (294 survived, 27 timed out)
Mutation testing 52% (elapsed: ~42m, remaining: ~38m) 368/703 tested (296 survived, 27 timed out)
Mutation testing 52% (elapsed: ~42m, remaining: ~38m) 369/703 tested (297 survived, 27 timed out)
Mutation testing 52% (elapsed: ~43m, remaining: ~38m) 371/703 tested (299 survived, 27 timed out)
Mutation testing 52% (elapsed: ~43m, remaining: ~38m) 372/703 tested (300 survived, 27 timed out)
Mutation testing 53% (elapsed: ~43m, remaining: ~38m) 374/703 tested (302 survived, 27 timed out)
Mutation testing 53% (elapsed: ~43m, remaining: ~38m) 375/703 tested (303 survived, 27 timed out)
Mutation testing 53% (elapsed: ~43m, remaining: ~37m) 377/703 tested (305 survived, 27 timed out)
Mutation testing 53% (elapsed: ~43m, remaining: ~37m) 378/703 tested (306 survived, 27 timed out)
Mutation testing 54% (elapsed: ~44m, remaining: ~37m) 380/703 tested (308 survived, 27 timed out)
Mutation testing 54% (elapsed: ~44m, remaining: ~37m) 381/703 tested (309 survived, 27 timed out)
Mutation testing 54% (elapsed: ~44m, remaining: ~37m) 383/703 tested (311 survived, 27 timed out)
Mutation testing 54% (elapsed: ~44m, remaining: ~36m) 384/703 tested (312 survived, 27 timed out)
Mutation testing 54% (elapsed: ~44m, remaining: ~36m) 386/703 tested (314 survived, 27 timed out)
Mutation testing 55% (elapsed: ~44m, remaining: ~36m) 387/703 tested (315 survived, 27 timed out)
Mutation testing 55% (elapsed: ~45m, remaining: ~36m) 389/703 tested (317 survived, 27 timed out)
Mutation testing 55% (elapsed: ~45m, remaining: ~36m) 390/703 tested (318 survived, 27 timed out)
Mutation testing 55% (elapsed: ~45m, remaining: ~35m) 392/703 tested (320 survived, 27 timed out)
Mutation testing 55% (elapsed: ~45m, remaining: ~35m) 393/703 tested (321 survived, 27 timed out)
Mutation testing 56% (elapsed: ~45m, remaining: ~35m) 395/703 tested (323 survived, 27 timed out)
Mutation testing 56% (elapsed: ~45m, remaining: ~35m) 396/703 tested (324 survived, 27 timed out)
Mutation testing 56% (elapsed: ~46m, remaining: ~35m) 398/703 tested (326 survived, 27 timed out)
Mutation testing 56% (elapsed: ~46m, remaining: ~35m) 399/703 tested (327 survived, 27 timed out)
Mutation testing 57% (elapsed: ~46m, remaining: ~34m) 401/703 tested (329 survived, 27 timed out)
Mutation testing 57% (elapsed: ~46m, remaining: ~34m) 402/703 tested (330 survived, 27 timed out)
Mutation testing 57% (elapsed: ~46m, remaining: ~34m) 404/703 tested (332 survived, 27 timed out)
Mutation testing 57% (elapsed: ~46m, remaining: ~34m) 405/703 tested (333 survived, 27 timed out)
Mutation testing 57% (elapsed: ~47m, remaining: ~34m) 407/703 tested (335 survived, 27 timed out)
Mutation testing 58% (elapsed: ~47m, remaining: ~34m) 408/703 tested (336 survived, 27 timed out)
Mutation testing 58% (elapsed: ~47m, remaining: ~34m) 409/703 tested (337 survived, 27 timed out)
Mutation testing 58% (elapsed: ~47m, remaining: ~33m) 411/703 tested (339 survived, 27 timed out)
Mutation testing 58% (elapsed: ~47m, remaining: ~33m) 412/703 tested (340 survived, 27 timed out)
Mutation testing 58% (elapsed: ~47m, remaining: ~33m) 414/703 tested (342 survived, 27 timed out)
Mutation testing 59% (elapsed: ~48m, remaining: ~33m) 415/703 tested (343 survived, 27 timed out)
Mutation testing 59% (elapsed: ~48m, remaining: ~33m) 417/703 tested (345 survived, 27 timed out)
Mutation testing 59% (elapsed: ~48m, remaining: ~32m) 418/703 tested (346 survived, 27 timed out)
Mutation testing 59% (elapsed: ~48m, remaining: ~32m) 420/703 tested (348 survived, 27 timed out)
Mutation testing 59% (elapsed: ~48m, remaining: ~32m) 421/703 tested (349 survived, 27 timed out)
Mutation testing 60% (elapsed: ~48m, remaining: ~32m) 423/703 tested (351 survived, 27 timed out)
Mutation testing 60% (elapsed: ~49m, remaining: ~32m) 424/703 tested (352 survived, 27 timed out)
Mutation testing 60% (elapsed: ~49m, remaining: ~31m) 426/703 tested (354 survived, 27 timed out)
Mutation testing 60% (elapsed: ~49m, remaining: ~31m) 427/703 tested (355 survived, 27 timed out)
Mutation testing 61% (elapsed: ~49m, remaining: ~31m) 429/703 tested (357 survived, 27 timed out)
Mutation testing 61% (elapsed: ~49m, remaining: ~31m) 430/703 tested (358 survived, 27 timed out)
Mutation testing 61% (elapsed: ~49m, remaining: ~31m) 432/703 tested (360 survived, 27 timed out)
Mutation testing 61% (elapsed: ~50m, remaining: ~31m) 433/703 tested (361 survived, 27 timed out)
Mutation testing 61% (elapsed: ~50m, remaining: ~30m) 435/703 tested (363 survived, 27 timed out)
Mutation testing 62% (elapsed: ~50m, remaining: ~30m) 436/703 tested (364 survived, 27 timed out)
Mutation testing 62% (elapsed: ~50m, remaining: ~30m) 438/703 tested (366 survived, 27 timed out)
Mutation testing 62% (elapsed: ~50m, remaining: ~30m) 439/703 tested (367 survived, 27 timed out)
Mutation testing 62% (elapsed: ~50m, remaining: ~30m) 441/703 tested (369 survived, 27 timed out)
Mutation testing 62% (elapsed: ~51m, remaining: ~30m) 442/703 tested (370 survived, 27 timed out)
Mutation testing 63% (elapsed: ~51m, remaining: ~29m) 444/703 tested (372 survived, 27 timed out)
Mutation testing 63% (elapsed: ~51m, remaining: ~29m) 445/703 tested (373 survived, 27 timed out)
Mutation testing 63% (elapsed: ~51m, remaining: ~29m) 447/703 tested (375 survived, 27 timed out)
Mutation testing 63% (elapsed: ~51m, remaining: ~29m) 448/703 tested (376 survived, 27 timed out)
Mutation testing 64% (elapsed: ~51m, remaining: ~29m) 450/703 tested (378 survived, 27 timed out)
Mutation testing 64% (elapsed: ~52m, remaining: ~29m) 451/703 tested (379 survived, 27 timed out)
Mutation testing 64% (elapsed: ~52m, remaining: ~28m) 453/703 tested (381 survived, 27 timed out)
Mutation testing 64% (elapsed: ~52m, remaining: ~28m) 454/703 tested (382 survived, 27 timed out)
Mutation testing 64% (elapsed: ~52m, remaining: ~28m) 456/703 tested (384 survived, 27 timed out)
Mutation testing 65% (elapsed: ~52m, remaining: ~28m) 457/703 tested (385 survived, 27 timed out)
Mutation testing 65% (elapsed: ~52m, remaining: ~28m) 459/703 tested (387 survived, 27 timed out)
Mutation testing 65% (elapsed: ~53m, remaining: ~27m) 460/703 tested (388 survived, 27 timed out)
Mutation testing 65% (elapsed: ~53m, remaining: ~27m) 461/703 tested (389 survived, 27 timed out)
Mutation testing 65% (elapsed: ~53m, remaining: ~27m) 463/703 tested (391 survived, 27 timed out)
Mutation testing 66% (elapsed: ~53m, remaining: ~27m) 464/703 tested (392 survived, 27 timed out)
Mutation testing 66% (elapsed: ~53m, remaining: ~27m) 466/703 tested (394 survived, 27 timed out)
Mutation testing 66% (elapsed: ~53m, remaining: ~27m) 467/703 tested (395 survived, 27 timed out)
Mutation testing 66% (elapsed: ~54m, remaining: ~26m) 469/703 tested (397 survived, 27 timed out)
Mutation testing 66% (elapsed: ~54m, remaining: ~26m) 470/703 tested (398 survived, 27 timed out)
Mutation testing 67% (elapsed: ~54m, remaining: ~26m) 472/703 tested (400 survived, 27 timed out)
Mutation testing 67% (elapsed: ~54m, remaining: ~26m) 473/703 tested (401 survived, 27 timed out)
Mutation testing 67% (elapsed: ~54m, remaining: ~26m) 475/703 tested (403 survived, 27 timed out)
Mutation testing 67% (elapsed: ~54m, remaining: ~26m) 476/703 tested (404 survived, 27 timed out)
Mutation testing 67% (elapsed: ~55m, remaining: ~25m) 478/703 tested (406 survived, 27 timed out)
Mutation testing 68% (elapsed: ~55m, remaining: ~25m) 479/703 tested (407 survived, 27 timed out)
Mutation testing 68% (elapsed: ~55m, remaining: ~25m) 481/703 tested (409 survived, 27 timed out)
Mutation testing 68% (elapsed: ~55m, remaining: ~25m) 482/703 tested (410 survived, 27 timed out)
Mutation testing 68% (elapsed: ~55m, remaining: ~25m) 484/703 tested (412 survived, 27 timed out)
Mutation testing 68% (elapsed: ~55m, remaining: ~25m) 485/703 tested (413 survived, 27 timed out)
Mutation testing 69% (elapsed: ~56m, remaining: ~24m) 487/703 tested (415 survived, 27 timed out)
Mutation testing 69% (elapsed: ~56m, remaining: ~24m) 488/703 tested (416 survived, 27 timed out)
Mutation testing 69% (elapsed: ~56m, remaining: ~24m) 490/703 tested (418 survived, 27 timed out)
Mutation testing 69% (elapsed: ~56m, remaining: ~24m) 491/703 tested (419 survived, 27 timed out)
Mutation testing 70% (elapsed: ~56m, remaining: ~24m) 493/703 tested (421 survived, 27 timed out)
Mutation testing 70% (elapsed: ~56m, remaining: ~24m) 494/703 tested (422 survived, 27 timed out)
Mutation testing 70% (elapsed: ~57m, remaining: ~23m) 496/703 tested (424 survived, 27 timed out)
Mutation testing 70% (elapsed: ~57m, remaining: ~23m) 497/703 tested (425 survived, 27 timed out)
Mutation testing 70% (elapsed: ~57m, remaining: ~23m) 499/703 tested (427 survived, 27 timed out)
Mutation testing 71% (elapsed: ~57m, remaining: ~23m) 500/703 tested (428 survived, 27 timed out)
Mutation testing 71% (elapsed: ~57m, remaining: ~23m) 502/703 tested (430 survived, 27 timed out)
Mutation testing 71% (elapsed: ~57m, remaining: ~22m) 503/703 tested (431 survived, 27 timed out)
Mutation testing 71% (elapsed: ~58m, remaining: ~22m) 505/703 tested (433 survived, 27 timed out)
Mutation testing 71% (elapsed: ~58m, remaining: ~22m) 506/703 tested (434 survived, 27 timed out)
Mutation testing 72% (elapsed: ~58m, remaining: ~22m) 508/703 tested (436 survived, 27 timed out)
Mutation testing 72% (elapsed: ~58m, remaining: ~22m) 509/703 tested (437 survived, 27 timed out)
Mutation testing 72% (elapsed: ~58m, remaining: ~22m) 511/703 tested (439 survived, 27 timed out)
Mutation testing 72% (elapsed: ~58m, remaining: ~21m) 512/703 tested (440 survived, 27 timed out)
Mutation testing 72% (elapsed: ~59m, remaining: ~21m) 513/703 tested (441 survived, 27 timed out)
Mutation testing 73% (elapsed: ~59m, remaining: ~21m) 515/703 tested (443 survived, 27 timed out)
Mutation testing 73% (elapsed: ~59m, remaining: ~21m) 516/703 tested (444 survived, 27 timed out)
Mutation testing 73% (elapsed: ~59m, remaining: ~21m) 518/703 tested (446 survived, 27 timed out)
Mutation testing 73% (elapsed: ~59m, remaining: ~21m) 519/703 tested (447 survived, 27 timed out)
Mutation testing 74% (elapsed: ~59m, remaining: ~20m) 521/703 tested (449 survived, 27 timed out)
Mutation testing 74% (elapsed: ~1h 0m, remaining: ~20m) 522/703 tested (450 survived, 27 timed out)
Mutation testing 74% (elapsed: ~1h 0m, remaining: ~20m) 524/703 tested (452 survived, 27 timed out)
Mutation testing 74% (elapsed: ~1h 0m, remaining: ~20m) 525/703 tested (453 survived, 27 timed out)
Mutation testing 74% (elapsed: ~1h 0m, remaining: ~20m) 527/703 tested (455 survived, 27 timed out)
Mutation testing 75% (elapsed: ~1h 0m, remaining: ~20m) 528/703 tested (456 survived, 27 timed out)
Mutation testing 75% (elapsed: ~1h 0m, remaining: ~19m) 530/703 tested (458 survived, 27 timed out)
Mutation testing 75% (elapsed: ~1h 1m, remaining: ~19m) 531/703 tested (459 survived, 27 timed out)
Mutation testing 75% (elapsed: ~1h 1m, remaining: ~19m) 533/703 tested (461 survived, 27 timed out)
Mutation testing 75% (elapsed: ~1h 1m, remaining: ~19m) 534/703 tested (462 survived, 27 timed out)
Mutation testing 76% (elapsed: ~1h 1m, remaining: ~19m) 536/703 tested (464 survived, 27 timed out)
Mutation testing 76% (elapsed: ~1h 1m, remaining: ~19m) 537/703 tested (465 survived, 27 timed out)
Mutation testing 76% (elapsed: ~1h 1m, remaining: ~18m) 539/703 tested (467 survived, 27 timed out)
Mutation testing 76% (elapsed: ~1h 2m, remaining: ~18m) 540/703 tested (468 survived, 27 timed out)
Mutation testing 77% (elapsed: ~1h 2m, remaining: ~18m) 542/703 tested (470 survived, 27 timed out)
Mutation testing 77% (elapsed: ~1h 2m, remaining: ~18m) 543/703 tested (471 survived, 27 timed out)
Mutation testing 77% (elapsed: ~1h 2m, remaining: ~18m) 545/703 tested (473 survived, 27 timed out)
Mutation testing 77% (elapsed: ~1h 2m, remaining: ~18m) 546/703 tested (474 survived, 27 timed out)
Mutation testing 77% (elapsed: ~1h 2m, remaining: ~17m) 548/703 tested (476 survived, 27 timed out)
Mutation testing 78% (elapsed: ~1h 3m, remaining: ~17m) 549/703 tested (477 survived, 27 timed out)
Mutation testing 78% (elapsed: ~1h 3m, remaining: ~17m) 551/703 tested (479 survived, 27 timed out)
Mutation testing 78% (elapsed: ~1h 3m, remaining: ~17m) 552/703 tested (480 survived, 27 timed out)
Mutation testing 78% (elapsed: ~1h 3m, remaining: ~17m) 554/703 tested (482 survived, 27 timed out)
Mutation testing 78% (elapsed: ~1h 3m, remaining: ~16m) 555/703 tested (483 survived, 27 timed out)
Mutation testing 79% (elapsed: ~1h 3m, remaining: ~16m) 557/703 tested (485 survived, 27 timed out)
Mutation testing 79% (elapsed: ~1h 4m, remaining: ~16m) 558/703 tested (486 survived, 27 timed out)
Mutation testing 79% (elapsed: ~1h 4m, remaining: ~16m) 559/703 tested (487 survived, 27 timed out)
Mutation testing 79% (elapsed: ~1h 4m, remaining: ~16m) 561/703 tested (489 survived, 27 timed out)
Mutation testing 79% (elapsed: ~1h 4m, remaining: ~16m) 562/703 tested (490 survived, 27 timed out)
Mutation testing 80% (elapsed: ~1h 4m, remaining: ~15m) 564/703 tested (492 survived, 27 timed out)
Mutation testing 80% (elapsed: ~1h 4m, remaining: ~15m) 565/703 tested (493 survived, 27 timed out)
Mutation testing 80% (elapsed: ~1h 5m, remaining: ~15m) 567/703 tested (495 survived, 27 timed out)
Mutation testing 80% (elapsed: ~1h 5m, remaining: ~15m) 568/703 tested (496 survived, 27 timed out)
Mutation testing 81% (elapsed: ~1h 5m, remaining: ~15m) 570/703 tested (498 survived, 27 timed out)
Mutation testing 81% (elapsed: ~1h 5m, remaining: ~15m) 571/703 tested (499 survived, 27 timed out)
Mutation testing 81% (elapsed: ~1h 5m, remaining: ~14m) 573/703 tested (501 survived, 27 timed out)
Mutation testing 81% (elapsed: ~1h 5m, remaining: ~14m) 574/703 tested (502 survived, 27 timed out)
Mutation testing 81% (elapsed: ~1h 6m, remaining: ~14m) 576/703 tested (504 survived, 27 timed out)
Mutation testing 82% (elapsed: ~1h 6m, remaining: ~14m) 577/703 tested (505 survived, 27 timed out)
Mutation testing 82% (elapsed: ~1h 6m, remaining: ~14m) 579/703 tested (507 survived, 27 timed out)
Mutation testing 82% (elapsed: ~1h 6m, remaining: ~14m) 580/703 tested (508 survived, 27 timed out)
Mutation testing 82% (elapsed: ~1h 6m, remaining: ~13m) 582/703 tested (510 survived, 27 timed out)
Mutation testing 82% (elapsed: ~1h 6m, remaining: ~13m) 583/703 tested (511 survived, 27 timed out)
Mutation testing 83% (elapsed: ~1h 7m, remaining: ~13m) 585/703 tested (513 survived, 27 timed out)
Mutation testing 83% (elapsed: ~1h 7m, remaining: ~13m) 586/703 tested (514 survived, 27 timed out)
Mutation testing 83% (elapsed: ~1h 7m, remaining: ~13m) 588/703 tested (516 survived, 27 timed out)
Mutation testing 83% (elapsed: ~1h 7m, remaining: ~13m) 589/703 tested (517 survived, 27 timed out)
Mutation testing 84% (elapsed: ~1h 7m, remaining: ~12m) 591/703 tested (519 survived, 27 timed out)
Mutation testing 84% (elapsed: ~1h 7m, remaining: ~12m) 592/703 tested (520 survived, 27 timed out)
Mutation testing 84% (elapsed: ~1h 8m, remaining: ~12m) 594/703 tested (522 survived, 27 timed out)
Mutation testing 84% (elapsed: ~1h 8m, remaining: ~12m) 595/703 tested (523 survived, 27 timed out)
Mutation testing 84% (elapsed: ~1h 8m, remaining: ~12m) 597/703 tested (525 survived, 27 timed out)
Mutation testing 85% (elapsed: ~1h 8m, remaining: ~12m) 598/703 tested (526 survived, 27 timed out)
Mutation testing 85% (elapsed: ~1h 8m, remaining: ~11m) 600/703 tested (528 survived, 27 timed out)
Mutation testing 85% (elapsed: ~1h 8m, remaining: ~11m) 601/703 tested (529 survived, 27 timed out)
Mutation testing 85% (elapsed: ~1h 9m, remaining: ~11m) 603/703 tested (531 survived, 27 timed out)
Mutation testing 85% (elapsed: ~1h 9m, remaining: ~11m) 604/703 tested (532 survived, 27 timed out)
Mutation testing 86% (elapsed: ~1h 9m, remaining: ~11m) 606/703 tested (534 survived, 27 timed out)
Mutation testing 86% (elapsed: ~1h 9m, remaining: ~10m) 607/703 tested (535 survived, 27 timed out)
Mutation testing 86% (elapsed: ~1h 9m, remaining: ~10m) 609/703 tested (537 survived, 27 timed out)
Mutation testing 86% (elapsed: ~1h 9m, remaining: ~10m) 610/703 tested (538 survived, 27 timed out)
Mutation testing 86% (elapsed: ~1h 10m, remaining: ~10m) 611/703 tested (539 survived, 27 timed out)
Mutation testing 87% (elapsed: ~1h 10m, remaining: ~10m) 613/703 tested (541 survived, 27 timed out)
Mutation testing 87% (elapsed: ~1h 10m, remaining: ~10m) 614/703 tested (542 survived, 27 timed out)
Mutation testing 87% (elapsed: ~1h 10m, remaining: ~9m) 616/703 tested (544 survived, 27 timed out)
Mutation testing 87% (elapsed: ~1h 10m, remaining: ~9m) 617/703 tested (545 survived, 27 timed out)
Mutation testing 88% (elapsed: ~1h 10m, remaining: ~9m) 619/703 tested (547 survived, 27 timed out)
Mutation testing 88% (elapsed: ~1h 11m, remaining: ~9m) 620/703 tested (548 survived, 27 timed out)
Mutation testing 88% (elapsed: ~1h 11m, remaining: ~9m) 622/703 tested (550 survived, 27 timed out)
Mutation testing 88% (elapsed: ~1h 11m, remaining: ~9m) 623/703 tested (551 survived, 27 timed out)
Mutation testing 88% (elapsed: ~1h 11m, remaining: ~8m) 625/703 tested (553 survived, 27 timed out)
Mutation testing 89% (elapsed: ~1h 11m, remaining: ~8m) 626/703 tested (554 survived, 27 timed out)
Mutation testing 89% (elapsed: ~1h 11m, remaining: ~8m) 628/703 tested (556 survived, 27 timed out)
Mutation testing 89% (elapsed: ~1h 12m, remaining: ~8m) 629/703 tested (557 survived, 27 timed out)
Mutation testing 89% (elapsed: ~1h 12m, remaining: ~8m) 631/703 tested (559 survived, 27 timed out)
Mutation testing 89% (elapsed: ~1h 12m, remaining: ~8m) 632/703 tested (560 survived, 27 timed out)
Mutation testing 90% (elapsed: ~1h 12m, remaining: ~7m) 634/703 tested (562 survived, 27 timed out)
Mutation testing 90% (elapsed: ~1h 12m, remaining: ~7m) 635/703 tested (563 survived, 27 timed out)
Mutation testing 90% (elapsed: ~1h 12m, remaining: ~7m) 637/703 tested (565 survived, 27 timed out)
Mutation testing 90% (elapsed: ~1h 13m, remaining: ~7m) 638/703 tested (566 survived, 27 timed out)
Mutation testing 91% (elapsed: ~1h 13m, remaining: ~7m) 640/703 tested (568 survived, 27 timed out)
Mutation testing 91% (elapsed: ~1h 13m, remaining: ~7m) 641/703 tested (569 survived, 27 timed out)
Mutation testing 91% (elapsed: ~1h 13m, remaining: ~6m) 643/703 tested (571 survived, 27 timed out)
Mutation testing 91% (elapsed: ~1h 13m, remaining: ~6m) 644/703 tested (572 survived, 27 timed out)
Mutation testing 91% (elapsed: ~1h 13m, remaining: ~6m) 646/703 tested (574 survived, 27 timed out)
Mutation testing 92% (elapsed: ~1h 14m, remaining: ~6m) 647/703 tested (575 survived, 27 timed out)
Mutation testing 92% (elapsed: ~1h 14m, remaining: ~6m) 649/703 tested (577 survived, 27 timed out)
Mutation testing 92% (elapsed: ~1h 14m, remaining: ~6m) 650/703 tested (578 survived, 27 timed out)
Mutation testing 92% (elapsed: ~1h 14m, remaining: ~5m) 652/703 tested (580 survived, 27 timed out)
Mutation testing 92% (elapsed: ~1h 14m, remaining: ~5m) 653/703 tested (581 survived, 27 timed out)
Mutation testing 93% (elapsed: ~1h 14m, remaining: ~5m) 655/703 tested (583 survived, 27 timed out)
Mutation testing 93% (elapsed: ~1h 15m, remaining: ~5m) 656/703 tested (584 survived, 27 timed out)
Mutation testing 93% (elapsed: ~1h 15m, remaining: ~5m) 658/703 tested (586 survived, 27 timed out)
Mutation testing 93% (elapsed: ~1h 15m, remaining: ~5m) 659/703 tested (587 survived, 27 timed out)
Mutation testing 94% (elapsed: ~1h 15m, remaining: ~4m) 661/703 tested (589 survived, 27 timed out)
Mutation testing 94% (elapsed: ~1h 15m, remaining: ~4m) 662/703 tested (590 survived, 27 timed out)
Mutation testing 94% (elapsed: ~1h 15m, remaining: ~4m) 663/703 tested (591 survived, 27 timed out)
Mutation testing 94% (elapsed: ~1h 16m, remaining: ~4m) 665/703 tested (593 survived, 27 timed out)
Mutation testing 94% (elapsed: ~1h 16m, remaining: ~4m) 666/703 tested (594 survived, 27 timed out)
Mutation testing 95% (elapsed: ~1h 16m, remaining: ~3m) 668/703 tested (596 survived, 27 timed out)
Mutation testing 95% (elapsed: ~1h 16m, remaining: ~3m) 669/703 tested (597 survived, 27 timed out)
Mutation testing 95% (elapsed: ~1h 16m, remaining: ~3m) 671/703 tested (599 survived, 27 timed out)
Mutation testing 95% (elapsed: ~1h 16m, remaining: ~3m) 672/703 tested (600 survived, 27 timed out)
Mutation testing 95% (elapsed: ~1h 17m, remaining: ~3m) 674/703 tested (602 survived, 27 timed out)
Mutation testing 96% (elapsed: ~1h 17m, remaining: ~3m) 675/703 tested (603 survived, 27 timed out)
Mutation testing 96% (elapsed: ~1h 17m, remaining: ~2m) 677/703 tested (605 survived, 27 timed out)
Mutation testing 96% (elapsed: ~1h 17m, remaining: ~2m) 678/703 tested (606 survived, 27 timed out)
Mutation testing 96% (elapsed: ~1h 17m, remaining: ~2m) 680/703 tested (608 survived, 27 timed out)
Mutation testing 96% (elapsed: ~1h 17m, remaining: ~2m) 681/703 tested (609 survived, 27 timed out)
Mutation testing 97% (elapsed: ~1h 18m, remaining: ~2m) 683/703 tested (611 survived, 27 timed out)
Mutation testing 97% (elapsed: ~1h 18m, remaining: ~2m) 684/703 tested (612 survived, 27 timed out)
Mutation testing 97% (elapsed: ~1h 18m, remaining: ~1m) 686/703 tested (614 survived, 27 timed out)
Mutation testing 97% (elapsed: ~1h 18m, remaining: ~1m) 687/703 tested (615 survived, 27 timed out)
Mutation testing 98% (elapsed: ~1h 18m, remaining: ~1m) 689/703 tested (617 survived, 27 timed out)
Mutation testing 98% (elapsed: ~1h 18m, remaining: ~1m) 690/703 tested (618 survived, 27 timed out)
Mutation testing 98% (elapsed: ~1h 19m, remaining: ~1m) 692/703 tested (620 survived, 27 timed out)
Mutation testing 98% (elapsed: ~1h 19m, remaining: ~1m) 693/703 tested (621 survived, 27 timed out)
Mutation testing 98% (elapsed: ~1h 19m, remaining: <1m) 695/703 tested (623 survived, 27 timed out)
Mutation testing 99% (elapsed: ~1h 19m, remaining: <1m) 697/703 tested (624 survived, 27 timed out)
Mutation testing 99% (elapsed: ~1h 19m, remaining: <1m) 698/703 tested (625 survived, 27 timed out)
Mutation testing 99% (elapsed: ~1h 19m, remaining: <1m) 700/703 tested (627 survived, 27 timed out)
Mutation testing 99% (elapsed: ~1h 20m, remaining: <1m) 701/703 tested (628 survived, 27 timed out)

All tests
  ✓ All tests (killed 46)

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           bootstrap("promise", definition + 1);

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           "promise"("promise", definition);

[Survived] PrecomputedMutator
q.js:39:19
-           bootstrap("promise", definition);
+           bootstrap("buggy", definition);

[Survived] PrecomputedMutator
q.js:39:30
-           bootstrap("promise", definition);
+           bootstrap("promise", function () {
+     throw new Error("I'm a bug!");
+   });

[Survived] PrecomputedMutator
q.js:46:16
-       } else if (typeof define === "function" && define.amd) {
+       } else if (typeof define === "function" && define.amd && define.amd.define) {

[Survived] PrecomputedMutator
q.js:47:16
-           define(definition);
+           define(definition());

[Survived] PrecomputedMutator
q.js:50:16
-       } else if (typeof ses !== "undefined") {
+       } else if (typeof ses !== "undefined" && ses.ok()) {

[Survived] PrecomputedMutator
q.js:51:13
-           if (!ses.ok()) {
+           if (ses.ok()) {

[Survived] PrecomputedMutator
q.js:51:14
-           if (!ses.ok()) {
+           if (!ses.notOk()) {

[Survived] PrecomputedMutator
q.js:58:16
-       } else if (typeof window !== "undefined" || typeof self !== "undefined") {
+       } else if (typeof window !== "undefined" && typeof self !== "undefined") {

[Survived] PrecomputedMutator
q.js:123:17
-                   domain.enter();
+                   domain.exit();

[Survived] PrecomputedMutator
q.js:125:13
-               runSingle(task, domain);
+               runSingle(task, domain, undefined);

[Survived] PrecomputedMutator
q.js:125:29
-               runSingle(task, domain);
+               runSingle(task, null);

[Survived] PrecomputedMutator
q.js:129:20
-               task = laterQueue.pop();
+               task = laterQueue.shift();

[Survived] PrecomputedMutator
q.js:140:17
-               if (isNodeJS) {
+               if (!isNodeJS) {

[Survived] PrecomputedMutator
q.js:147:21
-                   if (domain) {
+                   if (domain.exit()) {

[Survived] PrecomputedMutator
q.js:148:21
-                       domain.exit();
+                       domain.enter();

[Survived] PrecomputedMutator
q.js:150:17
-                   setTimeout(flush, 0);
+                   setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:150:35
-                   setTimeout(flush, 0);
+                   setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:151:21
-                   if (domain) {
+                   if (!domain) {

[Survived] PrecomputedMutator
q.js:152:21
-                       domain.enter();
+                       domain.exit();

[Survived] PrecomputedMutator
q.js:167:13
-               domain.exit();
+               domain.enter();

[Survived] PrecomputedMutator
q.js:202:13
-           if (typeof window !== "undefined") {
+           if (typeof window === "undefined") {

[Survived] PrecomputedMutator
q.js:203:27
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(null, flush);

[Survived] PrecomputedMutator
q.js:203:45
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(document, flush);

[Survived] PrecomputedMutator
q.js:210:16
-       } else if (typeof MessageChannel !== "undefined") {
+       } else if (typeof MessageChannel === "undefined") {

[Survived] PrecomputedMutator
q.js:224:13
-               channel.port2.postMessage(0);
+               channel.port1.postMessage(0);

[Survived] PrecomputedMutator
q.js:224:39
-               channel.port2.postMessage(0);
+               channel.port2.postMessage(1);

[Survived] PrecomputedMutator
q.js:227:13
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:227:31
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:228:13
-               requestPortTick();
+               requestTick();

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               setInterval(flush, 0);

[Survived] PrecomputedMutator
q.js:234:24
-               setTimeout(flush, 0);
+               setTimeout(flush(), 0);

[Survived] PrecomputedMutator
q.js:234:31
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:241:9
-           laterQueue.push(task);
+           laterQueue.unshift(task);

[Survived] PrecomputedMutator
q.js:242:13
-           if (!flushing) {
+           if (flushing) {

[Survived] PrecomputedMutator
q.js:277:13
-           if (arguments.length === 1) {
+           if (arguments.length < 1) {

[Survived] PrecomputedMutator
q.js:288:22
-               } while (1);
+               } while (0);

[Survived] PrecomputedMutator
q.js:281:21
-                   if (index in this) {
+                   if (index in this && this[index] !== undefined) {

[Survived] PrecomputedMutator
q.js:291:16
-           for (; index < length; index++) {
+           for (; index <= length; index++) {

[Survived] PrecomputedMutator
q.js:291:32
-           for (; index < length; index++) {
+           for (; index < length; index--) {

[Survived] PrecomputedMutator
q.js:293:17
-               if (index in this) {
+               if (index in this.length) {

[Survived] PrecomputedMutator
q.js:294:25
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index + 1);

[Survived] PrecomputedMutator
q.js:294:34
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis + 1, this[index], index);

[Survived] PrecomputedMutator
q.js:294:41
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index + 1], index);

[Survived] PrecomputedMutator
q.js:294:54
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index + 1);

[Survived] PrecomputedMutator
q.js:304:25
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i <= this.length; i++) {

[Survived] PrecomputedMutator
q.js:304:42
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i < this.length; i--) {

[Survived] PrecomputedMutator
q.js:305:17
-               if (this[i] === value) {
+               if (this[i] !== value) {

[Survived] PrecomputedMutator
q.js:318:13
-               collect.push(callback.call(thisp, value, index, self));
+               collect.pop(callback.call(thisp, value, index, self));

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, index, value, self));

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index, self, undefined));

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.apply(thisp, value, index, self));

[Survived] PrecomputedMutator
q.js:318:40
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(null, value, index, self));

[Survived] PrecomputedMutator
q.js:318:47
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, undefined, index, self));

[Survived] PrecomputedMutator
q.js:318:54
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index + 1, self));

[Survived] PrecomputedMutator
q.js:339:5
-       for (var key in object) {
-           if (object_hasOwnProperty(object, key)) {
-               keys.push(key);
-           }
-       }
+       for (var key of object) {
+     if (object_hasOwnProperty(object, key)) {
+       keys.push(key);
+     }
+   }

[Survived] PrecomputedMutator
q.js:339:21
-       for (var key in object) {
+       for (var key in null) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key) || key === "hasOwnProperty") {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object[key])) {

[Survived] PrecomputedMutator
q.js:340:35
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(null, key)) {

[Survived] PrecomputedMutator
q.js:341:23
-               keys.push(key);
+               keys.push(this[key]);

[Survived] PrecomputedMutator
q.js:358:9
-           object_toString(exception) === "[object StopIteration]" ||
+           object_hasOwnProperty(exception) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:358:25
-           object_toString(exception) === "[object StopIteration]" ||
+           object_toString(exception.message) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:381:9
-       if (hasStacks &&
-           promise.stack &&
-           typeof error === "object" &&
-           error !== null &&
-           error.stack
+       if (hasStacks && promise.stack && typeof error === "object" && error !== null && error.stack && false

[Survived] PrecomputedMutator
q.js:388:9
-           for (var p = promise; !!p; p = p.source) {
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
-                   stacks.unshift(p.stack);
-               }
-           }
+           for (var p = promise.source; !!p; p = p.source) {
+     if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+       object_defineProperty(error, "__minimumStackCounter__", {
+         value: p.stackCounter,
+         configurable: true
+       });
+       stacks.unshift(p.stack);
+     }
+   }

[Survived] PrecomputedMutator
q.js:388:9
-           for (var p = promise; !!p; p = p.source) {
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
-                   stacks.unshift(p.stack);
-               }
-           }
+           for (var p = promise; !p; p = p.source) {
+     if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+       object_defineProperty(error, "__minimumStackCounter__", {
+         value: p.stackCounter,
+         configurable: true
+       });
+       stacks.unshift(p.stack);
+     }
+   }

[Survived] PrecomputedMutator
q.js:388:31
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; !p; p = p.source) {

[Survived] PrecomputedMutator
q.js:388:36
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; !!p; p = p.source.source) {

[Survived] PrecomputedMutator
q.js:389:17
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ < p.stackCounter)) {

[Survived] PrecomputedMutator
q.js:390:17
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter + 1,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:390:46
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__maximumStackCounter__", {value: p.stackCounter, configurable: true});

[Survived] PrecomputedMutator
q.js:390:73
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter + 1,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:391:17
-                   stacks.unshift(p.stack);
+                   stacks.push(p.stack);

[Survived] PrecomputedMutator
q.js:391:32
-                   stacks.unshift(p.stack);
+                   stacks.unshift(p.stack.slice(0, -1));

[Survived] PrecomputedMutator
q.js:394:9
-           stacks.unshift(error.stack);
+           stacks.push(error.stack);

[Survived] PrecomputedMutator
q.js:394:24
-           stacks.unshift(error.stack);
+           stacks.unshift(error.message);

[Survived] PrecomputedMutator
q.js:397:39
-           var stack = filterStackString(concatedStacks);
+           var stack = filterStackString(concatedStacks.split("\n").reverse().join("\n"));

[Survived] PrecomputedMutator
q.js:398:9
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack,
+     enumerable: true
+   });

[Survived] PrecomputedMutator
q.js:398:38
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stackTrace", {value: stack, configurable: true});

[Survived] PrecomputedMutator
q.js:398:47
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack + "foo",
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:403:35
-       var lines = stackString.split("\n");
+       var lines = stackString.split("\r\n");

[Survived] PrecomputedMutator
q.js:405:5
-       for (var i = 0; i < lines.length; ++i) {
-           var line = lines[i];
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
-               desiredLines.push(line);
-           }
-       }
+       for (var i = 1; i < lines.length; ++i) {
+     var line = lines[i];
+     if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+       desiredLines.push(line);
+     }
+   }

[Survived] PrecomputedMutator
q.js:405:21
-       for (var i = 0; i < lines.length; ++i) {
+       for (var i = 0; i <= lines.length; ++i) {

[Survived] PrecomputedMutator
q.js:408:14
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+           if (!isNodeFrame(line) && !isNodeFrame(line) && line) {

[Survived] PrecomputedMutator
q.js:409:13
-               desiredLines.push(line);
+               desiredLines.pop(line);

[Survived] PrecomputedMutator
q.js:409:31
-               desiredLines.push(line);
+               desiredLines.push(line.replace("From previous event:", "From previous event: "));

[Survived] PrecomputedMutator
q.js:412:12
-       return desiredLines.join("\n");
+       return desiredLines.push("\n");

[Survived] PrecomputedMutator
q.js:412:30
-       return desiredLines.join("\n");
+       return desiredLines.join("\t");

[Survived] PrecomputedMutator
q.js:416:12
-       return stackLine.indexOf("(module.js:") !== -1 ||
+       return stackLine.includes("(module.js:") !== -1 ||

[Survived] PrecomputedMutator
q.js:417:12
-              stackLine.indexOf("(node.js:") !== -1;
+              stackLine.includes("(node.js:") !== -1;

[Survived] PrecomputedMutator
q.js:423:57
-       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
+       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine.split("@")[1]);

[Survived] PrecomputedMutator
q.js:425:30
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], String(attempt1[2])];

[Survived] PrecomputedMutator
q.js:425:37
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], Number(attempt1[1])];

[Survived] PrecomputedMutator
q.js:430:9
-       if (attempt2) {
+       if (attempt2[1]) {

[Survived] PrecomputedMutator
q.js:431:30
-           return [attempt2[1], Number(attempt2[2])];
+           return [attempt2[1], String(attempt2[2])];

[Survived] PrecomputedMutator
q.js:431:37
-           return [attempt2[1], Number(attempt2[2])];
+           return [attempt2[1], Number(attempt2[1])];

[Survived] PrecomputedMutator
q.js:435:42
-       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
+       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine.split("@")[1]);

[Survived] PrecomputedMutator
q.js:436:9
-       if (attempt3) {
+       if (attempt3[1]) {

[Survived] PrecomputedMutator
q.js:437:30
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], String(attempt3[2])];

[Survived] PrecomputedMutator
q.js:437:37
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], Number(attempt3[1])];

[Survived] PrecomputedMutator
q.js:442:33
-       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
+       var fileNameAndLineNumber = getFileNameAndLineNumber[0](stackLine);

[Survived] PrecomputedMutator
q.js:442:58
-       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
+       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine.split("@")[1]);

[Survived] PrecomputedMutator
q.js:444:9
-       if (!fileNameAndLineNumber) {
+       if (fileNameAndLineNumber[0] === undefined) {

[Survived] PrecomputedMutator
q.js:466:35
-           var lines = e.stack.split("\n");
+           var lines = e.stack.split("\r");

[Survived] PrecomputedMutator
q.js:467:25
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[1].indexOf("@") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:467:42
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[0].indexOf("#") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:468:62
-           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
+           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine.split(":")[0]);

[Survived] PrecomputedMutator
q.js:469:13
-           if (!fileNameAndLineNumber) {
+           if (!fileNameAndLineNumber[0]) {

[Survived] PrecomputedMutator
q.js:480:13
-           if (typeof console !== "undefined" &&
-               typeof console.warn === "function") {
+           if (typeof console !== "undefined" && typeof console.warn === "function" && typeof console.warn.call === "function") {

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.call(callback, arguments);

[Survived] PrecomputedMutator
q.js:485:31
-           return callback.apply(callback, arguments);
+           return callback.apply(callback.apply(this, arguments), arguments);

[Survived] PrecomputedMutator
q.js:485:41
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, []);

[Survived] PrecomputedMutator
q.js:565:17
-               if (op === "when" && operands[1]) { // progress operand
+               if (op === "when" && operands[2]) { // progress operand

[Survived] PrecomputedMutator
q.js:566:17
-                   progressListeners.push(operands[1]);
+                   progressListeners.pop(operands[1]);

[Survived] PrecomputedMutator
q.js:566:40
-                   progressListeners.push(operands[1]);
+                   progressListeners.push(operands[2]);

[Survived] PrecomputedMutator
q.js:570:17
-                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
+                   resolvedPromise.promiseDispatch.apply(resolvedPromise.promiseDispatch.apply(resolvedPromise, args));

[Survived] PrecomputedMutator
q.js:570:55
-                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
+                   resolvedPromise.promiseDispatch.apply(resolvedPromise.promise, args);

[Survived] PrecomputedMutator
q.js:570:72
-                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
+                   resolvedPromise.promiseDispatch.apply(resolvedPromise, [args[0], args[1], args[2]]);

[Survived] PrecomputedMutator
q.js:577:13
-           if (messages) {
+           if (messages.length) {

[Survived] PrecomputedMutator
q.js:580:27
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearerValue(resolvedPromise);

[Survived] PrecomputedMutator
q.js:580:34
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearer(resolvedPromise.promise);

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (nearerValue === value) {

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (isPromiseAlike(nearerValue)) {

[Survived] PrecomputedMutator
q.js:581:23
-           if (isPromise(nearerValue)) {
+           if (isPromise(nearerValue + 1)) {

[Survived] PrecomputedMutator
q.js:588:13
-           if (!resolvedPromise) {
+           if (resolvedPromise) {

[Survived] PrecomputedMutator
q.js:594:9
-       if (Q.longStackSupport && hasStacks) {
+       if (!Q.longStackSupport || !hasStacks) {

[Survived] PrecomputedMutator
q.js:604:47
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.lastIndexOf("\n") + 1);

[Survived] PrecomputedMutator
q.js:604:63
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.indexOf("\t") + 1);

[Survived] PrecomputedMutator
q.js:616:13
-           if (Q.longStackSupport && hasStacks) {
+           if (!Q.longStackSupport || !hasStacks) {

[Survived] PrecomputedMutator
q.js:624:50
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(newPromise.promise, message);

[Survived] PrecomputedMutator
q.js:642:13
-           if (resolvedPromise) {
+           if (!resolvedPromise) {

[Survived] PrecomputedMutator
q.js:646:16
-           become(fulfill(value));
+           become(reject(value));

[Survived] PrecomputedMutator
q.js:646:24
-           become(fulfill(value));
+           become(fulfill(value + 1));

[Survived] PrecomputedMutator
q.js:656:13
-           if (resolvedPromise) {
+           if (resolvedPromise === true) {

[Survived] PrecomputedMutator
q.js:662:34
-                   progressListener(progress);
+                   progressListener(progress + 1);

[Survived] PrecomputedMutator
q.js:679:25
-               self.reject(error);
+               self.reject(error.message);

[Survived] PrecomputedMutator
q.js:680:20
-           } else if (arguments.length > 2) {
+           } else if (arguments.length > 1) {

[Survived] PrecomputedMutator
q.js:681:13
-               self.resolve(array_slice(arguments, 1));
+               self.reject(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:681:38
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments.slice(1), 1));

[Survived] PrecomputedMutator
q.js:683:13
-               self.resolve(value);
+               self.fulfill(value);

[Survived] PrecomputedMutator
q.js:683:26
-               self.resolve(value);
+               self.resolve(null);

[Survived] PrecomputedMutator
q.js:697:9
-       if (typeof resolver !== "function") {
+       if (resolver !== "function") {

[Survived] PrecomputedMutator
q.js:702:9
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.reject, deferred.resolve, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:18
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.reject, deferred.reject, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:36
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.fulfill, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:53
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.reject, deferred.notify(progress));

[Survived] PrecomputedMutator
q.js:704:9
-           deferred.reject(reason);
+           deferred.fulfill(reason);

[Survived] PrecomputedMutator
q.js:704:25
-           deferred.reject(reason);
+           deferred.reject(reason.message);

[Survived] PrecomputedMutator
q.js:739:12
-       return Q(x).join(y);
+       return Q.reject(x).join(y);

[Survived] PrecomputedMutator
q.js:739:14
-       return Q(x).join(y);
+       return Q(y).join(y);

[Survived] PrecomputedMutator
q.js:739:22
-       return Q(x).join(y);
+       return Q(x).join(x);

[Survived] PrecomputedMutator
q.js:743:12
-       return Q([this, that]).spread(function (x, y) {
+       return Q.reject([this, that]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:743:14
-       return Q([this, that]).spread(function (x, y) {
+       return Q([that, this]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:744:13
-           if (x === y) {
+           if (x !== y) {

[Survived] PrecomputedMutator
q.js:766:48
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i <= len; i++) {

[Survived] PrecomputedMutator
q.js:766:57
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i < len; i--) {

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(reject, resolve);

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q.reject(answerPs[i]).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:15
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i + 1]).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:33
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(reject, reject);

[Survived] PrecomputedMutator
q.js:767:42
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(resolve, resolve);

[Survived] PrecomputedMutator
q.js:773:22
-       return this.then(Q.race);
+       return this.then(Q.reject);

[Survived] PrecomputedMutator
q.js:789:9
-       if (fallback === void 0) {
+       if (fallback === null) {

[Survived] PrecomputedMutator
q.js:796:9
-       if (inspect === void 0) {
+       if (inspect !== void 0) {

[Survived] PrecomputedMutator
q.js:807:17
-               if (descriptor[op]) {
+               if (descriptor[op] + 1) {

[Survived] PrecomputedMutator
q.js:808:26
-                   result = descriptor[op].apply(promise, args);
+                   result = descriptor[op].apply(promise, args, 1);

[Survived] PrecomputedMutator
q.js:808:47
-                   result = descriptor[op].apply(promise, args);
+                   result = descriptor[op].apply(null, args);

[Survived] PrecomputedMutator
q.js:810:26
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise.reject);

[Survived] PrecomputedMutator
q.js:810:40
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(null, op, args);

[Survived] PrecomputedMutator
q.js:810:49
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op + 1, args);

[Survived] PrecomputedMutator
q.js:810:53
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op, args[0]);

[Survived] PrecomputedMutator
q.js:813:22
-               result = reject(exception);
+               result = resolve(exception);

[Survived] PrecomputedMutator
q.js:813:29
-               result = reject(exception);
+               result = reject(new Error("Q can't join: not the same: " + x + " " + y));

[Survived] PrecomputedMutator
q.js:823:9
-       if (inspect) {
+       if (inspect.state) {

[Survived] PrecomputedMutator
q.js:825:13
-           if (inspected.state === "rejected") {
+           if (inspected.state === "fulfilled") {

[Survived] PrecomputedMutator
q.js:831:17
-               if (inspected.state === "pending" ||
-                   inspected.state === "rejected") {
+               if (inspected.state === "fulfilled") {

[Survived] PrecomputedMutator
q.js:861:13
-           if (typeof rejected === "function") {
+           if (rejected instanceof Function) {

[Survived] PrecomputedMutator
q.js:862:13
-               makeStackTraceLong(exception, self);
+               makeStackTraceLong(exception, self, 1);

[Survived] PrecomputedMutator
q.js:873:51
-           return typeof progressed === "function" ? progressed(value) : value;
+           return typeof progressed === "function" ? progressed + 1(value) : value;

[Survived] PrecomputedMutator
q.js:873:62
-           return typeof progressed === "function" ? progressed(value) : value;
+           return typeof progressed === "function" ? progressed(null) : value;

[Survived] PrecomputedMutator
q.js:899:24
-               newValue = _progressed(value);
+               newValue = _rejected(value);

[Survived] PrecomputedMutator
q.js:899:36
-               newValue = _progressed(value);
+               newValue = _progressed(null);

[Survived] PrecomputedMutator
q.js:902:17
-               if (Q.onerror) {
+               if (Q.onerror()) {

[Survived] PrecomputedMutator
q.js:903:27
-                   Q.onerror(e);
+                   Q.onerror(e.message);

[Survived] PrecomputedMutator
q.js:909:13
-           if (!threw) {
+           if (threw) {

[Survived] PrecomputedMutator
q.js:910:13
-               deferred.notify(newValue);
+               deferred.reject(newValue);

[Survived] PrecomputedMutator
q.js:910:29
-               deferred.notify(newValue);
+               deferred.notify(null);

[Survived] PrecomputedMutator
q.js:918:12
-       return Q(promise).tap(callback);
+       return Q.reject(promise).tap(callback);

[Survived] PrecomputedMutator
q.js:918:14
-       return Q(promise).tap(callback);
+       return Q(Q.reject(value)).tap(callback);

[Survived] PrecomputedMutator
q.js:918:27
-       return Q(promise).tap(callback);
+       return Q(promise).tap(function () {
+     throw new Error("Callback failed");
+   });

[Survived] PrecomputedMutator
q.js:934:16
-       callback = Q(callback);
+       callback = Q.fcall(callback);

[Survived] PrecomputedMutator
q.js:934:18
-       callback = Q(callback);
+       callback = Q(null);

[Survived] PrecomputedMutator
q.js:937:16
-           return callback.fcall(value).thenResolve(value);
+           return callback.fapply(value).thenResolve(value);

[Survived] PrecomputedMutator
q.js:937:31
-           return callback.fcall(value).thenResolve(value);
+           return callback.fcall(null).thenResolve(value);

[Survived] PrecomputedMutator
q.js:937:50
-           return callback.fcall(value).thenResolve(value);
+           return callback.fcall(value).thenResolve(null);

[Survived] PrecomputedMutator
q.js:959:12
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(rejected, fulfilled, progressed);

[Survived] PrecomputedMutator
q.js:959:12
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q.reject(value).then(fulfilled, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:14
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(null).then(fulfilled, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:26
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(rejected, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:37
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, resolved, progressed);

[Survived] PrecomputedMutator
q.js:959:47
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, rejected, function () {});

[Survived] PrecomputedMutator
q.js:963:22
-       return this.then(function () { return value; });
+       return this.then(function () {
+     return value + 1;
+   });

[Survived] PrecomputedMutator
q.js:967:12
-       return Q(promise).thenResolve(value);
+       return Q.reject(promise).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:14
-       return Q(promise).thenResolve(value);
+       return Q(Q.reject(value)).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:35
-       return Q(promise).thenResolve(value);
+       return Q(promise).thenResolve(null);

[Survived] PrecomputedMutator
q.js:971:12
-       return this.then(function () { throw reason; });
+       return this.then.then(function () { throw reason; });

[Survived] PrecomputedMutator
q.js:971:22
-       return this.then(function () { throw reason; });
+       return this.then(function () {
+     return reason;
+   });

[Survived] PrecomputedMutator
q.js:975:12
-       return Q(promise).thenReject(reason);
+       return Q.reject(promise).thenReject(reason);

[Survived] PrecomputedMutator
q.js:975:14
-       return Q(promise).thenReject(reason);
+       return Q(Q.reject(reason)).thenReject(reason);

[Survived] PrecomputedMutator
q.js:975:34
-       return Q(promise).thenReject(reason);
+       return Q(promise).thenReject(reason.message);

[Survived] PrecomputedMutator
q.js:991:9
-       if (isPromise(value)) {
+       if (isPromiseAlike(value)) {

[Survived] PrecomputedMutator
q.js:991:19
-       if (isPromise(value)) {
+       if (isPromise(null)) {

[Survived] PrecomputedMutator
q.js:993:13
-           if (inspected.state === "fulfilled") {
+           if (inspected.state === "rejected") {

[Survived] PrecomputedMutator
q.js:1020:12
-       return isPromise(object) && object.inspect().state === "pending";
+       return isPromiseAlike(object) && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1020:22
-       return isPromise(object) && object.inspect().state === "pending";
+       return isPromise(object.inspect().value) && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1024:12
-       return this.inspect().state === "pending";
+       return this.inspect.state().state === "pending";

[Survived] PrecomputedMutator
q.js:1033:13
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !!isPromise(object) || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1033:23
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !isPromise(object.inspect().value) || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1037:12
-       return this.inspect().state === "fulfilled";
+       return this.inspect.state().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1045:12
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isPromiseAlike(object) && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1045:22
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isPromise(object.inspect().state === "rejected") && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1067:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections === false) {

[Survived] PrecomputedMutator
q.js:1073:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (unhandledRejections.includes(promise)) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledRejections, reason) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:31
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledRejections.slice(), promise) !== -1) {

[Survived] PrecomputedMutator
q.js:1079:52
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason.stack, promise);

[Survived] PrecomputedMutator
q.js:1080:17
-                   reportedUnhandledRejections.push(promise);
+                   reportedUnhandledRejections.pop(promise);

[Survived] PrecomputedMutator
q.js:1085:5
-       unhandledRejections.push(promise);
+       unhandledReasons.push(promise);

[Survived] PrecomputedMutator
q.js:1085:30
-       unhandledRejections.push(promise);
+       unhandledRejections.push(null);

[Survived] PrecomputedMutator
q.js:1086:9
-       if (reason && typeof reason.stack !== "undefined") {
+       if (reason && reason.stack !== undefined) {

[Survived] PrecomputedMutator
q.js:1087:9
-           unhandledReasons.push(reason.stack);
+           unhandledReasons.pop(reason.stack);

[Survived] PrecomputedMutator
q.js:1087:31
-           unhandledReasons.push(reason.stack);
+           unhandledReasons.push(reason.stack.slice(0));

[Survived] PrecomputedMutator
q.js:1089:9
-           unhandledReasons.push("(no stack) " + reason);
+           unhandledReasons.pop("(no stack) " + reason);

[Survived] PrecomputedMutator
q.js:1094:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections === false) {

[Survived] PrecomputedMutator
q.js:1098:14
-       var at = array_indexOf(unhandledRejections, promise);
+       var at = array_indexOf(unhandledRejections.slice(0, -1), promise);

[Survived] PrecomputedMutator
q.js:1098:28
-       var at = array_indexOf(unhandledRejections, promise);
+       var at = array_indexOf(unhandledRejections.slice(), promise);

[Survived] PrecomputedMutator
q.js:1099:9
-       if (at !== -1) {
+       if (at < 0) {

[Survived] PrecomputedMutator
q.js:1102:32
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections, unhandledRejections);

[Survived] PrecomputedMutator
q.js:1102:46
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections.length, promise);

[Survived] PrecomputedMutator
q.js:1102:75
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections, reportedUnhandledRejections[atReport]);

[Survived] PrecomputedMutator
q.js:1103:21
-                   if (atReport !== -1) {
+                   if (atReport === -1) {

[Survived] PrecomputedMutator
q.js:1104:21
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", unhandledReasons[at], unhandledRejections[at]);

[Survived] PrecomputedMutator
q.js:1104:34
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("unhandledRejection", unhandledReasons[at], promise);

[Survived] PrecomputedMutator
q.js:1104:54
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", unhandledReasons[at + 1], promise);

[Survived] PrecomputedMutator
q.js:1104:76
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", unhandledReasons[at], reportedUnhandledRejections[atReport]);

[Survived] PrecomputedMutator
q.js:1105:21
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, 0);

[Survived] PrecomputedMutator
q.js:1105:56
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport.length - 1, 1);

[Survived] PrecomputedMutator
q.js:1109:9
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, 0);

[Survived] PrecomputedMutator
q.js:1109:36
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at - 1, 1);

[Survived] PrecomputedMutator
q.js:1109:40
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, 2);

[Survived] PrecomputedMutator
q.js:1110:9
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, 0);

[Survived] PrecomputedMutator
q.js:1110:33
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at - 1, 1);

[Survived] PrecomputedMutator
q.js:1110:37
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, 0);

[Survived] PrecomputedMutator
q.js:1139:17
-               if (rejected) {
+               if (!rejected) {

[Survived] PrecomputedMutator
q.js:1140:34
-                   untrackRejection(this);
+                   untrackRejection(null);

[Survived] PrecomputedMutator
q.js:1151:5
-       trackRejection(rejection, reason);
+       untrackRejection(rejection, reason);

[Survived] PrecomputedMutator
q.js:1151:20
-       trackRejection(rejection, reason);
+       trackRejection(null, reason);

[Survived] PrecomputedMutator
q.js:1151:31
-       trackRejection(rejection, reason);
+       trackRejection(rejection, null);

[Survived] PrecomputedMutator
q.js:1178:17
-               if (name === null || name === void 0) {
+               if (name == null) {

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.apply(null, args);

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.call(void 0, args);

[Survived] PrecomputedMutator
q.js:1179:36
-                   return value.apply(void 0, args);
+                   return value.apply(null, args);

[Survived] PrecomputedMutator
q.js:1179:44
-                   return value.apply(void 0, args);
+                   return value.apply(void 0, args.slice());

[Survived] PrecomputedMutator
q.js:1181:24
-                   return value[name].apply(value, args);
+                   return value[name].apply(value.apply(this, args));

[Survived] PrecomputedMutator
q.js:1181:42
-                   return value[name].apply(value, args);
+                   return value[name].apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1181:49
-                   return value[name].apply(value, args);
+                   return value[name].apply(value, args.slice());

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.apply(thisp, args.slice());

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.call(thisp, args);

[Survived] PrecomputedMutator
q.js:1185:32
-               return value.apply(thisp, args);
+               return value.apply(void 0, args);

[Survived] PrecomputedMutator
q.js:1185:39
-               return value.apply(thisp, args);
+               return value.apply(thisp, args.slice());

[Survived] PrecomputedMutator
q.js:1188:20
-               return object_keys(value);
+               return object_values(value);

[Survived] PrecomputedMutator
q.js:1188:32
-               return object_keys(value);
+               return object_keys(value.length);

[Survived] PrecomputedMutator
q.js:1204:61
-               promise.then(deferred.resolve, deferred.reject, deferred.notify);
+               promise.then(deferred.resolve, deferred.reject, deferred.reject);

[Survived] PrecomputedMutator
q.js:1206:13
-               deferred.reject(exception);
+               deferred.resolve(exception);

[Survived] PrecomputedMutator
q.js:1226:16
-           return dispatch(object, op, args);
+           return dispatch(object, op, args[0]);

[Survived] PrecomputedMutator
q.js:1226:25
-           return dispatch(object, op, args);
+           return dispatch(null, op, args);

[Survived] PrecomputedMutator
q.js:1226:33
-           return dispatch(object, op, args);
+           return dispatch(object, op + 1, args);

[Survived] PrecomputedMutator
q.js:1226:37
-           return dispatch(object, op, args);
+           return dispatch(object, op, args.slice(1));

[Survived] PrecomputedMutator
q.js:1228:16
-           return Q(object).inspect();
+           return Q.reject(object).inspect();

[Survived] PrecomputedMutator
q.js:1228:18
-           return Q(object).inspect();
+           return Q(null).inspect();

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(rejected, fulfilled);

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q.reject(value).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:14
-       return Q(value).spread(fulfilled, rejected);
+       return Q(null).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:28
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(rejected, rejected);

[Survived] PrecomputedMutator
q.js:1244:39
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(fulfilled, fulfilled);

[Survived] PrecomputedMutator
q.js:1248:12
-       return this.all().then(function (array) {
+       return this.then().then(function (array) {

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(array, void 0);

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.call(void 0, array);

[Survived] PrecomputedMutator
q.js:1249:32
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(null, array);

[Survived] PrecomputedMutator
q.js:1249:40
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(void 0, array.slice());

[Survived] PrecomputedMutator
q.js:1295:17
-               if (typeof StopIteration === "undefined") {
+               if (typeof StopIteration !== "undefined") {

[Survived] PrecomputedMutator
q.js:1298:46
-                       result = generator[verb](arg);
+                       result = generator[verb](null);

[Survived] PrecomputedMutator
q.js:1300:35
-                       return reject(exception);
+                       return reject(exception.message);

[Survived] PrecomputedMutator
q.js:1302:21
-                   if (result.done) {
+                   if (result.value) {

[Survived] PrecomputedMutator
q.js:1305:28
-                       return when(result.value, callback, errback);
+                       return when(result.value, errback, callback);

[Survived] PrecomputedMutator
q.js:1305:47
-                       return when(result.value, callback, errback);
+                       return when(result.value, reject, errback);

[Survived] PrecomputedMutator
q.js:1305:57
-                       return when(result.value, callback, errback);
+                       return when(result.value, callback, reject);

[Survived] PrecomputedMutator
q.js:1311:46
-                       result = generator[verb](arg);
+                       result = generator[verb](arg + 1);

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (exception instanceof StopIteration) {

[Survived] PrecomputedMutator
q.js:1313:41
-                       if (isStopIteration(exception)) {
+                       if (isStopIteration(exception.value)) {

[Survived] PrecomputedMutator
q.js:1314:32
-                           return Q(exception.value);
+                           return Q.reject(exception.value);

[Survived] PrecomputedMutator
q.js:1314:34
-                           return Q(exception.value);
+                           return Q(exception);

[Survived] PrecomputedMutator
q.js:1316:39
-                           return reject(exception);
+                           return reject(exception.message);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return when(result.value, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return Q.reject(result, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:29
-                   return when(result, callback, errback);
+                   return when(result.value, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:37
-                   return when(result, callback, errback);
+                   return when(result, errback, errback);

[Survived] PrecomputedMutator
q.js:1319:47
-                   return when(result, callback, errback);
+                   return when(result, callback, reject);

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(null);

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.call(this, arguments);

[Survived] PrecomputedMutator
q.js:1322:45
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(null, arguments);

[Survived] PrecomputedMutator
q.js:1322:51
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(this, [].slice.call(arguments));

[Survived] PrecomputedMutator
q.js:1323:24
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer, "throw");

[Survived] PrecomputedMutator
q.js:1323:39
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer.bind(continuer, "throw"), "next");

[Survived] PrecomputedMutator
q.js:1323:50
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer, "throw");

[Survived] PrecomputedMutator
q.js:1324:23
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(continuer, "throw"));

[Survived] PrecomputedMutator
q.js:1324:38
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(continuer, "throw"), "throw");

[Survived] PrecomputedMutator
q.js:1324:49
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer, "send");

[Survived] PrecomputedMutator
q.js:1325:16
-           return callback();
+           return errback();

[Survived] PrecomputedMutator
q.js:1338:5
-       Q.done(Q.async(makeGenerator)());
+       Q.fail(Q.async(makeGenerator)());

[Survived] PrecomputedMutator
q.js:1338:12
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.reject(makeGenerator)());

[Survived] PrecomputedMutator
q.js:1338:20
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.async(makeGenerator.bind(this))());

[Survived] PrecomputedMutator
q.js:1389:30
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, none(arguments)], function (self, args) {

[Survived] PrecomputedMutator
q.js:1389:34
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, all(arguments.slice(1))], function (self, args) {

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.apply(self, args, undefined);

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.call(self, args);

[Survived] PrecomputedMutator
q.js:1390:35
-               return callback.apply(self, args);
+               return callback.apply(null, args);

[Survived] PrecomputedMutator
q.js:1390:41
-               return callback.apply(self, args);
+               return callback.apply(self, args.slice(1));

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, args.slice(1));

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q.reject(object).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:14
-       return Q(object).dispatch(op, args);
+       return Q(null).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:31
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op + "d", args);

[Survived] PrecomputedMutator
q.js:1404:35
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, args[0]);

[Survived] PrecomputedMutator
q.js:1409:20
-       var deferred = defer();
+       var deferred = deferred();

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.reject, op, args);

[Survived] PrecomputedMutator
q.js:1411:30
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.reject, op, args);

[Survived] PrecomputedMutator
q.js:1411:48
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op + 1, args);

[Survived] PrecomputedMutator
q.js:1411:52
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op, args.slice(1));

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("set", [key, undefined]);

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q.reject(object).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:14
-       return Q(object).dispatch("get", [key]);
+       return Q(null).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:31
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1423:38
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("get", [key + 1]);

[Survived] PrecomputedMutator
q.js:1427:12
-       return this.dispatch("get", [key]);
+       return this.dispatch("set", [key, undefined]);

[Survived] PrecomputedMutator
q.js:1427:26
-       return this.dispatch("get", [key]);
+       return this.dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1427:33
-       return this.dispatch("get", [key]);
+       return this.dispatch("get", [key, key]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q.reject(object).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:14
-       return Q(object).dispatch("set", [key, value]);
+       return Q(null).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:38
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1442:12
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1442:33
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("set", [key, undefined]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q.reject(object).dispatch("delete", [key]);

[Survived] PrecomputedMutator
q.js:1453:14
-       return Q(object).dispatch("delete", [key]);
+       return Q(null).dispatch("delete", [key]);

[Survived] PrecomputedMutator
q.js:1453:31
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1453:41
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("delete", [key, value]);

[Survived] PrecomputedMutator
q.js:1458:36
-       return this.dispatch("delete", [key]);
+       return this.dispatch("delete", [key, value]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [name, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q.reject(object).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:14
-       return Q(object).dispatch("post", [name, args]);
+       return Q(null).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:31
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("get", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:39
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [name, args, 0]);

[Survived] PrecomputedMutator
q.js:1481:12
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [args, name]);

[Survived] PrecomputedMutator
q.js:1481:26
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("put", [name, args]);

[Survived] PrecomputedMutator
q.js:1481:34
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [name, args, 1]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q.reject(object).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:14
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(null).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:31
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("get", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:39
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1494:58
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments[0], 2)]);

[Survived] PrecomputedMutator
q.js:1500:12
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1500:26
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("put", [name, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1500:34
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1500:53
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments[0], 1)]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("call", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q.reject(object).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:14
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(null).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:31
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("call", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:40
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("apply", [void 0, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1513:12
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [this, args]);

[Survived] PrecomputedMutator
q.js:1513:26
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("call", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1513:35
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [void 0, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [this, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q.reject(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:14
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(null).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:31
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("call", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:40
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1523:61
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments.slice(1), 1)]);

[Survived] PrecomputedMutator
q.js:1527:12
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [this, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1527:26
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("call", [void 0, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1527:35
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1527:56
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [void 0, array_slice(arguments.slice(1))]);

[Survived] PrecomputedMutator
q.js:1537:21
-       var promise = Q(object);
+       var promise = Q(null);

[Survived] PrecomputedMutator
q.js:1538:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:1538:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments.slice(1), 1);

[Survived] PrecomputedMutator
q.js:1538:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, 1 + 1);

[Survived] PrecomputedMutator
q.js:1542:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 1))

[Survived] PrecomputedMutator
q.js:1542:37
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments.slice(1)))

[Survived] PrecomputedMutator
q.js:1548:28
-       var args = array_slice(arguments);
+       var args = array_slice(args);

[Survived] PrecomputedMutator
q.js:1552:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 1))

[Survived] PrecomputedMutator
q.js:1552:37
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(null))

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q.reject(object).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:14
-       return Q(object).dispatch("keys", []);
+       return Q(null).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:31
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1564:39
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys", [1]);

[Survived] PrecomputedMutator
q.js:1568:12
-       return this.dispatch("keys", []);
+       return this.dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1568:26
-       return this.dispatch("keys", []);
+       return this.dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1568:34
-       return this.dispatch("keys", []);
+       return this.dispatch("keys", [1]);

[Survived] PrecomputedMutator
q.js:1584:24
-           var deferred = defer();
+           var deferred = deferred();

[Survived] PrecomputedMutator
q.js:1588:17
-                   isPromise(promise) &&
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   isPromise(promise) && (snapshot = promise.inspect()).state === "rejected"

[Survived] PrecomputedMutator
q.js:1588:17
-                   isPromise(promise) &&
+                   !isPromise(promise) &&

[Survived] PrecomputedMutator
q.js:1589:29
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   (snapshot = promise.inspect.value()).state === "fulfilled"

[Survived] PrecomputedMutator
q.js:1598:29
-                           if (--pendingCount === 0) {
+                           if (pendingCount < 0) {

[Survived] PrecomputedMutator
q.js:1599:29
-                               deferred.resolve(promises);
+                               deferred.reject(promises);

[Survived] PrecomputedMutator
q.js:1599:46
-                               deferred.resolve(promises);
+                               deferred.resolve(promises.slice(1));

[Survived] PrecomputedMutator
q.js:1604:25
-                           deferred.notify({ index: index, value: progress });
+                           deferred.reject({ index: index, value: progress });

[Survived] PrecomputedMutator
q.js:1604:41
-                           deferred.notify({ index: index, value: progress });
+                           deferred.notify({
+     index: index,
+     value: progress + 1
+   });

[Survived] PrecomputedMutator
q.js:1609:13
-           if (pendingCount === 0) {
+           if (pendingCount < 0) {

[Survived] PrecomputedMutator
q.js:1610:13
-               deferred.resolve(promises);
+               deferred.reject(promises);

[Survived] PrecomputedMutator
q.js:1610:30
-               deferred.resolve(promises);
+               deferred.resolve(promises.slice(1));

[Survived] PrecomputedMutator
q.js:1617:12
-       return all(this);
+       return none(this);

[Survived] PrecomputedMutator
q.js:1617:16
-       return all(this);
+       return all(this.then(function (promises) {
+     return all(array_map(promises, function (promise) {
+       promise = Q(promise);
+       function regardless() {
+         return promise.inspect();
+       }
+       return promise.then(regardless, regardless);
+     }));
+   }));

[Survived] PrecomputedMutator
q.js:1630:9
-       if (promises.length === 0) {
+       if (promises.length < 0) {

[Survived] PrecomputedMutator
q.js:1631:16
-           return Q.resolve();
+           return Q.reject();

[Survived] PrecomputedMutator
q.js:1641:9
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onFulfilled, onRejected, onProgress));

[Survived] PrecomputedMutator
q.js:1641:14
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onFulfilled, onRejected), onFulfilled, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:23
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onRejected, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:36
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, onFulfilled, onProgress);

[Survived] PrecomputedMutator
q.js:1641:48
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, onRejected, onRejected);

[Survived] PrecomputedMutator
q.js:1643:13
-               deferred.resolve(result);
+               deferred.reject(result);

[Survived] PrecomputedMutator
q.js:1643:30
-               deferred.resolve(result);
+               deferred.resolve(null);

[Survived] PrecomputedMutator
q.js:1647:17
-               if (pendingCount === 0) {
+               if (pendingCount < 0) {

[Survived] PrecomputedMutator
q.js:1653:17
-                   deferred.reject(rejection);
+                   deferred.resolve(rejection);

[Survived] PrecomputedMutator
q.js:1653:33
-                   deferred.reject(rejection);
+                   deferred.reject(rejection.message);

[Survived] PrecomputedMutator
q.js:1668:12
-       return any(this);
+       return all(this);

[Survived] PrecomputedMutator
q.js:1668:16
-       return any(this);
+       return any(null);

[Survived] PrecomputedMutator
q.js:1680:27
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allSettled, "allResolved", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:40
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allSettled", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:55
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allResolved", "allResolved");

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.reject);

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_filter(promises, Q);

[Survived] PrecomputedMutator
q.js:1683:30
-           promises = array_map(promises, Q);
+           promises = array_map(promises.slice(0), Q);

[Survived] PrecomputedMutator
q.js:1683:40
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.reject);

[Survived] PrecomputedMutator
q.js:1685:20
-               return when(promise, noop, noop);
+               return when(promise.then(noop, noop));

[Survived] PrecomputedMutator
q.js:1685:25
-               return when(promise, noop, noop);
+               return when(promise.then(noop, noop), noop, noop);

[Survived] PrecomputedMutator
q.js:1685:34
-               return when(promise, noop, noop);
+               return when(promise, function (err) {
+     deferred.reject(err);
+   }, noop);

[Survived] PrecomputedMutator
q.js:1693:12
-       return allResolved(this);
+       return allSettled(this);

[Survived] PrecomputedMutator
q.js:1693:24
-       return allResolved(this);
+       return allResolved(null);

[Survived] PrecomputedMutator
q.js:1701:12
-       return Q(promises).allSettled();
+       return Q.reject(promises).allSettled();

[Survived] PrecomputedMutator
q.js:1701:14
-       return Q(promises).allSettled();
+       return Q(promises.reverse()).allSettled();

[Survived] PrecomputedMutator
q.js:1714:23
-               promise = Q(promise);
+               promise = Q.reject(promise);

[Survived] PrecomputedMutator
q.js:1714:25
-               promise = Q(promise);
+               promise = Q(promise.then(function (value) {
+     return value + 1;
+   }));

[Survived] PrecomputedMutator
q.js:1716:24
-                   return promise.inspect();
+                   return promise.inspect.rejected();

[Survived] PrecomputedMutator
q.js:1718:20
-               return promise.then(regardless, regardless);
+               return promise.then(regardless, regardless, regardless);

[Survived] PrecomputedMutator
q.js:1718:33
-               return promise.then(regardless, regardless);
+               return promise.then(rejected, regardless);

[Survived] PrecomputedMutator
q.js:1718:45
-               return promise.then(regardless, regardless);
+               return promise.then(regardless, rejected);

[Survived] PrecomputedMutator
q.js:1734:12
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(rejected, void 0);

[Survived] PrecomputedMutator
q.js:1734:12
-       return Q(object).then(void 0, rejected);
+       return Q.reject(object).then(void 0, rejected);

[Survived] PrecomputedMutator
q.js:1734:14
-       return Q(object).then(void 0, rejected);
+       return Q(null).then(void 0, rejected);

[Survived] PrecomputedMutator
q.js:1734:27
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(null, rejected);

[Survived] PrecomputedMutator
q.js:1734:35
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(void 0, resolved);

[Survived] PrecomputedMutator
q.js:1739:12
-       return this.then(void 0, rejected);
+       return this.then(null, rejected);

[Survived] PrecomputedMutator
q.js:1739:22
-       return this.then(void 0, rejected);
+       return this.then(null, rejected);

[Survived] PrecomputedMutator
q.js:1739:30
-       return this.then(void 0, rejected);
+       return this.then(void 0, resolved);

[Survived] PrecomputedMutator
q.js:1752:12
-       return Q(object).then(void 0, void 0, progressed);
+       return Q.reject(object).then(void 0, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:14
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(null).then(void 0, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:27
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(null, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:35
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, null, progressed);

[Survived] PrecomputedMutator
q.js:1752:43
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, void 0, function (value) {
+     return value;
+   });

[Survived] PrecomputedMutator
q.js:1756:12
-       return this.then(void 0, void 0, progressed);
+       return this.then(null, null, progressed);

[Survived] PrecomputedMutator
q.js:1756:22
-       return this.then(void 0, void 0, progressed);
+       return this.then(null, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1756:30
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, null, progressed);

[Survived] PrecomputedMutator
q.js:1756:38
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, void 0, function (value) {
+     return value;
+   });

[Survived] PrecomputedMutator
q.js:1772:12
-       return Q(object)["finally"](callback);
+       return Q.reject(object)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1772:14
-       return Q(object)["finally"](callback);
+       return Q(null)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1772:33
-       return Q(object)["finally"](callback);
+       return Q(object)["finally"](function () {
+     throw new Error("Q can't apply finally callback");
+   });

[Survived] PrecomputedMutator
q.js:1777:9
-       if (!callback || typeof callback.apply !== "function") {
+       if (callback.apply === "function") {

[Survived] PrecomputedMutator
q.js:1780:16
-       callback = Q(callback);
+       callback = Q.reject(callback);

[Survived] PrecomputedMutator
q.js:1780:18
-       callback = Q(callback);
+       callback = Q(function () {
+     throw new Error("Q can't apply finally callback");
+   });

[Survived] PrecomputedMutator
q.js:1800:12
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(rejected, fulfilled, progress);

[Survived] PrecomputedMutator
q.js:1800:12
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q.reject(object).done(fulfilled, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:14
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(null).done(fulfilled, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:27
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(rejected, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:38
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, fulfilled, progress);

[Survived] PrecomputedMutator
q.js:1800:48
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, rejected, rejected);

[Survived] PrecomputedMutator
q.js:1808:13
-               makeStackTraceLong(error, promise);
+               makeStackTraceLong(error, promise.then());

[Survived] PrecomputedMutator
q.js:1819:19
-           this.then(fulfilled, rejected, progress) :
+           this.then(rejected, rejected, progress) :

[Survived] PrecomputedMutator
q.js:1819:30
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, resolved, progress) :

[Survived] PrecomputedMutator
q.js:1819:40
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, rejected, progressed) :

[Survived] PrecomputedMutator
q.js:1823:48
-           onUnhandledError = process.domain.bind(onUnhandledError);
+           onUnhandledError = process.domain.bind(onUnhandledError.bind(null));

[Survived] PrecomputedMutator
q.js:1826:5
-       promise.then(void 0, onUnhandledError);
+       promise.then(onUnhandledError, void 0);

[Survived] PrecomputedMutator
q.js:1826:18
-       promise.then(void 0, onUnhandledError);
+       promise.then(null, onUnhandledError);

[Survived] PrecomputedMutator
q.js:1826:26
-       promise.then(void 0, onUnhandledError);
+       promise.then(void 0, onUnhandledError());

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, new Error("Timed out after " + ms + " ms"));

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q.reject(object).timeout(ms, error);

[Survived] PrecomputedMutator
q.js:1839:14
-       return Q(object).timeout(ms, error);
+       return Q(null).timeout(ms, error);

[Survived] PrecomputedMutator
q.js:1839:30
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(0, error);

[Survived] PrecomputedMutator
q.js:1839:34
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, error.message);

[Survived] PrecomputedMutator
q.js:1845:13
-           if (!error || "string" === typeof error) {
+           if (error && "string" === typeof error) {

[Survived] PrecomputedMutator
q.js:1849:9
-           deferred.reject(error);
+           deferred.resolve(error);

[Survived] PrecomputedMutator
q.js:1849:25
-           deferred.reject(error);
+           deferred.reject(null);

[Survived] PrecomputedMutator
q.js:1853:9
-           clearTimeout(timeoutId);
+           clearInterval(timeoutId);

[Survived] PrecomputedMutator
q.js:1853:22
-           clearTimeout(timeoutId);
+           clearTimeout(null);

[Survived] PrecomputedMutator
q.js:1854:9
-           deferred.resolve(value);
+           deferred.reject(value);

[Survived] PrecomputedMutator
q.js:1854:26
-           deferred.resolve(value);
+           deferred.resolve(null);

[Survived] PrecomputedMutator
q.js:1856:9
-           clearTimeout(timeoutId);
+           clearInterval(timeoutId);

[Survived] PrecomputedMutator
q.js:1856:22
-           clearTimeout(timeoutId);
+           clearTimeout(null);

[Survived] PrecomputedMutator
q.js:1857:9
-           deferred.reject(exception);
+           deferred.resolve(exception);

[Survived] PrecomputedMutator
q.js:1857:25
-           deferred.reject(exception);
+           deferred.reject(error);

[Survived] PrecomputedMutator
q.js:1873:9
-       if (timeout === void 0) {
+       if (timeout !== void 0) {

[Survived] PrecomputedMutator
q.js:1877:12
-       return Q(object).delay(timeout);
+       return Q.reject(object).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:14
-       return Q(object).delay(timeout);
+       return Q(null).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:28
-       return Q(object).delay(timeout);
+       return Q(object).delay(timeout + 1);

[Survived] PrecomputedMutator
q.js:1884:13
-               deferred.resolve(value);
+               deferred.reject(value);

[Survived] PrecomputedMutator
q.js:1884:30
-               deferred.resolve(value);
+               deferred.resolve(null);

[Survived] PrecomputedMutator
q.js:1900:12
-       return Q(callback).nfapply(args);
+       return Q.reject(callback).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:14
-       return Q(callback).nfapply(args);
+       return Q(null).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply(null);

[Survived] PrecomputedMutator
q.js:1905:32
-       var nodeArgs = array_slice(args);
+       var nodeArgs = array_slice(args.slice(1));

[Survived] PrecomputedMutator
q.js:1906:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1906:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1907:5
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fail(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1907:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.slice(0)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1907:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1921:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:1921:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 1), 1);

[Survived] PrecomputedMutator
q.js:1921:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:1922:14
-       return Q(callback).nfapply(args);
+       return Q(null).nfapply(args);

[Survived] PrecomputedMutator
q.js:1922:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply(args.slice(1));

[Survived] PrecomputedMutator
q.js:1926:32
-       var nodeArgs = array_slice(arguments);
+       var nodeArgs = array_slice(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1928:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1928:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1929:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.slice(0, -1)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1929:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1943:9
-       if (callback === undefined) {
+       if (callback !== undefined) {

[Survived] PrecomputedMutator
q.js:1946:20
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:1946:32
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(array_slice(arguments, 1), 1);

[Survived] PrecomputedMutator
q.js:1946:43
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:1948:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1950:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1950:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1951:9
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q.fapply(callback).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:11
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(undefined).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:28
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs.slice(0)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:43
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1958:28
-       var args = array_slice(arguments);
+       var args = array_slice(arguments.slice(1));

[Survived] PrecomputedMutator
q.js:1959:5
-       args.unshift(this);
+       args.push(this);

[Survived] PrecomputedMutator
q.js:1959:18
-       args.unshift(this);
+       args.unshift(null);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(null, args);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.call(void 0, args);

[Survived] PrecomputedMutator
q.js:1960:30
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(null, args);

[Survived] PrecomputedMutator
q.js:1960:38
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(void 0, args.slice(1));

[Survived] PrecomputedMutator
q.js:1964:20
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(arguments, 3);

[Survived] PrecomputedMutator
q.js:1964:32
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(array_slice(arguments, 2), 2);

[Survived] PrecomputedMutator
q.js:1964:43
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:1966:24
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.push(array_slice(arguments));

[Survived] PrecomputedMutator
q.js:1966:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1966:52
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(null));

[Survived] PrecomputedMutator
q.js:1968:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1968:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1970:20
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, arguments[0]);

[Survived] PrecomputedMutator
q.js:1970:20
-               return callback.apply(thisp, arguments);
+               return callback.call(thisp, arguments);

[Survived] PrecomputedMutator
q.js:1970:35
-               return callback.apply(thisp, arguments);
+               return callback.apply(null, arguments);

[Survived] PrecomputedMutator
q.js:1970:42
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, nodeArgs);

[Survived] PrecomputedMutator
q.js:1972:11
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(undefined).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:25
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs.slice(0)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:40
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1978:16
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:1978:28
-       var args = array_slice(arguments, 0);
+       var args = array_slice(null, 0);

[Survived] PrecomputedMutator
q.js:1978:39
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:1979:5
-       args.unshift(this);
+       args.push(this);

[Survived] PrecomputedMutator
q.js:1979:18
-       args.unshift(this);
+       args.unshift(null);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(null, args);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.call(void 0, args);

[Survived] PrecomputedMutator
q.js:1980:26
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(null, args);

[Survived] PrecomputedMutator
q.js:1980:34
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(void 0, args.slice(1));

[Survived] PrecomputedMutator
q.js:1994:12
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.slice(1));

[Survived] PrecomputedMutator
q.js:1994:12
-       return Q(object).npost(name, args);
+       return Q.reject(object).npost(name, args);

[Survived] PrecomputedMutator
q.js:1994:14
-       return Q(object).npost(name, args);
+       return Q(null).npost(name, args);

[Survived] PrecomputedMutator
q.js:1994:28
-       return Q(object).npost(name, args);
+       return Q(object).npost("foo", args);

[Survived] PrecomputedMutator
q.js:1994:34
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.slice(1));

[Survived] PrecomputedMutator
q.js:1999:32
-       var nodeArgs = array_slice(args || []);
+       var nodeArgs = array_slice(args && []);

[Survived] PrecomputedMutator
q.js:2001:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2001:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:2002:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, deferred.makeNodeResolver()]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("get", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, deferred.makeNodeResolver()]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:2019:20
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:2019:32
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments.slice(2), 2);

[Survived] PrecomputedMutator
q.js:2019:43
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:2021:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2021:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("get", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q.reject(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:7
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(null).dispatch("post", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:24
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("get", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:32
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs, deferred.makeNodeResolver()]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:55
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:2029:20
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:2029:32
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(null, 1);

[Survived] PrecomputedMutator
q.js:2029:43
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:2031:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2031:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:2032:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("send", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("send", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, deferred.makeNodeResolver()]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:2048:12
-       return Q(object).nodeify(nodeback);
+       return Q.reject(object).nodeify(nodeback);

[Survived] PrecomputedMutator
q.js:2048:14
-       return Q(object).nodeify(nodeback);
+       return Q(null).nodeify(nodeback);

[Survived] PrecomputedMutator
q.js:2048:30
-       return Q(object).nodeify(nodeback);
+       return Q(object).nodeify(nodeback());

[Survived] PrecomputedMutator
q.js:2052:9
-       if (nodeback) {
+       if (!nodeback) {

[Survived] PrecomputedMutator
q.js:2055:17
-                   nodeback(null, value);
+                   nodeback(undefined, value);

[Survived] PrecomputedMutator
q.js:2055:26
-                   nodeback(null, value);
+                   nodeback(undefined, value);

[Survived] PrecomputedMutator
q.js:2055:32
-                   nodeback(null, value);
+                   nodeback(null, null);

[Survived] PrecomputedMutator
q.js:2059:26
-                   nodeback(error);
+                   nodeback(null);

[Survived] PrecomputedMutator
queue.js:18:43
-               var result = ends.promise.get("head");
+               var result = ends.promise.get("tail");

[Survived] PrecomputedMutator
queue.js:19:45
-               ends.promise = ends.promise.get("tail");
+               ends.promise = ends.promise.get("head");

[Survived] PrecomputedMutator
queue.js:21:17
-                   closed.resolve(error);
+                   closed.reject(error);

[Survived] PrecomputedMutator
queue.js:21:32
-                   closed.resolve(error);
+                   closed.resolve(null);

[Survived] PrecomputedMutator
queue.js:28:30
-               var end = {head: Q.reject(error)};
+               var end = {head: Q.resolve(error)};

[Survived] PrecomputedMutator
queue.js:28:39
-               var end = {head: Q.reject(error)};
+               var end = {head: Q.reject(null)};

[Survived] PrecomputedMutator
queue.js:30:13
-               ends.resolve(end);
+               ends.reject(end);

Ran 0.96 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   10.38 |       46 |        27 |        630 |        0 |        0 |
 q.js     |   10.49 |       46 |        27 |        623 |        0 |        0 |
 queue.js |    0.00 |        0 |         0 |          7 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m04:08:21 (2965) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/q/reports/mutation/mutation.html
[32m04:08:21 (2965) INFO MutationTestExecutor[39m Done in 80 minutes 18 seconds.

real	80m19.772s
user	13m41.835s
sys	2m32.265s
