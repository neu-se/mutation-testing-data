Your task is to apply mutation testing to the following code:
```
  /**
   *
   * @param point {{type: String, coordinates: Array}}
   * @returns {GeoPoint}
   */
  static fromGeoJSON(point: Point): GeoPoint {
    if (!isObject(point)) {
      throw new TypeError('GeoPoint: Argument must be an object');
    }

    if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {
      throw new TypeError('Object must have type and coordinates');
    }

    if (point.type !== 'Point') {
      throw new TypeError('The value of type should be \'Point\'');
    }

    if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {
      throw new TypeError('coordinates must be an array and contain 2 elements');
    }

    return this.fromLngLatArray(point.coordinates);
  }

  /**
   *
   * @param object {{latitude: Number, longitude: Number}}
   * @returns {GeoPoint}
   */
  static fromObject(object: LatLng): GeoPoint {
    if (!isObject(object)) {
      throw new TypeError('GeoPoint: Argument must be an object');
    }

    if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {
      throw new TypeError('Object must have latitude and longitude');
    }

    return new GeoPoint(object.latitude, object.longitude);
  }

  /**
   *
   * @param point1
   * @param point2
   * @returns {number}
   */
  static calculateDistance(point1: GeoPoint, point2: GeoPoint): number {
    const point1Rad = deg2rad(point1.latitude);
    const point2Rad = deg2rad(point2.latitude);
    const a = deg2rad(point2.longitude) - deg2rad(point1.longitude);
    const b = cos(point1Rad) * cos(point2Rad) * cos(a);
    const c = sin(point1Rad) * sin(point2Rad);
    const r = b + c;

    return acos(r > 1 ? 1 : r) * 6371392.896;
  }

  /**
   *
   * @param point1 {GeoPoint}
   * @param point2 {GeoPoint}
   * @returns {number}
   */
  static calculateBearing(point1: GeoPoint, point2: GeoPoint): number {
    const φ1 = deg2rad(point1.latitude), φ2 = deg2rad(point2.latitude);
    const Δλ = deg2rad(point2.longitude - point1.longitude);

    // see http://mathforum.org/library/drmath/view/55417.html
    const y = sin(Δλ) * cos(φ2);
    const x = cos(φ1) * sin(φ2) - sin(φ1) * cos(φ2) * cos(Δλ);
    const θ = atan2(y, x);

    return (rad2deg(θ) + 360) % 360;
  }

  /**
   *
   * @param coordinate {GeoPoint}
   * @param distance {Number} distance in meters
   * @param bearing {Number} bearing in degrees
   * @returns {GeoPoint}
   */
  static calculateDestination(coordinate: LatLng, distance: number, bearing: number): GeoPoint {
    // sinφ2 = sinφ1⋅cosδ + cosφ1⋅sinδ⋅cosθ
    // tanΔλ = sinθ⋅sinδ⋅cosφ1 / cosδ−sinφ1⋅sinφ2
    // see http://williams.best.vwh.net/avform.htm#LL

    const δ = Number(distance) / radius; // angular distance in radians
    const θ = deg2rad(Number(bearing));

    const φ1 = deg2rad(coordinate.latitude);
    const λ1 = deg2rad(coordinate.longitude);

    const sinφ1 = sin(φ1), cosφ1 = cos(φ1);
    const sinδ = sin(δ), cosδ = cos(δ);
    const sinθ = sin(θ), cosθ = cos(θ);

    const sinφ2 = sinφ1 * cosδ + cosφ1 * sinδ * cosθ;
    const φ2 = <PLACEHOLDER>(sinφ2);
    const y = sinθ * sinδ * cosφ1;
    const x = cosδ - sinφ1 * sinφ2;
    const λ2 = λ1 + atan2(y, x);

    const latitude = rad2deg(φ2);
    const longitude = (rad2deg(λ2) + 540) % 360 - 180; // normalise to −180..+180°

    return new GeoPoint(latitude, longitude);
  }

  /**
   *
   * @param array
   * @returns {GeoPoint}
   */
  static fromLatLngArray(array: [latitude: number, longitude: number]): GeoPoint {
    return new GeoPoint(array[0], array[1]);
  }

  /**
   *
   * @param array
   * @returns {GeoPoint}
   */
  static fromLngLatArray(array: [longitude: number, latitude: number]): GeoPoint {
    return new GeoPoint(array[1], array[0]);
  }

  static toTile(coordinate: LatLng, zoom: number): Tile {
    // retrieved from: https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#ECMAScript_.28JavaScript.2FActionScript.2C_etc..29
    const x = Math.floor((coordinate.longitude + 180) / 360 * Math.pow(2, zoom));
    const y = Math.floor((1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) / 2 * Math.pow(
      2,
      zoom,
    ));

    return { x, y };
  }

  /**
   *
   * @param distance {Number} distance in meters
   * @param bearing {Number} bearing in degrees
   * @returns {GeoPoint} destination point
   */
  calculateDestination(distance: number, bearing: number): GeoPoint {
    return GeoPoint.calculateDestination(this, distance, bearing);
  }

  /**
   *
   * @param point {GeoPoint} destination geo point
   * @returns {number} bearing in degrees
   */
  calculateBearing(point: GeoPoint): number {
    return GeoPoint.calculateBearing(this, point);
  }

  /**
   *
   * @param point {GeoPoint}
   * @returns {number} distance in meters
   */
  calculateDistance(point: GeoPoint): number {
    return GeoPoint.calculateDistance(this, point);
  }

  /**
   *
   * @returns {string}
   */
  toString(): string {
    return `${ this.latitude },${ this.longitude }`;
  }

  /**
   *
   * @returns {{type: string, coordinates: *[]}}
   */
  toGeoJSON(): Point {
    return {
      type: 'Point',
      coordinates: [
        this.longitude,
        this.latitude,
      ],
    };
  }

  /**
   *
   * @returns {{latitude: *, longitude: *}}
   */
  toObject(): LatLng {
    return {
      latitude: this.latitude,
      longitude: this.longitude,
    };
  }
```

by replacing the PLACEHOLDER with a buggy code fragment that has different
behavior than the original code fragment, which was:
```
asin
```
Please consider changes such as using different operators, changing constants,
referring to different variables, object properties, functions, or methods.  

Provide three answers as fenced code blocks containing a single line of code,
using the following template:

Option 1: The PLACEHOLDER can be replaced with:
```
<code fragment>
```

Option 2: The PLACEHOLDER can be replaced with:
```
<code fragment>
```

Option 3: The PLACEHOLDER can be replaced with:
```
<code fragment>
```

Please conclude your response with "DONE."