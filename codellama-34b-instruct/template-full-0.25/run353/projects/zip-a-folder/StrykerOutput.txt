*** using precomputed mutations ***
[32m09:38:23 (2422) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m09:38:23 (2422) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m09:38:23 (2422) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m09:38:23 (2422) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m09:38:23 (2422) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m09:38:23 (2422) INFO ProjectReader[39m Found 1 of 231 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 104 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.25/mutants.json ***
Mutant 0 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression !== COMPRESSION_LEVEL.uncompressed
Mutant 1 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.medium
Mutant 2 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'zip',
  zipAFolderOptions
}
Mutant 3 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions: {
    compression: COMPRESSION_LEVEL.uncompressed
  }
}
Mutant 4 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression !== COMPRESSION_LEVEL.uncompressed
Mutant 5 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.high
Mutant 6 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.medium
Mutant 7 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with zipAFolderOptions?.customWriteStream || targetFilePath
Mutant 8 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with !zipAFolderOptions?.customWriteStream || targetFilePath
Mutant 9 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with zipAFolderOptions?.customWriteStream && targetFilePath
Mutant 10 in ZipAFolder.ts: path.dirname replaced with path.basename
Mutant 11 in ZipAFolder.ts: path.dirname replaced with path.extname
Mutant 12 in ZipAFolder.ts: path.dirname replaced with path.resolve
Mutant 13 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.substring(1)
Mutant 14 in ZipAFolder.ts: targetFilePath replaced with targetFilePath + 'foo'
Mutant 15 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.toUpperCase()
Mutant 16 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath !== src
Mutant 17 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.includes(src)
Mutant 18 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.startsWith(src)
Mutant 19 in ZipAFolder.ts: !isGlob(src) replaced with isGlob(src)
Mutant 20 in ZipAFolder.ts: !isGlob(src) replaced with src.includes('*')
Mutant 21 in ZipAFolder.ts: !isGlob(src) replaced with src.match(/[*]/)
Mutant 22 in ZipAFolder.ts: isGlob replaced with !isGlob
Mutant 23 in ZipAFolder.ts: src replaced with src.split(',')[0]
Mutant 24 in ZipAFolder.ts: src replaced with src.split(',').slice(-1)
Mutant 25 in ZipAFolder.ts: src replaced with src.split(',').filter(part => part.includes('*'))
Mutant 26 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.W_OK)
Mutant 27 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.X_OK)
Mutant 28 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src, fs.constants.F_OK)
Mutant 29 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.readFile
Mutant 30 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.writeFile
Mutant 31 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.unlink
Mutant 32 in ZipAFolder.ts: src replaced with src + 'foo'
Mutant 33 in ZipAFolder.ts: src replaced with src.substring(1)
Mutant 34 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 35 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.W_OK
Mutant 36 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.X_OK
Mutant 37 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.F_OK
Mutant 38 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.R_OK)
Mutant 39 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.W_OK)
Mutant 40 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.F_OK)
Mutant 41 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.toUpperCase()
Mutant 42 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.substring(1)
Mutant 43 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.split('/').pop()
Mutant 44 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.R_OK & fs.constants.W_OK
Mutant 45 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.R_OK ^ fs.constants.W_OK
Mutant 46 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.R_OK + fs.constants.W_OK
Mutant 47 in ZipAFolder.ts: targetFilePath replaced with "foo"
Mutant 48 in ZipAFolder.ts: targetFilePath replaced with targetFilePath + "foo"
Mutant 49 in ZipAFolder.ts: targetFilePath replaced with undefined
Mutant 50 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions || zipAFolderOptions.customWriteStream
Mutant 51 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions && !zipAFolderOptions.customWriteStream
Mutant 52 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions ? zipAFolderOptions.customWriteStream : null
Mutant 53 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, archiverOptions || {
  gzip: true
})
Mutant 54 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, archiverOptions || {
  store: true
})
Mutant 55 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, archiverOptions || {
  zlib: {
    level: 9
  }
})
Mutant 56 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || {
  gzip: true
}
Mutant 57 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || {
  store: true
}
Mutant 58 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || {
  gzip: false
}
Mutant 59 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('error', reject)
Mutant 60 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('end', resolve)
Mutant 61 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('finish', reject)
Mutant 62 in ZipAFolder.ts: output.on replaced with output.off
Mutant 63 in ZipAFolder.ts: 'close' replaced with 'end'
Mutant 64 in ZipAFolder.ts: 'close' replaced with 'finish'
Mutant 65 in ZipAFolder.ts: 'close' replaced with 'error'
Mutant 66 in ZipAFolder.ts: resolve replaced with reject
Mutant 67 in ZipAFolder.ts: resolve replaced with resolve(new Error('something went wrong'))
Mutant 68 in ZipAFolder.ts: resolve replaced with resolve(null)
Mutant 69 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('end', resolve)
Mutant 70 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('finish', reject)
Mutant 71 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('close', resolve)
Mutant 72 in ZipAFolder.ts: output.on replaced with output.off
Mutant 73 in ZipAFolder.ts: 'error' replaced with 'end'
Mutant 74 in ZipAFolder.ts: 'error' replaced with 'finish'
Mutant 75 in ZipAFolder.ts: 'error' replaced with 'close'
Mutant 76 in ZipAFolder.ts: reject replaced with resolve
Mutant 77 in ZipAFolder.ts: reject replaced with output.end()
Mutant 78 in ZipAFolder.ts: output replaced with null
Mutant 79 in ZipAFolder.ts: output replaced with output.pipe(fs.createWriteStream('test.txt'))
Mutant 80 in ZipAFolder.ts: isGlob(src) replaced with !isGlob(src)
Mutant 81 in ZipAFolder.ts: isGlob(src) replaced with isGlob(src) && false
Mutant 82 in ZipAFolder.ts: isGlob(src) replaced with isGlob(src) || true
Mutant 83 in ZipAFolder.ts: src replaced with src.split(',')[0]
Mutant 84 in ZipAFolder.ts: src replaced with src.split(',').pop()
Mutant 85 in ZipAFolder.ts: src replaced with src.split(',').slice(1)
Mutant 86 in ZipAFolder.ts: ',' replaced with ';'
Mutant 87 in ZipAFolder.ts: ',' replaced with '|'
Mutant 88 in ZipAFolder.ts: ',' replaced with ' '
Mutant 89 in ZipAFolder.ts: zipArchive.glob replaced with zipArchive.file
Mutant 90 in ZipAFolder.ts: zipArchive.glob replaced with zipArchive.directory
Mutant 91 in ZipAFolder.ts: zipArchive.glob replaced with zipArchive.finalize
Mutant 92 in ZipAFolder.ts: globPart replaced with globPart.split('/')
Mutant 93 in ZipAFolder.ts: globPart replaced with globPart.substring(1)
Mutant 94 in ZipAFolder.ts: globPart replaced with globPart.toUpperCase()
Mutant 95 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, true)
Mutant 96 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, false, {
  exclude: ['**/*.js']
})
Mutant 97 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, false, {
  include: ['**/*.js']
})
Mutant 98 in ZipAFolder.ts: zipArchive.directory replaced with zipArchive.file
Mutant 99 in ZipAFolder.ts: src replaced with src + 1
Mutant 100 in ZipAFolder.ts: src replaced with src.substring(1)
Mutant 101 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 102 in ZipAFolder.ts: false replaced with true
Mutant 103 in ZipAFolder.ts: false replaced with '*'
[32m09:38:23 (2422) INFO Instrumenter[39m Instrumented 1 source file(s) with 104 mutant(s)
[32m09:38:24 (2422) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m09:38:25 (2422) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m09:38:25 (2422) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m09:38:31 (2422) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 5 seconds (net 5931 ms, overhead 1 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~17m) 1/104 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~11m) 3/104 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~8m) 6/104 tested (3 survived, 0 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~8m) 8/104 tested (3 survived, 0 timed out)
Mutation testing 9% (elapsed: <1m, remaining: ~7m) 10/104 tested (3 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~7m) 12/104 tested (3 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~6m) 15/104 tested (4 survived, 0 timed out)
Mutation testing 16% (elapsed: ~1m, remaining: ~6m) 17/104 tested (4 survived, 0 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~6m) 19/104 tested (6 survived, 0 timed out)
Mutation testing 20% (elapsed: ~1m, remaining: ~6m) 21/104 tested (6 survived, 0 timed out)
Mutation testing 22% (elapsed: ~1m, remaining: ~6m) 23/104 tested (6 survived, 0 timed out)
Mutation testing 24% (elapsed: ~2m, remaining: ~6m) 25/104 tested (7 survived, 0 timed out)
Mutation testing 25% (elapsed: ~2m, remaining: ~6m) 27/104 tested (8 survived, 0 timed out)
Mutation testing 27% (elapsed: ~2m, remaining: ~6m) 29/104 tested (10 survived, 0 timed out)
Mutation testing 29% (elapsed: ~2m, remaining: ~5m) 31/104 tested (10 survived, 0 timed out)
Mutation testing 32% (elapsed: ~2m, remaining: ~5m) 34/104 tested (10 survived, 0 timed out)
Mutation testing 34% (elapsed: ~2m, remaining: ~5m) 36/104 tested (11 survived, 0 timed out)
Mutation testing 36% (elapsed: ~3m, remaining: ~5m) 38/104 tested (13 survived, 0 timed out)
Mutation testing 38% (elapsed: ~3m, remaining: ~5m) 40/104 tested (15 survived, 0 timed out)
Mutation testing 40% (elapsed: ~3m, remaining: ~4m) 42/104 tested (16 survived, 0 timed out)
Mutation testing 42% (elapsed: ~3m, remaining: ~4m) 44/104 tested (17 survived, 0 timed out)
Mutation testing 44% (elapsed: ~3m, remaining: ~4m) 46/104 tested (19 survived, 0 timed out)
Mutation testing 46% (elapsed: ~3m, remaining: ~4m) 48/104 tested (21 survived, 0 timed out)
Mutation testing 48% (elapsed: ~4m, remaining: ~4m) 50/104 tested (22 survived, 0 timed out)
Mutation testing 50% (elapsed: ~4m, remaining: ~4m) 52/104 tested (22 survived, 0 timed out)
Mutation testing 51% (elapsed: ~4m, remaining: ~4m) 54/104 tested (23 survived, 0 timed out)
Mutation testing 53% (elapsed: ~4m, remaining: ~3m) 56/104 tested (25 survived, 0 timed out)
Mutation testing 54% (elapsed: ~4m, remaining: ~3m) 57/104 tested (25 survived, 0 timed out)
Mutation testing 56% (elapsed: ~4m, remaining: ~3m) 59/104 tested (27 survived, 0 timed out)
Mutation testing 56% (elapsed: ~5m, remaining: ~3m) 59/104 tested (27 survived, 0 timed out)
Mutation testing 57% (elapsed: ~5m, remaining: ~3m) 60/104 tested (27 survived, 1 timed out)
Mutation testing 59% (elapsed: ~5m, remaining: ~3m) 62/104 tested (27 survived, 2 timed out)
Mutation testing 59% (elapsed: ~5m, remaining: ~3m) 62/104 tested (27 survived, 2 timed out)
Mutation testing 60% (elapsed: ~5m, remaining: ~3m) 63/104 tested (27 survived, 3 timed out)
Mutation testing 61% (elapsed: ~5m, remaining: ~3m) 64/104 tested (27 survived, 4 timed out)
Mutation testing 62% (elapsed: ~6m, remaining: ~3m) 65/104 tested (28 survived, 4 timed out)
Mutation testing 63% (elapsed: ~6m, remaining: ~3m) 66/104 tested (28 survived, 5 timed out)
Mutation testing 66% (elapsed: ~6m, remaining: ~3m) 69/104 tested (28 survived, 5 timed out)
Mutation testing 68% (elapsed: ~6m, remaining: ~3m) 71/104 tested (29 survived, 5 timed out)
Mutation testing 70% (elapsed: ~6m, remaining: ~2m) 73/104 tested (31 survived, 5 timed out)
Mutation testing 72% (elapsed: ~6m, remaining: ~2m) 75/104 tested (32 survived, 5 timed out)
Mutation testing 74% (elapsed: ~7m, remaining: ~2m) 77/104 tested (34 survived, 5 timed out)
Mutation testing 76% (elapsed: ~7m, remaining: ~2m) 80/104 tested (34 survived, 5 timed out)
Mutation testing 78% (elapsed: ~7m, remaining: ~1m) 82/104 tested (35 survived, 5 timed out)
Mutation testing 80% (elapsed: ~7m, remaining: ~1m) 84/104 tested (36 survived, 5 timed out)
Mutation testing 82% (elapsed: ~7m, remaining: ~1m) 86/104 tested (38 survived, 5 timed out)
Mutation testing 84% (elapsed: ~7m, remaining: ~1m) 88/104 tested (40 survived, 5 timed out)
Mutation testing 86% (elapsed: ~8m, remaining: ~1m) 90/104 tested (42 survived, 5 timed out)
Mutation testing 88% (elapsed: ~8m, remaining: ~1m) 92/104 tested (43 survived, 5 timed out)
Mutation testing 88% (elapsed: ~8m, remaining: ~1m) 92/104 tested (43 survived, 5 timed out)
Mutation testing 90% (elapsed: ~8m, remaining: <1m) 94/104 tested (44 survived, 6 timed out)
Mutation testing 92% (elapsed: ~8m, remaining: <1m) 96/104 tested (46 survived, 6 timed out)
Mutation testing 93% (elapsed: ~8m, remaining: <1m) 97/104 tested (47 survived, 6 timed out)
Mutation testing 96% (elapsed: ~9m, remaining: <1m) 100/104 tested (48 survived, 6 timed out)
Mutation testing 99% (elapsed: ~9m, remaining: <1m) 103/104 tested (49 survived, 6 timed out)

All tests
  ✓ All tests (killed 48)

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:40:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (o.compression === COMPRESSION_LEVEL.medium) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'zip',
+     zipAFolderOptions
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'tar',
+     zipAFolderOptions: {
+       compression: COMPRESSION_LEVEL.uncompressed
+     }
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:115:57
-               const targetBasePath: string = path.dirname(targetFilePath);
+               const targetBasePath: string = path.dirname(targetFilePath + 'foo');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.includes(src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.startsWith(src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:121:29
-                   if (!isGlob(src)) {
+                   if (!isGlob(src.split(',')[0])) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:27
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.F_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.F_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.F_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:42
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath.split('/').pop(), fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK ^ fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK + fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:128:43
-               output = fs.createWriteStream(targetFilePath);
+               output = fs.createWriteStream("foo");

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:128:43
-               output = fs.createWriteStream(targetFilePath);
+               output = fs.createWriteStream(targetFilePath + "foo");

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:129:20
-           } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {
+           } else if (zipAFolderOptions ? zipAFolderOptions.customWriteStream : null) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:47
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     store: true
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:47
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     zlib: {
+       level: 9
+     }
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:64
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     store: true
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:64
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {
+     gzip: false
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:23
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.on('end', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.on('close', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.off('error', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('end', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('close', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:32
-               output.on('error', reject);
+               output.on('error', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:17
-               if (isGlob(src)) {
+               if (isGlob(src) && false) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(src.split(',')[0])) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(src.split(',').pop())) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(src.split(',').slice(1))) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split(';').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split('|').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split(' ').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:21
-                       zipArchive.glob(globPart);
+                       zipArchive.file(globPart);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:21
-                       zipArchive.glob(globPart);
+                       zipArchive.directory(globPart);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.substring(1));

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.toUpperCase());

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, false, {
+     exclude: ['**/*.js']
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, false, {
+     include: ['**/*.js']
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, '*');

Ran 0.94 tests per mutant on average.
---------------|---------|----------|-----------|------------|----------|----------|
File           | % score | # killed | # timeout | # survived | # no cov | # errors |
---------------|---------|----------|-----------|------------|----------|----------|
All files      |   51.92 |       48 |         6 |         50 |        0 |        0 |
 ZipAFolder.ts |   51.92 |       48 |         6 |         50 |        0 |        0 |
---------------|---------|----------|-----------|------------|----------|----------|
[32m09:47:45 (2422) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/reports/mutation/mutation.html
[32m09:47:45 (2422) INFO MutationTestExecutor[39m Done in 9 minutes 22 seconds.

real	9m24.105s
user	10m20.002s
sys	1m14.959s
