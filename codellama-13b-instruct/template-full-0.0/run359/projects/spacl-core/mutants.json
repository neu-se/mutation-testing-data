[
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 54,
    "originalCode": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null",
    "replacement": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null",
    "promptId": 1,
    "completionId": 0,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 54,
    "originalCode": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null",
    "replacement": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === undefined",
    "promptId": 1,
    "completionId": 0,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 19,
    "endLine": 15,
    "endColumn": 24,
    "originalCode": "/^\\//",
    "replacement": "/^$/",
    "promptId": 6,
    "completionId": 5,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 19,
    "endLine": 15,
    "endColumn": 24,
    "originalCode": "/^\\//",
    "replacement": "/^[^/]+$/",
    "promptId": 6,
    "completionId": 5,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 19,
    "endLine": 18,
    "endColumn": 25,
    "originalCode": "/\\/\\//",
    "replacement": "/[a-zA-Z0-9_/:~.$+*-]+/",
    "promptId": 9,
    "completionId": 8,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 21,
    "startColumn": 8,
    "endLine": 23,
    "endColumn": 65,
    "originalCode": "spec.match(version === '1' || version === '1.0'\n      ? /[*+][^/]|[^/][*+]/\n      : /\\*[^*/]|\\+[^+/]|[^/*]\\*|[^/+]\\+|\\*\\*\\*|\\+\\+\\+/) !== null",
    "replacement": "spec.match(/[*+][^/]|[^/][*+]/) !== null",
    "promptId": 10,
    "completionId": 9,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 21,
    "startColumn": 8,
    "endLine": 23,
    "endColumn": 65,
    "originalCode": "spec.match(version === '1' || version === '1.0'\n      ? /[*+][^/]|[^/][*+]/\n      : /\\*[^*/]|\\+[^+/]|[^/*]\\*|[^/+]\\+|\\*\\*\\*|\\+\\+\\+/) !== null",
    "replacement": "spec.match(/[*+][^/]|[^/][*+]/g) !== null",
    "promptId": 10,
    "completionId": 9,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) === null",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) !== undefined",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) !== spec.match(/^.+\\/$/)",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.toUpperCase()",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.toLowerCase()",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.replace(/[a-zA-Z0-9_/:~.$+*-]/g, '')",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.length > 0 && string.endsWith('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.length > 1 && !string.endsWith('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.length > 1 && string.startsWith('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 29,
    "endLine": 39,
    "endColumn": 44,
    "originalCode": "string.endsWith",
    "replacement": "string.includes",
    "promptId": 20,
    "completionId": 19,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 29,
    "endLine": 39,
    "endColumn": 44,
    "originalCode": "string.endsWith",
    "replacement": "string.indexOf",
    "promptId": 20,
    "completionId": 19,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 11,
    "endLine": 42,
    "endColumn": 30,
    "originalCode": "super[Symbol.match]",
    "replacement": "this[Symbol.match]",
    "promptId": 22,
    "completionId": 21,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 11,
    "endLine": 42,
    "endColumn": 30,
    "originalCode": "super[Symbol.match]",
    "replacement": "this.match",
    "promptId": 22,
    "completionId": 21,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "string.slice(1)",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "string.toUpperCase()",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "string.split('').reverse().join('')",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max > 0 && any",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max > 0 || !any",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max > 0 || any && max > 0",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "final && min < 1",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "final && max < 1",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "final && any",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "min < 0",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "min > 1",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "max < 0",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "false",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "undefined",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "null",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 47,
    "originalCode": "parts.reduce",
    "replacement": "parts.reduceRight",
    "promptId": 29,
    "completionId": 28,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 47,
    "originalCode": "parts.reduce",
    "replacement": "parts.map",
    "promptId": 29,
    "completionId": 28,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 47,
    "originalCode": "parts.reduce",
    "replacement": "parts.filter",
    "promptId": 29,
    "completionId": 28,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => seg + acc + 1",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => seg + acc + 'a'",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => seg + acc + 'b'",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'\\\\$'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'\\\\\\\\$'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'\\\\\\\\\\\\$'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('/').slice(1).reverse().map(x => x.toUpperCase())",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('/').slice(1).reverse().filter(x => x.length > 0)",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('/').slice(1).reverse().reduce((acc, x) => acc + x, '')",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.split('/').slice(-1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.split('/').slice(1, -1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "-1",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "2",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 32,
    "endLine": 92,
    "endColumn": 35,
    "originalCode": "'/'",
    "replacement": "'/a'",
    "promptId": 41,
    "completionId": 40,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.toUpperCase()",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.toLowerCase()",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.replace(/[a-zA-Z]/g, '')",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "part.match(/:.+/) === null",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "part.match(/:.+/) !== undefined",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 23,
    "endLine": 111,
    "endColumn": 28,
    "originalCode": "/:.+/",
    "replacement": "/:.*/",
    "promptId": 47,
    "completionId": 46,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.slice(2)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.slice(0, 1)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.slice(1, 2)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 32,
    "endLine": 112,
    "endColumn": 33,
    "originalCode": "1",
    "replacement": "props[0]",
    "promptId": 51,
    "completionId": 50,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 32,
    "endLine": 112,
    "endColumn": 33,
    "originalCode": "1",
    "replacement": "props.length",
    "promptId": 51,
    "completionId": 50,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/([^/]+)/'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/([^/]+)/i'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 38,
    "endLine": 115,
    "endColumn": 47,
    "originalCode": "/([.$])/g",
    "replacement": "/([^/]+)/g",
    "promptId": 57,
    "completionId": 56,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 32,
    "startColumn": 23,
    "endLine": 32,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.length",
    "promptId": 67,
    "completionId": 66,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 32,
    "startColumn": 23,
    "endLine": 32,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules[0]",
    "promptId": 67,
    "completionId": 66,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 32,
    "startColumn": 23,
    "endLine": 32,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.slice(1)",
    "promptId": 67,
    "completionId": 66,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 29,
    "endLine": 33,
    "endColumn": 33,
    "originalCode": "path",
    "replacement": "path.toUpperCase()",
    "promptId": 70,
    "completionId": 69,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 29,
    "endLine": 33,
    "endColumn": 33,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 70,
    "completionId": 69,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 29,
    "endLine": 33,
    "endColumn": 33,
    "originalCode": "path",
    "replacement": "path.replace(/[a-z]/g, 'x')",
    "promptId": 70,
    "completionId": 69,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.toLowerCase()",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.toUpperCase()",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.trim()",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "ctx.name",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "ctx.verb",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path, verb, ctx.toString())",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path, verb, ctx.toUpperCase())",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path, verb, ctx.toLowerCase())",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "res === null",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "res === true",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "res === undefined",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "res === false",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "res === null",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "res === undefined",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.length",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules[0]",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.slice(1)",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.query(path, verb, ctx)",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.clone(path, ctx)",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.toUpperCase()",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.substring(1)",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 29,
    "endLine": 49,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.name",
    "promptId": 82,
    "completionId": 81,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 29,
    "endLine": 49,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 82,
    "completionId": 81,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 29,
    "endLine": 49,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.query",
    "promptId": 82,
    "completionId": 81,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.path)",
    "promptId": 83,
    "completionId": 82,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.path.toLowerCase())",
    "promptId": 83,
    "completionId": 82,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.path.toUpperCase())",
    "promptId": 83,
    "completionId": 82,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 28,
    "endLine": 61,
    "endColumn": 42,
    "originalCode": "this.rules.map",
    "replacement": "this.rules.filter",
    "promptId": 84,
    "completionId": 83,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 28,
    "endLine": 61,
    "endColumn": 42,
    "originalCode": "this.rules.map",
    "replacement": "this.rules.reduce",
    "promptId": 84,
    "completionId": 83,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 28,
    "endLine": 61,
    "endColumn": 42,
    "originalCode": "this.rules.map",
    "replacement": "this.rules.find",
    "promptId": 84,
    "completionId": 83,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "(rule) => rule.clone(true)",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "(rule) => rule.clone(false)",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 10,
    "endLine": 7,
    "endColumn": 22,
    "originalCode": "policies.map",
    "replacement": "policies.filter",
    "promptId": 88,
    "completionId": 87,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 10,
    "endLine": 7,
    "endColumn": 22,
    "originalCode": "policies.map",
    "replacement": "policies.reduce",
    "promptId": 88,
    "completionId": 87,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 10,
    "endLine": 7,
    "endColumn": 22,
    "originalCode": "policies.map",
    "replacement": "policies.find",
    "promptId": 88,
    "completionId": 87,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 23,
    "endLine": 7,
    "endColumn": 56,
    "originalCode": "(policy) => [policy.name, policy]",
    "replacement": "(policy) => [policy.name, policy.name]",
    "promptId": 89,
    "completionId": 88,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.map((policy) => [policy.name, policy])",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.filter((policy) => policy.name === 'admin')",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.reduce((acc, policy) => acc.concat(policy.name), [])",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.name.toUpperCase()",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.name.length",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.name.charAt(0)",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "policy.name",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "policy.query(path, verb, ctx)",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "policy.matches(path, ctx)",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set(policy.name, policy.name)",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set(policy.name, policy.name + 1)",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set(policy.name, policy.name.toUpperCase())",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "undefined",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "null",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "' '",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toUpperCase()",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.substring(1)",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "verb.toLowerCase()",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "verb.toUpperCase()",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "verb.trim()",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "ctx.name",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "ctx.verb",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query(path, verb, ctx, 1)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query(path, verb, ctx, undefined)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "undefined",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "null",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "\"name\"",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.toUpperCase()",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.replace(/[a-z]/g, 'x')",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.name",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.verb",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path, ctx.path)",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path, ctx.path.toLowerCase())",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path, ctx.path.toLowerCase().split('/'))",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.length",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.toString()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.valueOf()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 4,
    "endLine": 29,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      if (!(verb in this.verbs)) {\n        this.verbs[verb] = true\n      }\n    }",
    "replacement": "for (const verb of verbs.map(v => v.toUpperCase())) {\n      if (!(verb in this.verbs)) {\n        this.verbs[verb] = true\n      }\n    }",
    "promptId": 112,
    "completionId": 111,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 4,
    "endLine": 29,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      if (!(verb in this.verbs)) {\n        this.verbs[verb] = true\n      }\n    }",
    "replacement": "for (const verb of verbs.filter(v => v !== 'GET')) {\n      if (!(verb in this.verbs)) {\n        this.verbs[verb] = true\n      }\n    }",
    "promptId": 112,
    "completionId": 111,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 4,
    "endLine": 29,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      if (!(verb in this.verbs)) {\n        this.verbs[verb] = true\n      }\n    }",
    "replacement": "for (const verb of verbs.reduce((acc, v) => acc + v, '')) {\n      if (!(verb in this.verbs)) {\n        this.verbs[verb] = true\n      }\n    }",
    "promptId": 112,
    "completionId": 111,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 26,
    "startColumn": 10,
    "endLine": 26,
    "endColumn": 31,
    "originalCode": "!(verb in this.verbs)",
    "replacement": "verb in this.verbs",
    "promptId": 113,
    "completionId": 112,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 26,
    "startColumn": 10,
    "endLine": 26,
    "endColumn": 31,
    "originalCode": "!(verb in this.verbs)",
    "replacement": "this.verbs[verb]",
    "promptId": 113,
    "completionId": 112,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.length",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.toString()",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.valueOf()",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb of verbs.map(v => v.toUpperCase())) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb of verbs.filter(v => v !== 'GET')) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb of verbs.reduce((acc, v) => acc + v, '')) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "this.matches(path, ctx) || verb in this.verbs",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "this.matches(path, ctx) && !(verb in this.verbs)",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toUpperCase()",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.replace(/[a-z]/g, 'x')",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "ctx.path.match(this.regex)",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "ctx.path.match(this.regex).length",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path, ctx.path)",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path, ctx.path.toLowerCase())",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path, ctx.path.toUpperCase())",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex.toString()",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex.test(path)",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex.exec(path)",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match === undefined",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match === false",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count < 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count === 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count !== 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "ctx === null",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "ctx === null || ctx === undefined",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index <= count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index > count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index >= count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index--",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index += 2",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index = index + 10",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop === undefined || match[index + 1] === prop",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop !== undefined && match[index + 1] !== prop",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop === undefined && match[index + 1] === prop",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs.length",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs[0]",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs.toString()",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  }
]