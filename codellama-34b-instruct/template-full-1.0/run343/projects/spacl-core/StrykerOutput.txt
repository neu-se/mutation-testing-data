*** using precomputed mutations ***
[32m00:30:05 (2520) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m00:30:05 (2520) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m00:30:05 (2520) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m00:30:05 (2520) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m00:30:05 (2520) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m00:30:06 (2520) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 225 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[-a-zA-Z0-9_/:~.$+*]*$/) === null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*]*/) === null
Mutant 2 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[\-a-zA-Z0-9_/:~.$+*]*$/) === null
Mutant 3 in matcher.ts: spec.match replaced with spec.search
Mutant 4 in matcher.ts: spec.match replaced with !spec.match
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-\s]*$/
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.-]*$/
Mutant 7 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.*+-]*$/
Mutant 8 in matcher.ts: spec.match(/^\//) === null replaced with spec.match(/^ +/) === null
Mutant 9 in matcher.ts: /^\// replaced with /^$/
Mutant 10 in matcher.ts: /^\// replaced with /^[^/]+$/
Mutant 11 in matcher.ts: /^\// replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/
Mutant 12 in matcher.ts: spec.match replaced with spec.test
Mutant 13 in matcher.ts: spec.match replaced with spec.search
Mutant 14 in matcher.ts: spec.match replaced with spec.slice
Mutant 15 in matcher.ts: /\/\// replaced with /[\s+]/
Mutant 16 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+][^/]|[^/][*+]/) !== null
Mutant 17 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null
Mutant 18 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]*:|:\/|:$/) !== null
Mutant 19 in matcher.ts: spec.match replaced with spec.search
Mutant 20 in matcher.ts: /[^/]:|:\/|:$/ replaced with !/[^/]:|:\/|:$/
Mutant 21 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/*|:$/
Mutant 22 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/+|:$/
Mutant 23 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/).length !== 0
Mutant 24 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/)[0] !== null
Mutant 25 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/).includes('')
Mutant 26 in matcher.ts: /^.+\/$/ replaced with /^.+\^\/$/
Mutant 27 in matcher.ts: /^.+\/$/ replaced with /^.+verter$/
Mutant 28 in matcher.ts: /^.+\/$/ replaced with /^.+/
Mutant 29 in matcher.ts: spec replaced with spec.slice(0, -1)
Mutant 30 in matcher.ts: spec replaced with spec.replace(/([a-zA-Z0-9_/:~.])/g, '')
Mutant 31 in matcher.ts: spec replaced with spec.split('/').slice(-1)[0]
Mutant 32 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 33 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 || string.endsWith('/')
Mutant 34 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 2 && string.endsWith('/')
Mutant 35 in matcher.ts: '/' replaced with '\\'
Mutant 36 in matcher.ts: string replaced with any(x => x.includes(string))
Mutant 37 in matcher.ts: string replaced with find(x => x.startsWith(string))
Mutant 38 in matcher.ts: final && opt && min < 1 replaced with final || opt || min > 0
Mutant 39 in matcher.ts: final && opt && min < 1 replaced with final ? opt : min > 0
Mutant 40 in matcher.ts: final && opt && min < 1 replaced with final && opt || min > 0
Mutant 41 in matcher.ts: min > 0 replaced with min === 0
Mutant 42 in matcher.ts: min > 0 replaced with max > min
Mutant 43 in matcher.ts: min > 0 replaced with any || max >= min
Mutant 44 in matcher.ts: true replaced with true && false
Mutant 45 in matcher.ts: true replaced with false || true
Mutant 46 in matcher.ts: true replaced with !true
Mutant 47 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc)
Mutant 48 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc.length)
Mutant 49 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + 'foo')
Mutant 50 in matcher.ts: parts.reduce replaced with parts.reduce = ""
Mutant 51 in matcher.ts: parts.reduce replaced with parts.length = 0
Mutant 52 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg - acc
Mutant 53 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc - seg
Mutant 54 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg * acc
Mutant 55 in matcher.ts: '$' replaced with "'"
Mutant 56 in matcher.ts: '$' replaced with " /*"
Mutant 57 in matcher.ts: '$' replaced with "undefined"
Mutant 58 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 59 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 60 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('/')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 61 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 62 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).filter(s => s !== '')
Mutant 63 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).map(s => s[0] === '+' ? s.substr(1) : s)
Mutant 64 in matcher.ts: '/' replaced with ':'
Mutant 65 in matcher.ts: '/' replaced with '\\'
Mutant 66 in matcher.ts: part replaced with part.length > 1
Mutant 67 in matcher.ts: part replaced with part.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 68 in matcher.ts: flatten replaced with any = false
Mutant 69 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:./) !== null
Mutant 70 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.*/) !== null
Mutant 71 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:\w+/) !== null
Mutant 72 in matcher.ts: part.match replaced with part.split
Mutant 73 in matcher.ts: part.match replaced with part[0]
Mutant 74 in matcher.ts: part.match replaced with part.length
Mutant 75 in matcher.ts: /:.+/ replaced with /:+/
Mutant 76 in matcher.ts: /:.+/ replaced with /[^/]+/
Mutant 77 in matcher.ts: props.push replaced with props.pop
Mutant 78 in matcher.ts: props.push replaced with props.length - 1
Mutant 79 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 80 in matcher.ts: part.slice(1) replaced with part.slice(1, 2)
Mutant 81 in matcher.ts: part.slice(1) replaced with part.substr(1)
Mutant 82 in matcher.ts: 1 replaced with 1.5
Mutant 83 in matcher.ts: parts.push replaced with parts.pop
Mutant 84 in matcher.ts: '/([^/]+)' replaced with '/([^/ ]+)'
Mutant 85 in matcher.ts: '/([^/]+)' replaced with '/([abc]+)'
Mutant 86 in matcher.ts: '/([^/]+)' replaced with '/([^/ */]+)'
Mutant 87 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/[^/]+${part.replace(/([.$])/g, '\\$1')}`
Mutant 88 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `[^/]+${part.replace(/([.$])/g, '\\$1')}`
Mutant 89 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([^.$])/g, '\\\$1')
Mutant 90 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/[^.$][^$]/g, '\\$1$2')
Mutant 91 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([^.$])/g, '\\\$1\$1')
Mutant 92 in matcher.ts: part.replace replaced with part.split
Mutant 93 in matcher.ts: part.replace replaced with part.includes
Mutant 94 in matcher.ts: part.replace replaced with part.startsWith
Mutant 95 in matcher.ts: /([.$])/g replaced with /[.]/g
Mutant 96 in matcher.ts: /([.$])/g replaced with /[.$]/g
Mutant 97 in matcher.ts: '\\$1' replaced with '\\' + $1
Mutant 98 in matcher.ts: '\\$1' replaced with "\$1"
Mutant 99 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 100 in policy.ts: this.rules replaced with this.rules.slice(0, 1)
Mutant 101 in policy.ts: this.rules replaced with this.rules.slice(1)
Mutant 102 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, null, ctx)
Mutant 103 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, null)
Mutant 104 in policy.ts: rule.query replaced with rule.check
Mutant 105 in policy.ts: rule.query replaced with rule.evaluate
Mutant 106 in policy.ts: rule.query replaced with !rule.query
Mutant 107 in policy.ts: verb replaced with !verb
Mutant 108 in policy.ts: verb replaced with verb + 'X'
Mutant 109 in policy.ts: verb replaced with verb.slice(1)
Mutant 110 in policy.ts: ctx replaced with 1 + ctx
Mutant 111 in policy.ts: ctx replaced with ctx.filter(rule => rule.name === "<PLACEHOLDER>")
Mutant 112 in policy.ts: ctx replaced with ctx.rules = this.rules.map(rule => rule.clone())
Mutant 113 in policy.ts: res === false replaced with res !== false
Mutant 114 in policy.ts: res === false replaced with !(res === false)
Mutant 115 in policy.ts: res === true replaced with res > true
Mutant 116 in policy.ts: res === true replaced with res !== true
Mutant 117 in policy.ts: res === true replaced with res ^ true
Mutant 118 in policy.ts: this.rules replaced with this.rules.slice(0)
Mutant 119 in policy.ts: this.rules replaced with this.rules.concat()
Mutant 120 in policy.ts: this.rules replaced with []
Mutant 121 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path)
Mutant 122 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(ctx, path)
Mutant 123 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, 'GET')
Mutant 124 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(false)
Mutant 125 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(null)
Mutant 126 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(!path || !ctx)
Mutant 127 in policy.ts: rule.matches replaced with !rule.matches
Mutant 128 in policy.ts: rule.matches replaced with rule.nonmatches
Mutant 129 in policy.ts: rule.matches replaced with rule['matches']
Mutant 130 in policy.ts: ctx replaced with null
Mutant 131 in policy.ts: ctx replaced with undefined
Mutant 132 in policy.ts: ctx replaced with 1
Mutant 133 in policy.ts: rule => rule.clone() replaced with rule => rule.clone() && (Math.random() > 0.5 ? rule.clone() : null)
Mutant 134 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 135 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, null]
Mutant 136 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.query(path, verb, ctx)]
Mutant 137 in policymap.ts: policies replaced with policy
Mutant 138 in policymap.ts: policies replaced with policies.length
Mutant 139 in policymap.ts: policies replaced with this
Mutant 140 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, policy.clone())
Mutant 141 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 142 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, this.get(policy.name))
Mutant 143 in policymap.ts: this.set replaced with this.set.bind
Mutant 144 in policymap.ts: policy.name replaced with policy.name + '.'
Mutant 145 in policymap.ts: policy.name replaced with policy.name.toLowerCase()
Mutant 146 in policymap.ts: policy.name replaced with policy.name + 'xyz'
Mutant 147 in policymap.ts: policy replaced with policy.name
Mutant 148 in policymap.ts: policy replaced with null
Mutant 149 in policymap.ts: policy replaced with policy[0]
Mutant 150 in policymap.ts: this.get replaced with null
Mutant 151 in policymap.ts: this.get replaced with this.forEach
Mutant 152 in policymap.ts: name replaced with null
Mutant 153 in policymap.ts: name replaced with ''
Mutant 154 in policymap.ts: name replaced with undefined
Mutant 155 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path && verb && ctx)
Mutant 156 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(ctx ? ctx.request.url : path + verb)
Mutant 157 in policymap.ts: policy.query replaced with policy.isQuery
Mutant 158 in policymap.ts: path replaced with "path" + Math.random()
Mutant 159 in policymap.ts: path replaced with path[1]
Mutant 160 in policymap.ts: path replaced with path.indexOf(path)
Mutant 161 in policymap.ts: verb replaced with "action"
Mutant 162 in policymap.ts: verb replaced with verb.toUpperCase()
Mutant 163 in policymap.ts: verb replaced with verb + "action"
Mutant 164 in policymap.ts: ctx replaced with null
Mutant 165 in policymap.ts: ctx replaced with undefined
Mutant 166 in policymap.ts: ctx replaced with 'wrong_type'
Mutant 167 in policymap.ts: name replaced with -name + path
Mutant 168 in policymap.ts: name replaced with -name + "example_name"
Mutant 169 in policymap.ts: name replaced with -name + this.name
Mutant 170 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(policy.matches(path, ctx, 0))
Mutant 171 in policymap.ts: policy.matches replaced with policy.allow
Mutant 172 in policymap.ts: policy.matches replaced with policy.deny
Mutant 173 in policymap.ts: policy.matches replaced with null
Mutant 174 in policymap.ts: path replaced with path.toLowerCase()
Mutant 175 in policymap.ts: path replaced with path.split('/').reverse()
Mutant 176 in policymap.ts: path replaced with '/fake/path'
Mutant 177 in policymap.ts: ctx replaced with null
Mutant 178 in policymap.ts: ctx replaced with undefined
Mutant 179 in policymap.ts: ctx replaced with 'unknown'
Mutant 180 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs || {}) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 181 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.keys()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 182 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.values()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 183 in rule.ts: verbs replaced with new Array(verbs).flat()
Mutant 184 in rule.ts: verbs replaced with verbs.slice(0, -1)
Mutant 185 in rule.ts: verbs replaced with verbs.filter(Boolean)
Mutant 186 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb]
Mutant 187 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs != this.verbs[verb]
Mutant 188 in rule.ts: !(verb in this.verbs) replaced with verb != this.verbs[verb]
Mutant 189 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (let verb of verbs) {
  this.verbs[verb] = false;
}
Mutant 190 in rule.ts: verbs replaced with verbs.slice()
Mutant 191 in rule.ts: verbs replaced with verbs.splice(0, 1)
Mutant 192 in rule.ts: verbs replaced with verbs.push("new verb")
Mutant 193 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 194 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !(verb in this.verbs)
Mutant 195 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && verb in this.verbs[path]
Mutant 196 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, password.match(this.regex))
Mutant 197 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx.password)
Mutant 198 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx.username)
Mutant 199 in rule.ts: this.matches replaced with typeof this.matches !== 'function'
Mutant 200 in rule.ts: this.matches replaced with this.matches && this.matches.length === 0
Mutant 201 in rule.ts: path replaced with path + '*'
Mutant 202 in rule.ts: path replaced with path.length
Mutant 203 in rule.ts: path replaced with path.substring(1)
Mutant 204 in rule.ts: ctx replaced with math.random()
Mutant 205 in rule.ts: ctx replaced with ctx - 1
Mutant 206 in rule.ts: ctx replaced with ctx + 1
Mutant 207 in rule.ts: path.match replaced with path.indexOf
Mutant 208 in rule.ts: path.match replaced with path.includes
Mutant 209 in rule.ts: path.match replaced with path.replace
Mutant 210 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 211 in rule.ts: ctx === undefined replaced with typeof ctx === 'object'
Mutant 212 in rule.ts: ctx === undefined replaced with Array.isArray(ctx)
Mutant 213 in rule.ts: index < count replaced with index > count
Mutant 214 in rule.ts: index < count replaced with index -= 1
Mutant 215 in rule.ts: index < count replaced with index == count
Mutant 216 in rule.ts: index++ replaced with index += 1
Mutant 217 in rule.ts: index++ replaced with index -= 1
Mutant 218 in rule.ts: index++ replaced with index = index + 1
Mutant 219 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined || match[index + 1] === prop
Mutant 220 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with match[index + 1] !== prop
Mutant 221 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb2 in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 222 in rule.ts: this.verbs replaced with null
Mutant 223 in rule.ts: this.verbs replaced with {}
Mutant 224 in rule.ts: this.verbs replaced with this.rules
[32m00:30:06 (2520) INFO Instrumenter[39m Instrumented 6 source file(s) with 225 mutant(s)
[32m00:30:06 (2520) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m00:30:07 (2520) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m00:30:07 (2520) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m00:30:12 (2520) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4339 ms, overhead 2 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~12m) 3/225 tested (2 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~12m) 6/225 tested (2 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~13m) 8/225 tested (2 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~12m) 11/225 tested (2 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~12m) 14/225 tested (2 survived, 0 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~12m) 17/225 tested (2 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~11m) 20/225 tested (2 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~11m) 23/225 tested (3 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~11m) 26/225 tested (3 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~11m) 29/225 tested (3 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~11m) 32/225 tested (3 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~10m) 35/225 tested (4 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~10m) 38/225 tested (5 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~10m) 41/225 tested (5 survived, 0 timed out)
Mutation testing 19% (elapsed: ~2m, remaining: ~10m) 44/225 tested (6 survived, 0 timed out)
Mutation testing 21% (elapsed: ~2m, remaining: ~9m) 48/225 tested (7 survived, 0 timed out)
Mutation testing 22% (elapsed: ~2m, remaining: ~9m) 50/225 tested (7 survived, 0 timed out)
Mutation testing 23% (elapsed: ~3m, remaining: ~9m) 53/225 tested (7 survived, 0 timed out)
Mutation testing 24% (elapsed: ~3m, remaining: ~9m) 56/225 tested (7 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~9m) 59/225 tested (7 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~9m) 62/225 tested (7 survived, 0 timed out)
Mutation testing 28% (elapsed: ~3m, remaining: ~9m) 65/225 tested (7 survived, 0 timed out)
Mutation testing 30% (elapsed: ~3m, remaining: ~8m) 68/225 tested (7 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~8m) 72/225 tested (10 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~8m) 74/225 tested (10 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~8m) 77/225 tested (11 survived, 0 timed out)
Mutation testing 35% (elapsed: ~4m, remaining: ~8m) 80/225 tested (11 survived, 0 timed out)
Mutation testing 37% (elapsed: ~4m, remaining: ~7m) 84/225 tested (13 survived, 0 timed out)
Mutation testing 38% (elapsed: ~4m, remaining: ~7m) 87/225 tested (13 survived, 0 timed out)
Mutation testing 40% (elapsed: ~5m, remaining: ~7m) 90/225 tested (13 survived, 0 timed out)
Mutation testing 41% (elapsed: ~5m, remaining: ~7m) 93/225 tested (13 survived, 0 timed out)
Mutation testing 42% (elapsed: ~5m, remaining: ~7m) 96/225 tested (13 survived, 0 timed out)
Mutation testing 44% (elapsed: ~5m, remaining: ~7m) 99/225 tested (13 survived, 0 timed out)
Mutation testing 45% (elapsed: ~5m, remaining: ~6m) 102/225 tested (14 survived, 0 timed out)
Mutation testing 46% (elapsed: ~5m, remaining: ~6m) 105/225 tested (14 survived, 0 timed out)
Mutation testing 48% (elapsed: ~6m, remaining: ~6m) 108/225 tested (14 survived, 0 timed out)
Mutation testing 49% (elapsed: ~6m, remaining: ~6m) 111/225 tested (14 survived, 0 timed out)
Mutation testing 50% (elapsed: ~6m, remaining: ~6m) 114/225 tested (14 survived, 0 timed out)
Mutation testing 52% (elapsed: ~6m, remaining: ~6m) 117/225 tested (14 survived, 0 timed out)
Mutation testing 53% (elapsed: ~6m, remaining: ~5m) 120/225 tested (16 survived, 0 timed out)
Mutation testing 54% (elapsed: ~6m, remaining: ~5m) 123/225 tested (16 survived, 0 timed out)
Mutation testing 56% (elapsed: ~7m, remaining: ~5m) 126/225 tested (16 survived, 0 timed out)
Mutation testing 57% (elapsed: ~7m, remaining: ~5m) 130/225 tested (17 survived, 0 timed out)
Mutation testing 59% (elapsed: ~7m, remaining: ~5m) 133/225 tested (17 survived, 0 timed out)
Mutation testing 60% (elapsed: ~7m, remaining: ~4m) 136/225 tested (17 survived, 0 timed out)
Mutation testing 61% (elapsed: ~7m, remaining: ~4m) 139/225 tested (17 survived, 0 timed out)
Mutation testing 63% (elapsed: ~7m, remaining: ~4m) 142/225 tested (18 survived, 0 timed out)
Mutation testing 64% (elapsed: ~8m, remaining: ~4m) 145/225 tested (18 survived, 0 timed out)
Mutation testing 65% (elapsed: ~8m, remaining: ~4m) 148/225 tested (19 survived, 0 timed out)
Mutation testing 67% (elapsed: ~8m, remaining: ~4m) 151/225 tested (19 survived, 0 timed out)
Mutation testing 68% (elapsed: ~8m, remaining: ~3m) 155/225 tested (19 survived, 0 timed out)
Mutation testing 70% (elapsed: ~8m, remaining: ~3m) 158/225 tested (19 survived, 0 timed out)
Mutation testing 71% (elapsed: ~8m, remaining: ~3m) 161/225 tested (19 survived, 0 timed out)
Mutation testing 72% (elapsed: ~9m, remaining: ~3m) 164/225 tested (19 survived, 0 timed out)
Mutation testing 74% (elapsed: ~9m, remaining: ~3m) 167/225 tested (19 survived, 0 timed out)
Mutation testing 75% (elapsed: ~9m, remaining: ~3m) 170/225 tested (19 survived, 0 timed out)
Mutation testing 76% (elapsed: ~9m, remaining: ~2m) 173/225 tested (19 survived, 0 timed out)
Mutation testing 78% (elapsed: ~9m, remaining: ~2m) 177/225 tested (20 survived, 0 timed out)
Mutation testing 80% (elapsed: ~9m, remaining: ~2m) 180/225 tested (20 survived, 0 timed out)
Mutation testing 81% (elapsed: ~10m, remaining: ~2m) 183/225 tested (22 survived, 0 timed out)
Mutation testing 82% (elapsed: ~10m, remaining: ~2m) 186/225 tested (24 survived, 0 timed out)
Mutation testing 84% (elapsed: ~10m, remaining: ~1m) 189/225 tested (24 survived, 0 timed out)
Mutation testing 85% (elapsed: ~10m, remaining: ~1m) 192/225 tested (26 survived, 0 timed out)
Mutation testing 86% (elapsed: ~10m, remaining: ~1m) 195/225 tested (26 survived, 0 timed out)
Mutation testing 88% (elapsed: ~10m, remaining: ~1m) 198/225 tested (26 survived, 0 timed out)
Mutation testing 89% (elapsed: ~11m, remaining: ~1m) 201/225 tested (26 survived, 0 timed out)
Mutation testing 90% (elapsed: ~11m, remaining: ~1m) 204/225 tested (26 survived, 0 timed out)
Mutation testing 92% (elapsed: ~11m, remaining: <1m) 208/225 tested (26 survived, 0 timed out)
Mutation testing 93% (elapsed: ~11m, remaining: <1m) 211/225 tested (26 survived, 0 timed out)
Mutation testing 95% (elapsed: ~11m, remaining: <1m) 214/225 tested (26 survived, 0 timed out)
Mutation testing 96% (elapsed: ~11m, remaining: <1m) 217/225 tested (27 survived, 0 timed out)
Mutation testing 97% (elapsed: ~12m, remaining: <1m) 220/225 tested (28 survived, 0 timed out)
Mutation testing 99% (elapsed: ~12m, remaining: <1m) 223/225 tested (29 survived, 0 timed out)

All tests
  ✓ All tests (killed 196)

[Survived] PrecomputedMutator
src/matcher.ts:12:9
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[-a-zA-Z0-9_/:~.$+*]*$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:12:9
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[\-a-zA-Z0-9_/:~.$+*]*$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/+|:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 2 && string.endsWith('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (any || max >= min) {

[Survived] PrecomputedMutator
src/matcher.ts:89:13
-       flatten(true)
+       flatten(false || true)

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:./) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:\w+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substr(1))

[Survived] PrecomputedMutator
src/matcher.ts:112:33
-             props.push(part.slice(1))
+             props.push(part.slice(1.5))

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice(0)) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.concat()) {

[Survived] PrecomputedMutator
src/policy.ts:49:11
-         if (rule.matches(path, ctx)) {
+         if (rule['matches'](path, ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:13:7
-         this.set(policy.name, policy)
+         this.set(policy.name, policy.clone())

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy.name.toLowerCase(), policy)

[Survived] PrecomputedMutator
src/policymap.ts:41:24
-         ? policy.matches(path, ctx)
+         ? policy.matches(path.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs || {}) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.values()) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of new Array(verbs).flat()) {

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of verbs.filter(Boolean)) {

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (let verb of verbs) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.slice()) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 1) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index = index + 1) {

[Survived] PrecomputedMutator
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (match[index + 1] !== prop) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   87.11 |      196 |         0 |         29 |        0 |        0 |
 matcher.ts   |   86.87 |       86 |         0 |         13 |        0 |        0 |
 policy.ts    |   88.57 |       31 |         0 |          4 |        0 |        0 |
 policymap.ts |   93.48 |       43 |         0 |          3 |        0 |        0 |
 rule.ts      |   80.00 |       36 |         0 |          9 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m00:42:27 (2520) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m00:42:27 (2520) INFO MutationTestExecutor[39m Done in 12 minutes 21 seconds.

real	12m23.180s
user	16m50.260s
sys	1m13.718s
