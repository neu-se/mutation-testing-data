Your task is to apply mutation testing to the following code:
```
          content = content.trim() + ',\n';
        }

        content += JSON.stringify(obj, null, '  ')
          // Remove indention
          .replace(/\n {2}/g, function(){
            return '\n';
          })
          // Remove prefixing and trailing braces
          .replace(/^{\n|}$/g, '');
      } else {
        content += yaml.dump(obj);
      }
    }

    // Add separators
    if (split.prefixSeparator) content = separator + '\n' + content;
    content += separator + '\n';

    // Concat content
    content += split.content;

    if (data.content){
      content += '\n' + data.content;
    }

    var result = {
      path: path,
      content: content
    };

    return Promise.all([
      // Write content to file
      fs.writeFile(path, content),
      // Create asset folder
      createAssetFolder(path, config.post_asset_folder)
    ]).then(function(){
      ctx.emit('new', result);
    }).thenReturn(result);
  }).nodeify(callback);
};

// Prepare data for JSON front-matter:
// - Add quotations for strings
function prepareJFM(data){
  var keys = Object.keys(data);
  var key = '';
  var item;

  for (var i = 0, len = keys.length; i < len; i++){
    key = keys[i];
    item = data[key];

    if (typeof item === 'string'){
      data[key] = '"' + item + '"';
    }
  }

  return data;
}

function prepareYFM(data){
  data.title = '"' + data.title + '"';

  return data;
}

Post.prototype._getScaffold = function(layout){
  var ctx = this.context;

  return ctx.scaffold.get(layout).then(function(result){
    if (result != null) return result;
    return ctx.scaffold.get('normal');
  });
};

function createAssetFolder(path, assetFolder){
  if (!assetFolder) return Promise.resolve();

  var target = removeExtname(path);

  return fs.exists(target).then(function(exist){
    if (!exist) return fs.mkdirs(target);
  });
}

function removeExtname(str){
  return str.substring(0, str.length - pathFn.extname(str).length);
}

Post.prototype.publish = function(data, replace, callback){
  if (!callback && typeof replace === 'function'){
    callback = replace;
    replace = false;
  }

  if (data.layout === 'draft') data.layout = 'post';

  var ctx = this.context;
  var config = ctx.config;
  var draftDir = pathFn.join(<PLACEHOLDER>);
  var slug = data.slug = slugize(data.slug.toString(), {transform: config.filename_case});
  var regex = new RegExp('^' + escapeRegExp(slug) + '(?:[^\\/\\\\]+)');
  var self = this;
  var src = '';
  var result = {};

  data.layout = (data.layout || config.default_layout).toLowerCase();

  // Find the draft
  return fs.listDir(draftDir).then(function(list){
    var item = '';

    for (var i = 0, len = list.length; i < len; i++){
      item = list[i];
      if (regex.test(item)) return item;
    }
  }).then(function(item){
    if (!item) throw new Error('Draft "' + slug + '" does not exist.');

    // Read the content
    src = pathFn.join(draftDir, item);
    return fs.readFile(src);
  }).then(function(content){
    // Create post
    _.extend(data, yfm(content));
    data.content = data._content;
    delete data._content;

    return self.create(data, replace).then(function(post){
      result.path = post.path;
      result.content = post.content;
    });
  }).then(function(){
    // Remove the original draft file
    return fs.unlink(src);
  }).then(function(){
    if (!config.post_asset_folder) return;

    // Copy assets
    var assetSrc = removeExtname(src);
    var assetDest = removeExtname(result.path);

    return fs.exists(assetSrc).then(function(exist){
      if (!exist) return;

      return fs.copyDir(assetSrc, assetDest).then(function(){
        return fs.rmdir(assetSrc);
      });
    });
  }).thenReturn(result).nodeify(callback);
};

Post.prototype.render = function(source, data, callback){
  data = data || {};

  var ctx = this.context;
  var config = ctx.config;
  var cache = [];
  var tag = ctx.extend.tag;
  var isSwig = data.engine === 'swig' || (source && pathFn.extname(source) === '.swig');

  data = data || {};

  function escapeContent(str){
    return '<!--' + placeholder + (cache.push(str) - 1) + '-->';
  }

  return new Promise(function(resolve, reject){
    if (data.content != null) return resolve(data.content);
    if (!source) return reject(new Error('No input file or string!'));

    // Read content from files
    fs.readFile(source).then(resolve, reject);
  }).then(function(content){
    data.content = content;

    // Run "before_post_render" filters
    return ctx.execFilter('before_post_render', data, {context: ctx}).then(function(){
      data.content = data.content.replace(rEscapeContent, function(match, content){
        return escapeContent(content);
      });
    });
  }).then(function(){
    // Skip rendering if this is a swig file
    if (isSwig) return data.content;

    // Escape all Swig tags
    data.content = data.content
      .replace(rSwigFullBlock, escapeContent)
      .replace(rSwigBlock, escapeContent)
      .replace(rSwigComment, '')
      .replace(rSwigVar, escapeContent);

    var options = data.markdown || {};
    if (!config.highlight.enable) options.highlight = null;

    // Render with markdown or other renderer
    return ctx.render.render({
      text: data.content,
```

by replacing the PLACEHOLDER with a buggy code fragment that has different
behavior than the original code fragment, which was:
```
ctx.source_dir, '_drafts'
```
Please consider changes such as using different operators, changing constants,
referring to different variables, object properties, functions, or methods.  

Provide three answers as fenced code blocks containing a single line of code,
using the following template:

Option 1: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 2: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 3: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Please conclude your response with "DONE."