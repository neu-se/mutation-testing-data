*** using precomputed mutations ***
[32m21:22:30 (2553) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m21:22:30 (2553) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m21:22:30 (2553) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m21:22:30 (2553) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m21:22:30 (2553) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m21:22:30 (2553) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 246 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in dirty.js: this._load replaced with this._loadData
Mutant 1 in dirty.js: val === undefined replaced with val == null
Mutant 2 in dirty.js: val === undefined replaced with val !== undefined
Mutant 3 in dirty.js: val === undefined replaced with val != null
Mutant 4 in dirty.js: key replaced with undefined
Mutant 5 in dirty.js: key replaced with key + 1
Mutant 6 in dirty.js: this._data.set(key, val) replaced with this._data.set(val, key)
Mutant 7 in dirty.js: this._data.set(key, val) replaced with this._data.set(null, val)
Mutant 8 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, undefined)
Mutant 9 in dirty.js: key replaced with "string"
Mutant 10 in dirty.js: key replaced with key + 1
Mutant 11 in dirty.js: key replaced with undefined
Mutant 12 in dirty.js: val replaced with -val
Mutant 13 in dirty.js: val replaced with "val"
Mutant 14 in dirty.js: val replaced with number
Mutant 15 in dirty.js: this.path replaced with true
Mutant 16 in dirty.js: this.path replaced with false
Mutant 17 in dirty.js: this.path replaced with this.path.length === 0
Mutant 18 in dirty.js: this._queue.get replaced with this._data.set
Mutant 19 in dirty.js: this._queue.get replaced with this._data[key]
Mutant 20 in dirty.js: key replaced with key + 1
Mutant 21 in dirty.js: key replaced with 'wrong_key'
Mutant 22 in dirty.js: key replaced with null
Mutant 23 in dirty.js: cb replaced with cbs.push(cb) < 0
Mutant 24 in dirty.js: cb replaced with !cbs.includes(cb) && cbs.push(cb)
Mutant 25 in dirty.js: cb replaced with cbs.slice(cbs.indexOf(cb) + 1).push(cb)
Mutant 26 in dirty.js: key replaced with this._readStream.destroy()
Mutant 27 in dirty.js: key replaced with this._writeStream.close()
Mutant 28 in dirty.js: key replaced with this.forEach(() => {})
Mutant 29 in dirty.js: cbs replaced with cbs.slice()
Mutant 30 in dirty.js: cbs replaced with cbs.concat([])
Mutant 31 in dirty.js: cbs replaced with cbs.filter(() => true)
Mutant 32 in dirty.js: setImmediate replaced with undefined
Mutant 33 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with 1 + 1
Mutant 34 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with null
Mutant 35 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with true
Mutant 36 in dirty.js: cb replaced with !cb
Mutant 37 in dirty.js: cb replaced with cb && false
Mutant 38 in dirty.js: cb replaced with cb ? true : false
Mutant 39 in dirty.js: 'drain' replaced with 'close'
Mutant 40 in dirty.js: 'drain' replaced with 'error'
Mutant 41 in dirty.js: 'drain' replaced with 'data'
Mutant 42 in dirty.js: key replaced with key + 1
Mutant 43 in dirty.js: key replaced with null
Mutant 44 in dirty.js: key replaced with key.length
Mutant 45 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 46 in dirty.js: this.set(key, undefined, cb) replaced with this.set(undefined, cb)
Mutant 47 in dirty.js: this.set(key, undefined, cb) replaced with this.set(foo, cb)
Mutant 48 in dirty.js: key replaced with "key" + "something"
Mutant 49 in dirty.js: key replaced with "key" + 1
Mutant 50 in dirty.js: key replaced with null
Mutant 51 in dirty.js: undefined replaced with null
Mutant 52 in dirty.js: undefined replaced with JSON.stringify(val)
Mutant 53 in dirty.js: undefined replaced with this._data.remove(key)
Mutant 54 in dirty.js: cb replaced with function cbWrapper() {
  cb();
}
Mutant 55 in dirty.js: this._data replaced with this._data.values()
Mutant 56 in dirty.js: this._data replaced with this._data.entries()
Mutant 57 in dirty.js: this._data replaced with this._data.forEach((key, value) => this.set(key, value, () => console.log(key + ': ' + value)))
Mutant 58 in dirty.js: fn(key, val) === false replaced with val !== undefined
Mutant 59 in dirty.js: fn(key, val) === false replaced with !(val in this._data)
Mutant 60 in dirty.js: fn(key, val) === false replaced with this._data.hasOwnProperty(key)
Mutant 61 in dirty.js: fn(key, val) replaced with fn(key, this._data.get(key))
Mutant 62 in dirty.js: fn(key, val) replaced with fn(val, key)
Mutant 63 in dirty.js: key replaced with key + 1
Mutant 64 in dirty.js: key replaced with "key" + 1
Mutant 65 in dirty.js: key replaced with null
Mutant 66 in dirty.js: val replaced with null
Mutant 67 in dirty.js: val replaced with () => {}
Mutant 68 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key)), undefined)
Mutant 69 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) + 1), cb)
Mutant 70 in dirty.js: key replaced with val
Mutant 71 in dirty.js: key replaced with true
Mutant 72 in dirty.js: key replaced with key + 1
Mutant 73 in dirty.js: updater(this.get(key)) replaced with updater(key)
Mutant 74 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key), key)
Mutant 75 in dirty.js: updater(this.get(key)) replaced with updater(this.get(val))
Mutant 76 in dirty.js: updater replaced with null
Mutant 77 in dirty.js: this.get(key) replaced with null
Mutant 78 in dirty.js: key replaced with foo.bar
Mutant 79 in dirty.js: key replaced with bar.foo
Mutant 80 in dirty.js: cb replaced with this.set(key, undefined, cb)
Mutant 81 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites > 0
Mutant 82 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size || this._inFlightWrites < 0
Mutant 83 in dirty.js: this.once replaced with this.when
Mutant 84 in dirty.js: this.once replaced with this.off
Mutant 85 in dirty.js: this.once replaced with this.on
Mutant 86 in dirty.js: 'drain' replaced with 'write_close'
Mutant 87 in dirty.js: 'drain' replaced with 'read_close'
Mutant 88 in dirty.js: 'drain' replaced with 'error'
Mutant 89 in dirty.js: () => this.close() replaced with () => console.log('DONE')
Mutant 90 in dirty.js: () => this.close() replaced with () => this._data.clear()
Mutant 91 in dirty.js: this._writeStream replaced with this._writeStream.end()
Mutant 92 in dirty.js: this._writeStream replaced with this._writeStream.destroy()
Mutant 93 in dirty.js: this._writeStream replaced with null
Mutant 94 in dirty.js: this._writeStream.end replaced with this._writeStream.close
Mutant 95 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.write("")
Mutant 96 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end("")
Mutant 97 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.close()
Mutant 98 in dirty.js: this._writeStream.destroy replaced with this._writeStream.cork
Mutant 99 in dirty.js: this._writeStream.destroy replaced with this._writeStream.resume
Mutant 100 in dirty.js: !this.path replaced with this.path === undefined
Mutant 101 in dirty.js: !this.path replaced with this.path != null
Mutant 102 in dirty.js: !this.path replaced with this.path !== undefined
Mutant 103 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 104 in dirty.js: this.emit('load', 0) replaced with this.emit('error', 'Simulated error')
Mutant 105 in dirty.js: this.emit('load', 0) replaced with this.emit('load')
Mutant 106 in dirty.js: 'load' replaced with 'error'
Mutant 107 in dirty.js: 'load' replaced with 'drain'
Mutant 108 in dirty.js: 0 replaced with -1
Mutant 109 in dirty.js: 0 replaced with null
Mutant 110 in dirty.js: 0 replaced with "Hello, World!"
Mutant 111 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOENT' || err.code === 'ENOTDIR'
Mutant 112 in dirty.js: err.code === 'ENOENT' replaced with err.message === 'ENOENT'
Mutant 113 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EISDIR'
Mutant 114 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 115 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._inFlightWrites)
Mutant 116 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size)
Mutant 117 in dirty.js: this.emit replaced with this._writeStream.emit
Mutant 118 in dirty.js: this.emit replaced with this._readStream.emit
Mutant 119 in dirty.js: 'load' replaced with 'load', null
Mutant 120 in dirty.js: 'load' replaced with 'error', new Error()
Mutant 121 in dirty.js: 'load' replaced with 'update', null
Mutant 122 in dirty.js: 0 replaced with -1
Mutant 123 in dirty.js: 0 replaced with NaN
Mutant 124 in dirty.js: 0 replaced with Infinity
Mutant 125 in dirty.js: this.emit('error', err) replaced with this.emit('error')
Mutant 126 in dirty.js: this.emit('error', err) replaced with this.emit('error', 'invalid error')
Mutant 127 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('invalid error'))
Mutant 128 in dirty.js: 'error' replaced with 'debug'
Mutant 129 in dirty.js: 'error' replaced with undefined
Mutant 130 in dirty.js: 'error' replaced with 'load'
Mutant 131 in dirty.js: err replaced with []
Mutant 132 in dirty.js: err replaced with {
  error: err
}
Mutant 133 in dirty.js: err replaced with err.message
Mutant 134 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') > 0
Mutant 135 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') < 0
Mutant 136 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') !== -1
Mutant 137 in dirty.js: '\n' replaced with '\n\n'
Mutant 138 in dirty.js: '\n' replaced with '\n' + key
Mutant 139 in dirty.js: buffer.split replaced with "buffer.slice"
Mutant 140 in dirty.js: !rowStr replaced with rowStr == ""
Mutant 141 in dirty.js: !rowStr replaced with typeof rowStr === "undefined"
Mutant 142 in dirty.js: !rowStr replaced with rowStr !== null
Mutant 143 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', 'Empty lines never appear in a healthy database')
Mutant 144 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('This is a new error!'))
Mutant 145 in dirty.js: 'error' replaced with 'Warning'
Mutant 146 in dirty.js: 'error' replaced with 'info'
Mutant 147 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('This is a different error message')
Mutant 148 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with this.emit('error', 'This is a different error message')
Mutant 149 in dirty.js: rowStr replaced with rowStr.toLowerCase()
Mutant 150 in dirty.js: rowStr replaced with rowStr.substring(1)
Mutant 151 in dirty.js: rowStr replaced with rowStr + 'extra'
Mutant 152 in dirty.js: !('key' in row) replaced with `row.key === undefined`
Mutant 153 in dirty.js: !('key' in row) replaced with `!row.val`
Mutant 154 in dirty.js: !('key' in row) replaced with `row.key === 'invalid_key'`
Mutant 155 in dirty.js: this.emit replaced with this._otherEmit
Mutant 156 in dirty.js: 'error' replaced with 'warning'
Mutant 157 in dirty.js: 'error' replaced with 'notify'
Mutant 158 in dirty.js: row.val === undefined replaced with row.val = undefined
Mutant 159 in dirty.js: row.val === undefined replaced with row.val !== undefined
Mutant 160 in dirty.js: row.val === undefined replaced with row.val == undefined
Mutant 161 in dirty.js: row.key replaced with row.val
Mutant 162 in dirty.js: row.key replaced with row['key']
Mutant 163 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.val, row.key)
Mutant 164 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.val * 2)
Mutant 165 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key + 1, row.val)
Mutant 166 in dirty.js: this._data.set replaced with this._data2.set
Mutant 167 in dirty.js: row.key replaced with row.val
Mutant 168 in dirty.js: row.key replaced with 'test_key'
Mutant 169 in dirty.js: row.key replaced with 'my_key' + row.key
Mutant 170 in dirty.js: row.val replaced with this._data.get(key)
Mutant 171 in dirty.js: row.val replaced with row[key]
Mutant 172 in dirty.js: buffer.length replaced with buffer.length + 1
Mutant 173 in dirty.js: buffer.length replaced with buffer.length - 1
Mutant 174 in dirty.js: buffer.length replaced with buffer[buffer.length - 1]
Mutant 175 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(1)}`))
Mutant 176 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}.slice(1)`))
Mutant 177 in dirty.js: this.emit replaced with this._emit
Mutant 178 in dirty.js: this.emit replaced with this.addEventListener
Mutant 179 in dirty.js: 'error' replaced with 'drain'
Mutant 180 in dirty.js: 'error' replaced with 'corrupted'
Mutant 181 in dirty.js: 'error' replaced with 'eof'
Mutant 182 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Empty row at the end of the db: ${buffer}`)
Mutant 183 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Invalid row at the end of the db: ${buffer}`)
Mutant 184 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size - 1)
Mutant 185 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 186 in dirty.js: this.emit replaced with null.emit
Mutant 187 in dirty.js: this.emit replaced with undefined.emit
Mutant 188 in dirty.js: this.emit replaced with 'load'.emit
Mutant 189 in dirty.js: 'load' replaced with 'drain'
Mutant 190 in dirty.js: 'load' replaced with 'error'
Mutant 191 in dirty.js: 'load' replaced with 'write_close'
Mutant 192 in dirty.js: this._data.size replaced with this._data.length
Mutant 193 in dirty.js: this._data.size replaced with this._data[0]
Mutant 194 in dirty.js: this._data.size replaced with this._data.hasOwnProperty('size')
Mutant 195 in dirty.js: 'read_close' replaced with 'write_close'
Mutant 196 in dirty.js: 'read_close' replaced with 'drain'
Mutant 197 in dirty.js: 'read_close' replaced with 'close'
Mutant 198 in dirty.js: !this._queue.size replaced with this._queue.size > 0
Mutant 199 in dirty.js: !this._queue.size replaced with this._inFlightWrites > 0
Mutant 200 in dirty.js: !this._queue.size replaced with this._waitForDrain
Mutant 201 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites == 0
Mutant 202 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites > 0 && this._queue.size === 0
Mutant 203 in dirty.js: this._inFlightWrites <= 0 replaced with false
Mutant 204 in dirty.js: 'drain' replaced with 'error'
Mutant 205 in dirty.js: 'drain' replaced with 'close'
Mutant 206 in dirty.js: this._flush replaced with this.flush
Mutant 207 in dirty.js: 'write_close' replaced with 'drain'
Mutant 208 in dirty.js: 'write_close' replaced with 'write'
Mutant 209 in dirty.js: 'write_close' replaced with '_writesFinished'
Mutant 210 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size != 0 || this._waitForDrain
Mutant 211 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.isEmpty() || this._waitForDrain
Mutant 212 in dirty.js: this._queue replaced with this._data.keys()
Mutant 213 in dirty.js: this._queue replaced with this._data.values()
Mutant 214 in dirty.js: this._queue replaced with this._data.entries()
Mutant 215 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) + 5
}
Mutant 216 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key: key + '_suffix',
  val: this._data.get(key)
}
Mutant 217 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) || null
}
Mutant 218 in dirty.js: key replaced with this._data.set(key, val)
Mutant 219 in dirty.js: key replaced with key, ''
Mutant 220 in dirty.js: key replaced with undefined
Mutant 221 in dirty.js: !cbs.length && err != null replaced with err == null
Mutant 222 in dirty.js: !cbs.length && err != null replaced with cbs.length > 0 && err == null
Mutant 223 in dirty.js: this.emit('error', err) replaced with this.emit('message', err)
Mutant 224 in dirty.js: this.emit('error', err) replaced with this.emit('write', err)
Mutant 225 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error())
Mutant 226 in dirty.js: 'error' replaced with 'END'
Mutant 227 in dirty.js: 'error' replaced with 'parse_error'
Mutant 228 in dirty.js: err replaced with console.warn('Error occurred. Dirty database found.')
Mutant 229 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites >= 0 && !this._waitForDrain
Mutant 230 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites > 0 && !this._waitForDrain
Mutant 231 in dirty.js: 'drain' replaced with 'flush'
Mutant 232 in dirty.js: 'drain' replaced with 'read_close'
Mutant 233 in dirty.js: 'drain' replaced with 'reflush'
Mutant 234 in dirty.js: for (const cb of cbs) cb(err); replaced with for (let cb of cbs) cb(err);
Mutant 235 in dirty.js: cbs replaced with "done"
Mutant 236 in dirty.js: cbs replaced with null
Mutant 237 in dirty.js: cbs replaced with this._data
Mutant 238 in dirty.js: cb replaced with c.length
Mutant 239 in dirty.js: cb replaced with c[0]
Mutant 240 in dirty.js: err replaced with null
Mutant 241 in dirty.js: err replaced with false
Mutant 242 in dirty.js: err replaced with 0
Mutant 243 in dirty.js: this._waitForDrain replaced with this._waitForDrain === false
Mutant 244 in dirty.js: this._waitForDrain replaced with this._inFlightWrites < 0
Mutant 245 in dirty.js: this._waitForDrain replaced with this._queue.size > 0
[32m21:22:30 (2553) INFO Instrumenter[39m Instrumented 2 source file(s) with 246 mutant(s)
[32m21:22:31 (2553) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m21:22:32 (2553) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m21:22:32 (2553) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m21:22:32 (2553) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 525 ms, overhead 2 ms).
Mutation testing 7% (elapsed: <1m, remaining: ~1m) 19/246 tested (1 survived, 0 timed out)
Mutation testing 15% (elapsed: <1m, remaining: ~1m) 37/246 tested (7 survived, 0 timed out)
Mutation testing 17% (elapsed: <1m, remaining: ~2m) 42/246 tested (8 survived, 0 timed out)
Mutation testing 24% (elapsed: <1m, remaining: ~2m) 61/246 tested (9 survived, 0 timed out)
Mutation testing 32% (elapsed: <1m, remaining: ~1m) 80/246 tested (12 survived, 0 timed out)
Mutation testing 38% (elapsed: ~1m, remaining: ~1m) 95/246 tested (24 survived, 0 timed out)
Mutation testing 43% (elapsed: ~1m, remaining: ~1m) 107/246 tested (26 survived, 0 timed out)
Mutation testing 47% (elapsed: ~1m, remaining: ~1m) 117/246 tested (29 survived, 1 timed out)
Mutation testing 48% (elapsed: ~1m, remaining: ~1m) 119/246 tested (29 survived, 3 timed out)
Mutation testing 49% (elapsed: ~1m, remaining: ~1m) 121/246 tested (29 survived, 5 timed out)
Mutation testing 52% (elapsed: ~1m, remaining: ~1m) 130/246 tested (34 survived, 6 timed out)
Mutation testing 60% (elapsed: ~2m, remaining: ~1m) 149/246 tested (47 survived, 6 timed out)
Mutation testing 68% (elapsed: ~2m, remaining: <1m) 169/246 tested (52 survived, 6 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 188/246 tested (61 survived, 6 timed out)
Mutation testing 77% (elapsed: ~2m, remaining: <1m) 191/246 tested (61 survived, 7 timed out)
Mutation testing 83% (elapsed: ~2m, remaining: <1m) 206/246 tested (70 survived, 8 timed out)
Mutation testing 85% (elapsed: ~2m, remaining: <1m) 210/246 tested (71 survived, 8 timed out)
Mutation testing 90% (elapsed: ~3m, remaining: <1m) 223/246 tested (71 survived, 9 timed out)
Mutation testing 93% (elapsed: ~3m, remaining: <1m) 231/246 tested (77 survived, 9 timed out)
Mutation testing 94% (elapsed: ~3m, remaining: <1m) 233/246 tested (77 survived, 11 timed out)
Mutation testing 98% (elapsed: ~3m, remaining: <1m) 242/246 tested (80 survived, 12 timed out)

All tests
  ✓ All tests (killed 150)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key + 1) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get('wrong_key') || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(null) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.slice());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.concat([]));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.filter(() => true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:32
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => { if (cb ? true : false) cb(); this.emit('drain'); });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:69:30
-       for (const [key, val] of this._data) {
+       for (const [key, val] of this._data.entries()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, this._data.get(key)) === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:19
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key), key), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), this.set(key, undefined, cb));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size || this._inFlightWrites < 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.off('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.on('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('write_close', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('read_close', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => console.log('DONE'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._data.clear());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.end()) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.destroy()) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:56
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.cork());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:113:15
-             if (err.code === 'ENOENT') {
+             if (err.code === 'ENOENT' || err.code === 'ENOTDIR') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:114:13
-               this.emit('load', 0);
+               this.emit('load', this._inFlightWrites);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:114:13
-               this.emit('load', 0);
+               this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', 'invalid error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error('invalid error'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('debug', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit(undefined, err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('load', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', []);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', {
+     error: err
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('\n') < 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr == "") {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (typeof rowStr === "undefined") {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', 'Empty lines never appear in a healthy database');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('This is a new error!'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('Warning', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('info', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('This is a different error message'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', this.emit('error', 'This is a different error message'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this._otherEmit('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warning', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('notify', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:143:33
-                 this._data.delete(row.key);
+                 this._data.delete(row['key']);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer[buffer.length - 1]) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}.slice(1)`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this._emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.addEventListener('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('drain', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('corrupted', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('eof', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Empty row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._waitForDrain) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites == 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites > 0 && this._queue.size === 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (false) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:171:9
-           this._flush();
+           this.flush();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('message', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('write', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('END', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('parse_error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', console.warn('Error occurred. Dirty database found.'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:9
-           for (const cb of cbs) cb(err);
+           for (let cb of cbs) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(false);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._inFlightWrites < 0) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._queue.size > 0) break;

Ran 0.95 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   65.85 |      150 |        12 |         84 |        0 |        0 |
 dirty.js |   65.85 |      150 |        12 |         84 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m21:26:04 (2553) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m21:26:04 (2553) INFO MutationTestExecutor[39m Done in 3 minutes 34 seconds.

real	3m35.860s
user	2m10.532s
sys	0m21.978s
