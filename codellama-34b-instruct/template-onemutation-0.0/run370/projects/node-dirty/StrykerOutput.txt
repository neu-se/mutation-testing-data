*** using precomputed mutations ***
[32m01:57:49 (2556) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m01:57:49 (2556) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m01:57:49 (2556) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m01:57:49 (2556) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m01:57:49 (2556) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m01:57:49 (2556) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 98 mutants from MUTATION_TESTING/template-onemutation_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with val == null
Mutant 1 in dirty.js: key replaced with undefined
Mutant 2 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val + 1)
Mutant 3 in dirty.js: key replaced with key + 1
Mutant 4 in dirty.js: val replaced with null
Mutant 5 in dirty.js: this.path replaced with this.path.toUpperCase()
Mutant 6 in dirty.js: this._queue.get replaced with this._queue.set
Mutant 7 in dirty.js: key replaced with key + 1
Mutant 8 in dirty.js: cb replaced with !cbs.includes(cb)
Mutant 9 in dirty.js: cb replaced with null
Mutant 10 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, [])
Mutant 11 in dirty.js: key replaced with key + 1
Mutant 12 in dirty.js: cbs replaced with cbs.slice()
Mutant 13 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('drain', 1);
}
Mutant 14 in dirty.js: cb replaced with !cb
Mutant 15 in dirty.js: 'drain' replaced with 'error'
Mutant 16 in dirty.js: key replaced with this._data.get(key)
Mutant 17 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 18 in dirty.js: key replaced with key + 1
Mutant 19 in dirty.js: undefined replaced with null
Mutant 20 in dirty.js: cb replaced with null
Mutant 21 in dirty.js: for (const [key, val] of this._data) {
  if (fn(key, val) === false) break;
} replaced with for (const [val, key] of this._data) {
  if (fn(key, val) === false) break;
}
Mutant 22 in dirty.js: for (const [key, val] of this._data) {
  if (fn(key, val) === false) break;
} replaced with for (const [key, val] of this._data.entries()) {
  if (fn(key, val) === false) break;
}
Mutant 23 in dirty.js: this._data replaced with this._queue
Mutant 24 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== false
Mutant 25 in dirty.js: fn(key, val) replaced with fn(key, this._data.get(key))
Mutant 26 in dirty.js: key replaced with key + 1
Mutant 27 in dirty.js: val replaced with undefined
Mutant 28 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) + 1), cb)
Mutant 29 in dirty.js: this.set replaced with this.rm
Mutant 30 in dirty.js: key replaced with key + 1
Mutant 31 in dirty.js: updater(this.get(key)) replaced with updater(this._data.get(key))
Mutant 32 in dirty.js: updater replaced with updater + 1
Mutant 33 in dirty.js: key replaced with undefined
Mutant 34 in dirty.js: cb replaced with undefined
Mutant 35 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites > 0
Mutant 36 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('close', () => this.close())
Mutant 37 in dirty.js: this.once replaced with this.emit
Mutant 38 in dirty.js: 'drain' replaced with 'error'
Mutant 39 in dirty.js: () => this.close() replaced with () => this.close(true)
Mutant 40 in dirty.js: this._readStream replaced with this._writeStream
Mutant 41 in dirty.js: this._writeStream.end replaced with this._writeStream.destroy
Mutant 42 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end()
Mutant 43 in dirty.js: !this.path replaced with this.path === undefined
Mutant 44 in dirty.js: this.emit('load', 0) replaced with this.emit('error', new Error('Failed to load database'))
Mutant 45 in dirty.js: 'load' replaced with 'error'
Mutant 46 in dirty.js: 0 replaced with 1
Mutant 47 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOENT' || err.code === 'EACCES'
Mutant 48 in dirty.js: this.emit('load', 0) replaced with this.emit('error', 0)
Mutant 49 in dirty.js: 'load' replaced with 'error'
Mutant 50 in dirty.js: 0 replaced with 1
Mutant 51 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Custom error message'))
Mutant 52 in dirty.js: 'error' replaced with 'drain'
Mutant 53 in dirty.js: err replaced with err.message
Mutant 54 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') !== -1
Mutant 55 in dirty.js: chunk.lastIndexOf replaced with chunk.indexOf
Mutant 56 in dirty.js: '\n' replaced with '\r\n'
Mutant 57 in dirty.js: '\n' replaced with '\r\n'
Mutant 58 in dirty.js: arr.pop replaced with arr.shift
Mutant 59 in dirty.js: !rowStr replaced with rowStr.length === 0
Mutant 60 in dirty.js: 'error' replaced with 'warn'
Mutant 61 in dirty.js: JSON.parse replaced with JSON.stringify
Mutant 62 in dirty.js: rowStr replaced with rowStr.toUpperCase()
Mutant 63 in dirty.js: !('key' in row) replaced with !row.hasOwnProperty('key')
Mutant 64 in dirty.js: 'error' replaced with 'warn'
Mutant 65 in dirty.js: row.val === undefined replaced with row.val !== undefined
Mutant 66 in dirty.js: row.key replaced with row.val
Mutant 67 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.val, row.val)
Mutant 68 in dirty.js: row.key replaced with row.val
Mutant 69 in dirty.js: row.val replaced with row.key
Mutant 70 in dirty.js: buffer.length replaced with buffer.length === 0
Mutant 71 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`))
Mutant 72 in dirty.js: 'error' replaced with 'end'
Mutant 73 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`)
Mutant 74 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 75 in dirty.js: 'load' replaced with 'loaded'
Mutant 76 in dirty.js: this._data.size replaced with this._data.length
Mutant 77 in dirty.js: 'read_close' replaced with 'write_close'
Mutant 78 in dirty.js: !this._queue.size replaced with this._queue.size === 0
Mutant 79 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites < 0
Mutant 80 in dirty.js: 'drain' replaced with 'close'
Mutant 81 in dirty.js: 'write_close' replaced with 'write_error'
Mutant 82 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size && !this._waitForDrain
Mutant 83 in dirty.js: this._writeStream.cork replaced with this._writeStream.uncork
Mutant 84 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.entries()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 85 in dirty.js: this._queue replaced with this._data
Mutant 86 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) + 1
}
Mutant 87 in dirty.js: this._data.get replaced with this._data.set
Mutant 88 in dirty.js: !cbs.length && err != null replaced with cbs.length === 0 && err != null
Mutant 89 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Buggy error message'))
Mutant 90 in dirty.js: 'error' replaced with 'drain'
Mutant 91 in dirty.js: err replaced with null
Mutant 92 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 && !this._waitForDrain
Mutant 93 in dirty.js: 'drain' replaced with 'error'
Mutant 94 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.reverse()) cb(err);
Mutant 95 in dirty.js: cbs replaced with cbs.reverse()
Mutant 96 in dirty.js: err replaced with null
Mutant 97 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
[32m01:57:49 (2556) INFO Instrumenter[39m Instrumented 2 source file(s) with 98 mutant(s)
[32m01:57:49 (2556) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m01:57:51 (2556) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m01:57:51 (2556) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m01:57:51 (2556) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 529 ms, overhead 1 ms).
Mutation testing 15% (elapsed: <1m, remaining: <1m) 15/98 tested (4 survived, 0 timed out)
Mutation testing 35% (elapsed: <1m, remaining: <1m) 35/98 tested (9 survived, 0 timed out)
Mutation testing 55% (elapsed: <1m, remaining: <1m) 54/98 tested (19 survived, 0 timed out)
Mutation testing 75% (elapsed: <1m, remaining: <1m) 74/98 tested (27 survived, 0 timed out)
Mutation testing 82% (elapsed: <1m, remaining: <1m) 81/98 tested (30 survived, 1 timed out)
Mutation testing 89% (elapsed: ~1m, remaining: <1m) 88/98 tested (32 survived, 2 timed out)
Mutation testing 98% (elapsed: ~1m, remaining: n/a) 97/98 tested (39 survived, 3 timed out)

All tests
  ✓ All tests (killed 55)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key + 1) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.slice());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) cb();
+     this.emit('drain', 1);
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:69:5
-       for (const [key, val] of this._data) {
-         if (fn(key, val) === false) break;
-       }
+       for (const [key, val] of this._data.entries()) {
+     if (fn(key, val) === false) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, this._data.get(key)) === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:19
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this._data.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('close', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.emit('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:113:15
-             if (err.code === 'ENOENT') {
+             if (err.code === 'ENOENT' || err.code === 'EACCES') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error('Custom error message'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('drain', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.indexOf('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('warn', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (!row.hasOwnProperty('key')) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warn', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites < 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:183:5
-       this._writeStream.cork();
+       this._writeStream.uncork();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:5
-       for (const [key, cbs] of this._queue) {
-         this._queue.delete(key);
-         const data = `${JSON.stringify({key, val: this._data.get(key)})}\n`;
-         ++this._inFlightWrites;
-         this._waitForDrain = !this._writeStream.write(data, (err) => {
-           if (!cbs.length && err != null) this.emit('error', err);
-           if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
-           for (const cb of cbs) cb(err);
-         });
-         if (this._waitForDrain) break;
-       }
+       for (const [key, cbs] of this._queue.entries()) {
+     this._queue.delete(key);
+     const data = `${JSON.stringify({
+       key,
+       val: this._data.get(key)
+     })}\n`;
+     ++this._inFlightWrites;
+     this._waitForDrain = !this._writeStream.write(data, err => {
+       if (!cbs.length && err != null) this.emit('error', err);
+       if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
+       for (const cb of cbs) cb(err);
+     });
+     if (this._waitForDrain) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (cbs.length === 0 && err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Buggy error message'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('drain', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:9
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

Ran 0.97 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   59.18 |       55 |         3 |         40 |        0 |        0 |
 dirty.js |   59.18 |       55 |         3 |         40 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m01:59:01 (2556) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m01:59:01 (2556) INFO MutationTestExecutor[39m Done in 1 minute 12 seconds.

real	1m13.924s
user	0m54.074s
sys	0m9.655s
