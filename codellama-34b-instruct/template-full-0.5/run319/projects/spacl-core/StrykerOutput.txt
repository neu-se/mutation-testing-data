*** using precomputed mutations ***
[32m12:08:54 (2501) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m12:08:54 (2501) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m12:08:55 (2501) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m12:08:55 (2501) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m12:08:55 (2501) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m12:08:55 (2501) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 257 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.5/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === undefined
Mutant 2 in matcher.ts: spec.match replaced with spec.search
Mutant 3 in matcher.ts: spec.match replaced with spec.replace
Mutant 4 in matcher.ts: spec.match replaced with spec.split
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/g
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/i
Mutant 7 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/m
Mutant 8 in matcher.ts: spec.match replaced with spec.search
Mutant 9 in matcher.ts: spec.match replaced with spec.indexOf
Mutant 10 in matcher.ts: spec.match replaced with spec.includes
Mutant 11 in matcher.ts: /^\// replaced with /^[a-zA-Z0-9_/:~.$+*-]+/
Mutant 12 in matcher.ts: /^\// replaced with /^(?:\/[a-zA-Z0-9_/:~.$+*-]+)+/
Mutant 13 in matcher.ts: /\/\// replaced with /\/\/+/
Mutant 14 in matcher.ts: /\/\// replaced with /\/\/*/
Mutant 15 in matcher.ts: /\/\// replaced with /\/\/|/
Mutant 16 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+][^/]|[^/][*+]/) !== null
Mutant 17 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+][^/]|[^/][*+]/, version) !== null
Mutant 18 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+][^/]|[^/][*+]/, version === '1' || version === '1.0' ? /$/ : /^/) !== null
Mutant 19 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) === null
Mutant 20 in matcher.ts: spec.match replaced with spec.search
Mutant 21 in matcher.ts: spec.match replaced with spec.replace
Mutant 22 in matcher.ts: spec.match replaced with spec.split
Mutant 23 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 24 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== undefined
Mutant 25 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== spec.match(/^.+$/)
Mutant 26 in matcher.ts: spec.match replaced with spec.search
Mutant 27 in matcher.ts: spec.match replaced with spec.replace
Mutant 28 in matcher.ts: spec.match replaced with spec.split
Mutant 29 in matcher.ts: /^.+\/$/ replaced with /^.+\.\/$/
Mutant 30 in matcher.ts: /^.+\/$/ replaced with /^.+\.\/+/
Mutant 31 in matcher.ts: spec replaced with spec.replace(/^[a-zA-Z0-9_/:~.$+*-]*$/, '')
Mutant 32 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 33 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 || string.endsWith('/')
Mutant 34 in matcher.ts: string.endsWith replaced with string.includes
Mutant 35 in matcher.ts: string.endsWith replaced with string.startsWith
Mutant 36 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 37 in matcher.ts: '/' replaced with '\\'
Mutant 38 in matcher.ts: '/' replaced with '|/'
Mutant 39 in matcher.ts: string replaced with string.replace(/\/+/g, '/')
Mutant 40 in matcher.ts: string replaced with string.replace(/[^\/]+/g, '')
Mutant 41 in matcher.ts: max > 0 || any replaced with max > 0
Mutant 42 in matcher.ts: max > 0 || any replaced with any
Mutant 43 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 44 in matcher.ts: final && opt && min < 1 replaced with final && opt && min <= 1
Mutant 45 in matcher.ts: final && opt && min < 1 replaced with final && opt && min > 1
Mutant 46 in matcher.ts: final && opt && min < 1 replaced with final && opt && min === 1
Mutant 47 in matcher.ts: min > 0 replaced with min < 0
Mutant 48 in matcher.ts: min > 0 replaced with max > 0
Mutant 49 in matcher.ts: min > 0 replaced with any
Mutant 50 in matcher.ts: true replaced with false
Mutant 51 in matcher.ts: true replaced with min < 1
Mutant 52 in matcher.ts: true replaced with parts.length > 0
Mutant 53 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '$')
Mutant 54 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '$$')
Mutant 55 in matcher.ts: parts.reduce replaced with parts.join
Mutant 56 in matcher.ts: parts.reduce replaced with parts.length
Mutant 57 in matcher.ts: parts.reduce replaced with parts.slice
Mutant 58 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg - acc
Mutant 59 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg * acc
Mutant 60 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg.concat(acc)
Mutant 61 in matcher.ts: '$' replaced with ''
Mutant 62 in matcher.ts: '$' replaced with '/'
Mutant 63 in matcher.ts: '$' replaced with '\\\\'
Mutant 64 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('/')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 65 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().map(x => x.toLowerCase())) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 66 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().filter(x => x.startsWith(':'))) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 67 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 68 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().join('/')
Mutant 69 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').reverse().slice(1)
Mutant 70 in matcher.ts: '/' replaced with '\\'
Mutant 71 in matcher.ts: '/' replaced with '[/]'
Mutant 72 in matcher.ts: 1 replaced with 0
Mutant 73 in matcher.ts: 1 replaced with -1
Mutant 74 in matcher.ts: 1 replaced with spec.length - 1
Mutant 75 in matcher.ts: part replaced with part.length
Mutant 76 in matcher.ts: part replaced with part[0]
Mutant 77 in matcher.ts: part replaced with part.split('')
Mutant 78 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== null && part.match(/^\/:[^/]+$/) !== null
Mutant 79 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== null || part.match(/^\/:[^/]+$/) !== null
Mutant 80 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== null && part.match(/^\/:[^/]+$/) === null
Mutant 81 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 82 in matcher.ts: /:.+/ replaced with /:.?/
Mutant 83 in matcher.ts: /:.+/ replaced with /:.{2}/
Mutant 84 in matcher.ts: props.push replaced with props.pop
Mutant 85 in matcher.ts: props.push replaced with props.shift
Mutant 86 in matcher.ts: props.push replaced with props.unshift
Mutant 87 in matcher.ts: part.slice(1) replaced with part.substring(1)
Mutant 88 in matcher.ts: part.slice(1) replaced with part.substr(1)
Mutant 89 in matcher.ts: part.slice(1) replaced with part.split('').slice(1).join('')
Mutant 90 in matcher.ts: part.slice replaced with part.match
Mutant 91 in matcher.ts: 1 replaced with 0
Mutant 92 in matcher.ts: 1 replaced with 2
Mutant 93 in matcher.ts: 1 replaced with -1
Mutant 94 in matcher.ts: '/([^/]+)' replaced with '/([^/]+?)'
Mutant 95 in matcher.ts: '/([^/]+)' replaced with '/([^/]+*)'
Mutant 96 in matcher.ts: '/([^/]+)' replaced with '/([^/]+{1,})'
Mutant 97 in matcher.ts: parts.push replaced with parts.pop
Mutant 98 in matcher.ts: parts.push replaced with parts.shift
Mutant 99 in matcher.ts: parts.push replaced with parts.unshift
Mutant 100 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1')}.*/`
Mutant 101 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1')}.+/`
Mutant 102 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1')}[^/]+/`
Mutant 103 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '$1')
Mutant 104 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 105 in matcher.ts: /([.$])/g replaced with /([^.$]+)/g
Mutant 106 in matcher.ts: /([.$])/g replaced with /([^.$]*)[.$]/g
Mutant 107 in matcher.ts: '\\$1' replaced with '\\$2'
Mutant 108 in matcher.ts: '\\$1' replaced with '\\$0'
Mutant 109 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 110 in policy.ts: this.rules.push replaced with this.rules.pop
Mutant 111 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 112 in policy.ts: this.rules replaced with this.rules.slice(1)
Mutant 113 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.name === 'admin')
Mutant 114 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, ctx.verb, ctx)
Mutant 115 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.path)
Mutant 116 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.verb)
Mutant 117 in policy.ts: path replaced with path.toUpperCase()
Mutant 118 in policy.ts: path replaced with path + 'foo'
Mutant 119 in policy.ts: path replaced with path.split('/')[0]
Mutant 120 in policy.ts: verb replaced with !verb
Mutant 121 in policy.ts: verb replaced with verb + 'x'
Mutant 122 in policy.ts: verb replaced with verb.toLowerCase()
Mutant 123 in policy.ts: ctx replaced with ctx.path
Mutant 124 in policy.ts: ctx replaced with ctx.verb
Mutant 125 in policy.ts: ctx replaced with ctx.path + ctx.verb
Mutant 126 in policy.ts: res === false replaced with res === true
Mutant 127 in policy.ts: res === false replaced with res !== false
Mutant 128 in policy.ts: res === false replaced with res !== true
Mutant 129 in policy.ts: res === true replaced with res === false
Mutant 130 in policy.ts: res === true replaced with res == true
Mutant 131 in policy.ts: res === true replaced with !res
Mutant 132 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 133 in policy.ts: this.rules replaced with this.rules.slice(1)
Mutant 134 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.matches(path, ctx))
Mutant 135 in policy.ts: rule.matches(path, ctx) replaced with !rule.matches(path, ctx)
Mutant 136 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) && false
Mutant 137 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) || true
Mutant 138 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, null)
Mutant 139 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, "different_context")
Mutant 140 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.child)
Mutant 141 in policy.ts: rule.matches replaced with rule.doesNotMatch
Mutant 142 in policy.ts: path replaced with path.slice(1)
Mutant 143 in policy.ts: path replaced with path.split('/')[0]
Mutant 144 in policy.ts: path replaced with path.replace(/^/, '')
Mutant 145 in policy.ts: ctx replaced with null
Mutant 146 in policy.ts: ctx replaced with undefined
Mutant 147 in policy.ts: ctx replaced with {}
Mutant 148 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 149 in policy.ts: this.rules.map replaced with this.rules.reduce
Mutant 150 in policy.ts: this.rules.map replaced with this.rules.forEach
Mutant 151 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(null, false)
Mutant 152 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(this.name, true)
Mutant 153 in policymap.ts: policies.map replaced with policies.forEach
Mutant 154 in policymap.ts: policies.map replaced with policies.filter
Mutant 155 in policymap.ts: policies.map replaced with policies.reduce
Mutant 156 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 157 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name.toUpperCase()]
Mutant 158 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name.split('').reverse().join('')]
Mutant 159 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy of policies.values()) {
  this.set(policy.name, policy);
}
Mutant 160 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy of policies.entries()) {
  this.set(policy.name, policy);
}
Mutant 161 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy of policies.keys()) {
  this.set(policy.name, policy);
}
Mutant 162 in policymap.ts: policies replaced with policies.slice(1)
Mutant 163 in policymap.ts: policies replaced with policies.filter(policy => policy.name !== name)
Mutant 164 in policymap.ts: policies replaced with policies.reverse()
Mutant 165 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 166 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, policy.name)
Mutant 167 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, policy.name + "foo")
Mutant 168 in policymap.ts: policy.name replaced with policy.name.toLowerCase()
Mutant 169 in policymap.ts: policy.name replaced with policy.name.length
Mutant 170 in policymap.ts: policy.name replaced with policy.name.split('').reverse().join('')
Mutant 171 in policymap.ts: policy replaced with policy.name
Mutant 172 in policymap.ts: policy replaced with policy.name.toUpperCase()
Mutant 173 in policymap.ts: policy replaced with policy.name.split('').reverse().join('')
Mutant 174 in policymap.ts: this.get replaced with this.set
Mutant 175 in policymap.ts: this.get replaced with this.has
Mutant 176 in policymap.ts: this.get replaced with this.size
Mutant 177 in policymap.ts: name replaced with "<name>"
Mutant 178 in policymap.ts: name replaced with name.toUpperCase()
Mutant 179 in policymap.ts: name replaced with name.split("").reverse().join("")
Mutant 180 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.parent)
Mutant 181 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.parent.path)
Mutant 182 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.parent.parent)
Mutant 183 in policymap.ts: path replaced with path[0]
Mutant 184 in policymap.ts: path replaced with path.length
Mutant 185 in policymap.ts: path replaced with path.substring(1)
Mutant 186 in policymap.ts: verb replaced with !verb
Mutant 187 in policymap.ts: verb replaced with verb + 'a'
Mutant 188 in policymap.ts: verb replaced with verb.toUpperCase()
Mutant 189 in policymap.ts: ctx replaced with ctx + 1
Mutant 190 in policymap.ts: ctx replaced with ctx - 1
Mutant 191 in policymap.ts: ctx replaced with ctx * 2
Mutant 192 in policymap.ts: name replaced with undefined
Mutant 193 in policymap.ts: name replaced with null
Mutant 194 in policymap.ts: name replaced with ''
Mutant 195 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, null)
Mutant 196 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, undefined)
Mutant 197 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, "some other path")
Mutant 198 in policymap.ts: policy.matches replaced with policy.doesNotExist
Mutant 199 in policymap.ts: path replaced with path + 'foo'
Mutant 200 in policymap.ts: path replaced with path.toUpperCase()
Mutant 201 in policymap.ts: path replaced with path.split('/')[0]
Mutant 202 in policymap.ts: ctx replaced with "foo"
Mutant 203 in policymap.ts: ctx replaced with ctx + 1
Mutant 204 in policymap.ts: ctx replaced with ctx * 2
Mutant 205 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (let verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 206 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (var verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 207 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 208 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb]
Mutant 209 in rule.ts: !(verb in this.verbs) replaced with !this.verbs[verb]
Mutant 210 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.keys()) {
  this.verbs[verb] = false;
}
Mutant 211 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.values()) {
  this.verbs[verb] = false;
}
Mutant 212 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.entries()) {
  this.verbs[verb] = false;
}
Mutant 213 in rule.ts: verbs replaced with verbs.length
Mutant 214 in rule.ts: verbs replaced with verbs.keys()
Mutant 215 in rule.ts: verbs replaced with verbs.values()
Mutant 216 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !this.verbs[verb]
Mutant 217 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 218 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && this.verbs[verb] === false
Mutant 219 in rule.ts: this.matches(path, ctx) replaced with this.matches(path + ctx)
Mutant 220 in rule.ts: this.matches(path, ctx) replaced with this.matches(path || ctx)
Mutant 221 in rule.ts: this.matches(path, ctx) replaced with this.matches(path && ctx)
Mutant 222 in rule.ts: this.matches replaced with !this.matches
Mutant 223 in rule.ts: path replaced with path.toLowerCase()
Mutant 224 in rule.ts: path replaced with path.slice(1)
Mutant 225 in rule.ts: path replaced with path.replace(/[a-zA-Z]/g, '*')
Mutant 226 in rule.ts: ctx replaced with null
Mutant 227 in rule.ts: ctx replaced with undefined
Mutant 228 in rule.ts: ctx replaced with "abc"
Mutant 229 in rule.ts: path.match replaced with path.match + 1
Mutant 230 in rule.ts: this.regex replaced with this.regex.source
Mutant 231 in rule.ts: this.regex replaced with this.regex.test(path)
Mutant 232 in rule.ts: this.regex replaced with this.regex.match(path)
Mutant 233 in rule.ts: match === null replaced with match === undefined
Mutant 234 in rule.ts: match === null replaced with match !== null
Mutant 235 in rule.ts: match === null replaced with match.length === 0
Mutant 236 in rule.ts: count > 0 replaced with count < 0
Mutant 237 in rule.ts: count > 0 replaced with count === 0
Mutant 238 in rule.ts: count > 0 replaced with count >= 0
Mutant 239 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 240 in rule.ts: ctx === undefined replaced with !ctx
Mutant 241 in rule.ts: ctx === undefined replaced with ctx === null
Mutant 242 in rule.ts: index < count replaced with index <= count
Mutant 243 in rule.ts: index < count replaced with index > count
Mutant 244 in rule.ts: index < count replaced with index >= count
Mutant 245 in rule.ts: index++ replaced with index--
Mutant 246 in rule.ts: index++ replaced with index += 2
Mutant 247 in rule.ts: index++ replaced with index = Math.floor(index / 2)
Mutant 248 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] !== prop
Mutant 249 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined || match[index + 1] === prop
Mutant 250 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] === prop
Mutant 251 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb2 in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 252 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb of this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 253 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.values()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 254 in rule.ts: this.verbs replaced with !this.verbs
Mutant 255 in rule.ts: this.verbs replaced with this.verbs.length
Mutant 256 in rule.ts: this.verbs replaced with this.verbs.slice()
[32m12:08:55 (2501) INFO Instrumenter[39m Instrumented 6 source file(s) with 257 mutant(s)
[32m12:08:56 (2501) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m12:08:57 (2501) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m12:08:57 (2501) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m12:09:01 (2501) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4254 ms, overhead 1 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~21m) 2/257 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~13m) 6/257 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~13m) 9/257 tested (2 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~13m) 12/257 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~13m) 15/257 tested (3 survived, 0 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~13m) 18/257 tested (3 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~13m) 21/257 tested (3 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~12m) 24/257 tested (3 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~12m) 27/257 tested (3 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~13m) 29/257 tested (3 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~12m) 33/257 tested (3 survived, 0 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~12m) 36/257 tested (3 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~12m) 39/257 tested (6 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~11m) 42/257 tested (6 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~11m) 45/257 tested (6 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~11m) 48/257 tested (6 survived, 0 timed out)
Mutation testing 19% (elapsed: ~2m, remaining: ~11m) 51/257 tested (6 survived, 0 timed out)
Mutation testing 21% (elapsed: ~3m, remaining: ~11m) 54/257 tested (8 survived, 0 timed out)
Mutation testing 22% (elapsed: ~3m, remaining: ~11m) 57/257 tested (8 survived, 0 timed out)
Mutation testing 23% (elapsed: ~3m, remaining: ~10m) 60/257 tested (8 survived, 0 timed out)
Mutation testing 24% (elapsed: ~3m, remaining: ~10m) 63/257 tested (9 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~10m) 66/257 tested (10 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~10m) 69/257 tested (10 survived, 0 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~10m) 72/257 tested (10 survived, 0 timed out)
Mutation testing 29% (elapsed: ~4m, remaining: ~10m) 75/257 tested (10 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~9m) 78/257 tested (10 survived, 0 timed out)
Mutation testing 31% (elapsed: ~4m, remaining: ~9m) 82/257 tested (13 survived, 0 timed out)
Mutation testing 33% (elapsed: ~4m, remaining: ~9m) 85/257 tested (14 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~9m) 88/257 tested (15 survived, 0 timed out)
Mutation testing 35% (elapsed: ~5m, remaining: ~9m) 91/257 tested (17 survived, 0 timed out)
Mutation testing 36% (elapsed: ~5m, remaining: ~8m) 94/257 tested (17 survived, 0 timed out)
Mutation testing 37% (elapsed: ~5m, remaining: ~8m) 97/257 tested (17 survived, 0 timed out)
Mutation testing 38% (elapsed: ~5m, remaining: ~8m) 100/257 tested (17 survived, 0 timed out)
Mutation testing 40% (elapsed: ~5m, remaining: ~8m) 103/257 tested (17 survived, 0 timed out)
Mutation testing 41% (elapsed: ~5m, remaining: ~8m) 106/257 tested (17 survived, 0 timed out)
Mutation testing 42% (elapsed: ~6m, remaining: ~8m) 109/257 tested (17 survived, 0 timed out)
Mutation testing 43% (elapsed: ~6m, remaining: ~7m) 112/257 tested (19 survived, 0 timed out)
Mutation testing 44% (elapsed: ~6m, remaining: ~7m) 115/257 tested (19 survived, 0 timed out)
Mutation testing 46% (elapsed: ~6m, remaining: ~7m) 119/257 tested (19 survived, 0 timed out)
Mutation testing 47% (elapsed: ~6m, remaining: ~7m) 122/257 tested (19 survived, 0 timed out)
Mutation testing 48% (elapsed: ~6m, remaining: ~7m) 125/257 tested (20 survived, 0 timed out)
Mutation testing 49% (elapsed: ~7m, remaining: ~7m) 128/257 tested (20 survived, 0 timed out)
Mutation testing 50% (elapsed: ~7m, remaining: ~6m) 131/257 tested (21 survived, 0 timed out)
Mutation testing 52% (elapsed: ~7m, remaining: ~6m) 134/257 tested (22 survived, 0 timed out)
Mutation testing 53% (elapsed: ~7m, remaining: ~6m) 137/257 tested (23 survived, 0 timed out)
Mutation testing 54% (elapsed: ~7m, remaining: ~6m) 140/257 tested (23 survived, 0 timed out)
Mutation testing 55% (elapsed: ~7m, remaining: ~6m) 143/257 tested (23 survived, 0 timed out)
Mutation testing 57% (elapsed: ~8m, remaining: ~5m) 147/257 tested (24 survived, 0 timed out)
Mutation testing 58% (elapsed: ~8m, remaining: ~5m) 150/257 tested (24 survived, 0 timed out)
Mutation testing 59% (elapsed: ~8m, remaining: ~5m) 153/257 tested (24 survived, 0 timed out)
Mutation testing 60% (elapsed: ~8m, remaining: ~5m) 156/257 tested (24 survived, 0 timed out)
Mutation testing 61% (elapsed: ~8m, remaining: ~5m) 159/257 tested (24 survived, 0 timed out)
Mutation testing 63% (elapsed: ~8m, remaining: ~5m) 162/257 tested (25 survived, 0 timed out)
Mutation testing 64% (elapsed: ~9m, remaining: ~5m) 165/257 tested (26 survived, 0 timed out)
Mutation testing 65% (elapsed: ~9m, remaining: ~4m) 168/257 tested (26 survived, 0 timed out)
Mutation testing 66% (elapsed: ~9m, remaining: ~4m) 172/257 tested (27 survived, 0 timed out)
Mutation testing 68% (elapsed: ~9m, remaining: ~4m) 175/257 tested (27 survived, 0 timed out)
Mutation testing 69% (elapsed: ~9m, remaining: ~4m) 178/257 tested (27 survived, 0 timed out)
Mutation testing 70% (elapsed: ~9m, remaining: ~4m) 181/257 tested (27 survived, 0 timed out)
Mutation testing 71% (elapsed: ~10m, remaining: ~3m) 184/257 tested (27 survived, 0 timed out)
Mutation testing 72% (elapsed: ~10m, remaining: ~3m) 187/257 tested (27 survived, 0 timed out)
Mutation testing 74% (elapsed: ~10m, remaining: ~3m) 191/257 tested (27 survived, 0 timed out)
Mutation testing 75% (elapsed: ~10m, remaining: ~3m) 194/257 tested (27 survived, 0 timed out)
Mutation testing 76% (elapsed: ~10m, remaining: ~3m) 197/257 tested (27 survived, 0 timed out)
Mutation testing 77% (elapsed: ~10m, remaining: ~3m) 200/257 tested (27 survived, 0 timed out)
Mutation testing 78% (elapsed: ~11m, remaining: ~2m) 203/257 tested (27 survived, 0 timed out)
Mutation testing 80% (elapsed: ~11m, remaining: ~2m) 206/257 tested (28 survived, 0 timed out)
Mutation testing 81% (elapsed: ~11m, remaining: ~2m) 209/257 tested (29 survived, 0 timed out)
Mutation testing 82% (elapsed: ~11m, remaining: ~2m) 213/257 tested (30 survived, 0 timed out)
Mutation testing 84% (elapsed: ~11m, remaining: ~2m) 216/257 tested (31 survived, 0 timed out)
Mutation testing 85% (elapsed: ~11m, remaining: ~2m) 219/257 tested (31 survived, 0 timed out)
Mutation testing 86% (elapsed: ~12m, remaining: ~1m) 222/257 tested (31 survived, 0 timed out)
Mutation testing 87% (elapsed: ~12m, remaining: ~1m) 225/257 tested (32 survived, 0 timed out)
Mutation testing 88% (elapsed: ~12m, remaining: ~1m) 228/257 tested (32 survived, 0 timed out)
Mutation testing 89% (elapsed: ~12m, remaining: ~1m) 231/257 tested (33 survived, 0 timed out)
Mutation testing 91% (elapsed: ~12m, remaining: ~1m) 234/257 tested (33 survived, 0 timed out)
Mutation testing 92% (elapsed: ~12m, remaining: ~1m) 237/257 tested (33 survived, 0 timed out)
Mutation testing 93% (elapsed: ~13m, remaining: <1m) 240/257 tested (33 survived, 0 timed out)
Mutation testing 94% (elapsed: ~13m, remaining: <1m) 243/257 tested (34 survived, 0 timed out)
Mutation testing 95% (elapsed: ~13m, remaining: <1m) 246/257 tested (34 survived, 0 timed out)
Mutation testing 96% (elapsed: ~13m, remaining: <1m) 247/257 tested (35 survived, 0 timed out)
Mutation testing 97% (elapsed: ~13m, remaining: <1m) 250/257 tested (35 survived, 1 timed out)
Mutation testing 98% (elapsed: ~13m, remaining: <1m) 253/257 tested (35 survived, 1 timed out)
Mutation testing 99% (elapsed: ~14m, remaining: <1m) 256/257 tested (35 survived, 1 timed out)

All tests
  ✓ All tests (killed 221)

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/g) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/i) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:18:20
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/\/\/+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('|/')) {

[Survived] PrecomputedMutator
src/matcher.ts:89:13
-       flatten(true)
+       flatten(min < 1)

[Survived] PrecomputedMutator
src/matcher.ts:90:36
-       return (opt ? '^/$|^' : '^') + parts.reduce((acc, seg) => seg + acc, '$')
+       return (opt ? '^/$|^' : '^') + parts.reduce((acc, seg) => seg + acc, '$')

[Survived] PrecomputedMutator
src/matcher.ts:90:49
-       return (opt ? '^/$|^' : '^') + parts.reduce((acc, seg) => seg + acc, '$')
+       return (opt ? '^/$|^' : '^') + parts.reduce((acc, seg) => seg.concat(acc), '$')

[Survived] PrecomputedMutator
src/matcher.ts:92:3
-     for (const part of spec.split('/').slice(1).reverse()) {
-       switch (part) {
-         case '+':
-           min++
-           max++
-           break
-         case '++':
-           max++
-           break
-         case '*':
-           min++
-           any = true
-           break
-         case '**':
-           any = true
-           break
-         default:
-           flatten()
-           opt = false
-           if (part.match(/:.+/) !== null) {
-             props.push(part.slice(1))
-             parts.push('/([^/]+)')
-           } else {
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
-           }
-       }
-     }
+     for (const part of spec.split('/').slice(1).reverse().map(x => x.toLowerCase())) {
+     switch (part) {
+       case '+':
+         min++;
+         max++;
+         break;
+       case '++':
+         max++;
+         break;
+       case '*':
+         min++;
+         any = true;
+         break;
+       case '**':
+         any = true;
+         break;
+       default:
+         flatten();
+         opt = false;
+         if (part.match(/:.+/) !== null) {
+           props.push(part.slice(1));
+           parts.push('/([^/]+)');
+         } else {
+           parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
+         }
+     }
+   }

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.+/) !== null || part.match(/^\/:[^/]+$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.+/) !== null && part.match(/^\/:[^/]+$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.?/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substring(1))

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substr(1))

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.split('').slice(1).join(''))

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policy.ts:37:11
-         if (res === true) {
+         if (res == true) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.filter(rule => rule.matches(path, ctx))) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.replace(/^/, ''), ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:12:5
-       for (const policy of policies) {
-         this.set(policy.name, policy)
-       }
+       for (const policy of policies.values()) {
+     this.set(policy.name, policy);
+   }

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.reverse()) {

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy.name.toLowerCase(), policy)

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (let verb of verbs) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (var verb of verbs) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.values()) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.values()) {

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:60:30
-       const match = path.match(this.regex)
+       const match = path.match(this.regex.source)

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (!ctx) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   86.38 |      221 |         1 |         35 |        0 |        0 |
 matcher.ts   |   84.40 |       92 |         0 |         17 |        0 |        0 |
 policy.ts    |   84.09 |       37 |         0 |          7 |        0 |        0 |
 policymap.ts |   94.23 |       49 |         0 |          3 |        0 |        0 |
 rule.ts      |   84.62 |       43 |         1 |          8 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m12:23:02 (2501) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m12:23:02 (2501) INFO MutationTestExecutor[39m Done in 14 minutes 7 seconds.

real	14m8.713s
user	18m59.173s
sys	1m23.532s
