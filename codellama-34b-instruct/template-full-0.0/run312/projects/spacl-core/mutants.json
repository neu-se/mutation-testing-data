[
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.search",
    "promptId": 2,
    "completionId": 1,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.replace",
    "promptId": 2,
    "completionId": 1,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.split",
    "promptId": 2,
    "completionId": 1,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 19,
    "endLine": 12,
    "endColumn": 44,
    "originalCode": "/^[a-zA-Z0-9_/:~.$+*-]*$/",
    "replacement": "/^[a-zA-Z0-9_/:~.$+*-]*$/g",
    "promptId": 3,
    "completionId": 2,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 19,
    "endLine": 12,
    "endColumn": 44,
    "originalCode": "/^[a-zA-Z0-9_/:~.$+*-]*$/",
    "replacement": "/^[a-zA-Z0-9_/:~.$+*-]*$/i",
    "promptId": 3,
    "completionId": 2,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 19,
    "endLine": 12,
    "endColumn": 44,
    "originalCode": "/^[a-zA-Z0-9_/:~.$+*-]*$/",
    "replacement": "/^[a-zA-Z0-9_/:~.$+*-]*$/m",
    "promptId": 3,
    "completionId": 2,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 8,
    "endLine": 15,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.search",
    "promptId": 5,
    "completionId": 4,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 8,
    "endLine": 15,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.replace",
    "promptId": 5,
    "completionId": 4,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 8,
    "endLine": 15,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.split",
    "promptId": 5,
    "completionId": 4,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 19,
    "endLine": 15,
    "endColumn": 24,
    "originalCode": "/^\\//",
    "replacement": "/^[a-zA-Z0-9_/:~.$+*-]*$/",
    "promptId": 6,
    "completionId": 5,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 8,
    "endLine": 18,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.search",
    "promptId": 8,
    "completionId": 7,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 8,
    "endLine": 18,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.replace",
    "promptId": 8,
    "completionId": 7,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 8,
    "endLine": 18,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.split",
    "promptId": 8,
    "completionId": 7,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 21,
    "startColumn": 8,
    "endLine": 23,
    "endColumn": 65,
    "originalCode": "spec.match(version === '1' || version === '1.0'\n      ? /[*+][^/]|[^/][*+]/\n      : /\\*[^*/]|\\+[^+/]|[^/*]\\*|[^/+]\\+|\\*\\*\\*|\\+\\+\\+/) !== null",
    "replacement": "spec.match(version === '1' || version === '1.0'\n      ? /[*+][^/]|[^/][*+]/\n      : /\\*[^*/]|\\+[^+/]|[^/*]\\*|[^/+]\\+|\\*\\*\\*|\\+\\+\\+/) === null",
    "promptId": 10,
    "completionId": 9,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 43,
    "originalCode": "spec.match(/[^/]:|:\\/|:$/) !== null",
    "replacement": "spec.match(/[^/]:|:\\/|:$/) === null",
    "promptId": 11,
    "completionId": 10,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 43,
    "originalCode": "spec.match(/[^/]:|:\\/|:$/) !== null",
    "replacement": "spec.match(/[^/]:|:\\/|:$/) !== undefined",
    "promptId": 11,
    "completionId": 10,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 43,
    "originalCode": "spec.match(/[^/]:|:\\/|:$/) !== null",
    "replacement": "spec.match(/[^/]:|:\\/|:$/) !== null && spec.match(/[^/]:|:\\/|:$/) !== undefined",
    "promptId": 11,
    "completionId": 10,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.search",
    "promptId": 12,
    "completionId": 11,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.replace",
    "promptId": 12,
    "completionId": 11,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.split",
    "promptId": 12,
    "completionId": 11,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 19,
    "endLine": 26,
    "endColumn": 33,
    "originalCode": "/[^/]:|:\\/|:$/",
    "replacement": "/[^/]:|:\\/|:$/g",
    "promptId": 13,
    "completionId": 12,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 19,
    "endLine": 26,
    "endColumn": 33,
    "originalCode": "/[^/]:|:\\/|:$/",
    "replacement": "/[^/]:|:\\/|:$/i",
    "promptId": 13,
    "completionId": 12,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 19,
    "endLine": 26,
    "endColumn": 33,
    "originalCode": "/[^/]:|:\\/|:$/",
    "replacement": "/[^/]:|:\\/|:$/m",
    "promptId": 13,
    "completionId": 12,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) === null",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) !== null && spec.match(/^.+\\/$/) !== undefined",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) !== null && spec.match(/^.+\\/$/) !== undefined && spec.match(/^.+\\/$/) !== ''",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.search",
    "promptId": 15,
    "completionId": 14,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.replace",
    "promptId": 15,
    "completionId": 14,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.split",
    "promptId": 15,
    "completionId": 14,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 19,
    "endLine": 29,
    "endColumn": 27,
    "originalCode": "/^.+\\/$/",
    "replacement": "/^.+\\/(?!$)/",
    "promptId": 16,
    "completionId": 15,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 19,
    "endLine": 29,
    "endColumn": 27,
    "originalCode": "/^.+\\/$/",
    "replacement": "/^.+\\/(?!\\/)/",
    "promptId": 16,
    "completionId": 15,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 19,
    "endLine": 29,
    "endColumn": 27,
    "originalCode": "/^.+\\/$/",
    "replacement": "/^.+\\/(?!\\/|$)/",
    "promptId": 16,
    "completionId": 15,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.replace(/[*+][^/]|[^/][*+]/, '')",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.replace(/\\*/g, '')",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.replace(/[*+][^/]|[^/][*+]/, '*')",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.length > 0 && string.endsWith('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.length > 1 || string.endsWith('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 29,
    "endLine": 39,
    "endColumn": 44,
    "originalCode": "string.endsWith",
    "replacement": "string.startsWith",
    "promptId": 20,
    "completionId": 19,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 29,
    "endLine": 39,
    "endColumn": 44,
    "originalCode": "string.endsWith",
    "replacement": "string.includes",
    "promptId": 20,
    "completionId": 19,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 29,
    "endLine": 39,
    "endColumn": 44,
    "originalCode": "string.endsWith",
    "replacement": "string.indexOf",
    "promptId": 20,
    "completionId": 19,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 45,
    "endLine": 39,
    "endColumn": 48,
    "originalCode": "'/'",
    "replacement": "'\\\\'",
    "promptId": 21,
    "completionId": 20,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 45,
    "endLine": 39,
    "endColumn": 48,
    "originalCode": "'/'",
    "replacement": "'/' + '\\\\'",
    "promptId": 21,
    "completionId": 20,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 45,
    "endLine": 39,
    "endColumn": 48,
    "originalCode": "'/'",
    "replacement": "'/' + '\\\\' + '\\\\'",
    "promptId": 21,
    "completionId": 20,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "string.slice(1)",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "string.substring(1)",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "string.substr(1)",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max > 0 && any",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max > 0 || !any",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max > 0 && !any",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "final && opt && min > 1",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "final && opt && min === 1",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "final && opt && min < 2",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "min < 0",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "max < 0",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "min > max",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "false",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "null",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "undefined",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => seg - acc",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => seg.concat(acc)",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => seg.replace(acc, '')",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'\\\\'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'\\\\w+'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'\\\\W+'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 77,
    "originalCode": "parts.reduce((acc, seg) => seg + acc, '$')",
    "replacement": "parts.reduce((acc, seg) => seg + acc, '')",
    "promptId": 32,
    "completionId": 31,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 77,
    "originalCode": "parts.reduce((acc, seg) => seg + acc, '$')",
    "replacement": "parts.reduce((acc, seg) => seg + acc, '^')",
    "promptId": 32,
    "completionId": 31,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 77,
    "originalCode": "parts.reduce((acc, seg) => seg + acc, '$')",
    "replacement": "parts.reduce((acc, seg) => seg + acc, '\\\\')",
    "promptId": 32,
    "completionId": 31,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('/').slice(2).reverse()",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('/').slice(1).reverse().join('/')",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('/').slice(1).reverse().map(part => part.toUpperCase())",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.split('/').slice(1)) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.split('/').slice(2)) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.split('/').slice(1).reverse().join('/')) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "0",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "-1",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "Infinity",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 32,
    "endLine": 92,
    "endColumn": 35,
    "originalCode": "'/'",
    "replacement": "'\\\\'",
    "promptId": 41,
    "completionId": 40,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.slice(0, 1)",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.slice(1)",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.slice(0, -1)",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "part.match(/:.+/) === null",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "part.match(/:.+/) !== null && part.match(/:.+/) !== undefined",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 23,
    "endLine": 111,
    "endColumn": 28,
    "originalCode": "/:.+/",
    "replacement": "/:.*/",
    "promptId": 47,
    "completionId": 46,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 23,
    "endLine": 111,
    "endColumn": 28,
    "originalCode": "/:.+/",
    "replacement": "/:.{1,}/",
    "promptId": 47,
    "completionId": 46,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.slice(2)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.slice(-1)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.slice(0, 2)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/([^/]+)/'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/([^/]+)/g'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/([^/]+)/i'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 21,
    "endLine": 115,
    "endColumn": 58,
    "originalCode": "`/${part.replace(/([.$])/g, '\\\\$1')}`",
    "replacement": "`/${part.replace(/([.$])/g, '\\\\$1')}.*/`",
    "promptId": 55,
    "completionId": 54,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 21,
    "endLine": 115,
    "endColumn": 58,
    "originalCode": "`/${part.replace(/([.$])/g, '\\\\$1')}`",
    "replacement": "`/${part.replace(/([.$])/g, '\\\\$1')}.+/`",
    "promptId": 55,
    "completionId": 54,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 21,
    "endLine": 115,
    "endColumn": 58,
    "originalCode": "`/${part.replace(/([.$])/g, '\\\\$1')}`",
    "replacement": "`/${part.replace(/([.$])/g, '\\\\$1')}.*/i`",
    "promptId": 55,
    "completionId": 54,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 38,
    "endLine": 115,
    "endColumn": 47,
    "originalCode": "/([.$])/g",
    "replacement": "/([^.$])/g",
    "promptId": 57,
    "completionId": 56,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 38,
    "endLine": 115,
    "endColumn": 47,
    "originalCode": "/([.$])/g",
    "replacement": "/([^.$]+)/g",
    "promptId": 57,
    "completionId": 56,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 38,
    "endLine": 115,
    "endColumn": 47,
    "originalCode": "/([.$])/g",
    "replacement": "/([^.$]+?)/g",
    "promptId": 57,
    "completionId": 56,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 49,
    "endLine": 115,
    "endColumn": 55,
    "originalCode": "'\\\\$1'",
    "replacement": "'\\\\$2'",
    "promptId": 58,
    "completionId": 57,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 49,
    "endLine": 115,
    "endColumn": 55,
    "originalCode": "'\\\\$1'",
    "replacement": "'\\\\$0'",
    "promptId": 58,
    "completionId": 57,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 25,
    "endLine": 115,
    "endColumn": 56,
    "originalCode": "part.replace(/([.$])/g, '\\\\$1')",
    "replacement": "part.replace(/([.$])/g, '\\\\$2')",
    "promptId": 59,
    "completionId": 58,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 18,
    "startColumn": 4,
    "endLine": 18,
    "endColumn": 19,
    "originalCode": "this.rules.push",
    "replacement": "this.rules.unshift",
    "promptId": 64,
    "completionId": 63,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 18,
    "startColumn": 4,
    "endLine": 18,
    "endColumn": 19,
    "originalCode": "this.rules.push",
    "replacement": "this.rules = [...rules, ...this.rules]",
    "promptId": 64,
    "completionId": 63,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 32,
    "startColumn": 23,
    "endLine": 32,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.slice()",
    "promptId": 67,
    "completionId": 66,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 32,
    "startColumn": 23,
    "endLine": 32,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.filter(rule => rule.query(path, verb, ctx) === true)",
    "promptId": 67,
    "completionId": 66,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 29,
    "endLine": 33,
    "endColumn": 33,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 70,
    "completionId": 69,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 29,
    "endLine": 33,
    "endColumn": 33,
    "originalCode": "path",
    "replacement": "path.split('/').pop()",
    "promptId": 70,
    "completionId": 69,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 29,
    "endLine": 33,
    "endColumn": 33,
    "originalCode": "path",
    "replacement": "path.replace(/[^\\w]/g, '')",
    "promptId": 70,
    "completionId": 69,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.toLowerCase()",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.length",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.split('')",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "null",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "!ctx",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path, verb, ctx.clone())",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path, verb, ctx.deepClone())",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path, verb, ctx.clone(true))",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "res !== false",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "res === true",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "res !== null",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "res === false",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "res !== true",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "!res",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.slice()",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.filter(rule => rule.matches(path, ctx))",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.map(rule => rule.matches(path, ctx))",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, null)",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.clone())",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.reverse())",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.substring(1)",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.split('/')[0]",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 29,
    "endLine": 49,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "undefined",
    "promptId": 82,
    "completionId": 81,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 29,
    "endLine": 49,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 82,
    "completionId": 81,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.parent)",
    "promptId": 83,
    "completionId": 82,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.parent.parent)",
    "promptId": 83,
    "completionId": 82,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx.parent.parent.parent)",
    "promptId": 83,
    "completionId": 82,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "(rule) => rule.clone(null, false)",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "(rule) => rule.clone(this.name, true)",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "(rule) => rule.clone(this.name, false)",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 23,
    "endLine": 7,
    "endColumn": 56,
    "originalCode": "(policy) => [policy.name, policy]",
    "replacement": "(policy) => [policy.name, policy.name]",
    "promptId": 89,
    "completionId": 88,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 23,
    "endLine": 7,
    "endColumn": 56,
    "originalCode": "(policy) => [policy.name, policy]",
    "replacement": "(policy) => [policy.name, policy.name.toLowerCase()]",
    "promptId": 89,
    "completionId": 88,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 23,
    "endLine": 7,
    "endColumn": 56,
    "originalCode": "(policy) => [policy.name, policy]",
    "replacement": "(policy) => [policy.name, policy.name.split('').reverse().join('')]",
    "promptId": 89,
    "completionId": 88,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.slice(1)",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.filter(policy => policy.name !== 'admin')",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.map(policy => policy.name)",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.name.toLowerCase()",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.name.length",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.name.split(' ')[0]",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "null",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "policy.name",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "policy.query(path, verb, ctx)",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set(policy.name, null)",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set(policy.name, undefined)",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set(policy.name, new Policy())",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 19,
    "endLine": 28,
    "endColumn": 27,
    "originalCode": "this.get",
    "replacement": "this.has",
    "promptId": 97,
    "completionId": 96,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 19,
    "endLine": 28,
    "endColumn": 27,
    "originalCode": "this.get",
    "replacement": "this.set",
    "promptId": 97,
    "completionId": 96,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "\"name\"",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "name.toUpperCase()",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "name.length",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.split('/').pop()",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "verb.toLowerCase()",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "verb.length",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "verb.split('')",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "ctx.verb",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "ctx.path.split('/')[0]",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query(path, verb, ctx.parent)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query(path, verb, ctx.child)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query(path, verb, ctx.sibling)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 19,
    "endLine": 39,
    "endColumn": 27,
    "originalCode": "this.get",
    "replacement": "this.has",
    "promptId": 104,
    "completionId": 103,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 19,
    "endLine": 39,
    "endColumn": 27,
    "originalCode": "this.get",
    "replacement": "this.set",
    "promptId": 104,
    "completionId": 103,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "name.toLowerCase()",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "name.length",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "name.split('')",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 22,
    "originalCode": "policy.matches",
    "replacement": "policy.doesNotMatch",
    "promptId": 106,
    "completionId": 105,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.substring(1)",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.split('/').pop()",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.path",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.verb",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx.path.verb",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path, ctx.parent)",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path, ctx.child)",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path, ctx.sibling)",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.keys()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.values()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.entries()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 26,
    "startColumn": 10,
    "endLine": 26,
    "endColumn": 31,
    "originalCode": "!(verb in this.verbs)",
    "replacement": "verb in this.verbs",
    "promptId": 113,
    "completionId": 112,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 26,
    "startColumn": 10,
    "endLine": 26,
    "endColumn": 31,
    "originalCode": "!(verb in this.verbs)",
    "replacement": "this.verbs[verb]",
    "promptId": 113,
    "completionId": 112,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 26,
    "startColumn": 10,
    "endLine": 26,
    "endColumn": 31,
    "originalCode": "!(verb in this.verbs)",
    "replacement": "!this.verbs[verb]",
    "promptId": 113,
    "completionId": 112,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (let verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "promptId": 114,
    "completionId": 113,
    "reason": "for-of/left"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.slice()",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.filter(verb => verb !== 'GET')",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.map(verb => verb.toUpperCase())",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb of verbs.keys()) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb of verbs.values()) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb of verbs.entries()) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "this.matches(path, ctx) || verb in this.verbs",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "this.matches(path, ctx) && !(verb in this.verbs)",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 20,
    "originalCode": "this.matches",
    "replacement": "!this.matches",
    "promptId": 118,
    "completionId": 117,
    "reason": "call/callee"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.substring(1)",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.split('/').pop()",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "ctx.length",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "ctx[0]",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "ctx.slice(1)",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path.match(this.regex))",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path.match(this.regex) && ctx !== undefined)",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path.match(this.regex) && ctx !== undefined && ctx.props.length > 0)",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 18,
    "endLine": 60,
    "endColumn": 28,
    "originalCode": "path.match",
    "replacement": "path.search",
    "promptId": 122,
    "completionId": 121,
    "reason": "call/callee"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 18,
    "endLine": 60,
    "endColumn": 28,
    "originalCode": "path.match",
    "replacement": "path.replace",
    "promptId": 122,
    "completionId": 121,
    "reason": "call/callee"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 18,
    "endLine": 60,
    "endColumn": 28,
    "originalCode": "path.match",
    "replacement": "path.split",
    "promptId": 122,
    "completionId": 121,
    "reason": "call/callee"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex.test(path)",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex.exec(path)",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex.match(path)",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match === undefined",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match !== null",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match !== undefined",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count < 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count === 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count !== 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "ctx !== undefined",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "ctx.length === 0",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "ctx.props.length === 0",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index <= count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index > count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index == count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index--",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index += 2",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index = 0",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop === null || match[index + 1] !== prop",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop === undefined || match[index + 1] === prop",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop === undefined || match[index + 1] === undefined",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs.slice()",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs.concat()",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs.filter(Boolean)",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 4,
    "endLine": 85,
    "endColumn": 5,
    "originalCode": "for (const verb in this.verbs) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "replacement": "for (const verb in this.verbs.keys()) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "promptId": 134,
    "completionId": 133,
    "reason": "for-in/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 4,
    "endLine": 85,
    "endColumn": 5,
    "originalCode": "for (const verb in this.verbs) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "replacement": "for (const verb in this.verbs.values()) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "promptId": 134,
    "completionId": 133,
    "reason": "for-in/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 4,
    "endLine": 85,
    "endColumn": 5,
    "originalCode": "for (const verb in this.verbs) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "replacement": "for (const verb in this.verbs.entries()) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "promptId": 134,
    "completionId": 133,
    "reason": "for-in/header"
  }
]