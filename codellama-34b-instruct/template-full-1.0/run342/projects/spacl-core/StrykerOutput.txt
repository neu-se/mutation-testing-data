*** using precomputed mutations ***
[32m22:51:35 (2518) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m22:51:35 (2518) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m22:51:35 (2518) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m22:51:36 (2518) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m22:51:36 (2518) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m22:51:36 (2518) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 205 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.matches(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null
Mutant 2 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== spec.length
Mutant 3 in matcher.ts: spec.match replaced with spec.matchRaw
Mutant 4 in matcher.ts: spec.match replaced with !spec.match
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-],*$/
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]+$/
Mutant 7 in matcher.ts: spec.match replaced with spec.search
Mutant 8 in matcher.ts: spec.match replaced with spec.indexOf
Mutant 9 in matcher.ts: spec.match replaced with spec.includes
Mutant 10 in matcher.ts: /^\// replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/
Mutant 11 in matcher.ts: /^\// replaced with /^[a-zA-Z0-9_/:~.$+*-]*/
Mutant 12 in matcher.ts: /^\// replaced with /^[a-zA-Z0-9_/:~.$+*-]+/
Mutant 13 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+]/) !== null
Mutant 14 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+]+/) !== null
Mutant 15 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/^[^/]:|:\/|:$/) !== null
Mutant 16 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match("[&#$*]{3,}") !== null
Mutant 17 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/^[a-zA-Z0-9_]+$/) !== null
Mutant 18 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]+:(?:\/|\/[^/]+)|:\/|:$/
Mutant 19 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]+:(?:\/|\/[^/]+)|:\/[/]|:$/
Mutant 20 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]+:(?:\/|\/[^/]+)|:\/+|:$/
Mutant 21 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/(?!$)/) === null
Mutant 22 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/(?!\/)/) === null
Mutant 23 in matcher.ts: /^.+\/$/ replaced with /^.+?\/$/
Mutant 24 in matcher.ts: /^.+\/$/ replaced with /^. +\/$/
Mutant 25 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.startsWith('/')
Mutant 26 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.charAt(0) === '/'
Mutant 27 in matcher.ts: string.endsWith replaced with string.includes
Mutant 28 in matcher.ts: string.endsWith replaced with string.replace
Mutant 29 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 30 in matcher.ts: '/' replaced with undefined
Mutant 31 in matcher.ts: '/' replaced with ''
Mutant 32 in matcher.ts: '/' replaced with parts[0]
Mutant 33 in matcher.ts: super[Symbol.match] replaced with string
Mutant 34 in matcher.ts: super[Symbol.match] replaced with string[Symbol.match]
Mutant 35 in matcher.ts: super[Symbol.match] replaced with RegExp[Symbol.match]
Mutant 36 in matcher.ts: string replaced with 1
Mutant 37 in matcher.ts: string replaced with undefined
Mutant 38 in matcher.ts: string replaced with null
Mutant 39 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 40 in matcher.ts: max > 0 || any replaced with any && max > 0
Mutant 41 in matcher.ts: max > 0 || any replaced with max === 0 || any
Mutant 42 in matcher.ts: final && opt && min < 1 replaced with false && opt && min < 1
Mutant 43 in matcher.ts: final && opt && min < 1 replaced with true || opt && min < 1
Mutant 44 in matcher.ts: final && opt && min < 1 replaced with opt < 1 ? min < 1 : false && opt && min < 1
Mutant 45 in matcher.ts: min > 0 replaced with min < 0
Mutant 46 in matcher.ts: min > 0 replaced with any >= 0
Mutant 47 in matcher.ts: min > 0 replaced with any < 0
Mutant 48 in matcher.ts: true replaced with false
Mutant 49 in matcher.ts: true replaced with !string.endsWith('/')
Mutant 50 in matcher.ts: true replaced with string.endsWith('$')
Mutant 51 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '')
Mutant 52 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc.concat(seg)
Mutant 53 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc.indexOf(seg) > -1
Mutant 54 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').reverse().slice(1)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 55 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 56 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).map(x => x.reverse())) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 57 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2)
Mutant 58 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').reverse().slice(1)
Mutant 59 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').map(x => x.replace('/', '')).slice(1)
Mutant 60 in matcher.ts: 1 replaced with 0
Mutant 61 in matcher.ts: 1 replaced with -1
Mutant 62 in matcher.ts: part replaced with part + 1
Mutant 63 in matcher.ts: part replaced with part + "a"
Mutant 64 in matcher.ts: part replaced with part.length
Mutant 65 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 66 in matcher.ts: part.match(/:.+/) !== null replaced with part.slice(1).match(/:.+/) !== null
Mutant 67 in matcher.ts: /:.+/ replaced with /:..+/
Mutant 68 in matcher.ts: /:.+/ replaced with /:.+$/
Mutant 69 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 70 in matcher.ts: part.slice(1) replaced with part.slice(0)
Mutant 71 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 72 in matcher.ts: part.slice(1) replaced with part.substr(1)
Mutant 73 in matcher.ts: part.slice replaced with part.sum
Mutant 74 in matcher.ts: 1 replaced with 1 === "1"
Mutant 75 in matcher.ts: 1 replaced with 1 + 1 === 1
Mutant 76 in matcher.ts: 1 replaced with 1 + 1 === "1"
Mutant 77 in matcher.ts: '/([^/]+)' replaced with '/(_+(_/)?)?/'
Mutant 78 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1').toLowerCase()}`
Mutant 79 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1').slice(0, 1)}`
Mutant 80 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$1').split('').reverse().join('')}`
Mutant 81 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '\\$2')
Mutant 82 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '\\$0')
Mutant 83 in matcher.ts: /([.$])/g replaced with /([.[^x]][^b])$/g
Mutant 84 in matcher.ts: '\\$1' replaced with '$0'
Mutant 85 in matcher.ts: '\\$1' replaced with '$42'
Mutant 86 in matcher.ts: '\\$1' replaced with '#'
Mutant 87 in matcher.ts: finalise replaced with finalise + 'this-is-an-extra-string'
Mutant 88 in policy.ts: this.rules.push replaced with this.rules.concat
Mutant 89 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 90 in policy.ts: this.rules.push replaced with this.rules.splice
Mutant 91 in policy.ts: this.rules replaced with this
Mutant 92 in policy.ts: this.rules replaced with this.rules.map(rule => rule)
Mutant 93 in policy.ts: this.rules replaced with [...this.rules]
Mutant 94 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, {
  foo: ctx
})
Mutant 95 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(verb, path, {
  bar: ctx
})
Mutant 96 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(verb, path, {
  baz: ctx
})
Mutant 97 in policy.ts: path replaced with path.split("/").pop()
Mutant 98 in policy.ts: path replaced with path.substring(1)
Mutant 99 in policy.ts: verb replaced with !verb
Mutant 100 in policy.ts: verb replaced with verb + 1
Mutant 101 in policy.ts: verb replaced with verb && true
Mutant 102 in policy.ts: ctx replaced with ctx.query(path, verb)
Mutant 103 in policy.ts: ctx replaced with null
Mutant 104 in policy.ts: ctx replaced with !ctx
Mutant 105 in policy.ts: res === false replaced with res !== false
Mutant 106 in policy.ts: res === false replaced with res === null
Mutant 107 in policy.ts: res === false replaced with res !== true
Mutant 108 in policy.ts: res === true replaced with allow = res
Mutant 109 in policy.ts: res === true replaced with allow ||= res
Mutant 110 in policy.ts: res === true replaced with allow &= res
Mutant 111 in policy.ts: this.rules replaced with this.rule
Mutant 112 in policy.ts: this.rules replaced with this.rules.slice(1)
Mutant 113 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.name === 'name')
Mutant 114 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(ctx)
Mutant 115 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, verb)
Mutant 116 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx, verb)
Mutant 117 in policy.ts: path replaced with path.split('.')[0]
Mutant 118 in policy.ts: path replaced with null
Mutant 119 in policy.ts: path replaced with undefined
Mutant 120 in policy.ts: ctx replaced with !ctx
Mutant 121 in policy.ts: ctx replaced with ctx.name
Mutant 122 in policy.ts: ctx replaced with ctx.actions
Mutant 123 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.type, policy]
Mutant 124 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.type]
Mutant 125 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy * 2]
Mutant 126 in policymap.ts: policies replaced with policies.filter(policy => true)
Mutant 127 in policymap.ts: policies replaced with policies.map(policy => policy.name)
Mutant 128 in policymap.ts: policies replaced with policies.reduce((acc, policy) => acc || policy, [])
Mutant 129 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 130 in policymap.ts: this.set(policy.name, policy) replaced with this.set(null, policy)
Mutant 131 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy)
Mutant 132 in policymap.ts: policy.name replaced with policy.getName()
Mutant 133 in policymap.ts: policy.name replaced with policy.name + "foo"
Mutant 134 in policymap.ts: policy.name replaced with policy.name && "foo"
Mutant 135 in policymap.ts: policy replaced with policy + "foo"
Mutant 136 in policymap.ts: policy replaced with this.set(policy.name, policy)
Mutant 137 in policymap.ts: policy replaced with 5 + policy.name
Mutant 138 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(verb, ctx, path)
Mutant 139 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(verb + path, ctx)
Mutant 140 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path.split('/')[0], ctx)
Mutant 141 in policymap.ts: path replaced with path.toLowerCase()
Mutant 142 in policymap.ts: path replaced with path.split('/').pop()
Mutant 143 in policymap.ts: path replaced with path.indexOf('/')
Mutant 144 in policymap.ts: verb replaced with verb.toLowerCase()
Mutant 145 in policymap.ts: verb replaced with verb + "!"
Mutant 146 in policymap.ts: verb replaced with verb.length
Mutant 147 in policymap.ts: ctx replaced with undefined
Mutant 148 in policymap.ts: ctx replaced with null
Mutant 149 in policymap.ts: ctx replaced with ''
Mutant 150 in policymap.ts: this.get replaced with this.hasOwnProperty
Mutant 151 in policymap.ts: this.get replaced with this.getter
Mutant 152 in policymap.ts: this.get replaced with this.valueOf
Mutant 153 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + ctx)
Mutant 154 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(policy.matches(path, ctx))
Mutant 155 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx, undefined)
Mutant 156 in policymap.ts: policy.matches replaced with !policy.matches
Mutant 157 in policymap.ts: policy.matches replaced with policy.matches && policy.isActive
Mutant 158 in policymap.ts: policy.matches replaced with policy.matches || policy.isActive
Mutant 159 in policymap.ts: ctx replaced with ctx.log(...ctx.arguments)
Mutant 160 in policymap.ts: ctx replaced with console.log(Math.random())
Mutant 161 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const x of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 162 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.reverse()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 163 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.filter(verb => verb.length > 0)) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 164 in rule.ts: verbs replaced with this.verbs = {
  'GET': true,
  'POST': true,
  'PUT': false,
  'DELETE': false,
  'OPTIONS': true
}
Mutant 165 in rule.ts: verbs replaced with this.verbs = {}
Mutant 166 in rule.ts: verbs replaced with this.verbs = {
  '*': true
}
Mutant 167 in rule.ts: !(verb in this.verbs) replaced with !(verb in this.verbs) === false
Mutant 168 in rule.ts: !(verb in this.verbs) replaced with verb !== 'foo'
Mutant 169 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of this.verbs) {
  this.verbs[verb] = false;
}
Mutant 170 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.slice()) {
  this.verbs[verb] = false;
}
Mutant 171 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.reverse()) {
  this.verbs[verb] = false;
}
Mutant 172 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) != verb in this.verbs
Mutant 173 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.matches(path, ctx)
Mutant 174 in rule.ts: this.matches replaced with this.regex.match
Mutant 175 in rule.ts: path replaced with path.slice(1)
Mutant 176 in rule.ts: path replaced with path.toLowerCase()
Mutant 177 in rule.ts: path replaced with path.split()
Mutant 178 in rule.ts: ctx replaced with ctx[path]
Mutant 179 in rule.ts: ctx replaced with path.substring(1)
Mutant 180 in rule.ts: ctx replaced with path[ctx.length - 1]
Mutant 181 in rule.ts: path.match replaced with path.search
Mutant 182 in rule.ts: path.match replaced with path.replace
Mutant 183 in rule.ts: this.regex replaced with this.regex.exec(path)
Mutant 184 in rule.ts: this.regex replaced with this.regex.prototype.method()
Mutant 185 in rule.ts: this.regex replaced with this.regex.source
Mutant 186 in rule.ts: count > 0 replaced with count < 0
Mutant 187 in rule.ts: count > 0 replaced with count > 1
Mutant 188 in rule.ts: count > 0 replaced with !count
Mutant 189 in rule.ts: ctx === undefined replaced with ctx === null
Mutant 190 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 191 in rule.ts: ctx === undefined replaced with !ctx
Mutant 192 in rule.ts: index < count replaced with index > count
Mutant 193 in rule.ts: index < count replaced with index <= count
Mutant 194 in rule.ts: index < count replaced with count <= index
Mutant 195 in rule.ts: index++ replaced with index--
Mutant 196 in rule.ts: index++ replaced with index += 2
Mutant 197 in rule.ts: index++ replaced with index = match.length - index
Mutant 198 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] === prop
Mutant 199 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined || match[index + 1] !== prop
Mutant 200 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined && match[index + 1] === prop
Mutant 201 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const foo in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 202 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (let verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 203 in rule.ts: this.verbs replaced with null
Mutant 204 in rule.ts: this.verbs replaced with {}
[32m22:51:36 (2518) INFO Instrumenter[39m Instrumented 6 source file(s) with 205 mutant(s)
[32m22:51:36 (2518) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m22:51:37 (2518) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m22:51:37 (2518) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m22:51:42 (2518) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4195 ms, overhead 1 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~16m) 2/205 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~13m) 5/205 tested (0 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~12m) 8/205 tested (1 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~11m) 11/205 tested (1 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~11m) 14/205 tested (1 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~11m) 17/205 tested (2 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~10m) 20/205 tested (4 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~10m) 23/205 tested (5 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~10m) 26/205 tested (6 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~10m) 29/205 tested (6 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~9m) 32/205 tested (8 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~9m) 35/205 tested (8 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~9m) 38/205 tested (8 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~9m) 41/205 tested (8 survived, 0 timed out)
Mutation testing 21% (elapsed: ~2m, remaining: ~9m) 44/205 tested (8 survived, 0 timed out)
Mutation testing 22% (elapsed: ~2m, remaining: ~8m) 47/205 tested (9 survived, 0 timed out)
Mutation testing 24% (elapsed: ~2m, remaining: ~8m) 50/205 tested (9 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~8m) 53/205 tested (9 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~8m) 56/205 tested (9 survived, 0 timed out)
Mutation testing 28% (elapsed: ~3m, remaining: ~8m) 59/205 tested (9 survived, 0 timed out)
Mutation testing 30% (elapsed: ~3m, remaining: ~8m) 62/205 tested (9 survived, 0 timed out)
Mutation testing 31% (elapsed: ~3m, remaining: ~7m) 65/205 tested (9 survived, 0 timed out)
Mutation testing 33% (elapsed: ~3m, remaining: ~7m) 68/205 tested (9 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~7m) 71/205 tested (11 survived, 0 timed out)
Mutation testing 36% (elapsed: ~4m, remaining: ~7m) 74/205 tested (12 survived, 0 timed out)
Mutation testing 37% (elapsed: ~4m, remaining: ~7m) 77/205 tested (12 survived, 0 timed out)
Mutation testing 39% (elapsed: ~4m, remaining: ~7m) 80/205 tested (13 survived, 0 timed out)
Mutation testing 40% (elapsed: ~4m, remaining: ~6m) 83/205 tested (13 survived, 0 timed out)
Mutation testing 41% (elapsed: ~4m, remaining: ~6m) 86/205 tested (13 survived, 0 timed out)
Mutation testing 43% (elapsed: ~5m, remaining: ~6m) 89/205 tested (13 survived, 0 timed out)
Mutation testing 44% (elapsed: ~5m, remaining: ~6m) 92/205 tested (14 survived, 0 timed out)
Mutation testing 46% (elapsed: ~5m, remaining: ~6m) 96/205 tested (16 survived, 0 timed out)
Mutation testing 48% (elapsed: ~5m, remaining: ~5m) 99/205 tested (16 survived, 0 timed out)
Mutation testing 49% (elapsed: ~5m, remaining: ~5m) 102/205 tested (16 survived, 0 timed out)
Mutation testing 51% (elapsed: ~5m, remaining: ~5m) 105/205 tested (16 survived, 0 timed out)
Mutation testing 52% (elapsed: ~6m, remaining: ~5m) 108/205 tested (16 survived, 0 timed out)
Mutation testing 54% (elapsed: ~6m, remaining: ~5m) 111/205 tested (17 survived, 0 timed out)
Mutation testing 55% (elapsed: ~6m, remaining: ~5m) 114/205 tested (17 survived, 0 timed out)
Mutation testing 57% (elapsed: ~6m, remaining: ~4m) 117/205 tested (17 survived, 0 timed out)
Mutation testing 58% (elapsed: ~6m, remaining: ~4m) 120/205 tested (18 survived, 0 timed out)
Mutation testing 60% (elapsed: ~6m, remaining: ~4m) 123/205 tested (18 survived, 0 timed out)
Mutation testing 61% (elapsed: ~7m, remaining: ~4m) 126/205 tested (18 survived, 0 timed out)
Mutation testing 62% (elapsed: ~7m, remaining: ~4m) 129/205 tested (19 survived, 0 timed out)
Mutation testing 64% (elapsed: ~7m, remaining: ~3m) 133/205 tested (19 survived, 0 timed out)
Mutation testing 66% (elapsed: ~7m, remaining: ~3m) 136/205 tested (19 survived, 0 timed out)
Mutation testing 67% (elapsed: ~7m, remaining: ~3m) 139/205 tested (19 survived, 0 timed out)
Mutation testing 69% (elapsed: ~7m, remaining: ~3m) 142/205 tested (20 survived, 0 timed out)
Mutation testing 70% (elapsed: ~8m, remaining: ~3m) 145/205 tested (21 survived, 0 timed out)
Mutation testing 72% (elapsed: ~8m, remaining: ~3m) 148/205 tested (21 survived, 0 timed out)
Mutation testing 73% (elapsed: ~8m, remaining: ~2m) 151/205 tested (21 survived, 0 timed out)
Mutation testing 75% (elapsed: ~8m, remaining: ~2m) 154/205 tested (21 survived, 0 timed out)
Mutation testing 76% (elapsed: ~8m, remaining: ~2m) 157/205 tested (22 survived, 0 timed out)
Mutation testing 78% (elapsed: ~8m, remaining: ~2m) 160/205 tested (22 survived, 0 timed out)
Mutation testing 80% (elapsed: ~9m, remaining: ~2m) 164/205 tested (24 survived, 0 timed out)
Mutation testing 81% (elapsed: ~9m, remaining: ~2m) 167/205 tested (24 survived, 0 timed out)
Mutation testing 82% (elapsed: ~9m, remaining: ~1m) 170/205 tested (24 survived, 0 timed out)
Mutation testing 84% (elapsed: ~9m, remaining: ~1m) 173/205 tested (26 survived, 0 timed out)
Mutation testing 85% (elapsed: ~9m, remaining: ~1m) 176/205 tested (26 survived, 0 timed out)
Mutation testing 87% (elapsed: ~9m, remaining: ~1m) 179/205 tested (27 survived, 0 timed out)
Mutation testing 88% (elapsed: ~10m, remaining: ~1m) 182/205 tested (27 survived, 0 timed out)
Mutation testing 90% (elapsed: ~10m, remaining: ~1m) 185/205 tested (27 survived, 0 timed out)
Mutation testing 91% (elapsed: ~10m, remaining: <1m) 188/205 tested (28 survived, 0 timed out)
Mutation testing 93% (elapsed: ~10m, remaining: <1m) 191/205 tested (28 survived, 0 timed out)
Mutation testing 94% (elapsed: ~10m, remaining: <1m) 194/205 tested (29 survived, 0 timed out)
Mutation testing 96% (elapsed: ~10m, remaining: <1m) 197/205 tested (30 survived, 0 timed out)
Mutation testing 97% (elapsed: ~11m, remaining: <1m) 200/205 tested (31 survived, 0 timed out)
Mutation testing 99% (elapsed: ~11m, remaining: <1m) 203/205 tested (32 survived, 0 timed out)

All tests
  ✓ All tests (killed 173)

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]+$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:9
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/^[^/]:|:\/|:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]+:(?:\/|\/[^/]+)|:\/|:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]+:(?:\/|\/[^/]+)|:\/[/]|:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]+:(?:\/|\/[^/]+)|:\/+|:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:29:20
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+?\/$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith(undefined)) {

[Survived] PrecomputedMutator
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (any >= 0) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.+$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substr(1))

[Survived] PrecomputedMutator
src/matcher.ts:115:22
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
+             parts.push(`/${part.replace(/([.$])/g, '\\$1').toLowerCase()}`)

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.map(rule => rule)) {

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of [...this.rules]) {

[Survived] PrecomputedMutator
src/policy.ts:37:11
-         if (res === true) {
+         if (allow ||= res) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.split('.')[0], ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.filter(policy => true)) {

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:30:28
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policymap.ts:41:9
-         ? policy.matches(path, ctx)
+         ? policy.matches(path, ctx, undefined)

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.reverse()) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.filter(verb => verb.length > 0)) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.slice()) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.reverse()) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:60:30
-       const match = path.match(this.regex)
+       const match = path.match(this.regex.source)

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (!ctx) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index = match.length - index) {

[Survived] PrecomputedMutator
src/rule.ts:83:5
-       for (const verb in this.verbs) {
-         rule.verbs[verb] = this.verbs[verb]
-       }
+       for (let verb in this.verbs) {
+     rule.verbs[verb] = this.verbs[verb];
+   }

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   84.39 |      173 |         0 |         32 |        0 |        0 |
 matcher.ts   |   85.23 |       75 |         0 |         13 |        0 |        0 |
 policy.ts    |   85.71 |       30 |         0 |          5 |        0 |        0 |
 policymap.ts |   89.47 |       34 |         0 |          4 |        0 |        0 |
 rule.ts      |   77.27 |       34 |         0 |         10 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m23:02:56 (2518) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m23:02:56 (2518) INFO MutationTestExecutor[39m Done in 11 minutes 20 seconds.

real	11m22.256s
user	15m28.358s
sys	1m7.487s
