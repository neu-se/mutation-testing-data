{"files":{"index.js":{"language":"javascript","mutants":[{"id":"2","mutatorName":"BooleanLiteral","replacement":"options.url","status":"Timeout","location":{"end":{"column":19,"line":5},"start":{"column":7,"line":5}}},{"id":"3","mutatorName":"ConditionalExpression","replacement":"true","status":"Timeout","location":{"end":{"column":19,"line":5},"start":{"column":7,"line":5}}},{"id":"4","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","location":{"end":{"column":19,"line":5},"start":{"column":7,"line":5}}},{"id":"0","mutatorName":"BooleanLiteral","replacement":"false","status":"Timeout","location":{"end":{"column":49,"line":4},"start":{"column":45,"line":4}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":2,"line":29},"start":{"column":73,"line":4}}},{"id":"5","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":4,"line":7},"start":{"column":21,"line":5}}},{"id":"6","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":66,"line":6},"start":{"column":37,"line":6}}},{"id":"12","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (15 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✓ should succeed with HTTPS (7 ms)\n    ✓ should save image with the decoded filename (5 ms)\n    ✓ should save image with an another filename (5 ms)\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (5 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (14 ms)\n    ✓ #29 - 301 status code while downloading image (8 ms)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    ENOTDIR: not a directory, open '/tmp/image-newname/image-success.jpg'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   89.05 |    55.19 |   89.28 |   90.76 |                   \n\n sandbox7984447     |   96.42 |    61.17 |     100 |   96.36 |                   \n\n  index.js          |   96.42 |    61.17 |     100 |   96.36 | 24,39             \n\n sandbox7984447/lib |   83.95 |       50 |   85.71 |   86.66 |                   \n\n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n\n  request.js        |      84 |    52.23 |   78.57 |   88.88 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.49 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":13},"start":{"column":7,"line":13}}},{"id":"10","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true\n    ✕ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (26 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (5 ms)\n    ✓ should save image with the decoded filename (5 ms)\n    ✓ should save image with an another filename (6 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n    ✓ should failed with an error (3 ms)\n    ✓ should save image with a complex url params (6 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (9 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n  ● options › should failed with !options.dest === true\n\n    TypeError: The \"path\" argument must be of type string. Received null\n\n      77 |       } else {\n      78 |         stryCov_9fa48(\"14\");\n    > 79 |         if (stryMutAct_9fa48(\"17\") ? false : stryMutAct_9fa48(\"16\") ? true : stryMutAct_9fa48(\"15\") ? path.extname(options.dest) : (stryCov_9fa48(\"15\", \"16\", \"17\"), !path.extname(options.dest))) {\n         |                                                                                                                                                                            ^\n      80 |           if (stryMutAct_9fa48(\"18\")) {\n      81 |             {}\n      82 |           } else {\n\n      at Object.extname [as image] (index.js:79:172)\n      at Object.image (test/index.js:58:14)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   87.59 |    55.19 |   89.28 |   89.23 |                   \n\n sandbox7984447     |   92.85 |    61.17 |     100 |   92.72 |                   \n\n  index.js          |   92.85 |    61.17 |     100 |   92.72 | 24,39,70-71       \n\n sandbox7984447/lib |   83.95 |       50 |   85.71 |   86.66 |                   \n\n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n\n  request.js        |      84 |    52.23 |   78.57 |   88.88 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.567 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":11},"start":{"column":22,"line":9}}},{"id":"11","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":67,"line":10},"start":{"column":37,"line":10}}},{"id":"9","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✕ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (14 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (5 ms)\n    ✓ should save image with the decoded filename (5 ms)\n    ✓ should save image with an another filename (6 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (8 ms)\n\n    ✓ should failed with an error (4 ms)\n    ✓ should save image with a complex url params (7 ms)\n\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (7 ms)\n\n    ✓ #29 - 301 status code while downloading image (8 ms)\n\n\n\n  ● options › should failed with !options.dest === true\n\n    TypeError: The \"path\" argument must be of type string. Received null\n\n      77 |       } else {\n      78 |         stryCov_9fa48(\"14\");\n    > 79 |         if (stryMutAct_9fa48(\"17\") ? false : stryMutAct_9fa48(\"16\") ? true : stryMutAct_9fa48(\"15\") ? path.extname(options.dest) : (stryCov_9fa48(\"15\", \"16\", \"17\"), !path.extname(options.dest))) {\n         |                                                                                                                                                                            ^\n      80 |           if (stryMutAct_9fa48(\"18\")) {\n      81 |             {}\n      82 |           } else {\n\n      at Object.extname [as image] (index.js:79:172)\n      at Object.image (test/index.js:58:14)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   86.86 |       53 |   89.28 |   88.46 |                   \n\n sandbox7984447     |   91.07 |    56.47 |     100 |    90.9 |                   \n\n  index.js          |   91.07 |    56.47 |     100 |    90.9 | 24,39,67-71       \n\n sandbox7984447/lib |   83.95 |       50 |   85.71 |   86.66 |                   \n\n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n\n  request.js        |      84 |    52.23 |   78.57 |   88.88 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.605 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":9},"start":{"column":7,"line":9}}},{"id":"13","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true (1 ms)\n  download an image\n    ✕ should save image with the original filename (16 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (3 ms)\n    ✕ should save image with the decoded filename (2 ms)\n    ✓ should save image with an another filename (6 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (8 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (2 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (6 ms)\n    ✓ #29 - 301 status code while downloading image (8 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   81.75 |    50.81 |   89.28 |   83.07 |                   \n sandbox7984447     |   78.57 |    51.76 |     100 |   78.18 |                   \n  index.js          |   78.57 |    51.76 |     100 |   78.18 | 24,39,75-88       \n sandbox7984447/lib |   83.95 |       50 |   85.71 |   86.66 |                   \n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n  request.js        |      84 |    52.23 |   78.57 |   88.88 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.484 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":13},"start":{"column":7,"line":13}}},{"id":"8","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.283 s)\n\n  options\n\n    ✓ should failed with !options.url === true (2 ms)\n    ✓ should failed with !options.dest === true (1 ms)\n  download an image\n    ✕ should save image with the original filename\n\n    ✕ should failed with too short timeout (4995 ms)\n    ✕ should succeed with HTTPS\n    ✕ should save image with the decoded filename\n\n    ✕ should save image with an another filename\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension\n    ✓ should failed with an error\n    ✕ should save image with a complex url params\n\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot\n    ✕ #29 - 301 status code while downloading image (1 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: Error\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   52.55 |    30.05 |   53.57 |   53.84 |                   \n\n sandbox7984447     |   67.85 |       40 |     100 |   67.27 |                   \n\n  index.js          |   67.85 |       40 |     100 |   67.27 | 24,39,74-101      \n\n sandbox7984447/lib |   41.97 |    21.42 |   38.09 |      44 |                   \n  TimeoutError.js   |    25.8 |    22.58 |   28.57 |   26.66 | 6,16-54           \n\n  request.js        |      52 |    20.89 |   42.85 |   55.55 | 6,24,38-41,62-88  \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        5.459 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":9},"start":{"column":7,"line":9}}},{"id":"7","mutatorName":"BooleanLiteral","replacement":"options.dest","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.3 s)\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✕ should failed with !options.dest === true (1 ms)\n  download an image\n    ✕ should save image with the original filename (1 ms)\n    ✕ should failed with too short timeout (4996 ms)\n    ✕ should succeed with HTTPS\n    ✕ should save image with the decoded filename (1 ms)\n    ✕ should save image with an another filename\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension\n    ✓ should failed with an error (1 ms)\n    ✕ should save image with a complex url params\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot\n    ✕ #29 - 301 status code while downloading image\n\n  ● options › should failed with !options.dest === true\n\n    TypeError: The \"path\" argument must be of type string. Received null\n\n      77 |       } else {\n      78 |         stryCov_9fa48(\"14\");\n    > 79 |         if (stryMutAct_9fa48(\"17\") ? false : stryMutAct_9fa48(\"16\") ? true : stryMutAct_9fa48(\"15\") ? path.extname(options.dest) : (stryCov_9fa48(\"15\", \"16\", \"17\"), !path.extname(options.dest))) {\n         |                                                                                                                                                                            ^\n      80 |           if (stryMutAct_9fa48(\"18\")) {\n      81 |             {}\n      82 |           } else {\n\n      at Object.extname [as image] (index.js:79:172)\n      at Object.image (test/index.js:58:14)\n\n  ● download an image › should save image with the original filename\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: Error\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    The options.dest is required\n\n      69 |       } else {\n      70 |         stryCov_9fa48(\"10\");\n    > 71 |         return Promise.reject(new Error(stryMutAct_9fa48(\"11\") ? \"\" : (stryCov_9fa48(\"11\"), 'The options.dest is required')));\n         |                               ^\n      72 |       }\n      73 |     }\n      74 |     if (stryMutAct_9fa48(\"13\") ? false : stryMutAct_9fa48(\"12\") ? true : (stryCov_9fa48(\"12\", \"13\"), extractFilename)) {\n\n      at Object.<anonymous>.module.exports.image (index.js:71:31)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   55.47 |    34.97 |   53.57 |   56.92 |                   \n\n sandbox7984447     |      75 |    50.58 |     100 |   74.54 |                   \n  index.js          |      75 |    50.58 |     100 |   74.54 | 24,39,80-101      \n sandbox7984447/lib |   41.97 |    21.42 |   38.09 |      44 |                   \n  TimeoutError.js   |    25.8 |    22.58 |   28.57 |   26.66 | 6,16-54           \n  request.js        |      52 |    20.89 |   42.85 |   55.55 | 6,24,38-41,62-88  \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 2 passed, 12 total\nSnapshots:   0 total\nTime:        5.541 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":9},"start":{"column":7,"line":9}}},{"id":"18","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":6,"line":21},"start":{"column":38,"line":14}}},{"id":"19","mutatorName":"BooleanLiteral","replacement":"path.isAbsolute(options.dest)","status":"Timeout","location":{"end":{"column":37,"line":24},"start":{"column":7,"line":24}}},{"id":"14","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":4,"line":22},"start":{"column":24,"line":13}}},{"id":"16","mutatorName":"ConditionalExpression","replacement":"true","status":"Timeout","location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}}},{"id":"20","mutatorName":"ConditionalExpression","replacement":"true","status":"Timeout","location":{"end":{"column":37,"line":24},"start":{"column":7,"line":24}}},{"id":"17","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}}},{"id":"15","mutatorName":"BooleanLiteral","replacement":"path.extname(options.dest)","status":"Timeout","location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}}},{"id":"22","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":4,"line":26},"start":{"column":39,"line":24}}},{"id":"21","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":37,"line":24},"start":{"column":7,"line":24}}}],"source":"const path = require('path');\nconst request = require('./lib/request');\n\nmodule.exports.image = ({ extractFilename = true, ...options } = {}) => {\n  if (!options.url) {\n    return Promise.reject(new Error('The options.url is required'));\n  }\n\n  if (!options.dest) {\n    return Promise.reject(new Error('The options.dest is required'));\n  }\n\n  if (extractFilename) {\n    if (!path.extname(options.dest)) {\n      const url = new URL(options.url);\n      const pathname = url.pathname;\n      const basename = path.basename(pathname);\n      const decodedBasename = decodeURIComponent(basename);\n\n      options.dest = path.join(options.dest, decodedBasename);\n    }\n  }\n\n  if (!path.isAbsolute(options.dest)) {\n    options.dest = path.resolve(__dirname, options.dest);\n  }\n\n  return request(options);\n};\n"},"lib/request.js":{"language":"javascript","mutants":[{"id":"25","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename\n    ✕ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS\n    ✕ should save image with the decoded filename\n\n    ✕ should save image with an another filename\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension\n\n    ✕ should failed with an error\n    ✕ should save image with a complex url params\n\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot\n    ✕ #29 - 301 status code while downloading image\n\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      64 | describe('download an image', () => {\n      65 |   it('should save image with the original filename', () => {\n    > 66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n         |                                                                                           ^\n      67 |       expect(filename).toEqual('/tmp/image success.png');\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n\n      at Object.<anonymous> (test/index.js:66:91)\n\n  ● download an image › should failed with too short timeout\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      71 |\n      72 |   it('should failed with too short timeout', (done) => {\n    > 73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n         |                                                                                                  ^\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n      76 |         expect(err).toBeInstanceOf(TimeoutError);\n\n      at Object.<anonymous> (test/index.js:73:98)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      80 |\n      81 |   it('should succeed with HTTPS', () => {\n    > 82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n         |                                                                                            ^\n      83 |       expect(filename).toEqual('/tmp/image success.png');\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n\n      at Object.<anonymous> (test/index.js:82:92)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      87 |\n      88 |   it('should save image with the decoded filename', () => {\n    > 89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n         |                                                                                         ^\n      90 |       expect(filename).toEqual('/tmp/image-success.png');\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      92 |     });\n\n      at Object.<anonymous> (test/index.js:89:89)\n\n  ● download an image › should save image with an another filename\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      94 |\n      95 |   it('should save image with an another filename', () => {\n    > 96 |     return download.image({ url: 'http://someurl.com/image-success.jpg', dest: '/tmp/image-newname.jpg' }).then(({ filename }) => {\n         |                                                                                                           ^\n      97 |       expect(filename).toEqual('/tmp/image-newname.jpg');\n      98 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      99 |     });\n\n      at Object.<anonymous> (test/index.js:96:107)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      107 |     };\n      108 |\n    > 109 |     return download.image(options).then(({ filename }) => {\n          |                                   ^\n      110 |       expect(filename).toEqual('/tmp/image-newname');\n      111 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      112 |     });\n\n      at Object.<anonymous> (test/index.js:109:35)\n\n  ● download an image › should failed with an error\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      114 |\n      115 |   it('should failed with an error', (done) => {\n    > 116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n          |                                                                                ^\n      117 |       .then(() => done(new Error('Should throw an error')))\n      118 |       .catch((err) => {\n      119 |         expect(err).toBeInstanceOf(Error);\n\n      at Object.<anonymous> (test/index.js:116:80)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      128 |     };\n      129 |\n    > 130 |     return download.image(options).then(({ filename }) => {\n          |                                   ^\n      131 |       expect(filename).toBeDefined();\n      132 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      133 |     });\n\n      at Object.<anonymous> (test/index.js:130:35)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      137 | describe('Issues', () => {\n      138 |   it('#27 - dest: directory cannot contain a dot', () => {\n    > 139 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: './test/fixtures/someurl.com' }).then(({ filename }) => {\n          |                                                                                                                ^\n      140 |       expect(filename).toMatch(/test\\/fixtures\\/someurl\\.com$/);\n      141 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      142 |     });\n\n      at Object.<anonymous> (test/index.js:139:112)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    TypeError: Cannot read properties of undefined (reading 'then')\n\n      144 |\n      145 |   it('#29 - 301 status code while downloading image', () => {\n    > 146 |     return download.image({ url: 'http://cdn.shopify.com/s/files/1/0516/7244/9178/products/SteelCutOats1.jpg', dest: '/tmp/SteelCutOats1.jpg' }).then(({ filename }) => {\n          |                                                                                                                                                 ^\n      147 |       expect(filename).toMatch(/tmp\\/SteelCutOats1\\.jpg$/);\n      148 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      149 |     });\n\n      at Object.<anonymous> (test/index.js:146:145)\n\n\n--------------------|---------|----------|---------|---------|---------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   \n--------------------|---------|----------|---------|---------|---------------------\n\nAll files           |   56.93 |     37.7 |      50 |   58.46 |                     \n\n sandbox7984447     |   92.85 |       60 |     100 |   92.72 |                     \n  index.js          |   92.85 |       60 |     100 |   92.72 | 24,38-41            \n\n sandbox7984447/lib |   32.09 |    18.36 |   33.33 |   33.33 |                     \n\n  TimeoutError.js   |    25.8 |    22.58 |   28.57 |   26.66 | 6,16-54             \n\n  request.js        |      36 |    16.41 |   35.71 |   37.77 | 6,16-32,39,43,62-88 \n\n--------------------|---------|----------|---------|---------|---------------------\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 2 passed, 12 total\nSnapshots:   0 total\nTime:        0.349 s, estimated 1 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":3,"line":25},"start":{"column":18,"line":5}}},{"id":"27","mutatorName":"MethodExpression","replacement":"url.trimLeft().endsWith('https')","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.315 s)\n  options\n    ✓ should failed with !options.url === true\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (11 ms)\n    ✕ should failed with too short timeout (4997 ms)\n    ✕ should succeed with HTTPS (1 ms)\n    ✓ should save image with the decoded filename (3 ms)\n    ✓ should save image with an another filename (2 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: AssertionError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"http:\"\n    Received:\n      \"https:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - http:\n    + https:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:82:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   75.18 |    50.81 |   67.85 |   76.92 |                   \n\n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n\n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n\n sandbox7984447/lib |   62.96 |    43.87 |   57.14 |   65.33 |                   \n\n  TimeoutError.js   |    25.8 |    22.58 |   28.57 |   26.66 | 6,16-54           \n\n  request.js        |      86 |    53.73 |   71.42 |   91.11 | 6,24,39,88        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 10 passed, 12 total\nSnapshots:   0 total\nTime:        5.537 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":53,"line":6},"start":{"column":19,"line":6}}},{"id":"28","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.178 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (8 ms)\n    ✓ should failed with too short timeout (3 ms)\n\n    ✓ should succeed with HTTPS (7 ms)\n    ✕ should save image with the decoded filename\n    ✕ should save image with an another filename (1 ms)\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension\n    ✕ should failed with an error (4997 ms)\n    ✕ should save image with a complex url params (3 ms)\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (4 ms)\n    ✕ #29 - 301 status code while downloading image\n\n\n  ● download an image › should save image with the original filename\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should save image with the decoded filename\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should failed with an error\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: Error\n    Received constructor: AssertionError\n\n      117 |       .then(() => done(new Error('Should throw an error')))\n      118 |       .catch((err) => {\n    > 119 |         expect(err).toBeInstanceOf(Error);\n          |                     ^\n      120 |         done();\n      121 |       });\n      122 |   });\n\n      at toBeInstanceOf (test/index.js:119:21)\n\n  ● download an image › should failed with an error\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      113 |   });\n      114 |\n    > 115 |   it('should failed with an error', (done) => {\n          |   ^\n      116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n      117 |       .then(() => done(new Error('Should throw an error')))\n      118 |       .catch((err) => {\n\n      at it (test/index.js:115:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should save image with a complex url params\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      66 |     stryCov_9fa48(\"26\");\n      67 |     const request = (stryMutAct_9fa48(\"27\") ? url.trimLeft().endsWith('https') : (stryCov_9fa48(\"27\"), url.trimLeft().starts\nWith(stryMutAct_9fa48(\"28\") ? \"\" : (stryCov_9fa48(\"28\"), 'https')))) ? https : http;\n    > 68 |     request.get(url, options, res => {\n         |             ^\n      69 |       if (stryMutAct_9fa48(\"29\")) {\n      70 |         {}\n      71 |       } else {\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:68:13)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:101:12)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    85.4 |       53 |   89.28 |   86.92 |                   \n\n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n\n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n\n sandbox7984447/lib |   80.24 |    47.95 |   85.71 |   82.66 |                   \n\n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n\n  request.js        |      78 |    49.25 |   78.57 |   82.22 | 6,24,39,74-81     \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        5.282 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":52,"line":6},"start":{"column":45,"line":6}}},{"id":"31","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (2 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (11 ms)\n    ✓ should failed with too short timeout (1 ms)\n\n    ✓ should succeed with HTTPS (6 ms)\n    ✓ should save image with the decoded filename (3 ms)\n\n    ✓ should save image with an another filename (5 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n    ✕ should failed with an error (8 ms)\n\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n\n\n  ● download an image › should failed with an error\n\n    Should throw an error\n\n      115 |   it('should failed with an error', (done) => {\n      116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n    > 117 |       .then(() => done(new Error('Should throw an error')))\n          |                        ^\n      118 |       .catch((err) => {\n      119 |         expect(err).toBeInstanceOf(Error);\n      120 |         done();\n\n      at test/index.js:117:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |    85.4 |       53 |   89.28 |   86.92 |                   \n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n sandbox7984447/lib |   80.24 |    47.95 |   85.71 |   82.66 |                   \n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n  request.js        |      78 |    49.25 |   78.57 |   82.22 | 6,24,39,74-81     \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.518 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":33,"line":10},"start":{"column":11,"line":10}}},{"id":"30","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename (5 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✕ should succeed with HTTPS (3 ms)\n    ✕ should save image with the decoded filename (2 ms)\n\n    ✕ should save image with an another filename (1 ms)\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (2 ms)\n    ✓ should failed with an error (2 ms)\n\n    ✕ should save image with a complex url params (2 ms)\n\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n    ✕ #29 - 301 status code while downloading image (4 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should succeed with HTTPS\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with the decoded filename\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with an another filename\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with a complex url params\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   87.59 |       53 |   85.71 |      90 |                   \n\n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n\n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n\n sandbox7984447/lib |   83.95 |    47.95 |   80.95 |      88 |                   \n\n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n\n  request.js        |      84 |    49.25 |   71.42 |   91.11 | 6,24,39,84        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.471 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":33,"line":10},"start":{"column":11,"line":10}}},{"id":"33","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✓ should save image with the original filename (10 ms)\n    ✓ should failed with too short timeout (2 ms)\n\n    ✓ should succeed with HTTPS (5 ms)\n    ✓ should save image with the decoded filename (5 ms)\n\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✕ should failed with an error (8 ms)\n\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (47 ms)\n\n\n\n  ● download an image › should failed with an error\n\n    Should throw an error\n\n      115 |   it('should failed with an error', (done) => {\n      116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n    > 117 |       .then(() => done(new Error('Should throw an error')))\n          |                        ^\n      118 |       .catch((err) => {\n      119 |         expect(err).toBeInstanceOf(Error);\n      120 |         done();\n\n      at test/index.js:117:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   86.13 |    54.64 |   89.28 |   87.69 |                   \n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n sandbox7984447/lib |   81.48 |    51.02 |   85.71 |      84 |                   \n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n  request.js        |      80 |    53.73 |   78.57 |   84.44 | 6,24,39,77-81     \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.506 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":8,"line":17},"start":{"column":35,"line":10}}},{"id":"32","mutatorName":"EqualityOperator","replacement":"res.statusCode === 200","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (8 ms)\n    ✓ should failed with too short timeout (2 ms)\n\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (2 ms)\n\n    ✕ should save image with an another filename (2 ms)\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (2 ms)\n\n    ✕ should failed with an error (5 ms)\n\n    ✕ should save image with a complex url params (1 ms)\n\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (3 ms)\n\n    ✕ #29 - 301 status code while downloading image (4 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should succeed with HTTPS\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with the decoded filename\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with an another filename\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should failed with an error\n\n    Should throw an error\n\n      115 |   it('should failed with an error', (done) => {\n      116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n    > 117 |       .then(() => done(new Error('Should throw an error')))\n          |                        ^\n      118 |       .catch((err) => {\n      119 |         expect(err).toBeInstanceOf(Error);\n      120 |         done();\n\n      at test/index.js:117:24\n\n  ● download an image › should save image with a complex url params\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    Request Failed.\n    Status Code: 200\n\n      78 |             // Consume response data to free up memory\n      79 |             res.resume();\n    > 80 |             reject(new Error((stryMutAct_9fa48(\"34\") ? \"\" : (stryCov_9fa48(\"34\"), 'Request Failed.\\n')) + (stryMutAct_9fa48(\"35\") ? `` : (stryCov_9fa48(\"35\"), `Status Code: ${res.statusCode}`))));\n         |                    ^\n      81 |             return;\n      82 |           }\n      83 |         }\n\n      at RedirectableRequest.<anonymous> (lib/request.js:80:20)\n      at RedirectableRequest.Object.<anonymous>.RedirectableRequest._processResponse (../../node_modules/follow-redirects/index.js:398:10)\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:91:12)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/pla\nyback_interceptor.js:307:11)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   89.05 |    54.64 |   89.28 |   90.76 |                   \n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n sandbox7984447/lib |   86.41 |    51.02 |   85.71 |   89.33 |                   \n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n  request.js        |      88 |    53.73 |   78.57 |   93.33 | 6,24,39           \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        0.505 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":33,"line":10},"start":{"column":11,"line":10}}},{"id":"34","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":45,"line":13},"start":{"column":26,"line":13}}},{"id":"26","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":2,"line":25},"start":{"column":82,"line":5}}},{"id":"35","mutatorName":"StringLiteral","replacement":"``","status":"Survived","testsCompleted":1,"location":{"end":{"column":58,"line":14},"start":{"column":26,"line":14}}},{"id":"36","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":20,"line":20},"start":{"column":13,"line":20}}},{"id":"39","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true\n\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✕ should save image with the original filename (8 ms)\n\n    ✓ should failed with too short timeout (1 ms)\n\n    ✕ should succeed with HTTPS (3 ms)\n\n    ✕ should save image with the decoded filename (4 ms)\n\n    ✕ should save image with an another filename (3 ms)\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n\n    ✓ should failed with an error (1 ms)\n\n    ✕ should save image with a complex url params (3 ms)\n\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n\n    ✕ #29 - 301 status code while downloading image (5 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: undefined\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: undefined\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n  ● download an image › should save image with the decoded filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-success.png\"\n    Received: undefined\n\n      88 |   it('should save image with the decoded filename', () => {\n      89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 90 |       expect(filename).toEqual('/tmp/image-success.png');\n         |                        ^\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      92 |     });\n      93 |   });\n\n      at toEqual (test/index.js:90:24)\n\n  ● download an image › should save image with an another filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-newname.jpg\"\n    Received: undefined\n\n       95 |   it('should save image with an another filename', () => {\n       96 |     return download.image({ url: 'http://someurl.com/image-success.jpg', dest: '/tmp/image-newname.jpg' }).then(({ filename }) => {\n    >  97 |       expect(filename).toEqual('/tmp/image-newname.jpg');\n          |                        ^\n       98 |       expect(() => fs.accessSync(filename)).not.toThrow();\n       99 |     });\n      100 |   });\n\n      at toEqual (test/index.js:97:24)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-newname\"\n    Received: undefined\n\n      108 |\n      109 |     return download.image(options).then(({ filename }) => {\n    > 110 |       expect(filename).toEqual('/tmp/image-newname');\n          |                        ^\n      111 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      112 |     });\n      113 |   });\n\n      at toEqual (test/index.js:110:24)\n\n  ● download an image › should save image with a complex url params\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      129 |\n      130 |     return download.image(options).then(({ filename }) => {\n    > 131 |       expect(filename).toBeDefined();\n          |                        ^\n      132 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      133 |     });\n      134 |   });\n\n      at toBeDefined (test/index.js:131:24)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    expect(received).toMatch(expected)\n\n    Matcher error: received value must be a string\n\n    Received has value: undefined\n\n      138 |   it('#27 - dest: directory cannot contain a dot', () => {\n      139 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: './test/fixtures/someurl.com' }).then(({ filename }) => {\n    > 140 |       expect(filename).toMatch(/test\\/fixtures\\/someurl\\.com$/);\n          |                        ^\n      141 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      142 |     });\n      143 |   });\n\n      at toMatch (test/index.js:140:24)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    expect(received).toMatch(expected)\n\n    Matcher error: received value must be a string\n\n    Received has value: undefined\n\n      145 |   it('#29 - 301 status code while downloading image', () => {\n      146 |     return download.image({ url: 'http://cdn.shopify.com/s/files/1/0516/7244/9178/products/SteelCutOats1.jpg', dest: '/tmp/SteelCutOats1.jpg' }).then(({ filename }) => {\n    > 147 |       expect(filename).toMatch(/tmp\\/SteelCutOats1\\.jpg$/);\n          |                        ^\n      148 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      149 |     });\n      150 |   });\n\n      at toMatch (test/index.js:147:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   89.05 |    55.73 |   89.28 |   90.76 |                   \n\n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n\n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n\n sandbox7984447/lib |   86.41 |    53.06 |   85.71 |   89.33 |                   \n\n  TimeoutError.js   |   83.87 |    45.16 |     100 |   83.33 | 6,24,38-41        \n\n  request.js        |      88 |    56.71 |   78.57 |   93.33 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.234 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":21},"start":{"column":38,"line":21}}},{"id":"40","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.187 s)\n\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (8 ms)\n    ✕ should failed with too short timeout (5002 ms)\n    ✕ should succeed with HTTPS (4 ms)\n    ✓ should save image with the decoded filename (4 ms)\n    ✓ should save image with an another filename (4 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (3 ms)\n    ✓ should save image with a complex url params (10 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    Should throw an error\n\n      72 |   it('should failed with too short timeout', (done) => {\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n    > 74 |       .then(() => done(new Error('Should throw an error')))\n         |                        ^\n      75 |       .catch((err) => {\n      76 |         expect(err).toBeInstanceOf(TimeoutError);\n      77 |         done();\n\n      at test/index.js:74:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   75.18 |    51.91 |   67.85 |   76.92 |                   \n\n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n\n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n\n sandbox7984447/lib |   62.96 |    45.91 |   57.14 |   65.33 |                   \n\n  TimeoutError.js   |    25.8 |    22.58 |   28.57 |   26.66 | 6,16-54           \n\n  request.js        |      86 |    56.71 |   71.42 |   91.11 | 6,24,39,88        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 10 passed, 12 total\nSnapshots:   0 total\nTime:        5.325 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":18,"line":23},"start":{"column":9,"line":23}}},{"id":"29","mutatorName":"BlockStatement","replacement":"{}","status":"Timeout","location":{"end":{"column":6,"line":22},"start":{"column":33,"line":9}}},{"id":"42","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":16,"line":24},"start":{"column":9,"line":24}}},{"id":"41","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.201 s)\n\n  options\n\n    ✓ should failed with !options.url === true\n\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✓ should save image with the original filename (10 ms)\n\n    ✕ should failed with too short timeout (5001 ms)\n\n    ✕ should succeed with HTTPS (5 ms)\n\n    ✓ should save image with the decoded filename (5 ms)\n\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (5 ms)\n\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    Should throw an error\n\n      72 |   it('should failed with too short timeout', (done) => {\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n    > 74 |       .then(() => done(new Error('Should throw an error')))\n         |                        ^\n      75 |       .catch((err) => {\n      76 |         expect(err).toBeInstanceOf(TimeoutError);\n      77 |         done();\n\n      at test/index.js:74:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   75.91 |    51.91 |   71.42 |   77.69 |                   \n\n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                   \n\n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41          \n\n sandbox7984447/lib |   64.19 |    45.91 |    61.9 |   66.66 |                   \n\n  TimeoutError.js   |    25.8 |    22.58 |   28.57 |   26.66 | 6,16-54           \n\n  request.js        |      88 |    56.71 |   78.57 |   93.33 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 10 passed, 12 total\nSnapshots:   0 total\nTime:        5.286 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":52,"line":23},"start":{"column":20,"line":23}}},{"id":"37","mutatorName":"StringLiteral","replacement":"\"\"","status":"Timeout","location":{"end":{"column":22,"line":21},"start":{"column":15,"line":21}}},{"id":"38","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Timeout","location":{"end":{"column":57,"line":21},"start":{"column":24,"line":21}}}],"source":"const { createWriteStream } = require('fs');\nconst { TimeoutError } = require('./TimeoutError');\nconst { http, https } = require('follow-redirects');\n\nmodule.exports = ({ url, dest, ...options }) => new Promise((resolve, reject) => {\n  const request = url.trimLeft().startsWith('https') ? https : http;\n\n  request\n    .get(url, options, (res) => {\n      if (res.statusCode !== 200) {\n        // Consume response data to free up memory\n        res.resume();\n        reject(new Error('Request Failed.\\n' +\n                         `Status Code: ${res.statusCode}`));\n\n        return;\n      }\n\n      res.pipe(createWriteStream(dest))\n        .on('error', reject)\n        .once('close', () => resolve({ filename: dest }));\n    })\n    .on('timeout', () => reject(new TimeoutError()))\n    .on('error', reject);\n});\n"},"lib/TimeoutError.js":{"language":"javascript","mutants":[{"id":"24","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":25,"line":3},"start":{"column":11,"line":3}}},{"id":"23","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.549 s)\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (10 ms)\n    ✕ should failed with too short timeout (5000 ms)\n    ✓ should succeed with HTTPS (5 ms)\n\n    ✓ should save image with the decoded filename (5 ms)\n    ✓ should save image with an another filename (6 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: ReferenceError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n\n--------------------|---------|----------|---------|---------|---------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   \n--------------------|---------|----------|---------|---------|---------------------\n\nAll files           |   79.56 |    52.45 |   82.14 |   81.53 |                     \n\n sandbox7984447     |   92.85 |    58.82 |     100 |   92.72 |                     \n\n  index.js          |   92.85 |    58.82 |     100 |   92.72 | 24,38-41            \n\n sandbox7984447/lib |   70.37 |    46.93 |   76.19 |   73.33 |                     \n\n  TimeoutError.js   |   48.38 |    35.48 |   71.42 |      50 | 6,16-32,39,43,53-54 \n\n  request.js        |      84 |    52.23 |   78.57 |   88.88 | 6,24,38-41          \n\n--------------------|---------|----------|---------|---------|---------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        5.715 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":4},"start":{"column":17,"line":2}}}],"source":"class TimeoutError extends Error {\n  constructor() {\n    super('TimeoutError');\n  }\n}\n\nmodule.exports.TimeoutError = TimeoutError;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"All tests"}]}},"projectRoot":"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader","config":{"mutate":["index.js","lib/TimeoutError.js","lib/request.js"],"reporters":["json","html","progress"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunner":"command","testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"cucumber":{},"jest":{"projectType":"custom","enableFindRelatedTests":true},"mochaOptions":{},"tap":{"testFiles":["{**/@(test|tests|__test__|__tests__)/**,**/*.@(test|tests|spec)}.@(cjs|mjs|js|jsx|ts|tsx|mts|cts)"],"nodeArgs":["-r","{{hookFile}}","{{testFile}}"],"forceBail":true},"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.5","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.2.5","@stryker-mutator/karma-runner":"8.2.5","@stryker-mutator/jasmine-runner":"8.2.5","@stryker-mutator/jest-runner":"8.2.5","mocha":"10.4.0","jasmine-core":"5.1.2","jest":"28.1.3","typescript":"5.4.4"}}}