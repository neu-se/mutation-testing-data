*** using precomputed mutations ***
[32m15:29:54 (2475) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m15:29:54 (2475) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m15:29:55 (2475) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m15:29:55 (2475) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m15:29:55 (2475) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m15:29:55 (2475) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 262 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.5/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null && spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 2 in matcher.ts: spec.match replaced with spec.search
Mutant 3 in matcher.ts: spec.match replaced with spec.split
Mutant 4 in matcher.ts: spec.match replaced with spec.replace
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/g
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/i
Mutant 7 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*$/m
Mutant 8 in matcher.ts: spec.match(/^\//) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null
Mutant 9 in matcher.ts: spec.match(/^\//) === null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null
Mutant 10 in matcher.ts: spec.match replaced with spec.search
Mutant 11 in matcher.ts: spec.match replaced with spec.indexOf
Mutant 12 in matcher.ts: spec.match replaced with spec.includes
Mutant 13 in matcher.ts: /^\// replaced with /^(?!\/)$/
Mutant 14 in matcher.ts: spec.match(/\/\//) !== null replaced with spec.match(/\/\/*/) !== null
Mutant 15 in matcher.ts: spec.match(/\/\//) !== null replaced with spec.match(/\/\/+/) !== null
Mutant 16 in matcher.ts: spec.match replaced with spec.search
Mutant 17 in matcher.ts: spec.match replaced with spec.includes
Mutant 18 in matcher.ts: spec.match replaced with spec.indexOf
Mutant 19 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with version !== '1' && version !== '1.0'
Mutant 20 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null
Mutant 21 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) === null
Mutant 22 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) !== null && spec.match(/[^/]:|:\/|:$/) !== null
Mutant 23 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 24 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+$/) !== null
Mutant 25 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+$/) === null
Mutant 26 in matcher.ts: spec.match replaced with spec.replace
Mutant 27 in matcher.ts: spec.match replaced with spec.search
Mutant 28 in matcher.ts: spec.match replaced with spec.indexOf
Mutant 29 in matcher.ts: /^.+\/$/ replaced with /^.+[/]$/
Mutant 30 in matcher.ts: /^.+\/$/ replaced with /^.+[/]+$/
Mutant 31 in matcher.ts: /^.+\/$/ replaced with /^.+[/]{2}$/
Mutant 32 in matcher.ts: spec replaced with spec.replace(/[*+][^/]|[^/][*+]/, '')
Mutant 33 in matcher.ts: spec replaced with spec.replace(/\*/g, '')
Mutant 34 in matcher.ts: spec replaced with spec.replace(/[*+][^/]|[^/][*+]/, '***')
Mutant 35 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 36 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.endsWith('/') && string.charAt(0) === '/'
Mutant 37 in matcher.ts: string.endsWith replaced with string.includes
Mutant 38 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 39 in matcher.ts: string.endsWith replaced with string.lastIndexOf
Mutant 40 in matcher.ts: '/' replaced with '\\'
Mutant 41 in matcher.ts: string replaced with null
Mutant 42 in matcher.ts: string replaced with undefined
Mutant 43 in matcher.ts: string replaced with ''
Mutant 44 in matcher.ts: max > 0 || any replaced with max > 1 || any
Mutant 45 in matcher.ts: max > 0 || any replaced with max >= 1 || any
Mutant 46 in matcher.ts: max > 0 || any replaced with any && max > 0
Mutant 47 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 0
Mutant 48 in matcher.ts: final && opt && min < 1 replaced with final && opt && min <= 0
Mutant 49 in matcher.ts: final && opt && min < 1 replaced with final && opt && min > 0
Mutant 50 in matcher.ts: min > 0 replaced with min < 0
Mutant 51 in matcher.ts: min > 0 replaced with max < 0
Mutant 52 in matcher.ts: min > 0 replaced with max < min
Mutant 53 in matcher.ts: true replaced with false
Mutant 54 in matcher.ts: true replaced with null
Mutant 55 in matcher.ts: true replaced with undefined
Mutant 56 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg.replace(/^/, acc))
Mutant 57 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg.slice(0, acc.length) + acc)
Mutant 58 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg - acc
Mutant 59 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg * acc
Mutant 60 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg / acc
Mutant 61 in matcher.ts: '$' replaced with ''
Mutant 62 in matcher.ts: '$' replaced with '(?!)'
Mutant 63 in matcher.ts: '$' replaced with '(?=)'
Mutant 64 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 65 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 66 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(2)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 67 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 68 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().join('')
Mutant 69 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().join('|')
Mutant 70 in matcher.ts: '/' replaced with '\\'
Mutant 71 in matcher.ts: '/' replaced with '^'
Mutant 72 in matcher.ts: '/' replaced with '$'
Mutant 73 in matcher.ts: 1 replaced with 0
Mutant 74 in matcher.ts: 1 replaced with -1
Mutant 75 in matcher.ts: 1 replaced with NaN
Mutant 76 in matcher.ts: part replaced with part.length
Mutant 77 in matcher.ts: part replaced with part.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null
Mutant 78 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 79 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === undefined
Mutant 80 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === false
Mutant 81 in matcher.ts: part.match replaced with part.replace
Mutant 82 in matcher.ts: part.match replaced with part.startsWith
Mutant 83 in matcher.ts: part.match replaced with part.includes
Mutant 84 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 85 in matcher.ts: /:.+/ replaced with /:.?/
Mutant 86 in matcher.ts: /:.+/ replaced with /:.{1,}/
Mutant 87 in matcher.ts: props.push replaced with props.pop
Mutant 88 in matcher.ts: props.push replaced with props.shift
Mutant 89 in matcher.ts: props.push replaced with props.unshift
Mutant 90 in matcher.ts: part.slice(1) replaced with part.substring(1)
Mutant 91 in matcher.ts: part.slice(1) replaced with part.split(':')[1]
Mutant 92 in matcher.ts: part.slice(1) replaced with part.match(/:.+/)[1]
Mutant 93 in matcher.ts: 1 replaced with 0
Mutant 94 in matcher.ts: 1 replaced with 2
Mutant 95 in matcher.ts: 1 replaced with -1
Mutant 96 in matcher.ts: '/([^/]+)' replaced with '/([^/]+?)/'
Mutant 97 in matcher.ts: '/([^/]+)' replaced with '/([^/]+)/'
Mutant 98 in matcher.ts: parts.push replaced with parts.pop
Mutant 99 in matcher.ts: parts.push replaced with parts.unshift
Mutant 100 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$2')}`
Mutant 101 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$0')}`
Mutant 102 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$10')}`
Mutant 103 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '\\$')
Mutant 104 in matcher.ts: part.replace replaced with part.split
Mutant 105 in matcher.ts: part.replace replaced with part.match
Mutant 106 in matcher.ts: /([.$])/g replaced with /([^$.])/g
Mutant 107 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 108 in matcher.ts: /([.$])/g replaced with /([^.$]+)/g
Mutant 109 in matcher.ts: '\\$1' replaced with '$1'
Mutant 110 in matcher.ts: '\\$1' replaced with '\\' + $1
Mutant 111 in matcher.ts: '\\$1' replaced with '$0'
Mutant 112 in matcher.ts: finalise replaced with finalise + 1
Mutant 113 in matcher.ts: finalise replaced with finalise - 1
Mutant 114 in policy.ts: this.rules.push replaced with this.rules.pop
Mutant 115 in policy.ts: this.rules.push replaced with this.rules.shift
Mutant 116 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 117 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 118 in policy.ts: this.rules replaced with this.rules.slice(0, -1)
Mutant 119 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.query(path, verb, ctx) === true)
Mutant 120 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.parent)
Mutant 121 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.parent.verb)
Mutant 122 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.parent.path)
Mutant 123 in policy.ts: rule.query replaced with rule.match
Mutant 124 in policy.ts: rule.query replaced with !rule.query
Mutant 125 in policy.ts: path replaced with path.toLowerCase()
Mutant 126 in policy.ts: path replaced with path.substring(1)
Mutant 127 in policy.ts: path replaced with path.split('/').pop()
Mutant 128 in policy.ts: verb replaced with !verb
Mutant 129 in policy.ts: verb replaced with verb + 'xyz'
Mutant 130 in policy.ts: verb replaced with verb.toLowerCase()
Mutant 131 in policy.ts: ctx replaced with undefined
Mutant 132 in policy.ts: ctx replaced with null
Mutant 133 in policy.ts: ctx replaced with new QueryContext()
Mutant 134 in policy.ts: res === false replaced with res !== false
Mutant 135 in policy.ts: res === false replaced with res === true
Mutant 136 in policy.ts: res === false replaced with !res
Mutant 137 in policy.ts: res === true replaced with res !== true
Mutant 138 in policy.ts: res === true replaced with res === false
Mutant 139 in policy.ts: res === true replaced with res !== false
Mutant 140 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 141 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.matches(path, ctx))
Mutant 142 in policy.ts: this.rules replaced with this.rules.map(rule => rule.clone())
Mutant 143 in policy.ts: rule.matches(path, ctx) replaced with !rule.matches(path, ctx)
Mutant 144 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) && false
Mutant 145 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) || true
Mutant 146 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.parent)
Mutant 147 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.children)
Mutant 148 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.siblings)
Mutant 149 in policy.ts: path replaced with path.toLowerCase()
Mutant 150 in policy.ts: path replaced with path.split('/')
Mutant 151 in policy.ts: ctx replaced with null
Mutant 152 in policy.ts: ctx replaced with undefined
Mutant 153 in policy.ts: ctx replaced with 0
Mutant 154 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(null)
Mutant 155 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(undefined)
Mutant 156 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(this.name)
Mutant 157 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 158 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name.toLowerCase()]
Mutant 159 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name.split('').reverse().join('')]
Mutant 160 in policymap.ts: policies replaced with policies.filter(p => p.name !== policy.name)
Mutant 161 in policymap.ts: policies replaced with policies.slice(0, policies.length - 1)
Mutant 162 in policymap.ts: policies replaced with policies.reverse()
Mutant 163 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 164 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, undefined)
Mutant 165 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, "policy")
Mutant 166 in policymap.ts: this.set replaced with this.add
Mutant 167 in policymap.ts: this.set replaced with this.push
Mutant 168 in policymap.ts: this.set replaced with this.unshift
Mutant 169 in policymap.ts: policy.name replaced with policy.name.toUpperCase()
Mutant 170 in policymap.ts: policy.name replaced with policy.name.length
Mutant 171 in policymap.ts: policy.name replaced with policy.name.split('').reverse().join('')
Mutant 172 in policymap.ts: policy replaced with policy.name
Mutant 173 in policymap.ts: policy replaced with policy.name.toLowerCase()
Mutant 174 in policymap.ts: policy replaced with policy.name.split('')
Mutant 175 in policymap.ts: this.get replaced with this.has
Mutant 176 in policymap.ts: this.get replaced with this.size
Mutant 177 in policymap.ts: this.get replaced with this.keys
Mutant 178 in policymap.ts: name replaced with "foo"
Mutant 179 in policymap.ts: name replaced with name.toUpperCase()
Mutant 180 in policymap.ts: name replaced with name.slice(1)
Mutant 181 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.foo)
Mutant 182 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.bar)
Mutant 183 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.baz)
Mutant 184 in policymap.ts: path replaced with path.substring(1)
Mutant 185 in policymap.ts: path replaced with path.toUpperCase()
Mutant 186 in policymap.ts: path replaced with path.split('/')[0]
Mutant 187 in policymap.ts: verb replaced with verb.toLowerCase()
Mutant 188 in policymap.ts: verb replaced with verb.substring(1)
Mutant 189 in policymap.ts: verb replaced with verb.split('').reverse().join('')
Mutant 190 in policymap.ts: ctx replaced with ctx || {}
Mutant 191 in policymap.ts: ctx replaced with ctx && ctx.length > 0
Mutant 192 in policymap.ts: name replaced with "name"
Mutant 193 in policymap.ts: name replaced with name.toUpperCase()
Mutant 194 in policymap.ts: name replaced with name.substring(1)
Mutant 195 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.parent)
Mutant 196 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.path)
Mutant 197 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.method)
Mutant 198 in policymap.ts: policy.matches replaced with policy.query
Mutant 199 in policymap.ts: policy.matches replaced with !policy.matches
Mutant 200 in policymap.ts: path replaced with path.substring(1)
Mutant 201 in policymap.ts: path replaced with path.toUpperCase()
Mutant 202 in policymap.ts: path replaced with path.split('/')
Mutant 203 in policymap.ts: ctx replaced with ctx.parent
Mutant 204 in policymap.ts: ctx replaced with ctx.parent.parent
Mutant 205 in policymap.ts: ctx replaced with ctx.parent.parent.parent
Mutant 206 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (let verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 207 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.keys()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 208 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.values()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 209 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of Object.keys(verbs)) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 210 in rule.ts: verbs replaced with verbs.keys()
Mutant 211 in rule.ts: verbs replaced with verbs.values()
Mutant 212 in rule.ts: verbs replaced with verbs.entries()
Mutant 213 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 214 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb]
Mutant 215 in rule.ts: !(verb in this.verbs) replaced with this.verbs.hasOwnProperty(verb)
Mutant 216 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (let verb of verbs) {
  this.verbs[verb] = false;
}
Mutant 217 in rule.ts: verbs replaced with verbs.slice()
Mutant 218 in rule.ts: verbs replaced with verbs.slice(1)
Mutant 219 in rule.ts: verbs replaced with verbs.splice(1)
Mutant 220 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && this.verbs[verb]
Mutant 221 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 222 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.matches(path, ctx) && verb in this.verbs
Mutant 223 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.match(this.regex))
Mutant 224 in rule.ts: this.matches(path, ctx) replaced with this.matches(ctx.path.match(this.regex))
Mutant 225 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.match(this.regex, ctx))
Mutant 226 in rule.ts: path replaced with path.toLowerCase()
Mutant 227 in rule.ts: path replaced with path.substring(1)
Mutant 228 in rule.ts: path replaced with path.split('/').pop()
Mutant 229 in rule.ts: ctx replaced with ctx[0]
Mutant 230 in rule.ts: ctx replaced with ctx.length
Mutant 231 in rule.ts: ctx replaced with ctx[ctx.length - 1]
Mutant 232 in rule.ts: path.match replaced with path.split
Mutant 233 in rule.ts: path.match replaced with path.search
Mutant 234 in rule.ts: path.match replaced with path.replace
Mutant 235 in rule.ts: this.regex replaced with this.regex.source
Mutant 236 in rule.ts: this.regex replaced with this.regex.toString()
Mutant 237 in rule.ts: this.regex replaced with this.regex.test(path)
Mutant 238 in rule.ts: match === null replaced with match !== null
Mutant 239 in rule.ts: match === null replaced with match === undefined
Mutant 240 in rule.ts: match === null replaced with match.length === 0
Mutant 241 in rule.ts: count > 0 replaced with count < 0
Mutant 242 in rule.ts: count > 0 replaced with count === 0
Mutant 243 in rule.ts: count > 0 replaced with count !== 0
Mutant 244 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 245 in rule.ts: ctx === undefined replaced with !ctx
Mutant 246 in rule.ts: ctx === undefined replaced with ctx.length === 0
Mutant 247 in rule.ts: index < count replaced with index >= count
Mutant 248 in rule.ts: index < count replaced with index > count
Mutant 249 in rule.ts: index < count replaced with index <= count
Mutant 250 in rule.ts: index++ replaced with index--
Mutant 251 in rule.ts: index++ replaced with index += 2
Mutant 252 in rule.ts: index++ replaced with index = 0
Mutant 253 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined || match[index + 1] === prop
Mutant 254 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] !== prop
Mutant 255 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verbs in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 256 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb of this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 257 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.keys()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 258 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.values()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 259 in rule.ts: this.verbs replaced with this.verbs.slice()
Mutant 260 in rule.ts: this.verbs replaced with this.verbs.concat()
Mutant 261 in rule.ts: this.verbs replaced with this.verbs.filter(Boolean)
[32m15:29:55 (2475) INFO Instrumenter[39m Instrumented 6 source file(s) with 262 mutant(s)
[32m15:29:56 (2475) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m15:29:57 (2475) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m15:29:57 (2475) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m15:30:01 (2475) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4290 ms, overhead 0 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~21m) 2/262 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~14m) 6/262 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~14m) 9/262 tested (2 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~13m) 12/262 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~14m) 14/262 tested (2 survived, 0 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~14m) 17/262 tested (3 survived, 0 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~14m) 20/262 tested (3 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~13m) 23/262 tested (4 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~13m) 26/262 tested (4 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~13m) 29/262 tested (4 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~13m) 32/262 tested (6 survived, 0 timed out)
Mutation testing 13% (elapsed: ~2m, remaining: ~12m) 35/262 tested (6 survived, 0 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~12m) 38/262 tested (7 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~12m) 41/262 tested (9 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~12m) 44/262 tested (9 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~12m) 47/262 tested (10 survived, 0 timed out)
Mutation testing 19% (elapsed: ~2m, remaining: ~12m) 50/262 tested (11 survived, 0 timed out)
Mutation testing 20% (elapsed: ~3m, remaining: ~11m) 53/262 tested (11 survived, 0 timed out)
Mutation testing 21% (elapsed: ~3m, remaining: ~11m) 56/262 tested (11 survived, 0 timed out)
Mutation testing 22% (elapsed: ~3m, remaining: ~11m) 59/262 tested (11 survived, 0 timed out)
Mutation testing 23% (elapsed: ~3m, remaining: ~11m) 62/262 tested (11 survived, 0 timed out)
Mutation testing 24% (elapsed: ~3m, remaining: ~11m) 65/262 tested (11 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~10m) 68/262 tested (11 survived, 0 timed out)
Mutation testing 27% (elapsed: ~4m, remaining: ~10m) 71/262 tested (11 survived, 0 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~10m) 74/262 tested (11 survived, 0 timed out)
Mutation testing 29% (elapsed: ~4m, remaining: ~10m) 77/262 tested (11 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~10m) 80/262 tested (11 survived, 0 timed out)
Mutation testing 31% (elapsed: ~4m, remaining: ~10m) 83/262 tested (11 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~9m) 86/262 tested (13 survived, 0 timed out)
Mutation testing 33% (elapsed: ~5m, remaining: ~9m) 89/262 tested (14 survived, 0 timed out)
Mutation testing 35% (elapsed: ~5m, remaining: ~9m) 92/262 tested (16 survived, 0 timed out)
Mutation testing 36% (elapsed: ~5m, remaining: ~9m) 95/262 tested (16 survived, 0 timed out)
Mutation testing 37% (elapsed: ~5m, remaining: ~9m) 98/262 tested (16 survived, 0 timed out)
Mutation testing 38% (elapsed: ~5m, remaining: ~9m) 101/262 tested (16 survived, 0 timed out)
Mutation testing 39% (elapsed: ~5m, remaining: ~8m) 104/262 tested (16 survived, 0 timed out)
Mutation testing 40% (elapsed: ~6m, remaining: ~8m) 107/262 tested (16 survived, 0 timed out)
Mutation testing 41% (elapsed: ~6m, remaining: ~8m) 110/262 tested (16 survived, 0 timed out)
Mutation testing 43% (elapsed: ~6m, remaining: ~8m) 113/262 tested (16 survived, 0 timed out)
Mutation testing 44% (elapsed: ~6m, remaining: ~8m) 116/262 tested (16 survived, 0 timed out)
Mutation testing 45% (elapsed: ~6m, remaining: ~8m) 119/262 tested (18 survived, 0 timed out)
Mutation testing 46% (elapsed: ~6m, remaining: ~7m) 122/262 tested (18 survived, 0 timed out)
Mutation testing 47% (elapsed: ~7m, remaining: ~7m) 125/262 tested (18 survived, 0 timed out)
Mutation testing 48% (elapsed: ~7m, remaining: ~7m) 128/262 tested (19 survived, 0 timed out)
Mutation testing 50% (elapsed: ~7m, remaining: ~7m) 131/262 tested (20 survived, 0 timed out)
Mutation testing 51% (elapsed: ~7m, remaining: ~7m) 134/262 tested (20 survived, 0 timed out)
Mutation testing 52% (elapsed: ~7m, remaining: ~6m) 138/262 tested (20 survived, 0 timed out)
Mutation testing 53% (elapsed: ~7m, remaining: ~6m) 141/262 tested (21 survived, 0 timed out)
Mutation testing 54% (elapsed: ~8m, remaining: ~6m) 144/262 tested (23 survived, 0 timed out)
Mutation testing 56% (elapsed: ~8m, remaining: ~6m) 147/262 tested (23 survived, 0 timed out)
Mutation testing 57% (elapsed: ~8m, remaining: ~6m) 150/262 tested (24 survived, 0 timed out)
Mutation testing 58% (elapsed: ~8m, remaining: ~6m) 153/262 tested (24 survived, 0 timed out)
Mutation testing 59% (elapsed: ~8m, remaining: ~5m) 156/262 tested (25 survived, 0 timed out)
Mutation testing 60% (elapsed: ~8m, remaining: ~5m) 159/262 tested (25 survived, 0 timed out)
Mutation testing 61% (elapsed: ~9m, remaining: ~5m) 162/262 tested (25 survived, 0 timed out)
Mutation testing 62% (elapsed: ~9m, remaining: ~5m) 165/262 tested (26 survived, 0 timed out)
Mutation testing 64% (elapsed: ~9m, remaining: ~5m) 168/262 tested (26 survived, 0 timed out)
Mutation testing 65% (elapsed: ~9m, remaining: ~5m) 171/262 tested (26 survived, 0 timed out)
Mutation testing 66% (elapsed: ~9m, remaining: ~4m) 175/262 tested (26 survived, 0 timed out)
Mutation testing 67% (elapsed: ~9m, remaining: ~4m) 178/262 tested (26 survived, 0 timed out)
Mutation testing 69% (elapsed: ~10m, remaining: ~4m) 181/262 tested (26 survived, 0 timed out)
Mutation testing 70% (elapsed: ~10m, remaining: ~4m) 184/262 tested (26 survived, 0 timed out)
Mutation testing 71% (elapsed: ~10m, remaining: ~4m) 187/262 tested (26 survived, 0 timed out)
Mutation testing 72% (elapsed: ~10m, remaining: ~3m) 190/262 tested (27 survived, 0 timed out)
Mutation testing 73% (elapsed: ~10m, remaining: ~3m) 193/262 tested (28 survived, 0 timed out)
Mutation testing 74% (elapsed: ~10m, remaining: ~3m) 196/262 tested (28 survived, 0 timed out)
Mutation testing 75% (elapsed: ~11m, remaining: ~3m) 199/262 tested (28 survived, 0 timed out)
Mutation testing 77% (elapsed: ~11m, remaining: ~3m) 202/262 tested (28 survived, 0 timed out)
Mutation testing 78% (elapsed: ~11m, remaining: ~3m) 206/262 tested (28 survived, 0 timed out)
Mutation testing 79% (elapsed: ~11m, remaining: ~2m) 209/262 tested (30 survived, 0 timed out)
Mutation testing 80% (elapsed: ~11m, remaining: ~2m) 212/262 tested (31 survived, 0 timed out)
Mutation testing 82% (elapsed: ~11m, remaining: ~2m) 215/262 tested (31 survived, 0 timed out)
Mutation testing 83% (elapsed: ~12m, remaining: ~2m) 218/262 tested (33 survived, 0 timed out)
Mutation testing 84% (elapsed: ~12m, remaining: ~2m) 221/262 tested (33 survived, 0 timed out)
Mutation testing 85% (elapsed: ~12m, remaining: ~2m) 224/262 tested (33 survived, 0 timed out)
Mutation testing 86% (elapsed: ~12m, remaining: ~1m) 227/262 tested (34 survived, 0 timed out)
Mutation testing 87% (elapsed: ~12m, remaining: ~1m) 230/262 tested (34 survived, 0 timed out)
Mutation testing 88% (elapsed: ~12m, remaining: ~1m) 233/262 tested (34 survived, 0 timed out)
Mutation testing 90% (elapsed: ~13m, remaining: ~1m) 236/262 tested (35 survived, 0 timed out)
Mutation testing 91% (elapsed: ~13m, remaining: ~1m) 239/262 tested (35 survived, 0 timed out)
Mutation testing 92% (elapsed: ~13m, remaining: ~1m) 242/262 tested (35 survived, 0 timed out)
Mutation testing 93% (elapsed: ~13m, remaining: <1m) 245/262 tested (36 survived, 0 timed out)
Mutation testing 94% (elapsed: ~13m, remaining: <1m) 248/262 tested (37 survived, 0 timed out)
Mutation testing 95% (elapsed: ~13m, remaining: <1m) 251/262 tested (37 survived, 0 timed out)
Mutation testing 96% (elapsed: ~14m, remaining: <1m) 252/262 tested (38 survived, 0 timed out)
Mutation testing 97% (elapsed: ~14m, remaining: <1m) 255/262 tested (38 survived, 1 timed out)
Mutation testing 98% (elapsed: ~14m, remaining: <1m) 258/262 tested (38 survived, 1 timed out)
Mutation testing 99% (elapsed: ~14m, remaining: <1m) 261/262 tested (38 survived, 1 timed out)

All tests
  ✓ All tests (killed 223)

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/g) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/i) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:18:9
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/\/\/+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:9
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/) !== null && spec.match(/[^/]:|:\/|:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:29:20
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+[/]$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:29:20
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+[/]+$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/') && string.charAt(0) === '/') {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:64:9
-       if (max > 0 || any) {
+       if (max >= 1 || any) {

[Survived] PrecomputedMutator
src/matcher.ts:65:11
-         if (final && opt && min < 1) {
+         if (final && opt && min <= 0) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.?/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.{1,}/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substring(1))

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.split(':')[1])

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:33:30
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.filter(rule => rule.matches(path, ctx))) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.map(rule => rule.clone())) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.toLowerCase(), ctx)) {

[Survived] PrecomputedMutator
src/policy.ts:61:44
-         ? new Policy(name, ...this.rules.map((rule) => rule.clone()))
+         ? new Policy(name, ...this.rules.map(rule => rule.clone(undefined)))

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.reverse()) {

[Survived] PrecomputedMutator
src/policymap.ts:30:28
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policymap.ts:30:34
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb, ctx || {})

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (let verb of verbs) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.values()) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of verbs.values()) {

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (let verb of verbs) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.slice()) {

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:60:30
-       const match = path.match(this.regex)
+       const match = path.match(this.regex.source)

[Survived] PrecomputedMutator
src/rule.ts:65:9
-       if (count > 0) {
+       if (count !== 0) {

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (!ctx) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   85.50 |      223 |         1 |         38 |        0 |        0 |
 matcher.ts   |   85.96 |       98 |         0 |         16 |        0 |        0 |
 policy.ts    |   79.07 |       34 |         0 |          9 |        0 |        0 |
 policymap.ts |   93.88 |       46 |         0 |          3 |        0 |        0 |
 rule.ts      |   82.14 |       45 |         1 |         10 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m15:44:33 (2475) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m15:44:33 (2475) INFO MutationTestExecutor[39m Done in 14 minutes 38 seconds.

real	14m39.826s
user	19m40.536s
sys	1m26.763s
