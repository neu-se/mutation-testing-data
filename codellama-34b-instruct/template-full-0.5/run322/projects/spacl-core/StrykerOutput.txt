*** using precomputed mutations ***
[32m17:11:59 (2474) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m17:11:59 (2474) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m17:11:59 (2474) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m17:12:00 (2474) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m17:12:00 (2474) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m17:12:00 (2474) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 252 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.5/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === undefined
Mutant 2 in matcher.ts: spec.match replaced with spec.search
Mutant 3 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*[a-zA-Z0-9_/:~.$+*-]$/
Mutant 4 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*[a-zA-Z0-9_/:~.$+*-]+$/
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*[a-zA-Z0-9_/:~.$+*-]?$/
Mutant 6 in matcher.ts: spec.match(/^\//) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null
Mutant 7 in matcher.ts: spec.match(/^\//) === null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null
Mutant 8 in matcher.ts: spec.match replaced with spec.search
Mutant 9 in matcher.ts: spec.match replaced with spec.indexOf
Mutant 10 in matcher.ts: spec.match replaced with spec.includes
Mutant 11 in matcher.ts: spec.match replaced with spec.search
Mutant 12 in matcher.ts: /\/\// replaced with /\/\*/
Mutant 13 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null
Mutant 14 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== undefined
Mutant 15 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) === null
Mutant 16 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) !== undefined
Mutant 17 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) !== spec
Mutant 18 in matcher.ts: spec.match replaced with spec.search
Mutant 19 in matcher.ts: spec.match replaced with /[^/]+/
Mutant 20 in matcher.ts: spec.match replaced with spec.replace
Mutant 21 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/g
Mutant 22 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/i
Mutant 23 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/m
Mutant 24 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 25 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === spec
Mutant 26 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== spec
Mutant 27 in matcher.ts: spec.match replaced with spec.replace
Mutant 28 in matcher.ts: spec.match replaced with spec.search
Mutant 29 in matcher.ts: spec.match replaced with spec.split
Mutant 30 in matcher.ts: /^.+\/$/ replaced with /^.+$/
Mutant 31 in matcher.ts: spec replaced with spec.slice(1)
Mutant 32 in matcher.ts: spec replaced with spec.substring(1)
Mutant 33 in matcher.ts: spec replaced with spec.replace(/^./, '')
Mutant 34 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 35 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.endsWith('/') && string.charAt(string.length - 2) === '/'
Mutant 36 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.endsWith('/') && string.indexOf('/') === string.length - 2
Mutant 37 in matcher.ts: string.endsWith replaced with string.startsWith
Mutant 38 in matcher.ts: string.endsWith replaced with string.includes
Mutant 39 in matcher.ts: '/' replaced with '\\'
Mutant 40 in matcher.ts: '/' replaced with '/' + spec.length
Mutant 41 in matcher.ts: '/' replaced with '/' + Math.random()
Mutant 42 in matcher.ts: string replaced with string.toUpperCase()
Mutant 43 in matcher.ts: string replaced with string.length
Mutant 44 in matcher.ts: string replaced with string.replace('a', 'b')
Mutant 45 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 46 in matcher.ts: max > 0 || any replaced with max > 1 || any
Mutant 47 in matcher.ts: max > 0 || any replaced with max > 0 || !any
Mutant 48 in matcher.ts: final && opt && min < 1 replaced with final && !opt && min < 1
Mutant 49 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 2
Mutant 50 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 3
Mutant 51 in matcher.ts: min > 0 replaced with min < 0
Mutant 52 in matcher.ts: min > 0 replaced with max < 0
Mutant 53 in matcher.ts: min > 0 replaced with min === max
Mutant 54 in matcher.ts: true replaced with false
Mutant 55 in matcher.ts: true replaced with !true
Mutant 56 in matcher.ts: true replaced with true && false
Mutant 57 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, ' ')
Mutant 58 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '')
Mutant 59 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '/')
Mutant 60 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg - acc
Mutant 61 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + seg + 1
Mutant 62 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg * acc
Mutant 63 in matcher.ts: '$' replaced with '\\'
Mutant 64 in matcher.ts: '$' replaced with '/'
Mutant 65 in matcher.ts: '$' replaced with '\\/'
Mutant 66 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 67 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(0).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 68 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 69 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 70 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().join('')
Mutant 71 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().map(x => x.toUpperCase())
Mutant 72 in matcher.ts: '/' replaced with '\\'
Mutant 73 in matcher.ts: '/' replaced with '\\/'
Mutant 74 in matcher.ts: 1 replaced with 0
Mutant 75 in matcher.ts: 1 replaced with -1
Mutant 76 in matcher.ts: part replaced with part.slice(0, -1)
Mutant 77 in matcher.ts: part replaced with part.split('').reverse().join('')
Mutant 78 in matcher.ts: part replaced with part.replace(/[a-zA-Z0-9_]/g, '')
Mutant 79 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 80 in matcher.ts: part.match replaced with part.split
Mutant 81 in matcher.ts: part.match replaced with part.includes
Mutant 82 in matcher.ts: part.match replaced with part.indexOf
Mutant 83 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 84 in matcher.ts: /:.+/ replaced with /:[a-zA-Z0-9_-]+/
Mutant 85 in matcher.ts: /:.+/ replaced with /:.{3,}/
Mutant 86 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 87 in matcher.ts: part.slice(1) replaced with part.slice(-1)
Mutant 88 in matcher.ts: part.slice(1) replaced with part.split('').reverse().join('')
Mutant 89 in matcher.ts: 1 replaced with min + 1
Mutant 90 in matcher.ts: 1 replaced with min += 1
Mutant 91 in matcher.ts: '/([^/]+)' replaced with '/([^/]+?)'
Mutant 92 in matcher.ts: '/([^/]+)' replaced with '/([^/]+)?'
Mutant 93 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$2')}`
Mutant 94 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$0')}`
Mutant 95 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([^.$])/g, '\\$1')
Mutant 96 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([^.$])/g, '\\$2')
Mutant 97 in matcher.ts: part.replace replaced with part.split
Mutant 98 in matcher.ts: part.replace replaced with part.substring
Mutant 99 in matcher.ts: part.replace replaced with part.slice
Mutant 100 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 101 in matcher.ts: /([.$])/g replaced with /([^.$]|\\.)/g
Mutant 102 in matcher.ts: /([.$])/g replaced with /([^.$])|(\\.)/g
Mutant 103 in matcher.ts: '\\$1' replaced with '\\\\$1'
Mutant 104 in matcher.ts: '\\$1' replaced with '$1'
Mutant 105 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 106 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 107 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.query(path, verb, ctx) === false)
Mutant 108 in policy.ts: this.rules replaced with this.rules.map(rule => rule.query(path, verb, ctx))
Mutant 109 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.parent)
Mutant 110 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.otherProperty)
Mutant 111 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.otherProperty.parent)
Mutant 112 in policy.ts: path replaced with path.toLowerCase()
Mutant 113 in policy.ts: path replaced with path.substring(1)
Mutant 114 in policy.ts: path replaced with path.split('/').pop()
Mutant 115 in policy.ts: verb replaced with "verb".toLowerCase()
Mutant 116 in policy.ts: verb replaced with verb.split(" ")[0]
Mutant 117 in policy.ts: verb replaced with verb.replace("ing", "")
Mutant 118 in policy.ts: ctx replaced with ctx.path
Mutant 119 in policy.ts: ctx replaced with ctx.verb
Mutant 120 in policy.ts: ctx replaced with ctx.path + ctx.verb
Mutant 121 in policy.ts: res === false replaced with res !== false
Mutant 122 in policy.ts: res === false replaced with res !== true
Mutant 123 in policy.ts: res === false replaced with allow === true
Mutant 124 in policy.ts: res === true replaced with res === false
Mutant 125 in policy.ts: res === true replaced with allow = false
Mutant 126 in policy.ts: res === true replaced with allow = !res
Mutant 127 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 128 in policy.ts: this.rules replaced with this.rules.filter(() => true)
Mutant 129 in policy.ts: this.rules replaced with this.rules.slice().reverse()
Mutant 130 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(ctx, path)
Mutant 131 in policy.ts: rule.matches(path, ctx) replaced with !rule.matches(path, ctx)
Mutant 132 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) && false
Mutant 133 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.parent)
Mutant 134 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.root)
Mutant 135 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.clone())
Mutant 136 in policy.ts: rule.matches replaced with rule.query
Mutant 137 in policy.ts: path replaced with null
Mutant 138 in policy.ts: path replaced with undefined
Mutant 139 in policy.ts: path replaced with ''
Mutant 140 in policy.ts: ctx replaced with undefined
Mutant 141 in policy.ts: ctx replaced with null
Mutant 142 in policy.ts: ctx replaced with ''
Mutant 143 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 144 in policy.ts: this.rules.map replaced with this.rules.reduce
Mutant 145 in policy.ts: this.rules.map replaced with this.rules.find
Mutant 146 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(null)
Mutant 147 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(rule)
Mutant 148 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(this.name)
Mutant 149 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 150 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, null]
Mutant 151 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, {}]
Mutant 152 in policymap.ts: policies replaced with policies.slice(0)
Mutant 153 in policymap.ts: policies replaced with policies.filter(policy => policy.name !== 'default')
Mutant 154 in policymap.ts: policies replaced with policies.map(policy => policy.name)
Mutant 155 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 156 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, undefined)
Mutant 157 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, {})
Mutant 158 in policymap.ts: policy.name replaced with policy.name.toLowerCase()
Mutant 159 in policymap.ts: policy.name replaced with policy.name.toUpperCase()
Mutant 160 in policymap.ts: policy.name replaced with policy.name + 'foo'
Mutant 161 in policymap.ts: policy replaced with null
Mutant 162 in policymap.ts: policy replaced with policy.name
Mutant 163 in policymap.ts: policy replaced with new Policy(policy.name, policy.actions)
Mutant 164 in policymap.ts: this.get replaced with this.has
Mutant 165 in policymap.ts: this.get replaced with this.size
Mutant 166 in policymap.ts: this.get replaced with this.keys
Mutant 167 in policymap.ts: name replaced with null
Mutant 168 in policymap.ts: name replaced with undefined
Mutant 169 in policymap.ts: name replaced with ''
Mutant 170 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path + verb, ctx)
Mutant 171 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb.toLowerCase(), ctx)
Mutant 172 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.getPath())
Mutant 173 in policymap.ts: path replaced with path.substring(1)
Mutant 174 in policymap.ts: path replaced with path.toUpperCase()
Mutant 175 in policymap.ts: path replaced with path.split('.')[0]
Mutant 176 in policymap.ts: verb replaced with !verb
Mutant 177 in policymap.ts: verb replaced with verb + 'abc'
Mutant 178 in policymap.ts: verb replaced with verb.toUpperCase()
Mutant 179 in policymap.ts: ctx replaced with null
Mutant 180 in policymap.ts: ctx replaced with undefined
Mutant 181 in policymap.ts: ctx replaced with this
Mutant 182 in policymap.ts: this.get replaced with this.has
Mutant 183 in policymap.ts: this.get replaced with this.values
Mutant 184 in policymap.ts: this.get replaced with this.entries
Mutant 185 in policymap.ts: name replaced with name + "foo"
Mutant 186 in policymap.ts: name replaced with name.toUpperCase()
Mutant 187 in policymap.ts: name replaced with name.split("")[0]
Mutant 188 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + ctx)
Mutant 189 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path - ctx)
Mutant 190 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path.replace(ctx, ''))
Mutant 191 in policymap.ts: policy.matches replaced with policy.match
Mutant 192 in policymap.ts: path replaced with path.substring(0, path.length - 1)
Mutant 193 in policymap.ts: path replaced with path.toUpperCase()
Mutant 194 in policymap.ts: path replaced with path.split('/')[0]
Mutant 195 in policymap.ts: ctx replaced with ctx.undefined
Mutant 196 in policymap.ts: ctx replaced with ctx.unrelated
Mutant 197 in policymap.ts: ctx replaced with ctx.path
Mutant 198 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of Object.keys(verbs)) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 199 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.keys()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 200 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.values()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 201 in rule.ts: verbs replaced with verbs.slice(0, -1)
Mutant 202 in rule.ts: verbs replaced with verbs.slice(1)
Mutant 203 in rule.ts: !(verb in this.verbs) replaced with !this.verbs[verb]
Mutant 204 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs && !this.verbs[verb]
Mutant 205 in rule.ts: !(verb in this.verbs) replaced with !this.verbs[verb] || verb in this.verbs && !this.verbs[verb]
Mutant 206 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (let verb of verbs) {
  this.verbs[verb] = false;
}
Mutant 207 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.reverse()) {
  this.verbs[verb] = false;
}
Mutant 208 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.slice(1)) {
  this.verbs[verb] = false;
}
Mutant 209 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.filter(v => v.startsWith('d'))) {
  this.verbs[verb] = false;
}
Mutant 210 in rule.ts: verbs replaced with this.verbs
Mutant 211 in rule.ts: verbs replaced with verbs.slice()
Mutant 212 in rule.ts: verbs replaced with verbs.concat()
Mutant 213 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.matches(path, ctx) && verb in this.verbs
Mutant 214 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 215 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !(verb in this.verbs)
Mutant 216 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx, 1)
Mutant 217 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx, "foo")
Mutant 218 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx, ctx.bar)
Mutant 219 in rule.ts: path replaced with path.slice(1)
Mutant 220 in rule.ts: path replaced with path.substring(1)
Mutant 221 in rule.ts: path replaced with path.substr(1)
Mutant 222 in rule.ts: ctx replaced with undefined
Mutant 223 in rule.ts: ctx replaced with null
Mutant 224 in rule.ts: ctx replaced with {}
Mutant 225 in rule.ts: path.match replaced with path.search
Mutant 226 in rule.ts: path.match replaced with path.split
Mutant 227 in rule.ts: path.match replaced with path.replace
Mutant 228 in rule.ts: this.regex replaced with this.regex.props
Mutant 229 in rule.ts: this.regex replaced with this.regex.source
Mutant 230 in rule.ts: this.regex replaced with this.regex.flags
Mutant 231 in rule.ts: match === null replaced with match !== null
Mutant 232 in rule.ts: match === null replaced with match.length === 0
Mutant 233 in rule.ts: match === null replaced with match.length > 0
Mutant 234 in rule.ts: count > 0 replaced with count < 0
Mutant 235 in rule.ts: count > 0 replaced with count === 0
Mutant 236 in rule.ts: count > 0 replaced with count >= 0
Mutant 237 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 238 in rule.ts: ctx === undefined replaced with ctx.prop === undefined
Mutant 239 in rule.ts: ctx === undefined replaced with match[index + 1] !== prop
Mutant 240 in rule.ts: index < count replaced with index <= count
Mutant 241 in rule.ts: index < count replaced with index > count
Mutant 242 in rule.ts: index < count replaced with index + 1 < count
Mutant 243 in rule.ts: index++ replaced with index--
Mutant 244 in rule.ts: index++ replaced with index += 2
Mutant 245 in rule.ts: index++ replaced with index = 0
Mutant 246 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] === prop
Mutant 247 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== match[index + 1]
Mutant 248 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with match[index + 1] !== prop
Mutant 249 in rule.ts: this.verbs replaced with this.verbs.slice()
Mutant 250 in rule.ts: this.verbs replaced with this.verbs.length
Mutant 251 in rule.ts: this.verbs replaced with this.verbs.hasOwnProperty('verb')
[32m17:12:00 (2474) INFO Instrumenter[39m Instrumented 6 source file(s) with 252 mutant(s)
[32m17:12:00 (2474) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m17:12:02 (2474) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m17:12:02 (2474) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m17:12:06 (2474) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4248 ms, overhead 2 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~13m) 3/252 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~13m) 6/252 tested (3 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~13m) 9/252 tested (3 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~13m) 12/252 tested (3 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~13m) 15/252 tested (3 survived, 0 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~13m) 17/252 tested (3 survived, 0 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~13m) 20/252 tested (3 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~13m) 23/252 tested (5 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~13m) 26/252 tested (6 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~12m) 29/252 tested (6 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~12m) 32/252 tested (6 survived, 0 timed out)
Mutation testing 13% (elapsed: ~2m, remaining: ~12m) 35/252 tested (6 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~12m) 38/252 tested (8 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~12m) 41/252 tested (9 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~11m) 44/252 tested (10 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~11m) 47/252 tested (10 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~11m) 51/252 tested (10 survived, 0 timed out)
Mutation testing 21% (elapsed: ~3m, remaining: ~11m) 54/252 tested (10 survived, 0 timed out)
Mutation testing 22% (elapsed: ~3m, remaining: ~10m) 57/252 tested (10 survived, 0 timed out)
Mutation testing 23% (elapsed: ~3m, remaining: ~10m) 60/252 tested (10 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~10m) 63/252 tested (10 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~10m) 66/252 tested (10 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~10m) 69/252 tested (10 survived, 0 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~10m) 72/252 tested (10 survived, 0 timed out)
Mutation testing 29% (elapsed: ~4m, remaining: ~9m) 75/252 tested (10 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~9m) 78/252 tested (11 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~9m) 81/252 tested (12 survived, 0 timed out)
Mutation testing 33% (elapsed: ~4m, remaining: ~9m) 84/252 tested (13 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~9m) 87/252 tested (14 survived, 0 timed out)
Mutation testing 35% (elapsed: ~5m, remaining: ~9m) 90/252 tested (15 survived, 0 timed out)
Mutation testing 36% (elapsed: ~5m, remaining: ~8m) 93/252 tested (15 survived, 0 timed out)
Mutation testing 38% (elapsed: ~5m, remaining: ~8m) 96/252 tested (15 survived, 0 timed out)
Mutation testing 39% (elapsed: ~5m, remaining: ~8m) 99/252 tested (15 survived, 0 timed out)
Mutation testing 40% (elapsed: ~5m, remaining: ~8m) 102/252 tested (15 survived, 0 timed out)
Mutation testing 41% (elapsed: ~5m, remaining: ~8m) 105/252 tested (15 survived, 0 timed out)
Mutation testing 43% (elapsed: ~6m, remaining: ~7m) 109/252 tested (17 survived, 0 timed out)
Mutation testing 44% (elapsed: ~6m, remaining: ~7m) 112/252 tested (17 survived, 0 timed out)
Mutation testing 45% (elapsed: ~6m, remaining: ~7m) 115/252 tested (18 survived, 0 timed out)
Mutation testing 46% (elapsed: ~6m, remaining: ~7m) 118/252 tested (20 survived, 0 timed out)
Mutation testing 48% (elapsed: ~6m, remaining: ~7m) 121/252 tested (20 survived, 0 timed out)
Mutation testing 49% (elapsed: ~6m, remaining: ~7m) 124/252 tested (20 survived, 0 timed out)
Mutation testing 50% (elapsed: ~7m, remaining: ~6m) 127/252 tested (20 survived, 0 timed out)
Mutation testing 51% (elapsed: ~7m, remaining: ~6m) 130/252 tested (23 survived, 0 timed out)
Mutation testing 53% (elapsed: ~7m, remaining: ~6m) 134/252 tested (23 survived, 0 timed out)
Mutation testing 54% (elapsed: ~7m, remaining: ~6m) 137/252 tested (23 survived, 0 timed out)
Mutation testing 55% (elapsed: ~7m, remaining: ~6m) 140/252 tested (23 survived, 0 timed out)
Mutation testing 56% (elapsed: ~7m, remaining: ~5m) 143/252 tested (23 survived, 0 timed out)
Mutation testing 57% (elapsed: ~8m, remaining: ~5m) 146/252 tested (23 survived, 0 timed out)
Mutation testing 59% (elapsed: ~8m, remaining: ~5m) 149/252 tested (23 survived, 0 timed out)
Mutation testing 60% (elapsed: ~8m, remaining: ~5m) 152/252 tested (23 survived, 0 timed out)
Mutation testing 61% (elapsed: ~8m, remaining: ~5m) 155/252 tested (25 survived, 0 timed out)
Mutation testing 63% (elapsed: ~8m, remaining: ~5m) 159/252 tested (26 survived, 0 timed out)
Mutation testing 64% (elapsed: ~8m, remaining: ~4m) 162/252 tested (26 survived, 0 timed out)
Mutation testing 65% (elapsed: ~9m, remaining: ~4m) 165/252 tested (26 survived, 0 timed out)
Mutation testing 66% (elapsed: ~9m, remaining: ~4m) 168/252 tested (26 survived, 0 timed out)
Mutation testing 67% (elapsed: ~9m, remaining: ~4m) 171/252 tested (26 survived, 0 timed out)
Mutation testing 69% (elapsed: ~9m, remaining: ~4m) 174/252 tested (27 survived, 0 timed out)
Mutation testing 70% (elapsed: ~9m, remaining: ~4m) 177/252 tested (28 survived, 0 timed out)
Mutation testing 71% (elapsed: ~9m, remaining: ~3m) 181/252 tested (28 survived, 0 timed out)
Mutation testing 73% (elapsed: ~10m, remaining: ~3m) 184/252 tested (28 survived, 0 timed out)
Mutation testing 74% (elapsed: ~10m, remaining: ~3m) 187/252 tested (28 survived, 0 timed out)
Mutation testing 75% (elapsed: ~10m, remaining: ~3m) 190/252 tested (28 survived, 0 timed out)
Mutation testing 76% (elapsed: ~10m, remaining: ~3m) 193/252 tested (28 survived, 0 timed out)
Mutation testing 77% (elapsed: ~10m, remaining: ~3m) 196/252 tested (28 survived, 0 timed out)
Mutation testing 78% (elapsed: ~10m, remaining: ~2m) 199/252 tested (28 survived, 0 timed out)
Mutation testing 80% (elapsed: ~11m, remaining: ~2m) 203/252 tested (29 survived, 0 timed out)
Mutation testing 81% (elapsed: ~11m, remaining: ~2m) 206/252 tested (29 survived, 0 timed out)
Mutation testing 82% (elapsed: ~11m, remaining: ~2m) 209/252 tested (31 survived, 0 timed out)
Mutation testing 84% (elapsed: ~11m, remaining: ~2m) 212/252 tested (32 survived, 0 timed out)
Mutation testing 85% (elapsed: ~11m, remaining: ~2m) 215/252 tested (33 survived, 0 timed out)
Mutation testing 86% (elapsed: ~11m, remaining: ~1m) 218/252 tested (35 survived, 0 timed out)
Mutation testing 87% (elapsed: ~12m, remaining: ~1m) 221/252 tested (35 survived, 0 timed out)
Mutation testing 88% (elapsed: ~12m, remaining: ~1m) 224/252 tested (35 survived, 0 timed out)
Mutation testing 90% (elapsed: ~12m, remaining: ~1m) 227/252 tested (35 survived, 0 timed out)
Mutation testing 91% (elapsed: ~12m, remaining: ~1m) 231/252 tested (36 survived, 0 timed out)
Mutation testing 92% (elapsed: ~12m, remaining: <1m) 234/252 tested (36 survived, 0 timed out)
Mutation testing 94% (elapsed: ~12m, remaining: <1m) 237/252 tested (36 survived, 0 timed out)
Mutation testing 95% (elapsed: ~13m, remaining: <1m) 240/252 tested (36 survived, 0 timed out)
Mutation testing 96% (elapsed: ~13m, remaining: <1m) 243/252 tested (36 survived, 0 timed out)
Mutation testing 97% (elapsed: ~13m, remaining: <1m) 245/252 tested (37 survived, 0 timed out)
Mutation testing 97% (elapsed: ~13m, remaining: <1m) 246/252 tested (37 survived, 1 timed out)
Mutation testing 99% (elapsed: ~13m, remaining: <1m) 250/252 tested (39 survived, 1 timed out)

All tests
  ✓ All tests (killed 212)

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*[a-zA-Z0-9_/:~.$+*-]$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*[a-zA-Z0-9_/:~.$+*-]+$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*[a-zA-Z0-9_/:~.$+*-]?$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/g) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/i) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/m) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/') && string.charAt(string.length - 2) === '/') {

[Survived] PrecomputedMutator
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/') && string.indexOf('/') === string.length - 2) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/' + Math.random())) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.split('').reverse().join('')) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.replace(/[a-zA-Z0-9_]/g, '')) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:[a-zA-Z0-9_-]+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:33
-             props.push(part.slice(1))
+             props.push(part.slice(min + 1))

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:33:30
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.split(" ")[0], ctx)

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.replace("ing", ""), ctx)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.filter(() => true)) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice().reverse()) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.slice(0)) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.filter(policy => policy.name !== 'default')) {

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy.name.toLowerCase(), policy)

[Survived] PrecomputedMutator
src/policymap.ts:30:9
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path.split('.')[0], verb, ctx)

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.values()) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (let verb of verbs) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.reverse()) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.slice()) {

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.concat()) {

[Survived] PrecomputedMutator
src/rule.ts:50:9
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path, ctx, 1) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:50:9
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path, ctx, "foo") && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:60:30
-       const match = path.match(this.regex)
+       const match = path.match(this.regex.source)

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

[Survived] PrecomputedMutator
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (prop !== match[index + 1]) {

[Survived] PrecomputedMutator
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (match[index + 1] !== prop) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   84.52 |      212 |         1 |         39 |        0 |        0 |
 matcher.ts   |   85.71 |       90 |         0 |         15 |        0 |        0 |
 policy.ts    |   81.82 |       36 |         0 |          8 |        0 |        0 |
 policymap.ts |   89.80 |       44 |         0 |          5 |        0 |        0 |
 rule.ts      |   79.63 |       42 |         1 |         11 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m17:25:52 (2474) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m17:25:52 (2474) INFO MutationTestExecutor[39m Done in 13 minutes 53 seconds.

real	13m54.349s
user	18m35.479s
sys	1m22.918s
