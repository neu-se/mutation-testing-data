*** using precomputed mutations ***
[32m10:29:43 (2449) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m10:29:43 (2449) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m10:29:43 (2449) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m10:29:43 (2449) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m10:29:43 (2449) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m10:29:43 (2449) INFO ProjectReader[39m Found 1 of 219 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 87 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.5/mutants.json ***
Mutant 0 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression !== COMPRESSION_LEVEL.uncompressed
Mutant 1 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.high
Mutant 2 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'zip',
  zipAFolderOptions
}
Mutant 3 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions: {
    compression: COMPRESSION_LEVEL.uncompressed
  }
}
Mutant 4 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.medium
Mutant 5 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.high
Mutant 6 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with zipAFolderOptions?.customWriteStream || targetFilePath
Mutant 7 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with !zipAFolderOptions?.customWriteStream || targetFilePath
Mutant 8 in ZipAFolder.ts: targetFilePath replaced with targetFilePath + 'test'
Mutant 9 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.replace('zip', 'tar')
Mutant 10 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.split('/').reverse().join('/')
Mutant 11 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath !== src
Mutant 12 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.length === src.length
Mutant 13 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.includes(src)
Mutant 14 in ZipAFolder.ts: !isGlob(src) replaced with isGlob(src)
Mutant 15 in ZipAFolder.ts: !isGlob(src) replaced with src.startsWith('*')
Mutant 16 in ZipAFolder.ts: isGlob replaced with !isGlob
Mutant 17 in ZipAFolder.ts: src replaced with src + 'foo'
Mutant 18 in ZipAFolder.ts: src replaced with src - 1
Mutant 19 in ZipAFolder.ts: src replaced with src.replace('src', 'foo')
Mutant 20 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.W_OK
Mutant 21 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.X_OK
Mutant 22 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.F_OK
Mutant 23 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.R_OK)
Mutant 24 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.W_OK)
Mutant 25 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK)
Mutant 26 in ZipAFolder.ts: targetBasePath replaced with targetBasePath + 'foo'
Mutant 27 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.substring(0, 1)
Mutant 28 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.split('.')[0]
Mutant 29 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions || zipAFolderOptions.customWriteStream
Mutant 30 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions && !zipAFolderOptions.customWriteStream
Mutant 31 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions.customWriteStream ? true : false
Mutant 32 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, {})
Mutant 33 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, {
  gzip: true
})
Mutant 34 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(format, {
  zlib: {
    level: 9
  }
})
Mutant 35 in ZipAFolder.ts: archiver replaced with archiver.file
Mutant 36 in ZipAFolder.ts: archiver replaced with archiver.directory
Mutant 37 in ZipAFolder.ts: archiver replaced with archiver.finalize
Mutant 38 in ZipAFolder.ts: format replaced with "tar"
Mutant 39 in ZipAFolder.ts: format replaced with "zip"
Mutant 40 in ZipAFolder.ts: format replaced with "gzip"
Mutant 41 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions || null
Mutant 42 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions && {}
Mutant 43 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions ?? {}
Mutant 44 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('error', resolve)
Mutant 45 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('finish', reject)
Mutant 46 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('close', reject)
Mutant 47 in ZipAFolder.ts: output.on replaced with output.off
Mutant 48 in ZipAFolder.ts: output.on replaced with output.emit
Mutant 49 in ZipAFolder.ts: output.on replaced with output.pipe
Mutant 50 in ZipAFolder.ts: 'close' replaced with 'end'
Mutant 51 in ZipAFolder.ts: 'close' replaced with 'finish'
Mutant 52 in ZipAFolder.ts: 'close' replaced with 'error'
Mutant 53 in ZipAFolder.ts: resolve replaced with reject
Mutant 54 in ZipAFolder.ts: resolve replaced with resolve(new Error('Test error'))
Mutant 55 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('error', resolve)
Mutant 56 in ZipAFolder.ts: output.on replaced with output.off
Mutant 57 in ZipAFolder.ts: 'error' replaced with 'end'
Mutant 58 in ZipAFolder.ts: 'error' replaced with 'finish'
Mutant 59 in ZipAFolder.ts: 'error' replaced with 'close'
Mutant 60 in ZipAFolder.ts: output replaced with output.write('buggy')
Mutant 61 in ZipAFolder.ts: output replaced with undefined
Mutant 62 in ZipAFolder.ts: output replaced with output.end()
Mutant 63 in ZipAFolder.ts: isGlob(src) replaced with !isGlob(src)
Mutant 64 in ZipAFolder.ts: isGlob(src) replaced with isGlob(src) && src.length > 0
Mutant 65 in ZipAFolder.ts: isGlob replaced with isGlob === false
Mutant 66 in ZipAFolder.ts: isGlob replaced with isGlob !== true
Mutant 67 in ZipAFolder.ts: src.split replaced with src.substring
Mutant 68 in ZipAFolder.ts: src.split replaced with src.toUpperCase
not replacing src.split with src.substring
not replacing src.split with src.substring
not replacing src.split with src.toUpperCase
not replacing src.split with src.toUpperCase
Mutant 69 in ZipAFolder.ts: ',' replaced with ' '
Mutant 70 in ZipAFolder.ts: ',' replaced with ''
Mutant 71 in ZipAFolder.ts: ',' replaced with 'hello'
Mutant 72 in ZipAFolder.ts: globPart replaced with globPart.replace('glob', 'bug')
Mutant 73 in ZipAFolder.ts: globPart replaced with globPart.substring(1)
Mutant 74 in ZipAFolder.ts: globPart replaced with globPart.split('').reverse().join('')
Mutant 75 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, true)
Mutant 76 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, false, {
  dereference: true
})
Mutant 77 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, false, {
  exclude: ['**/.*']
})
Mutant 78 in ZipAFolder.ts: src replaced with src.slice(1)
Mutant 79 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 80 in ZipAFolder.ts: src replaced with src.split('').reverse().join('')
Mutant 81 in ZipAFolder.ts: false replaced with true
Mutant 82 in ZipAFolder.ts: false replaced with '*'
Mutant 83 in ZipAFolder.ts: false replaced with '**/*'
Mutant 84 in ZipAFolder.ts: zipArchive.finalize replaced with zipArchive.append
Mutant 85 in ZipAFolder.ts: zipArchive.finalize replaced with zipArchive.destroy
Mutant 86 in ZipAFolder.ts: zipArchive.finalize replaced with zipArchive.pipe
[32m10:29:44 (2449) INFO Instrumenter[39m Instrumented 1 source file(s) with 87 mutant(s)
[32m10:29:44 (2449) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m10:29:45 (2449) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m10:29:45 (2449) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m10:29:51 (2449) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 5 seconds (net 5889 ms, overhead 1 ms).
Mutation testing 2% (elapsed: <1m, remaining: ~7m) 2/87 tested (0 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~9m) 3/87 tested (1 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~8m) 5/87 tested (2 survived, 0 timed out)
Mutation testing 8% (elapsed: <1m, remaining: ~7m) 7/87 tested (2 survived, 0 timed out)
Mutation testing 11% (elapsed: <1m, remaining: ~6m) 10/87 tested (3 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~6m) 12/87 tested (3 survived, 0 timed out)
Mutation testing 16% (elapsed: ~1m, remaining: ~6m) 14/87 tested (5 survived, 0 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~5m) 16/87 tested (5 survived, 0 timed out)
Mutation testing 21% (elapsed: ~1m, remaining: ~5m) 19/87 tested (5 survived, 0 timed out)
Mutation testing 22% (elapsed: ~1m, remaining: ~5m) 20/87 tested (6 survived, 0 timed out)
Mutation testing 25% (elapsed: ~1m, remaining: ~5m) 22/87 tested (8 survived, 0 timed out)
Mutation testing 27% (elapsed: ~2m, remaining: ~5m) 24/87 tested (10 survived, 0 timed out)
Mutation testing 29% (elapsed: ~2m, remaining: ~5m) 26/87 tested (12 survived, 0 timed out)
Mutation testing 33% (elapsed: ~2m, remaining: ~4m) 29/87 tested (13 survived, 0 timed out)
Mutation testing 34% (elapsed: ~2m, remaining: ~4m) 30/87 tested (13 survived, 0 timed out)
Mutation testing 36% (elapsed: ~2m, remaining: ~4m) 32/87 tested (13 survived, 0 timed out)
Mutation testing 39% (elapsed: ~2m, remaining: ~4m) 34/87 tested (13 survived, 0 timed out)
Mutation testing 43% (elapsed: ~3m, remaining: ~3m) 38/87 tested (13 survived, 0 timed out)
Mutation testing 45% (elapsed: ~3m, remaining: ~3m) 40/87 tested (13 survived, 0 timed out)
Mutation testing 48% (elapsed: ~3m, remaining: ~3m) 42/87 tested (14 survived, 0 timed out)
Mutation testing 50% (elapsed: ~3m, remaining: ~3m) 44/87 tested (15 survived, 0 timed out)
Mutation testing 50% (elapsed: ~3m, remaining: ~3m) 44/87 tested (15 survived, 0 timed out)
Mutation testing 52% (elapsed: ~3m, remaining: ~3m) 46/87 tested (15 survived, 1 timed out)
Mutation testing 54% (elapsed: ~4m, remaining: ~3m) 47/87 tested (15 survived, 1 timed out)
Mutation testing 55% (elapsed: ~4m, remaining: ~3m) 48/87 tested (15 survived, 2 timed out)
Mutation testing 56% (elapsed: ~4m, remaining: ~3m) 49/87 tested (15 survived, 3 timed out)
Mutation testing 57% (elapsed: ~4m, remaining: ~3m) 50/87 tested (15 survived, 3 timed out)
Mutation testing 58% (elapsed: ~4m, remaining: ~3m) 51/87 tested (15 survived, 4 timed out)
Mutation testing 59% (elapsed: ~4m, remaining: ~3m) 52/87 tested (16 survived, 4 timed out)
Mutation testing 60% (elapsed: ~5m, remaining: ~3m) 53/87 tested (16 survived, 5 timed out)
Mutation testing 64% (elapsed: ~5m, remaining: ~2m) 56/87 tested (17 survived, 5 timed out)
Mutation testing 65% (elapsed: ~5m, remaining: ~2m) 57/87 tested (18 survived, 5 timed out)
Mutation testing 67% (elapsed: ~5m, remaining: ~2m) 59/87 tested (19 survived, 5 timed out)
Mutation testing 72% (elapsed: ~5m, remaining: ~2m) 63/87 tested (20 survived, 5 timed out)
Mutation testing 74% (elapsed: ~5m, remaining: ~1m) 65/87 tested (21 survived, 5 timed out)
Mutation testing 77% (elapsed: ~6m, remaining: ~1m) 67/87 tested (21 survived, 5 timed out)
Mutation testing 79% (elapsed: ~6m, remaining: ~1m) 69/87 tested (21 survived, 5 timed out)
Mutation testing 81% (elapsed: ~6m, remaining: ~1m) 71/87 tested (23 survived, 5 timed out)
Mutation testing 83% (elapsed: ~6m, remaining: ~1m) 73/87 tested (25 survived, 5 timed out)
Mutation testing 86% (elapsed: ~6m, remaining: ~1m) 75/87 tested (27 survived, 5 timed out)
Mutation testing 87% (elapsed: ~6m, remaining: <1m) 76/87 tested (28 survived, 5 timed out)
Mutation testing 90% (elapsed: ~7m, remaining: <1m) 79/87 tested (30 survived, 5 timed out)
Mutation testing 93% (elapsed: ~7m, remaining: <1m) 81/87 tested (30 survived, 5 timed out)
Mutation testing 95% (elapsed: ~7m, remaining: <1m) 83/87 tested (32 survived, 5 timed out)
Mutation testing 97% (elapsed: ~7m, remaining: <1m) 85/87 tested (33 survived, 5 timed out)
Mutation testing 98% (elapsed: ~7m, remaining: <1m) 86/87 tested (33 survived, 6 timed out)

All tests
  ✓ All tests (killed 48)

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'zip',
+     zipAFolderOptions
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'tar',
+     zipAFolderOptions: {
+       compression: COMPRESSION_LEVEL.uncompressed
+     }
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:115:57
-               const targetBasePath: string = path.dirname(targetFilePath);
+               const targetBasePath: string = path.dirname(targetFilePath + 'test');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.length === src.length) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.includes(src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:46
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src.replace('src', 'foo'), fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.F_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK | fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:42
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath.split('.')[0], fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:64
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || null);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:135:64
-           const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
+           const zipArchive: archiver.Archiver = archiver(format, archiverOptions ?? {});

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:23
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.on('error', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.off('error', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('end', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('close', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:17
-               if (isGlob(src)) {
+               if (isGlob(src) && src.length > 0) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split(' ').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split('').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:144:27
-                   src.split(',').forEach((globPart) => {
+                   src.split('hello').forEach((globPart) => {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.replace('glob', 'bug'));

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.substring(1));

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart.split('').reverse().join(''));

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, false, {
+     dereference: true
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, false, {
+     exclude: ['**/.*']
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, '*');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, '**/*');

Ran 0.93 tests per mutant on average.
---------------|---------|----------|-----------|------------|----------|----------|
File           | % score | # killed | # timeout | # survived | # no cov | # errors |
---------------|---------|----------|-----------|------------|----------|----------|
All files      |   62.07 |       48 |         6 |         33 |        0 |        0 |
 ZipAFolder.ts |   62.07 |       48 |         6 |         33 |        0 |        0 |
---------------|---------|----------|-----------|------------|----------|----------|
[32m10:37:33 (2449) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/reports/mutation/mutation.html
[32m10:37:33 (2449) INFO MutationTestExecutor[39m Done in 7 minutes 50 seconds.

real	7m51.620s
user	8m23.839s
sys	1m1.368s
