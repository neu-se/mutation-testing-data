{"files":{"lib/ZipAFolder.ts":{"language":"typescript","mutants":[{"id":"6","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.high","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.552 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 47096\n    Received:   24232286\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.23 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.23 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        5.681 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"5","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.medium","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.917 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 189435\n    Received:   211416\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.59 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.59 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        6.041 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"0","mutatorName":"PrecomputedMutator","replacement":"o.compression !== COMPRESSION_LEVEL.uncompressed","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.016 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 277390\n    Received:   24239616\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.59 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.59 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        6.407 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"2","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.medium","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.278 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   24239616\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    50.88 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    50.88 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        6.447 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"1","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.high","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.323 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 74759\n    Received:   24239616\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |    97.1 |    51.23 |     100 |   97.05 |                   \n ZipAFolder.ts |    97.1 |    51.23 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        6.438 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"4","mutatorName":"PrecomputedMutator","replacement":"{\n  src,\n  targetFilePath: tarFilePath,\n  format: 'tar',\n  zipAFolderOptions: {\n    compression: COMPRESSION_LEVEL.uncompressed\n  }\n}","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.251 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 260863\n    Received:   24239616\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.23 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.23 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        6.411 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"3","mutatorName":"PrecomputedMutator","replacement":"{\n  src,\n  targetFilePath: tarFilePath,\n  format: 'zip',\n  zipAFolderOptions\n}","status":"Survived","testsCompleted":1,"location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"8","mutatorName":"PrecomputedMutator","replacement":"!zipAFolderOptions?.customWriteStream && !targetFilePath","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"The \\\"path\\\" argument must be of type string. Received undefined\"\n\n          164 |     let output: WriteStream;\n          165 |     if (stryMutAct_9fa48(\"8\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"7\") ? zipAFolderOptions?.customWriteStream || targetFilePath : (stryCov_9fa48(\"7\", \"8\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 166 |       const targetBasePath: string = stryMutAct_9fa48(\"11\") ? path.join(targetFilePath) : stryMutAct_9fa48(\"10\") ? path.extname(targetFilePath) : stryMutAct_9fa48(\"9\") ? path.basename(targetFilePath) : (stryCov_9fa48(\"9\", \"10\", \"11\"), path.dirname(stryMutAct_9fa48(\"14\") ? targetFilePath + 'foo' : stryMutAct_9fa48(\"13\") ? targetFilePath.substring(1) : stryMutAct_9fa48(\"12\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"12\", \"13\", \"14\"), targetFilePath)));\n              |                                                                                                                                                                                                                                                 ^\n          167 |       if (stryMutAct_9fa48(\"17\") ? targetBasePath.length === 0 : stryMutAct_9fa48(\"16\") ? targetBasePath === '.' : stryMutAct_9fa48(\"15\") ? targetBasePath !== src : (stryCov_9fa48(\"15\", \"16\", \"17\"), targetBasePath === src)) {\n          168 |         throw new Error('Source and target folder must be different.');\n          169 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:166:241)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:36:24)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:37:19)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          180 |       output = zipAFolderOptions?.customWriteStream;\n          181 |     } else {\n        > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          183 |     }\n          184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n          185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:128:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at compress (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at compress (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at compress (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to wr\n---------------|---------|----------|---------|---------|-----------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    82.6 |    37.45 |   91.66 |   82.35 |                       \n\n ZipAFolder.ts |    82.6 |    37.45 |   91.66 |   82.35 | 26,41,167-178,204-205 \n\n---------------|---------|----------|---------|---------|-----------------------\n\nite to.\"\n\n          180 |       output = zipAFolderOptions?.customWriteStream;\n          181 |     } else {\n        > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          183 |     }\n          184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n          185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at compress (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at compress (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      180 |       output = zipAFolderOptions?.customWriteStream;\n      181 |     } else {\n    > 182 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      183 |     }\n      184 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"50\") ? archiver(format, {\n      185 |       store: true\n\n      at Function.compress (lib/ZipAFolder.ts:182:13)\n      at compress (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       17 failed, 1 skipped, 4 passed, 22 total\nSnapshots:   0 total\nTime:        4.859 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"9","mutatorName":"PrecomputedMutator","replacement":"path.basename","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access 'test.zip'\"\n\n          174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n          179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access 'test.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'testUNCOMPRESSED.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'test.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Per\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    91.3 |    46.64 |   91.66 |   91.17 |                       \n\n ZipAFolder.ts |    91.3 |    46.64 |   91.66 |   91.17 | 26,41,168,178,204-205 \n---------------|---------|----------|---------|---------|-----------------------\n\nmission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.multi.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access 'test.tgz'\"\n\n          174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n          179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access 'test.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.acce\nss(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'testUNCOMPRESSED.tar'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'test.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A\n-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access 'test.globbed.multi.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 1 skipped, 9 passed, 22 total\nSnapshots:   0 total\nTime:        4.877 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":115},"start":{"column":44,"line":115}}},{"id":"10","mutatorName":"PrecomputedMutator","replacement":"path.extname","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access '.zip'\"\n\n          174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n          179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access '.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    91.3 |    46.28 |   91.66 |   91.17 |                       \n\n ZipAFolder.ts |    91.3 |    46.28 |   91.66 |   91.17 | 26,41,168,178,204-205 \n\n---------------|---------|----------|---------|---------|-----------------------\n\n);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access '.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '.zip'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access '.tgz'\"\n\n          174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n          179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access '.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? f\ns.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '.tar'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access '.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file\n or directory, access '.tgz'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 1 skipped, 9 passed, 22 total\nSnapshots:   0 total\nTime:        4.943 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":115},"start":{"column":44,"line":115}}},{"id":"13","mutatorName":"PrecomputedMutator","replacement":"targetFilePath.substring(1)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test/data'\"\n\n          174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n          179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"3\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n\n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    91.3 |    47.34 |   91.66 |   91.17 |                       \n\n ZipAFolder.ts |    91.3 |    47.34 |   91.66 |   91.17 | 26,41,168,178,204-205 \n\n---------------|---------|----------|---------|---------|-----------------------\n\n7\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test/data'\"\n\n          174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n          179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<ano\nnymous> (test/tests-ZipAFolder.ts:112:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R\n_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access 'Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test'\n\n      174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      175 |       } catch (e: any) {\n    > 176 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      177 |       }\n      178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n      179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 1 skipped, 9 passed, 22 total\nSnapshots:   0 total\nTime:        4.932 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":71,"line":115},"start":{"column":57,"line":115}}},{"id":"7","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions?.customWriteStream || targetFilePath","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.257 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 301509\n    Received:   452131\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      164 |     let output: WriteStream;\n      165 |     if (stryMutAct_9fa48(\"8\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"7\") ? zipAFolderOptions?.customWriteStream || targetFilePath : (stryCov_9fa48(\"7\", \"8\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 166 |       const targetBasePath: string = stryMutAct_9fa48(\"11\") ? path.join(targetFilePath) : stryMutAct_9fa48(\"10\") ? path.extname(targetFilePath) : stryMutAct_9fa48(\"9\") ? path.basename(targetFilePath) : (stryCov_9fa48(\"9\", \"10\", \"11\"), path.dirname(stryMutAct_9fa48(\"14\") ? targetFilePath + 'foo' : stryMutAct_9fa48(\"13\") ? targetFilePath.substring(1) : stryMutAct_9fa48(\"12\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"12\", \"13\", \"14\"), targetFilePath)));\n          |                                                                                                                                                                                                                                                 ^\n      167 |       if (stryMutAct_9fa48(\"17\") ? targetBasePath.length === 0 : stryMutAct_9fa48(\"16\") ? targetBasePath === '.' : stryMutAct_9fa48(\"15\") ? targetBasePath !== src : (stryCov_9fa48(\"15\", \"16\", \"17\"), targetBasePath === src)) {\n      168 |         throw new Error('Source and target folder must be different.');\n      169 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:166:241)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      164 |     let output: WriteStream;\n      165 |     if (stryMutAct_9fa48(\"8\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"7\") ? zipAFolderOptions?.customWriteStream || targetFilePath : (stryCov_9fa48(\"7\", \"8\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 166 |       const targetBasePath: string = stryMutAct_9fa48(\"11\") ? path.join(targetFilePath) : stryMutAct_9fa48(\"10\") ? path.extname(targetFilePath) : stryMutAct_9fa48(\"9\") ? path.basename(targetFilePath) : (stryCov_9fa48(\"9\", \"10\", \"11\"), path.dirname(stryMutAct_9fa48(\"14\") ? targetFilePath + 'foo' : stryMutAct_9fa48(\"13\") ? targetFilePath.substring(1) : stryMutAct_9fa48(\"12\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"12\", \"13\", \"14\"), targetFilePath)));\n          |                                                                                                                                                                                                                                                 ^\n      167 |       if (stryMutAct_9fa48(\"17\") ? targetBasePath.length === 0 : stryMutAct_9fa48(\"16\") ? targetBasePath === '.' : stryMutAct_9fa48(\"15\") ? targetBasePath !== src : (stryCov_9fa48(\"15\", \"16\", \"17\"), targetBasePath === src)) {\n      168 |         throw new Error('Source and target folder must be different.');\n      169 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:166:241)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.65 |    50.17 |     100 |   95.58 |                   \n ZipAFolder.ts |   95.65 |    50.17 |     100 |   95.58 | 26,41,180         \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 1 skipped, 16 passed, 22 total\nSnapshots:   0 total\nTime:        6.417 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"11","mutatorName":"PrecomputedMutator","replacement":"path.join","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.054 s)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      48 |\n      49 |     it('ZIP test folder and zip target in same directory should throw an error', async () => {\n    > 50 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), testSameDirectoryZIP)).rejects.toThrow(\n         |               ^\n      51 |             /Source and target folder must be different./\n      52 |         );\n      53 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:15)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox5139793/test/data/test.tgz'\"\n\n          174 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.unlink(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.writeFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.readFile(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"33\") ? fs.promises.access(targetBasePath, fs.constants.F_OK) : stryMutAct_9fa48(\"32\") ? fs.promises.access(targetBasePath, fs.constants.W_OK) : stryMutAct_9fa48(\"31\") ? fs.promises.access(targetBasePath, fs.constants.R_OK) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? targetBasePath.split('/').reverse().join('/') : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"41\") ? fs.constants.R_OK ^ fs.constants.W_OK : stryMutAct_9fa48(\"40\") ? fs.constants.R_OK & fs.constants.W_OK : (stryCov_9fa48(\"40\", \"41\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n          175 |       } catch (e: any) {\n        > 176 |         throw new Error(`Permission error: ${e.message}`);\n              |               ^\n          177 |       }\n          178 |       output = fs.createWriteStream(stryMutAct_9fa48(\"44\") ? path.join(targetFilePath, \"foo\") : stryMutAct_9fa48(\"43\") ? targetFilePath + \".txt\" : stryMutAct_9fa48(\"42\") ? \"foo\" : (stryCov_9fa48(\"42\", \"43\", \"44\"), targetFilePath));\n          179 |     } else if (stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream !== null : stryMutAct_9fa48(\"46\") ? zipAFolderOptions?.customWriteStream === undefined : stryMutAct_9fa48(\"45\") ? !zipAFolderOptions || !zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"45\", \"46\", \"47\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:176:15)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:9)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 189435\n    Received:   864722\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.65 |    49.46 |     100 |   95.58 |                   \n\n ZipAFolder.ts |   95.65 |    49.46 |     100 |   95.58 | 26,41,168         \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 1 skipped, 18 passed, 22 total\nSnapshots:   0 total\nTime:        8.164 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":115},"start":{"column":44,"line":115}}},{"id":"12","mutatorName":"PrecomputedMutator","replacement":"targetFilePath.toUpperCase()","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.412 s)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      48 |\n      49 |     it('ZIP test folder and zip target in same directory should throw an error', async () => {\n    > 50 |         await expect(zipafolder.zip(path.resolve(__dirname, 'data/'), testSameDirectoryZIP)).rejects.toThrow(\n         |               ^\n      51 |             /Source and target folder must be different./\n      52 |         );\n      53 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:15)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow()\n\n    Received promise resolved instead of rejected\n    Resolved to value: undefined\n\n      110 |\n      111 |     it('TGZ test folder and tar target in same directory should throw an error', async () => {\n    > 112 |         await expect(zipafolder.tar(path.resolve(__dirname, 'data/'), testSameDirectoryTAR)).rejects.toThrow(\n          |               ^\n      113 |             /Source and target folder must be different./\n      114 |         );\n      115 |     });\n\n      at expect (../../node_modules/expect/build/index.js:113:15)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:15)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   95.65 |    51.23 |     100 |   95.58 |                   \n\n ZipAFolder.ts |   95.65 |    51.23 |     100 |   95.58 | 26,41,168         \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        8.509 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":71,"line":115},"start":{"column":57,"line":115}}},{"id":"14","mutatorName":"PrecomputedMutator","replacement":"targetFilePath + 'foo'","status":"Timeout","location":{"end":{"column":71,"line":115},"start":{"column":57,"line":115}}},{"id":"15","mutatorName":"PrecomputedMutator","replacement":"targetBasePath !== src","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"16","mutatorName":"PrecomputedMutator","replacement":"targetBasePath === '.'","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"17","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.length === 0","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"18","mutatorName":"PrecomputedMutator","replacement":"isGlob(src)","status":"Timeout","location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"19","mutatorName":"PrecomputedMutator","replacement":"src.includes('*')","status":"Timeout","location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"20","mutatorName":"PrecomputedMutator","replacement":"src.match(/[*?]/)","status":"Timeout","location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"21","mutatorName":"PrecomputedMutator","replacement":"!isGlob","status":"Timeout","location":{"end":{"column":28,"line":121},"start":{"column":22,"line":121}}},{"id":"22","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(src, fs.constants.W_OK)","status":"Timeout","location":{"end":{"column":69,"line":122},"start":{"column":27,"line":122}}},{"id":"23","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(src, fs.constants.X_OK)","status":"Timeout","location":{"end":{"column":69,"line":122},"start":{"column":27,"line":122}}},{"id":"24","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(src, fs.constants.F_OK)","status":"Timeout","location":{"end":{"column":69,"line":122},"start":{"column":27,"line":122}}},{"id":"25","mutatorName":"PrecomputedMutator","replacement":"src + \"foo\"","status":"Timeout","location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"26","mutatorName":"PrecomputedMutator","replacement":"src.toUpperCase()","status":"Timeout","location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"27","mutatorName":"PrecomputedMutator","replacement":"src.split(\"\").reverse().join(\"\")","status":"Timeout","location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"28","mutatorName":"PrecomputedMutator","replacement":"fs.constants.W_OK","status":"Timeout","location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"29","mutatorName":"PrecomputedMutator","replacement":"fs.constants.X_OK","status":"Timeout","location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"30","mutatorName":"PrecomputedMutator","replacement":"fs.constants.F_OK","status":"Timeout","location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"31","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.R_OK)","status":"Timeout","location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"32","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.W_OK)","status":"Timeout","location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"33","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.F_OK)","status":"Timeout","location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"34","mutatorName":"PrecomputedMutator","replacement":"fs.promises.readFile","status":"Timeout","location":{"end":{"column":41,"line":124},"start":{"column":23,"line":124}}},{"id":"35","mutatorName":"PrecomputedMutator","replacement":"fs.promises.writeFile","status":"Timeout","location":{"end":{"column":41,"line":124},"start":{"column":23,"line":124}}},{"id":"36","mutatorName":"PrecomputedMutator","replacement":"fs.promises.unlink","status":"Timeout","location":{"end":{"column":41,"line":124},"start":{"column":23,"line":124}}},{"id":"37","mutatorName":"PrecomputedMutator","replacement":"targetBasePath + 'foo'","status":"Timeout","location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"38","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.toUpperCase()","status":"Timeout","location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"39","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.split('/').reverse().join('/')","status":"Timeout","location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"40","mutatorName":"PrecomputedMutator","replacement":"fs.constants.R_OK & fs.constants.W_OK","status":"Timeout","location":{"end":{"column":95,"line":124},"start":{"column":58,"line":124}}},{"id":"41","mutatorName":"PrecomputedMutator","replacement":"fs.constants.R_OK ^ fs.constants.W_OK","status":"Timeout","location":{"end":{"column":95,"line":124},"start":{"column":58,"line":124}}},{"id":"42","mutatorName":"PrecomputedMutator","replacement":"\"foo\"","status":"Timeout","location":{"end":{"column":57,"line":128},"start":{"column":43,"line":128}}},{"id":"43","mutatorName":"PrecomputedMutator","replacement":"targetFilePath + \".txt\"","status":"Timeout","location":{"end":{"column":57,"line":128},"start":{"column":43,"line":128}}},{"id":"44","mutatorName":"PrecomputedMutator","replacement":"path.join(targetFilePath, \"foo\")","status":"Timeout","location":{"end":{"column":57,"line":128},"start":{"column":43,"line":128}}},{"id":"45","mutatorName":"PrecomputedMutator","replacement":"!zipAFolderOptions || !zipAFolderOptions.customWriteStream","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"46","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions?.customWriteStream === undefined","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"47","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions?.customWriteStream !== null","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"48","mutatorName":"PrecomputedMutator","replacement":"archiver(format, {\n  gzip: true\n})","status":"Timeout","location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"53","mutatorName":"PrecomputedMutator","replacement":"\"gzip\"","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : s\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   84.05 |    35.68 |   83.33 |   83.82 |                   \n\n ZipAFolder.ts |   84.05 |    35.68 |   83.33 |   83.82 | 26,41,199-214     \n\n---------------|---------|----------|---------|---------|-------------------\n\ntryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    create(gzip): format not registered\n\n      190 |     }) : stryMutAct_9fa48(\"48\") ? archiver(format, {\n      191 |       gzip: true\n    > 192 |     }) : (stryCov_9fa48(\"48\", \"49\", \"50\"), archiver(stryMutAct_9fa48(\"53\") ? \"gzip\" : stryMutAct_9fa48(\"52\") ? \"zip\" : stryMutAct_9fa48(\"51\") ? \"tar\" : (stryCov_9fa48(\"51\", \"52\", \"53\"), format), stryMutAct_9fa48(\"56\") ? archiverOptions ? {\n          |                                            ^\n      193 |       gzip: true\n      194 |     } : {} : stryMutAct_9fa48(\"55\") ? archiverOptions && {\n      195 |       gzip: true\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:192:44)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.839 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":135},"start":{"column":56,"line":135}}},{"id":"49","mutatorName":"PrecomputedMutator","replacement":"archiver(format, {\n  zlib: {\n    level: 9\n  }\n})","status":"Timeout","location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"50","mutatorName":"PrecomputedMutator","replacement":"archiver(format, {\n  store: true\n})","status":"Timeout","location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"51","mutatorName":"PrecomputedMutator","replacement":"\"tar\"","status":"Timeout","location":{"end":{"column":62,"line":135},"start":{"column":56,"line":135}}},{"id":"52","mutatorName":"PrecomputedMutator","replacement":"\"zip\"","status":"Timeout","location":{"end":{"column":62,"line":135},"start":{"column":56,"line":135}}},{"id":"54","mutatorName":"PrecomputedMutator","replacement":"archiverOptions || {\n  gzip: true\n}","status":"Timeout","location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"55","mutatorName":"PrecomputedMutator","replacement":"archiverOptions && {\n  gzip: true\n}","status":"Timeout","location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"56","mutatorName":"PrecomputedMutator","replacement":"archiverOptions ? {\n  gzip: true\n} : {}","status":"Timeout","location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"57","mutatorName":"PrecomputedMutator","replacement":"output.on('error', reject)","status":"Timeout","location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"58","mutatorName":"PrecomputedMutator","replacement":"output.on('finish', resolve)","status":"Timeout","location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"59","mutatorName":"PrecomputedMutator","replacement":"output.on('end', resolve)","status":"Timeout","location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"60","mutatorName":"PrecomputedMutator","replacement":"output.off","status":"Timeout","location":{"end":{"column":22,"line":138},"start":{"column":13,"line":138}}},{"id":"61","mutatorName":"PrecomputedMutator","replacement":"'end'","status":"Timeout","location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"62","mutatorName":"PrecomputedMutator","replacement":"'finish'","status":"Timeout","location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"63","mutatorName":"PrecomputedMutator","replacement":"'error'","status":"Timeout","location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"64","mutatorName":"PrecomputedMutator","replacement":"reject","status":"Timeout","location":{"end":{"column":39,"line":138},"start":{"column":32,"line":138}}},{"id":"65","mutatorName":"PrecomputedMutator","replacement":"resolve(new Error('Something went wrong'))","status":"Timeout","location":{"end":{"column":39,"line":138},"start":{"column":32,"line":138}}},{"id":"66","mutatorName":"PrecomputedMutator","replacement":"resolve(null)","status":"Timeout","location":{"end":{"column":39,"line":138},"start":{"column":32,"line":138}}},{"id":"67","mutatorName":"PrecomputedMutator","replacement":"output.on('close', resolve)","status":"Timeout","location":{"end":{"column":39,"line":139},"start":{"column":13,"line":139}}},{"id":"68","mutatorName":"PrecomputedMutator","replacement":"output.on('error', resolve)","status":"Timeout","location":{"end":{"column":39,"line":139},"start":{"column":13,"line":139}}},{"id":"69","mutatorName":"PrecomputedMutator","replacement":"output.on('end', reject)","status":"Timeout","location":{"end":{"column":39,"line":139},"start":{"column":13,"line":139}}},{"id":"70","mutatorName":"PrecomputedMutator","replacement":"output.off","status":"Timeout","location":{"end":{"column":22,"line":139},"start":{"column":13,"line":139}}},{"id":"71","mutatorName":"PrecomputedMutator","replacement":"output.addEventListener","status":"Timeout","location":{"end":{"column":22,"line":139},"start":{"column":13,"line":139}}},{"id":"72","mutatorName":"PrecomputedMutator","replacement":"'close'","status":"Timeout","location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"73","mutatorName":"PrecomputedMutator","replacement":"'finish'","status":"Timeout","location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"74","mutatorName":"PrecomputedMutator","replacement":"'end'","status":"Timeout","location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"76","mutatorName":"PrecomputedMutator","replacement":"console.log('something went wrong')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.215 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"\n60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"5\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    88.4 |     43.1 |   91.66 |   88.23 |                   \n\n ZipAFolder.ts |    88.4 |     43.1 |   91.66 |   88.23 | 26,41,202-214     \n\n---------------|---------|----------|---------|---------|-------------------\n\n9\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\"\n, \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')\n) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      199 |     return new Promise((resolve, reject) => {\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n    > 201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n          |                                                                                                                                                                                                                                                                                                                                                         ^\n      202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n\n      at on (lib/ZipAFolder.ts:201:345)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        6.734 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":38,"line":139},"start":{"column":32,"line":139}}},{"id":"75","mutatorName":"PrecomputedMutator","replacement":"resolve","status":"Timeout","location":{"end":{"column":38,"line":139},"start":{"column":32,"line":139}}},{"id":"77","mutatorName":"PrecomputedMutator","replacement":"output.end()","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.905 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    write after end\n\n      at Archiver.ondata (../../node_modules/readable-stream/lib/_stream_readable.js:629:20)\n      at addChunk (../../node_modules/readable-stream/lib/_stream_readable.js:279:12)\n      at readableAddChunk (../../node_modules/readable-stream/lib/_stream_readable.js:262:11)\n      at Archiver.Object.<anonymous>.Readable.push (../../node_modules/readable-stream/lib/_stream_readable.js:228:10)\n      at Archiver.Object.<anonymous>.Transform.push (../../node_modules/readable-stream/lib/_stream_transform.js:132:32)\n      at Archiver.afterTransform (../../node_modules/readable-stream/lib/_stream_transform.js:85:10)\n      at Archiver.Object.<anonymous>.Archiver._transform (../../node_modules/archiver/lib/core.js:479:3)\n      at Archiver.Object.<anonymous>.Transform._read (../../node_modules/readable-stream/lib/_stream_transform.js:166:10)\n      at Archiver.Object.<anonymous>.Transform._write (../../node_modules/readable-stream/lib/_stream_transform.js:155:83)\n      at doWrite (../../node_modules/readable-stream/lib/_stream_writable.js:390:139)\n      at writeOrBuffer (../../node_modules/readable-stream/lib/_stream_writable.js:381:5)\n      at Archiver.Object.<anonymous>.Writable.write (../../node_modules/readable-stream/lib/_stream_writable.js:302:11)\n      at Object.<anonymous>.module.exports.ondata (../../node_modules/readable-stream/lib/_stream_readable.js:629:20)\n      at addChunk (../../node_modules/readable-stream/lib/_stream_readable.js:279:12)\n      at readableAddChunk (../../node_modules/readable-stream/lib/_stream_readable.js:262:11)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Readable.push (../../node_modules/readable-stream/lib/_stream_readable.js:228:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Transform.push (../../node_modules/readable-stream/lib/_stream_transform.js:132:32)\n      at Object.<anonymous>.module.exports.afterTransform (../../node_modules/readable-stream/lib/_stream_transform.js:85:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ArchiveOutputStream._transform (../../node_modules/compress-commons/lib/archivers/archive-output-stream.js:54:3)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Transform._read (../../node_modules/readable-stream/lib/_stream_transform.js:166:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Transform._write (../../node_modules/readable-stream/lib/_stream_transform.js:155:83)\n      at doWrite (../../node_modules/readable-stream/lib/_stream_writable.js:390:139)\n      at writeOrBuffer (../../node_modules/readable-stream/lib/_stream_writable.js:381:5)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Writable.write (../../node_modules/readable-stream/lib/_stream_writable.js:302:11)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ArchiveOutputStream.write (../../node_modules/compress-commons/lib/archivers/archive-output-stream.js:116:36)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ZipArchiveOutputStream._writeLocalFileHeader (../../node_modules/compress-commons/lib/archivers/zip/zip-archive-output-stream.js:390:8)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ZipArchiveOutputStream._appendBuffer (../../node_modules/compress-commons/lib/archivers/zip/zip-archive-output-stream.js:74:8)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ArchiveOutputStream.entry (../../node_modules/compress-commons/lib/archivers/archive-output-stream.js:86:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ZipStream.entry (../../node_modules/zip-stream/index.js:164:49)\n      at Zip.Object.<anonymous>.Zip.append (../../node_modules/archiver/lib/plugins/zip.js:56:15)\n      at Archiver.Object.<anonymous>.Archiver._moduleAppend (../../node_modules/archiver/lib/core.js:179:16)\n      at Archiver.Object.<anonymous>.Archiver._onQueueTask (../../node_modules/archiver/lib/core.js:405:8)\n      at ../../node_modules/async/dist/async.js:4018:13\n      at Object.process (../../node_modules/async/dist/async.js:1681:21)\n      at ../../node_modules/async/dist/async.js:1533:23\n      at ../../node_modules/async/dist/async.js:74:45\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   0\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   0\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.59 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.59 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 1 skipped, 18 passed, 22 total\nSnapshots:   0 total\nTime:        6.162 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":141},"start":{"column":29,"line":141}}},{"id":"78","mutatorName":"PrecomputedMutator","replacement":"output.write('')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.63 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something \n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   89.85 |    44.16 |   91.66 |    89.7 |                   \n\n ZipAFolder.ts |   89.85 |    44.16 |   91.66 |    89.7 | 26,41,203-214     \n\n---------------|---------|----------|---------|---------|-------------------\n\nwent wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\n\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryC\nov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:\n584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        5.931 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":141},"start":{"column":29,"line":141}}},{"id":"79","mutatorName":"PrecomputedMutator","replacement":"output.write('hello')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.988 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.zip (lib/ZipAFolder.ts:128:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something \n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   89.85 |    43.81 |   91.66 |    89.7 |                   \n ZipAFolder.ts |   89.85 |    43.81 |   91.66 |    89.7 | 26,41,203-214     \n---------------|---------|----------|---------|---------|-------------------\n\nwent wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at zip (lib/ZipAFolder.ts:138:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\n\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryC\nov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:138:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:101:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:\n584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: dest.on is not a function\n\n      200 |       stryMutAct_9fa48(\"60\") ? output.off('close', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : stryMutAct_9fa48(\"57\") ? output.on('error', reject) : (stryCov_9fa48(\"57\", \"58\", \"59\", \"60\"), output.on(stryMutAct_9fa48(\"63\") ? 'error' : stryMutAct_9fa48(\"62\") ? 'finish' : stryMutAct_9fa48(\"61\") ? 'end' : (stryCov_9fa48(\"61\", \"62\", \"63\"), 'close'), stryMutAct_9fa48(\"66\") ? resolve(null) : stryMutAct_9fa48(\"65\") ? resolve(new Error('Something went wrong')) : stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\", \"65\", \"66\"), resolve)));\n      201 |       stryMutAct_9fa48(\"71\") ? output.addEventListener('error', reject) : stryMutAct_9fa48(\"70\") ? output.off('error', reject) : stryMutAct_9fa48(\"69\") ? output.on('end', reject) : stryMutAct_9fa48(\"68\") ? output.on('error', resolve) : stryMutAct_9fa48(\"67\") ? output.on('close', resolve) : (stryCov_9fa48(\"67\", \"68\", \"69\", \"70\", \"71\"), output.on(stryMutAct_9fa48(\"74\") ? 'end' : stryMutAct_9fa48(\"73\") ? 'finish' : stryMutAct_9fa48(\"72\") ? 'close' : (stryCov_9fa48(\"72\", \"73\", \"74\"), 'error'), stryMutAct_9fa48(\"76\") ? console.log('something went wrong') : stryMutAct_9fa48(\"75\") ? resolve : (stryCov_9fa48(\"75\", \"76\"), reject)));\n    > 202 |       zipArchive.pipe(stryMutAct_9fa48(\"79\") ? output.write('hello') : stryMutAct_9fa48(\"78\") ? output.write('') : stryMutAct_9fa48(\"77\") ? output.end() : (stryCov_9fa48(\"77\", \"78\", \"79\"), output));\n          |                  ^\n      203 |       if (stryMutAct_9fa48(\"82\") ? isGlob(src) || src.length === 0 : stryMutAct_9fa48(\"81\") ? isGlob(src) && src.length > 0 : stryMutAct_9fa48(\"80\") ? !isGlob(src) : (stryCov_9fa48(\"80\", \"81\", \"82\"), isGlob(src))) {\n      204 |         src.split(stryMutAct_9fa48(\"85\") ? '/' : stryMutAct_9fa48(\"84\") ? '|' : stryMutAct_9fa48(\"83\") ? ';' : (stryCov_9fa48(\"83\", \"84\", \"85\"), ',')).forEach(globPart => {\n      205 |           zipArchive.glob(stryMutAct_9fa48(\"87\") ? globPart.replace('*', '') : stryMutAct_9fa48(\"86\") ? globPart.split('/') : (stryCov_9fa48(\"86\", \"87\"), globPart));\n\n      at Archiver.Object.<anonymous>.Readable.pipe (../../node_modules/readable-stream/lib/_stream_readable.js:584:8)\n      at pipe (lib/ZipAFolder.ts:202:18)\n      at Function.compress (lib/ZipAFolder.ts:199:12)\n      at tar (lib/ZipAFolder.ts:101:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        6.255 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":141},"start":{"column":29,"line":141}}},{"id":"80","mutatorName":"PrecomputedMutator","replacement":"!isGlob(src)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.304 s)\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.59 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.59 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        6.577 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"81","mutatorName":"PrecomputedMutator","replacement":"isGlob(src) && src.length > 0","status":"Timeout","location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"82","mutatorName":"PrecomputedMutator","replacement":"isGlob(src) || src.length === 0","status":"Timeout","location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"83","mutatorName":"PrecomputedMutator","replacement":"';'","status":"Timeout","location":{"end":{"column":30,"line":144},"start":{"column":27,"line":144}}},{"id":"84","mutatorName":"PrecomputedMutator","replacement":"'|'","status":"Timeout","location":{"end":{"column":30,"line":144},"start":{"column":27,"line":144}}},{"id":"85","mutatorName":"PrecomputedMutator","replacement":"'/'","status":"Timeout","location":{"end":{"column":30,"line":144},"start":{"column":27,"line":144}}},{"id":"86","mutatorName":"PrecomputedMutator","replacement":"globPart.split('/')","status":"Timeout","location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"87","mutatorName":"PrecomputedMutator","replacement":"globPart.replace('*', '')","status":"Timeout","location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"88","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, true)","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"89","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, false, {\n  exclude: ['**/*.js']\n})","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"90","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, false, {\n  include: ['**/*.js']\n})","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"91","mutatorName":"PrecomputedMutator","replacement":"zipArchive.file","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.717 s)\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 326\n    Received:   326\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |     48.4 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |     48.4 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        6.262 s, estimated 7 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":37,"line":148},"start":{"column":17,"line":148}}},{"id":"92","mutatorName":"PrecomputedMutator","replacement":"src + 'foo'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.047 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.59 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.59 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        5.207 s, estimated 7 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"93","mutatorName":"PrecomputedMutator","replacement":"src.toUpperCase()","status":"Timeout","location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"94","mutatorName":"PrecomputedMutator","replacement":"src.split('.')[0]","status":"Timeout","location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"95","mutatorName":"PrecomputedMutator","replacement":"true","status":"Timeout","location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}},{"id":"96","mutatorName":"PrecomputedMutator","replacement":"null","status":"Timeout","location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}},{"id":"97","mutatorName":"PrecomputedMutator","replacement":"undefined","status":"Timeout","location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}}],"source":"'use strict';\nimport {WriteStream} from 'fs';\nimport * as path from 'path';\nimport * as archiver from 'archiver';\nimport * as fs from 'fs';\nimport * as isGlob from 'is-glob';\n\nexport enum COMPRESSION_LEVEL {\n    uncompressed = 0,\n    medium = 5,\n    high = 9,\n}\n\n/**\n * Options to pass in to zip a folder\n * compression default is 'high'\n */\nexport type ZipAFolderOptions = {\n    compression?: COMPRESSION_LEVEL;\n    customWriteStream?: WriteStream;\n};\n\nexport class ZipAFolder {\n    /**\n     * Tars a given folder or a glob into a gzipped tar archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param tarFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async tar(\n        src: string,\n        tarFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: tarFilePath,\n                format: 'tar',\n                zipAFolderOptions,\n                archiverOptions: {\n                    gzip: true,\n                    gzipOptions: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    /**\n     * Zips a given folder or a glob into a zip archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param zipFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async zip(\n        src: string,\n        zipFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    store: true,\n                },\n            });\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    zlib: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    private static async compress({\n        src,\n        targetFilePath,\n        format,\n        zipAFolderOptions,\n        archiverOptions,\n    }: {\n        src: string;\n        targetFilePath?: string;\n        format: archiver.Format;\n        zipAFolderOptions?: ZipAFolderOptions;\n        archiverOptions?: archiver.ArchiverOptions;\n    }): Promise<void | Error> {\n        let output: WriteStream;\n\n        if (!zipAFolderOptions?.customWriteStream && targetFilePath) {\n            const targetBasePath: string = path.dirname(targetFilePath);\n\n            if (targetBasePath === src) {\n                throw new Error('Source and target folder must be different.');\n            }\n            try {\n                if (!isGlob(src)) {\n                    await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise\n                }\n                await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise\n            } catch (e: any) {\n                throw new Error(`Permission error: ${e.message}`);\n            }\n            output = fs.createWriteStream(targetFilePath);\n        } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {\n            output = zipAFolderOptions?.customWriteStream;\n        } else {\n            throw new Error('You must either provide a target file path or a custom write stream to write to.');\n        }\n\n        const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});\n\n        return new Promise((resolve, reject) => {\n            output.on('close', resolve);\n            output.on('error', reject);\n\n            zipArchive.pipe(output);\n\n            if (isGlob(src)) {\n                src.split(',').forEach((globPart) => {\n                    zipArchive.glob(globPart);\n                });\n            } else {\n                zipArchive.directory(src, false);\n            }\n            zipArchive.finalize();\n        });\n    }\n}\n\nexport const zip = ZipAFolder.zip;\nexport const tar = ZipAFolder.tar;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"All tests"}]}},"projectRoot":"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder","config":{"usePrecomputed":true,"mutate":["lib/ZipAFolder.ts"],"reporters":["json","html","progress"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunner":"command","testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"cucumber":{},"jest":{"projectType":"custom","enableFindRelatedTests":true},"mochaOptions":{},"tap":{"testFiles":["{**/@(test|tests|__test__|__tests__)/**,**/*.@(test|tests|spec)}.@(cjs|mjs|js|jsx|ts|tsx|mts|cts)"],"nodeArgs":["-r","{{hookFile}}","{{testFile}}"],"forceBail":true},"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.5","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.2.5","@stryker-mutator/karma-runner":"8.2.5","@stryker-mutator/jasmine-runner":"8.2.5","@stryker-mutator/jest-runner":"8.2.5","mocha":"10.4.0","jasmine-core":"5.1.2","jest":"29.7.0","typescript":"5.4.4","ts-jest":"29.1.2"}}}