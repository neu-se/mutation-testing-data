*** using precomputed mutations ***
[32m16:05:56 (2490) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m16:05:56 (2490) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m16:05:56 (2490) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m16:05:56 (2490) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m16:05:56 (2490) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m16:05:56 (2490) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 195 mutants from MUTATION_TESTING/template-full_codellama-13b-instruct_0.0/mutants.json ***
failed to parse replacement spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === undefined: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /^[^/]+$/: SyntaxError: Invalid regular expression: //^[^//: Unterminated character class
Mutant 0 in matcher.ts: /^\// replaced with /^$/
failed to parse replacement /[a-zA-Z0-9_/:~.$+*-]+/: SyntaxError: Invalid regular expression: //[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement spec.match(/[*+][^/]|[^/][*+]/) !== null: SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
failed to parse replacement spec.match(/[*+][^/]|[^/][*+]/g) !== null: SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
Mutant 1 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 2 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== undefined
Mutant 3 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== spec.match(/^.+\/$/)
failed to parse replacement spec.replace(/[a-zA-Z0-9_/:~.$+*-]/g, ''): SyntaxError: Invalid regular expression: //[a-zA-Z0-9_//: Unterminated character class
Mutant 4 in matcher.ts: spec replaced with spec.toUpperCase()
Mutant 5 in matcher.ts: spec replaced with spec.toLowerCase()
Mutant 6 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 7 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && !string.endsWith('/')
Mutant 8 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.startsWith('/')
Mutant 9 in matcher.ts: string.endsWith replaced with string.includes
Mutant 10 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 11 in matcher.ts: super[Symbol.match] replaced with this[Symbol.match]
Mutant 12 in matcher.ts: super[Symbol.match] replaced with this.match
Mutant 13 in matcher.ts: string replaced with string.slice(1)
Mutant 14 in matcher.ts: string replaced with string.toUpperCase()
Mutant 15 in matcher.ts: string replaced with string.split('').reverse().join('')
Mutant 16 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 17 in matcher.ts: max > 0 || any replaced with max > 0 || !any
Mutant 18 in matcher.ts: max > 0 || any replaced with max > 0 || any && max > 0
Mutant 19 in matcher.ts: final && opt && min < 1 replaced with final && min < 1
Mutant 20 in matcher.ts: final && opt && min < 1 replaced with final && max < 1
Mutant 21 in matcher.ts: final && opt && min < 1 replaced with final && any
Mutant 22 in matcher.ts: min > 0 replaced with min < 0
Mutant 23 in matcher.ts: min > 0 replaced with min > 1
Mutant 24 in matcher.ts: min > 0 replaced with max < 0
Mutant 25 in matcher.ts: true replaced with false
Mutant 26 in matcher.ts: true replaced with undefined
Mutant 27 in matcher.ts: true replaced with null
Mutant 28 in matcher.ts: parts.reduce replaced with parts.reduceRight
Mutant 29 in matcher.ts: parts.reduce replaced with parts.map
Mutant 30 in matcher.ts: parts.reduce replaced with parts.filter
Mutant 31 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + 1
Mutant 32 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + 'a'
Mutant 33 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + 'b'
Mutant 34 in matcher.ts: '$' replaced with '\\$'
Mutant 35 in matcher.ts: '$' replaced with '\\\\$'
Mutant 36 in matcher.ts: '$' replaced with '\\\\\\$'
Mutant 37 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(-1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 38 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1, -1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 39 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().map(x => x.toUpperCase())
Mutant 40 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().filter(x => x.length > 0)
Mutant 41 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().reduce((acc, x) => acc + x, '')
Mutant 42 in matcher.ts: '/' replaced with '/a'
Mutant 43 in matcher.ts: 1 replaced with -1
Mutant 44 in matcher.ts: 1 replaced with 2
Mutant 45 in matcher.ts: part replaced with part.toUpperCase()
Mutant 46 in matcher.ts: part replaced with part.toLowerCase()
Mutant 47 in matcher.ts: part replaced with part.replace(/[a-zA-Z]/g, '')
Mutant 48 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 49 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== undefined
Mutant 50 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 51 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 52 in matcher.ts: part.slice(1) replaced with part.slice(0, 1)
Mutant 53 in matcher.ts: part.slice(1) replaced with part.slice(1, 2)
Mutant 54 in matcher.ts: 1 replaced with props[0]
Mutant 55 in matcher.ts: 1 replaced with props.length
failed to parse replacement '/([^/]+)/': SyntaxError: Invalid regular expression: //([^//: Unterminated character class
failed to parse replacement '/([^/]+)/i': SyntaxError: Invalid regular expression: //([^//: Unterminated character class
failed to parse replacement /([^/]+)/g: SyntaxError: Invalid regular expression: //([^//: Unterminated character class
Mutant 56 in policy.ts: this.rules replaced with this.rules.length
Mutant 57 in policy.ts: this.rules replaced with this.rules[0]
Mutant 58 in policy.ts: this.rules replaced with this.rules.slice(1)
Mutant 59 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.toString())
Mutant 60 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.toUpperCase())
Mutant 61 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.toLowerCase())
Mutant 62 in policy.ts: path replaced with path.toUpperCase()
Mutant 63 in policy.ts: path replaced with path.toLowerCase()
Mutant 64 in policy.ts: path replaced with path.replace(/[a-z]/g, 'x')
Mutant 65 in policy.ts: verb replaced with verb.toLowerCase()
Mutant 66 in policy.ts: verb replaced with verb.toUpperCase()
Mutant 67 in policy.ts: verb replaced with verb.trim()
Mutant 68 in policy.ts: ctx replaced with ctx.name
Mutant 69 in policy.ts: ctx replaced with ctx.path
Mutant 70 in policy.ts: ctx replaced with ctx.verb
Mutant 71 in policy.ts: res === false replaced with res === null
Mutant 72 in policy.ts: res === false replaced with res === true
Mutant 73 in policy.ts: res === false replaced with res === undefined
Mutant 74 in policy.ts: res === true replaced with res === false
Mutant 75 in policy.ts: res === true replaced with res === null
Mutant 76 in policy.ts: res === true replaced with res === undefined
Mutant 77 in policy.ts: this.rules replaced with this.rules.length
Mutant 78 in policy.ts: this.rules replaced with this.rules[0]
Mutant 79 in policy.ts: this.rules replaced with this.rules.slice(1)
Mutant 80 in policy.ts: rule.matches(path, ctx) replaced with rule.query(path, verb, ctx)
Mutant 81 in policy.ts: rule.matches(path, ctx) replaced with rule.clone(path, ctx)
Mutant 82 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.path)
Mutant 83 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.path.toLowerCase())
Mutant 84 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.path.toUpperCase())
Mutant 85 in policy.ts: path replaced with path.toLowerCase()
Mutant 86 in policy.ts: path replaced with path.toUpperCase()
Mutant 87 in policy.ts: path replaced with path.substring(1)
Mutant 88 in policy.ts: ctx replaced with ctx.name
Mutant 89 in policy.ts: ctx replaced with ctx.path
Mutant 90 in policy.ts: ctx replaced with ctx.query
Mutant 91 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 92 in policy.ts: this.rules.map replaced with this.rules.reduce
Mutant 93 in policy.ts: this.rules.map replaced with this.rules.find
Mutant 94 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(true)
Mutant 95 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(false)
Mutant 96 in policymap.ts: policies.map replaced with policies.filter
Mutant 97 in policymap.ts: policies.map replaced with policies.reduce
Mutant 98 in policymap.ts: policies.map replaced with policies.find
Mutant 99 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 100 in policymap.ts: policies replaced with policies.map(policy => [policy.name, policy])
Mutant 101 in policymap.ts: policies replaced with policies.filter(policy => policy.name === 'admin')
Mutant 102 in policymap.ts: policies replaced with policies.reduce((acc, policy) => acc.concat(policy.name), [])
Mutant 103 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, policy.name)
Mutant 104 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, policy.name + 1)
Mutant 105 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, policy.name.toUpperCase())
Mutant 106 in policymap.ts: policy.name replaced with policy.name.toUpperCase()
Mutant 107 in policymap.ts: policy.name replaced with policy.name.length
Mutant 108 in policymap.ts: policy.name replaced with policy.name.charAt(0)
Mutant 109 in policymap.ts: policy replaced with policy.name
Mutant 110 in policymap.ts: policy replaced with policy.query(path, verb, ctx)
Mutant 111 in policymap.ts: policy replaced with policy.matches(path, ctx)
Mutant 112 in policymap.ts: name replaced with undefined
Mutant 113 in policymap.ts: name replaced with null
Mutant 114 in policymap.ts: name replaced with ' '
Mutant 115 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx, 1)
Mutant 116 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx, undefined)
Mutant 117 in policymap.ts: path replaced with path.toLowerCase()
Mutant 118 in policymap.ts: path replaced with path.toUpperCase()
Mutant 119 in policymap.ts: path replaced with path.substring(1)
Mutant 120 in policymap.ts: verb replaced with verb.toLowerCase()
Mutant 121 in policymap.ts: verb replaced with verb.toUpperCase()
Mutant 122 in policymap.ts: verb replaced with verb.trim()
Mutant 123 in policymap.ts: ctx replaced with ctx.name
Mutant 124 in policymap.ts: ctx replaced with ctx.path
Mutant 125 in policymap.ts: ctx replaced with ctx.verb
Mutant 126 in policymap.ts: name replaced with undefined
Mutant 127 in policymap.ts: name replaced with null
Mutant 128 in policymap.ts: name replaced with "name"
Mutant 129 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.path)
Mutant 130 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.path.toLowerCase())
Mutant 131 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.path.toLowerCase().split('/'))
Mutant 132 in policymap.ts: path replaced with path.toLowerCase()
Mutant 133 in policymap.ts: path replaced with path.toUpperCase()
Mutant 134 in policymap.ts: path replaced with path.replace(/[a-z]/g, 'X')
Mutant 135 in policymap.ts: ctx replaced with ctx.name
Mutant 136 in policymap.ts: ctx replaced with ctx.path
Mutant 137 in policymap.ts: ctx replaced with ctx.verb
Mutant 138 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.map(v => v.toUpperCase())) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 139 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.filter(v => v !== 'GET')) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 140 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.reduce((acc, v) => acc + v, '')) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 141 in rule.ts: verbs replaced with verbs.length
Mutant 142 in rule.ts: verbs replaced with verbs.toString()
Mutant 143 in rule.ts: verbs replaced with verbs.valueOf()
Mutant 144 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 145 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb]
Mutant 146 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.map(v => v.toUpperCase())) {
  this.verbs[verb] = false;
}
Mutant 147 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.filter(v => v !== 'GET')) {
  this.verbs[verb] = false;
}
Mutant 148 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.reduce((acc, v) => acc + v, '')) {
  this.verbs[verb] = false;
}
Mutant 149 in rule.ts: verbs replaced with verbs.length
Mutant 150 in rule.ts: verbs replaced with verbs.toString()
Mutant 151 in rule.ts: verbs replaced with verbs.valueOf()
Mutant 152 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 153 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !(verb in this.verbs)
Mutant 154 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx.path)
Mutant 155 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx.path.toLowerCase())
Mutant 156 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx.path.toUpperCase())
Mutant 157 in rule.ts: path replaced with path.toLowerCase()
Mutant 158 in rule.ts: path replaced with path.toUpperCase()
Mutant 159 in rule.ts: path replaced with path.replace(/[a-z]/g, 'x')
Mutant 160 in rule.ts: ctx replaced with ctx.path
Mutant 161 in rule.ts: ctx replaced with ctx.path.match(this.regex)
Mutant 162 in rule.ts: ctx replaced with ctx.path.match(this.regex).length
Mutant 163 in rule.ts: this.regex replaced with this.regex.toString()
Mutant 164 in rule.ts: this.regex replaced with this.regex.test(path)
Mutant 165 in rule.ts: this.regex replaced with this.regex.exec(path)
Mutant 166 in rule.ts: match === null replaced with match === undefined
Mutant 167 in rule.ts: match === null replaced with match === false
Mutant 168 in rule.ts: count > 0 replaced with count < 0
Mutant 169 in rule.ts: count > 0 replaced with count === 0
Mutant 170 in rule.ts: count > 0 replaced with count > 1
Mutant 171 in rule.ts: ctx === undefined replaced with ctx === null
Mutant 172 in rule.ts: ctx === undefined replaced with ctx === null || ctx === undefined
Mutant 173 in rule.ts: index < count replaced with index <= count
Mutant 174 in rule.ts: index < count replaced with index > count
Mutant 175 in rule.ts: index < count replaced with index >= count
Mutant 176 in rule.ts: index++ replaced with index--
Mutant 177 in rule.ts: index++ replaced with index += 2
Mutant 178 in rule.ts: index++ replaced with index = index + 10
Mutant 179 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined || match[index + 1] === prop
Mutant 180 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] !== prop
Mutant 181 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined && match[index + 1] === prop
Mutant 182 in rule.ts: this.verbs replaced with this.verbs.length
Mutant 183 in rule.ts: this.verbs replaced with this.verbs[0]
Mutant 184 in rule.ts: this.verbs replaced with this.verbs.toString()
[32m16:05:57 (2490) INFO Instrumenter[39m Instrumented 6 source file(s) with 185 mutant(s)
[32m16:05:57 (2490) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m16:05:58 (2490) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m16:05:58 (2490) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m16:06:03 (2490) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4318 ms, overhead 0 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~15m) 2/185 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~12m) 5/185 tested (1 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~11m) 8/185 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~10m) 11/185 tested (3 survived, 0 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~10m) 14/185 tested (3 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~9m) 17/185 tested (3 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~9m) 20/185 tested (3 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~9m) 23/185 tested (3 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~9m) 26/185 tested (3 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~8m) 29/185 tested (3 survived, 0 timed out)
Mutation testing 17% (elapsed: ~1m, remaining: ~8m) 32/185 tested (3 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~8m) 35/185 tested (3 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~8m) 38/185 tested (3 survived, 0 timed out)
Mutation testing 22% (elapsed: ~2m, remaining: ~8m) 41/185 tested (3 survived, 0 timed out)
Mutation testing 23% (elapsed: ~2m, remaining: ~8m) 44/185 tested (3 survived, 0 timed out)
Mutation testing 25% (elapsed: ~2m, remaining: ~7m) 47/185 tested (5 survived, 0 timed out)
Mutation testing 27% (elapsed: ~2m, remaining: ~7m) 50/185 tested (6 survived, 0 timed out)
Mutation testing 28% (elapsed: ~3m, remaining: ~7m) 53/185 tested (7 survived, 0 timed out)
Mutation testing 30% (elapsed: ~3m, remaining: ~7m) 56/185 tested (7 survived, 0 timed out)
Mutation testing 31% (elapsed: ~3m, remaining: ~7m) 59/185 tested (7 survived, 0 timed out)
Mutation testing 33% (elapsed: ~3m, remaining: ~6m) 62/185 tested (7 survived, 0 timed out)
Mutation testing 35% (elapsed: ~3m, remaining: ~6m) 65/185 tested (8 survived, 0 timed out)
Mutation testing 37% (elapsed: ~3m, remaining: ~6m) 69/185 tested (10 survived, 0 timed out)
Mutation testing 38% (elapsed: ~4m, remaining: ~6m) 72/185 tested (10 survived, 0 timed out)
Mutation testing 40% (elapsed: ~4m, remaining: ~6m) 75/185 tested (10 survived, 0 timed out)
Mutation testing 42% (elapsed: ~4m, remaining: ~5m) 78/185 tested (10 survived, 0 timed out)
Mutation testing 43% (elapsed: ~4m, remaining: ~5m) 81/185 tested (10 survived, 0 timed out)
Mutation testing 45% (elapsed: ~4m, remaining: ~5m) 84/185 tested (10 survived, 0 timed out)
Mutation testing 47% (elapsed: ~4m, remaining: ~5m) 87/185 tested (11 survived, 0 timed out)
Mutation testing 48% (elapsed: ~5m, remaining: ~5m) 90/185 tested (11 survived, 0 timed out)
Mutation testing 50% (elapsed: ~5m, remaining: ~5m) 93/185 tested (11 survived, 0 timed out)
Mutation testing 51% (elapsed: ~5m, remaining: ~4m) 96/185 tested (11 survived, 0 timed out)
Mutation testing 53% (elapsed: ~5m, remaining: ~4m) 99/185 tested (11 survived, 0 timed out)
Mutation testing 55% (elapsed: ~5m, remaining: ~4m) 102/185 tested (11 survived, 0 timed out)
Mutation testing 56% (elapsed: ~5m, remaining: ~4m) 105/185 tested (11 survived, 0 timed out)
Mutation testing 58% (elapsed: ~6m, remaining: ~4m) 108/185 tested (11 survived, 0 timed out)
Mutation testing 60% (elapsed: ~6m, remaining: ~4m) 111/185 tested (11 survived, 0 timed out)
Mutation testing 62% (elapsed: ~6m, remaining: ~3m) 115/185 tested (11 survived, 0 timed out)
Mutation testing 63% (elapsed: ~6m, remaining: ~3m) 118/185 tested (14 survived, 0 timed out)
Mutation testing 65% (elapsed: ~6m, remaining: ~3m) 121/185 tested (15 survived, 0 timed out)
Mutation testing 67% (elapsed: ~6m, remaining: ~3m) 124/185 tested (16 survived, 0 timed out)
Mutation testing 68% (elapsed: ~7m, remaining: ~3m) 127/185 tested (16 survived, 0 timed out)
Mutation testing 70% (elapsed: ~7m, remaining: ~3m) 130/185 tested (16 survived, 0 timed out)
Mutation testing 71% (elapsed: ~7m, remaining: ~2m) 133/185 tested (17 survived, 0 timed out)
Mutation testing 74% (elapsed: ~7m, remaining: ~2m) 137/185 tested (17 survived, 0 timed out)
Mutation testing 75% (elapsed: ~7m, remaining: ~2m) 140/185 tested (18 survived, 0 timed out)
Mutation testing 77% (elapsed: ~7m, remaining: ~2m) 143/185 tested (18 survived, 0 timed out)
Mutation testing 78% (elapsed: ~8m, remaining: ~2m) 146/185 tested (19 survived, 0 timed out)
Mutation testing 80% (elapsed: ~8m, remaining: ~1m) 149/185 tested (20 survived, 0 timed out)
Mutation testing 82% (elapsed: ~8m, remaining: ~1m) 152/185 tested (21 survived, 0 timed out)
Mutation testing 83% (elapsed: ~8m, remaining: ~1m) 155/185 tested (21 survived, 0 timed out)
Mutation testing 85% (elapsed: ~8m, remaining: ~1m) 158/185 tested (22 survived, 0 timed out)
Mutation testing 87% (elapsed: ~8m, remaining: ~1m) 161/185 tested (22 survived, 0 timed out)
Mutation testing 88% (elapsed: ~9m, remaining: ~1m) 164/185 tested (22 survived, 0 timed out)
Mutation testing 89% (elapsed: ~9m, remaining: ~1m) 166/185 tested (22 survived, 0 timed out)
Mutation testing 91% (elapsed: ~9m, remaining: <1m) 169/185 tested (22 survived, 0 timed out)
Mutation testing 93% (elapsed: ~9m, remaining: <1m) 173/185 tested (23 survived, 0 timed out)
Mutation testing 94% (elapsed: ~9m, remaining: <1m) 175/185 tested (23 survived, 0 timed out)
Mutation testing 96% (elapsed: ~9m, remaining: <1m) 179/185 tested (25 survived, 0 timed out)
Mutation testing 98% (elapsed: ~10m, remaining: <1m) 182/185 tested (25 survived, 0 timed out)

All tests
  ✓ All tests (killed 160)

[Survived] PrecomputedMutator
src/matcher.ts:29:9
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/$/) !== spec.match(/^.+\/$/)) {

[Survived] PrecomputedMutator
src/matcher.ts:32:38
-       const { regex, props } = compile(spec)
+       const { regex, props } = compile(spec.toLowerCase())

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.toUpperCase()) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.toLowerCase()) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.replace(/[a-zA-Z]/g, '')) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/policy.ts:33:30
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.trim(), ctx)

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.toLowerCase(), ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:30:9
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb, ctx, 1)

[Survived] PrecomputedMutator
src/policymap.ts:30:9
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb, ctx, undefined)

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:30:28
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policymap.ts:30:28
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb.trim(), ctx)

[Survived] PrecomputedMutator
src/policymap.ts:41:24
-         ? policy.matches(path, ctx)
+         ? policy.matches(path.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.filter(v => v !== 'GET')) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of verbs.valueOf()) {

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.filter(v => v !== 'GET')) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.valueOf()) {

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (ctx === null || ctx === undefined) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index = index + 10) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   86.49 |      160 |         0 |         25 |        0 |        0 |
 matcher.ts   |   87.50 |       49 |         0 |          7 |        0 |        0 |
 policy.ts    |   90.00 |       36 |         0 |          4 |        0 |        0 |
 policymap.ts |   85.71 |       36 |         0 |          6 |        0 |        0 |
 rule.ts      |   82.98 |       39 |         0 |          8 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m16:16:12 (2490) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m16:16:12 (2490) INFO MutationTestExecutor[39m Done in 10 minutes 16 seconds.

real	10m17.858s
user	13m59.302s
sys	1m2.061s
