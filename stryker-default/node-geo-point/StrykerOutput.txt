[32m15:17:01 (2455) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m15:17:01 (2455) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m15:17:01 (2455) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llmorpheus/llmorpheus/node-geo-point/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[32m15:17:01 (2455) INFO ProjectReader[39m Found 2 of 18 file(s) to be mutated.
*** using standard mutators ***
Mutant 0 in geo-point.ts: input => typeof input === 'object' && input !== null replaced with () => undefined
Mutant 1 in geo-point.ts: typeof input === 'object' && input !== null replaced with true
Mutant 2 in geo-point.ts: typeof input === 'object' && input !== null replaced with false
Mutant 3 in geo-point.ts: typeof input === 'object' && input !== null replaced with typeof input === 'object' || input !== null
Mutant 4 in geo-point.ts: typeof input === 'object' replaced with true
Mutant 5 in geo-point.ts: typeof input === 'object' replaced with typeof input !== 'object'
Mutant 6 in geo-point.ts: 'object' replaced with ""
Mutant 7 in geo-point.ts: input !== null replaced with true
Mutant 8 in geo-point.ts: input !== null replaced with input === null
Mutant 9 in geo-point.ts: {
  if (typeof latitude !== 'number' || typeof longitude !== 'number') {
    throw new RangeError('Bad geo point arguments');
  }
  if (latitude < -90 || latitude > 90) {
    throw new RangeError('bad latitude value');
  }
  if (longitude < -180 || longitude > 180) {
    throw new RangeError('bad longitude value');
  }
  this.latitude = latitude;
  this.longitude = longitude;
} replaced with {}
Mutant 10 in geo-point.ts: typeof latitude !== 'number' || typeof longitude !== 'number' replaced with true
Mutant 11 in geo-point.ts: typeof latitude !== 'number' || typeof longitude !== 'number' replaced with false
Mutant 12 in geo-point.ts: typeof latitude !== 'number' || typeof longitude !== 'number' replaced with typeof latitude !== 'number' && typeof longitude !== 'number'
Mutant 13 in geo-point.ts: typeof latitude !== 'number' replaced with false
Mutant 14 in geo-point.ts: typeof latitude !== 'number' replaced with typeof latitude === 'number'
Mutant 15 in geo-point.ts: 'number' replaced with ""
Mutant 16 in geo-point.ts: typeof longitude !== 'number' replaced with false
Mutant 17 in geo-point.ts: typeof longitude !== 'number' replaced with typeof longitude === 'number'
Mutant 18 in geo-point.ts: 'number' replaced with ""
Mutant 19 in geo-point.ts: {
  throw new RangeError('Bad geo point arguments');
} replaced with {}
Mutant 20 in geo-point.ts: 'Bad geo point arguments' replaced with ""
Mutant 21 in geo-point.ts: latitude < -90 || latitude > 90 replaced with true
Mutant 22 in geo-point.ts: latitude < -90 || latitude > 90 replaced with false
Mutant 23 in geo-point.ts: latitude < -90 || latitude > 90 replaced with latitude < -90 && latitude > 90
Mutant 24 in geo-point.ts: latitude < -90 replaced with false
Mutant 25 in geo-point.ts: latitude < -90 replaced with latitude <= -90
Mutant 26 in geo-point.ts: latitude < -90 replaced with latitude >= -90
Mutant 27 in geo-point.ts: -90 replaced with +90
Mutant 28 in geo-point.ts: latitude > 90 replaced with false
Mutant 29 in geo-point.ts: latitude > 90 replaced with latitude >= 90
Mutant 30 in geo-point.ts: latitude > 90 replaced with latitude <= 90
Mutant 31 in geo-point.ts: {
  throw new RangeError('bad latitude value');
} replaced with {}
Mutant 32 in geo-point.ts: 'bad latitude value' replaced with ""
Mutant 33 in geo-point.ts: longitude < -180 || longitude > 180 replaced with true
Mutant 34 in geo-point.ts: longitude < -180 || longitude > 180 replaced with false
Mutant 35 in geo-point.ts: longitude < -180 || longitude > 180 replaced with longitude < -180 && longitude > 180
Mutant 36 in geo-point.ts: longitude < -180 replaced with false
Mutant 37 in geo-point.ts: longitude < -180 replaced with longitude <= -180
Mutant 38 in geo-point.ts: longitude < -180 replaced with longitude >= -180
Mutant 39 in geo-point.ts: -180 replaced with +180
Mutant 40 in geo-point.ts: longitude > 180 replaced with false
Mutant 41 in geo-point.ts: longitude > 180 replaced with longitude >= 180
Mutant 42 in geo-point.ts: longitude > 180 replaced with longitude <= 180
Mutant 43 in geo-point.ts: {
  throw new RangeError('bad longitude value');
} replaced with {}
Mutant 44 in geo-point.ts: 'bad longitude value' replaced with ""
Mutant 45 in geo-point.ts: {
  if (!isObject(point)) {
    throw new TypeError('GeoPoint: Argument must be an object');
  }
  if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {
    throw new TypeError('Object must have type and coordinates');
  }
  if (point.type !== 'Point') {
    throw new TypeError('The value of type should be \'Point\'');
  }
  if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {
    throw new TypeError('coordinates must be an array and contain 2 elements');
  }
  return this.fromLngLatArray(point.coordinates);
} replaced with {}
Mutant 46 in geo-point.ts: !isObject(point) replaced with isObject(point)
Mutant 47 in geo-point.ts: !isObject(point) replaced with true
Mutant 48 in geo-point.ts: !isObject(point) replaced with false
Mutant 49 in geo-point.ts: {
  throw new TypeError('GeoPoint: Argument must be an object');
} replaced with {}
Mutant 50 in geo-point.ts: 'GeoPoint: Argument must be an object' replaced with ""
Mutant 51 in geo-point.ts: !point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates') replaced with true
Mutant 52 in geo-point.ts: !point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates') replaced with false
Mutant 53 in geo-point.ts: !point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates') replaced with !point.hasOwnProperty('type') && !point.hasOwnProperty('coordinates')
Mutant 54 in geo-point.ts: !point.hasOwnProperty('type') replaced with point.hasOwnProperty('type')
Mutant 55 in geo-point.ts: 'type' replaced with ""
Mutant 56 in geo-point.ts: !point.hasOwnProperty('coordinates') replaced with point.hasOwnProperty('coordinates')
Mutant 57 in geo-point.ts: 'coordinates' replaced with ""
Mutant 58 in geo-point.ts: {
  throw new TypeError('Object must have type and coordinates');
} replaced with {}
Mutant 59 in geo-point.ts: 'Object must have type and coordinates' replaced with ""
Mutant 60 in geo-point.ts: point.type !== 'Point' replaced with true
Mutant 61 in geo-point.ts: point.type !== 'Point' replaced with false
Mutant 62 in geo-point.ts: point.type !== 'Point' replaced with point.type === 'Point'
Mutant 63 in geo-point.ts: 'Point' replaced with ""
Mutant 64 in geo-point.ts: {
  throw new TypeError('The value of type should be \'Point\'');
} replaced with {}
Mutant 65 in geo-point.ts: 'The value of type should be \'Point\'' replaced with ""
Mutant 66 in geo-point.ts: !Array.isArray(point.coordinates) || point.coordinates.length !== 2 replaced with true
Mutant 67 in geo-point.ts: !Array.isArray(point.coordinates) || point.coordinates.length !== 2 replaced with false
Mutant 68 in geo-point.ts: !Array.isArray(point.coordinates) || point.coordinates.length !== 2 replaced with !Array.isArray(point.coordinates) && point.coordinates.length !== 2
Mutant 69 in geo-point.ts: !Array.isArray(point.coordinates) replaced with Array.isArray(point.coordinates)
Mutant 70 in geo-point.ts: point.coordinates.length !== 2 replaced with false
Mutant 71 in geo-point.ts: point.coordinates.length !== 2 replaced with point.coordinates.length === 2
Mutant 72 in geo-point.ts: {
  throw new TypeError('coordinates must be an array and contain 2 elements');
} replaced with {}
Mutant 73 in geo-point.ts: 'coordinates must be an array and contain 2 elements' replaced with ""
Mutant 74 in geo-point.ts: {
  if (!isObject(object)) {
    throw new TypeError('GeoPoint: Argument must be an object');
  }
  if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {
    throw new TypeError('Object must have latitude and longitude');
  }
  return new GeoPoint(object.latitude, object.longitude);
} replaced with {}
Mutant 75 in geo-point.ts: !isObject(object) replaced with isObject(object)
Mutant 76 in geo-point.ts: !isObject(object) replaced with true
Mutant 77 in geo-point.ts: !isObject(object) replaced with false
Mutant 78 in geo-point.ts: {
  throw new TypeError('GeoPoint: Argument must be an object');
} replaced with {}
Mutant 79 in geo-point.ts: 'GeoPoint: Argument must be an object' replaced with ""
Mutant 80 in geo-point.ts: !object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude') replaced with true
Mutant 81 in geo-point.ts: !object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude') replaced with false
Mutant 82 in geo-point.ts: !object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude') replaced with !object.hasOwnProperty('latitude') && !object.hasOwnProperty('longitude')
Mutant 83 in geo-point.ts: !object.hasOwnProperty('latitude') replaced with object.hasOwnProperty('latitude')
Mutant 84 in geo-point.ts: 'latitude' replaced with ""
Mutant 85 in geo-point.ts: !object.hasOwnProperty('longitude') replaced with object.hasOwnProperty('longitude')
Mutant 86 in geo-point.ts: 'longitude' replaced with ""
Mutant 87 in geo-point.ts: {
  throw new TypeError('Object must have latitude and longitude');
} replaced with {}
Mutant 88 in geo-point.ts: 'Object must have latitude and longitude' replaced with ""
Mutant 89 in geo-point.ts: {
  const point1Rad = deg2rad(point1.latitude);
  const point2Rad = deg2rad(point2.latitude);
  const a = deg2rad(point2.longitude) - deg2rad(point1.longitude);
  const b = cos(point1Rad) * cos(point2Rad) * cos(a);
  const c = sin(point1Rad) * sin(point2Rad);
  const r = b + c;
  return acos(r > 1 ? 1 : r) * 6371392.896;
} replaced with {}
Mutant 90 in geo-point.ts: deg2rad(point2.longitude) - deg2rad(point1.longitude) replaced with deg2rad(point2.longitude) + deg2rad(point1.longitude)
Mutant 91 in geo-point.ts: cos(point1Rad) * cos(point2Rad) * cos(a) replaced with cos(point1Rad) * cos(point2Rad) / cos(a)
Mutant 92 in geo-point.ts: cos(point1Rad) * cos(point2Rad) replaced with cos(point1Rad) / cos(point2Rad)
Mutant 93 in geo-point.ts: sin(point1Rad) * sin(point2Rad) replaced with sin(point1Rad) / sin(point2Rad)
Mutant 94 in geo-point.ts: b + c replaced with b - c
Mutant 95 in geo-point.ts: acos(r > 1 ? 1 : r) * 6371392.896 replaced with acos(r > 1 ? 1 : r) / 6371392.896
Mutant 96 in geo-point.ts: r > 1 replaced with true
Mutant 97 in geo-point.ts: r > 1 replaced with false
Mutant 98 in geo-point.ts: r > 1 replaced with r >= 1
Mutant 99 in geo-point.ts: r > 1 replaced with r <= 1
Mutant 100 in geo-point.ts: {
  const φ1 = deg2rad(point1.latitude),
    φ2 = deg2rad(point2.latitude);
  const Δλ = deg2rad(point2.longitude - point1.longitude);

  // see http://mathforum.org/library/drmath/view/55417.html
  const y = sin(Δλ) * cos(φ2);
  const x = cos(φ1) * sin(φ2) - sin(φ1) * cos(φ2) * cos(Δλ);
  const θ = atan2(y, x);
  return (rad2deg(θ) + 360) % 360;
} replaced with {}
Mutant 101 in geo-point.ts: point2.longitude - point1.longitude replaced with point2.longitude + point1.longitude
Mutant 102 in geo-point.ts: sin(Δλ) * cos(φ2) replaced with sin(Δλ) / cos(φ2)
Mutant 103 in geo-point.ts: cos(φ1) * sin(φ2) - sin(φ1) * cos(φ2) * cos(Δλ) replaced with cos(φ1) * sin(φ2) + sin(φ1) * cos(φ2) * cos(Δλ)
Mutant 104 in geo-point.ts: cos(φ1) * sin(φ2) replaced with cos(φ1) / sin(φ2)
Mutant 105 in geo-point.ts: sin(φ1) * cos(φ2) * cos(Δλ) replaced with sin(φ1) * cos(φ2) / cos(Δλ)
Mutant 106 in geo-point.ts: sin(φ1) * cos(φ2) replaced with sin(φ1) / cos(φ2)
Mutant 107 in geo-point.ts: (rad2deg(θ) + 360) % 360 replaced with (rad2deg(θ) + 360) * 360
Mutant 108 in geo-point.ts: rad2deg(θ) + 360 replaced with rad2deg(θ) - 360
Mutant 109 in geo-point.ts: {
  // sinφ2 = sinφ1⋅cosδ + cosφ1⋅sinδ⋅cosθ
  // tanΔλ = sinθ⋅sinδ⋅cosφ1 / cosδ−sinφ1⋅sinφ2
  // see http://williams.best.vwh.net/avform.htm#LL

  const δ = Number(distance) / radius; // angular distance in radians
  const θ = deg2rad(Number(bearing));
  const φ1 = deg2rad(coordinate.latitude);
  const λ1 = deg2rad(coordinate.longitude);
  const sinφ1 = sin(φ1),
    cosφ1 = cos(φ1);
  const sinδ = sin(δ),
    cosδ = cos(δ);
  const sinθ = sin(θ),
    cosθ = cos(θ);
  const sinφ2 = sinφ1 * cosδ + cosφ1 * sinδ * cosθ;
  const φ2 = asin(sinφ2);
  const y = sinθ * sinδ * cosφ1;
  const x = cosδ - sinφ1 * sinφ2;
  const λ2 = λ1 + atan2(y, x);
  const latitude = rad2deg(φ2);
  const longitude = (rad2deg(λ2) + 540) % 360 - 180; // normalise to −180..+180°

  return new GeoPoint(latitude, longitude);
} replaced with {}
Mutant 110 in geo-point.ts: Number(distance) / radius replaced with Number(distance) * radius
Mutant 111 in geo-point.ts: sinφ1 * cosδ + cosφ1 * sinδ * cosθ replaced with sinφ1 * cosδ - cosφ1 * sinδ * cosθ
Mutant 112 in geo-point.ts: sinφ1 * cosδ replaced with sinφ1 / cosδ
Mutant 113 in geo-point.ts: cosφ1 * sinδ * cosθ replaced with cosφ1 * sinδ / cosθ
Mutant 114 in geo-point.ts: cosφ1 * sinδ replaced with cosφ1 / sinδ
Mutant 115 in geo-point.ts: sinθ * sinδ * cosφ1 replaced with sinθ * sinδ / cosφ1
Mutant 116 in geo-point.ts: sinθ * sinδ replaced with sinθ / sinδ
Mutant 117 in geo-point.ts: cosδ - sinφ1 * sinφ2 replaced with cosδ + sinφ1 * sinφ2
Mutant 118 in geo-point.ts: sinφ1 * sinφ2 replaced with sinφ1 / sinφ2
Mutant 119 in geo-point.ts: λ1 + atan2(y, x) replaced with λ1 - atan2(y, x)
Mutant 120 in geo-point.ts: (rad2deg(λ2) + 540) % 360 - 180 replaced with (rad2deg(λ2) + 540) % 360 + 180
Mutant 121 in geo-point.ts: (rad2deg(λ2) + 540) % 360 replaced with (rad2deg(λ2) + 540) * 360
Mutant 122 in geo-point.ts: rad2deg(λ2) + 540 replaced with rad2deg(λ2) - 540
Mutant 123 in geo-point.ts: {
  return new GeoPoint(array[0], array[1]);
} replaced with {}
Mutant 124 in geo-point.ts: {
  return new GeoPoint(array[1], array[0]);
} replaced with {}
Mutant 125 in geo-point.ts: {
  // retrieved from: https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#ECMAScript_.28JavaScript.2FActionScript.2C_etc..29
  const x = Math.floor((coordinate.longitude + 180) / 360 * Math.pow(2, zoom));
  const y = Math.floor((1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom));
  return {
    x,
    y
  };
} replaced with {}
Mutant 126 in geo-point.ts: (coordinate.longitude + 180) / 360 * Math.pow(2, zoom) replaced with (coordinate.longitude + 180) / 360 / Math.pow(2, zoom)
Mutant 127 in geo-point.ts: (coordinate.longitude + 180) / 360 replaced with (coordinate.longitude + 180) * 360
Mutant 128 in geo-point.ts: coordinate.longitude + 180 replaced with coordinate.longitude - 180
Mutant 129 in geo-point.ts: (1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom) replaced with (1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) / 2 / Math.pow(2, zoom)
Mutant 130 in geo-point.ts: (1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) / 2 replaced with (1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) * 2
Mutant 131 in geo-point.ts: 1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI replaced with 1 + Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI
Mutant 132 in geo-point.ts: Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI replaced with Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) * Math.PI
Mutant 133 in geo-point.ts: Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180) replaced with Math.tan(coordinate.latitude * Math.PI / 180) - 1 / Math.cos(coordinate.latitude * Math.PI / 180)
Mutant 134 in geo-point.ts: coordinate.latitude * Math.PI / 180 replaced with coordinate.latitude * Math.PI * 180
Mutant 135 in geo-point.ts: coordinate.latitude * Math.PI replaced with coordinate.latitude / Math.PI
Mutant 136 in geo-point.ts: 1 / Math.cos(coordinate.latitude * Math.PI / 180) replaced with 1 * Math.cos(coordinate.latitude * Math.PI / 180)
Mutant 137 in geo-point.ts: coordinate.latitude * Math.PI / 180 replaced with coordinate.latitude * Math.PI * 180
Mutant 138 in geo-point.ts: coordinate.latitude * Math.PI replaced with coordinate.latitude / Math.PI
Mutant 139 in geo-point.ts: {
  x,
  y
} replaced with {}
Mutant 140 in geo-point.ts: {
  return GeoPoint.calculateDestination(this, distance, bearing);
} replaced with {}
Mutant 141 in geo-point.ts: {
  return GeoPoint.calculateBearing(this, point);
} replaced with {}
Mutant 142 in geo-point.ts: {
  return GeoPoint.calculateDistance(this, point);
} replaced with {}
Mutant 143 in geo-point.ts: {
  return `${this.latitude},${this.longitude}`;
} replaced with {}
Mutant 144 in geo-point.ts: `${this.latitude},${this.longitude}` replaced with ``
Mutant 145 in geo-point.ts: {
  return {
    type: 'Point',
    coordinates: [this.longitude, this.latitude]
  };
} replaced with {}
Mutant 146 in geo-point.ts: {
  type: 'Point',
  coordinates: [this.longitude, this.latitude]
} replaced with {}
Mutant 147 in geo-point.ts: 'Point' replaced with ""
Mutant 148 in geo-point.ts: [this.longitude, this.latitude] replaced with []
Mutant 149 in geo-point.ts: {
  return {
    latitude: this.latitude,
    longitude: this.longitude
  };
} replaced with {}
Mutant 150 in geo-point.ts: {
  latitude: this.latitude,
  longitude: this.longitude
} replaced with {}
Mutant 151 in geo-point.ts: {
  return [this.latitude, this.longitude];
} replaced with {}
Mutant 152 in geo-point.ts: [this.latitude, this.longitude] replaced with []
Mutant 153 in geo-point.ts: {
  return [this.longitude, this.latitude];
} replaced with {}
Mutant 154 in geo-point.ts: [this.longitude, this.latitude] replaced with []
Mutant 155 in geo-point.ts: {
  return GeoPoint.toTile(this, zoom);
} replaced with {}
Mutant 156 in geo-point.ts: {
  const adjust = (input: number) => parseFloat(input.toFixed(precision));
  return new GeoPoint(adjust(this.latitude), adjust(this.longitude));
} replaced with {}
Mutant 157 in geo-point.ts: (input: number) => parseFloat(input.toFixed(precision)) replaced with () => undefined
[32m15:17:02 (2455) INFO Instrumenter[39m Instrumented 2 source file(s) with 158 mutant(s)
[32m15:17:02 (2455) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m15:17:03 (2455) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m15:17:03 (2455) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m15:17:05 (2455) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 2 seconds (net 2751 ms, overhead 2 ms).
Mutation testing 2% (elapsed: <1m, remaining: ~6m) 4/158 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~6m) 8/158 tested (4 survived, 0 timed out)
Mutation testing 8% (elapsed: <1m, remaining: ~5m) 13/158 tested (6 survived, 0 timed out)
Mutation testing 10% (elapsed: <1m, remaining: ~5m) 17/158 tested (8 survived, 0 timed out)
Mutation testing 13% (elapsed: <1m, remaining: ~5m) 22/158 tested (10 survived, 0 timed out)
Mutation testing 16% (elapsed: ~1m, remaining: ~5m) 26/158 tested (14 survived, 0 timed out)
Mutation testing 19% (elapsed: ~1m, remaining: ~4m) 31/158 tested (16 survived, 0 timed out)
Mutation testing 22% (elapsed: ~1m, remaining: ~4m) 35/158 tested (19 survived, 0 timed out)
Mutation testing 25% (elapsed: ~1m, remaining: ~4m) 40/158 tested (22 survived, 0 timed out)
Mutation testing 27% (elapsed: ~1m, remaining: ~4m) 44/158 tested (25 survived, 0 timed out)
Mutation testing 31% (elapsed: ~1m, remaining: ~4m) 49/158 tested (27 survived, 0 timed out)
Mutation testing 33% (elapsed: ~2m, remaining: ~3m) 53/158 tested (30 survived, 0 timed out)
Mutation testing 36% (elapsed: ~2m, remaining: ~3m) 58/158 tested (31 survived, 0 timed out)
Mutation testing 39% (elapsed: ~2m, remaining: ~3m) 62/158 tested (34 survived, 0 timed out)
Mutation testing 42% (elapsed: ~2m, remaining: ~3m) 67/158 tested (36 survived, 0 timed out)
Mutation testing 44% (elapsed: ~2m, remaining: ~3m) 71/158 tested (39 survived, 0 timed out)
Mutation testing 48% (elapsed: ~2m, remaining: ~3m) 76/158 tested (41 survived, 0 timed out)
Mutation testing 50% (elapsed: ~3m, remaining: ~2m) 80/158 tested (44 survived, 0 timed out)
Mutation testing 53% (elapsed: ~3m, remaining: ~2m) 85/158 tested (46 survived, 0 timed out)
Mutation testing 56% (elapsed: ~3m, remaining: ~2m) 89/158 tested (48 survived, 0 timed out)
Mutation testing 59% (elapsed: ~3m, remaining: ~2m) 94/158 tested (48 survived, 0 timed out)
Mutation testing 62% (elapsed: ~3m, remaining: ~2m) 98/158 tested (49 survived, 0 timed out)
Mutation testing 65% (elapsed: ~3m, remaining: ~2m) 103/158 tested (50 survived, 0 timed out)
Mutation testing 67% (elapsed: ~4m, remaining: ~1m) 107/158 tested (50 survived, 0 timed out)
Mutation testing 70% (elapsed: ~4m, remaining: ~1m) 112/158 tested (51 survived, 0 timed out)
Mutation testing 73% (elapsed: ~4m, remaining: ~1m) 116/158 tested (54 survived, 0 timed out)
Mutation testing 76% (elapsed: ~4m, remaining: ~1m) 121/158 tested (57 survived, 0 timed out)
Mutation testing 79% (elapsed: ~4m, remaining: ~1m) 125/158 tested (58 survived, 0 timed out)
Mutation testing 82% (elapsed: ~4m, remaining: ~1m) 130/158 tested (58 survived, 0 timed out)
Mutation testing 84% (elapsed: ~5m, remaining: <1m) 134/158 tested (58 survived, 0 timed out)
Mutation testing 87% (elapsed: ~5m, remaining: <1m) 139/158 tested (58 survived, 0 timed out)
Mutation testing 90% (elapsed: ~5m, remaining: <1m) 143/158 tested (60 survived, 0 timed out)
Mutation testing 93% (elapsed: ~5m, remaining: <1m) 148/158 tested (60 survived, 0 timed out)
Mutation testing 96% (elapsed: ~5m, remaining: <1m) 152/158 tested (60 survived, 0 timed out)
Mutation testing 99% (elapsed: ~5m, remaining: <1m) 157/158 tested (60 survived, 0 timed out)

All tests
  ✓ All tests (killed 98)

[Survived] ConditionalExpression
src/geo-point.ts:11:29
-   const isObject = (input) => typeof input === 'object' && input !== null;
+   const isObject = (input) => true;

[Survived] LogicalOperator
src/geo-point.ts:11:29
-   const isObject = (input) => typeof input === 'object' && input !== null;
+   const isObject = (input) => typeof input === 'object' || input !== null;

[Survived] ConditionalExpression
src/geo-point.ts:11:29
-   const isObject = (input) => typeof input === 'object' && input !== null;
+   const isObject = (input) => true && input !== null;

[Survived] ConditionalExpression
src/geo-point.ts:11:58
-   const isObject = (input) => typeof input === 'object' && input !== null;
+   const isObject = (input) => typeof input === 'object' && true;

[Survived] ConditionalExpression
src/geo-point.ts:38:9
-       if (typeof latitude !== 'number' || typeof longitude !== 'number') {
+       if (false) {

[Survived] LogicalOperator
src/geo-point.ts:38:9
-       if (typeof latitude !== 'number' || typeof longitude !== 'number') {
+       if (typeof latitude !== 'number' && typeof longitude !== 'number') {

[Survived] ConditionalExpression
src/geo-point.ts:38:9
-       if (typeof latitude !== 'number' || typeof longitude !== 'number') {
+       if (false || typeof longitude !== 'number') {

[Survived] ConditionalExpression
src/geo-point.ts:38:41
-       if (typeof latitude !== 'number' || typeof longitude !== 'number') {
+       if (typeof latitude !== 'number' || false) {

[Survived] BlockStatement
src/geo-point.ts:38:72
-       if (typeof latitude !== 'number' || typeof longitude !== 'number') {
-         throw new RangeError('Bad geo point arguments');
-       }
+       if (typeof latitude !== 'number' || typeof longitude !== 'number') {}

[Survived] StringLiteral
src/geo-point.ts:39:28
-         throw new RangeError('Bad geo point arguments');
+         throw new RangeError("");

[Survived] ConditionalExpression
src/geo-point.ts:42:9
-       if (latitude < -90 || latitude > 90) {
+       if (false) {

[Survived] LogicalOperator
src/geo-point.ts:42:9
-       if (latitude < -90 || latitude > 90) {
+       if (latitude < -90 && latitude > 90) {

[Survived] ConditionalExpression
src/geo-point.ts:42:9
-       if (latitude < -90 || latitude > 90) {
+       if (false || latitude > 90) {

[Survived] EqualityOperator
src/geo-point.ts:42:9
-       if (latitude < -90 || latitude > 90) {
+       if (latitude <= -90 || latitude > 90) {

[Survived] ConditionalExpression
src/geo-point.ts:42:27
-       if (latitude < -90 || latitude > 90) {
+       if (latitude < -90 || false) {

[Survived] EqualityOperator
src/geo-point.ts:42:27
-       if (latitude < -90 || latitude > 90) {
+       if (latitude < -90 || latitude >= 90) {

[Survived] BlockStatement
src/geo-point.ts:42:42
-       if (latitude < -90 || latitude > 90) {
-         throw new RangeError('bad latitude value');
-       }
+       if (latitude < -90 || latitude > 90) {}

[Survived] StringLiteral
src/geo-point.ts:43:28
-         throw new RangeError('bad latitude value');
+         throw new RangeError("");

[Survived] ConditionalExpression
src/geo-point.ts:46:9
-       if (longitude < -180 || longitude > 180) {
+       if (false) {

[Survived] LogicalOperator
src/geo-point.ts:46:9
-       if (longitude < -180 || longitude > 180) {
+       if (longitude < -180 && longitude > 180) {

[Survived] ConditionalExpression
src/geo-point.ts:46:9
-       if (longitude < -180 || longitude > 180) {
+       if (false || longitude > 180) {

[Survived] EqualityOperator
src/geo-point.ts:46:9
-       if (longitude < -180 || longitude > 180) {
+       if (longitude <= -180 || longitude > 180) {

[Survived] ConditionalExpression
src/geo-point.ts:46:29
-       if (longitude < -180 || longitude > 180) {
+       if (longitude < -180 || false) {

[Survived] EqualityOperator
src/geo-point.ts:46:29
-       if (longitude < -180 || longitude > 180) {
+       if (longitude < -180 || longitude >= 180) {

[Survived] BlockStatement
src/geo-point.ts:46:46
-       if (longitude < -180 || longitude > 180) {
-         throw new RangeError('bad longitude value');
-       }
+       if (longitude < -180 || longitude > 180) {}

[Survived] StringLiteral
src/geo-point.ts:47:28
-         throw new RangeError('bad longitude value');
+         throw new RangeError("");

[Survived] ConditionalExpression
src/geo-point.ts:60:9
-       if (!isObject(point)) {
+       if (false) {

[Survived] BlockStatement
src/geo-point.ts:60:27
-       if (!isObject(point)) {
-         throw new TypeError('GeoPoint: Argument must be an object');
-       }
+       if (!isObject(point)) {}

[Survived] StringLiteral
src/geo-point.ts:61:27
-         throw new TypeError('GeoPoint: Argument must be an object');
+         throw new TypeError("");

[Survived] ConditionalExpression
src/geo-point.ts:64:9
-       if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {
+       if (false) {

[Survived] LogicalOperator
src/geo-point.ts:64:9
-       if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {
+       if (!point.hasOwnProperty('type') && !point.hasOwnProperty('coordinates')) {

[Survived] BlockStatement
src/geo-point.ts:64:80
-       if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {
-         throw new TypeError('Object must have type and coordinates');
-       }
+       if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {}

[Survived] StringLiteral
src/geo-point.ts:65:27
-         throw new TypeError('Object must have type and coordinates');
+         throw new TypeError("");

[Survived] ConditionalExpression
src/geo-point.ts:68:9
-       if (point.type !== 'Point') {
+       if (false) {

[Survived] BlockStatement
src/geo-point.ts:68:33
-       if (point.type !== 'Point') {
-         throw new TypeError('The value of type should be \'Point\'');
-       }
+       if (point.type !== 'Point') {}

[Survived] StringLiteral
src/geo-point.ts:69:27
-         throw new TypeError('The value of type should be \'Point\'');
+         throw new TypeError("");

[Survived] ConditionalExpression
src/geo-point.ts:72:9
-       if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {
+       if (false) {

[Survived] LogicalOperator
src/geo-point.ts:72:9
-       if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {
+       if (!Array.isArray(point.coordinates) && point.coordinates.length !== 2) {

[Survived] ConditionalExpression
src/geo-point.ts:72:46
-       if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {
+       if (!Array.isArray(point.coordinates) || false) {

[Survived] BlockStatement
src/geo-point.ts:72:78
-       if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {
-         throw new TypeError('coordinates must be an array and contain 2 elements');
-       }
+       if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {}

[Survived] StringLiteral
src/geo-point.ts:73:27
-         throw new TypeError('coordinates must be an array and contain 2 elements');
+         throw new TypeError("");

[Survived] ConditionalExpression
src/geo-point.ts:85:9
-       if (!isObject(object)) {
+       if (false) {

[Survived] BlockStatement
src/geo-point.ts:85:28
-       if (!isObject(object)) {
-         throw new TypeError('GeoPoint: Argument must be an object');
-       }
+       if (!isObject(object)) {}

[Survived] StringLiteral
src/geo-point.ts:86:27
-         throw new TypeError('GeoPoint: Argument must be an object');
+         throw new TypeError("");

[Survived] ConditionalExpression
src/geo-point.ts:89:9
-       if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {
+       if (false) {

[Survived] LogicalOperator
src/geo-point.ts:89:9
-       if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {
+       if (!object.hasOwnProperty('latitude') && !object.hasOwnProperty('longitude')) {

[Survived] BlockStatement
src/geo-point.ts:89:84
-       if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {
-         throw new TypeError('Object must have latitude and longitude');
-       }
+       if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {}

[Survived] StringLiteral
src/geo-point.ts:90:27
-         throw new TypeError('Object must have latitude and longitude');
+         throw new TypeError("");

[Survived] ConditionalExpression
src/geo-point.ts:110:17
-       return acos(r > 1 ? 1 : r) * 6371392.896;
+       return acos(false ? 1 : r) * 6371392.896;

[Survived] EqualityOperator
src/geo-point.ts:110:17
-       return acos(r > 1 ? 1 : r) * 6371392.896;
+       return acos(r >= 1 ? 1 : r) * 6371392.896;

[Survived] ArithmeticOperator
src/geo-point.ts:153:19
-       const sinφ2 = sinφ1 * cosδ + cosφ1 * sinδ * cosθ;
+       const sinφ2 = sinφ1 * cosδ - cosφ1 * sinδ * cosθ;

[Survived] ArithmeticOperator
src/geo-point.ts:153:19
-       const sinφ2 = sinφ1 * cosδ + cosφ1 * sinδ * cosθ;
+       const sinφ2 = sinφ1 / cosδ + cosφ1 * sinδ * cosθ;

[Survived] ArithmeticOperator
src/geo-point.ts:153:34
-       const sinφ2 = sinφ1 * cosδ + cosφ1 * sinδ * cosθ;
+       const sinφ2 = sinφ1 * cosδ + cosφ1 * sinδ / cosθ;

[Survived] ArithmeticOperator
src/geo-point.ts:155:15
-       const y = sinθ * sinδ * cosφ1;
+       const y = sinθ * sinδ / cosφ1;

[Survived] ArithmeticOperator
src/geo-point.ts:156:15
-       const x = cosδ - sinφ1 * sinφ2;
+       const x = cosδ + sinφ1 * sinφ2;

[Survived] ArithmeticOperator
src/geo-point.ts:156:22
-       const x = cosδ - sinφ1 * sinφ2;
+       const x = cosδ - sinφ1 / sinφ2;

[Survived] ArithmeticOperator
src/geo-point.ts:157:16
-       const λ2 = λ1 + atan2(y, x);
+       const λ2 = λ1 - atan2(y, x);

[Survived] BlockStatement
src/geo-point.ts:170:82
-     static fromLatLngArray(array: [latitude: number, longitude: number]): GeoPoint {
-       return new GeoPoint(array[0], array[1]);
-     }
+     static fromLatLngArray(array: [latitude: number, longitude: number]): GeoPoint {}

[Survived] BlockStatement
src/geo-point.ts:209:45
-     calculateBearing(point: GeoPoint): number {
-       return GeoPoint.calculateBearing(this, point);
-     }
+     calculateBearing(point: GeoPoint): number {}

[Survived] BlockStatement
src/geo-point.ts:218:46
-     calculateDistance(point: GeoPoint): number {
-       return GeoPoint.calculateDistance(this, point);
-     }
+     calculateDistance(point: GeoPoint): number {}

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   62.03 |       98 |         0 |         60 |        0 |        0 |
 geo-point.ts |   62.03 |       98 |         0 |         60 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m15:22:58 (2455) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llmorpheus/llmorpheus/node-geo-point/reports/mutation/mutation.html
[32m15:22:58 (2455) INFO MutationTestExecutor[39m Done in 5 minutes 56 seconds.

real	5m57.701s
user	11m25.251s
sys	0m44.951s
