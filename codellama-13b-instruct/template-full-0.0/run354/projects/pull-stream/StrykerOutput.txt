*** using precomputed mutations ***
[32m11:44:44 (2790) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m11:44:44 (2790) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m11:44:44 (2790) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m11:44:44 (2790) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m11:44:44 (2790) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m11:44:46 (2790) INFO ProjectReader[39m Found 31 of 1504 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 669 mutants from MUTATION_TESTING/template-full_codellama-13b-instruct_0.0/mutants.json ***
Mutant 0 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in throughs) exports[k] = sources[k];
Mutant 1 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in sinks) exports[k] = sources[k];
Mutant 2 in index.js: sources replaced with sources[0]
Mutant 3 in index.js: sources replaced with sources.length
Mutant 4 in index.js: sources replaced with sources.slice(0, 1)
Mutant 5 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k of throughs) exports[k] = throughs[k];
Mutant 6 in index.js: throughs replaced with throughs.map(function (x) {
  return x * 2;
})
Mutant 7 in index.js: throughs replaced with throughs.filter(function (x) {
  return x > 5;
})
Mutant 8 in index.js: throughs replaced with throughs.reduce(function (x, y) {
  return x + y;
})
Mutant 9 in index.js: for (var k in sinks) exports[k] = sinks[k]; replaced with for (var k in sinks.length) exports[k] = sinks[k];
Mutant 10 in index.js: sinks replaced with sinks[0]
Mutant 11 in index.js: sinks replaced with sinks.length
Mutant 12 in index.js: sinks replaced with sinks.toString()
Mutant 13 in pull.js: typeof a === 'function' && a.length === 1 replaced with typeof a === 'function' && a.length === 2
Mutant 14 in pull.js: typeof a === 'function' && a.length === 1 replaced with typeof a === 'function' && a.length === 0
Mutant 15 in pull.js: typeof a === 'function' && a.length === 1 replaced with typeof a === 'object' && a.length === 1
Mutant 16 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = 1; i < length; i++) args[i] = arguments[i];
Mutant 17 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = -1; i < length; i++) args[i] = arguments[i];
Mutant 18 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = "0"; i < length; i++) args[i] = arguments[i];
Mutant 19 in pull.js: i < length replaced with i <= length
Mutant 20 in pull.js: i < length replaced with i > length
Mutant 21 in pull.js: i < length replaced with i = length
Mutant 22 in pull.js: i++ replaced with i--
Mutant 23 in pull.js: i++ replaced with i = i + 1
Mutant 24 in pull.js: i++ replaced with i = i * 2
Mutant 25 in pull.js: args == null replaced with args === null
Mutant 26 in pull.js: args == null replaced with args != null
Mutant 27 in pull.js: args == null replaced with args.length === 0
Mutant 28 in pull.js: length replaced with length + 1
Mutant 29 in pull.js: length replaced with length - 1
Mutant 30 in pull.js: length replaced with length * 2
Mutant 31 in pull.js: pull(read, ref[0]) replaced with pull(read, ref[0] + 1)
Mutant 32 in pull.js: pull(read, ref[0]) replaced with pull(read, ref[0] - 1)
Mutant 33 in pull.js: pull(read, ref[0]) replaced with pull(read, ref[0] * 2)
Mutant 34 in pull.js: read replaced with read + 1
Mutant 35 in pull.js: read replaced with read - 1
Mutant 36 in pull.js: read replaced with read * 2
Mutant 37 in pull.js: ref[0] replaced with ref[1]
Mutant 38 in pull.js: ref[0] replaced with ref[2]
Mutant 39 in pull.js: ref[0] replaced with ref[3]
Mutant 40 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[0], ref[1], ref[2])
Mutant 41 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[0], ref[1], ref[2], ref[3])
Mutant 42 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[0], ref[1], ref[2], ref[3], ref[4])
Mutant 43 in pull.js: read replaced with read.source
Mutant 44 in pull.js: read replaced with read.sink
Mutant 45 in pull.js: read replaced with read.source.sink
Mutant 46 in pull.js: ref[0] replaced with ref[1]
Mutant 47 in pull.js: ref[0] replaced with ref[length - 1]
Mutant 48 in pull.js: ref[0] replaced with ref[Math.floor(Math.random() * length)]
Mutant 49 in pull.js: ref[1] replaced with ref[0]
Mutant 50 in pull.js: ref[1] replaced with ref[2]
Mutant 51 in pull.js: ref[1] replaced with ref[3]
Mutant 52 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[2], ref[3])
Mutant 53 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[2], ref[4])
Mutant 54 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[2], ref[5])
Mutant 55 in pull.js: read replaced with read.source
Mutant 56 in pull.js: read replaced with read.sink
Mutant 57 in pull.js: read replaced with read.source.sink
Mutant 58 in pull.js: ref[0] replaced with ref[1]
Mutant 59 in pull.js: ref[0] replaced with ref[2]
Mutant 60 in pull.js: ref[0] replaced with ref[3]
Mutant 61 in pull.js: ref[1] replaced with ref[2]
Mutant 62 in pull.js: ref[1] replaced with ref[0]
Mutant 63 in pull.js: ref[1] replaced with ref[length - 1]
Mutant 64 in pull.js: ref[2] replaced with ref[3]
Mutant 65 in pull.js: ref[2] replaced with ref[1]
Mutant 66 in pull.js: ref[2] replaced with ref[0]
Mutant 67 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], ref[3], ref[4])
Mutant 68 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], ref[3], ref[3])
Mutant 69 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], ref[3], ref[4], ref[5])
Mutant 70 in pull.js: read replaced with read + 1
Mutant 71 in pull.js: read replaced with read - 1
Mutant 72 in pull.js: read replaced with read * 2
Mutant 73 in pull.js: ref[0] replaced with ref[1]
Mutant 74 in pull.js: ref[0] replaced with ref[length - 1]
Mutant 75 in pull.js: ref[0] replaced with ref[Math.floor(Math.random() * length)]
Mutant 76 in pull.js: ref[1] replaced with ref[2]
Mutant 77 in pull.js: ref[1] replaced with ref[0]
Mutant 78 in pull.js: ref[1] replaced with ref[3]
Mutant 79 in pull.js: ref[2] replaced with ref[3]
Mutant 80 in pull.js: ref[2] replaced with ref[1]
Mutant 81 in pull.js: ref[2] replaced with ref[0]
Mutant 82 in pull.js: ref[3] replaced with ref[4]
Mutant 83 in pull.js: ref[3] replaced with ref[0]
Mutant 84 in pull.js: ref[3] replaced with ref[1]
Mutant 85 in pull.js: ref.unshift replaced with ref.push
Mutant 86 in pull.js: read replaced with read.source
Mutant 87 in pull.js: read replaced with read.sink
Mutant 88 in pull.js: read replaced with read.source.sink
Mutant 89 in pull.js: pull.apply(null, ref) replaced with pull.apply(undefined, ref)
Mutant 90 in pull.js: pull.apply(null, ref) replaced with pull.apply(null, null)
Mutant 91 in pull.js: pull.apply(null, ref) replaced with pull.apply('', ref)
Mutant 92 in pull.js: null replaced with undefined
Mutant 93 in pull.js: null replaced with []
Mutant 94 in pull.js: ref replaced with ref[0]
Mutant 95 in pull.js: ref replaced with ref[1]
Mutant 96 in pull.js: ref replaced with ref[2]
Mutant 97 in pull.js: read && typeof read.source === 'function' replaced with read && typeof read.source === 'function' && read.source()
Mutant 98 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = 0; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 99 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = length + 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 100 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = length - 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 101 in pull.js: i < length replaced with i <= length
Mutant 102 in pull.js: i < length replaced with i > length
Mutant 103 in pull.js: i < length replaced with i = length
Mutant 104 in pull.js: i++ replaced with i--
Mutant 105 in pull.js: i++ replaced with i = i + 1
Mutant 106 in pull.js: i++ replaced with i = i * 2
Mutant 107 in pull.js: typeof s === 'function' replaced with typeof s !== 'function'
Mutant 108 in pull.js: typeof s === 'function' replaced with s === null
Mutant 109 in pull.js: typeof s === 'function' replaced with s.length === 0
Mutant 110 in pull.js: s replaced with s + 1
Mutant 111 in pull.js: s replaced with s - 1
Mutant 112 in pull.js: s replaced with s * 2
Mutant 113 in pull.js: read replaced with read.source
Mutant 114 in pull.js: read replaced with read.sink
Mutant 115 in pull.js: read replaced with read.source.sink
Mutant 116 in pull.js: s && typeof s === 'object' replaced with s && typeof s === 'object' && s.length > 0
Mutant 117 in pull.js: s && typeof s === 'object' replaced with s && typeof s === 'object' && s.length === 0
Mutant 118 in pull.js: s && typeof s === 'object' replaced with s && typeof s === 'object' && s.length < 0
Mutant 119 in pull.js: read replaced with read.source
Mutant 120 in pull.js: read replaced with read.sink
Mutant 121 in pull.js: read replaced with read.source.sink
Mutant 122 in collect.js: item replaced with item + 1
Mutant 123 in collect.js: item replaced with item - 1
Mutant 124 in collect.js: item replaced with item * 2
Mutant 125 in drain.js: !done replaced with done === undefined
Mutant 126 in drain.js: !done replaced with done === null
Mutant 127 in drain.js: !done replaced with done === false
Mutant 128 in drain.js: abort replaced with abort = true
Mutant 129 in drain.js: abort replaced with abort = false
Mutant 130 in drain.js: abort replaced with abort = null
Mutant 131 in drain.js: loop replaced with loop = false
Mutant 132 in drain.js: loop replaced with loop = true
Mutant 133 in drain.js: loop replaced with loop = undefined
Mutant 134 in drain.js: end = end || abort replaced with end = !end
Mutant 135 in drain.js: end = end || abort replaced with end = end && !abort
Mutant 136 in drain.js: done replaced with done(null)
Mutant 137 in drain.js: done replaced with done(new Error('test error'))
Mutant 138 in drain.js: done replaced with done(true)
Mutant 139 in drain.js: end && end !== true replaced with end !== true
Mutant 140 in drain.js: end && end !== true replaced with end !== false
Mutant 141 in drain.js: console.warn replaced with console.error
Mutant 142 in drain.js: console.warn replaced with console.log
Mutant 143 in drain.js: doneLackingErr replaced with doneLackingErr = new Error('no done callback supplied')
Mutant 144 in drain.js: doneLackingErr replaced with doneLackingErr = null
Mutant 145 in drain.js: doneLackingErr replaced with doneLackingErr = undefined
Mutant 146 in drain.js: op && false === op(data) || abort replaced with op && true === op(data) || abort
Mutant 147 in drain.js: op && false === op(data) || abort replaced with op && null === op(data) || abort
Mutant 148 in drain.js: op replaced with !op
Mutant 149 in drain.js: op replaced with op.length
Mutant 150 in drain.js: data replaced with undefined
Mutant 151 in drain.js: read(abort || true, done || function () {}) replaced with read(abort || false, done || function () {})
Mutant 152 in drain.js: abort || true replaced with abort && true
Mutant 153 in drain.js: abort || true replaced with !abort || true
Mutant 154 in drain.js: abort || true replaced with abort || false
Mutant 155 in drain.js: done || function () {} replaced with done && function () {}
Mutant 156 in drain.js: done || function () {} replaced with done || function () {
  throw new Error('done is not a function');
}
Mutant 157 in drain.js: done || function () {} replaced with done || function () {
  console.log('done is not a function');
}
Mutant 158 in drain.js: !loop replaced with loop = true
Mutant 159 in drain.js: !loop replaced with loop = false
Mutant 160 in drain.js: !loop replaced with loop = undefined
Mutant 161 in drain.js: !cbed replaced with cbed
Mutant 162 in drain.js: !cbed replaced with cbed === true
Mutant 163 in drain.js: 'function' == typeof err replaced with 'function' === typeof err
Mutant 164 in drain.js: 'function' == typeof err replaced with err instanceof Error
Mutant 165 in drain.js: 'function' == typeof err replaced with err.name === 'Error'
Mutant 166 in drain.js: read replaced with read(null, function (end, data) {
  cbed = true;
  if (end = end || abort) {
    loop = false;
    if (done) done(end === true ? null : end);else if (end && end !== true) {
      console.warn(doneLackingErr);
      throw end;
    }
  } else if (op && false === op(data) || abort) {
    loop = false;
    read(abort || true, done || function () {});
  } else if (!loop) {
    next();
  }
})
Mutant 167 in drain.js: read(abort, cb || function () {}) replaced with read(abort, cb && function () {})
Mutant 168 in drain.js: read(abort, cb || function () {}) replaced with read(abort, cb ? function () {} : function () {})
Mutant 169 in drain.js: abort replaced with abort = true
Mutant 170 in drain.js: abort replaced with abort = false
Mutant 171 in drain.js: abort replaced with abort = null
Mutant 172 in drain.js: cb || function () {} replaced with cb || function () {
  throw new Error('Test error');
}
Mutant 173 in drain.js: cb || function () {} replaced with cb || function () {
  return 'Test error';
}
Mutant 174 in drain.js: cb || function () {} replaced with cb || function () {
  console.log('Test error');
}
Mutant 175 in find.js: !cb replaced with !test
Mutant 176 in find.js: !cb replaced with test()
Mutant 177 in find.js: !cb replaced with test(data)
Mutant 178 in find.js: prop replaced with prop.id
Mutant 179 in find.js: test(data) replaced with test(data, 1)
Mutant 180 in find.js: test(data) replaced with test(data, function () {})
Mutant 181 in find.js: test replaced with test === undefined
Mutant 182 in find.js: test replaced with test === null
Mutant 183 in find.js: test replaced with test === 0
Mutant 184 in find.js: data replaced with data.length
Mutant 185 in find.js: data replaced with data[0]
Mutant 186 in find.js: data replaced with data.slice(0, 1)
Mutant 187 in find.js: cb(null, data) replaced with cb(undefined, data)
Mutant 188 in find.js: cb(null, data) replaced with cb(null, null)
Mutant 189 in find.js: cb(null, data) replaced with cb(data, data)
Mutant 190 in find.js: null replaced with undefined
Mutant 191 in find.js: null replaced with true
Mutant 192 in find.js: data replaced with data.length
Mutant 193 in find.js: data replaced with data[0]
Mutant 194 in find.js: data replaced with data.slice(0, 1)
Mutant 195 in find.js: ended replaced with ended = true
Mutant 196 in find.js: ended replaced with ended = false
Mutant 197 in find.js: ended replaced with ended = null
Mutant 198 in find.js: err === true ? null : err replaced with err === false ? null : err
Mutant 199 in find.js: err === true ? null : err replaced with err === null ? null : err
Mutant 200 in find.js: null replaced with undefined
Mutant 201 in find.js: null replaced with new Error()
Mutant 202 in log.js: data replaced with data + 1
Mutant 203 in log.js: data replaced with data - 1
Mutant 204 in log.js: data replaced with data * 2
Mutant 205 in on-end.js: drain(null, done) replaced with drain(undefined, done)
Mutant 206 in on-end.js: drain(null, done) replaced with drain(null, undefined)
Mutant 207 in on-end.js: drain(null, done) replaced with drain(drain(done))
Mutant 208 in on-end.js: null replaced with undefined
Mutant 209 in on-end.js: null replaced with {}
Mutant 210 in on-end.js: done replaced with done()
Mutant 211 in on-end.js: done replaced with done(null)
Mutant 212 in on-end.js: done replaced with done(new Error('test error'))
Mutant 213 in reduce.js: !cb replaced with cb = null
Mutant 214 in reduce.js: !cb replaced with acc = null
Mutant 215 in reduce.js: !cb replaced with reducer = null
Mutant 216 in reduce.js: reducer(acc, data) replaced with reducer(acc = data)
Mutant 217 in reduce.js: reducer(acc, data) replaced with reducer(acc = reducer(data))
Mutant 218 in reduce.js: reducer(acc, data) replaced with reducer(acc = reducer(acc, data))
Mutant 219 in reduce.js: reducer replaced with acc + data
Mutant 220 in reduce.js: acc replaced with acc + 1
Mutant 221 in reduce.js: acc replaced with acc - 1
Mutant 222 in reduce.js: acc replaced with acc * 2
Mutant 223 in reduce.js: data replaced with data + 1
Mutant 224 in reduce.js: data replaced with data - 1
Mutant 225 in reduce.js: data replaced with data * 2
Mutant 226 in reduce.js: cb(err, acc) replaced with cb(acc, err)
Mutant 227 in reduce.js: cb(err, acc) replaced with cb(err, acc, null)
Mutant 228 in reduce.js: err replaced with null
Mutant 229 in reduce.js: err replaced with undefined
Mutant 230 in reduce.js: err replaced with new Error()
Mutant 231 in reduce.js: acc replaced with acc + 1
Mutant 232 in reduce.js: acc replaced with acc - 1
Mutant 233 in reduce.js: acc replaced with acc * 2
Mutant 234 in reduce.js: arguments.length === 2 replaced with arguments.length === 3
Mutant 235 in reduce.js: arguments.length === 2 replaced with arguments.length > 2
Mutant 236 in reduce.js: arguments.length === 2 replaced with arguments.length < 2
Mutant 237 in reduce.js: end replaced with end === true
Mutant 238 in reduce.js: end replaced with !end
Mutant 239 in reduce.js: end replaced with end === null
Mutant 240 in reduce.js: end === true ? null : end replaced with end === true ? null : acc
Mutant 241 in reduce.js: end === true ? null : end replaced with end === true ? null : data
Mutant 242 in count.js: end replaced with end = 10
Mutant 243 in count.js: end replaced with end = null
Mutant 244 in count.js: end replaced with end = undefined
Mutant 245 in count.js: end replaced with end = true
Mutant 246 in count.js: end replaced with end = false
Mutant 247 in count.js: end replaced with end = undefined
Mutant 248 in count.js: i > max replaced with i < max
Mutant 249 in count.js: i > max replaced with i === max
Mutant 250 in count.js: i > max replaced with i >= max
Mutant 251 in count.js: true replaced with false
Mutant 252 in count.js: true replaced with null
Mutant 253 in count.js: true replaced with undefined
Mutant 254 in count.js: cb(null, i++) replaced with cb(i--, null)
Mutant 255 in count.js: cb(null, i++) replaced with cb(i + 1, null)
Mutant 256 in count.js: cb(null, i++) replaced with cb(i * 2, null)
Mutant 257 in count.js: null replaced with undefined
Mutant 258 in count.js: null replaced with true
Mutant 259 in count.js: i++ replaced with i--
Mutant 260 in count.js: i++ replaced with i *= 2
Mutant 261 in count.js: i++ replaced with i = 0
Mutant 262 in empty.js: true replaced with false
Mutant 263 in empty.js: true replaced with undefined
Mutant 264 in empty.js: true replaced with null
Mutant 265 in error.js: err replaced with null
Mutant 266 in error.js: err replaced with undefined
Mutant 267 in error.js: err replaced with err.message
Mutant 268 in infinite.js: end replaced with end = 10
Mutant 269 in infinite.js: end replaced with end = null
Mutant 270 in infinite.js: end replaced with end = undefined
Mutant 271 in infinite.js: end replaced with end = true
Mutant 272 in infinite.js: end replaced with end = false
Mutant 273 in infinite.js: end replaced with end = Math.random()
Mutant 274 in infinite.js: cb(null, generate()) replaced with cb(undefined, generate())
Mutant 275 in infinite.js: cb(null, generate()) replaced with cb(generate(), null)
Mutant 276 in infinite.js: null replaced with undefined
Mutant 277 in infinite.js: null replaced with true
Mutant 278 in infinite.js: generate() replaced with generate(1)
Mutant 279 in infinite.js: generate() replaced with generate(Math.random())
Mutant 280 in infinite.js: generate() replaced with generate(generate())
Mutant 281 in keys.js: values replaced with values.length
Mutant 282 in keys.js: object replaced with object.keys()
Mutant 283 in keys.js: object replaced with Object.values(object)
Mutant 284 in keys.js: object replaced with Object.entries(object)
Mutant 285 in once.js: abort replaced with abortCb(cb, abort, onAbort)
Mutant 286 in once.js: abort replaced with value != null
Mutant 287 in once.js: abort replaced with cb(null, _value)
Mutant 288 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, !abort, onAbort)
Mutant 289 in once.js: cb replaced with cb(null, value)
Mutant 290 in once.js: cb replaced with cb(value)
Mutant 291 in once.js: cb replaced with cb(null, value + 1)
Mutant 292 in once.js: abort replaced with abortCb(cb, true, onAbort)
Mutant 293 in once.js: abort replaced with abortCb(cb, null, onAbort)
Mutant 294 in once.js: abort replaced with abortCb(cb, undefined, onAbort)
Mutant 295 in once.js: onAbort replaced with onAbort()
Mutant 296 in once.js: onAbort replaced with onAbort(null)
Mutant 297 in once.js: onAbort replaced with onAbort(undefined)
Mutant 298 in once.js: value != null replaced with value === null
Mutant 299 in once.js: value != null replaced with value == null
Mutant 300 in once.js: value != null replaced with value !== null
Mutant 301 in once.js: cb(null, _value) replaced with cb(undefined, _value)
Mutant 302 in once.js: cb(null, _value) replaced with cb(_value, null)
Mutant 303 in once.js: null replaced with undefined
Mutant 304 in once.js: null replaced with true
Mutant 305 in once.js: _value replaced with _value + 1
Mutant 306 in once.js: _value replaced with _value - 1
Mutant 307 in once.js: _value replaced with _value * 2
Mutant 308 in once.js: true replaced with false
Mutant 309 in once.js: true replaced with null
Mutant 310 in once.js: true replaced with undefined
Mutant 311 in values.js: !array replaced with array.length
Mutant 312 in values.js: !array replaced with !array.length
Mutant 313 in values.js: !array replaced with array.length > 0
Mutant 314 in values.js: abort replaced with abortCb(cb, abort, onAbort)
Mutant 315 in values.js: abort replaced with cb(true)
Mutant 316 in values.js: abort replaced with cb(null, array[i++])
Mutant 317 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, onAbort, abort)
Mutant 318 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, abort, onAbort, true)
Mutant 319 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, abort, onAbort, false)
Mutant 320 in values.js: cb replaced with cb(null, array[i++])
Mutant 321 in values.js: cb replaced with cb(true)
Mutant 322 in values.js: cb replaced with abortCb(cb, abort, onAbort)
Mutant 323 in values.js: abort replaced with abortCb(cb, true, onAbort)
Mutant 324 in values.js: abort replaced with abortCb(cb, false, onAbort)
Mutant 325 in values.js: abort replaced with abortCb(cb, undefined, onAbort)
Mutant 326 in values.js: onAbort replaced with onAbort()
Mutant 327 in values.js: onAbort replaced with onAbort.call(this)
Mutant 328 in values.js: onAbort replaced with onAbort.apply(this, [])
Mutant 329 in values.js: true replaced with false
Mutant 330 in values.js: true replaced with undefined
Mutant 331 in values.js: true replaced with null
Mutant 332 in values.js: !Array.isArray(array) replaced with array.length === 0
Mutant 333 in values.js: !Array.isArray(array) replaced with array.length > 0
Mutant 334 in values.js: !Array.isArray(array) replaced with array.length < 0
Mutant 335 in values.js: array replaced with array[0]
Mutant 336 in values.js: array replaced with array.slice(0, 1)
Mutant 337 in values.js: array replaced with array[0]
Mutant 338 in values.js: array replaced with array[array.length - 1]
Mutant 339 in values.js: array replaced with array.slice(0, 1)
Mutant 340 in values.js: abort replaced with abort || true
Mutant 341 in values.js: abort replaced with abort && false
Mutant 342 in values.js: abort replaced with abort ? true : false
Mutant 343 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, onAbort, abort)
Mutant 344 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, abort, onAbort, true)
Mutant 345 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, abort, onAbort, false)
Mutant 346 in values.js: cb replaced with cb(null, array[i++])
Mutant 347 in values.js: cb replaced with cb(null, array[i])
Mutant 348 in values.js: cb replaced with cb(null, array[i - 1])
Mutant 349 in values.js: abort replaced with abortCb(cb, abort, onAbort)
Mutant 350 in values.js: abort replaced with cb(true)
Mutant 351 in values.js: abort replaced with cb(null, array[i++])
Mutant 352 in values.js: onAbort replaced with onAbort()
Mutant 353 in values.js: onAbort replaced with onAbort.call(this)
Mutant 354 in values.js: onAbort replaced with onAbort.apply(this, [])
Mutant 355 in values.js: i >= array.length replaced with i < array.length
Mutant 356 in values.js: i >= array.length replaced with i > array.length
Mutant 357 in values.js: i >= array.length replaced with i === array.length
Mutant 358 in values.js: true replaced with false
Mutant 359 in values.js: true replaced with undefined
Mutant 360 in values.js: true replaced with null
Mutant 361 in values.js: cb(null, array[i++]) replaced with cb(array[i++])
Mutant 362 in values.js: cb(null, array[i++]) replaced with cb(array[i])
Mutant 363 in values.js: cb(null, array[i++]) replaced with cb(array[i + 1])
Mutant 364 in values.js: null replaced with undefined
Mutant 365 in values.js: null replaced with true
Mutant 366 in values.js: array[i++] replaced with array[i]
Mutant 367 in async-map.js: !map replaced with map = null
Mutant 368 in async-map.js: !map replaced with map = function (data, cb) {
  cb(null, data);
}
Mutant 369 in async-map.js: !map replaced with map = function (data, cb) {
  cb(new Error('test error'));
}
Mutant 370 in async-map.js: prop replaced with prop.id
Mutant 371 in async-map.js: aborted replaced with aborted = true
Mutant 372 in async-map.js: aborted replaced with aborted = false
Mutant 373 in async-map.js: aborted replaced with aborted = undefined
Mutant 374 in async-map.js: aborted replaced with aborted = true
Mutant 375 in async-map.js: aborted replaced with aborted = false
Mutant 376 in async-map.js: aborted replaced with aborted = null
Mutant 377 in async-map.js: abort replaced with abortCb
Mutant 378 in async-map.js: abort replaced with busy
Mutant 379 in async-map.js: !busy replaced with busy
Mutant 380 in async-map.js: !busy replaced with !aborted
Mutant 381 in async-map.js: abort replaced with abortCb(abort)
Mutant 382 in async-map.js: abort replaced with abortCb(null)
Mutant 383 in async-map.js: abort replaced with abortCb(new Error('abort'))
Mutant 384 in async-map.js: busy replaced with !busy
Mutant 385 in async-map.js: busy replaced with busy == false
Mutant 386 in async-map.js: abort replaced with abortCb(abort)
Mutant 387 in async-map.js: abort replaced with cb(abort)
Mutant 388 in async-map.js: abort replaced with cb(null, data)
Mutant 389 in async-map.js: end replaced with end || true
Mutant 390 in async-map.js: end replaced with end && true
Mutant 391 in async-map.js: end replaced with end == true
Mutant 392 in async-map.js: end replaced with null
Mutant 393 in async-map.js: end replaced with undefined
Mutant 394 in async-map.js: aborted replaced with aborted = true
Mutant 395 in async-map.js: aborted replaced with aborted = false
Mutant 396 in async-map.js: aborted replaced with aborted = null
Mutant 397 in async-map.js: aborted replaced with aborted = true
Mutant 398 in async-map.js: aborted replaced with aborted = false
Mutant 399 in async-map.js: aborted replaced with aborted = null
Mutant 400 in async-map.js: aborted replaced with aborted = true
Mutant 401 in async-map.js: aborted replaced with aborted = false
Mutant 402 in async-map.js: aborted replaced with aborted = null
Mutant 403 in async-map.js: aborted replaced with aborted = true
Mutant 404 in async-map.js: aborted replaced with aborted = false
Mutant 405 in async-map.js: aborted replaced with aborted = null
Mutant 406 in async-map.js: abortCb replaced with abortCb = cb
Mutant 407 in async-map.js: abortCb replaced with abortCb = null
Mutant 408 in async-map.js: aborted replaced with aborted = true
Mutant 409 in async-map.js: aborted replaced with aborted = false
Mutant 410 in async-map.js: aborted replaced with aborted = null
Mutant 411 in async-map.js: err replaced with null
Mutant 412 in async-map.js: err replaced with undefined
Mutant 413 in async-map.js: err replaced with 'foo'
Mutant 414 in async-map.js: next(err, cb) replaced with next(err, cb, data)
Mutant 415 in async-map.js: next(err, cb) replaced with next(err, cb, data, data)
Mutant 416 in async-map.js: err replaced with null
Mutant 417 in async-map.js: err replaced with undefined
Mutant 418 in async-map.js: err replaced with "error"
Mutant 419 in async-map.js: cb replaced with cb(null, data)
Mutant 420 in async-map.js: cb replaced with cb(err, data)
Mutant 421 in async-map.js: cb replaced with cb(null, data + 1)
Mutant 422 in async-map.js: cb(null, data) replaced with cb(undefined, data)
Mutant 423 in async-map.js: cb(null, data) replaced with cb(null, undefined)
Mutant 424 in async-map.js: cb(null, data) replaced with cb(null, null)
Mutant 425 in async-map.js: null replaced with undefined
Mutant 426 in async-map.js: null replaced with true
Mutant 427 in async-map.js: data replaced with data + 1
Mutant 428 in async-map.js: data replaced with data - 1
Mutant 429 in async-map.js: data replaced with data * 2
Mutant 430 in filter-not.js: tester replaced with tester.filter
Mutant 431 in filter-not.js: test replaced with tester(test)
Mutant 432 in filter-not.js: test replaced with tester(test, true)
Mutant 433 in filter-not.js: test replaced with tester(test, false)
Mutant 434 in filter-not.js: filter replaced with filter.not
Mutant 435 in filter-not.js: filter replaced with filter.test
Mutant 436 in filter-not.js: filter replaced with filter.tester
Mutant 437 in filter-not.js: function (data) {
  return !test(data);
} replaced with function (data) {
  return test(data);
}
Mutant 438 in filter-not.js: function (data) {
  return !test(data);
} replaced with function (data) {
  return test(data) && true;
}
Mutant 439 in filter-not.js: function (data) {
  return !test(data);
} replaced with function (data) {
  return test(data) || false;
}
Mutant 440 in filter-not.js: test replaced with test.length
Mutant 441 in filter-not.js: data replaced with data.length
Mutant 442 in filter-not.js: data replaced with data[0]
Mutant 443 in filter-not.js: data replaced with data.filter(function (x) {
  return x > 0;
})
Mutant 444 in filter.js: test replaced with tester(test)
Mutant 445 in filter.js: test replaced with tester(test + 1)
Mutant 446 in filter.js: test replaced with tester(test - 1)
Mutant 447 in filter.js: loop replaced with loop = false
Mutant 448 in filter.js: loop replaced with loop = true
Mutant 449 in filter.js: loop replaced with loop = undefined
Mutant 450 in filter.js: !end && !test(data) replaced with !end && test(data)
Mutant 451 in filter.js: !end && !test(data) replaced with end && !test(data)
Mutant 452 in filter.js: !end && !test(data) replaced with !end && !test(data) && !read(end, cb)
Mutant 453 in filter.js: test replaced with test.length
Mutant 454 in filter.js: data replaced with data.length
Mutant 455 in filter.js: data replaced with data.length + 1
Mutant 456 in filter.js: data replaced with data.length - 1
Mutant 457 in filter.js: next(end, cb) replaced with next(end, function () {})
Mutant 458 in filter.js: next(end, cb) replaced with next(true, function () {})
Mutant 459 in filter.js: end replaced with end = true
Mutant 460 in filter.js: end replaced with end = false
Mutant 461 in filter.js: end replaced with end = null
Mutant 462 in filter.js: cb replaced with cb(end, data)
Mutant 463 in filter.js: cb(end, data) replaced with cb(end, data, null)
Mutant 464 in filter.js: cb(end, data) replaced with cb(end, data, undefined)
Mutant 465 in filter.js: cb(end, data) replaced with cb(end, data, 0)
Mutant 466 in filter.js: end replaced with end = true
Mutant 467 in filter.js: end replaced with end = false
Mutant 468 in filter.js: end replaced with end = null
Mutant 469 in filter.js: data replaced with data.length
Mutant 470 in filter.js: data replaced with data[0]
Mutant 471 in filter.js: data replaced with data.toString()
Mutant 472 in flatten.js: abort replaced with abort || true
Mutant 473 in flatten.js: abort replaced with abort && true
Mutant 474 in flatten.js: abort replaced with abort ? true : false
Mutant 475 in flatten.js: read(err || abort, cb) replaced with read(err && abort, cb)
Mutant 476 in flatten.js: read(err || abort, cb) replaced with read(err || !abort, cb)
Mutant 477 in flatten.js: read(err || abort, cb) replaced with read(err && !abort, cb)
Mutant 478 in flatten.js: err || abort replaced with abort || err
Mutant 479 in flatten.js: err || abort replaced with err && abort
Mutant 480 in flatten.js: err || abort replaced with err || !abort
Mutant 481 in flatten.js: cb replaced with cb(null, data)
Mutant 482 in flatten.js: cb replaced with cb(err)
Mutant 483 in flatten.js: cb replaced with cb(null, data, err)
Mutant 484 in flatten.js: read(abort, cb) replaced with read(abort, cb, null)
Mutant 485 in flatten.js: read(abort, cb) replaced with read(abort, cb, true)
Mutant 486 in flatten.js: read replaced with _read
Mutant 487 in flatten.js: abort replaced with abort || true
Mutant 488 in flatten.js: abort replaced with abort && true
Mutant 489 in flatten.js: abort replaced with abort ? true : false
Mutant 490 in flatten.js: cb replaced with cb(null, data)
Mutant 491 in flatten.js: cb replaced with cb(err)
Mutant 492 in flatten.js: cb replaced with cb(err, data)
Mutant 493 in flatten.js: _read replaced with _read()
Mutant 494 in flatten.js: _read replaced with _read.call(this)
Mutant 495 in flatten.js: _read replaced with _read.apply(this, [])
Mutant 496 in flatten.js: nextStream replaced with _read = null
Mutant 497 in flatten.js: nextStream replaced with _read = nextStream
Mutant 498 in flatten.js: err replaced with err === true
Mutant 499 in flatten.js: err replaced with err === false
Mutant 500 in flatten.js: err replaced with err === null
Mutant 501 in flatten.js: err === true replaced with err === null
Mutant 502 in flatten.js: err === true replaced with err !== true
Mutant 503 in flatten.js: err === true replaced with err !== null
Mutant 504 in flatten.js: err replaced with null
Mutant 505 in flatten.js: err replaced with undefined
Mutant 506 in flatten.js: err replaced with true
Mutant 507 in flatten.js: cb(null, data) replaced with cb(undefined, data)
Mutant 508 in flatten.js: cb(null, data) replaced with cb(null, undefined)
Mutant 509 in flatten.js: cb(null, data) replaced with cb(null, null)
Mutant 510 in flatten.js: null replaced with undefined
Mutant 511 in flatten.js: null replaced with true
Mutant 512 in flatten.js: data replaced with data.length
Mutant 513 in flatten.js: data replaced with data.toString()
Mutant 514 in flatten.js: data replaced with data.slice(0, 1)
Mutant 515 in flatten.js: end replaced with end || true
Mutant 516 in flatten.js: end replaced with end && true
Mutant 517 in flatten.js: end replaced with end == true
Mutant 518 in flatten.js: end replaced with true
Mutant 519 in flatten.js: end replaced with null
Mutant 520 in flatten.js: stream && 'object' === typeof stream replaced with stream && typeof stream === 'object'
Mutant 521 in flatten.js: stream && 'object' === typeof stream replaced with stream && stream.constructor === Object
Mutant 522 in flatten.js: stream replaced with stream.map(x => x + 1)
Mutant 523 in flatten.js: stream replaced with stream.filter(x => x > 0)
Mutant 524 in flatten.js: stream replaced with stream.reduce((acc, x) => acc + x, 0)
Mutant 525 in flatten.js: 'function' !== typeof stream replaced with 'function' === typeof stream
Mutant 526 in flatten.js: 'function' !== typeof stream replaced with stream === null
Mutant 527 in flatten.js: 'function' !== typeof stream replaced with stream.length === 0
Mutant 528 in flatten.js: stream replaced with stream.map(x => x + 1)
Mutant 529 in flatten.js: stream replaced with stream.filter(x => x > 0)
Mutant 530 in flatten.js: stream replaced with stream.reduce((acc, x) => acc + x, 0)
Mutant 531 in map.js: !mapper replaced with mapper = prop(mapper)
Mutant 532 in map.js: prop replaced with prop.id
Mutant 533 in map.js: prop replaced with mapper.id
Mutant 534 in map.js: mapper replaced with mapper + 1
Mutant 535 in map.js: mapper replaced with mapper.call(null, data)
Mutant 536 in map.js: mapper replaced with mapper.bind(null, data)
Mutant 537 in map.js: data replaced with data + 1
Mutant 538 in map.js: data replaced with data - 1
Mutant 539 in map.js: data replaced with data * 2
Mutant 540 in map.js: err replaced with null
Mutant 541 in map.js: err replaced with undefined
Mutant 542 in map.js: cb(end, data) replaced with cb(data, end)
Mutant 543 in map.js: cb(end, data) replaced with cb(end, data, null)
Mutant 544 in map.js: end replaced with end = true
Mutant 545 in map.js: end replaced with mapper = null
Mutant 546 in map.js: end replaced with mapper = function (data) {
  return data + 1;
}
Mutant 547 in map.js: data replaced with data + 1
Mutant 548 in map.js: data replaced with data - 1
Mutant 549 in map.js: data replaced with data * 2
Mutant 550 in non-unique.js: unique(field, true) replaced with unique(field, false)
Mutant 551 in non-unique.js: unique(field, true) replaced with unique(field, null)
Mutant 552 in non-unique.js: unique(field, true) replaced with unique(field, undefined)
Mutant 553 in non-unique.js: field replaced with field + 1
Mutant 554 in non-unique.js: field replaced with field.length
Mutant 555 in non-unique.js: field replaced with field.toUpperCase()
Mutant 556 in non-unique.js: true replaced with false
Mutant 557 in non-unique.js: true replaced with undefined
Mutant 558 in non-unique.js: true replaced with null
Mutant 559 in take.js: 'number' === typeof test replaced with 'number' === test
Mutant 560 in take.js: 'number' === typeof test replaced with test === 'number'
Mutant 561 in take.js: 'number' === typeof test replaced with typeof test === 'number'
Mutant 562 in take.js: err || true replaced with err || false
Mutant 563 in take.js: err || true replaced with err || null
Mutant 564 in take.js: err || true replaced with err || undefined
Mutant 565 in take.js: ended && !end replaced with ended || !end
Mutant 566 in take.js: ended && !end replaced with !ended && end
Mutant 567 in take.js: cb replaced with cb(null, data)
Mutant 568 in take.js: cb replaced with cb(ended)
Mutant 569 in take.js: cb replaced with cb(null, data, ended)
Mutant 570 in take.js: ended replaced with ended = true
Mutant 571 in take.js: ended replaced with ended = false
Mutant 572 in take.js: ended replaced with ended = null
Mutant 573 in take.js: ended = end replaced with ended = !end
Mutant 574 in take.js: ended = end replaced with ended = end || true
Mutant 575 in take.js: ended = end replaced with ended = !test(data)
Mutant 576 in take.js: ended replaced with ended = true
Mutant 577 in take.js: ended replaced with ended = false
Mutant 578 in take.js: ended replaced with ended = null
Mutant 579 in take.js: cb replaced with cb(null, data)
Mutant 580 in take.js: cb replaced with cb(ended)
Mutant 581 in take.js: cb replaced with cb(null, data, ended)
Mutant 582 in take.js: ended = ended || end replaced with ended = ended && end
Mutant 583 in take.js: ended = ended || end replaced with ended = ended || !end
Mutant 584 in take.js: ended = ended || end replaced with ended = ended && !end
Mutant 585 in take.js: ended replaced with ended = true
Mutant 586 in take.js: ended replaced with ended = false
Mutant 587 in take.js: ended replaced with ended = null
Mutant 588 in take.js: !test(data) replaced with test(data)
Mutant 589 in take.js: !test(data) replaced with test(data) && !test(data)
Mutant 590 in take.js: data replaced with data.length
Mutant 591 in take.js: data replaced with data[0]
Mutant 592 in take.js: data replaced with data.slice(0, 1)
Mutant 593 in take.js: cb(null, data) replaced with cb(true, data)
Mutant 594 in take.js: cb(null, data) replaced with cb(null, null)
Mutant 595 in take.js: cb(null, data) replaced with cb(undefined, data)
Mutant 596 in take.js: null replaced with undefined
Mutant 597 in take.js: null replaced with true
Mutant 598 in take.js: data replaced with undefined
Mutant 599 in take.js: data replaced with null
Mutant 600 in take.js: data replaced with true
Mutant 601 in take.js: cb replaced with cb(null, data)
Mutant 602 in take.js: cb replaced with cb(ended)
Mutant 603 in take.js: cb(null, data) replaced with cb(undefined, data)
Mutant 604 in take.js: cb(null, data) replaced with cb(null, null)
Mutant 605 in take.js: cb(null, data) replaced with cb(true, data)
Mutant 606 in take.js: null replaced with undefined
Mutant 607 in take.js: null replaced with true
Mutant 608 in take.js: data replaced with undefined
Mutant 609 in take.js: data replaced with null
Mutant 610 in take.js: data replaced with "test"
Mutant 611 in through.js: a || !onEnd replaced with a && !onEnd
Mutant 612 in through.js: a || !onEnd replaced with !a || onEnd
Mutant 613 in through.js: onEnd replaced with onEnd = null
Mutant 614 in through.js: abort === true ? null : abort replaced with abort === true ? null : true
Mutant 615 in through.js: abort === true ? null : abort replaced with abort === true ? null : false
Mutant 616 in through.js: abort === true ? null : abort replaced with abort === true ? null : undefined
Mutant 617 in through.js: end replaced with end = true
Mutant 618 in through.js: end replaced with end = false
Mutant 619 in through.js: end replaced with end = undefined
Mutant 620 in through.js: end replaced with true
Mutant 621 in through.js: end replaced with false
Mutant 622 in through.js: end replaced with undefined
Mutant 623 in through.js: !end replaced with end
Mutant 624 in through.js: !end replaced with op(data)
Mutant 625 in through.js: data replaced with data.toString()
Mutant 626 in through.js: data replaced with data.length
Mutant 627 in through.js: data replaced with data.foo
Mutant 628 in through.js: end replaced with end = true
Mutant 629 in through.js: end replaced with end = false
Mutant 630 in through.js: end replaced with end = undefined
Mutant 631 in through.js: cb(end, data) replaced with cb(end, null)
Mutant 632 in through.js: cb(end, data) replaced with cb(end, undefined)
Mutant 633 in through.js: end replaced with end = true
Mutant 634 in through.js: end replaced with end = false
Mutant 635 in through.js: end replaced with end = null
Mutant 636 in through.js: data replaced with null
Mutant 637 in through.js: data replaced with undefined
Mutant 638 in through.js: data replaced with 1
Mutant 639 in unique.js: prop replaced with prop.id
Mutant 640 in unique.js: field replaced with field + 1
Mutant 641 in unique.js: field replaced with field.length
Mutant 642 in unique.js: field replaced with field.toUpperCase()
Mutant 643 in unique.js: field replaced with field + 1
Mutant 644 in unique.js: field replaced with field.length
Mutant 645 in unique.js: data replaced with data.key
Mutant 646 in unique.js: data replaced with data.key.value
Mutant 647 in unique.js: data replaced with data.key.value.length
Mutant 648 in unique.js: seen[key] replaced with seen[key] = true
Mutant 649 in unique.js: seen[key] replaced with seen[key] = false
Mutant 650 in unique.js: seen[key] replaced with seen[key] = null
Mutant 651 in abort-cb.js: abort replaced with abort()
Mutant 652 in abort-cb.js: abort replaced with abort + 1
Mutant 653 in abort-cb.js: abort replaced with abort.toString()
Mutant 654 in abort-cb.js: abort === true ? null : abort replaced with abort === false ? null : abort
Mutant 655 in abort-cb.js: abort === true ? null : abort replaced with abort === true ? null : null
Mutant 656 in prop.js: data replaced with data.key
Mutant 657 in prop.js: data replaced with data.key.value
Mutant 658 in prop.js: data replaced with data.key.value.toString()
Mutant 659 in tester.js: test.test replaced with test.test.length
Mutant 660 in tester.js: test.test replaced with test.test.constructor
Mutant 661 in tester.js: data replaced with data.length
Mutant 662 in tester.js: data replaced with data.toString()
Mutant 663 in tester.js: data replaced with data.length + 1
Mutant 664 in tester.js: prop replaced with prop.test
Mutant 665 in tester.js: prop replaced with prop.test.test
Mutant 666 in tester.js: test replaced with test.test
Mutant 667 in tester.js: test replaced with test.test()
Mutant 668 in tester.js: test replaced with test.test(data)
[32m11:44:47 (2790) INFO Instrumenter[39m Instrumented 31 source file(s) with 669 mutant(s)
[32m11:44:47 (2790) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m11:44:48 (2790) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m11:44:48 (2790) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m11:44:50 (2790) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 1 second (net 1794 ms, overhead 2 ms).
Mutation testing 2% (elapsed: <1m, remaining: ~6m) 16/669 tested (0 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~10m) 21/669 tested (3 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~14m) 22/669 tested (3 survived, 1 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~17m) 24/669 tested (4 survived, 2 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~18m) 29/669 tested (7 survived, 3 timed out)
Mutation testing 5% (elapsed: ~1m, remaining: ~18m) 35/669 tested (12 survived, 3 timed out)
Mutation testing 5% (elapsed: ~1m, remaining: ~18m) 40/669 tested (17 survived, 3 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~17m) 47/669 tested (20 survived, 3 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~17m) 53/669 tested (22 survived, 3 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~16m) 61/669 tested (24 survived, 3 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~16m) 68/669 tested (25 survived, 3 timed out)
Mutation testing 11% (elapsed: ~2m, remaining: ~16m) 74/669 tested (31 survived, 3 timed out)
Mutation testing 11% (elapsed: ~2m, remaining: ~16m) 79/669 tested (36 survived, 3 timed out)
Mutation testing 12% (elapsed: ~2m, remaining: ~16m) 85/669 tested (42 survived, 3 timed out)
Mutation testing 13% (elapsed: ~2m, remaining: ~16m) 90/669 tested (47 survived, 3 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~15m) 96/669 tested (53 survived, 3 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~15m) 103/669 tested (56 survived, 3 timed out)
Mutation testing 16% (elapsed: ~3m, remaining: ~15m) 111/669 tested (57 survived, 4 timed out)
Mutation testing 17% (elapsed: ~3m, remaining: ~14m) 120/669 tested (61 survived, 4 timed out)
Mutation testing 18% (elapsed: ~3m, remaining: ~14m) 126/669 tested (64 survived, 4 timed out)
Mutation testing 19% (elapsed: ~3m, remaining: ~14m) 132/669 tested (68 survived, 4 timed out)
Mutation testing 20% (elapsed: ~3m, remaining: ~13m) 139/669 tested (68 survived, 5 timed out)
Mutation testing 21% (elapsed: ~3m, remaining: ~13m) 145/669 tested (74 survived, 5 timed out)
Mutation testing 22% (elapsed: ~4m, remaining: ~13m) 153/669 tested (77 survived, 5 timed out)
Mutation testing 24% (elapsed: ~4m, remaining: ~12m) 163/669 tested (81 survived, 5 timed out)
Mutation testing 25% (elapsed: ~4m, remaining: ~12m) 170/669 tested (83 survived, 5 timed out)
Mutation testing 26% (elapsed: ~4m, remaining: ~12m) 178/669 tested (85 survived, 5 timed out)
Mutation testing 27% (elapsed: ~4m, remaining: ~12m) 184/669 tested (87 survived, 5 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~12m) 191/669 tested (89 survived, 5 timed out)
Mutation testing 29% (elapsed: ~5m, remaining: ~11m) 198/669 tested (89 survived, 5 timed out)
Mutation testing 30% (elapsed: ~5m, remaining: ~11m) 204/669 tested (93 survived, 5 timed out)
Mutation testing 31% (elapsed: ~5m, remaining: ~11m) 210/669 tested (97 survived, 5 timed out)
Mutation testing 33% (elapsed: ~5m, remaining: ~10m) 224/669 tested (97 survived, 5 timed out)
Mutation testing 35% (elapsed: ~5m, remaining: ~10m) 235/669 tested (98 survived, 5 timed out)
Mutation testing 36% (elapsed: ~5m, remaining: ~10m) 241/669 tested (101 survived, 5 timed out)
Mutation testing 37% (elapsed: ~6m, remaining: ~10m) 248/669 tested (107 survived, 5 timed out)
Mutation testing 38% (elapsed: ~6m, remaining: ~9m) 257/669 tested (109 survived, 5 timed out)
Mutation testing 39% (elapsed: ~6m, remaining: ~9m) 262/669 tested (110 survived, 5 timed out)
Mutation testing 39% (elapsed: ~6m, remaining: ~10m) 263/669 tested (110 survived, 6 timed out)
Mutation testing 39% (elapsed: ~6m, remaining: ~10m) 266/669 tested (110 survived, 8 timed out)
Mutation testing 40% (elapsed: ~6m, remaining: ~9m) 272/669 tested (113 survived, 8 timed out)
Mutation testing 41% (elapsed: ~7m, remaining: ~10m) 275/669 tested (115 survived, 9 timed out)
Mutation testing 42% (elapsed: ~7m, remaining: ~9m) 281/669 tested (119 survived, 9 timed out)
Mutation testing 42% (elapsed: ~7m, remaining: ~9m) 286/669 tested (119 survived, 9 timed out)
Mutation testing 43% (elapsed: ~7m, remaining: ~9m) 289/669 tested (120 survived, 10 timed out)
Mutation testing 44% (elapsed: ~7m, remaining: ~9m) 295/669 tested (126 survived, 10 timed out)
Mutation testing 44% (elapsed: ~7m, remaining: ~9m) 300/669 tested (129 survived, 10 timed out)
Mutation testing 45% (elapsed: ~8m, remaining: ~9m) 306/669 tested (132 survived, 10 timed out)
Mutation testing 46% (elapsed: ~8m, remaining: ~9m) 308/669 tested (132 survived, 10 timed out)
Mutation testing 46% (elapsed: ~8m, remaining: ~9m) 310/669 tested (132 survived, 12 timed out)
Mutation testing 46% (elapsed: ~8m, remaining: ~9m) 314/669 tested (132 survived, 13 timed out)
Mutation testing 47% (elapsed: ~8m, remaining: ~9m) 320/669 tested (138 survived, 13 timed out)
Mutation testing 48% (elapsed: ~8m, remaining: ~9m) 325/669 tested (143 survived, 13 timed out)
Mutation testing 49% (elapsed: ~9m, remaining: ~9m) 331/669 tested (149 survived, 13 timed out)
Mutation testing 49% (elapsed: ~9m, remaining: ~9m) 333/669 tested (150 survived, 14 timed out)
Mutation testing 49% (elapsed: ~9m, remaining: ~9m) 334/669 tested (150 survived, 15 timed out)
Mutation testing 50% (elapsed: ~9m, remaining: ~9m) 337/669 tested (151 survived, 16 timed out)
Mutation testing 50% (elapsed: ~9m, remaining: ~9m) 340/669 tested (151 survived, 16 timed out)
Mutation testing 52% (elapsed: ~9m, remaining: ~9m) 349/669 tested (154 survived, 17 timed out)
Mutation testing 53% (elapsed: ~10m, remaining: ~8m) 358/669 tested (155 survived, 17 timed out)
Mutation testing 53% (elapsed: ~10m, remaining: ~8m) 359/669 tested (155 survived, 18 timed out)
Mutation testing 53% (elapsed: ~10m, remaining: ~8m) 360/669 tested (155 survived, 19 timed out)
Mutation testing 54% (elapsed: ~10m, remaining: ~8m) 366/669 tested (156 survived, 20 timed out)
Mutation testing 55% (elapsed: ~10m, remaining: ~8m) 373/669 tested (157 survived, 21 timed out)
Mutation testing 56% (elapsed: ~10m, remaining: ~8m) 380/669 tested (161 survived, 21 timed out)
Mutation testing 58% (elapsed: ~11m, remaining: ~7m) 392/669 tested (164 survived, 21 timed out)
Mutation testing 58% (elapsed: ~11m, remaining: ~7m) 393/669 tested (164 survived, 22 timed out)
Mutation testing 60% (elapsed: ~11m, remaining: ~7m) 402/669 tested (165 survived, 23 timed out)
Mutation testing 61% (elapsed: ~11m, remaining: ~7m) 414/669 tested (166 survived, 23 timed out)
Mutation testing 63% (elapsed: ~11m, remaining: ~6m) 424/669 tested (169 survived, 23 timed out)
Mutation testing 64% (elapsed: ~11m, remaining: ~6m) 431/669 tested (170 survived, 23 timed out)
Mutation testing 65% (elapsed: ~12m, remaining: ~6m) 438/669 tested (173 survived, 23 timed out)
Mutation testing 65% (elapsed: ~12m, remaining: ~6m) 441/669 tested (173 survived, 23 timed out)
Mutation testing 66% (elapsed: ~12m, remaining: ~6m) 445/669 tested (175 survived, 24 timed out)
Mutation testing 66% (elapsed: ~12m, remaining: ~6m) 448/669 tested (175 survived, 25 timed out)
Mutation testing 67% (elapsed: ~12m, remaining: ~6m) 451/669 tested (175 survived, 26 timed out)
Mutation testing 67% (elapsed: ~12m, remaining: ~6m) 454/669 tested (175 survived, 27 timed out)
Mutation testing 68% (elapsed: ~13m, remaining: ~6m) 455/669 tested (175 survived, 28 timed out)
Mutation testing 68% (elapsed: ~13m, remaining: ~6m) 456/669 tested (175 survived, 29 timed out)
Mutation testing 69% (elapsed: ~13m, remaining: ~5m) 462/669 tested (180 survived, 30 timed out)
Mutation testing 69% (elapsed: ~13m, remaining: ~5m) 467/669 tested (184 survived, 30 timed out)
Mutation testing 69% (elapsed: ~13m, remaining: ~5m) 468/669 tested (184 survived, 31 timed out)
Mutation testing 70% (elapsed: ~13m, remaining: ~5m) 473/669 tested (184 survived, 32 timed out)
Mutation testing 71% (elapsed: ~14m, remaining: ~5m) 478/669 tested (188 survived, 32 timed out)
Mutation testing 72% (elapsed: ~14m, remaining: ~5m) 485/669 tested (192 survived, 32 timed out)
Mutation testing 73% (elapsed: ~14m, remaining: ~5m) 491/669 tested (196 survived, 32 timed out)
Mutation testing 74% (elapsed: ~14m, remaining: ~4m) 498/669 tested (197 survived, 32 timed out)
Mutation testing 74% (elapsed: ~14m, remaining: ~4m) 499/669 tested (197 survived, 33 timed out)
Mutation testing 74% (elapsed: ~14m, remaining: ~5m) 500/669 tested (197 survived, 34 timed out)
Mutation testing 75% (elapsed: ~15m, remaining: ~4m) 504/669 tested (197 survived, 35 timed out)
Mutation testing 75% (elapsed: ~15m, remaining: ~4m) 505/669 tested (197 survived, 36 timed out)
Mutation testing 76% (elapsed: ~15m, remaining: ~4m) 509/669 tested (198 survived, 37 timed out)
Mutation testing 76% (elapsed: ~15m, remaining: ~4m) 515/669 tested (199 survived, 37 timed out)
Mutation testing 77% (elapsed: ~15m, remaining: ~4m) 519/669 tested (202 survived, 37 timed out)
Mutation testing 78% (elapsed: ~15m, remaining: ~4m) 523/669 tested (203 survived, 38 timed out)
Mutation testing 79% (elapsed: ~16m, remaining: ~4m) 530/669 tested (204 survived, 38 timed out)
Mutation testing 80% (elapsed: ~16m, remaining: ~3m) 541/669 tested (204 survived, 38 timed out)
Mutation testing 82% (elapsed: ~16m, remaining: ~3m) 551/669 tested (205 survived, 38 timed out)
Mutation testing 83% (elapsed: ~16m, remaining: ~3m) 557/669 tested (206 survived, 38 timed out)
Mutation testing 84% (elapsed: ~16m, remaining: ~3m) 564/669 tested (209 survived, 38 timed out)
Mutation testing 84% (elapsed: ~16m, remaining: ~3m) 567/669 tested (210 survived, 39 timed out)
Mutation testing 86% (elapsed: ~17m, remaining: ~2m) 577/669 tested (214 survived, 39 timed out)
Mutation testing 87% (elapsed: ~17m, remaining: ~2m) 587/669 tested (217 survived, 39 timed out)
Mutation testing 88% (elapsed: ~17m, remaining: ~2m) 591/669 tested (218 survived, 40 timed out)
Mutation testing 89% (elapsed: ~17m, remaining: ~2m) 600/669 tested (220 survived, 40 timed out)
Mutation testing 91% (elapsed: ~17m, remaining: ~1m) 610/669 tested (222 survived, 40 timed out)
Mutation testing 92% (elapsed: ~17m, remaining: ~1m) 618/669 tested (225 survived, 40 timed out)
Mutation testing 93% (elapsed: ~18m, remaining: ~1m) 626/669 tested (229 survived, 40 timed out)
Mutation testing 94% (elapsed: ~18m, remaining: ~1m) 629/669 tested (232 survived, 40 timed out)
Mutation testing 94% (elapsed: ~18m, remaining: ~1m) 630/669 tested (232 survived, 41 timed out)
Mutation testing 94% (elapsed: ~18m, remaining: ~1m) 634/669 tested (232 survived, 42 timed out)
Mutation testing 95% (elapsed: ~18m, remaining: <1m) 639/669 tested (232 survived, 44 timed out)
Mutation testing 96% (elapsed: ~18m, remaining: <1m) 644/669 tested (233 survived, 44 timed out)
Mutation testing 97% (elapsed: ~19m, remaining: <1m) 650/669 tested (233 survived, 44 timed out)
Mutation testing 98% (elapsed: ~19m, remaining: <1m) 656/669 tested (233 survived, 44 timed out)
Mutation testing 98% (elapsed: ~19m, remaining: <1m) 661/669 tested (236 survived, 44 timed out)
Mutation testing 99% (elapsed: ~19m, remaining: <1m) 663/669 tested (237 survived, 45 timed out)
Mutation testing 99% (elapsed: ~19m, remaining: <1m) 668/669 tested (237 survived, 46 timed out)

All tests
  ✓ All tests (killed 386)

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (done === undefined) {

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (done === null) {

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (done === false) {

[Survived] PrecomputedMutator
sinks/drain.js:14:8
-       if(abort) return sink.abort()
+       if(abort = false) return sink.abort()

[Survived] PrecomputedMutator
sinks/drain.js:14:8
-       if(abort) return sink.abort()
+       if(abort = null) return sink.abort()

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end !== true) {

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end !== false) {

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.error(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.log(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(doneLackingErr = new Error('no done callback supplied'))

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(doneLackingErr = null)

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(doneLackingErr = undefined)

[Survived] PrecomputedMutator
sinks/drain.js:34:15
-                 read(abort || true, done || function () {})
+                 read(abort || false, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(abort && true, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(!abort || true, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(abort || false, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:35
-                 read(abort || true, done || function () {})
+                 read(abort || true, done || function () {
+     throw new Error('done is not a function');
+   })

[Survived] PrecomputedMutator
sinks/drain.js:34:35
-                 read(abort || true, done || function () {})
+                 read(abort || true, done || function () {
+     console.log('done is not a function');
+   })

[Survived] PrecomputedMutator
sinks/drain.js:49:8
-       if('function' == typeof err)
+       if('function' === typeof err)

[Survived] PrecomputedMutator
sinks/drain.js:52:21
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(abort, cb ? function () {} : function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:33
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(abort, cb || function () {
+     return 'Test error';
+   })

[Survived] PrecomputedMutator
sinks/drain.js:52:33
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(abort, cb || function () {
+     console.log('Test error');
+   })

[Survived] PrecomputedMutator
sinks/find.js:15:8
-       if(test(data)) {
+       if(test(data, 1)) {

[Survived] PrecomputedMutator
sinks/find.js:15:8
-       if(test(data)) {
+       if(test(data, function () {})) {

[Survived] PrecomputedMutator
sinks/find.js:17:7
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:17:10
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:22:8
-       cb(err === true ? null : err, null)
+       cb(err === false ? null : err, null)

[Survived] PrecomputedMutator
sinks/find.js:22:8
-       cb(err === true ? null : err, null)
+       cb(err === null ? null : err, null)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(data + 1)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(data - 1)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(data * 2)

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain({}, done)

[Survived] PrecomputedMutator
sinks/reduce.js:10:5
-       cb(err, acc)
+       cb(err, acc, null)

[Survived] PrecomputedMutator
sinks/reduce.js:12:7
-     if (arguments.length === 2)
+     if (arguments.length < 2)

[Survived] PrecomputedMutator
sinks/reduce.js:16:12
-           if(end) return cb(end === true ? null : end)
+           if(end === true) return cb(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(end === true ? null : acc)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(end === true ? null : data)

[Survived] PrecomputedMutator
sources/count.js:6:8
-       if(end) return cb && cb(end)
+       if(end = null) return cb && cb(end)

[Survived] PrecomputedMutator
sources/count.js:6:8
-       if(end) return cb && cb(end)
+       if(end = undefined) return cb && cb(end)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end = true)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end = false)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end = undefined)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i === max)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i >= max)

[Survived] PrecomputedMutator
sources/count.js:9:8
-       cb(null, i++)
+       cb(undefined, i++)

[Survived] PrecomputedMutator
sources/infinite.js:5:8
-       if(end) return cb && cb(end)
+       if(end = null) return cb && cb(end)

[Survived] PrecomputedMutator
sources/infinite.js:5:8
-       if(end) return cb && cb(end)
+       if(end = undefined) return cb && cb(end)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end = true)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end = Math.random())

[Survived] PrecomputedMutator
sources/infinite.js:6:12
-       return cb(null, generate())
+       return cb(undefined, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:15
-       return cb(null, generate())
+       return cb(undefined, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(1))

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(Math.random()))

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(generate()))

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, !abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb(null, value), abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb(value), abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb(null, value + 1), abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abortCb(cb, true, onAbort), onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abortCb(cb, null, onAbort), onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abortCb(cb, undefined, onAbort), onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort())

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort(null))

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort(undefined))

[Survived] PrecomputedMutator
sources/once.js:8:8
-       if(value != null) {
+       if(value !== null) {

[Survived] PrecomputedMutator
sources/once.js:10:7
-         cb(null, _value)
+         cb(undefined, _value)

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb(undefined, _value)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abortCb(cb, abort, onAbort)) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(cb(true)) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(cb(null, array[i++])) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, onAbort, abort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort, true)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort, false)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb(null, array[i++]), abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb(true), abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(abortCb(cb, abort, onAbort), abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abortCb(cb, true, onAbort), onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abortCb(cb, false, onAbort), onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abortCb(cb, undefined, onAbort), onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort())

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort.call(this))

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort.apply(this, []))

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(false)

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(undefined)

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(null)

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(array[0]))

[Survived] PrecomputedMutator
sources/values.js:16:8
-       if(abort)
+       if(abort ? true : false)

[Survived] PrecomputedMutator
sources/values.js:17:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort, true)

[Survived] PrecomputedMutator
sources/values.js:17:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort, false)

[Survived] PrecomputedMutator
sources/values.js:18:8
-       if(i >= array.length)
+       if(i === array.length)

[Survived] PrecomputedMutator
sources/values.js:21:10
-         cb(null, array[i++])
+         cb(undefined, array[i++])

[Survived] PrecomputedMutator
throughs/async-map.js:12:10
-         if(aborted) return cb(aborted)
+         if(aborted = false) return cb(aborted)

[Survived] PrecomputedMutator
throughs/async-map.js:12:10
-         if(aborted) return cb(aborted)
+         if(aborted = undefined) return cb(aborted)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(aborted = true)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(aborted = false)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(aborted = null)

[Survived] PrecomputedMutator
throughs/async-map.js:15:12
-           if(!busy) read(abort, function (err) {
+           if(!aborted) read(abort, function (err) {

[Survived] PrecomputedMutator
throughs/async-map.js:28:14
-             if(end) cb(end)
+             if(end && true) cb(end)

[Survived] PrecomputedMutator
throughs/async-map.js:28:14
-             if(end) cb(end)
+             if(end == true) cb(end)

[Survived] PrecomputedMutator
throughs/async-map.js:29:31
-             else if(aborted) cb(aborted)
+             else if(aborted) cb(aborted = true)

[Survived] PrecomputedMutator
throughs/async-map.js:36:36
-                   abortCb && abortCb(aborted)
+                   abortCb && abortCb(aborted = true)

[Survived] PrecomputedMutator
throughs/async-map.js:38:28
-                 else if(err) next (err, cb)
+                 else if(err) next(err, cb, data)

[Survived] PrecomputedMutator
throughs/async-map.js:38:28
-                 else if(err) next (err, cb)
+                 else if(err) next(err, cb, data, data)

[Survived] PrecomputedMutator
throughs/async-map.js:39:20
-                 else cb(null, data)
+                 else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/async-map.js:39:23
-                 else cb(null, data)
+                 else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/filter-not.js:7:17
-     test = tester(test)
+     test = tester(tester(test))

[Survived] PrecomputedMutator
throughs/filter-not.js:7:17
-     test = tester(test)
+     test = tester(tester(test, true))

[Survived] PrecomputedMutator
throughs/filter-not.js:7:17
-     test = tester(test)
+     test = tester(tester(test, false))

[Survived] PrecomputedMutator
throughs/filter-not.js:8:48
-     return filter(function (data) { return !test(data) })
+     return filter(function (data) { return !test(data[0]) })

[Survived] PrecomputedMutator
throughs/filter.js:7:17
-     test = tester(test)
+     test = tester(tester(test))

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, function () {})

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(true, function () {})

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end = true, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end = false, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end = null, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:51
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, cb(end, data))

[Survived] PrecomputedMutator
throughs/filter.js:17:11
-             cb(end, data)
+             cb(end, data, null)

[Survived] PrecomputedMutator
throughs/filter.js:17:11
-             cb(end, data)
+             cb(end, data, undefined)

[Survived] PrecomputedMutator
throughs/filter.js:17:11
-             cb(end, data)
+             cb(end, data, 0)

[Survived] PrecomputedMutator
throughs/flatten.js:11:11
-         if (abort) { //abort the current stream, and then stream of streams.
+         if (abort && true) { //abort the current stream, and then stream of streams.

[Survived] PrecomputedMutator
throughs/flatten.js:11:11
-         if (abort) { //abort the current stream, and then stream of streams.
+         if (abort ? true : false) { //abort the current stream, and then stream of streams.

[Survived] PrecomputedMutator
throughs/flatten.js:13:11
-             read(err || abort, cb)
+             read(err && abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:11
-             read(err || abort, cb)
+             read(err || !abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(abort || err, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(err && abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(err || !abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:14:14
-           }) : read(abort, cb)
+           }) : read(abort, cb, null)

[Survived] PrecomputedMutator
throughs/flatten.js:14:14
-           }) : read(abort, cb)
+           }) : read(abort, cb, true)

[Survived] PrecomputedMutator
throughs/flatten.js:14:19
-           }) : read(abort, cb)
+           }) : read(abort || true, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:14:19
-           }) : read(abort, cb)
+           }) : read(abort && true, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:14:19
-           }) : read(abort, cb)
+           }) : read(abort ? true : false, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:17:12
-         else nextStream()
+         else _read = nextStream()

[Survived] PrecomputedMutator
throughs/flatten.js:28:16
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/flatten.js:28:19
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/flatten.js:34:14
-             if(end)
+             if(end && true)

[Survived] PrecomputedMutator
throughs/flatten.js:34:14
-             if(end)
+             if(end == true)

[Survived] PrecomputedMutator
throughs/flatten.js:35:23
-               return cb(end)
+               return cb(true)

[Survived] PrecomputedMutator
throughs/flatten.js:36:14
-             if(stream && 'object' === typeof stream)
+             if(stream && typeof stream === 'object')

[Survived] PrecomputedMutator
throughs/flatten.js:37:29
-               stream = values(stream)
+               stream = values(stream.filter(x => x > 0))

[Survived] PrecomputedMutator
throughs/map.js:19:9
-           cb(end, data)
+           cb(end, data, null)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(field + 1, true)

[Survived] PrecomputedMutator
throughs/take.js:8:6
-     if('number' === typeof test) {
+     if(typeof test === 'number') {

[Survived] PrecomputedMutator
throughs/take.js:19:26
-           last = false; cb(err || true)
+           last = false; cb(err || false)

[Survived] PrecomputedMutator
throughs/take.js:19:26
-           last = false; cb(err || true)
+           last = false; cb(err || null)

[Survived] PrecomputedMutator
throughs/take.js:19:26
-           last = false; cb(err || true)
+           last = false; cb(err || undefined)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(ended = true)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(ended = false)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(ended = null)

[Survived] PrecomputedMutator
throughs/take.js:25:33
-         else if(ended = end) read(ended, cb)
+         else if(ended = end) read(ended = true, cb)

[Survived] PrecomputedMutator
throughs/take.js:28:14
-             if(ended = ended || end) {
+             if(ended = ended && end) {

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(ended = true)

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(ended = false)

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(ended = null)

[Survived] PrecomputedMutator
throughs/take.js:34:20
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(undefined, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:34:23
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(undefined, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:37:13
-               cb(null, data)
+               cb(undefined, data)

[Survived] PrecomputedMutator
throughs/take.js:37:16
-               cb(null, data)
+               cb(undefined, data)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort === true ? null : true)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort === true ? null : false)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort === true ? null : undefined)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(true)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(false)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(undefined)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(data.toString())

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(data.length)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(data.foo)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(end = true)

[Survived] PrecomputedMutator
throughs/unique.js:9:16
-     field = prop(field) || id
+     field = prop(field + 1) || id

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data.key); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data.key.value); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data.key.value.toString()); return v && v[0] }

[Survived] PrecomputedMutator
util/tester.js:8:42
-       ? function (data) { return test.test(data) }
+       ? function (data) { return test.test(data.toString()) }

[Survived] PrecomputedMutator
pull.js:7:5
-       for(var i = 0; i < length; i++)
-         args[i] = arguments[i]
+       for (var i = -1; i < length; i++) args[i] = arguments[i];

[Survived] PrecomputedMutator
pull.js:7:5
-       for(var i = 0; i < length; i++)
-         args[i] = arguments[i]
+       for (var i = "0"; i < length; i++) args[i] = arguments[i];

[Survived] PrecomputedMutator
pull.js:7:20
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i <= length; i++)

[Survived] PrecomputedMutator
pull.js:7:32
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i < length; i = i + 1)

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (args === null) {

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (args.length === 0) {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (length + 1) {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (length * 2) {

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[0] + 1)

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[0] - 1)

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[0] * 2)

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read + 1, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read - 1, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read * 2, ref[0])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[1])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[2])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[3])

[Survived] PrecomputedMutator
pull.js:22:22
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[0], ref[1], ref[2])

[Survived] PrecomputedMutator
pull.js:22:22
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:22:22
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[0], ref[1], ref[2], ref[3], ref[4])

[Survived] PrecomputedMutator
pull.js:22:33
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[Math.floor(Math.random() * length)], ref[1])

[Survived] PrecomputedMutator
pull.js:23:22
-         case 3: return pull(read, ref[0], ref[1], ref[2])
+         case 3: return pull(read, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:23:22
-         case 3: return pull(read, ref[0], ref[1], ref[2])
+         case 3: return pull(read, ref[0], ref[1], ref[2], ref[4])

[Survived] PrecomputedMutator
pull.js:23:22
-         case 3: return pull(read, ref[0], ref[1], ref[2])
+         case 3: return pull(read, ref[0], ref[1], ref[2], ref[5])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3], ref[4])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3], ref[3])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3], ref[4], ref[5])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read + 1, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read - 1, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read * 2, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[1], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[length - 1], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[Math.floor(Math.random() * length)], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[2], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[0], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[3], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[3], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[1], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[0], ref[3])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[4])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[0])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[1])

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.push(read)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(read.source)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(read.sink)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(read.source.sink)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(undefined, ref)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(null, null)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply('', ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(undefined, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply([], ref)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref[0])

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref[1])

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref[2])

[Survived] PrecomputedMutator
pull.js:34:7
-     if (read && typeof read.source === 'function') {
+     if (read && typeof read.source === 'function' && read.source()) {

[Survived] PrecomputedMutator
pull.js:38:19
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i <= length; i++) {

[Survived] PrecomputedMutator
pull.js:38:31
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i < length; i = i + 1) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s && typeof s === 'object' && s.length > 0) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s && typeof s === 'object' && s.length === 0) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s && typeof s === 'object' && s.length < 0) {

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(read.source)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(read.sink)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(read.source.sink)

Ran 0.93 tests per mutant on average.
----------------|---------|----------|-----------|------------|----------|----------|
File            | % score | # killed | # timeout | # survived | # no cov | # errors |
----------------|---------|----------|-----------|------------|----------|----------|
All files       |   64.57 |      386 |        46 |        237 |        0 |        0 |
 sinks          |   67.50 |       80 |         1 |         39 |        0 |        0 |
  collect.js    |  100.00 |        3 |         0 |          0 |        0 |        0 |
  drain.js      |   56.00 |       27 |         1 |         22 |        0 |        0 |
  find.js       |   77.78 |       21 |         0 |          6 |        0 |        0 |
  log.js        |    0.00 |        0 |         0 |          3 |        0 |        0 |
  on-end.js     |   62.50 |        5 |         0 |          3 |        0 |        0 |
  reduce.js     |   82.76 |       24 |         0 |          5 |        0 |        0 |
 sources        |   56.80 |       55 |        16 |         54 |        0 |        0 |
  count.js      |   60.00 |       12 |         0 |          8 |        0 |        0 |
  empty.js      |  100.00 |        0 |         3 |          0 |        0 |        0 |
  error.js      |  100.00 |        3 |         0 |          0 |        0 |        0 |
  infinite.js   |   30.77 |        3 |         1 |          9 |        0 |        0 |
  keys.js       |  100.00 |        4 |         0 |          0 |        0 |        0 |
  once.js       |   50.00 |        9 |         4 |         13 |        0 |        0 |
  values.js     |   57.14 |       24 |         8 |         24 |        0 |        0 |
 throughs       |   72.89 |      184 |        23 |         77 |        0 |        0 |
  async-map.js  |   77.78 |       47 |         2 |         14 |        0 |        0 |
  filter-not.js |   71.43 |        9 |         1 |          4 |        0 |        0 |
  filter.js     |   64.29 |       10 |         8 |         10 |        0 |        0 |
  flatten.js    |   66.10 |       33 |         6 |         20 |        0 |        0 |
  map.js        |   94.74 |       18 |         0 |          1 |        0 |        0 |
  non-unique.js |   88.89 |        8 |         0 |          1 |        0 |        0 |
  take.js       |   69.23 |       34 |         2 |         16 |        0 |        0 |
  through.js    |   64.29 |       14 |         4 |         10 |        0 |        0 |
  unique.js     |   91.67 |       11 |         0 |          1 |        0 |        0 |
 util           |   77.78 |       12 |         2 |          4 |        0 |        0 |
  abort-cb.js   |  100.00 |        5 |         0 |          0 |        0 |        0 |
  prop.js       |    0.00 |        0 |         0 |          3 |        0 |        0 |
  tester.js     |   90.00 |        7 |         2 |          1 |        0 |        0 |
 index.js       |  100.00 |       13 |         0 |          0 |        0 |        0 |
 pull.js        |   42.20 |       42 |         4 |         63 |        0 |        0 |
----------------|---------|----------|-----------|------------|----------|----------|
[32m12:04:31 (2790) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/reports/mutation/mutation.html
[32m12:04:31 (2790) INFO MutationTestExecutor[39m Done in 19 minutes 47 seconds.

real	19m48.585s
user	7m30.045s
sys	1m30.875s
