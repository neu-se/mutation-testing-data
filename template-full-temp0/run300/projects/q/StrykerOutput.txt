*** using precomputed mutations ***
[32m15:45:00 (3025) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m15:45:00 (3025) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m15:45:01 (3025) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/q/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m15:45:01 (3025) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m15:45:01 (3025) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m15:45:01 (3025) INFO ProjectReader[39m Found 2 of 4261 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 2034 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in q.js: typeof bootstrap === "function" replaced with typeof bootstrap !== "function"
Mutant 1 in q.js: typeof bootstrap === "function" replaced with typeof bootstrap === "undefined"
Mutant 2 in q.js: typeof bootstrap === "function" replaced with typeof bootstrap === "object"
Mutant 3 in q.js: bootstrap("promise", definition) replaced with bootstrap("promise", null)
Mutant 4 in q.js: bootstrap("promise", definition) replaced with bootstrap("promise", function () {})
Mutant 5 in q.js: bootstrap replaced with "promise"
Mutant 6 in q.js: bootstrap replaced with null
Mutant 7 in q.js: bootstrap replaced with undefined
Mutant 8 in q.js: "promise" replaced with "fulfilled"
Mutant 9 in q.js: "promise" replaced with "rejected"
Mutant 10 in q.js: "promise" replaced with "pending"
Mutant 11 in q.js: definition replaced with function () {
  throw new Error("This is a buggy function");
}
Mutant 12 in q.js: definition replaced with function () {
  return "This is a buggy function";
}
Mutant 13 in q.js: definition replaced with function () {
  return function () {
    throw new Error("This is a buggy function");
  };
}
Mutant 14 in q.js: typeof exports === "object" && typeof module === "object" replaced with typeof exports !== "object" && typeof module === "object"
Mutant 15 in q.js: typeof exports === "object" && typeof module === "object" replaced with typeof exports === "object" && typeof module !== "object"
Mutant 16 in q.js: typeof exports === "object" && typeof module === "object" replaced with typeof exports !== "object" || typeof module !== "object"
Mutant 17 in q.js: typeof define === "function" && define.amd replaced with typeof define === "function" && define.amd && define.amd.buggy
Mutant 18 in q.js: typeof define === "function" && define.amd replaced with typeof define === "function" && define.amd && define.amd.buggy()
Mutant 19 in q.js: definition replaced with definition()
Mutant 20 in q.js: definition replaced with null
Mutant 21 in q.js: definition replaced with function () {}
Mutant 22 in q.js: typeof ses !== "undefined" replaced with typeof ses === "undefined"
Mutant 23 in q.js: typeof ses !== "undefined" replaced with typeof ses !== "object"
Mutant 24 in q.js: typeof ses !== "undefined" replaced with typeof ses !== "function"
Mutant 25 in q.js: !ses.ok() replaced with ses.notOk()
Mutant 26 in q.js: !ses.ok() replaced with ses.isNotOk()
Mutant 27 in q.js: !ses.ok() replaced with ses.isOk()
Mutant 28 in q.js: ses.ok replaced with ses.maybeOk
Mutant 29 in q.js: ses.ok replaced with ses.ok && ses.notOk
Mutant 30 in q.js: typeof window !== "undefined" || typeof self !== "undefined" replaced with typeof window !== "undefined" && typeof self !== "undefined"
Mutant 31 in q.js: typeof window !== "undefined" || typeof self !== "undefined" replaced with typeof window !== "undefined" ^ typeof self !== "undefined"
Mutant 32 in q.js: typeof window !== "undefined" || typeof self !== "undefined" replaced with typeof window !== "undefined" && typeof self === "undefined"
Mutant 33 in q.js: captureLine replaced with captureLine + 1
Mutant 34 in q.js: captureLine replaced with captureLine - 1
Mutant 35 in q.js: captureLine replaced with captureLine * 2
Mutant 36 in q.js: head.next replaced with head.next.next
Mutant 37 in q.js: head.next replaced with head.next.next.next
Mutant 38 in q.js: head.next replaced with head.next.next.next.next
Mutant 39 in q.js: domain replaced with !domain
Mutant 40 in q.js: domain replaced with domain + 1
Mutant 41 in q.js: domain replaced with domain.foo
Mutant 42 in q.js: domain.enter replaced with domain.exit
Mutant 43 in q.js: domain.enter replaced with domain.run
Mutant 44 in q.js: domain.enter replaced with domain.bind
Mutant 45 in q.js: runSingle(task, domain) replaced with runSingle(task, domain, undefined)
Mutant 46 in q.js: runSingle(task, domain) replaced with runSingle(task, domain, null)
Mutant 47 in q.js: runSingle(task, domain) replaced with runSingle(task, domain, {})
Mutant 48 in q.js: task replaced with task()
Mutant 49 in q.js: task replaced with task + 1
Mutant 50 in q.js: task replaced with task.call()
Mutant 51 in q.js: domain replaced with null
Mutant 52 in q.js: domain replaced with undefined
Mutant 53 in q.js: domain replaced with {}
Mutant 54 in q.js: laterQueue.length replaced with laterQueue.length + 1
Mutant 55 in q.js: laterQueue.length replaced with laterQueue.length - 1
Mutant 56 in q.js: laterQueue.length replaced with laterQueue.length * 2
Mutant 57 in q.js: laterQueue.pop replaced with laterQueue.shift
Mutant 58 in q.js: laterQueue.pop replaced with laterQueue.length
Mutant 59 in q.js: runSingle replaced with noop
Mutant 60 in q.js: runSingle replaced with undefined
Mutant 61 in q.js: task replaced with null
Mutant 62 in q.js: task replaced with undefined
Mutant 63 in q.js: task replaced with () => {}
Mutant 64 in q.js: task replaced with task + 1
Mutant 65 in q.js: task replaced with task * 2
Mutant 66 in q.js: task replaced with task - 1
Mutant 67 in q.js: isNodeJS replaced with !isNodeJS
Mutant 68 in q.js: isNodeJS replaced with isNodeJS && false
Mutant 69 in q.js: isNodeJS replaced with isNodeJS || true
Mutant 70 in q.js: domain replaced with domain.exit()
Mutant 71 in q.js: domain replaced with domain.enter()
Mutant 72 in q.js: domain.exit replaced with domain.enter
Mutant 73 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, 1)
Mutant 74 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, -1)
Mutant 75 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, "hello")
Mutant 76 in q.js: setTimeout replaced with setInterval
Mutant 77 in q.js: flush replaced with flush()
Mutant 78 in q.js: flush replaced with flush(1)
Mutant 79 in q.js: flush replaced with flush(undefined)
Mutant 80 in q.js: 0 replaced with 1
Mutant 81 in q.js: 0 replaced with -1
Mutant 82 in q.js: 0 replaced with Infinity
Mutant 83 in q.js: domain replaced with !domain
Mutant 84 in q.js: domain replaced with domain + 1
Mutant 85 in q.js: domain replaced with domain.foo
Mutant 86 in q.js: domain.enter replaced with domain.exit
Mutant 87 in q.js: domain replaced with !domain
Mutant 88 in q.js: domain replaced with domain + 1
Mutant 89 in q.js: domain replaced with domain.foo
Mutant 90 in q.js: domain.exit replaced with domain.enter
Mutant 91 in q.js: !flushing replaced with flushing
Mutant 92 in q.js: !flushing replaced with !flushing && true
Mutant 93 in q.js: !flushing replaced with flushing || false
Mutant 94 in q.js: flush replaced with flush()
Mutant 95 in q.js: flush replaced with flush(1)
Mutant 96 in q.js: flush replaced with flush(function () {})
Mutant 97 in q.js: typeof window !== "undefined" replaced with typeof window === "undefined"
Mutant 98 in q.js: typeof window !== "undefined" replaced with typeof window !== "object"
Mutant 99 in q.js: typeof window !== "undefined" replaced with typeof window !== "function"
Mutant 100 in q.js: setImmediate.bind(window, flush) replaced with setImmediate.bind(null)
Mutant 101 in q.js: setImmediate.bind(window, flush) replaced with setImmediate.bind(undefined)
Mutant 102 in q.js: setImmediate.bind(window, flush) replaced with setImmediate.bind(document)
Mutant 103 in q.js: setImmediate.bind replaced with setInterval.bind
Mutant 104 in q.js: setImmediate.bind replaced with requestAnimationFrame.bind
Mutant 105 in q.js: window replaced with null
Mutant 106 in q.js: window replaced with undefined
Mutant 107 in q.js: window replaced with {}
Mutant 108 in q.js: flush replaced with flush()
Mutant 109 in q.js: flush replaced with flush(1)
Mutant 110 in q.js: flush replaced with flush(function () {})
Mutant 111 in q.js: typeof MessageChannel !== "undefined" replaced with typeof MessageChannel === "undefined"
Mutant 112 in q.js: typeof MessageChannel !== "undefined" replaced with typeof MessageChannel !== "object"
Mutant 113 in q.js: typeof MessageChannel !== "undefined" replaced with typeof MessageChannel !== "function"
Mutant 114 in q.js: channel.port2.postMessage replaced with channel.port1.postMessage
Mutant 115 in q.js: 0 replaced with 1
Mutant 116 in q.js: 0 replaced with "hello"
Mutant 117 in q.js: 0 replaced with null
Mutant 118 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, 1)
Mutant 119 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, -1)
Mutant 120 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, "hello")
Mutant 121 in q.js: setTimeout replaced with setInterval
Mutant 122 in q.js: setTimeout replaced with requestAnimationFrame
Mutant 123 in q.js: flush replaced with flush()
Mutant 124 in q.js: 0 replaced with 1
Mutant 125 in q.js: 0 replaced with -1
Mutant 126 in q.js: 0 replaced with null
Mutant 127 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, 1)
Mutant 128 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, -1)
Mutant 129 in q.js: setTimeout(flush, 0) replaced with setTimeout(flush, "hello")
Mutant 130 in q.js: setTimeout replaced with setInterval
Mutant 131 in q.js: setTimeout replaced with requestAnimationFrame
Mutant 132 in q.js: flush replaced with flush()
Mutant 133 in q.js: 0 replaced with 1
Mutant 134 in q.js: 0 replaced with -1
Mutant 135 in q.js: 0 replaced with null
Mutant 136 in q.js: laterQueue.push replaced with laterQueue.unshift
Mutant 137 in q.js: laterQueue.push replaced with laterQueue.pop
Mutant 138 in q.js: laterQueue.push replaced with laterQueue.shift
Mutant 139 in q.js: task replaced with null
Mutant 140 in q.js: task replaced with undefined
Mutant 141 in q.js: task replaced with 0
Mutant 142 in q.js: !flushing replaced with flushing
Mutant 143 in q.js: !flushing replaced with flushing && !flushing
Mutant 144 in q.js: call.apply(f, arguments) replaced with call.apply(f, arguments[0])
Mutant 145 in q.js: call.apply(f, arguments) replaced with call.apply(f, arguments[1])
Mutant 146 in q.js: call.apply(f, arguments) replaced with call.apply(f, arguments[2])
Mutant 147 in q.js: call.apply replaced with call.bind
Mutant 148 in q.js: call.apply replaced with call.call
Mutant 149 in q.js: f replaced with f + 1
Mutant 150 in q.js: f replaced with f - 1
Mutant 151 in q.js: f replaced with f * 2
Mutant 152 in q.js: arguments replaced with [1, 2, 3]
Mutant 153 in q.js: arguments replaced with "hello"
Mutant 154 in q.js: arguments replaced with null
Mutant 155 in q.js: Array.prototype.slice replaced with Array.prototype.reverse
Mutant 156 in q.js: Array.prototype.slice replaced with Array.prototype.concat
Mutant 157 in q.js: Array.prototype.slice replaced with Array.prototype.filter
Mutant 158 in q.js: arguments.length === 1 replaced with arguments.length < 1
Mutant 159 in q.js: arguments.length === 1 replaced with arguments.length > 1
Mutant 160 in q.js: arguments.length === 1 replaced with arguments.length === 2
Mutant 161 in q.js: 1 replaced with 0
Mutant 162 in q.js: 1 replaced with -1
Mutant 163 in q.js: 1 replaced with length - 1
Mutant 164 in q.js: index in this replaced with index > this.length
Mutant 165 in q.js: index in this replaced with index < this.length
Mutant 166 in q.js: index in this replaced with index === this.length
Mutant 167 in q.js: ++index >= length replaced with index > length
Mutant 168 in q.js: ++index >= length replaced with index >= length + 1
Mutant 169 in q.js: ++index >= length replaced with index + 1 >= length
Mutant 170 in q.js: index < length replaced with index > length
Mutant 171 in q.js: index < length replaced with index <= length
Mutant 172 in q.js: index < length replaced with index >= length
Mutant 173 in q.js: index++ replaced with index--
Mutant 174 in q.js: index++ replaced with index += 2
Mutant 175 in q.js: index++ replaced with index = 0
Mutant 176 in q.js: index in this replaced with index > this.length
Mutant 177 in q.js: index in this replaced with index < this.length
Mutant 178 in q.js: index in this replaced with index >= this.length
Mutant 179 in q.js: callback(basis, this[index], index) replaced with callback(basis, this[index], index + 1)
Mutant 180 in q.js: callback(basis, this[index], index) replaced with callback(basis, this[index], index - 1)
Mutant 181 in q.js: callback(basis, this[index], index) replaced with callback(basis, this[index], index * 2)
Mutant 182 in q.js: basis replaced with basis + 1
Mutant 183 in q.js: basis replaced with basis - 1
Mutant 184 in q.js: basis replaced with basis * 2
Mutant 185 in q.js: this[index] replaced with this[index + 1]
Mutant 186 in q.js: this[index] replaced with this[index - 1]
Mutant 187 in q.js: this[index] replaced with this[index] = 0
Mutant 188 in q.js: index replaced with index + 1
Mutant 189 in q.js: index replaced with index - 1
Mutant 190 in q.js: index replaced with index * 2
Mutant 191 in q.js: i < this.length replaced with i <= this.length
Mutant 192 in q.js: i < this.length replaced with i > this.length
Mutant 193 in q.js: i < this.length replaced with i == this.length
Mutant 194 in q.js: i++ replaced with i--
Mutant 195 in q.js: i++ replaced with i += 2
Mutant 196 in q.js: i++ replaced with i = 0
Mutant 197 in q.js: this[i] === value replaced with this[i] !== value
Mutant 198 in q.js: this[i] === value replaced with this[i] > value
Mutant 199 in q.js: this[i] === value replaced with this[i] < value
Mutant 200 in q.js: collect.push replaced with collect.pop
Mutant 201 in q.js: collect.push replaced with collect.shift
Mutant 202 in q.js: collect.push replaced with collect.unshift
Mutant 203 in q.js: callback.call(thisp, value, index, self) replaced with callback.call(thisp, value, index, self) + 1
Mutant 204 in q.js: callback.call(thisp, value, index, self) replaced with callback.call(thisp, value, index, self) - 1
Mutant 205 in q.js: callback.call(thisp, value, index, self) replaced with callback.call(thisp, value, index, self) * 2
Mutant 206 in q.js: callback.call replaced with callback.apply
Mutant 207 in q.js: callback.call replaced with callback.bind
Mutant 208 in q.js: thisp replaced with null
Mutant 209 in q.js: thisp replaced with undefined
Mutant 210 in q.js: thisp replaced with {}
Mutant 211 in q.js: value replaced with undefined
Mutant 212 in q.js: value replaced with null
Mutant 213 in q.js: value replaced with 0
Mutant 214 in q.js: index replaced with index + 1
Mutant 215 in q.js: index replaced with index - 1
Mutant 216 in q.js: index replaced with index * 2
Mutant 217 in q.js: self replaced with self.length
Mutant 218 in q.js: self replaced with self[0]
Mutant 219 in q.js: self replaced with self.slice(1)
Mutant 220 in q.js: for (var key in object) {
  if (object_hasOwnProperty(object, key)) {
    keys.push(key);
  }
} replaced with for (var key of object) {
  if (object_hasOwnProperty(object, key)) {
    keys.push(key);
  }
}
Mutant 221 in q.js: object replaced with null
Mutant 222 in q.js: object replaced with undefined
Mutant 223 in q.js: object replaced with {}
Mutant 224 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object, key) && object[key] !== undefined
Mutant 225 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object, key) || object[key] === undefined
Mutant 226 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object, key) && object[key] !== null
Mutant 227 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object, key + 1)
Mutant 228 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object, key - 1)
Mutant 229 in q.js: object_hasOwnProperty(object, key) replaced with object_hasOwnProperty(object, key * 2)
Mutant 230 in q.js: object replaced with {}
Mutant 231 in q.js: key replaced with key + 1
Mutant 232 in q.js: key replaced with key * 2
Mutant 233 in q.js: key replaced with key - 1
Mutant 234 in q.js: key replaced with this[key]
Mutant 235 in q.js: key replaced with key + 1
Mutant 236 in q.js: key replaced with key * 2
Mutant 237 in q.js: Object replaced with null
Mutant 238 in q.js: Object replaced with undefined
Mutant 239 in q.js: Object replaced with {}
Mutant 240 in q.js: value replaced with value + 1
Mutant 241 in q.js: value replaced with value * 2
Mutant 242 in q.js: value replaced with value - 1
Mutant 243 in q.js: object_toString replaced with object_hasOwnProperty
Mutant 244 in q.js: object_toString replaced with object_keys
Mutant 245 in q.js: object_toString replaced with object_create
Mutant 246 in q.js: exception replaced with exception.message
Mutant 247 in q.js: exception replaced with exception.stack
Mutant 248 in q.js: exception replaced with exception.name
Mutant 249 in q.js: typeof ReturnValue !== "undefined" replaced with typeof ReturnValue !== "undefined" && ReturnValue !== null
Mutant 250 in q.js: typeof ReturnValue !== "undefined" replaced with typeof ReturnValue !== "undefined" && ReturnValue !== "undefined"
Mutant 251 in q.js: typeof ReturnValue !== "undefined" replaced with typeof ReturnValue !== "undefined" && ReturnValue !== 0
Mutant 252 in q.js: for (var p = promise; !!p; p = p.source) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
} replaced with for (var p = promise; !!p; p = p.source.value) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
}
Mutant 253 in q.js: for (var p = promise; !!p; p = p.source) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
} replaced with for (var p = promise; !!p; p = p.source.then) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
}
Mutant 254 in q.js: for (var p = promise; !!p; p = p.source) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
} replaced with for (var p = promise; !!p; p = p.source.catch) {
  if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
    object_defineProperty(error, "__minimumStackCounter__", {
      value: p.stackCounter,
      configurable: true
    });
    stacks.unshift(p.stack);
  }
}
Mutant 255 in q.js: !!p replaced with !p
Mutant 256 in q.js: !!p replaced with p && !p
Mutant 257 in q.js: p = p.source replaced with p = p.source.slice()
Mutant 258 in q.js: p = p.source replaced with p = p.source.concat()
Mutant 259 in q.js: p = p.source replaced with p = p.source.filter(function () {
  return true;
})
Mutant 260 in q.js: p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter) replaced with p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ < p.stackCounter)
Mutant 261 in q.js: p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter) replaced with p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ === p.stackCounter)
Mutant 262 in q.js: object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter,
  configurable: true
}) replaced with object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter + 1,
  configurable: true
})
Mutant 263 in q.js: object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter,
  configurable: true
}) replaced with object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter - 1,
  configurable: true
})
Mutant 264 in q.js: object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter,
  configurable: true
}) replaced with object_defineProperty(error, "__minimumStackCounter__", {
  value: p.stackCounter * 2,
  configurable: true
})
Mutant 265 in q.js: "__minimumStackCounter__" replaced with "__maximumStackCounter__"
Mutant 266 in q.js: "__minimumStackCounter__" replaced with "__stackCounter__"
Mutant 267 in q.js: "__minimumStackCounter__" replaced with "__stackCounter__" + 1
Mutant 268 in q.js: {
  value: p.stackCounter,
  configurable: true
} replaced with {
  value: p.stackCounter + 1,
  configurable: true
}
Mutant 269 in q.js: {
  value: p.stackCounter,
  configurable: true
} replaced with {
  value: p.stackCounter - 1,
  configurable: true
}
Mutant 270 in q.js: {
  value: p.stackCounter,
  configurable: true
} replaced with {
  value: p.stackCounter * 2,
  configurable: true
}
Mutant 271 in q.js: stacks.unshift replaced with stacks.push
Mutant 272 in q.js: stacks.unshift replaced with stacks.pop
Mutant 273 in q.js: stacks.unshift replaced with stacks.shift
Mutant 274 in q.js: p.stack replaced with p.stack.slice(0)
Mutant 275 in q.js: p.stack replaced with p.stack.concat([])
Mutant 276 in q.js: p.stack replaced with p.stack.map(function (x) {
  return x;
})
Mutant 277 in q.js: stacks.unshift replaced with stacks.push
Mutant 278 in q.js: stacks.unshift replaced with stacks.pop
Mutant 279 in q.js: stacks.unshift replaced with stacks.shift
Mutant 280 in q.js: error.stack replaced with error.message
Mutant 281 in q.js: error.stack replaced with error.name
Mutant 282 in q.js: error.stack replaced with error.code
Mutant 283 in q.js: stacks.join replaced with stacks.concat
Mutant 284 in q.js: stacks.join replaced with stacks.push
Mutant 285 in q.js: stacks.join replaced with stacks.pop
Mutant 286 in q.js: concatedStacks replaced with concatedStacks.split("\n")
Mutant 287 in q.js: concatedStacks replaced with concatedStacks.toUpperCase()
Mutant 288 in q.js: concatedStacks replaced with concatedStacks.replace("From previous event:", "From previous event: (MODIFIED)")
Mutant 289 in q.js: object_defineProperty(error, "stack", {
  value: stack,
  configurable: true
}) replaced with object_defineProperty(error, "stack", {
  value: stack,
  enumerable: true
})
Mutant 290 in q.js: object_defineProperty(error, "stack", {
  value: stack,
  configurable: true
}) replaced with object_defineProperty(error, "stack", {
  value: stack,
  writable: false
})
Mutant 291 in q.js: object_defineProperty(error, "stack", {
  value: stack,
  configurable: true
}) replaced with object_defineProperty(error, "stack", {
  value: stack,
  configurable: false
})
Mutant 292 in q.js: "stack" replaced with "stackTrace"
Mutant 293 in q.js: {
  value: stack,
  configurable: true
} replaced with {
  value: stack + "foo",
  configurable: true
}
Mutant 294 in q.js: {
  value: stack,
  configurable: true
} replaced with {
  value: stack,
  enumerable: true
}
Mutant 295 in q.js: {
  value: stack,
  configurable: true
} replaced with {
  value: stack,
  writable: false
}
Mutant 296 in q.js: "\n" replaced with "\t"
Mutant 297 in q.js: "\n" replaced with " "
Mutant 298 in q.js: "\n" replaced with "\\n"
Mutant 299 in q.js: for (var i = 0; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
} replaced with for (var i = 1; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
}
Mutant 300 in q.js: for (var i = 0; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
} replaced with for (var i = -1; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
}
Mutant 301 in q.js: for (var i = 0; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
} replaced with for (var i = this.length; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
}
Mutant 302 in q.js: for (var i = 0; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
} replaced with for (var i = 0; i <= lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
}
Mutant 303 in q.js: for (var i = 0; i < lines.length; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
} replaced with for (var i = 0; i < lines.length - 1; ++i) {
  var line = lines[i];
  if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
    desiredLines.push(line);
  }
}
Mutant 304 in q.js: i < lines.length replaced with i <= lines.length
Mutant 305 in q.js: i < lines.length replaced with i > lines.length
Mutant 306 in q.js: i < lines.length replaced with i == lines.length
Mutant 307 in q.js: ++i replaced with i--
Mutant 308 in q.js: ++i replaced with i += 2
Mutant 309 in q.js: ++i replaced with i = i + 1
Mutant 310 in q.js: !isInternalFrame(line) && !isNodeFrame(line) && line replaced with !isInternalFrame(line) || !isNodeFrame(line) || line
Mutant 311 in q.js: isInternalFrame replaced with isPromiseAlike
Mutant 312 in q.js: line replaced with line + 1
Mutant 313 in q.js: line replaced with line - 1
Mutant 314 in q.js: line replaced with line * 2
Mutant 315 in q.js: desiredLines.push replaced with desiredLines.pop
Mutant 316 in q.js: desiredLines.push replaced with desiredLines.shift
Mutant 317 in q.js: desiredLines.push replaced with desiredLines.unshift
Mutant 318 in q.js: line replaced with line + 1
Mutant 319 in q.js: line replaced with line - 1
Mutant 320 in q.js: line replaced with line * 2
Mutant 321 in q.js: "\n" replaced with "\t"
Mutant 322 in q.js: "\n" replaced with " "
Mutant 323 in q.js: "\n" replaced with "<br>"
Mutant 324 in q.js: stackLine.indexOf replaced with stackLine.includes
Mutant 325 in q.js: stackLine.indexOf replaced with stackLine.match
Mutant 326 in q.js: stackLine.indexOf replaced with stackLine.search
Mutant 327 in q.js: stackLine.indexOf replaced with stackLine.includes
Mutant 328 in q.js: stackLine.indexOf replaced with stackLine.match
Mutant 329 in q.js: stackLine.indexOf replaced with stackLine.search
Mutant 330 in q.js: "(node.js:" replaced with "(node.js:)"
Mutant 331 in q.js: stackLine replaced with stackLine.split("@")[1]
Mutant 332 in q.js: stackLine replaced with stackLine.split(":")[0]
Mutant 333 in q.js: stackLine replaced with stackLine.split(" ")[0]
Mutant 334 in q.js: attempt1 replaced with attempt1[1] === undefined
Mutant 335 in q.js: attempt1 replaced with attempt1[1] === null
Mutant 336 in q.js: attempt1 replaced with attempt1[1] === ""
Mutant 337 in q.js: Number replaced with "string"
Mutant 338 in q.js: Number replaced with null
Mutant 339 in q.js: Number replaced with undefined
Mutant 340 in q.js: attempt1[2] replaced with attempt1[1]
Mutant 341 in q.js: attempt1[2] replaced with attempt1[3]
Mutant 342 in q.js: attempt1[2] replaced with attempt2[1]
Mutant 343 in q.js: stackLine replaced with stackLine.split(" ")[0]
Mutant 344 in q.js: stackLine replaced with stackLine.split(" ").pop()
Mutant 345 in q.js: stackLine replaced with stackLine.split(" ").slice(1).join(" ")
Mutant 346 in q.js: attempt2 replaced with attempt2[1]
Mutant 347 in q.js: attempt2 replaced with attempt2[0]
Mutant 348 in q.js: attempt2 replaced with attempt2.length
Mutant 349 in q.js: Number replaced with "string"
Mutant 350 in q.js: Number replaced with null
Mutant 351 in q.js: Number replaced with undefined
Mutant 352 in q.js: attempt2[2] replaced with attempt2[1]
Mutant 353 in q.js: attempt2[2] replaced with attempt2[3]
Mutant 354 in q.js: attempt2[2] replaced with attempt2[4]
Mutant 355 in q.js: stackLine replaced with stackLine.split(" ")[0]
Mutant 356 in q.js: stackLine replaced with stackLine.split(" ").pop()
Mutant 357 in q.js: stackLine replaced with stackLine.split(" ").slice(1).join(" ")
Mutant 358 in q.js: attempt3 replaced with attempt3[1]
Mutant 359 in q.js: attempt3 replaced with attempt3[0]
Mutant 360 in q.js: attempt3 replaced with attempt3.length
Mutant 361 in q.js: Number replaced with "0"
Mutant 362 in q.js: Number replaced with null
Mutant 363 in q.js: Number replaced with undefined
Mutant 364 in q.js: attempt3[2] replaced with attempt3[1]
Mutant 365 in q.js: attempt3[2] replaced with attempt3[3]
Mutant 366 in q.js: attempt3[2] replaced with attempt3[4]
Mutant 367 in q.js: stackLine replaced with stackLine.split(":")[0]
Mutant 368 in q.js: stackLine replaced with stackLine.split(":")[1]
Mutant 369 in q.js: stackLine replaced with stackLine.split(":")[2]
Mutant 370 in q.js: !fileNameAndLineNumber replaced with fileNameAndLineNumber[0] === undefined
Mutant 371 in q.js: !fileNameAndLineNumber replaced with fileNameAndLineNumber[1] === undefined
Mutant 372 in q.js: !fileNameAndLineNumber replaced with fileNameAndLineNumber[0] === null
Mutant 373 in q.js: !hasStacks replaced with hasStacks === false
Mutant 374 in q.js: !hasStacks replaced with !hasStacks || typeof hasStacks !== 'boolean'
Mutant 375 in q.js: !hasStacks replaced with hasStacks !== true
Mutant 376 in q.js: "\n" replaced with "\t"
Mutant 377 in q.js: "\n" replaced with " "
Mutant 378 in q.js: "\n" replaced with "\\n"
Mutant 379 in q.js: lines[0].indexOf replaced with lines[1].indexOf
Mutant 380 in q.js: lines[0].indexOf replaced with lines[lines.length - 1].indexOf
Mutant 381 in q.js: "@" replaced with "#"
Mutant 382 in q.js: "@" replaced with "%"
Mutant 383 in q.js: "@" replaced with "^"
Mutant 384 in q.js: firstLine replaced with firstLine.split(":")[0]
Mutant 385 in q.js: firstLine replaced with firstLine.split(":")[1]
Mutant 386 in q.js: firstLine replaced with firstLine.split(":")[2]
Mutant 387 in q.js: !fileNameAndLineNumber replaced with fileNameAndLineNumber === undefined
Mutant 388 in q.js: !fileNameAndLineNumber replaced with fileNameAndLineNumber.length === 0
Mutant 389 in q.js: !fileNameAndLineNumber replaced with fileNameAndLineNumber[0] === undefined
Mutant 390 in q.js: typeof console !== "undefined" && typeof console.warn === "function" replaced with console.warn("deprecated")
Mutant 391 in q.js: typeof console !== "undefined" && typeof console.warn === "function" replaced with typeof console.warn === "function"
Mutant 392 in q.js: typeof console !== "undefined" && typeof console.warn === "function" replaced with typeof console !== "undefined" && typeof console.warn === "function"
Mutant 393 in q.js: callback.apply(callback, arguments) replaced with callback.apply(callback, arguments[0])
Mutant 394 in q.js: callback.apply(callback, arguments) replaced with callback.apply(callback, arguments[1])
Mutant 395 in q.js: callback.apply(callback, arguments) replaced with callback.apply(callback, arguments[2])
Mutant 396 in q.js: callback.apply replaced with callback.call
Mutant 397 in q.js: callback.apply replaced with callback.bind
Mutant 398 in q.js: callback.apply replaced with callback.toString
Mutant 399 in q.js: callback replaced with callback.bind(this)
Mutant 400 in q.js: callback replaced with callback.call(this)
Mutant 401 in q.js: callback replaced with callback.apply(this)
Mutant 402 in q.js: arguments replaced with null
Mutant 403 in q.js: arguments replaced with undefined
Mutant 404 in q.js: arguments replaced with 0
Mutant 405 in q.js: value instanceof Promise replaced with value === Promise
Mutant 406 in q.js: value instanceof Promise replaced with value.constructor === Promise
Mutant 407 in q.js: value instanceof Promise replaced with Object.getPrototypeOf(value) === Promise.prototype
Mutant 408 in q.js: isPromiseAlike(value) replaced with value.then
Mutant 409 in q.js: isPromiseAlike(value) replaced with value.catch
Mutant 410 in q.js: isPromiseAlike(value) replaced with value.finally
Mutant 411 in q.js: isPromiseAlike replaced with typeof value === "object"
Mutant 412 in q.js: isPromiseAlike replaced with value instanceof Promise
Mutant 413 in q.js: value replaced with value + 1
Mutant 414 in q.js: value replaced with value * 2
Mutant 415 in q.js: value replaced with value - 1
Mutant 416 in q.js: value replaced with value + 1
Mutant 417 in q.js: value replaced with value * 2
Mutant 418 in q.js: value replaced with value - 1
Mutant 419 in q.js: fulfill replaced with reject
Mutant 420 in q.js: value replaced with null
Mutant 421 in q.js: value replaced with undefined
Mutant 422 in q.js: value replaced with 0
Mutant 423 in q.js: object_create replaced with null
Mutant 424 in q.js: object_create replaced with undefined
Mutant 425 in q.js: object_create replaced with {}
Mutant 426 in q.js: object_create replaced with null
Mutant 427 in q.js: object_create replaced with undefined
Mutant 428 in q.js: object_create replaced with {}
Mutant 429 in q.js: Promise.prototype replaced with Object.prototype
Mutant 430 in q.js: Promise.prototype replaced with null
Mutant 431 in q.js: Promise.prototype replaced with undefined
Mutant 432 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 433 in q.js: arguments replaced with array_slice(arguments, 2)
Mutant 434 in q.js: arguments replaced with array_slice(arguments, 3)
Mutant 435 in q.js: messages replaced with messages.length
Mutant 436 in q.js: messages replaced with messages[0]
Mutant 437 in q.js: messages replaced with messages.pop()
Mutant 438 in q.js: args replaced with args[0]
Mutant 439 in q.js: args replaced with args[1]
Mutant 440 in q.js: args replaced with args.slice(1)
Mutant 441 in q.js: op === "when" && operands[1] replaced with op === "when" && operands[2]
Mutant 442 in q.js: op === "when" && operands[1] replaced with op === "when" && !operands[1]
Mutant 443 in q.js: op === "when" && operands[1] replaced with op === "when" && operands[1] === undefined
Mutant 444 in q.js: progressListeners.push replaced with progressListeners.pop
Mutant 445 in q.js: progressListeners.push replaced with progressListeners.shift
Mutant 446 in q.js: progressListeners.push replaced with progressListeners.unshift
Mutant 447 in q.js: operands[1] replaced with operands[2]
Mutant 448 in q.js: operands[1] replaced with operands[0]
Mutant 449 in q.js: operands[1] replaced with operands.length
Mutant 450 in q.js: resolvedPromise.promiseDispatch.apply(resolvedPromise, args) replaced with resolvedPromise.promiseDispatch.apply(resolvedPromise.promiseDispatch.apply(promise))
Mutant 451 in q.js: resolvedPromise.promiseDispatch.apply(resolvedPromise, args) replaced with resolvedPromise.promiseDispatch.apply(resolvedPromise.promiseDispatch.apply(deferred))
Mutant 452 in q.js: resolvedPromise.promiseDispatch.apply(resolvedPromise, args) replaced with resolvedPromise.promiseDispatch.apply(resolvedPromise.promiseDispatch.apply(Q))
Mutant 453 in q.js: resolvedPromise.promiseDispatch.apply replaced with resolvedPromise.promiseDispatch.call
Mutant 454 in q.js: resolvedPromise.promiseDispatch.apply replaced with resolvedPromise.promiseDispatch.bind
Mutant 455 in q.js: resolvedPromise replaced with null
Mutant 456 in q.js: resolvedPromise replaced with undefined
Mutant 457 in q.js: resolvedPromise replaced with 0
Mutant 458 in q.js: args replaced with args[0]
Mutant 459 in q.js: args replaced with args.slice(1)
Mutant 460 in q.js: args replaced with args.concat(["extra argument"])
Mutant 461 in q.js: messages replaced with messages.length
Mutant 462 in q.js: messages replaced with messages[0]
Mutant 463 in q.js: messages replaced with messages.pop()
Mutant 464 in q.js: nearer replaced with nearerValue + 1
Mutant 465 in q.js: nearer replaced with nearerValue * 2
Mutant 466 in q.js: resolvedPromise replaced with resolvedPromise.promise
Mutant 467 in q.js: resolvedPromise replaced with resolvedPromise.source
Mutant 468 in q.js: resolvedPromise replaced with reject(resolvedPromise)
Mutant 469 in q.js: isPromise(nearerValue) replaced with nearerValue === null
Mutant 470 in q.js: isPromise(nearerValue) replaced with nearerValue === undefined
Mutant 471 in q.js: isPromise(nearerValue) replaced with nearerValue === 0
Mutant 472 in q.js: isPromise replaced with isPromiseAlike
Mutant 473 in q.js: isPromise replaced with !isPromise
Mutant 474 in q.js: isPromise replaced with isPromise || isPromiseAlike
Mutant 475 in q.js: nearerValue replaced with nearerValue + 1
Mutant 476 in q.js: nearerValue replaced with nearerValue - 1
Mutant 477 in q.js: nearerValue replaced with nearerValue * 2
Mutant 478 in q.js: !resolvedPromise replaced with resolvedPromise === undefined
Mutant 479 in q.js: !resolvedPromise replaced with resolvedPromise.isFulfilled()
Mutant 480 in q.js: !resolvedPromise replaced with resolvedPromise.state === "fulfilled"
Mutant 481 in q.js: Q.longStackSupport && hasStacks replaced with Q.longStackSupport || hasStacks
Mutant 482 in q.js: Q.longStackSupport && hasStacks replaced with Q.longStackSupport && !hasStacks
Mutant 483 in q.js: Q.longStackSupport && hasStacks replaced with !Q.longStackSupport || hasStacks
Mutant 484 in q.js: e.stack.indexOf("\n") + 1 replaced with e.stack.length
Mutant 485 in q.js: e.stack.indexOf("\n") + 1 replaced with e.stack.indexOf("\n") + 2
Mutant 486 in q.js: e.stack.indexOf("\n") + 1 replaced with e.stack.lastIndexOf("\n") + 1
Mutant 487 in q.js: e.stack.indexOf replaced with e.stack.includes
Mutant 488 in q.js: "\n" replaced with "\t"
Mutant 489 in q.js: "\n" replaced with " "
Mutant 490 in q.js: "\n" replaced with ""
Mutant 491 in q.js: Q.longStackSupport && hasStacks replaced with !Q.longStackSupport && hasStacks
Mutant 492 in q.js: Q.longStackSupport && hasStacks replaced with Q.longStackSupport || hasStacks
Mutant 493 in q.js: Q.longStackSupport && hasStacks replaced with Q.longStackSupport && !hasStacks
Mutant 494 in q.js: newPromise.promiseDispatch.apply(newPromise, message) replaced with newPromise.promiseDispatch.apply(newPromise, message[0])
Mutant 495 in q.js: newPromise.promiseDispatch.apply(newPromise, message) replaced with newPromise.promiseDispatch.apply(newPromise, message.slice(1))
Mutant 496 in q.js: newPromise.promiseDispatch.apply(newPromise, message) replaced with newPromise.promiseDispatch.apply(newPromise, message.concat(newPromise))
Mutant 497 in q.js: newPromise.promiseDispatch.apply replaced with newPromise.promiseDispatch.call
Mutant 498 in q.js: newPromise.promiseDispatch.apply replaced with newPromise.promiseDispatch.bind
Mutant 499 in q.js: newPromise replaced with newPromise.promise
Mutant 500 in q.js: newPromise replaced with newPromise.then(function (value) {
  return value;
})
Mutant 501 in q.js: newPromise replaced with newPromise.catch(function (error) {
  throw error;
})
Mutant 502 in q.js: message replaced with message.slice(1)
Mutant 503 in q.js: message replaced with message.concat(["new element"])
Mutant 504 in q.js: message replaced with message.filter(function (element) {
  return element !== "new element";
})
Mutant 505 in q.js: resolvedPromise replaced with !resolvedPromise
Mutant 506 in q.js: resolvedPromise replaced with resolvedPromise === true
Mutant 507 in q.js: resolvedPromise replaced with resolvedPromise !== false
Mutant 508 in q.js: Q replaced with Q.reject
Mutant 509 in q.js: Q replaced with Q.resolve
Mutant 510 in q.js: Q replaced with Q.fulfill
Mutant 511 in q.js: value replaced with null
Mutant 512 in q.js: value replaced with undefined
Mutant 513 in q.js: value replaced with 0
Mutant 514 in q.js: resolvedPromise replaced with !resolvedPromise
Mutant 515 in q.js: resolvedPromise replaced with resolvedPromise === true
Mutant 516 in q.js: resolvedPromise replaced with resolvedPromise !== false
Mutant 517 in q.js: fulfill(value) replaced with reject(value)
Mutant 518 in q.js: fulfill(value) replaced with fulfill(otherValue)
Mutant 519 in q.js: fulfill(value) replaced with fulfill(value + 1)
Mutant 520 in q.js: fulfill replaced with resolve
Mutant 521 in q.js: fulfill replaced with notify
Mutant 522 in q.js: value replaced with null
Mutant 523 in q.js: value replaced with undefined
Mutant 524 in q.js: value replaced with 0
Mutant 525 in q.js: resolvedPromise replaced with !resolvedPromise
Mutant 526 in q.js: resolvedPromise replaced with resolvedPromise === true
Mutant 527 in q.js: resolvedPromise replaced with resolvedPromise !== false
Mutant 528 in q.js: reject(reason) replaced with reject(new Error(reason))
Mutant 529 in q.js: reject(reason) replaced with reject(reason + "!")
Mutant 530 in q.js: reject(reason) replaced with reject(reason.toUpperCase())
Mutant 531 in q.js: reject replaced with undefined
Mutant 532 in q.js: reason replaced with null
Mutant 533 in q.js: reason replaced with undefined
Mutant 534 in q.js: reason replaced with "error"
Mutant 535 in q.js: resolvedPromise replaced with resolvedPromise === true
Mutant 536 in q.js: resolvedPromise replaced with resolvedPromise !== false
Mutant 537 in q.js: resolvedPromise replaced with resolvedPromise !== undefined
Mutant 538 in q.js: progressListener replaced with progressListeners[0]
Mutant 539 in q.js: progressListener replaced with progressListeners[progressListeners.length - 1]
Mutant 540 in q.js: progress replaced with progress + 1
Mutant 541 in q.js: progress replaced with progress - 1
Mutant 542 in q.js: progress replaced with progress * 2
Mutant 543 in q.js: error replaced with error.message
Mutant 544 in q.js: error replaced with error.stack
Mutant 545 in q.js: error replaced with error.name
Mutant 546 in q.js: error replaced with null
Mutant 547 in q.js: error replaced with undefined
Mutant 548 in q.js: error replaced with new Error()
Mutant 549 in q.js: arguments.length > 2 replaced with arguments.length > 1
Mutant 550 in q.js: arguments.length > 2 replaced with arguments.length === 2
Mutant 551 in q.js: arguments.length > 2 replaced with arguments.length < 2
Mutant 552 in q.js: self.resolve replaced with self.reject
Mutant 553 in q.js: self.resolve replaced with self.notify
Mutant 554 in q.js: self.resolve replaced with self.fulfill
Mutant 555 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 2)
Mutant 556 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 0, 1)
Mutant 557 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 1, 2)
Mutant 558 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 3)
Mutant 559 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 4)
Mutant 560 in q.js: arguments replaced with arguments[0]
Mutant 561 in q.js: arguments replaced with arguments.slice(1)
Mutant 562 in q.js: arguments replaced with arguments.length
Mutant 563 in q.js: 1 replaced with -1
Mutant 564 in q.js: self.resolve replaced with self.reject
Mutant 565 in q.js: self.resolve replaced with self.notify
Mutant 566 in q.js: self.resolve replaced with self.fulfill
Mutant 567 in q.js: value replaced with null
Mutant 568 in q.js: value replaced with undefined
Mutant 569 in q.js: value replaced with 0
Mutant 570 in q.js: typeof resolver !== "function" replaced with resolver !== "function"
Mutant 571 in q.js: typeof resolver !== "function" replaced with resolver !== Function
Mutant 572 in q.js: defer replaced with defer.promise
Mutant 573 in q.js: resolver(deferred.resolve, deferred.reject, deferred.notify) replaced with resolver(deferred.reject, deferred.resolve, deferred.notify)
Mutant 574 in q.js: resolver(deferred.resolve, deferred.reject, deferred.notify) replaced with resolver(deferred.notify, deferred.resolve, deferred.reject)
Mutant 575 in q.js: resolver(deferred.resolve, deferred.reject, deferred.notify) replaced with resolver(deferred.reject, deferred.notify, deferred.resolve)
Mutant 576 in q.js: deferred.resolve replaced with deferred.reject
Mutant 577 in q.js: deferred.resolve replaced with deferred.notify
Mutant 578 in q.js: deferred.resolve replaced with deferred.fulfill
Mutant 579 in q.js: deferred.reject replaced with deferred.resolve
Mutant 580 in q.js: deferred.reject replaced with deferred.notify
Mutant 581 in q.js: deferred.reject replaced with deferred.fulfill
Mutant 582 in q.js: deferred.notify replaced with deferred.reject
Mutant 583 in q.js: deferred.notify replaced with deferred.fulfill
Mutant 584 in q.js: deferred.notify replaced with deferred.resolve
Mutant 585 in q.js: deferred.reject replaced with deferred.resolve
Mutant 586 in q.js: deferred.reject replaced with deferred.notify
Mutant 587 in q.js: deferred.reject replaced with deferred.makeNodeResolver
Mutant 588 in q.js: reason replaced with null
Mutant 589 in q.js: reason replaced with undefined
Mutant 590 in q.js: reason replaced with "error"
Mutant 591 in q.js: Q replaced with Q.reject
Mutant 592 in q.js: Q replaced with Q.resolve
Mutant 593 in q.js: Q replaced with Q.all
Mutant 594 in q.js: x replaced with y
Mutant 595 in q.js: x replaced with x + 1
Mutant 596 in q.js: x replaced with x * 2
Mutant 597 in q.js: y replaced with x
Mutant 598 in q.js: y replaced with y + 1
Mutant 599 in q.js: y replaced with x + y
Mutant 600 in q.js: Q replaced with Q.reject
Mutant 601 in q.js: Q replaced with Q.resolve
Mutant 602 in q.js: Q replaced with Q.all
Mutant 603 in q.js: [this, that] replaced with [that, this]
Mutant 604 in q.js: [this, that] replaced with [this, this]
Mutant 605 in q.js: [this, that] replaced with [null, that]
Mutant 606 in q.js: x === y replaced with x !== y
Mutant 607 in q.js: x === y replaced with x == y
Mutant 608 in q.js: x === y replaced with x > y
Mutant 609 in q.js: i < len replaced with i > len
Mutant 610 in q.js: i < len replaced with i <= len
Mutant 611 in q.js: i < len replaced with i >= len
Mutant 612 in q.js: i++ replaced with i--
Mutant 613 in q.js: i++ replaced with i += 2
Mutant 614 in q.js: i++ replaced with i = i + 1
Mutant 615 in q.js: Q(answerPs[i]).then(resolve, reject) replaced with Q(answerPs[i]).then(reject, resolve)
Mutant 616 in q.js: Q(answerPs[i]).then(resolve, reject) replaced with Q(answerPs[i]).then(resolve, reject, resolve)
Mutant 617 in q.js: Q(answerPs[i]).then(resolve, reject) replaced with Q(answerPs[i]).then(reject, resolve, reject)
Mutant 618 in q.js: Q replaced with Q.reject
Mutant 619 in q.js: Q replaced with Q.resolve
Mutant 620 in q.js: Q replaced with Q.all
Mutant 621 in q.js: answerPs[i] replaced with answerPs[i] + 1
Mutant 622 in q.js: answerPs[i] replaced with answerPs[i] - 1
Mutant 623 in q.js: answerPs[i] replaced with answerPs[i] * 2
Mutant 624 in q.js: resolve replaced with reject
Mutant 625 in q.js: reject replaced with resolve
Mutant 626 in q.js: this.then replaced with null
Mutant 627 in q.js: this.then replaced with undefined
Mutant 628 in q.js: Q.race replaced with Q.reject
Mutant 629 in q.js: Q.race replaced with Q.resolve
Mutant 630 in q.js: Q.race replaced with Q.all
Mutant 631 in q.js: fallback === void 0 replaced with fallback === null
Mutant 632 in q.js: fallback === void 0 replaced with fallback === undefined
Mutant 633 in q.js: fallback === void 0 replaced with fallback === function () {}
Mutant 634 in q.js: inspect === void 0 replaced with inspect !== void 0
Mutant 635 in q.js: inspect === void 0 replaced with inspect === null
Mutant 636 in q.js: inspect === void 0 replaced with inspect === undefined
Mutant 637 in q.js: object_create replaced with null
Mutant 638 in q.js: object_create replaced with undefined
Mutant 639 in q.js: object_create replaced with {}
Mutant 640 in q.js: Promise.prototype replaced with Object.prototype
Mutant 641 in q.js: Promise.prototype replaced with null
Mutant 642 in q.js: Promise.prototype replaced with undefined
Mutant 643 in q.js: descriptor[op].apply(promise, args) replaced with descriptor[op].apply(promise, args[0])
Mutant 644 in q.js: descriptor[op].apply(promise, args) replaced with descriptor[op].apply(promise, args[1])
Mutant 645 in q.js: descriptor[op].apply(promise, args) replaced with descriptor[op].apply(promise, args.slice(1))
Mutant 646 in q.js: promise replaced with null
Mutant 647 in q.js: promise replaced with undefined
Mutant 648 in q.js: promise replaced with 0
Mutant 649 in q.js: args replaced with args.slice(1)
Mutant 650 in q.js: args replaced with args.concat(1)
Mutant 651 in q.js: args replaced with args.map(function (x) {
  return x + 1;
})
Mutant 652 in q.js: promise replaced with null
Mutant 653 in q.js: promise replaced with undefined
Mutant 654 in q.js: promise replaced with {}
Mutant 655 in q.js: op replaced with op + 1
Mutant 656 in q.js: op replaced with op - 1
Mutant 657 in q.js: op replaced with op * 2
Mutant 658 in q.js: args replaced with args[0]
Mutant 659 in q.js: args replaced with args[1]
Mutant 660 in q.js: args replaced with args[2]
Mutant 661 in q.js: reject replaced with resolve
Mutant 662 in q.js: exception replaced with null
Mutant 663 in q.js: exception replaced with undefined
Mutant 664 in q.js: exception replaced with new Error("Something went wrong")
Mutant 665 in q.js: resolve replaced with !resolve
Mutant 666 in q.js: resolve replaced with resolve(reject)
Mutant 667 in q.js: resolve replaced with resolve(promise)
Mutant 668 in q.js: resolve replaced with deferred.reject
Mutant 669 in q.js: resolve replaced with deferred.notify
Mutant 670 in q.js: result replaced with null
Mutant 671 in q.js: result replaced with undefined
Mutant 672 in q.js: inspect replaced with inspect.state
Mutant 673 in q.js: inspect replaced with inspect.value
Mutant 674 in q.js: inspect replaced with inspect.reason
Mutant 675 in q.js: inspected.state === "rejected" replaced with inspected.state === "fulfilled"
Mutant 676 in q.js: inspected.state === "rejected" replaced with inspected.state === "pending"
Mutant 677 in q.js: inspected.state === "rejected" replaced with inspected.state === "unknown"
Mutant 678 in q.js: inspected.state === "pending" || inspected.state === "rejected" replaced with inspected.state === "fulfilled"
Mutant 679 in q.js: inspected.state === "pending" || inspected.state === "rejected" replaced with inspected.state !== "rejected"
Mutant 680 in q.js: inspected.state === "pending" || inspected.state === "rejected" replaced with inspected.state === "pending"
Mutant 681 in q.js: defer replaced with deferred
Mutant 682 in q.js: defer replaced with defer.promise
Mutant 683 in q.js: fulfilled replaced with rejected
Mutant 684 in q.js: fulfilled replaced with undefined
Mutant 685 in q.js: fulfilled replaced with null
Mutant 686 in q.js: value replaced with null
Mutant 687 in q.js: value replaced with undefined
Mutant 688 in q.js: reject replaced with resolve
Mutant 689 in q.js: exception replaced with null
Mutant 690 in q.js: exception replaced with undefined
Mutant 691 in q.js: exception replaced with new Error("Different error message")
Mutant 692 in q.js: typeof rejected === "function" replaced with rejected !== null
Mutant 693 in q.js: typeof rejected === "function" replaced with rejected !== undefined
Mutant 694 in q.js: typeof rejected === "function" replaced with rejected !== function () {}
Mutant 695 in q.js: makeStackTraceLong(exception, self) replaced with makeStackTraceLong(exception, self)
Mutant 696 in q.js: makeStackTraceLong(exception, self) replaced with makeStackTraceLong(exception, this)
Mutant 697 in q.js: makeStackTraceLong(exception, self) replaced with makeStackTraceLong(exception, null)
Mutant 698 in q.js: exception replaced with exception.message
Mutant 699 in q.js: exception replaced with exception.stack
Mutant 700 in q.js: exception replaced with exception.name
Mutant 701 in q.js: exception replaced with null
Mutant 702 in q.js: exception replaced with undefined
Mutant 703 in q.js: exception replaced with new Error("Different error message")
Mutant 704 in q.js: reject replaced with undefined
Mutant 705 in q.js: newException replaced with newException.message
Mutant 706 in q.js: newException replaced with newException.stack
Mutant 707 in q.js: newException replaced with newException.name
Mutant 708 in q.js: reject replaced with undefined
Mutant 709 in q.js: exception replaced with null
Mutant 710 in q.js: exception replaced with undefined
Mutant 711 in q.js: exception replaced with new Error()
Mutant 712 in q.js: progressed replaced with progressed + 1
Mutant 713 in q.js: progressed replaced with progressed - 1
Mutant 714 in q.js: progressed replaced with progressed * 2
Mutant 715 in q.js: value replaced with null
Mutant 716 in q.js: value replaced with undefined
Mutant 717 in q.js: done replaced with !done
Mutant 718 in q.js: done replaced with done && false
Mutant 719 in q.js: done replaced with done || true
Mutant 720 in q.js: deferred.resolve replaced with deferred.reject
Mutant 721 in q.js: deferred.resolve replaced with deferred.notify
Mutant 722 in q.js: deferred.resolve replaced with deferred.then
Mutant 723 in q.js: _fulfilled(value) replaced with _rejected(value)
Mutant 724 in q.js: _fulfilled(value) replaced with _progressed(value)
Mutant 725 in q.js: _fulfilled(value) replaced with _fulfilled(reject(value))
Mutant 726 in q.js: value replaced with null
Mutant 727 in q.js: value replaced with undefined
Mutant 728 in q.js: value replaced with "foo"
Mutant 729 in q.js: done replaced with !done
Mutant 730 in q.js: done replaced with done && false
Mutant 731 in q.js: done replaced with done || true
Mutant 732 in q.js: deferred.resolve replaced with deferred.reject
Mutant 733 in q.js: deferred.resolve replaced with deferred.notify
Mutant 734 in q.js: deferred.resolve replaced with deferred.then
Mutant 735 in q.js: _rejected(exception) replaced with _fulfilled(exception)
Mutant 736 in q.js: _rejected(exception) replaced with _rejected(value)
Mutant 737 in q.js: _rejected(exception) replaced with _progressed(exception)
Mutant 738 in q.js: exception replaced with exception.message
Mutant 739 in q.js: exception replaced with exception.stack
Mutant 740 in q.js: exception replaced with exception.name
Mutant 741 in q.js: _progressed replaced with _rejected
Mutant 742 in q.js: _progressed replaced with _fulfilled
Mutant 743 in q.js: value replaced with null
Mutant 744 in q.js: value replaced with undefined
Mutant 745 in q.js: value replaced with 0
Mutant 746 in q.js: Q.onerror replaced with Q.onerror()
Mutant 747 in q.js: e replaced with e.message
Mutant 748 in q.js: e replaced with e.stack
Mutant 749 in q.js: e replaced with e.toString()
Mutant 750 in q.js: !threw replaced with threw
Mutant 751 in q.js: !threw replaced with threw === true
Mutant 752 in q.js: deferred.notify replaced with deferred.reject
Mutant 753 in q.js: newValue replaced with null
Mutant 754 in q.js: newValue replaced with undefined
Mutant 755 in q.js: newValue replaced with 0
Mutant 756 in q.js: callback replaced with callback.call(null)
Mutant 757 in q.js: callback replaced with callback.apply(null)
Mutant 758 in q.js: callback replaced with callback.bind(null)()
Mutant 759 in q.js: Q replaced with Q.fcall
Mutant 760 in q.js: Q replaced with Q.resolve
Mutant 761 in q.js: Q replaced with Q.reject
Mutant 762 in q.js: callback replaced with callback.fcall(value).thenResolve(value)
Mutant 763 in q.js: callback replaced with callback.then(value)
Mutant 764 in q.js: callback replaced with callback.resolve(value)
Mutant 765 in q.js: callback.fcall replaced with callback.fapply
Mutant 766 in q.js: callback.fcall replaced with callback.fbind
not replacing callback.fcall with callback.fapply
not replacing callback.fcall with callback.fapply
not replacing callback.fcall with callback.fbind
not replacing callback.fcall with callback.fbind
Mutant 767 in q.js: value replaced with null
Mutant 768 in q.js: value replaced with undefined
Mutant 769 in q.js: value replaced with "foo"
Mutant 770 in q.js: value replaced with null
Mutant 771 in q.js: value replaced with undefined
Mutant 772 in q.js: Q(value).then(fulfilled, rejected, progressed) replaced with Q(value).then(rejected, fulfilled, progressed)
Mutant 773 in q.js: Q(value).then(fulfilled, rejected, progressed) replaced with Q(value).then(fulfilled, rejected, progressed, null)
Mutant 774 in q.js: Q(value).then(fulfilled, rejected, progressed) replaced with Q(value).then(rejected, fulfilled, progressed, undefined)
Mutant 775 in q.js: value replaced with 0
Mutant 776 in q.js: fulfilled replaced with rejected
Mutant 777 in q.js: fulfilled replaced with undefined
Mutant 778 in q.js: fulfilled replaced with null
Mutant 779 in q.js: rejected replaced with fulfilled
Mutant 780 in q.js: rejected replaced with undefined
Mutant 781 in q.js: progressed replaced with null
Mutant 782 in q.js: progressed replaced with undefined
Mutant 783 in q.js: progressed replaced with function () {}
Mutant 784 in q.js: function () {
  return value;
} replaced with function () {
  return null;
}
Mutant 785 in q.js: function () {
  return value;
} replaced with function () {
  return undefined;
}
Mutant 786 in q.js: function () {
  return value;
} replaced with function () {
  return 0;
}
Mutant 787 in q.js: Q replaced with Q.reject
Mutant 788 in q.js: Q replaced with Q.resolve
Mutant 789 in q.js: Q replaced with Q.defer
Mutant 790 in q.js: promise replaced with null
Mutant 791 in q.js: promise replaced with undefined
Mutant 792 in q.js: promise replaced with 0
Mutant 793 in q.js: value replaced with null
Mutant 794 in q.js: value replaced with undefined
Mutant 795 in q.js: value replaced with 0
Mutant 796 in q.js: function () {
  throw reason;
} replaced with function () {
  return reason;
}
Mutant 797 in q.js: function () {
  throw reason;
} replaced with function () {
  return new Error(reason);
}
Mutant 798 in q.js: function () {
  throw reason;
} replaced with function () {
  throw new Error("Reason: " + reason);
}
Mutant 799 in q.js: promise replaced with null
Mutant 800 in q.js: promise replaced with undefined
Mutant 801 in q.js: promise replaced with 0
Mutant 802 in q.js: reason replaced with null
Mutant 803 in q.js: reason replaced with undefined
Mutant 804 in q.js: reason replaced with "error"
Mutant 805 in q.js: isPromise(value) replaced with !isPromise(value)
Mutant 806 in q.js: isPromise(value) replaced with isPromiseAlike(value)
Mutant 807 in q.js: isPromise(value) replaced with isFulfilled(value)
Mutant 808 in q.js: isPromise replaced with isRejected
Mutant 809 in q.js: value replaced with value + 1
Mutant 810 in q.js: value replaced with value * 2
Mutant 811 in q.js: value replaced with value - 1
Mutant 812 in q.js: inspected.state === "fulfilled" replaced with inspected.state === "rejected"
Mutant 813 in q.js: inspected.state === "fulfilled" replaced with inspected.value === undefined
Mutant 814 in q.js: inspected.state === "fulfilled" replaced with inspected.state === "pending"
Mutant 815 in q.js: isObject replaced with isArray
Mutant 816 in q.js: isObject replaced with isFunction
Mutant 817 in q.js: isObject replaced with isString
Mutant 818 in q.js: object replaced with object.then
Mutant 819 in q.js: object replaced with object.then(function () {
  return value;
})
Mutant 820 in q.js: object replaced with object.then(function () {
  throw reason;
})
Mutant 821 in q.js: isPromise replaced with isPromiseAlike
Mutant 822 in q.js: isPromise replaced with !isPromise
Mutant 823 in q.js: isPromise replaced with isFulfilled
Mutant 824 in q.js: object replaced with object.inspect().state === "rejected"
Mutant 825 in q.js: object replaced with object.inspect().value === "rejected"
Mutant 826 in q.js: isPromise replaced with !isPromise
Mutant 827 in q.js: isPromise replaced with isPromiseAlike
Mutant 828 in q.js: isPromise replaced with isFulfilled
Mutant 829 in q.js: object replaced with object.inspect().state === "rejected"
Mutant 830 in q.js: object replaced with object.inspect().state === "pending"
Mutant 831 in q.js: object replaced with object.inspect().state === "fulfilled"
Mutant 832 in q.js: this.inspect replaced with this.inspect.state
Mutant 833 in q.js: this.inspect replaced with this.inspect.value
Mutant 834 in q.js: this.inspect replaced with this.inspect.reason
not replacing this.inspect with this.inspect.state
not replacing this.inspect with this.inspect.value
not replacing this.inspect with this.inspect.reason
Mutant 835 in q.js: isPromise replaced with isPromiseAlike
Mutant 836 in q.js: isPromise replaced with !isPromise
Mutant 837 in q.js: isPromise replaced with isFulfilled
Mutant 838 in q.js: object replaced with object.inspect().state === "rejected"
Mutant 839 in q.js: object replaced with object.state === "rejected"
Mutant 840 in q.js: object replaced with object.inspect().state === "fulfilled"
Mutant 841 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections === false
Mutant 842 in q.js: !trackUnhandledRejections replaced with !trackUnhandledRejections.valueOf()
Mutant 843 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections === false
Mutant 844 in q.js: !trackUnhandledRejections replaced with typeof trackUnhandledRejections === "boolean"
Mutant 845 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections !== true
Mutant 846 in q.js: array_indexOf(unhandledRejections, promise) !== -1 replaced with unhandledRejections.includes(promise)
Mutant 847 in q.js: array_indexOf(unhandledRejections, promise) !== -1 replaced with unhandledRejections.indexOf(promise) > -1
Mutant 848 in q.js: array_indexOf(unhandledRejections, promise) !== -1 replaced with unhandledRejections.some(function (p) {
  return p === promise;
})
Mutant 849 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(unhandledRejections, reason)
Mutant 850 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections, promise)
Mutant 851 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(unhandledReasons, promise)
Mutant 852 in q.js: array_indexOf replaced with array_lastIndexOf
Mutant 853 in q.js: array_indexOf replaced with array_includes
Mutant 854 in q.js: array_indexOf replaced with array_findIndex
Mutant 855 in q.js: unhandledRejections replaced with unhandledReasons
Mutant 856 in q.js: unhandledRejections replaced with reportedUnhandledRejections
Mutant 857 in q.js: unhandledRejections replaced with trackUnhandledRejections
Mutant 858 in q.js: promise replaced with promise.then(function () {
  throw new Error("test");
})
Mutant 859 in q.js: promise replaced with promise.then(function () {
  return Q.reject("test");
})
Mutant 860 in q.js: promise replaced with promise.then(function () {
  return Q.resolve("test");
})
Mutant 861 in q.js: process.emit("unhandledRejection", reason, promise) replaced with process.emit("rejectionHandled", reason, promise)
Mutant 862 in q.js: process.emit("unhandledRejection", reason, promise) replaced with process.emit("unhandledRejection", reason, null)
Mutant 863 in q.js: "unhandledRejection" replaced with "unhandledRejection" + "foo"
Mutant 864 in q.js: "unhandledRejection" replaced with "unhandledRejection" + "bar"
Mutant 865 in q.js: "unhandledRejection" replaced with "unhandledRejection" + "baz"
Mutant 866 in q.js: reason replaced with reason.stack
Mutant 867 in q.js: reason replaced with reason.message
Mutant 868 in q.js: reason replaced with reason.toString()
Mutant 869 in q.js: promise replaced with promise.then(function () {
  throw new Error("test");
})
Mutant 870 in q.js: promise replaced with promise.then(function () {
  return Q.reject("test");
})
Mutant 871 in q.js: promise replaced with promise.then(function () {
  return Q.reject(new Error("test"));
})
Mutant 872 in q.js: reportedUnhandledRejections.push replaced with reportedUnhandledRejections.pop
Mutant 873 in q.js: reportedUnhandledRejections.push replaced with reportedUnhandledRejections.shift
Mutant 874 in q.js: reportedUnhandledRejections.push replaced with reportedUnhandledRejections.unshift
Mutant 875 in q.js: unhandledRejections.push replaced with unhandledRejections.pop
Mutant 876 in q.js: unhandledRejections.push replaced with unhandledRejections.shift
Mutant 877 in q.js: unhandledRejections.push replaced with unhandledRejections.unshift
Mutant 878 in q.js: promise replaced with null
Mutant 879 in q.js: promise replaced with undefined
Mutant 880 in q.js: promise replaced with rejection
Mutant 881 in q.js: reason && typeof reason.stack !== "undefined" replaced with reason && reason.stack !== "undefined"
Mutant 882 in q.js: reason && typeof reason.stack !== "undefined" replaced with reason && reason.stack !== "undefined" && reason.stack !== null
Mutant 883 in q.js: reason && typeof reason.stack !== "undefined" replaced with reason && reason.stack !== "undefined" && reason.stack !== "undefined"
Mutant 884 in q.js: reason.stack replaced with reason.message
Mutant 885 in q.js: reason.stack replaced with reason.name
Mutant 886 in q.js: reason.stack replaced with reason.code
Mutant 887 in q.js: unhandledReasons.push replaced with unhandledReasons.pop
Mutant 888 in q.js: unhandledReasons.push replaced with unhandledReasons.shift
Mutant 889 in q.js: unhandledReasons.push replaced with unhandledReasons.unshift
Mutant 890 in q.js: "(no stack) " + reason replaced with "(no stack) " + reason.message
Mutant 891 in q.js: "(no stack) " + reason replaced with "(no stack) " + reason.toString()
Mutant 892 in q.js: "(no stack) " + reason replaced with "(no stack) " + reason.stack
Mutant 893 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections === false
Mutant 894 in q.js: !trackUnhandledRejections replaced with trackUnhandledRejections !== true
Mutant 895 in q.js: array_indexOf(unhandledRejections, promise) replaced with array_indexOf(unhandledRejections.length)
Mutant 896 in q.js: array_indexOf replaced with array_lastIndexOf
Mutant 897 in q.js: array_indexOf replaced with array_includes
Mutant 898 in q.js: array_indexOf replaced with array_findIndex
Mutant 899 in q.js: unhandledRejections replaced with unhandledRejections.slice()
Mutant 900 in q.js: unhandledRejections replaced with unhandledRejections.splice(0, 1)
Mutant 901 in q.js: unhandledRejections replaced with unhandledRejections.pop()
Mutant 902 in q.js: promise replaced with promise.then(function () {})
Mutant 903 in q.js: promise replaced with promise.catch(function () {})
Mutant 904 in q.js: promise replaced with promise.finally(function () {})
Mutant 905 in q.js: at !== -1 replaced with at < -1
Mutant 906 in q.js: at !== -1 replaced with at > -1
Mutant 907 in q.js: at !== -1 replaced with at === -1
Mutant 908 in q.js: array_indexOf(reportedUnhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections.length, promise)
Mutant 909 in q.js: array_indexOf(reportedUnhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections.indexOf(promise) === -1)
Mutant 910 in q.js: array_indexOf(reportedUnhandledRejections, promise) replaced with array_indexOf(reportedUnhandledRejections.includes(promise))
Mutant 911 in q.js: array_indexOf replaced with array_lastIndexOf
Mutant 912 in q.js: array_indexOf replaced with array_includes
Mutant 913 in q.js: array_indexOf replaced with array_findIndex
Mutant 914 in q.js: reportedUnhandledRejections replaced with unhandledRejections
Mutant 915 in q.js: reportedUnhandledRejections replaced with reportedUnhandledRejections.length
Mutant 916 in q.js: reportedUnhandledRejections replaced with unhandledReasons.length
Mutant 917 in q.js: promise replaced with promise.then(function () {})
Mutant 918 in q.js: promise replaced with promise.catch(function () {})
Mutant 919 in q.js: promise replaced with promise.finally(function () {})
Mutant 920 in q.js: atReport !== -1 replaced with atReport === -1
Mutant 921 in q.js: atReport !== -1 replaced with reportedUnhandledRejections.length === 0
Mutant 922 in q.js: atReport !== -1 replaced with unhandledRejections.length === 0
Mutant 923 in q.js: process.emit("rejectionHandled", unhandledReasons[at], promise) replaced with process.emit("rejectionHandled", unhandledReasons[at], unhandledRejections[at])
Mutant 924 in q.js: process.emit("rejectionHandled", unhandledReasons[at], promise) replaced with process.emit("rejectionHandled", reason, promise)
Mutant 925 in q.js: unhandledReasons[at] replaced with unhandledReasons[at + 1]
Mutant 926 in q.js: unhandledReasons[at] replaced with unhandledReasons[at - 1]
Mutant 927 in q.js: unhandledReasons[at] replaced with unhandledReasons[at] = "new reason"
Mutant 928 in q.js: reportedUnhandledRejections.splice(atReport, 1) replaced with reportedUnhandledRejections.splice(atReport, 0)
Mutant 929 in q.js: reportedUnhandledRejections.splice(atReport, 1) replaced with reportedUnhandledRejections.splice(atReport, -1)
Mutant 930 in q.js: reportedUnhandledRejections.splice(atReport, 1) replaced with reportedUnhandledRejections.splice(atReport, 2)
Mutant 931 in q.js: atReport replaced with atReport + 1
Mutant 932 in q.js: atReport replaced with atReport - 1
Mutant 933 in q.js: atReport replaced with atReport.length
Mutant 934 in q.js: 1 replaced with 0
Mutant 935 in q.js: 1 replaced with -1
Mutant 936 in q.js: 1 replaced with 2
Mutant 937 in q.js: unhandledRejections.splice(at, 1) replaced with unhandledRejections.splice(at, 0)
Mutant 938 in q.js: unhandledRejections.splice(at, 1) replaced with unhandledRejections.splice(at, 2)
Mutant 939 in q.js: unhandledRejections.splice(at, 1) replaced with unhandledRejections.splice(at, -1)
Mutant 940 in q.js: at replaced with at + 1
Mutant 941 in q.js: at replaced with at - 1
Mutant 942 in q.js: at replaced with at + 2
Mutant 943 in q.js: 1 replaced with 0
Mutant 944 in q.js: 1 replaced with -1
Mutant 945 in q.js: 1 replaced with 2
Mutant 946 in q.js: unhandledReasons.splice(at, 1) replaced with unhandledReasons.splice(at, 0)
Mutant 947 in q.js: unhandledReasons.splice(at, 1) replaced with unhandledReasons.splice(at, 2)
Mutant 948 in q.js: unhandledReasons.splice(at, 1) replaced with unhandledReasons.splice(at, -1)
Mutant 949 in q.js: at replaced with at + 1
Mutant 950 in q.js: at replaced with at - 1
Mutant 951 in q.js: at replaced with at + 2
Mutant 952 in q.js: 1 replaced with 0
Mutant 953 in q.js: 1 replaced with -1
Mutant 954 in q.js: 1 replaced with unhandledReasons.length
Mutant 955 in q.js: resetUnhandledRejections replaced with unhandledRejections.length = 0
Mutant 956 in q.js: resetUnhandledRejections replaced with unhandledReasons.length = 0
Mutant 957 in q.js: rejected replaced with !rejected
Mutant 958 in q.js: rejected replaced with rejected && false
Mutant 959 in q.js: rejected replaced with rejected || true
Mutant 960 in q.js: this replaced with null
Mutant 961 in q.js: this replaced with undefined
Mutant 962 in q.js: this replaced with {}
Mutant 963 in q.js: reason replaced with null
Mutant 964 in q.js: reason replaced with undefined
Mutant 965 in q.js: reason replaced with "error"
Mutant 966 in q.js: trackRejection(rejection, reason) replaced with trackRejection(rejection, reason + 1)
Mutant 967 in q.js: trackRejection(rejection, reason) replaced with trackRejection(rejection, reason - 1)
Mutant 968 in q.js: trackRejection(rejection, reason) replaced with trackRejection(rejection, reason * 2)
Mutant 969 in q.js: trackRejection replaced with untrackRejection
Mutant 970 in q.js: rejection replaced with null
Mutant 971 in q.js: rejection replaced with undefined
Mutant 972 in q.js: rejection replaced with 0
Mutant 973 in q.js: reason replaced with null
Mutant 974 in q.js: reason replaced with undefined
Mutant 975 in q.js: reason replaced with "some string"
Mutant 976 in q.js: name === null || name === void 0 replaced with name === undefined
Mutant 977 in q.js: name === null || name === void 0 replaced with name === void 0
Mutant 978 in q.js: name === null || name === void 0 replaced with name === null || name === undefined
Mutant 979 in q.js: value.apply(void 0, args) replaced with value.apply(null, args)
Mutant 980 in q.js: value.apply(void 0, args) replaced with value.apply(undefined, args)
Mutant 981 in q.js: value.apply(void 0, args) replaced with value.apply(this, args)
Mutant 982 in q.js: value.apply replaced with value.call
Mutant 983 in q.js: value.apply replaced with value.bind
Mutant 984 in q.js: value.apply replaced with value.toString
Mutant 985 in q.js: void 0 replaced with null
Mutant 986 in q.js: void 0 replaced with undefined
Mutant 987 in q.js: void 0 replaced with this
Mutant 988 in q.js: args replaced with args.slice()
Mutant 989 in q.js: args replaced with args.concat()
Mutant 990 in q.js: args replaced with args.map(function (arg) {
  return arg + 1;
})
Mutant 991 in q.js: value[name].apply(value, args) replaced with value[name].apply(value, args.slice())
Mutant 992 in q.js: value[name].apply(value, args) replaced with value[name].apply(value, args.concat())
Mutant 993 in q.js: value[name].apply replaced with value[name].call
Mutant 994 in q.js: value[name].apply replaced with value[name].bind
Mutant 995 in q.js: value replaced with null
Mutant 996 in q.js: value replaced with undefined
Mutant 997 in q.js: value replaced with {}
Mutant 998 in q.js: args replaced with args[0]
Mutant 999 in q.js: args replaced with args.slice(1)
Mutant 1000 in q.js: args replaced with args.concat(["extra argument"])
Mutant 1001 in q.js: value.apply(thisp, args) replaced with value.apply(thisp, args.slice())
Mutant 1002 in q.js: value.apply(thisp, args) replaced with value.apply(thisp, args.concat())
Mutant 1003 in q.js: value.apply replaced with value.call
Mutant 1004 in q.js: value.apply replaced with value.bind
Mutant 1005 in q.js: value.apply replaced with value.toString
Mutant 1006 in q.js: thisp replaced with null
Mutant 1007 in q.js: thisp replaced with undefined
Mutant 1008 in q.js: thisp replaced with {}
Mutant 1009 in q.js: args replaced with args.slice()
Mutant 1010 in q.js: args replaced with args.concat()
Mutant 1011 in q.js: args replaced with args.map(function (x) {
  return x;
})
Mutant 1012 in q.js: object_keys replaced with object_values
Mutant 1013 in q.js: object_keys replaced with Object.values
Mutant 1014 in q.js: object_keys replaced with Object.keys
Mutant 1015 in q.js: value replaced with null
Mutant 1016 in q.js: value replaced with undefined
Mutant 1017 in q.js: value replaced with {}
Mutant 1018 in q.js: promise.then(deferred.resolve, deferred.reject, deferred.notify) replaced with promise.then(deferred.reject)
Mutant 1019 in q.js: promise.then(deferred.resolve, deferred.reject, deferred.notify) replaced with promise.then(deferred.notify)
Mutant 1020 in q.js: promise.then(deferred.resolve, deferred.reject, deferred.notify) replaced with promise.then(deferred.resolve(reason))
Mutant 1021 in q.js: promise.then replaced with promise.catch
Mutant 1022 in q.js: promise.then replaced with promise.finally
Mutant 1023 in q.js: promise.then replaced with promise.all
Mutant 1024 in q.js: deferred.resolve replaced with deferred.reject
Mutant 1025 in q.js: deferred.resolve replaced with deferred.notify
Mutant 1026 in q.js: deferred.resolve replaced with deferred.cancel
Mutant 1027 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1028 in q.js: deferred.reject replaced with deferred.notify
Mutant 1029 in q.js: deferred.reject replaced with deferred.reject(new Error(reason))
Mutant 1030 in q.js: deferred.notify replaced with deferred.reject
Mutant 1031 in q.js: deferred.notify replaced with deferred.resolve
Mutant 1032 in q.js: deferred.notify replaced with deferred.progress
Mutant 1033 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1034 in q.js: deferred.reject replaced with deferred.notify
Mutant 1035 in q.js: deferred.reject replaced with deferred.cancel
Mutant 1036 in q.js: exception replaced with null
Mutant 1037 in q.js: exception replaced with undefined
Mutant 1038 in q.js: exception replaced with false
Mutant 1039 in q.js: dispatch(object, op, args) replaced with dispatch(object, op, args[0])
Mutant 1040 in q.js: dispatch(object, op, args) replaced with dispatch(object, op, args.length)
Mutant 1041 in q.js: dispatch(object, op, args) replaced with dispatch(object, op, args[args.length - 1])
Mutant 1042 in q.js: object replaced with null
Mutant 1043 in q.js: object replaced with undefined
Mutant 1044 in q.js: object replaced with {}
Mutant 1045 in q.js: op replaced with op + 1
Mutant 1046 in q.js: op replaced with op - 1
Mutant 1047 in q.js: op replaced with op * 2
Mutant 1048 in q.js: args replaced with null
Mutant 1049 in q.js: args replaced with undefined
Mutant 1050 in q.js: args replaced with []
Mutant 1051 in q.js: Q replaced with Q.reject
Mutant 1052 in q.js: Q replaced with Q.fulfill
Mutant 1053 in q.js: Q replaced with Q.defer
Mutant 1054 in q.js: object replaced with null
Mutant 1055 in q.js: object replaced with undefined
Mutant 1056 in q.js: object replaced with {}
Mutant 1057 in q.js: Q(value).spread(fulfilled, rejected) replaced with Q(value).spread(rejected, fulfilled)
Mutant 1058 in q.js: Q(value).spread(fulfilled, rejected) replaced with Q(value).spread(fulfilled)
Mutant 1059 in q.js: Q(value).spread(fulfilled, rejected) replaced with Q(value).spread(null, fulfilled)
Mutant 1060 in q.js: Q replaced with Q.reject
Mutant 1061 in q.js: Q replaced with Q.resolve
Mutant 1062 in q.js: Q replaced with Q.defer
Mutant 1063 in q.js: value replaced with undefined
Mutant 1064 in q.js: value replaced with 0
Mutant 1065 in q.js: fulfilled replaced with rejected
Mutant 1066 in q.js: fulfilled replaced with null
Mutant 1067 in q.js: fulfilled replaced with undefined
Mutant 1068 in q.js: rejected replaced with fulfilled
Mutant 1069 in q.js: rejected replaced with undefined
Mutant 1070 in q.js: rejected replaced with null
Mutant 1071 in q.js: this.all replaced with this.any
Mutant 1072 in q.js: this.all replaced with this.some
Mutant 1073 in q.js: this.all replaced with this.none
not replacing this.all with this.any
not replacing this.all with this.any
not replacing this.all with this.some
not replacing this.all with this.some
not replacing this.all with this.none
not replacing this.all with this.none
Mutant 1074 in q.js: fulfilled.apply(void 0, array) replaced with fulfilled.apply(null)
Mutant 1075 in q.js: fulfilled.apply(void 0, array) replaced with fulfilled.apply(undefined)
Mutant 1076 in q.js: fulfilled.apply(void 0, array) replaced with fulfilled.apply(this)
Mutant 1077 in q.js: fulfilled.apply replaced with fulfilled.call
Mutant 1078 in q.js: fulfilled.apply replaced with fulfilled.bind
Mutant 1079 in q.js: void 0 replaced with null
Mutant 1080 in q.js: void 0 replaced with undefined
Mutant 1081 in q.js: void 0 replaced with 0
Mutant 1082 in q.js: array replaced with array.slice()
Mutant 1083 in q.js: array replaced with array.concat()
Mutant 1084 in q.js: array replaced with array.map(function (x) {
  return x;
})
Mutant 1085 in q.js: typeof StopIteration === "undefined" replaced with StopIteration === "undefined"
Mutant 1086 in q.js: typeof StopIteration === "undefined" replaced with StopIteration !== "undefined"
Mutant 1087 in q.js: typeof StopIteration === "undefined" replaced with typeof StopIteration !== "undefined"
Mutant 1088 in q.js: arg replaced with null
Mutant 1089 in q.js: arg replaced with undefined
Mutant 1090 in q.js: arg replaced with 0
Mutant 1091 in q.js: reject replaced with resolve
Mutant 1092 in q.js: reject replaced with Q.reject
Mutant 1093 in q.js: exception replaced with exception.message
Mutant 1094 in q.js: exception replaced with exception.stack
Mutant 1095 in q.js: exception replaced with exception.name
Mutant 1096 in q.js: result.done replaced with result.value
Mutant 1097 in q.js: result.done replaced with result.value === true
Mutant 1098 in q.js: result.done replaced with result.value !== false
Mutant 1099 in q.js: result.value replaced with result.value + 1
Mutant 1100 in q.js: result.value replaced with result.value * 2
Mutant 1101 in q.js: result.value replaced with result.value - 1
Mutant 1102 in q.js: when(result.value, callback, errback) replaced with when(result.value, errback, callback)
Mutant 1103 in q.js: when(result.value, callback, errback) replaced with when(result.value, callback, callback)
Mutant 1104 in q.js: when(result.value, callback, errback) replaced with when(result.value, errback, errback)
Mutant 1105 in q.js: result.value replaced with result.value + 1
Mutant 1106 in q.js: result.value replaced with result.value * 2
Mutant 1107 in q.js: result.value replaced with result.value - 1
Mutant 1108 in q.js: callback replaced with reject
Mutant 1109 in q.js: callback replaced with Q.reject
Mutant 1110 in q.js: errback replaced with reject
Mutant 1111 in q.js: errback replaced with resolve
Mutant 1112 in q.js: arg replaced with arg + 1
Mutant 1113 in q.js: arg replaced with arg * 2
Mutant 1114 in q.js: arg replaced with arg - 1
Mutant 1115 in q.js: isStopIteration(exception) replaced with exception instanceof StopIteration
Mutant 1116 in q.js: isStopIteration(exception) replaced with exception.name === "StopIteration"
Mutant 1117 in q.js: isStopIteration(exception) replaced with exception.constructor === StopIteration
Mutant 1118 in q.js: isStopIteration replaced with isStopIteration = false
Mutant 1119 in q.js: isStopIteration replaced with isStopIteration = true
Mutant 1120 in q.js: isStopIteration replaced with isStopIteration = !isStopIteration
Mutant 1121 in q.js: exception replaced with exception.value
Mutant 1122 in q.js: exception replaced with exception.message
Mutant 1123 in q.js: exception.value replaced with exception
Mutant 1124 in q.js: exception.value replaced with exception.message
Mutant 1125 in q.js: exception.value replaced with exception.stack
Mutant 1126 in q.js: reject replaced with resolve
Mutant 1127 in q.js: exception replaced with null
Mutant 1128 in q.js: exception replaced with undefined
Mutant 1129 in q.js: exception replaced with "error"
Mutant 1130 in q.js: when(result, callback, errback) replaced with when(result, errback, callback)
Mutant 1131 in q.js: when(result, callback, errback) replaced with when(result, callback, errback, null)
Mutant 1132 in q.js: when(result, callback, errback) replaced with when(result, callback, errback, undefined)
Mutant 1133 in q.js: when replaced with Q.reject
Mutant 1134 in q.js: when replaced with Q.resolve
Mutant 1135 in q.js: when replaced with Q.defer
Mutant 1136 in q.js: result replaced with result.value
Mutant 1137 in q.js: result replaced with result.then(function (value) {
  return value;
})
Mutant 1138 in q.js: result replaced with result.catch(function (error) {
  throw error;
})
Mutant 1139 in q.js: callback replaced with errback
Mutant 1140 in q.js: callback replaced with reject
Mutant 1141 in q.js: callback replaced with resolve
Mutant 1142 in q.js: errback replaced with reject
Mutant 1143 in q.js: errback replaced with resolve
Mutant 1144 in q.js: makeGenerator.apply(this, arguments) replaced with makeGenerator.apply(null)
Mutant 1145 in q.js: makeGenerator.apply(this, arguments) replaced with makeGenerator.apply(undefined)
Mutant 1146 in q.js: makeGenerator.apply(this, arguments) replaced with makeGenerator.apply({})
Mutant 1147 in q.js: makeGenerator.apply replaced with makeGenerator.call
Mutant 1148 in q.js: makeGenerator.apply replaced with makeGenerator.bind
Mutant 1149 in q.js: this replaced with null
Mutant 1150 in q.js: this replaced with undefined
Mutant 1151 in q.js: this replaced with {}
Mutant 1152 in q.js: arguments replaced with null
Mutant 1153 in q.js: arguments replaced with undefined
Mutant 1154 in q.js: arguments replaced with []
Mutant 1155 in q.js: continuer.bind(continuer, "next") replaced with continuer.bind(continuer, "throw")
Mutant 1156 in q.js: continuer.bind(continuer, "next") replaced with continuer.bind(continuer, "return")
Mutant 1157 in q.js: continuer.bind replaced with continuer.call
Mutant 1158 in q.js: continuer.bind replaced with continuer.apply
Mutant 1159 in q.js: continuer replaced with continuer.bind(continuer, "throw")
Mutant 1160 in q.js: continuer replaced with continuer.bind(null, "throw")
Mutant 1161 in q.js: continuer replaced with continuer.bind(undefined, "throw")
Mutant 1162 in q.js: "next" replaced with "throw"
Mutant 1163 in q.js: "next" replaced with "return"
Mutant 1164 in q.js: continuer.bind(continuer, "throw") replaced with continuer.bind(continuer.bind(continuer, "throw"))
Mutant 1165 in q.js: continuer.bind(continuer, "throw") replaced with continuer.bind(continuer.bind(continuer, "throw", "error"))
Mutant 1166 in q.js: continuer.bind(continuer, "throw") replaced with continuer.bind(continuer.bind(continuer, "throw", new Error("error")))
Mutant 1167 in q.js: continuer replaced with continuer.bind(null, "throw")
Mutant 1168 in q.js: continuer replaced with continuer.bind(undefined, "throw")
Mutant 1169 in q.js: continuer replaced with continuer.bind(void 0, "throw")
Mutant 1170 in q.js: "throw" replaced with "send"
Mutant 1171 in q.js: "throw" replaced with "next"
Mutant 1172 in q.js: "throw" replaced with "return"
Mutant 1173 in q.js: callback replaced with errback
Mutant 1174 in q.js: callback replaced with reject
Mutant 1175 in q.js: Q.done replaced with Q.fail
Mutant 1176 in q.js: Q.done replaced with Q.reject
Mutant 1177 in q.js: Q.done replaced with Q.resolve
Mutant 1178 in q.js: Q.async(makeGenerator)() replaced with Q.async(function* () {})
Mutant 1179 in q.js: Q.async(makeGenerator)() replaced with Q.async(function () {})
Mutant 1180 in q.js: makeGenerator replaced with makeGenerator.bind(this)
Mutant 1181 in q.js: makeGenerator replaced with makeGenerator.call(this)
Mutant 1182 in q.js: makeGenerator replaced with makeGenerator.apply(this)
Mutant 1183 in q.js: all replaced with none
Mutant 1184 in q.js: all replaced with any
Mutant 1185 in q.js: all replaced with some
Mutant 1186 in q.js: arguments replaced with null
Mutant 1187 in q.js: arguments replaced with undefined
Mutant 1188 in q.js: arguments replaced with []
Mutant 1189 in q.js: callback.apply(self, args) replaced with callback.apply(self, args[0])
Mutant 1190 in q.js: callback.apply(self, args) replaced with callback.apply(args[0], self)
Mutant 1191 in q.js: callback.apply(self, args) replaced with callback.apply(args[0], args[1])
Mutant 1192 in q.js: callback.apply replaced with callback.call
Mutant 1193 in q.js: callback.apply replaced with callback.bind
Mutant 1194 in q.js: self replaced with null
Mutant 1195 in q.js: self replaced with undefined
Mutant 1196 in q.js: self replaced with {}
Mutant 1197 in q.js: args replaced with args[0]
Mutant 1198 in q.js: args replaced with args.slice(1)
Mutant 1199 in q.js: args replaced with args.concat(args[0])
Mutant 1200 in q.js: Q(object).dispatch(op, args) replaced with Q(object).dispatch(op, args.slice(1))
Mutant 1201 in q.js: Q(object).dispatch(op, args) replaced with Q(object).dispatch(op, args.concat(args))
Mutant 1202 in q.js: Q(object).dispatch(op, args) replaced with Q(object).dispatch(op, args.reverse())
Mutant 1203 in q.js: Q replaced with Q.reject
Mutant 1204 in q.js: Q replaced with Q.resolve
Mutant 1205 in q.js: Q replaced with Q.defer
Mutant 1206 in q.js: object replaced with null
Mutant 1207 in q.js: object replaced with undefined
Mutant 1208 in q.js: object replaced with {}
Mutant 1209 in q.js: op replaced with op + 1
Mutant 1210 in q.js: op replaced with op - 1
Mutant 1211 in q.js: op replaced with op * 2
Mutant 1212 in q.js: args replaced with null
Mutant 1213 in q.js: args replaced with undefined
Mutant 1214 in q.js: args replaced with []
Mutant 1215 in q.js: defer replaced with deferred.reject
Mutant 1216 in q.js: self.promiseDispatch(deferred.resolve, op, args) replaced with self.promiseDispatch(deferred.reject, op, args)
Mutant 1217 in q.js: self.promiseDispatch(deferred.resolve, op, args) replaced with self.promiseDispatch(deferred.resolve, "foo", args)
Mutant 1218 in q.js: self.promiseDispatch(deferred.resolve, op, args) replaced with self.promiseDispatch(deferred.resolve, op, [])
Mutant 1219 in q.js: self.promiseDispatch replaced with deferred.reject
Mutant 1220 in q.js: self.promiseDispatch replaced with deferred.resolve
Mutant 1221 in q.js: self.promiseDispatch replaced with deferred.notify
Mutant 1222 in q.js: deferred.resolve replaced with deferred.reject
Mutant 1223 in q.js: deferred.resolve replaced with deferred.notify
Mutant 1224 in q.js: deferred.resolve replaced with deferred.cancel
Mutant 1225 in q.js: op replaced with op + 1
Mutant 1226 in q.js: op replaced with op - 1
Mutant 1227 in q.js: op replaced with op * 2
Mutant 1228 in q.js: args replaced with null
Mutant 1229 in q.js: args replaced with undefined
Mutant 1230 in q.js: args replaced with []
Mutant 1231 in q.js: Q(object).dispatch("get", [key]) replaced with Q(object).dispatch("set", [key])
Mutant 1232 in q.js: Q(object).dispatch("get", [key]) replaced with Q(object).dispatch("post", [key])
Mutant 1233 in q.js: Q replaced with Q.reject
Mutant 1234 in q.js: Q replaced with Q.defer
Mutant 1235 in q.js: Q replaced with Q.async
Mutant 1236 in q.js: object replaced with null
Mutant 1237 in q.js: object replaced with undefined
Mutant 1238 in q.js: object replaced with "foo"
Mutant 1239 in q.js: "get" replaced with "set"
Mutant 1240 in q.js: "get" replaced with "post"
Mutant 1241 in q.js: [key] replaced with [key + 1]
Mutant 1242 in q.js: [key] replaced with [key - 1]
Mutant 1243 in q.js: [key] replaced with ["key"]
Mutant 1244 in q.js: this.dispatch("get", [key]) replaced with this.dispatch("set", [key])
Mutant 1245 in q.js: this.dispatch("get", [key]) replaced with this.dispatch("post", [key])
Mutant 1246 in q.js: "get" replaced with "set"
Mutant 1247 in q.js: "get" replaced with "post"
Mutant 1248 in q.js: [key] replaced with [key + 1]
Mutant 1249 in q.js: [key] replaced with [key - 1]
Mutant 1250 in q.js: [key] replaced with ["key"]
Mutant 1251 in q.js: Q(object).dispatch("set", [key, value]) replaced with Q(object).dispatch("set", [value, key])
Mutant 1252 in q.js: Q(object).dispatch("set", [key, value]) replaced with Q(object).dispatch("set", [key, value + 1])
Mutant 1253 in q.js: Q(object).dispatch("set", [key, value]) replaced with Q(object).dispatch("set", [key, value * 2])
Mutant 1254 in q.js: Q replaced with Q.reject
Mutant 1255 in q.js: Q replaced with Q.defer
Mutant 1256 in q.js: Q replaced with Q.all
Mutant 1257 in q.js: object replaced with null
Mutant 1258 in q.js: object replaced with undefined
Mutant 1259 in q.js: object replaced with Q(object).then(function () {
  return null;
})
Mutant 1260 in q.js: "set" replaced with "get"
Mutant 1261 in q.js: "set" replaced with "post"
Mutant 1262 in q.js: [key, value] replaced with [value, key]
Mutant 1263 in q.js: [key, value] replaced with [key, value + 1]
Mutant 1264 in q.js: [key, value] replaced with [key, value * 2]
Mutant 1265 in q.js: this.dispatch("set", [key, value]) replaced with this.dispatch("set", [value, key])
Mutant 1266 in q.js: this.dispatch("set", [key, value]) replaced with this.dispatch("set", [key, value + 1])
Mutant 1267 in q.js: this.dispatch("set", [key, value]) replaced with this.dispatch("set", [key, value * 2])
Mutant 1268 in q.js: "set" replaced with "setValue"
Mutant 1269 in q.js: "set" replaced with "get"
Mutant 1270 in q.js: [key, value] replaced with [value, key]
Mutant 1271 in q.js: [key, value] replaced with [key, value, null]
Mutant 1272 in q.js: [key, value] replaced with [key, value, key]
Mutant 1273 in q.js: Q(object).dispatch("delete", [key]) replaced with Q(object).dispatch("set", [key, undefined])
Mutant 1274 in q.js: Q(object).dispatch("delete", [key]) replaced with Q(object).dispatch("set", [key, null])
Mutant 1275 in q.js: Q(object).dispatch("delete", [key]) replaced with Q(object).dispatch("set", [key, ""])
Mutant 1276 in q.js: Q replaced with Q.reject
Mutant 1277 in q.js: Q replaced with Q.defer
Mutant 1278 in q.js: Q replaced with Q.all
Mutant 1279 in q.js: object replaced with 0
Mutant 1280 in q.js: "delete" replaced with "set"
Mutant 1281 in q.js: "delete" replaced with "get"
Mutant 1282 in q.js: "delete" replaced with "post"
Mutant 1283 in q.js: [key] replaced with [key, value]
Mutant 1284 in q.js: [key] replaced with [key, "value"]
Mutant 1285 in q.js: [key] replaced with [key, undefined]
Mutant 1286 in q.js: this.dispatch("delete", [key]) replaced with this.dispatch("set", [key, undefined])
Mutant 1287 in q.js: this.dispatch("delete", [key]) replaced with this.dispatch("set", [key, null])
Mutant 1288 in q.js: this.dispatch("delete", [key]) replaced with this.dispatch("set", [key, ""])
Mutant 1289 in q.js: [key] replaced with [key, value]
Mutant 1290 in q.js: [key] replaced with [key, "value"]
Mutant 1291 in q.js: [key] replaced with [key, null]
Mutant 1292 in q.js: Q(object).dispatch("post", [name, args]) replaced with Q(object).dispatch("post", [args, name])
Mutant 1293 in q.js: Q(object).dispatch("post", [name, args]) replaced with Q(object).dispatch("post", [name, args.reverse()])
Mutant 1294 in q.js: Q(object).dispatch("post", [name, args]) replaced with Q(object).dispatch("post", [name, args.slice(1)])
Mutant 1295 in q.js: Q replaced with Q.reject
Mutant 1296 in q.js: Q replaced with Q.resolve
Mutant 1297 in q.js: Q replaced with Q.defer
Mutant 1298 in q.js: object replaced with null
Mutant 1299 in q.js: object replaced with undefined
Mutant 1300 in q.js: object replaced with {}
Mutant 1301 in q.js: "post" replaced with "get"
Mutant 1302 in q.js: "post" replaced with "set"
Mutant 1303 in q.js: [name, args] replaced with [name, args.slice(1)]
Mutant 1304 in q.js: [name, args] replaced with [name, args.concat(args)]
Mutant 1305 in q.js: [name, args] replaced with [name, args.reverse()]
Mutant 1306 in q.js: this.dispatch("post", [name, args]) replaced with this.dispatch("post", [args, name])
Mutant 1307 in q.js: this.dispatch("post", [name, args]) replaced with this.dispatch("post", [name, args.reverse()])
Mutant 1308 in q.js: this.dispatch("post", [name, args]) replaced with this.dispatch("post", [name, args.slice(1)])
Mutant 1309 in q.js: "post" replaced with "put"
Mutant 1310 in q.js: "post" replaced with "get"
Mutant 1311 in q.js: [name, args] replaced with [name, args.slice(1)]
Mutant 1312 in q.js: [name, args] replaced with [name.slice(1), args]
Mutant 1313 in q.js: [name, args] replaced with [name, args.concat(name)]
Mutant 1314 in q.js: Q(object).dispatch("post", [name, array_slice(arguments, 2)]) replaced with Q(object).dispatch("post", [name, array_slice(arguments, 1)])
Mutant 1315 in q.js: Q(object).dispatch("post", [name, array_slice(arguments, 2)]) replaced with Q(object).dispatch("post", [name, array_slice(arguments, 3)])
Mutant 1316 in q.js: Q(object).dispatch("post", [name, array_slice(arguments, 2)]) replaced with Q(object).dispatch("post", [name, array_slice(arguments, 4)])
Mutant 1317 in q.js: Q replaced with Q.reject
Mutant 1318 in q.js: Q replaced with Q.resolve
Mutant 1319 in q.js: Q replaced with Q.defer
Mutant 1320 in q.js: object replaced with null
Mutant 1321 in q.js: object replaced with undefined
Mutant 1322 in q.js: object replaced with "foo"
Mutant 1323 in q.js: "post" replaced with "put"
Mutant 1324 in q.js: "post" replaced with "get"
Mutant 1325 in q.js: "post" replaced with "resolve"
Mutant 1326 in q.js: [name, array_slice(arguments, 2)] replaced with [name, array_slice(arguments, 1)]
Mutant 1327 in q.js: [name, array_slice(arguments, 2)] replaced with [name, array_slice(arguments, 3)]
Mutant 1328 in q.js: [name, array_slice(arguments, 2)] replaced with [name, array_slice(arguments, 2, 1)]
Mutant 1329 in q.js: array_slice(arguments, 2) replaced with array_slice([], 2)
Mutant 1330 in q.js: arguments replaced with null
Mutant 1331 in q.js: arguments replaced with undefined
Mutant 1332 in q.js: arguments replaced with []
Mutant 1333 in q.js: 2 replaced with 0
Mutant 1334 in q.js: 2 replaced with -1
Mutant 1335 in q.js: this.dispatch("post", [name, array_slice(arguments, 1)]) replaced with this.dispatch("post", [name, array_slice(arguments, 2)])
Mutant 1336 in q.js: this.dispatch("post", [name, array_slice(arguments, 1)]) replaced with this.dispatch("post", [name, array_slice(arguments, 1, 2)])
Mutant 1337 in q.js: this.dispatch("post", [name, array_slice(arguments, 1)]) replaced with this.dispatch("post", [name, array_slice(arguments, 1, -1)])
Mutant 1338 in q.js: "post" replaced with "put"
Mutant 1339 in q.js: "post" replaced with "patch"
Mutant 1340 in q.js: [name, array_slice(arguments, 1)] replaced with [name, array_slice(arguments, 2)]
Mutant 1341 in q.js: [name, array_slice(arguments, 1)] replaced with [name, array_slice(arguments, 1, 2)]
Mutant 1342 in q.js: [name, array_slice(arguments, 1)] replaced with [name, array_slice(arguments, 1, -1)]
Mutant 1343 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 0)
Mutant 1344 in q.js: array_slice(arguments, 1) replaced with array_slice([1, 2, 3])
Mutant 1345 in q.js: arguments replaced with null
Mutant 1346 in q.js: arguments replaced with undefined
Mutant 1347 in q.js: arguments replaced with []
Mutant 1348 in q.js: 1 replaced with 0
Mutant 1349 in q.js: 1 replaced with arguments.length
Mutant 1350 in q.js: Q(object).dispatch("apply", [void 0, args]) replaced with Q(object).dispatch("call", [void 0, args])
Mutant 1351 in q.js: Q(object).dispatch("apply", [void 0, args]) replaced with Q(object).dispatch("apply", [void 0, [args]])
Mutant 1352 in q.js: Q(object).dispatch("apply", [void 0, args]) replaced with Q(object).dispatch("apply", [void 0, args.concat([])])
Mutant 1353 in q.js: Q replaced with Q.reject
Mutant 1354 in q.js: Q replaced with Q.resolve
Mutant 1355 in q.js: Q replaced with Q.then
Mutant 1356 in q.js: object replaced with null
Mutant 1357 in q.js: object replaced with undefined
Mutant 1358 in q.js: object replaced with function () {}
Mutant 1359 in q.js: "apply" replaced with "call"
Mutant 1360 in q.js: "apply" replaced with "bind"
Mutant 1361 in q.js: "apply" replaced with "concat"
Mutant 1362 in q.js: [void 0, args] replaced with [void 0, args, 1]
Mutant 1363 in q.js: [void 0, args] replaced with [void 0, args.slice(1)]
Mutant 1364 in q.js: [void 0, args] replaced with [void 0, args.concat([1])]
Mutant 1365 in q.js: this.dispatch("apply", [void 0, args]) replaced with this.dispatch("apply", [null, args])
Mutant 1366 in q.js: this.dispatch("apply", [void 0, args]) replaced with this.dispatch("apply", [undefined, args])
Mutant 1367 in q.js: this.dispatch("apply", [void 0, args]) replaced with this.dispatch("apply", [args])
Mutant 1368 in q.js: "apply" replaced with "call"
Mutant 1369 in q.js: "apply" replaced with "bind"
Mutant 1370 in q.js: "apply" replaced with "apply" + "call"
Mutant 1371 in q.js: [void 0, args] replaced with [void 0, args, 1]
Mutant 1372 in q.js: [void 0, args] replaced with [void 0, args, "foo"]
Mutant 1373 in q.js: [void 0, args] replaced with [void 0, args, null]
Mutant 1374 in q.js: Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]) replaced with Q(object).dispatch("apply", [void 0, array_slice(arguments, 2)])
Mutant 1375 in q.js: Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]) replaced with Q(object).dispatch("apply", [void 0, array_slice(arguments, 1, 2)])
Mutant 1376 in q.js: Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]) replaced with Q(object).dispatch("apply", [void 0, array_slice(arguments, 1, -1)])
Mutant 1377 in q.js: Q replaced with Q.reject
Mutant 1378 in q.js: Q replaced with Q.resolve
Mutant 1379 in q.js: Q replaced with Q.defer
Mutant 1380 in q.js: object replaced with null
Mutant 1381 in q.js: object replaced with undefined
Mutant 1382 in q.js: object replaced with {}
Mutant 1383 in q.js: "apply" replaced with "call"
Mutant 1384 in q.js: "apply" replaced with "bind"
Mutant 1385 in q.js: "apply" replaced with "concat"
Mutant 1386 in q.js: [void 0, array_slice(arguments, 1)] replaced with [void 0, array_slice(arguments, 2)]
Mutant 1387 in q.js: [void 0, array_slice(arguments, 1)] replaced with [void 0, array_slice(arguments, 0, 1)]
Mutant 1388 in q.js: [void 0, array_slice(arguments, 1)] replaced with [void 0, array_slice(arguments, 1, 2)]
Mutant 1389 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 0)
Mutant 1390 in q.js: array_slice(arguments, 1) replaced with array_slice([], 1)
Mutant 1391 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 1392 in q.js: arguments replaced with array_slice(arguments, 3)
Mutant 1393 in q.js: 1 replaced with 3
Mutant 1394 in q.js: 1 replaced with 4
Mutant 1395 in q.js: this.dispatch("apply", [void 0, array_slice(arguments)]) replaced with this.dispatch("apply", [this, array_slice(arguments)])
Mutant 1396 in q.js: this.dispatch("apply", [void 0, array_slice(arguments)]) replaced with this.dispatch("apply", [void 0, array_slice(arguments, 1)])
Mutant 1397 in q.js: this.dispatch("apply", [void 0, array_slice(arguments)]) replaced with this.dispatch("apply", [void 0, array_slice(arguments, 2)])
Mutant 1398 in q.js: "apply" replaced with "call"
Mutant 1399 in q.js: "apply" replaced with "bind"
Mutant 1400 in q.js: "apply" replaced with "concat"
Mutant 1401 in q.js: [void 0, array_slice(arguments)] replaced with [void 0, array_slice(arguments, 1)]
Mutant 1402 in q.js: [void 0, array_slice(arguments)] replaced with [void 0, array_slice(arguments, 2)]
Mutant 1403 in q.js: [void 0, array_slice(arguments)] replaced with [void 0, array_slice(arguments, 3)]
Mutant 1404 in q.js: object replaced with null
Mutant 1405 in q.js: object replaced with undefined
Mutant 1406 in q.js: object replaced with {}
Mutant 1407 in q.js: array_slice(arguments, 1) replaced with array_slice(args.concat(array_slice(arguments, 1)))
Mutant 1408 in q.js: array_slice(arguments, 1) replaced with array_slice(args.concat(array_slice(arguments, 2)))
Mutant 1409 in q.js: array_slice(arguments, 1) replaced with array_slice(args.concat(array_slice(arguments, 3)))
Mutant 1410 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 1411 in q.js: arguments replaced with array_slice(arguments, 2)
Mutant 1412 in q.js: arguments replaced with array_slice(arguments, 3)
Mutant 1413 in q.js: 1 replaced with 0
Mutant 1414 in q.js: 1 replaced with -1
Mutant 1415 in q.js: 1 replaced with arguments.length - 1
Mutant 1416 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 1417 in q.js: array_slice(arguments) replaced with array_slice(arguments, 2)
Mutant 1418 in q.js: array_slice(arguments) replaced with array_slice(arguments, 3)
Mutant 1419 in q.js: arguments replaced with args.slice(1)
Mutant 1420 in q.js: arguments replaced with args.slice(0, -1)
Mutant 1421 in q.js: arguments replaced with args.slice(1, -1)
Mutant 1422 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 1423 in q.js: array_slice(arguments) replaced with array_slice(arguments, 2)
Mutant 1424 in q.js: array_slice(arguments) replaced with array_slice(arguments, 3)
Mutant 1425 in q.js: arguments replaced with null
Mutant 1426 in q.js: arguments replaced with undefined
Mutant 1427 in q.js: arguments replaced with []
Mutant 1428 in q.js: Q(object).dispatch("keys", []) replaced with Q(object).dispatch("values", [])
Mutant 1429 in q.js: Q(object).dispatch("keys", []) replaced with Q(object).dispatch("keys", [1])
Mutant 1430 in q.js: Q(object).dispatch("keys", []) replaced with Q(object).dispatch("keys", ["foo"])
Mutant 1431 in q.js: Q replaced with Q.reject
Mutant 1432 in q.js: Q replaced with Q.resolve
Mutant 1433 in q.js: Q replaced with Q.defer
Mutant 1434 in q.js: object replaced with null
Mutant 1435 in q.js: object replaced with undefined
Mutant 1436 in q.js: object replaced with {}
Mutant 1437 in q.js: "keys" replaced with "values"
Mutant 1438 in q.js: "keys" replaced with "length"
Mutant 1439 in q.js: "keys" replaced with "toString"
Mutant 1440 in q.js: [] replaced with [1]
Mutant 1441 in q.js: [] replaced with [undefined]
Mutant 1442 in q.js: [] replaced with [null]
Mutant 1443 in q.js: this.dispatch("keys", []) replaced with this.dispatch("values", [])
Mutant 1444 in q.js: this.dispatch("keys", []) replaced with this.dispatch("length", [])
Mutant 1445 in q.js: this.dispatch("keys", []) replaced with this.dispatch("toString", [])
Mutant 1446 in q.js: "keys" replaced with "values"
Mutant 1447 in q.js: "keys" replaced with "length"
Mutant 1448 in q.js: "keys" replaced with "toString"
Mutant 1449 in q.js: [] replaced with [1]
Mutant 1450 in q.js: [] replaced with [undefined]
Mutant 1451 in q.js: [] replaced with [null]
Mutant 1452 in q.js: defer replaced with deferred.reject
Mutant 1453 in q.js: defer replaced with deferred.resolve
Mutant 1454 in q.js: defer replaced with Q.reject
Mutant 1455 in q.js: isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled" replaced with promise.inspect().state === "rejected"
Mutant 1456 in q.js: isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled" replaced with promise.inspect().state === "pending"
Mutant 1457 in q.js: isPromise(promise) && (snapshot = promise.inspect()).state === "fulfilled" replaced with promise.inspect().state === "fulfilled" && promise.inspect().value === undefined
Mutant 1458 in q.js: promise replaced with promise.then(function () {
  return null;
})
Mutant 1459 in q.js: promise replaced with promise.then(function () {
  throw new Error("error");
})
Mutant 1460 in q.js: promise replaced with promise.then(function () {
  return Q.reject(new Error("error"));
})
Mutant 1461 in q.js: promise.inspect replaced with promise.inspect.state
Mutant 1462 in q.js: promise.inspect replaced with promise.inspect.value
Mutant 1463 in q.js: promise.inspect replaced with promise.inspect.reason
Mutant 1464 in q.js: --pendingCount === 0 replaced with pendingCount < 0
Mutant 1465 in q.js: --pendingCount === 0 replaced with pendingCount === promises.length
Mutant 1466 in q.js: --pendingCount === 0 replaced with pendingCount === 0 && promises.length > 0
Mutant 1467 in q.js: deferred.resolve replaced with deferred.reject
Mutant 1468 in q.js: deferred.resolve replaced with deferred.notify
Mutant 1469 in q.js: promises replaced with promises.slice(1)
Mutant 1470 in q.js: promises replaced with promises.concat([])
Mutant 1471 in q.js: promises replaced with promises.filter(function () {
  return true;
})
Mutant 1472 in q.js: deferred.notify replaced with deferred.reject
Mutant 1473 in q.js: deferred.notify replaced with deferred.resolve
Mutant 1474 in q.js: deferred.notify replaced with deferred.progress
Mutant 1475 in q.js: {
  index: index,
  value: progress
} replaced with {
  index: index,
  value: progress + 1
}
Mutant 1476 in q.js: {
  index: index,
  value: progress
} replaced with {
  index: index,
  value: progress - 1
}
Mutant 1477 in q.js: {
  index: index,
  value: progress
} replaced with {
  index: index,
  value: progress * 2
}
Mutant 1478 in q.js: pendingCount === 0 replaced with pendingCount < 0
Mutant 1479 in q.js: pendingCount === 0 replaced with pendingCount === promises.length
Mutant 1480 in q.js: pendingCount === 0 replaced with pendingCount > 0
Mutant 1481 in q.js: deferred.resolve replaced with deferred.reject
Mutant 1482 in q.js: deferred.resolve replaced with deferred.notify
Mutant 1483 in q.js: deferred.resolve replaced with deferred.cancel
Mutant 1484 in q.js: promises replaced with promises.slice(1)
Mutant 1485 in q.js: promises replaced with promises.concat([Q.reject()])
Mutant 1486 in q.js: promises replaced with promises.map(function (promise) {
  return Q.reject(promise.inspect().value);
})
Mutant 1487 in q.js: all replaced with any
Mutant 1488 in q.js: all replaced with none
Mutant 1489 in q.js: all replaced with race
Mutant 1490 in q.js: this replaced with null
Mutant 1491 in q.js: this replaced with undefined
Mutant 1492 in q.js: this replaced with []
Mutant 1493 in q.js: promises.length === 0 replaced with promises.length < 0
Mutant 1494 in q.js: promises.length === 0 replaced with promises.length > 0
Mutant 1495 in q.js: promises.length === 0 replaced with promises.length === 1
Mutant 1496 in q.js: Q.resolve replaced with Q.reject
Mutant 1497 in q.js: Q.resolve replaced with Q.defer
Mutant 1498 in q.js: Q.resolve replaced with Q.when
Mutant 1499 in q.js: when(promise, onFulfilled, onRejected, onProgress) replaced with when(promise.then(onFulfilled, onRejected, onProgress))
Mutant 1500 in q.js: when(promise, onFulfilled, onRejected, onProgress) replaced with when(promise.then(onFulfilled, onRejected).then(onProgress))
Mutant 1501 in q.js: when(promise, onFulfilled, onRejected, onProgress) replaced with when(promise.then(onFulfilled, onRejected).then(onProgress).catch(onRejected))
Mutant 1502 in q.js: when replaced with when.reject
Mutant 1503 in q.js: when replaced with when.resolve
Mutant 1504 in q.js: when replaced with when.then
Mutant 1505 in q.js: promise replaced with promise.then(onFulfilled, onRejected)
Mutant 1506 in q.js: promise replaced with promise.then(onRejected, onFulfilled)
Mutant 1507 in q.js: promise replaced with promise.then(onFulfilled, onRejected).then(onFulfilled, onRejected)
Mutant 1508 in q.js: onFulfilled replaced with onRejected
Mutant 1509 in q.js: onFulfilled replaced with onProgress
Mutant 1510 in q.js: onFulfilled replaced with noop
Mutant 1511 in q.js: onRejected replaced with onFulfilled
Mutant 1512 in q.js: onRejected replaced with onProgress
Mutant 1513 in q.js: onProgress replaced with onRejected
Mutant 1514 in q.js: onProgress replaced with onFulfilled
Mutant 1515 in q.js: onProgress replaced with noop
Mutant 1516 in q.js: deferred.resolve replaced with deferred.reject
Mutant 1517 in q.js: deferred.resolve replaced with deferred.notify
Mutant 1518 in q.js: result replaced with promise
Mutant 1519 in q.js: result replaced with index
Mutant 1520 in q.js: result replaced with promise.value
Mutant 1521 in q.js: pendingCount === 0 replaced with pendingCount > 0
Mutant 1522 in q.js: pendingCount === 0 replaced with pendingCount < 0
Mutant 1523 in q.js: pendingCount === 0 replaced with pendingCount === 1
Mutant 1524 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1525 in q.js: deferred.reject replaced with deferred.notify
Mutant 1526 in q.js: deferred.reject replaced with deferred.inspect
Mutant 1527 in q.js: any replaced with all
Mutant 1528 in q.js: any replaced with none
Mutant 1529 in q.js: any replaced with some
Mutant 1530 in q.js: this replaced with null
Mutant 1531 in q.js: this replaced with undefined
Mutant 1532 in q.js: this replaced with Promise.reject()
Mutant 1533 in q.js: deprecate(allResolved, "allResolved", "allSettled") replaced with deprecate(allSettled, "allSettled", "allResolved")
Mutant 1534 in q.js: deprecate(allResolved, "allResolved", "allSettled") replaced with deprecate(allResolved, "allSettled", "allResolved")
Mutant 1535 in q.js: allResolved replaced with allRejected
Mutant 1536 in q.js: allResolved replaced with anyResolved
Mutant 1537 in q.js: allResolved replaced with allSettled
Mutant 1538 in q.js: "allResolved" replaced with "allSettled"
Mutant 1539 in q.js: "allResolved" replaced with "any"
Mutant 1540 in q.js: "allResolved" replaced with "all"
Mutant 1541 in q.js: "allSettled" replaced with "allResolved"
Mutant 1542 in q.js: "allSettled" replaced with "any"
Mutant 1543 in q.js: "allSettled" replaced with "all"
Mutant 1544 in q.js: array_map(promises, Q) replaced with array_map(promises, Q.reject)
Mutant 1545 in q.js: array_map(promises, Q) replaced with array_map(promises, Q.resolve)
Mutant 1546 in q.js: array_map(promises, Q) replaced with array_map(promises, Q.defer)
Mutant 1547 in q.js: array_map replaced with array_filter
Mutant 1548 in q.js: array_map replaced with array_reduce
Mutant 1549 in q.js: array_map replaced with array_forEach
Mutant 1550 in q.js: promises replaced with promises.slice(0, promises.length - 1)
Mutant 1551 in q.js: promises replaced with promises.concat(Q.reject())
Mutant 1552 in q.js: promises replaced with promises.map(function (promise) {
  return Q.reject(promise);
})
Mutant 1553 in q.js: Q replaced with Q.reject
Mutant 1554 in q.js: Q replaced with Q.resolve
Mutant 1555 in q.js: Q replaced with Q.defer
Mutant 1556 in q.js: when(promise, noop, noop) replaced with when(promise.then(noop, noop))
Mutant 1557 in q.js: when(promise, noop, noop) replaced with when(promise.then(noop, noop).then(noop, noop))
Mutant 1558 in q.js: allResolved replaced with allSettled
Mutant 1559 in q.js: allResolved replaced with any
Mutant 1560 in q.js: this replaced with null
Mutant 1561 in q.js: this replaced with undefined
Mutant 1562 in q.js: this replaced with []
Mutant 1563 in q.js: promises replaced with promises.reverse()
Mutant 1564 in q.js: promises replaced with promises.slice(1)
Mutant 1565 in q.js: promises replaced with promises.concat(Q.reject())
Mutant 1566 in q.js: promise replaced with promise.then(function (result) {
  return result + 1;
})
Mutant 1567 in q.js: promise replaced with promise.then(function (result) {
  return result * 2;
})
Mutant 1568 in q.js: promise replaced with promise.then(function (result) {
  return result - 1;
})
Mutant 1569 in q.js: promise.then(regardless, regardless) replaced with promise.then(onRejected, onRejected)
Mutant 1570 in q.js: promise.then(regardless, regardless) replaced with promise.then(onFulfilled, onRejected)
Mutant 1571 in q.js: regardless replaced with promise.inspect()
Mutant 1572 in q.js: regardless replaced with promise.then(noop, noop)
Mutant 1573 in q.js: regardless replaced with promise.then(noop, noop).then(noop, noop)
Mutant 1574 in q.js: regardless replaced with promise.reject()
Mutant 1575 in q.js: regardless replaced with promise.resolve()
Mutant 1576 in q.js: regardless replaced with promise.then(function () {
  throw new Error("Test error");
})
Mutant 1577 in q.js: Q(object).then(void 0, rejected) replaced with Q(object).then(null, rejected)
Mutant 1578 in q.js: Q(object).then(void 0, rejected) replaced with Q(object).then(undefined, rejected)
Mutant 1579 in q.js: Q(object).then(void 0, rejected) replaced with Q(object).then(rejected, null)
Mutant 1580 in q.js: object replaced with 0
Mutant 1581 in q.js: void 0 replaced with null
Mutant 1582 in q.js: void 0 replaced with undefined
Mutant 1583 in q.js: void 0 replaced with function () {}
Mutant 1584 in q.js: rejected replaced with promise.reject
Mutant 1585 in q.js: rejected replaced with Q.reject
Mutant 1586 in q.js: this.then(void 0, rejected) replaced with this.then(null, rejected)
Mutant 1587 in q.js: this.then(void 0, rejected) replaced with this.then(undefined, rejected)
Mutant 1588 in q.js: this.then(void 0, rejected) replaced with this.then(rejected, null)
Mutant 1589 in q.js: void 0 replaced with null
Mutant 1590 in q.js: void 0 replaced with undefined
Mutant 1591 in q.js: rejected replaced with resolved
Mutant 1592 in q.js: rejected replaced with deferred.reject(rejection)
Mutant 1593 in q.js: rejected replaced with deferred.notify(rejection)
Mutant 1594 in q.js: Q(object).then(void 0, void 0, progressed) replaced with Q(object).then(null, null, progressed)
Mutant 1595 in q.js: Q(object).then(void 0, void 0, progressed) replaced with Q(object).then(undefined, undefined, progressed)
Mutant 1596 in q.js: object replaced with 0
Mutant 1597 in q.js: void 0 replaced with null
Mutant 1598 in q.js: void 0 replaced with undefined
Mutant 1599 in q.js: void 0 replaced with function () {}
Mutant 1600 in q.js: void 0 replaced with null
Mutant 1601 in q.js: void 0 replaced with undefined
Mutant 1602 in q.js: void 0 replaced with function () {}
Mutant 1603 in q.js: progressed replaced with promise.then(void 0, progressed)
Mutant 1604 in q.js: progressed replaced with promise.then(progressed, void 0)
Mutant 1605 in q.js: progressed replaced with promise.then(void 0, void 0)
Mutant 1606 in q.js: this.then(void 0, void 0, progressed) replaced with this.then(null, null, progressed)
Mutant 1607 in q.js: this.then(void 0, void 0, progressed) replaced with this.then(undefined, undefined, progressed)
Mutant 1608 in q.js: this.then(void 0, void 0, progressed) replaced with this.then(void 0, void 0, progressed.bind(this))
Mutant 1609 in q.js: void 0 replaced with null
Mutant 1610 in q.js: void 0 replaced with undefined
Mutant 1611 in q.js: void 0 replaced with function () {}
Mutant 1612 in q.js: void 0 replaced with null
Mutant 1613 in q.js: void 0 replaced with undefined
Mutant 1614 in q.js: void 0 replaced with function () {}
Mutant 1615 in q.js: Q replaced with Q.reject
Mutant 1616 in q.js: Q replaced with Q.resolve
Mutant 1617 in q.js: Q replaced with Q.defer
Mutant 1618 in q.js: object replaced with null
Mutant 1619 in q.js: object replaced with undefined
Mutant 1620 in q.js: callback replaced with callback.fcall()
Mutant 1621 in q.js: callback replaced with callback.fcall().then(function () {
  return Q.reject(new Error("Test error"));
})
Mutant 1622 in q.js: !callback || typeof callback.apply !== "function" replaced with callback && typeof callback.apply === "function"
Mutant 1623 in q.js: !callback || typeof callback.apply !== "function" replaced with callback && typeof callback.apply !== "undefined"
Mutant 1624 in q.js: !callback || typeof callback.apply !== "function" replaced with callback && typeof callback.apply !== "object"
Mutant 1625 in q.js: Q replaced with Q.reject
Mutant 1626 in q.js: Q replaced with Q.resolve
Mutant 1627 in q.js: Q replaced with Q.defer
Mutant 1628 in q.js: callback replaced with callback.fcall()
Mutant 1629 in q.js: callback replaced with callback.fcall(null)
Mutant 1630 in q.js: callback replaced with callback.fcall(this)
Mutant 1631 in q.js: Q(object).done(fulfilled, rejected, progress) replaced with Q(object).done(rejected, fulfilled, progress)
Mutant 1632 in q.js: Q(object).done(fulfilled, rejected, progress) replaced with Q(object).done(fulfilled, rejected, progress + 1)
Mutant 1633 in q.js: Q(object).done(fulfilled, rejected, progress) replaced with Q(object).done(fulfilled, rejected, progress * 2)
Mutant 1634 in q.js: object replaced with null
Mutant 1635 in q.js: object replaced with undefined
Mutant 1636 in q.js: object replaced with 0
Mutant 1637 in q.js: fulfilled replaced with rejected
Mutant 1638 in q.js: fulfilled replaced with progressed
Mutant 1639 in q.js: fulfilled replaced with void 0
Mutant 1640 in q.js: rejected replaced with fulfilled
Mutant 1641 in q.js: rejected replaced with progressed
Mutant 1642 in q.js: progress replaced with null
Mutant 1643 in q.js: progress replaced with undefined
Mutant 1644 in q.js: progress replaced with function () {}
Mutant 1645 in q.js: makeStackTraceLong(error, promise) replaced with makeStackTraceLong(error, promise.then())
Mutant 1646 in q.js: makeStackTraceLong(error, promise) replaced with makeStackTraceLong(error, promise.catch())
Mutant 1647 in q.js: makeStackTraceLong(error, promise) replaced with makeStackTraceLong(error, promise.finally())
Mutant 1648 in q.js: this.then(fulfilled, rejected, progress) replaced with this.then(fulfilled, rejected, null)
Mutant 1649 in q.js: this.then(fulfilled, rejected, progress) replaced with this.then(fulfilled, rejected, undefined)
Mutant 1650 in q.js: fulfilled replaced with rejected
Mutant 1651 in q.js: fulfilled replaced with progressed
Mutant 1652 in q.js: fulfilled replaced with void 0
Mutant 1653 in q.js: rejected replaced with resolved
Mutant 1654 in q.js: rejected replaced with undefined
Mutant 1655 in q.js: progress replaced with null
Mutant 1656 in q.js: progress replaced with undefined
Mutant 1657 in q.js: progress replaced with false
Mutant 1658 in q.js: onUnhandledError replaced with onUnhandledError.bind(null)
Mutant 1659 in q.js: onUnhandledError replaced with onUnhandledError.call(null)
Mutant 1660 in q.js: onUnhandledError replaced with onUnhandledError.apply(null)
Mutant 1661 in q.js: promise.then(void 0, onUnhandledError) replaced with promise.then(null, onUnhandledError)
Mutant 1662 in q.js: promise.then(void 0, onUnhandledError) replaced with promise.then(undefined, onUnhandledError)
Mutant 1663 in q.js: promise.then(void 0, onUnhandledError) replaced with promise.then(onUnhandledError, null)
Mutant 1664 in q.js: void 0 replaced with null
Mutant 1665 in q.js: void 0 replaced with undefined
Mutant 1666 in q.js: void 0 replaced with 0
Mutant 1667 in q.js: onUnhandledError replaced with onUnhandledError()
Mutant 1668 in q.js: onUnhandledError replaced with null
Mutant 1669 in q.js: onUnhandledError replaced with function () {}
Mutant 1670 in q.js: Q(object).timeout(ms, error) replaced with Q(object).timeout(ms, null)
Mutant 1671 in q.js: Q(object).timeout(ms, error) replaced with Q(object).timeout(ms, new Error())
Mutant 1672 in q.js: Q(object).timeout(ms, error) replaced with Q(object).timeout(ms, "error")
Mutant 1673 in q.js: Q replaced with Q.reject
Mutant 1674 in q.js: Q replaced with Q.resolve
Mutant 1675 in q.js: Q replaced with Q.defer
Mutant 1676 in q.js: object replaced with undefined
Mutant 1677 in q.js: object replaced with Q.reject(new Error("error"))
Mutant 1678 in q.js: ms replaced with 0
Mutant 1679 in q.js: ms replaced with -1
Mutant 1680 in q.js: ms replaced with null
Mutant 1681 in q.js: error replaced with null
Mutant 1682 in q.js: error replaced with new Error()
Mutant 1683 in q.js: error replaced with undefined
Mutant 1684 in q.js: !error || "string" === typeof error replaced with error && "string" === typeof error
Mutant 1685 in q.js: !error || "string" === typeof error replaced with error || "string" !== typeof error
Mutant 1686 in q.js: !error || "string" === typeof error replaced with error && "string" !== typeof error
Mutant 1687 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1688 in q.js: deferred.reject replaced with deferred.notify
Mutant 1689 in q.js: error replaced with null
Mutant 1690 in q.js: error replaced with undefined
Mutant 1691 in q.js: error replaced with "error"
Mutant 1692 in q.js: clearTimeout replaced with clearInterval
Mutant 1693 in q.js: timeoutId replaced with null
Mutant 1694 in q.js: timeoutId replaced with undefined
Mutant 1695 in q.js: timeoutId replaced with 0
Mutant 1696 in q.js: deferred.resolve replaced with deferred.reject
Mutant 1697 in q.js: deferred.resolve replaced with deferred.notify
Mutant 1698 in q.js: value replaced with null
Mutant 1699 in q.js: value replaced with undefined
Mutant 1700 in q.js: clearTimeout replaced with clearInterval
Mutant 1701 in q.js: timeoutId replaced with null
Mutant 1702 in q.js: timeoutId replaced with undefined
Mutant 1703 in q.js: timeoutId replaced with 0
Mutant 1704 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1705 in q.js: deferred.reject replaced with deferred.notify
Mutant 1706 in q.js: timeout === void 0 replaced with timeout !== void 0
Mutant 1707 in q.js: timeout === void 0 replaced with timeout === null
Mutant 1708 in q.js: timeout === void 0 replaced with timeout === 0
Mutant 1709 in q.js: Q replaced with Q.reject
Mutant 1710 in q.js: Q replaced with Q.resolve
Mutant 1711 in q.js: Q replaced with Q.defer
Mutant 1712 in q.js: object replaced with null
Mutant 1713 in q.js: object replaced with undefined
Mutant 1714 in q.js: object replaced with {}
Mutant 1715 in q.js: timeout replaced with timeout + 1
Mutant 1716 in q.js: timeout replaced with timeout - 1
Mutant 1717 in q.js: timeout replaced with timeout * 2
Mutant 1718 in q.js: deferred.resolve replaced with deferred.reject
Mutant 1719 in q.js: deferred.resolve replaced with deferred.notify
Mutant 1720 in q.js: value replaced with null
Mutant 1721 in q.js: value replaced with undefined
Mutant 1722 in q.js: value replaced with "foo"
Mutant 1723 in q.js: Q replaced with Q.reject
Mutant 1724 in q.js: Q replaced with Q.resolve
Mutant 1725 in q.js: Q replaced with Q.defer
Mutant 1726 in q.js: callback replaced with null
Mutant 1727 in q.js: callback replaced with undefined
Mutant 1728 in q.js: callback replaced with function () {}
Mutant 1729 in q.js: args replaced with null
Mutant 1730 in q.js: args replaced with undefined
Mutant 1731 in q.js: args replaced with []
Mutant 1732 in q.js: args replaced with args.slice(1)
Mutant 1733 in q.js: args replaced with args.concat([1, 2, 3])
Mutant 1734 in q.js: args replaced with args.filter(function (x) {
  return x !== 1;
})
Mutant 1735 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 1736 in q.js: nodeArgs.push replaced with nodeArgs.pop
Mutant 1737 in q.js: nodeArgs.push replaced with nodeArgs.shift
Mutant 1738 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 1739 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(function () {})
Mutant 1740 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(function (error) {
  throw error;
})
Mutant 1741 in q.js: nodeArgs replaced with nodeArgs.slice(1)
Mutant 1742 in q.js: nodeArgs replaced with nodeArgs.concat([])
Mutant 1743 in q.js: nodeArgs replaced with nodeArgs.filter(function () {
  return true;
})
Mutant 1744 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1745 in q.js: deferred.reject replaced with deferred.notify
Mutant 1746 in q.js: deferred.reject replaced with deferred.reject("new error")
Mutant 1747 in q.js: array_slice(arguments, 1) replaced with array_slice(array_slice(arguments, 2))
Mutant 1748 in q.js: array_slice(arguments, 1) replaced with array_slice(array_slice(arguments, 3))
Mutant 1749 in q.js: array_slice(arguments, 1) replaced with array_slice(array_slice(arguments, 1, 2))
Mutant 1750 in q.js: arguments replaced with null
Mutant 1751 in q.js: arguments replaced with undefined
Mutant 1752 in q.js: arguments replaced with []
Mutant 1753 in q.js: 1 replaced with 0
Mutant 1754 in q.js: 1 replaced with null
Mutant 1755 in q.js: 1 replaced with undefined
Mutant 1756 in q.js: callback replaced with null
Mutant 1757 in q.js: callback replaced with undefined
Mutant 1758 in q.js: callback replaced with function () {}
Mutant 1759 in q.js: args replaced with null
Mutant 1760 in q.js: args replaced with []
Mutant 1761 in q.js: args replaced with [1, 2, 3]
Mutant 1762 in q.js: arguments replaced with null
Mutant 1763 in q.js: arguments replaced with undefined
Mutant 1764 in q.js: arguments replaced with []
Mutant 1765 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 1766 in q.js: nodeArgs.push replaced with nodeArgs.pop
Mutant 1767 in q.js: nodeArgs.push replaced with nodeArgs.shift
Mutant 1768 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 1769 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(function () {})
Mutant 1770 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(deferred.resolve)
Mutant 1771 in q.js: nodeArgs replaced with nodeArgs.slice(0)
Mutant 1772 in q.js: nodeArgs replaced with nodeArgs.concat([])
Mutant 1773 in q.js: nodeArgs replaced with nodeArgs.map(function (x) {
  return x;
})
Mutant 1774 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1775 in q.js: deferred.reject replaced with deferred.notify
Mutant 1776 in q.js: deferred.reject replaced with deferred.makeNodeResolver()
Mutant 1777 in q.js: callback === undefined replaced with callback !== undefined
Mutant 1778 in q.js: callback === undefined replaced with callback !== null
Mutant 1779 in q.js: callback === undefined replaced with typeof callback === "function"
Mutant 1780 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 2)
Mutant 1781 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 0)
Mutant 1782 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, -1)
Mutant 1783 in q.js: arguments replaced with null
Mutant 1784 in q.js: arguments replaced with undefined
Mutant 1785 in q.js: arguments replaced with []
Mutant 1786 in q.js: 1 replaced with 0
Mutant 1787 in q.js: 1 replaced with 2
Mutant 1788 in q.js: 1 replaced with null
Mutant 1789 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 1790 in q.js: array_slice(arguments) replaced with array_slice(arguments, 0, 1)
Mutant 1791 in q.js: array_slice(arguments) replaced with array_slice(arguments, 2)
Mutant 1792 in q.js: arguments replaced with null
Mutant 1793 in q.js: arguments replaced with undefined
Mutant 1794 in q.js: arguments replaced with []
Mutant 1795 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 1796 in q.js: nodeArgs.push replaced with nodeArgs.pop
Mutant 1797 in q.js: nodeArgs.push replaced with nodeArgs.shift
Mutant 1798 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 1799 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(function () {})
Mutant 1800 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(function (err) {
  throw err;
})
Mutant 1801 in q.js: Q replaced with deferred
Mutant 1802 in q.js: Q replaced with undefined
Mutant 1803 in q.js: callback replaced with null
Mutant 1804 in q.js: callback replaced with undefined
Mutant 1805 in q.js: callback replaced with function () {}
Mutant 1806 in q.js: nodeArgs replaced with nodeArgs.slice(1)
Mutant 1807 in q.js: nodeArgs replaced with nodeArgs.concat([1, 2, 3])
Mutant 1808 in q.js: nodeArgs replaced with nodeArgs.filter(function (arg) {
  return arg !== 1;
})
Mutant 1809 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1810 in q.js: deferred.reject replaced with deferred.notify
Mutant 1811 in q.js: deferred.reject replaced with deferred.makeNodeResolver()
Mutant 1812 in q.js: arguments replaced with null
Mutant 1813 in q.js: arguments replaced with undefined
Mutant 1814 in q.js: arguments replaced with []
Mutant 1815 in q.js: args.unshift replaced with args.push
Mutant 1816 in q.js: args.unshift replaced with args.shift
Mutant 1817 in q.js: args.unshift replaced with args.pop
Mutant 1818 in q.js: this replaced with null
Mutant 1819 in q.js: this replaced with undefined
Mutant 1820 in q.js: this replaced with 0
Mutant 1821 in q.js: Q.denodeify.apply(void 0, args) replaced with Q.denodeify.apply(null)
Mutant 1822 in q.js: Q.denodeify.apply(void 0, args) replaced with Q.denodeify.apply(undefined)
Mutant 1823 in q.js: Q.denodeify.apply(void 0, args) replaced with Q.denodeify.apply(this)
Mutant 1824 in q.js: Q.denodeify.apply replaced with Q.denodeify.call
Mutant 1825 in q.js: Q.denodeify.apply replaced with Q.denodeify.bind
Mutant 1826 in q.js: void 0 replaced with null
Mutant 1827 in q.js: void 0 replaced with undefined
Mutant 1828 in q.js: void 0 replaced with 0
Mutant 1829 in q.js: args replaced with args.slice(1)
Mutant 1830 in q.js: args replaced with args.concat([1])
Mutant 1831 in q.js: args replaced with args.filter(function (x) {
  return x !== 1;
})
Mutant 1832 in q.js: array_slice(arguments, 2) replaced with array_slice(arguments, 3)
Mutant 1833 in q.js: array_slice(arguments, 2) replaced with array_slice(args, 2)
Mutant 1834 in q.js: array_slice(arguments, 2) replaced with array_slice(baseArgs, 1)
Mutant 1835 in q.js: arguments replaced with array_slice(arguments, 1)
Mutant 1836 in q.js: arguments replaced with array_slice(arguments, 2)
Mutant 1837 in q.js: arguments replaced with array_slice(arguments, 3)
Mutant 1838 in q.js: 2 replaced with 1
Mutant 1839 in q.js: 2 replaced with 3
Mutant 1840 in q.js: 2 replaced with 0
Mutant 1841 in q.js: baseArgs.concat replaced with baseArgs.push
Mutant 1842 in q.js: baseArgs.concat replaced with baseArgs.shift
Mutant 1843 in q.js: baseArgs.concat replaced with baseArgs.pop
Mutant 1844 in q.js: array_slice(arguments) replaced with array_slice(arguments, 1)
Mutant 1845 in q.js: array_slice(arguments) replaced with array_slice(arguments, 0, 1)
Mutant 1846 in q.js: array_slice(arguments) replaced with array_slice(arguments, 2)
Mutant 1847 in q.js: arguments replaced with null
Mutant 1848 in q.js: arguments replaced with undefined
Mutant 1849 in q.js: arguments replaced with []
Mutant 1850 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 1851 in q.js: nodeArgs.push replaced with nodeArgs.pop
Mutant 1852 in q.js: nodeArgs.push replaced with nodeArgs.shift
Mutant 1853 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 1854 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(function () {})
Mutant 1855 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(function (err, result) {})
Mutant 1856 in q.js: callback.apply(thisp, arguments) replaced with callback.apply(thisp, arguments[0])
Mutant 1857 in q.js: callback.apply(thisp, arguments) replaced with callback.apply(thisp, arguments.length)
Mutant 1858 in q.js: callback.apply replaced with callback.call
Mutant 1859 in q.js: callback.apply replaced with callback.bind
Mutant 1860 in q.js: thisp replaced with null
Mutant 1861 in q.js: thisp replaced with undefined
Mutant 1862 in q.js: thisp replaced with {}
Mutant 1863 in q.js: arguments replaced with nodeArgs
Mutant 1864 in q.js: arguments replaced with baseArgs
Mutant 1865 in q.js: arguments replaced with args
Mutant 1866 in q.js: bound replaced with null
Mutant 1867 in q.js: bound replaced with function () {}
Mutant 1868 in q.js: bound replaced with function (x) {
  return x + 1;
}
Mutant 1869 in q.js: nodeArgs replaced with nodeArgs.slice(1)
Mutant 1870 in q.js: nodeArgs replaced with nodeArgs.concat([1, 2, 3])
Mutant 1871 in q.js: nodeArgs replaced with nodeArgs.filter(function (arg) {
  return arg !== 1;
})
Mutant 1872 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1873 in q.js: deferred.reject replaced with null
Mutant 1874 in q.js: deferred.reject replaced with undefined
Mutant 1875 in q.js: array_slice(arguments, 0) replaced with array_slice(arguments, 1)
Mutant 1876 in q.js: array_slice(arguments, 0) replaced with array_slice(arguments.length)
Mutant 1877 in q.js: array_slice(arguments, 0) replaced with array_slice(null)
Mutant 1878 in q.js: arguments replaced with null
Mutant 1879 in q.js: arguments replaced with undefined
Mutant 1880 in q.js: arguments replaced with []
Mutant 1881 in q.js: 0 replaced with 1
Mutant 1882 in q.js: 0 replaced with -1
Mutant 1883 in q.js: 0 replaced with "foo"
Mutant 1884 in q.js: args.unshift replaced with args.push
Mutant 1885 in q.js: args.unshift replaced with args.shift
Mutant 1886 in q.js: args.unshift replaced with args.pop
Mutant 1887 in q.js: this replaced with null
Mutant 1888 in q.js: this replaced with undefined
Mutant 1889 in q.js: this replaced with 0
Mutant 1890 in q.js: Q.nbind.apply(void 0, args) replaced with Q.nbind.apply(null, args)
Mutant 1891 in q.js: Q.nbind.apply(void 0, args) replaced with Q.nbind.apply(undefined, args)
Mutant 1892 in q.js: Q.nbind.apply(void 0, args) replaced with Q.nbind.apply(this, args)
Mutant 1893 in q.js: Q.nbind.apply replaced with Q.nbind.call
Mutant 1894 in q.js: Q.nbind.apply replaced with Q.nbind.bind
Mutant 1895 in q.js: Q.nbind.apply replaced with Q.nbind.apply.bind
Mutant 1896 in q.js: void 0 replaced with null
Mutant 1897 in q.js: void 0 replaced with undefined
Mutant 1898 in q.js: void 0 replaced with this
Mutant 1899 in q.js: args replaced with args.slice(1)
Mutant 1900 in q.js: args replaced with args.concat([1])
Mutant 1901 in q.js: args replaced with args.filter(function (x) {
  return x !== 1;
})
Mutant 1902 in q.js: Q(object).npost(name, args) replaced with Q(object).npost(name, args.slice(1))
Mutant 1903 in q.js: Q(object).npost(name, args) replaced with Q(object).npost(name, args.concat(args))
Mutant 1904 in q.js: Q(object).npost(name, args) replaced with Q(object).npost(name, args.reverse())
Mutant 1905 in q.js: object replaced with null
Mutant 1906 in q.js: object replaced with undefined
Mutant 1907 in q.js: object replaced with {}
Mutant 1908 in q.js: name replaced with name + "foo"
Mutant 1909 in q.js: name replaced with name.toUpperCase()
Mutant 1910 in q.js: name replaced with name.length
Mutant 1911 in q.js: args replaced with args.slice(1)
Mutant 1912 in q.js: args replaced with args.concat([1])
Mutant 1913 in q.js: args replaced with args.filter(function (x) {
  return x !== 1;
})
Mutant 1914 in q.js: args || [] replaced with null
Mutant 1915 in q.js: args || [] replaced with undefined
Mutant 1916 in q.js: args || [] replaced with []
Mutant 1917 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 1918 in q.js: nodeArgs.push replaced with nodeArgs.pop
Mutant 1919 in q.js: nodeArgs.push replaced with nodeArgs.shift
Mutant 1920 in q.js: deferred.makeNodeResolver() replaced with null
Mutant 1921 in q.js: deferred.makeNodeResolver() replaced with undefined
Mutant 1922 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 1923 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("get", [name, nodeArgs])
Mutant 1924 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("post", [name, nodeArgs, 1])
Mutant 1925 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("post", [name, nodeArgs, function () {}])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("get", [name, nodeArgs])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("post", [name, nodeArgs, 1])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("post", [name, nodeArgs, function () {}])
Mutant 1926 in q.js: "post" replaced with "get"
Mutant 1927 in q.js: "post" replaced with "put"
Mutant 1928 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, null]
Mutant 1929 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, undefined]
Mutant 1930 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, "foo"]
Mutant 1931 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1932 in q.js: deferred.reject replaced with null
Mutant 1933 in q.js: deferred.reject replaced with undefined
Mutant 1934 in q.js: array_slice(arguments, 2) replaced with array_slice(arguments, 1)
Mutant 1935 in q.js: array_slice(arguments, 2) replaced with array_slice(arguments, 3)
Mutant 1936 in q.js: array_slice(arguments, 2) replaced with array_slice(nodeArgs)
Mutant 1937 in q.js: array_slice replaced with array_slice.length
Mutant 1938 in q.js: arguments replaced with null
Mutant 1939 in q.js: arguments replaced with undefined
Mutant 1940 in q.js: arguments replaced with []
Mutant 1941 in q.js: 2 replaced with 1
Mutant 1942 in q.js: 2 replaced with 3
Mutant 1943 in q.js: 2 replaced with 4
Mutant 1944 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 1945 in q.js: nodeArgs.push replaced with nodeArgs.pop
Mutant 1946 in q.js: nodeArgs.push replaced with nodeArgs.shift
Mutant 1947 in q.js: deferred.makeNodeResolver() replaced with null
Mutant 1948 in q.js: deferred.makeNodeResolver() replaced with undefined
Mutant 1949 in q.js: deferred.makeNodeResolver() replaced with function () {}
Mutant 1950 in q.js: Q(object).dispatch("post", [name, nodeArgs]) replaced with Q(object).dispatch("get", [name, nodeArgs])
Mutant 1951 in q.js: Q(object).dispatch("post", [name, nodeArgs]) replaced with Q(object).dispatch("post", [name, nodeArgs, 1])
Mutant 1952 in q.js: Q(object).dispatch("post", [name, nodeArgs]) replaced with Q(object).dispatch("post", [name, nodeArgs, function () {}])
not replacing Q(object).dispatch("post", [name, nodeArgs]) with Q(object).dispatch("get", [name, nodeArgs])
not replacing Q(object).dispatch("post", [name, nodeArgs]) with Q(object).dispatch("post", [name, nodeArgs, 1])
not replacing Q(object).dispatch("post", [name, nodeArgs]) with Q(object).dispatch("post", [name, nodeArgs, function () {}])
Mutant 1953 in q.js: Q replaced with this
Mutant 1954 in q.js: Q replaced with null
Mutant 1955 in q.js: object replaced with null
Mutant 1956 in q.js: object replaced with undefined
Mutant 1957 in q.js: "post" replaced with "get"
Mutant 1958 in q.js: "post" replaced with "put"
Mutant 1959 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, null]
Mutant 1960 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, undefined]
Mutant 1961 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, ""]
Mutant 1962 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1963 in q.js: deferred.reject replaced with null
Mutant 1964 in q.js: deferred.reject replaced with undefined
Mutant 1965 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 2)
Mutant 1966 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 0)
Mutant 1967 in q.js: array_slice(arguments, 1) replaced with array_slice(arguments, 3)
Mutant 1968 in q.js: arguments replaced with null
Mutant 1969 in q.js: arguments replaced with undefined
Mutant 1970 in q.js: arguments replaced with []
Mutant 1971 in q.js: 1 replaced with 0
Mutant 1972 in q.js: 1 replaced with 2
Mutant 1973 in q.js: 1 replaced with null
Mutant 1974 in q.js: nodeArgs.push replaced with nodeArgs.unshift
Mutant 1975 in q.js: nodeArgs.push replaced with nodeArgs.pop
Mutant 1976 in q.js: nodeArgs.push replaced with nodeArgs.shift
Mutant 1977 in q.js: deferred.makeNodeResolver() replaced with null
Mutant 1978 in q.js: deferred.makeNodeResolver() replaced with undefined
Mutant 1979 in q.js: deferred.makeNodeResolver() replaced with deferred.makeNodeResolver(null)
Mutant 1980 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("send", [name, nodeArgs])
Mutant 1981 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("post", [name, nodeArgs, null])
Mutant 1982 in q.js: this.dispatch("post", [name, nodeArgs]) replaced with this.dispatch("post", [name, nodeArgs, function () {}])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("send", [name, nodeArgs])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("post", [name, nodeArgs, null])
not replacing this.dispatch("post", [name, nodeArgs]) with this.dispatch("post", [name, nodeArgs, function () {}])
Mutant 1983 in q.js: "post" replaced with "send"
Mutant 1984 in q.js: "post" replaced with "dispatch"
Mutant 1985 in q.js: "post" replaced with "apply"
Mutant 1986 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, null]
Mutant 1987 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, undefined]
Mutant 1988 in q.js: [name, nodeArgs] replaced with [name, nodeArgs, ""]
Mutant 1989 in q.js: deferred.reject replaced with deferred.resolve
Mutant 1990 in q.js: deferred.reject replaced with null
Mutant 1991 in q.js: deferred.reject replaced with undefined
Mutant 1992 in q.js: Q replaced with Q.reject
Mutant 1993 in q.js: object replaced with null
Mutant 1994 in q.js: object replaced with undefined
Mutant 1995 in q.js: object replaced with {}
Mutant 1996 in q.js: nodeback replaced with nodeback(error, value)
Mutant 1997 in q.js: nodeback replaced with nodeback(value)
Mutant 1998 in q.js: nodeback replaced with nodeback(error, null)
Mutant 1999 in q.js: nodeback replaced with !nodeback
Mutant 2000 in q.js: nodeback replaced with nodeback + 1
Mutant 2001 in q.js: nodeback replaced with nodeback()
Mutant 2002 in q.js: nodeback(null, value) replaced with nodeback(undefined, value)
Mutant 2003 in q.js: nodeback(null, value) replaced with nodeback(value, null)
Mutant 2004 in q.js: nodeback(null, value) replaced with nodeback(value, undefined)
Mutant 2005 in q.js: null replaced with undefined
Mutant 2006 in q.js: null replaced with 0
Mutant 2007 in q.js: null replaced with {}
Mutant 2008 in q.js: value replaced with null
Mutant 2009 in q.js: value replaced with undefined
Mutant 2010 in q.js: value replaced with 0
Mutant 2011 in q.js: error replaced with null
Mutant 2012 in q.js: error replaced with undefined
Mutant 2013 in q.js: error replaced with "error"
Mutant 2014 in q.js: captureLine replaced with captureLine + 1
Mutant 2015 in q.js: captureLine replaced with captureLine - 1
Mutant 2016 in q.js: captureLine replaced with captureLine * 2
Mutant 2017 in queue.js: "head" replaced with "tail"
Mutant 2018 in queue.js: "head" replaced with "head.tail"
Mutant 2019 in queue.js: "head" replaced with "ends.promise.get('tail')"
Mutant 2020 in queue.js: "tail" replaced with "head"
Mutant 2021 in queue.js: "tail" replaced with "tail.head"
Mutant 2022 in queue.js: "tail" replaced with "tail.tail"
Mutant 2023 in queue.js: closed.resolve replaced with closed.reject
Mutant 2024 in queue.js: error replaced with null
Mutant 2025 in queue.js: error replaced with undefined
Mutant 2026 in queue.js: error replaced with Q.reject(new Error("Can't get value from closed queue"))
Mutant 2027 in queue.js: Q.reject replaced with Q.resolve
Mutant 2028 in queue.js: error replaced with null
Mutant 2029 in queue.js: error replaced with undefined
Mutant 2030 in queue.js: error replaced with Q.reject(new Error("Queue is closed"))
Mutant 2031 in queue.js: ends.resolve replaced with ends.reject
Mutant 2032 in queue.js: ends.resolve replaced with closed.resolve
Mutant 2033 in queue.js: ends.resolve replaced with next.reject
[32m15:45:02 (3025) INFO Instrumenter[39m Instrumented 2 source file(s) with 2034 mutant(s)
[32m15:45:02 (3025) INFO ConcurrencyTokenProvider[39m Creating 2 test runner process(es).
[32m15:45:04 (3025) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m15:45:04 (3025) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m15:45:11 (3025) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 6 seconds (net 6811 ms, overhead 2 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~1h 24m) 4/2034 tested (2 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 52m) 6/2034 tested (4 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~2h 6m) 8/2034 tested (6 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 52m) 12/2034 tested (10 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 38m) 17/2034 tested (12 survived, 0 timed out)
Mutation testing 0% (elapsed: ~1m, remaining: ~1h 46m) 19/2034 tested (14 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 46m) 22/2034 tested (17 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 47m) 25/2034 tested (20 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 47m) 28/2034 tested (23 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 47m) 31/2034 tested (26 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 41m) 36/2034 tested (28 survived, 0 timed out)
Mutation testing 1% (elapsed: ~2m, remaining: ~1h 51m) 36/2034 tested (28 survived, 0 timed out)
Mutation testing 1% (elapsed: ~2m, remaining: ~1h 53m) 38/2034 tested (28 survived, 2 timed out)
Mutation testing 1% (elapsed: ~2m, remaining: ~1h 56m) 40/2034 tested (28 survived, 4 timed out)
Mutation testing 1% (elapsed: ~2m, remaining: ~2h 4m) 40/2034 tested (28 survived, 4 timed out)
Mutation testing 2% (elapsed: ~2m, remaining: ~2h 0m) 44/2034 tested (30 survived, 6 timed out)
Mutation testing 2% (elapsed: ~2m, remaining: ~2h 2m) 46/2034 tested (32 survived, 6 timed out)
Mutation testing 2% (elapsed: ~3m, remaining: ~1h 56m) 51/2034 tested (34 survived, 6 timed out)
Mutation testing 2% (elapsed: ~3m, remaining: ~1h 56m) 54/2034 tested (36 survived, 6 timed out)
Mutation testing 2% (elapsed: ~3m, remaining: ~1h 55m) 57/2034 tested (38 survived, 7 timed out)
Mutation testing 2% (elapsed: ~3m, remaining: ~1h 59m) 58/2034 tested (39 survived, 7 timed out)
Mutation testing 3% (elapsed: ~3m, remaining: ~1h 56m) 62/2034 tested (40 survived, 8 timed out)
Mutation testing 3% (elapsed: ~3m, remaining: ~1h 52m) 67/2034 tested (41 survived, 9 timed out)
Mutation testing 3% (elapsed: ~4m, remaining: ~1h 53m) 69/2034 tested (43 survived, 9 timed out)
Mutation testing 3% (elapsed: ~4m, remaining: ~1h 51m) 73/2034 tested (47 survived, 9 timed out)
Mutation testing 3% (elapsed: ~4m, remaining: ~1h 53m) 75/2034 tested (49 survived, 9 timed out)
Mutation testing 3% (elapsed: ~4m, remaining: ~1h 54m) 77/2034 tested (51 survived, 9 timed out)
Mutation testing 3% (elapsed: ~4m, remaining: ~1h 52m) 81/2034 tested (55 survived, 9 timed out)
Mutation testing 4% (elapsed: ~4m, remaining: ~1h 53m) 83/2034 tested (57 survived, 9 timed out)
Mutation testing 4% (elapsed: ~5m, remaining: ~1h 53m) 86/2034 tested (60 survived, 9 timed out)
Mutation testing 4% (elapsed: ~5m, remaining: ~1h 55m) 87/2034 tested (61 survived, 9 timed out)
Mutation testing 4% (elapsed: ~5m, remaining: ~1h 56m) 89/2034 tested (61 survived, 11 timed out)
Mutation testing 4% (elapsed: ~5m, remaining: ~1h 58m) 90/2034 tested (62 survived, 11 timed out)
Mutation testing 4% (elapsed: ~5m, remaining: ~1h 56m) 94/2034 tested (63 survived, 13 timed out)
Mutation testing 4% (elapsed: ~5m, remaining: ~1h 56m) 97/2034 tested (64 survived, 13 timed out)
Mutation testing 4% (elapsed: ~6m, remaining: ~1h 56m) 100/2034 tested (66 survived, 14 timed out)
Mutation testing 5% (elapsed: ~6m, remaining: ~1h 55m) 103/2034 tested (69 survived, 14 timed out)
Mutation testing 5% (elapsed: ~6m, remaining: ~1h 55m) 106/2034 tested (72 survived, 14 timed out)
Mutation testing 5% (elapsed: ~6m, remaining: ~1h 54m) 109/2034 tested (75 survived, 14 timed out)
Mutation testing 5% (elapsed: ~6m, remaining: ~1h 55m) 111/2034 tested (77 survived, 14 timed out)
Mutation testing 5% (elapsed: ~6m, remaining: ~1h 54m) 115/2034 tested (81 survived, 14 timed out)
Mutation testing 5% (elapsed: ~7m, remaining: ~1h 54m) 117/2034 tested (83 survived, 14 timed out)
Mutation testing 5% (elapsed: ~7m, remaining: ~1h 54m) 120/2034 tested (86 survived, 14 timed out)
Mutation testing 6% (elapsed: ~7m, remaining: ~1h 53m) 123/2034 tested (89 survived, 14 timed out)
Mutation testing 6% (elapsed: ~7m, remaining: ~1h 53m) 126/2034 tested (92 survived, 14 timed out)
Mutation testing 6% (elapsed: ~7m, remaining: ~1h 53m) 129/2034 tested (95 survived, 14 timed out)
Mutation testing 6% (elapsed: ~7m, remaining: ~1h 52m) 132/2034 tested (98 survived, 14 timed out)
Mutation testing 6% (elapsed: ~8m, remaining: ~1h 52m) 135/2034 tested (101 survived, 14 timed out)
Mutation testing 6% (elapsed: ~8m, remaining: ~1h 52m) 138/2034 tested (104 survived, 14 timed out)
Mutation testing 7% (elapsed: ~8m, remaining: ~1h 50m) 143/2034 tested (106 survived, 14 timed out)
Mutation testing 7% (elapsed: ~8m, remaining: ~1h 45m) 152/2034 tested (107 survived, 14 timed out)
Mutation testing 7% (elapsed: ~8m, remaining: ~1h 42m) 158/2034 tested (107 survived, 15 timed out)
Mutation testing 7% (elapsed: ~8m, remaining: ~1h 42m) 161/2034 tested (110 survived, 15 timed out)
Mutation testing 8% (elapsed: ~9m, remaining: ~1h 42m) 164/2034 tested (113 survived, 15 timed out)
Mutation testing 8% (elapsed: ~9m, remaining: ~1h 42m) 167/2034 tested (116 survived, 15 timed out)
Mutation testing 8% (elapsed: ~9m, remaining: ~1h 42m) 170/2034 tested (119 survived, 15 timed out)
Mutation testing 8% (elapsed: ~9m, remaining: ~1h 42m) 172/2034 tested (121 survived, 15 timed out)
Mutation testing 8% (elapsed: ~9m, remaining: ~1h 42m) 176/2034 tested (125 survived, 15 timed out)
Mutation testing 8% (elapsed: ~9m, remaining: ~1h 42m) 178/2034 tested (127 survived, 15 timed out)
Mutation testing 8% (elapsed: ~10m, remaining: ~1h 41m) 182/2034 tested (131 survived, 15 timed out)
Mutation testing 9% (elapsed: ~10m, remaining: ~1h 42m) 184/2034 tested (133 survived, 15 timed out)
Mutation testing 9% (elapsed: ~10m, remaining: ~1h 42m) 187/2034 tested (136 survived, 15 timed out)
Mutation testing 9% (elapsed: ~10m, remaining: ~1h 41m) 190/2034 tested (139 survived, 15 timed out)
Mutation testing 9% (elapsed: ~10m, remaining: ~1h 41m) 193/2034 tested (142 survived, 15 timed out)
Mutation testing 9% (elapsed: ~10m, remaining: ~1h 41m) 196/2034 tested (145 survived, 15 timed out)
Mutation testing 9% (elapsed: ~11m, remaining: ~1h 41m) 199/2034 tested (148 survived, 15 timed out)
Mutation testing 9% (elapsed: ~11m, remaining: ~1h 41m) 202/2034 tested (151 survived, 15 timed out)
Mutation testing 10% (elapsed: ~11m, remaining: ~1h 41m) 205/2034 tested (154 survived, 15 timed out)
Mutation testing 10% (elapsed: ~11m, remaining: ~1h 40m) 208/2034 tested (157 survived, 15 timed out)
Mutation testing 10% (elapsed: ~11m, remaining: ~1h 41m) 210/2034 tested (159 survived, 15 timed out)
Mutation testing 10% (elapsed: ~11m, remaining: ~1h 40m) 214/2034 tested (163 survived, 15 timed out)
Mutation testing 10% (elapsed: ~12m, remaining: ~1h 41m) 216/2034 tested (165 survived, 15 timed out)
Mutation testing 10% (elapsed: ~12m, remaining: ~1h 40m) 220/2034 tested (169 survived, 15 timed out)
Mutation testing 10% (elapsed: ~12m, remaining: ~1h 40m) 222/2034 tested (171 survived, 15 timed out)
Mutation testing 11% (elapsed: ~12m, remaining: ~1h 40m) 225/2034 tested (174 survived, 15 timed out)
Mutation testing 11% (elapsed: ~12m, remaining: ~1h 40m) 228/2034 tested (177 survived, 15 timed out)
Mutation testing 11% (elapsed: ~12m, remaining: ~1h 40m) 231/2034 tested (180 survived, 15 timed out)
Mutation testing 11% (elapsed: ~13m, remaining: ~1h 40m) 234/2034 tested (183 survived, 15 timed out)
Mutation testing 11% (elapsed: ~13m, remaining: ~1h 38m) 240/2034 tested (186 survived, 15 timed out)
Mutation testing 11% (elapsed: ~13m, remaining: ~1h 38m) 242/2034 tested (186 survived, 15 timed out)
Mutation testing 11% (elapsed: ~13m, remaining: ~1h 39m) 244/2034 tested (187 survived, 15 timed out)
Mutation testing 12% (elapsed: ~13m, remaining: ~1h 38m) 248/2034 tested (191 survived, 15 timed out)
Mutation testing 12% (elapsed: ~13m, remaining: ~1h 38m) 250/2034 tested (193 survived, 15 timed out)
Mutation testing 12% (elapsed: ~14m, remaining: ~1h 38m) 254/2034 tested (197 survived, 15 timed out)
Mutation testing 12% (elapsed: ~14m, remaining: ~1h 38m) 256/2034 tested (199 survived, 15 timed out)
Mutation testing 12% (elapsed: ~14m, remaining: ~1h 38m) 259/2034 tested (202 survived, 15 timed out)
Mutation testing 12% (elapsed: ~14m, remaining: ~1h 38m) 262/2034 tested (205 survived, 15 timed out)
Mutation testing 12% (elapsed: ~14m, remaining: ~1h 38m) 264/2034 tested (207 survived, 15 timed out)
Mutation testing 13% (elapsed: ~14m, remaining: ~1h 37m) 268/2034 tested (211 survived, 15 timed out)
Mutation testing 13% (elapsed: ~15m, remaining: ~1h 38m) 270/2034 tested (213 survived, 15 timed out)
Mutation testing 13% (elapsed: ~15m, remaining: ~1h 37m) 274/2034 tested (217 survived, 15 timed out)
Mutation testing 13% (elapsed: ~15m, remaining: ~1h 37m) 276/2034 tested (219 survived, 15 timed out)
Mutation testing 13% (elapsed: ~15m, remaining: ~1h 37m) 279/2034 tested (222 survived, 15 timed out)
Mutation testing 13% (elapsed: ~15m, remaining: ~1h 37m) 282/2034 tested (225 survived, 15 timed out)
Mutation testing 13% (elapsed: ~15m, remaining: ~1h 37m) 284/2034 tested (227 survived, 15 timed out)
Mutation testing 14% (elapsed: ~16m, remaining: ~1h 37m) 288/2034 tested (231 survived, 15 timed out)
Mutation testing 14% (elapsed: ~16m, remaining: ~1h 37m) 290/2034 tested (233 survived, 15 timed out)
Mutation testing 14% (elapsed: ~16m, remaining: ~1h 37m) 293/2034 tested (236 survived, 15 timed out)
Mutation testing 14% (elapsed: ~16m, remaining: ~1h 36m) 296/2034 tested (239 survived, 15 timed out)
Mutation testing 14% (elapsed: ~16m, remaining: ~1h 37m) 298/2034 tested (241 survived, 15 timed out)
Mutation testing 14% (elapsed: ~16m, remaining: ~1h 36m) 302/2034 tested (245 survived, 15 timed out)
Mutation testing 14% (elapsed: ~17m, remaining: ~1h 36m) 304/2034 tested (247 survived, 15 timed out)
Mutation testing 15% (elapsed: ~17m, remaining: ~1h 36m) 306/2034 tested (249 survived, 15 timed out)
Mutation testing 15% (elapsed: ~17m, remaining: ~1h 36m) 310/2034 tested (253 survived, 15 timed out)
Mutation testing 15% (elapsed: ~17m, remaining: ~1h 36m) 312/2034 tested (255 survived, 15 timed out)
Mutation testing 15% (elapsed: ~17m, remaining: ~1h 36m) 316/2034 tested (259 survived, 15 timed out)
Mutation testing 15% (elapsed: ~17m, remaining: ~1h 36m) 318/2034 tested (261 survived, 15 timed out)
Mutation testing 15% (elapsed: ~18m, remaining: ~1h 36m) 320/2034 tested (263 survived, 15 timed out)
Mutation testing 15% (elapsed: ~18m, remaining: ~1h 35m) 324/2034 tested (267 survived, 15 timed out)
Mutation testing 16% (elapsed: ~18m, remaining: ~1h 36m) 326/2034 tested (269 survived, 15 timed out)
Mutation testing 16% (elapsed: ~18m, remaining: ~1h 36m) 328/2034 tested (271 survived, 15 timed out)
Mutation testing 16% (elapsed: ~18m, remaining: ~1h 35m) 332/2034 tested (275 survived, 15 timed out)
Mutation testing 16% (elapsed: ~18m, remaining: ~1h 34m) 337/2034 tested (277 survived, 15 timed out)
Mutation testing 16% (elapsed: ~19m, remaining: ~1h 35m) 339/2034 tested (279 survived, 15 timed out)
Mutation testing 16% (elapsed: ~19m, remaining: ~1h 34m) 342/2034 tested (282 survived, 15 timed out)
Mutation testing 16% (elapsed: ~19m, remaining: ~1h 34m) 345/2034 tested (285 survived, 15 timed out)
Mutation testing 17% (elapsed: ~19m, remaining: ~1h 34m) 348/2034 tested (288 survived, 15 timed out)
Mutation testing 17% (elapsed: ~19m, remaining: ~1h 33m) 353/2034 tested (290 survived, 15 timed out)
Mutation testing 17% (elapsed: ~19m, remaining: ~1h 33m) 356/2034 tested (293 survived, 15 timed out)
Mutation testing 17% (elapsed: ~20m, remaining: ~1h 33m) 358/2034 tested (295 survived, 15 timed out)
Mutation testing 17% (elapsed: ~20m, remaining: ~1h 33m) 362/2034 tested (299 survived, 15 timed out)
Mutation testing 17% (elapsed: ~20m, remaining: ~1h 33m) 364/2034 tested (301 survived, 15 timed out)
Mutation testing 17% (elapsed: ~20m, remaining: ~1h 33m) 366/2034 tested (303 survived, 15 timed out)
Mutation testing 18% (elapsed: ~20m, remaining: ~1h 32m) 370/2034 tested (307 survived, 15 timed out)
Mutation testing 18% (elapsed: ~20m, remaining: ~1h 33m) 372/2034 tested (309 survived, 15 timed out)
Mutation testing 18% (elapsed: ~21m, remaining: ~1h 33m) 374/2034 tested (311 survived, 15 timed out)
Mutation testing 18% (elapsed: ~21m, remaining: ~1h 32m) 378/2034 tested (315 survived, 15 timed out)
Mutation testing 18% (elapsed: ~21m, remaining: ~1h 32m) 380/2034 tested (317 survived, 15 timed out)
Mutation testing 18% (elapsed: ~21m, remaining: ~1h 32m) 382/2034 tested (319 survived, 15 timed out)
Mutation testing 18% (elapsed: ~21m, remaining: ~1h 32m) 386/2034 tested (323 survived, 15 timed out)
Mutation testing 19% (elapsed: ~21m, remaining: ~1h 32m) 388/2034 tested (325 survived, 15 timed out)
Mutation testing 19% (elapsed: ~22m, remaining: ~1h 32m) 390/2034 tested (327 survived, 15 timed out)
Mutation testing 19% (elapsed: ~22m, remaining: ~1h 32m) 394/2034 tested (331 survived, 15 timed out)
Mutation testing 19% (elapsed: ~22m, remaining: ~1h 32m) 396/2034 tested (333 survived, 15 timed out)
Mutation testing 19% (elapsed: ~22m, remaining: ~1h 32m) 398/2034 tested (335 survived, 15 timed out)
Mutation testing 19% (elapsed: ~22m, remaining: ~1h 32m) 402/2034 tested (339 survived, 15 timed out)
Mutation testing 19% (elapsed: ~22m, remaining: ~1h 32m) 404/2034 tested (341 survived, 15 timed out)
Mutation testing 20% (elapsed: ~23m, remaining: ~1h 30m) 412/2034 tested (343 survived, 15 timed out)
Mutation testing 20% (elapsed: ~23m, remaining: ~1h 30m) 415/2034 tested (343 survived, 15 timed out)
Mutation testing 20% (elapsed: ~23m, remaining: ~1h 30m) 417/2034 tested (343 survived, 15 timed out)
Mutation testing 20% (elapsed: ~23m, remaining: ~1h 30m) 419/2034 tested (343 survived, 15 timed out)
Mutation testing 20% (elapsed: ~23m, remaining: ~1h 30m) 421/2034 tested (343 survived, 17 timed out)
Mutation testing 20% (elapsed: ~23m, remaining: ~1h 31m) 421/2034 tested (343 survived, 17 timed out)
Mutation testing 21% (elapsed: ~24m, remaining: ~1h 30m) 428/2034 tested (343 survived, 19 timed out)
Mutation testing 21% (elapsed: ~24m, remaining: ~1h 28m) 437/2034 tested (343 survived, 19 timed out)
Mutation testing 21% (elapsed: ~24m, remaining: ~1h 28m) 437/2034 tested (343 survived, 19 timed out)
Mutation testing 21% (elapsed: ~24m, remaining: ~1h 28m) 442/2034 tested (344 survived, 21 timed out)
Mutation testing 21% (elapsed: ~24m, remaining: ~1h 28m) 445/2034 tested (347 survived, 21 timed out)
Mutation testing 21% (elapsed: ~24m, remaining: ~1h 28m) 447/2034 tested (349 survived, 21 timed out)
Mutation testing 22% (elapsed: ~25m, remaining: ~1h 28m) 450/2034 tested (352 survived, 21 timed out)
Mutation testing 22% (elapsed: ~25m, remaining: ~1h 28m) 451/2034 tested (352 survived, 22 timed out)
Mutation testing 22% (elapsed: ~25m, remaining: ~1h 28m) 453/2034 tested (352 survived, 23 timed out)
Mutation testing 22% (elapsed: ~25m, remaining: ~1h 28m) 456/2034 tested (353 survived, 25 timed out)
Mutation testing 22% (elapsed: ~25m, remaining: ~1h 28m) 459/2034 tested (355 survived, 25 timed out)
Mutation testing 22% (elapsed: ~25m, remaining: ~1h 28m) 460/2034 tested (356 survived, 25 timed out)
Mutation testing 22% (elapsed: ~26m, remaining: ~1h 27m) 464/2034 tested (359 survived, 26 timed out)
Mutation testing 22% (elapsed: ~26m, remaining: ~1h 28m) 466/2034 tested (361 survived, 26 timed out)
Mutation testing 23% (elapsed: ~26m, remaining: ~1h 28m) 468/2034 tested (363 survived, 26 timed out)
Mutation testing 23% (elapsed: ~26m, remaining: ~1h 27m) 472/2034 tested (367 survived, 26 timed out)
Mutation testing 23% (elapsed: ~26m, remaining: ~1h 27m) 474/2034 tested (369 survived, 26 timed out)
Mutation testing 23% (elapsed: ~26m, remaining: ~1h 27m) 478/2034 tested (373 survived, 26 timed out)
Mutation testing 23% (elapsed: ~27m, remaining: ~1h 27m) 480/2034 tested (375 survived, 26 timed out)
Mutation testing 23% (elapsed: ~27m, remaining: ~1h 27m) 482/2034 tested (377 survived, 26 timed out)
Mutation testing 23% (elapsed: ~27m, remaining: ~1h 27m) 486/2034 tested (381 survived, 26 timed out)
Mutation testing 23% (elapsed: ~27m, remaining: ~1h 27m) 488/2034 tested (383 survived, 26 timed out)
Mutation testing 24% (elapsed: ~27m, remaining: ~1h 26m) 491/2034 tested (386 survived, 26 timed out)
Mutation testing 24% (elapsed: ~27m, remaining: ~1h 26m) 495/2034 tested (389 survived, 26 timed out)
Mutation testing 24% (elapsed: ~28m, remaining: ~1h 26m) 497/2034 tested (390 survived, 26 timed out)
Mutation testing 24% (elapsed: ~28m, remaining: ~1h 26m) 499/2034 tested (391 survived, 27 timed out)
Mutation testing 24% (elapsed: ~28m, remaining: ~1h 26m) 503/2034 tested (393 survived, 28 timed out)
Mutation testing 24% (elapsed: ~28m, remaining: ~1h 25m) 507/2034 tested (395 survived, 28 timed out)
Mutation testing 24% (elapsed: ~28m, remaining: ~1h 26m) 507/2034 tested (395 survived, 28 timed out)
Mutation testing 25% (elapsed: ~28m, remaining: ~1h 26m) 509/2034 tested (395 survived, 30 timed out)
Mutation testing 25% (elapsed: ~29m, remaining: ~1h 26m) 511/2034 tested (396 survived, 31 timed out)
Mutation testing 25% (elapsed: ~29m, remaining: ~1h 26m) 512/2034 tested (396 survived, 32 timed out)
Mutation testing 25% (elapsed: ~29m, remaining: ~1h 26m) 513/2034 tested (396 survived, 33 timed out)
Mutation testing 25% (elapsed: ~29m, remaining: ~1h 26m) 517/2034 tested (399 survived, 34 timed out)
Mutation testing 25% (elapsed: ~29m, remaining: ~1h 26m) 519/2034 tested (401 survived, 34 timed out)
Mutation testing 25% (elapsed: ~29m, remaining: ~1h 26m) 521/2034 tested (403 survived, 34 timed out)
Mutation testing 25% (elapsed: ~30m, remaining: ~1h 26m) 525/2034 tested (407 survived, 34 timed out)
Mutation testing 25% (elapsed: ~30m, remaining: ~1h 26m) 527/2034 tested (407 survived, 34 timed out)
Mutation testing 26% (elapsed: ~30m, remaining: ~1h 26m) 530/2034 tested (407 survived, 35 timed out)
Mutation testing 26% (elapsed: ~30m, remaining: ~1h 26m) 532/2034 tested (407 survived, 35 timed out)
Mutation testing 26% (elapsed: ~30m, remaining: ~1h 26m) 534/2034 tested (407 survived, 35 timed out)
Mutation testing 26% (elapsed: ~30m, remaining: ~1h 26m) 536/2034 tested (408 survived, 35 timed out)
Mutation testing 26% (elapsed: ~31m, remaining: ~1h 25m) 540/2034 tested (412 survived, 35 timed out)
Mutation testing 26% (elapsed: ~31m, remaining: ~1h 25m) 542/2034 tested (414 survived, 35 timed out)
Mutation testing 26% (elapsed: ~31m, remaining: ~1h 25m) 546/2034 tested (418 survived, 35 timed out)
Mutation testing 26% (elapsed: ~31m, remaining: ~1h 25m) 548/2034 tested (420 survived, 35 timed out)
Mutation testing 27% (elapsed: ~31m, remaining: ~1h 25m) 552/2034 tested (424 survived, 35 timed out)
Mutation testing 27% (elapsed: ~31m, remaining: ~1h 25m) 554/2034 tested (426 survived, 35 timed out)
Mutation testing 27% (elapsed: ~32m, remaining: ~1h 24m) 557/2034 tested (429 survived, 35 timed out)
Mutation testing 27% (elapsed: ~32m, remaining: ~1h 24m) 560/2034 tested (432 survived, 35 timed out)
Mutation testing 27% (elapsed: ~32m, remaining: ~1h 24m) 563/2034 tested (435 survived, 35 timed out)
Mutation testing 27% (elapsed: ~32m, remaining: ~1h 24m) 566/2034 tested (438 survived, 35 timed out)
Mutation testing 27% (elapsed: ~32m, remaining: ~1h 24m) 569/2034 tested (441 survived, 35 timed out)
Mutation testing 28% (elapsed: ~32m, remaining: ~1h 23m) 572/2034 tested (444 survived, 35 timed out)
Mutation testing 28% (elapsed: ~33m, remaining: ~1h 23m) 574/2034 tested (446 survived, 35 timed out)
Mutation testing 28% (elapsed: ~33m, remaining: ~1h 23m) 578/2034 tested (450 survived, 35 timed out)
Mutation testing 28% (elapsed: ~33m, remaining: ~1h 23m) 580/2034 tested (452 survived, 35 timed out)
Mutation testing 28% (elapsed: ~33m, remaining: ~1h 23m) 584/2034 tested (456 survived, 35 timed out)
Mutation testing 28% (elapsed: ~33m, remaining: ~1h 23m) 586/2034 tested (458 survived, 35 timed out)
Mutation testing 29% (elapsed: ~33m, remaining: ~1h 22m) 590/2034 tested (462 survived, 35 timed out)
Mutation testing 29% (elapsed: ~34m, remaining: ~1h 22m) 592/2034 tested (464 survived, 35 timed out)
Mutation testing 29% (elapsed: ~34m, remaining: ~1h 22m) 595/2034 tested (467 survived, 35 timed out)
Mutation testing 29% (elapsed: ~34m, remaining: ~1h 22m) 598/2034 tested (470 survived, 35 timed out)
Mutation testing 29% (elapsed: ~34m, remaining: ~1h 22m) 601/2034 tested (473 survived, 35 timed out)
Mutation testing 29% (elapsed: ~34m, remaining: ~1h 22m) 604/2034 tested (476 survived, 35 timed out)
Mutation testing 29% (elapsed: ~34m, remaining: ~1h 21m) 607/2034 tested (479 survived, 35 timed out)
Mutation testing 29% (elapsed: ~35m, remaining: ~1h 21m) 610/2034 tested (482 survived, 35 timed out)
Mutation testing 30% (elapsed: ~35m, remaining: ~1h 21m) 613/2034 tested (485 survived, 35 timed out)
Mutation testing 30% (elapsed: ~35m, remaining: ~1h 21m) 616/2034 tested (488 survived, 35 timed out)
Mutation testing 30% (elapsed: ~35m, remaining: ~1h 21m) 618/2034 tested (490 survived, 35 timed out)
Mutation testing 30% (elapsed: ~35m, remaining: ~1h 20m) 622/2034 tested (494 survived, 35 timed out)
Mutation testing 30% (elapsed: ~35m, remaining: ~1h 20m) 624/2034 tested (496 survived, 35 timed out)
Mutation testing 30% (elapsed: ~36m, remaining: ~1h 20m) 628/2034 tested (500 survived, 35 timed out)
Mutation testing 30% (elapsed: ~36m, remaining: ~1h 20m) 630/2034 tested (502 survived, 35 timed out)
Mutation testing 31% (elapsed: ~36m, remaining: ~1h 20m) 634/2034 tested (506 survived, 35 timed out)
Mutation testing 31% (elapsed: ~36m, remaining: ~1h 19m) 639/2034 tested (508 survived, 35 timed out)
Mutation testing 31% (elapsed: ~36m, remaining: ~1h 19m) 640/2034 tested (509 survived, 35 timed out)
Mutation testing 31% (elapsed: ~36m, remaining: ~1h 19m) 643/2034 tested (509 survived, 37 timed out)
Mutation testing 31% (elapsed: ~37m, remaining: ~1h 20m) 643/2034 tested (509 survived, 37 timed out)
Mutation testing 31% (elapsed: ~37m, remaining: ~1h 19m) 646/2034 tested (510 survived, 39 timed out)
Mutation testing 31% (elapsed: ~37m, remaining: ~1h 19m) 648/2034 tested (511 survived, 40 timed out)
Mutation testing 31% (elapsed: ~37m, remaining: ~1h 20m) 649/2034 tested (512 survived, 40 timed out)
Mutation testing 32% (elapsed: ~37m, remaining: ~1h 19m) 652/2034 tested (514 survived, 41 timed out)
Mutation testing 32% (elapsed: ~37m, remaining: ~1h 19m) 654/2034 tested (515 survived, 42 timed out)
Mutation testing 32% (elapsed: ~38m, remaining: ~1h 19m) 656/2034 tested (517 survived, 42 timed out)
Mutation testing 32% (elapsed: ~38m, remaining: ~1h 19m) 660/2034 tested (521 survived, 42 timed out)
Mutation testing 32% (elapsed: ~38m, remaining: ~1h 19m) 662/2034 tested (523 survived, 42 timed out)
Mutation testing 32% (elapsed: ~38m, remaining: ~1h 18m) 668/2034 tested (525 survived, 42 timed out)
Mutation testing 32% (elapsed: ~38m, remaining: ~1h 18m) 670/2034 tested (526 survived, 42 timed out)
Mutation testing 33% (elapsed: ~38m, remaining: ~1h 18m) 672/2034 tested (526 survived, 44 timed out)
Mutation testing 33% (elapsed: ~39m, remaining: ~1h 18m) 674/2034 tested (528 survived, 44 timed out)
Mutation testing 33% (elapsed: ~39m, remaining: ~1h 18m) 678/2034 tested (532 survived, 44 timed out)
Mutation testing 33% (elapsed: ~39m, remaining: ~1h 17m) 682/2034 tested (534 survived, 44 timed out)
Mutation testing 33% (elapsed: ~39m, remaining: ~1h 18m) 683/2034 tested (535 survived, 44 timed out)
Mutation testing 33% (elapsed: ~39m, remaining: ~1h 18m) 685/2034 tested (535 survived, 46 timed out)
Mutation testing 33% (elapsed: ~39m, remaining: ~1h 18m) 686/2034 tested (535 survived, 47 timed out)
Mutation testing 33% (elapsed: ~40m, remaining: ~1h 18m) 688/2034 tested (535 survived, 48 timed out)
Mutation testing 33% (elapsed: ~40m, remaining: ~1h 18m) 690/2034 tested (535 survived, 49 timed out)
Mutation testing 33% (elapsed: ~40m, remaining: ~1h 18m) 691/2034 tested (535 survived, 49 timed out)
Mutation testing 34% (elapsed: ~40m, remaining: ~1h 18m) 693/2034 tested (535 survived, 49 timed out)
Mutation testing 34% (elapsed: ~40m, remaining: ~1h 18m) 696/2034 tested (536 survived, 49 timed out)
Mutation testing 34% (elapsed: ~40m, remaining: ~1h 18m) 696/2034 tested (536 survived, 49 timed out)
Mutation testing 34% (elapsed: ~41m, remaining: ~1h 18m) 698/2034 tested (536 survived, 51 timed out)
Mutation testing 34% (elapsed: ~41m, remaining: ~1h 18m) 701/2034 tested (536 survived, 51 timed out)
Mutation testing 34% (elapsed: ~41m, remaining: ~1h 18m) 702/2034 tested (536 survived, 52 timed out)
Mutation testing 34% (elapsed: ~41m, remaining: ~1h 18m) 703/2034 tested (536 survived, 53 timed out)
Mutation testing 34% (elapsed: ~41m, remaining: ~1h 18m) 705/2034 tested (536 survived, 54 timed out)
Mutation testing 34% (elapsed: ~41m, remaining: ~1h 18m) 706/2034 tested (536 survived, 54 timed out)
Mutation testing 34% (elapsed: ~42m, remaining: ~1h 18m) 708/2034 tested (536 survived, 54 timed out)
Mutation testing 34% (elapsed: ~42m, remaining: ~1h 18m) 710/2034 tested (536 survived, 54 timed out)
Mutation testing 35% (elapsed: ~42m, remaining: ~1h 18m) 713/2034 tested (537 survived, 54 timed out)
Mutation testing 35% (elapsed: ~42m, remaining: ~1h 18m) 715/2034 tested (539 survived, 54 timed out)
Mutation testing 35% (elapsed: ~42m, remaining: ~1h 18m) 717/2034 tested (541 survived, 54 timed out)
Mutation testing 35% (elapsed: ~42m, remaining: ~1h 18m) 719/2034 tested (541 survived, 55 timed out)
Mutation testing 35% (elapsed: ~43m, remaining: ~1h 18m) 720/2034 tested (541 survived, 56 timed out)
Mutation testing 35% (elapsed: ~43m, remaining: ~1h 18m) 722/2034 tested (541 survived, 57 timed out)
Mutation testing 35% (elapsed: ~43m, remaining: ~1h 18m) 724/2034 tested (541 survived, 59 timed out)
Mutation testing 35% (elapsed: ~43m, remaining: ~1h 18m) 725/2034 tested (541 survived, 60 timed out)
Mutation testing 35% (elapsed: ~43m, remaining: ~1h 18m) 726/2034 tested (541 survived, 61 timed out)
Mutation testing 35% (elapsed: ~43m, remaining: ~1h 18m) 728/2034 tested (541 survived, 63 timed out)
Mutation testing 35% (elapsed: ~44m, remaining: ~1h 18m) 729/2034 tested (541 survived, 64 timed out)
Mutation testing 35% (elapsed: ~44m, remaining: ~1h 18m) 731/2034 tested (542 survived, 65 timed out)
Mutation testing 36% (elapsed: ~44m, remaining: ~1h 18m) 733/2034 tested (542 survived, 67 timed out)
Mutation testing 36% (elapsed: ~44m, remaining: ~1h 18m) 733/2034 tested (542 survived, 67 timed out)
Mutation testing 36% (elapsed: ~44m, remaining: ~1h 18m) 735/2034 tested (542 survived, 69 timed out)
Mutation testing 36% (elapsed: ~44m, remaining: ~1h 19m) 736/2034 tested (542 survived, 70 timed out)
Mutation testing 36% (elapsed: ~45m, remaining: ~1h 19m) 737/2034 tested (542 survived, 71 timed out)
Mutation testing 36% (elapsed: ~45m, remaining: ~1h 19m) 739/2034 tested (542 survived, 73 timed out)
Mutation testing 36% (elapsed: ~45m, remaining: ~1h 19m) 740/2034 tested (542 survived, 74 timed out)
Mutation testing 36% (elapsed: ~45m, remaining: ~1h 19m) 743/2034 tested (544 survived, 75 timed out)
Mutation testing 36% (elapsed: ~45m, remaining: ~1h 19m) 745/2034 tested (546 survived, 75 timed out)
Mutation testing 36% (elapsed: ~45m, remaining: ~1h 18m) 749/2034 tested (550 survived, 75 timed out)
Mutation testing 36% (elapsed: ~46m, remaining: ~1h 18m) 751/2034 tested (552 survived, 75 timed out)
Mutation testing 37% (elapsed: ~46m, remaining: ~1h 18m) 754/2034 tested (555 survived, 75 timed out)
Mutation testing 37% (elapsed: ~46m, remaining: ~1h 18m) 757/2034 tested (558 survived, 75 timed out)
Mutation testing 37% (elapsed: ~46m, remaining: ~1h 18m) 759/2034 tested (560 survived, 75 timed out)
Mutation testing 37% (elapsed: ~46m, remaining: ~1h 17m) 763/2034 tested (564 survived, 75 timed out)
Mutation testing 37% (elapsed: ~46m, remaining: ~1h 17m) 765/2034 tested (566 survived, 75 timed out)
Mutation testing 37% (elapsed: ~47m, remaining: ~1h 17m) 767/2034 tested (568 survived, 75 timed out)
Mutation testing 37% (elapsed: ~47m, remaining: ~1h 17m) 771/2034 tested (572 survived, 75 timed out)
Mutation testing 38% (elapsed: ~47m, remaining: ~1h 17m) 773/2034 tested (574 survived, 75 timed out)
Mutation testing 38% (elapsed: ~47m, remaining: ~1h 16m) 777/2034 tested (578 survived, 75 timed out)
Mutation testing 38% (elapsed: ~47m, remaining: ~1h 16m) 779/2034 tested (580 survived, 75 timed out)
Mutation testing 38% (elapsed: ~47m, remaining: ~1h 16m) 781/2034 tested (582 survived, 75 timed out)
Mutation testing 38% (elapsed: ~48m, remaining: ~1h 16m) 785/2034 tested (586 survived, 75 timed out)
Mutation testing 38% (elapsed: ~48m, remaining: ~1h 16m) 787/2034 tested (588 survived, 75 timed out)
Mutation testing 38% (elapsed: ~48m, remaining: ~1h 16m) 789/2034 tested (590 survived, 75 timed out)
Mutation testing 38% (elapsed: ~48m, remaining: ~1h 15m) 793/2034 tested (594 survived, 75 timed out)
Mutation testing 39% (elapsed: ~48m, remaining: ~1h 15m) 795/2034 tested (596 survived, 75 timed out)
Mutation testing 39% (elapsed: ~48m, remaining: ~1h 15m) 797/2034 tested (598 survived, 75 timed out)
Mutation testing 39% (elapsed: ~49m, remaining: ~1h 15m) 801/2034 tested (602 survived, 75 timed out)
Mutation testing 39% (elapsed: ~49m, remaining: ~1h 15m) 803/2034 tested (604 survived, 75 timed out)
Mutation testing 39% (elapsed: ~49m, remaining: ~1h 15m) 805/2034 tested (606 survived, 75 timed out)
Mutation testing 39% (elapsed: ~49m, remaining: ~1h 14m) 809/2034 tested (610 survived, 75 timed out)
Mutation testing 39% (elapsed: ~49m, remaining: ~1h 14m) 811/2034 tested (612 survived, 75 timed out)
Mutation testing 39% (elapsed: ~49m, remaining: ~1h 14m) 813/2034 tested (614 survived, 75 timed out)
Mutation testing 40% (elapsed: ~50m, remaining: ~1h 13m) 821/2034 tested (616 survived, 75 timed out)
Mutation testing 40% (elapsed: ~50m, remaining: ~1h 13m) 823/2034 tested (618 survived, 75 timed out)
Mutation testing 40% (elapsed: ~50m, remaining: ~1h 13m) 827/2034 tested (622 survived, 75 timed out)
Mutation testing 40% (elapsed: ~50m, remaining: ~1h 13m) 829/2034 tested (624 survived, 75 timed out)
Mutation testing 40% (elapsed: ~50m, remaining: ~1h 13m) 831/2034 tested (626 survived, 75 timed out)
Mutation testing 41% (elapsed: ~50m, remaining: ~1h 12m) 835/2034 tested (630 survived, 75 timed out)
Mutation testing 41% (elapsed: ~51m, remaining: ~1h 12m) 837/2034 tested (632 survived, 75 timed out)
Mutation testing 41% (elapsed: ~51m, remaining: ~1h 12m) 839/2034 tested (634 survived, 75 timed out)
Mutation testing 41% (elapsed: ~51m, remaining: ~1h 12m) 843/2034 tested (638 survived, 75 timed out)
Mutation testing 41% (elapsed: ~51m, remaining: ~1h 12m) 845/2034 tested (640 survived, 75 timed out)
Mutation testing 41% (elapsed: ~51m, remaining: ~1h 12m) 847/2034 tested (642 survived, 75 timed out)
Mutation testing 41% (elapsed: ~51m, remaining: ~1h 12m) 851/2034 tested (646 survived, 75 timed out)
Mutation testing 42% (elapsed: ~52m, remaining: ~1h 11m) 855/2034 tested (647 survived, 75 timed out)
Mutation testing 42% (elapsed: ~52m, remaining: ~1h 11m) 858/2034 tested (650 survived, 75 timed out)
Mutation testing 42% (elapsed: ~52m, remaining: ~1h 11m) 861/2034 tested (653 survived, 75 timed out)
Mutation testing 42% (elapsed: ~52m, remaining: ~1h 11m) 864/2034 tested (656 survived, 75 timed out)
Mutation testing 42% (elapsed: ~52m, remaining: ~1h 10m) 867/2034 tested (659 survived, 75 timed out)
Mutation testing 42% (elapsed: ~52m, remaining: ~1h 10m) 870/2034 tested (662 survived, 75 timed out)
Mutation testing 42% (elapsed: ~53m, remaining: ~1h 10m) 873/2034 tested (665 survived, 75 timed out)
Mutation testing 43% (elapsed: ~53m, remaining: ~1h 10m) 876/2034 tested (668 survived, 75 timed out)
Mutation testing 43% (elapsed: ~53m, remaining: ~1h 10m) 879/2034 tested (671 survived, 75 timed out)
Mutation testing 43% (elapsed: ~53m, remaining: ~1h 9m) 883/2034 tested (674 survived, 75 timed out)
Mutation testing 43% (elapsed: ~53m, remaining: ~1h 9m) 885/2034 tested (676 survived, 75 timed out)
Mutation testing 43% (elapsed: ~53m, remaining: ~1h 9m) 888/2034 tested (679 survived, 75 timed out)
Mutation testing 43% (elapsed: ~54m, remaining: ~1h 9m) 891/2034 tested (681 survived, 75 timed out)
Mutation testing 43% (elapsed: ~54m, remaining: ~1h 9m) 894/2034 tested (682 survived, 75 timed out)
Mutation testing 44% (elapsed: ~54m, remaining: ~1h 9m) 896/2034 tested (684 survived, 75 timed out)
Mutation testing 44% (elapsed: ~54m, remaining: ~1h 9m) 897/2034 tested (684 survived, 76 timed out)
Mutation testing 44% (elapsed: ~54m, remaining: ~1h 9m) 899/2034 tested (685 survived, 77 timed out)
Mutation testing 44% (elapsed: ~54m, remaining: ~1h 8m) 901/2034 tested (686 survived, 78 timed out)
Mutation testing 44% (elapsed: ~55m, remaining: ~1h 9m) 902/2034 tested (686 survived, 78 timed out)
Mutation testing 44% (elapsed: ~55m, remaining: ~1h 8m) 904/2034 tested (686 survived, 80 timed out)
Mutation testing 44% (elapsed: ~55m, remaining: ~1h 8m) 906/2034 tested (687 survived, 81 timed out)
Mutation testing 44% (elapsed: ~55m, remaining: ~1h 8m) 908/2034 tested (689 survived, 81 timed out)
Mutation testing 44% (elapsed: ~55m, remaining: ~1h 8m) 914/2034 tested (692 survived, 81 timed out)
Mutation testing 45% (elapsed: ~55m, remaining: ~1h 8m) 917/2034 tested (695 survived, 81 timed out)
Mutation testing 45% (elapsed: ~56m, remaining: ~1h 7m) 920/2034 tested (698 survived, 81 timed out)
Mutation testing 45% (elapsed: ~56m, remaining: ~1h 7m) 923/2034 tested (701 survived, 81 timed out)
Mutation testing 45% (elapsed: ~56m, remaining: ~1h 7m) 926/2034 tested (704 survived, 81 timed out)
Mutation testing 45% (elapsed: ~56m, remaining: ~1h 7m) 929/2034 tested (707 survived, 81 timed out)
Mutation testing 45% (elapsed: ~56m, remaining: ~1h 7m) 932/2034 tested (710 survived, 81 timed out)
Mutation testing 45% (elapsed: ~56m, remaining: ~1h 6m) 934/2034 tested (712 survived, 81 timed out)
Mutation testing 46% (elapsed: ~57m, remaining: ~1h 6m) 938/2034 tested (716 survived, 81 timed out)
Mutation testing 46% (elapsed: ~57m, remaining: ~1h 6m) 940/2034 tested (718 survived, 81 timed out)
Mutation testing 46% (elapsed: ~57m, remaining: ~1h 6m) 943/2034 tested (721 survived, 81 timed out)
Mutation testing 46% (elapsed: ~57m, remaining: ~1h 6m) 946/2034 tested (724 survived, 81 timed out)
Mutation testing 46% (elapsed: ~57m, remaining: ~1h 5m) 949/2034 tested (727 survived, 81 timed out)
Mutation testing 46% (elapsed: ~57m, remaining: ~1h 5m) 952/2034 tested (730 survived, 81 timed out)
Mutation testing 46% (elapsed: ~58m, remaining: ~1h 5m) 955/2034 tested (733 survived, 81 timed out)
Mutation testing 47% (elapsed: ~58m, remaining: ~1h 5m) 958/2034 tested (736 survived, 81 timed out)
Mutation testing 47% (elapsed: ~58m, remaining: ~1h 5m) 961/2034 tested (739 survived, 81 timed out)
Mutation testing 47% (elapsed: ~58m, remaining: ~1h 5m) 963/2034 tested (741 survived, 81 timed out)
Mutation testing 47% (elapsed: ~58m, remaining: ~1h 5m) 964/2034 tested (741 survived, 82 timed out)
Mutation testing 47% (elapsed: ~58m, remaining: ~1h 5m) 966/2034 tested (742 survived, 83 timed out)
Mutation testing 47% (elapsed: ~59m, remaining: ~1h 4m) 969/2034 tested (744 survived, 84 timed out)
Mutation testing 47% (elapsed: ~59m, remaining: ~1h 4m) 972/2034 tested (747 survived, 84 timed out)
Mutation testing 47% (elapsed: ~59m, remaining: ~1h 4m) 975/2034 tested (750 survived, 84 timed out)
Mutation testing 48% (elapsed: ~59m, remaining: ~1h 4m) 978/2034 tested (753 survived, 84 timed out)
Mutation testing 48% (elapsed: ~59m, remaining: ~1h 4m) 980/2034 tested (755 survived, 84 timed out)
Mutation testing 48% (elapsed: ~59m, remaining: ~1h 3m) 984/2034 tested (759 survived, 84 timed out)
Mutation testing 48% (elapsed: ~1h 0m, remaining: ~1h 3m) 986/2034 tested (761 survived, 84 timed out)
Mutation testing 48% (elapsed: ~1h 0m, remaining: ~1h 3m) 990/2034 tested (765 survived, 84 timed out)
Mutation testing 48% (elapsed: ~1h 0m, remaining: ~1h 3m) 992/2034 tested (767 survived, 84 timed out)
Mutation testing 48% (elapsed: ~1h 0m, remaining: ~1h 3m) 996/2034 tested (771 survived, 84 timed out)
Mutation testing 49% (elapsed: ~1h 0m, remaining: ~1h 2m) 998/2034 tested (773 survived, 84 timed out)
Mutation testing 49% (elapsed: ~1h 0m, remaining: ~1h 2m) 1001/2034 tested (776 survived, 84 timed out)
Mutation testing 49% (elapsed: ~1h 1m, remaining: ~1h 2m) 1004/2034 tested (779 survived, 84 timed out)
Mutation testing 49% (elapsed: ~1h 1m, remaining: ~1h 2m) 1007/2034 tested (782 survived, 84 timed out)
Mutation testing 49% (elapsed: ~1h 1m, remaining: ~1h 2m) 1010/2034 tested (785 survived, 84 timed out)
Mutation testing 49% (elapsed: ~1h 1m, remaining: ~1h 1m) 1013/2034 tested (788 survived, 84 timed out)
Mutation testing 49% (elapsed: ~1h 1m, remaining: ~1h 1m) 1016/2034 tested (791 survived, 84 timed out)
Mutation testing 50% (elapsed: ~1h 1m, remaining: ~1h 1m) 1018/2034 tested (793 survived, 84 timed out)
Mutation testing 50% (elapsed: ~1h 2m, remaining: ~1h 1m) 1021/2034 tested (793 survived, 84 timed out)
Mutation testing 50% (elapsed: ~1h 2m, remaining: ~1h 1m) 1024/2034 tested (793 survived, 84 timed out)
Mutation testing 50% (elapsed: ~1h 2m, remaining: ~1h 1m) 1026/2034 tested (793 survived, 84 timed out)
Mutation testing 50% (elapsed: ~1h 2m, remaining: ~1h 0m) 1030/2034 tested (793 survived, 84 timed out)
Mutation testing 50% (elapsed: ~1h 2m, remaining: ~1h 0m) 1032/2034 tested (795 survived, 84 timed out)
Mutation testing 50% (elapsed: ~1h 2m, remaining: ~1h 0m) 1035/2034 tested (798 survived, 84 timed out)
Mutation testing 51% (elapsed: ~1h 3m, remaining: ~1h 0m) 1038/2034 tested (801 survived, 84 timed out)
Mutation testing 51% (elapsed: ~1h 3m, remaining: ~1h 0m) 1041/2034 tested (804 survived, 84 timed out)
Mutation testing 51% (elapsed: ~1h 3m, remaining: ~1h 0m) 1044/2034 tested (807 survived, 84 timed out)
Mutation testing 51% (elapsed: ~1h 3m, remaining: ~59m) 1047/2034 tested (810 survived, 84 timed out)
Mutation testing 51% (elapsed: ~1h 3m, remaining: ~59m) 1050/2034 tested (813 survived, 84 timed out)
Mutation testing 51% (elapsed: ~1h 3m, remaining: ~59m) 1053/2034 tested (816 survived, 84 timed out)
Mutation testing 51% (elapsed: ~1h 4m, remaining: ~59m) 1056/2034 tested (819 survived, 84 timed out)
Mutation testing 52% (elapsed: ~1h 4m, remaining: ~59m) 1058/2034 tested (821 survived, 84 timed out)
Mutation testing 52% (elapsed: ~1h 4m, remaining: ~58m) 1062/2034 tested (825 survived, 84 timed out)
Mutation testing 52% (elapsed: ~1h 4m, remaining: ~58m) 1064/2034 tested (827 survived, 84 timed out)
Mutation testing 52% (elapsed: ~1h 4m, remaining: ~58m) 1068/2034 tested (831 survived, 84 timed out)
Mutation testing 52% (elapsed: ~1h 4m, remaining: ~58m) 1070/2034 tested (833 survived, 84 timed out)
Mutation testing 52% (elapsed: ~1h 5m, remaining: ~58m) 1073/2034 tested (836 survived, 84 timed out)
Mutation testing 52% (elapsed: ~1h 5m, remaining: ~58m) 1076/2034 tested (839 survived, 84 timed out)
Mutation testing 53% (elapsed: ~1h 5m, remaining: ~57m) 1079/2034 tested (842 survived, 84 timed out)
Mutation testing 53% (elapsed: ~1h 5m, remaining: ~57m) 1082/2034 tested (845 survived, 84 timed out)
Mutation testing 53% (elapsed: ~1h 5m, remaining: ~57m) 1085/2034 tested (848 survived, 84 timed out)
Mutation testing 53% (elapsed: ~1h 5m, remaining: ~57m) 1088/2034 tested (851 survived, 84 timed out)
Mutation testing 53% (elapsed: ~1h 6m, remaining: ~57m) 1091/2034 tested (854 survived, 84 timed out)
Mutation testing 53% (elapsed: ~1h 6m, remaining: ~56m) 1094/2034 tested (857 survived, 84 timed out)
Mutation testing 53% (elapsed: ~1h 6m, remaining: ~56m) 1096/2034 tested (859 survived, 84 timed out)
Mutation testing 54% (elapsed: ~1h 6m, remaining: ~56m) 1100/2034 tested (863 survived, 84 timed out)
Mutation testing 54% (elapsed: ~1h 6m, remaining: ~56m) 1102/2034 tested (865 survived, 84 timed out)
Mutation testing 54% (elapsed: ~1h 6m, remaining: ~56m) 1106/2034 tested (869 survived, 84 timed out)
Mutation testing 54% (elapsed: ~1h 7m, remaining: ~55m) 1108/2034 tested (871 survived, 84 timed out)
Mutation testing 54% (elapsed: ~1h 7m, remaining: ~55m) 1111/2034 tested (874 survived, 84 timed out)
Mutation testing 54% (elapsed: ~1h 7m, remaining: ~55m) 1114/2034 tested (877 survived, 84 timed out)
Mutation testing 54% (elapsed: ~1h 7m, remaining: ~55m) 1117/2034 tested (880 survived, 84 timed out)
Mutation testing 55% (elapsed: ~1h 7m, remaining: ~55m) 1120/2034 tested (883 survived, 84 timed out)
Mutation testing 55% (elapsed: ~1h 7m, remaining: ~55m) 1123/2034 tested (886 survived, 84 timed out)
Mutation testing 55% (elapsed: ~1h 8m, remaining: ~54m) 1126/2034 tested (889 survived, 84 timed out)
Mutation testing 55% (elapsed: ~1h 8m, remaining: ~54m) 1129/2034 tested (892 survived, 84 timed out)
Mutation testing 55% (elapsed: ~1h 8m, remaining: ~54m) 1132/2034 tested (895 survived, 84 timed out)
Mutation testing 55% (elapsed: ~1h 8m, remaining: ~54m) 1134/2034 tested (897 survived, 84 timed out)
Mutation testing 55% (elapsed: ~1h 8m, remaining: ~54m) 1138/2034 tested (901 survived, 84 timed out)
Mutation testing 56% (elapsed: ~1h 8m, remaining: ~53m) 1140/2034 tested (903 survived, 84 timed out)
Mutation testing 56% (elapsed: ~1h 9m, remaining: ~53m) 1144/2034 tested (907 survived, 84 timed out)
Mutation testing 56% (elapsed: ~1h 9m, remaining: ~53m) 1146/2034 tested (909 survived, 84 timed out)
Mutation testing 56% (elapsed: ~1h 9m, remaining: ~53m) 1150/2034 tested (913 survived, 84 timed out)
Mutation testing 56% (elapsed: ~1h 9m, remaining: ~53m) 1152/2034 tested (915 survived, 84 timed out)
Mutation testing 56% (elapsed: ~1h 9m, remaining: ~53m) 1155/2034 tested (918 survived, 84 timed out)
Mutation testing 56% (elapsed: ~1h 9m, remaining: ~52m) 1158/2034 tested (921 survived, 84 timed out)
Mutation testing 57% (elapsed: ~1h 10m, remaining: ~52m) 1161/2034 tested (924 survived, 84 timed out)
Mutation testing 57% (elapsed: ~1h 10m, remaining: ~52m) 1164/2034 tested (927 survived, 84 timed out)
Mutation testing 57% (elapsed: ~1h 10m, remaining: ~52m) 1167/2034 tested (930 survived, 84 timed out)
Mutation testing 57% (elapsed: ~1h 10m, remaining: ~52m) 1170/2034 tested (933 survived, 84 timed out)
Mutation testing 57% (elapsed: ~1h 10m, remaining: ~51m) 1173/2034 tested (936 survived, 84 timed out)
Mutation testing 57% (elapsed: ~1h 10m, remaining: ~51m) 1176/2034 tested (939 survived, 84 timed out)
Mutation testing 57% (elapsed: ~1h 11m, remaining: ~51m) 1178/2034 tested (941 survived, 84 timed out)
Mutation testing 58% (elapsed: ~1h 11m, remaining: ~51m) 1182/2034 tested (945 survived, 84 timed out)
Mutation testing 58% (elapsed: ~1h 11m, remaining: ~51m) 1184/2034 tested (947 survived, 84 timed out)
Mutation testing 58% (elapsed: ~1h 11m, remaining: ~50m) 1188/2034 tested (951 survived, 84 timed out)
Mutation testing 58% (elapsed: ~1h 11m, remaining: ~50m) 1190/2034 tested (953 survived, 84 timed out)
Mutation testing 58% (elapsed: ~1h 11m, remaining: ~50m) 1194/2034 tested (957 survived, 84 timed out)
Mutation testing 58% (elapsed: ~1h 12m, remaining: ~50m) 1196/2034 tested (959 survived, 84 timed out)
Mutation testing 58% (elapsed: ~1h 12m, remaining: ~50m) 1199/2034 tested (962 survived, 84 timed out)
Mutation testing 59% (elapsed: ~1h 12m, remaining: ~50m) 1202/2034 tested (965 survived, 84 timed out)
Mutation testing 59% (elapsed: ~1h 12m, remaining: ~49m) 1205/2034 tested (968 survived, 84 timed out)
Mutation testing 59% (elapsed: ~1h 12m, remaining: ~49m) 1208/2034 tested (971 survived, 84 timed out)
Mutation testing 59% (elapsed: ~1h 12m, remaining: ~49m) 1211/2034 tested (974 survived, 84 timed out)
Mutation testing 59% (elapsed: ~1h 13m, remaining: ~49m) 1214/2034 tested (977 survived, 84 timed out)
Mutation testing 59% (elapsed: ~1h 13m, remaining: ~49m) 1217/2034 tested (980 survived, 84 timed out)
Mutation testing 59% (elapsed: ~1h 13m, remaining: ~48m) 1220/2034 tested (983 survived, 84 timed out)
Mutation testing 60% (elapsed: ~1h 13m, remaining: ~48m) 1222/2034 tested (985 survived, 84 timed out)
Mutation testing 60% (elapsed: ~1h 13m, remaining: ~48m) 1226/2034 tested (989 survived, 84 timed out)
Mutation testing 60% (elapsed: ~1h 13m, remaining: ~48m) 1228/2034 tested (991 survived, 84 timed out)
Mutation testing 60% (elapsed: ~1h 14m, remaining: ~48m) 1232/2034 tested (995 survived, 84 timed out)
Mutation testing 60% (elapsed: ~1h 14m, remaining: ~48m) 1234/2034 tested (997 survived, 84 timed out)
Mutation testing 60% (elapsed: ~1h 14m, remaining: ~47m) 1238/2034 tested (1001 survived, 84 timed out)
Mutation testing 60% (elapsed: ~1h 14m, remaining: ~47m) 1240/2034 tested (1003 survived, 84 timed out)
Mutation testing 61% (elapsed: ~1h 14m, remaining: ~47m) 1243/2034 tested (1006 survived, 84 timed out)
Mutation testing 61% (elapsed: ~1h 14m, remaining: ~47m) 1246/2034 tested (1009 survived, 84 timed out)
Mutation testing 61% (elapsed: ~1h 15m, remaining: ~47m) 1249/2034 tested (1012 survived, 84 timed out)
Mutation testing 61% (elapsed: ~1h 15m, remaining: ~46m) 1252/2034 tested (1015 survived, 84 timed out)
Mutation testing 61% (elapsed: ~1h 15m, remaining: ~46m) 1255/2034 tested (1018 survived, 84 timed out)
Mutation testing 61% (elapsed: ~1h 15m, remaining: ~46m) 1258/2034 tested (1021 survived, 84 timed out)
Mutation testing 61% (elapsed: ~1h 15m, remaining: ~46m) 1260/2034 tested (1023 survived, 84 timed out)
Mutation testing 62% (elapsed: ~1h 15m, remaining: ~46m) 1264/2034 tested (1027 survived, 84 timed out)
Mutation testing 62% (elapsed: ~1h 16m, remaining: ~46m) 1266/2034 tested (1029 survived, 84 timed out)
Mutation testing 62% (elapsed: ~1h 16m, remaining: ~45m) 1270/2034 tested (1033 survived, 84 timed out)
Mutation testing 62% (elapsed: ~1h 16m, remaining: ~45m) 1272/2034 tested (1035 survived, 84 timed out)
Mutation testing 62% (elapsed: ~1h 16m, remaining: ~45m) 1276/2034 tested (1039 survived, 84 timed out)
Mutation testing 62% (elapsed: ~1h 16m, remaining: ~45m) 1278/2034 tested (1041 survived, 84 timed out)
Mutation testing 62% (elapsed: ~1h 16m, remaining: ~45m) 1281/2034 tested (1044 survived, 84 timed out)
Mutation testing 63% (elapsed: ~1h 17m, remaining: ~44m) 1284/2034 tested (1047 survived, 84 timed out)
Mutation testing 63% (elapsed: ~1h 17m, remaining: ~44m) 1287/2034 tested (1050 survived, 84 timed out)
Mutation testing 63% (elapsed: ~1h 17m, remaining: ~44m) 1290/2034 tested (1053 survived, 84 timed out)
Mutation testing 63% (elapsed: ~1h 17m, remaining: ~44m) 1293/2034 tested (1056 survived, 84 timed out)
Mutation testing 63% (elapsed: ~1h 17m, remaining: ~44m) 1296/2034 tested (1059 survived, 84 timed out)
Mutation testing 63% (elapsed: ~1h 17m, remaining: ~44m) 1298/2034 tested (1061 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 18m, remaining: ~43m) 1302/2034 tested (1065 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 18m, remaining: ~43m) 1304/2034 tested (1067 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 18m, remaining: ~43m) 1308/2034 tested (1071 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 18m, remaining: ~43m) 1310/2034 tested (1073 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 18m, remaining: ~43m) 1314/2034 tested (1077 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 18m, remaining: ~43m) 1316/2034 tested (1079 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 19m, remaining: ~42m) 1320/2034 tested (1083 survived, 84 timed out)
Mutation testing 64% (elapsed: ~1h 19m, remaining: ~42m) 1322/2034 tested (1085 survived, 84 timed out)
Mutation testing 65% (elapsed: ~1h 19m, remaining: ~42m) 1325/2034 tested (1088 survived, 84 timed out)
Mutation testing 65% (elapsed: ~1h 19m, remaining: ~42m) 1328/2034 tested (1091 survived, 84 timed out)
Mutation testing 65% (elapsed: ~1h 19m, remaining: ~42m) 1331/2034 tested (1094 survived, 84 timed out)
Mutation testing 65% (elapsed: ~1h 19m, remaining: ~41m) 1334/2034 tested (1097 survived, 84 timed out)
Mutation testing 65% (elapsed: ~1h 20m, remaining: ~41m) 1337/2034 tested (1100 survived, 84 timed out)
Mutation testing 65% (elapsed: ~1h 20m, remaining: ~41m) 1340/2034 tested (1103 survived, 84 timed out)
Mutation testing 65% (elapsed: ~1h 20m, remaining: ~41m) 1342/2034 tested (1105 survived, 84 timed out)
Mutation testing 66% (elapsed: ~1h 20m, remaining: ~41m) 1346/2034 tested (1109 survived, 84 timed out)
Mutation testing 66% (elapsed: ~1h 20m, remaining: ~41m) 1348/2034 tested (1111 survived, 84 timed out)
Mutation testing 66% (elapsed: ~1h 20m, remaining: ~40m) 1352/2034 tested (1115 survived, 84 timed out)
Mutation testing 66% (elapsed: ~1h 21m, remaining: ~40m) 1354/2034 tested (1117 survived, 84 timed out)
Mutation testing 66% (elapsed: ~1h 21m, remaining: ~40m) 1358/2034 tested (1121 survived, 84 timed out)
Mutation testing 66% (elapsed: ~1h 21m, remaining: ~40m) 1360/2034 tested (1123 survived, 84 timed out)
Mutation testing 67% (elapsed: ~1h 21m, remaining: ~40m) 1364/2034 tested (1127 survived, 84 timed out)
Mutation testing 67% (elapsed: ~1h 21m, remaining: ~39m) 1366/2034 tested (1129 survived, 84 timed out)
Mutation testing 67% (elapsed: ~1h 21m, remaining: ~39m) 1369/2034 tested (1132 survived, 84 timed out)
Mutation testing 67% (elapsed: ~1h 22m, remaining: ~39m) 1372/2034 tested (1135 survived, 84 timed out)
Mutation testing 67% (elapsed: ~1h 22m, remaining: ~39m) 1375/2034 tested (1138 survived, 84 timed out)
Mutation testing 67% (elapsed: ~1h 22m, remaining: ~39m) 1378/2034 tested (1141 survived, 84 timed out)
Mutation testing 67% (elapsed: ~1h 22m, remaining: ~39m) 1381/2034 tested (1144 survived, 84 timed out)
Mutation testing 68% (elapsed: ~1h 22m, remaining: ~38m) 1384/2034 tested (1147 survived, 84 timed out)
Mutation testing 68% (elapsed: ~1h 22m, remaining: ~38m) 1386/2034 tested (1149 survived, 84 timed out)
Mutation testing 68% (elapsed: ~1h 23m, remaining: ~38m) 1390/2034 tested (1153 survived, 84 timed out)
Mutation testing 68% (elapsed: ~1h 23m, remaining: ~38m) 1392/2034 tested (1155 survived, 84 timed out)
Mutation testing 68% (elapsed: ~1h 23m, remaining: ~38m) 1396/2034 tested (1159 survived, 84 timed out)
Mutation testing 68% (elapsed: ~1h 23m, remaining: ~37m) 1398/2034 tested (1161 survived, 84 timed out)
Mutation testing 68% (elapsed: ~1h 23m, remaining: ~37m) 1402/2034 tested (1165 survived, 84 timed out)
Mutation testing 69% (elapsed: ~1h 23m, remaining: ~37m) 1404/2034 tested (1167 survived, 84 timed out)
Mutation testing 69% (elapsed: ~1h 24m, remaining: ~37m) 1407/2034 tested (1170 survived, 84 timed out)
Mutation testing 69% (elapsed: ~1h 24m, remaining: ~37m) 1410/2034 tested (1173 survived, 84 timed out)
Mutation testing 69% (elapsed: ~1h 24m, remaining: ~37m) 1413/2034 tested (1176 survived, 84 timed out)
Mutation testing 69% (elapsed: ~1h 24m, remaining: ~36m) 1416/2034 tested (1179 survived, 84 timed out)
Mutation testing 69% (elapsed: ~1h 24m, remaining: ~36m) 1419/2034 tested (1182 survived, 84 timed out)
Mutation testing 69% (elapsed: ~1h 24m, remaining: ~36m) 1422/2034 tested (1185 survived, 84 timed out)
Mutation testing 70% (elapsed: ~1h 25m, remaining: ~36m) 1424/2034 tested (1187 survived, 84 timed out)
Mutation testing 70% (elapsed: ~1h 25m, remaining: ~36m) 1428/2034 tested (1191 survived, 84 timed out)
Mutation testing 70% (elapsed: ~1h 25m, remaining: ~36m) 1430/2034 tested (1193 survived, 84 timed out)
Mutation testing 70% (elapsed: ~1h 25m, remaining: ~35m) 1434/2034 tested (1197 survived, 84 timed out)
Mutation testing 70% (elapsed: ~1h 25m, remaining: ~35m) 1436/2034 tested (1199 survived, 84 timed out)
Mutation testing 70% (elapsed: ~1h 25m, remaining: ~35m) 1440/2034 tested (1203 survived, 84 timed out)
Mutation testing 70% (elapsed: ~1h 26m, remaining: ~35m) 1442/2034 tested (1205 survived, 84 timed out)
Mutation testing 71% (elapsed: ~1h 26m, remaining: ~35m) 1445/2034 tested (1208 survived, 84 timed out)
Mutation testing 71% (elapsed: ~1h 26m, remaining: ~34m) 1448/2034 tested (1211 survived, 84 timed out)
Mutation testing 71% (elapsed: ~1h 26m, remaining: ~34m) 1451/2034 tested (1214 survived, 84 timed out)
Mutation testing 71% (elapsed: ~1h 26m, remaining: ~34m) 1454/2034 tested (1217 survived, 84 timed out)
Mutation testing 71% (elapsed: ~1h 26m, remaining: ~34m) 1457/2034 tested (1220 survived, 84 timed out)
Mutation testing 71% (elapsed: ~1h 27m, remaining: ~34m) 1460/2034 tested (1223 survived, 84 timed out)
Mutation testing 71% (elapsed: ~1h 27m, remaining: ~34m) 1462/2034 tested (1225 survived, 84 timed out)
Mutation testing 72% (elapsed: ~1h 27m, remaining: ~33m) 1466/2034 tested (1229 survived, 84 timed out)
Mutation testing 72% (elapsed: ~1h 27m, remaining: ~33m) 1468/2034 tested (1231 survived, 84 timed out)
Mutation testing 72% (elapsed: ~1h 27m, remaining: ~33m) 1472/2034 tested (1235 survived, 84 timed out)
Mutation testing 72% (elapsed: ~1h 27m, remaining: ~33m) 1474/2034 tested (1237 survived, 84 timed out)
Mutation testing 72% (elapsed: ~1h 28m, remaining: ~33m) 1478/2034 tested (1241 survived, 84 timed out)
Mutation testing 72% (elapsed: ~1h 28m, remaining: ~33m) 1480/2034 tested (1243 survived, 84 timed out)
Mutation testing 72% (elapsed: ~1h 28m, remaining: ~32m) 1484/2034 tested (1247 survived, 84 timed out)
Mutation testing 73% (elapsed: ~1h 28m, remaining: ~32m) 1486/2034 tested (1249 survived, 84 timed out)
Mutation testing 73% (elapsed: ~1h 28m, remaining: ~32m) 1489/2034 tested (1252 survived, 84 timed out)
Mutation testing 73% (elapsed: ~1h 28m, remaining: ~32m) 1492/2034 tested (1255 survived, 84 timed out)
Mutation testing 73% (elapsed: ~1h 29m, remaining: ~32m) 1495/2034 tested (1258 survived, 84 timed out)
Mutation testing 73% (elapsed: ~1h 29m, remaining: ~31m) 1498/2034 tested (1261 survived, 84 timed out)
Mutation testing 73% (elapsed: ~1h 29m, remaining: ~31m) 1500/2034 tested (1263 survived, 84 timed out)
Mutation testing 73% (elapsed: ~1h 29m, remaining: ~31m) 1504/2034 tested (1267 survived, 84 timed out)
Mutation testing 74% (elapsed: ~1h 29m, remaining: ~31m) 1506/2034 tested (1269 survived, 84 timed out)
Mutation testing 74% (elapsed: ~1h 29m, remaining: ~31m) 1510/2034 tested (1273 survived, 84 timed out)
Mutation testing 74% (elapsed: ~1h 30m, remaining: ~31m) 1512/2034 tested (1275 survived, 84 timed out)
Mutation testing 74% (elapsed: ~1h 30m, remaining: ~30m) 1516/2034 tested (1279 survived, 84 timed out)
Mutation testing 74% (elapsed: ~1h 30m, remaining: ~30m) 1518/2034 tested (1281 survived, 84 timed out)
Mutation testing 74% (elapsed: ~1h 30m, remaining: ~30m) 1522/2034 tested (1285 survived, 84 timed out)
Mutation testing 74% (elapsed: ~1h 30m, remaining: ~30m) 1524/2034 tested (1287 survived, 84 timed out)
Mutation testing 75% (elapsed: ~1h 30m, remaining: ~30m) 1527/2034 tested (1290 survived, 84 timed out)
Mutation testing 75% (elapsed: ~1h 31m, remaining: ~29m) 1530/2034 tested (1293 survived, 84 timed out)
Mutation testing 75% (elapsed: ~1h 31m, remaining: ~29m) 1533/2034 tested (1296 survived, 84 timed out)
Mutation testing 75% (elapsed: ~1h 31m, remaining: ~29m) 1538/2034 tested (1299 survived, 84 timed out)
Mutation testing 75% (elapsed: ~1h 31m, remaining: ~29m) 1540/2034 tested (1301 survived, 84 timed out)
Mutation testing 75% (elapsed: ~1h 31m, remaining: ~29m) 1543/2034 tested (1304 survived, 84 timed out)
Mutation testing 76% (elapsed: ~1h 31m, remaining: ~28m) 1546/2034 tested (1307 survived, 84 timed out)
Mutation testing 76% (elapsed: ~1h 32m, remaining: ~28m) 1549/2034 tested (1310 survived, 84 timed out)
Mutation testing 76% (elapsed: ~1h 32m, remaining: ~28m) 1552/2034 tested (1313 survived, 84 timed out)
Mutation testing 76% (elapsed: ~1h 32m, remaining: ~28m) 1555/2034 tested (1316 survived, 84 timed out)
Mutation testing 76% (elapsed: ~1h 32m, remaining: ~28m) 1558/2034 tested (1319 survived, 84 timed out)
Mutation testing 76% (elapsed: ~1h 32m, remaining: ~28m) 1561/2034 tested (1322 survived, 84 timed out)
Mutation testing 76% (elapsed: ~1h 32m, remaining: ~27m) 1564/2034 tested (1325 survived, 84 timed out)
Mutation testing 77% (elapsed: ~1h 33m, remaining: ~27m) 1567/2034 tested (1328 survived, 84 timed out)
Mutation testing 77% (elapsed: ~1h 33m, remaining: ~27m) 1570/2034 tested (1331 survived, 84 timed out)
Mutation testing 77% (elapsed: ~1h 33m, remaining: ~27m) 1573/2034 tested (1334 survived, 84 timed out)
Mutation testing 77% (elapsed: ~1h 33m, remaining: ~27m) 1576/2034 tested (1337 survived, 84 timed out)
Mutation testing 77% (elapsed: ~1h 33m, remaining: ~27m) 1578/2034 tested (1339 survived, 84 timed out)
Mutation testing 77% (elapsed: ~1h 33m, remaining: ~26m) 1581/2034 tested (1342 survived, 84 timed out)
Mutation testing 77% (elapsed: ~1h 34m, remaining: ~26m) 1584/2034 tested (1345 survived, 84 timed out)
Mutation testing 78% (elapsed: ~1h 34m, remaining: ~26m) 1587/2034 tested (1348 survived, 84 timed out)
Mutation testing 78% (elapsed: ~1h 34m, remaining: ~26m) 1590/2034 tested (1351 survived, 84 timed out)
Mutation testing 78% (elapsed: ~1h 34m, remaining: ~26m) 1593/2034 tested (1354 survived, 84 timed out)
Mutation testing 78% (elapsed: ~1h 34m, remaining: ~25m) 1596/2034 tested (1357 survived, 84 timed out)
Mutation testing 78% (elapsed: ~1h 34m, remaining: ~25m) 1599/2034 tested (1360 survived, 84 timed out)
Mutation testing 78% (elapsed: ~1h 35m, remaining: ~25m) 1602/2034 tested (1363 survived, 84 timed out)
Mutation testing 78% (elapsed: ~1h 35m, remaining: ~25m) 1605/2034 tested (1366 survived, 84 timed out)
Mutation testing 79% (elapsed: ~1h 35m, remaining: ~25m) 1608/2034 tested (1369 survived, 84 timed out)
Mutation testing 79% (elapsed: ~1h 35m, remaining: ~25m) 1611/2034 tested (1372 survived, 84 timed out)
Mutation testing 79% (elapsed: ~1h 35m, remaining: ~24m) 1614/2034 tested (1375 survived, 84 timed out)
Mutation testing 79% (elapsed: ~1h 35m, remaining: ~24m) 1616/2034 tested (1377 survived, 84 timed out)
Mutation testing 79% (elapsed: ~1h 36m, remaining: ~24m) 1619/2034 tested (1380 survived, 84 timed out)
Mutation testing 79% (elapsed: ~1h 36m, remaining: ~24m) 1622/2034 tested (1383 survived, 84 timed out)
Mutation testing 79% (elapsed: ~1h 36m, remaining: ~24m) 1625/2034 tested (1386 survived, 84 timed out)
Mutation testing 80% (elapsed: ~1h 36m, remaining: ~24m) 1628/2034 tested (1389 survived, 84 timed out)
Mutation testing 80% (elapsed: ~1h 36m, remaining: ~23m) 1631/2034 tested (1392 survived, 84 timed out)
Mutation testing 80% (elapsed: ~1h 36m, remaining: ~23m) 1634/2034 tested (1395 survived, 84 timed out)
Mutation testing 80% (elapsed: ~1h 37m, remaining: ~23m) 1637/2034 tested (1398 survived, 84 timed out)
Mutation testing 80% (elapsed: ~1h 37m, remaining: ~23m) 1640/2034 tested (1401 survived, 84 timed out)
Mutation testing 80% (elapsed: ~1h 37m, remaining: ~23m) 1643/2034 tested (1404 survived, 84 timed out)
Mutation testing 80% (elapsed: ~1h 37m, remaining: ~22m) 1646/2034 tested (1407 survived, 84 timed out)
Mutation testing 81% (elapsed: ~1h 37m, remaining: ~22m) 1649/2034 tested (1410 survived, 84 timed out)
Mutation testing 81% (elapsed: ~1h 37m, remaining: ~22m) 1652/2034 tested (1413 survived, 84 timed out)
Mutation testing 81% (elapsed: ~1h 38m, remaining: ~22m) 1655/2034 tested (1416 survived, 84 timed out)
Mutation testing 81% (elapsed: ~1h 38m, remaining: ~22m) 1657/2034 tested (1418 survived, 84 timed out)
Mutation testing 81% (elapsed: ~1h 38m, remaining: ~22m) 1660/2034 tested (1421 survived, 84 timed out)
Mutation testing 81% (elapsed: ~1h 38m, remaining: ~21m) 1663/2034 tested (1424 survived, 84 timed out)
Mutation testing 81% (elapsed: ~1h 38m, remaining: ~21m) 1666/2034 tested (1427 survived, 84 timed out)
Mutation testing 82% (elapsed: ~1h 38m, remaining: ~21m) 1669/2034 tested (1430 survived, 84 timed out)
Mutation testing 82% (elapsed: ~1h 39m, remaining: ~21m) 1672/2034 tested (1433 survived, 84 timed out)
Mutation testing 82% (elapsed: ~1h 39m, remaining: ~21m) 1675/2034 tested (1436 survived, 84 timed out)
Mutation testing 82% (elapsed: ~1h 39m, remaining: ~21m) 1678/2034 tested (1439 survived, 84 timed out)
Mutation testing 82% (elapsed: ~1h 39m, remaining: ~20m) 1681/2034 tested (1442 survived, 84 timed out)
Mutation testing 82% (elapsed: ~1h 39m, remaining: ~20m) 1684/2034 tested (1445 survived, 84 timed out)
Mutation testing 82% (elapsed: ~1h 39m, remaining: ~20m) 1687/2034 tested (1448 survived, 84 timed out)
Mutation testing 83% (elapsed: ~1h 40m, remaining: ~20m) 1690/2034 tested (1451 survived, 84 timed out)
Mutation testing 83% (elapsed: ~1h 40m, remaining: ~20m) 1693/2034 tested (1454 survived, 84 timed out)
Mutation testing 83% (elapsed: ~1h 40m, remaining: ~20m) 1695/2034 tested (1456 survived, 84 timed out)
Mutation testing 83% (elapsed: ~1h 40m, remaining: ~19m) 1698/2034 tested (1459 survived, 84 timed out)
Mutation testing 83% (elapsed: ~1h 40m, remaining: ~19m) 1701/2034 tested (1462 survived, 84 timed out)
Mutation testing 83% (elapsed: ~1h 40m, remaining: ~19m) 1704/2034 tested (1465 survived, 84 timed out)
Mutation testing 83% (elapsed: ~1h 41m, remaining: ~19m) 1707/2034 tested (1468 survived, 84 timed out)
Mutation testing 84% (elapsed: ~1h 41m, remaining: ~19m) 1710/2034 tested (1471 survived, 84 timed out)
Mutation testing 84% (elapsed: ~1h 41m, remaining: ~18m) 1713/2034 tested (1474 survived, 84 timed out)
Mutation testing 84% (elapsed: ~1h 41m, remaining: ~18m) 1716/2034 tested (1477 survived, 84 timed out)
Mutation testing 84% (elapsed: ~1h 41m, remaining: ~18m) 1719/2034 tested (1480 survived, 84 timed out)
Mutation testing 84% (elapsed: ~1h 41m, remaining: ~18m) 1722/2034 tested (1483 survived, 84 timed out)
Mutation testing 84% (elapsed: ~1h 42m, remaining: ~18m) 1725/2034 tested (1486 survived, 84 timed out)
Mutation testing 84% (elapsed: ~1h 42m, remaining: ~18m) 1728/2034 tested (1489 survived, 84 timed out)
Mutation testing 85% (elapsed: ~1h 42m, remaining: ~17m) 1731/2034 tested (1492 survived, 84 timed out)
Mutation testing 85% (elapsed: ~1h 42m, remaining: ~17m) 1733/2034 tested (1494 survived, 84 timed out)
Mutation testing 85% (elapsed: ~1h 42m, remaining: ~17m) 1736/2034 tested (1497 survived, 84 timed out)
Mutation testing 85% (elapsed: ~1h 42m, remaining: ~17m) 1739/2034 tested (1500 survived, 84 timed out)
Mutation testing 85% (elapsed: ~1h 43m, remaining: ~17m) 1742/2034 tested (1503 survived, 84 timed out)
Mutation testing 85% (elapsed: ~1h 43m, remaining: ~17m) 1745/2034 tested (1506 survived, 84 timed out)
Mutation testing 85% (elapsed: ~1h 43m, remaining: ~16m) 1748/2034 tested (1509 survived, 84 timed out)
Mutation testing 86% (elapsed: ~1h 43m, remaining: ~16m) 1751/2034 tested (1512 survived, 84 timed out)
Mutation testing 86% (elapsed: ~1h 43m, remaining: ~16m) 1754/2034 tested (1515 survived, 84 timed out)
Mutation testing 86% (elapsed: ~1h 43m, remaining: ~16m) 1757/2034 tested (1518 survived, 84 timed out)
Mutation testing 86% (elapsed: ~1h 44m, remaining: ~16m) 1760/2034 tested (1521 survived, 84 timed out)
Mutation testing 86% (elapsed: ~1h 44m, remaining: ~16m) 1763/2034 tested (1524 survived, 84 timed out)
Mutation testing 86% (elapsed: ~1h 44m, remaining: ~15m) 1765/2034 tested (1526 survived, 84 timed out)
Mutation testing 86% (elapsed: ~1h 44m, remaining: ~15m) 1769/2034 tested (1530 survived, 84 timed out)
Mutation testing 87% (elapsed: ~1h 44m, remaining: ~15m) 1771/2034 tested (1532 survived, 84 timed out)
Mutation testing 87% (elapsed: ~1h 44m, remaining: ~15m) 1774/2034 tested (1535 survived, 84 timed out)
Mutation testing 87% (elapsed: ~1h 45m, remaining: ~15m) 1777/2034 tested (1538 survived, 84 timed out)
Mutation testing 87% (elapsed: ~1h 45m, remaining: ~15m) 1780/2034 tested (1541 survived, 84 timed out)
Mutation testing 87% (elapsed: ~1h 45m, remaining: ~14m) 1783/2034 tested (1544 survived, 84 timed out)
Mutation testing 87% (elapsed: ~1h 45m, remaining: ~14m) 1786/2034 tested (1547 survived, 84 timed out)
Mutation testing 87% (elapsed: ~1h 45m, remaining: ~14m) 1789/2034 tested (1550 survived, 84 timed out)
Mutation testing 88% (elapsed: ~1h 45m, remaining: ~14m) 1792/2034 tested (1553 survived, 84 timed out)
Mutation testing 88% (elapsed: ~1h 46m, remaining: ~14m) 1795/2034 tested (1556 survived, 84 timed out)
Mutation testing 88% (elapsed: ~1h 46m, remaining: ~13m) 1798/2034 tested (1559 survived, 84 timed out)
Mutation testing 88% (elapsed: ~1h 46m, remaining: ~13m) 1801/2034 tested (1562 survived, 84 timed out)
Mutation testing 88% (elapsed: ~1h 46m, remaining: ~13m) 1804/2034 tested (1565 survived, 84 timed out)
Mutation testing 88% (elapsed: ~1h 46m, remaining: ~13m) 1807/2034 tested (1568 survived, 84 timed out)
Mutation testing 88% (elapsed: ~1h 46m, remaining: ~13m) 1809/2034 tested (1570 survived, 84 timed out)
Mutation testing 89% (elapsed: ~1h 47m, remaining: ~13m) 1812/2034 tested (1573 survived, 84 timed out)
Mutation testing 89% (elapsed: ~1h 47m, remaining: ~12m) 1815/2034 tested (1576 survived, 84 timed out)
Mutation testing 89% (elapsed: ~1h 47m, remaining: ~12m) 1818/2034 tested (1579 survived, 84 timed out)
Mutation testing 89% (elapsed: ~1h 47m, remaining: ~12m) 1821/2034 tested (1582 survived, 84 timed out)
Mutation testing 89% (elapsed: ~1h 47m, remaining: ~12m) 1824/2034 tested (1585 survived, 84 timed out)
Mutation testing 89% (elapsed: ~1h 47m, remaining: ~12m) 1827/2034 tested (1588 survived, 84 timed out)
Mutation testing 89% (elapsed: ~1h 48m, remaining: ~12m) 1830/2034 tested (1591 survived, 84 timed out)
Mutation testing 90% (elapsed: ~1h 48m, remaining: ~11m) 1833/2034 tested (1594 survived, 84 timed out)
Mutation testing 90% (elapsed: ~1h 48m, remaining: ~11m) 1836/2034 tested (1597 survived, 84 timed out)
Mutation testing 90% (elapsed: ~1h 48m, remaining: ~11m) 1839/2034 tested (1600 survived, 84 timed out)
Mutation testing 90% (elapsed: ~1h 48m, remaining: ~11m) 1842/2034 tested (1603 survived, 84 timed out)
Mutation testing 90% (elapsed: ~1h 48m, remaining: ~11m) 1845/2034 tested (1606 survived, 84 timed out)
Mutation testing 90% (elapsed: ~1h 49m, remaining: ~11m) 1847/2034 tested (1608 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 49m, remaining: ~10m) 1851/2034 tested (1612 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 49m, remaining: ~10m) 1853/2034 tested (1614 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 49m, remaining: ~10m) 1856/2034 tested (1617 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 49m, remaining: ~10m) 1859/2034 tested (1620 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 49m, remaining: ~10m) 1862/2034 tested (1623 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 50m, remaining: ~9m) 1865/2034 tested (1626 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 50m, remaining: ~9m) 1868/2034 tested (1629 survived, 84 timed out)
Mutation testing 91% (elapsed: ~1h 50m, remaining: ~9m) 1871/2034 tested (1632 survived, 84 timed out)
Mutation testing 92% (elapsed: ~1h 50m, remaining: ~9m) 1874/2034 tested (1635 survived, 84 timed out)
Mutation testing 92% (elapsed: ~1h 50m, remaining: ~9m) 1877/2034 tested (1638 survived, 84 timed out)
Mutation testing 92% (elapsed: ~1h 50m, remaining: ~9m) 1880/2034 tested (1641 survived, 84 timed out)
Mutation testing 92% (elapsed: ~1h 51m, remaining: ~8m) 1883/2034 tested (1644 survived, 84 timed out)
Mutation testing 92% (elapsed: ~1h 51m, remaining: ~8m) 1885/2034 tested (1646 survived, 84 timed out)
Mutation testing 92% (elapsed: ~1h 51m, remaining: ~8m) 1889/2034 tested (1650 survived, 84 timed out)
Mutation testing 92% (elapsed: ~1h 51m, remaining: ~8m) 1891/2034 tested (1652 survived, 84 timed out)
Mutation testing 93% (elapsed: ~1h 51m, remaining: ~8m) 1894/2034 tested (1655 survived, 84 timed out)
Mutation testing 93% (elapsed: ~1h 51m, remaining: ~8m) 1897/2034 tested (1658 survived, 84 timed out)
Mutation testing 93% (elapsed: ~1h 52m, remaining: ~7m) 1900/2034 tested (1661 survived, 84 timed out)
Mutation testing 93% (elapsed: ~1h 52m, remaining: ~7m) 1903/2034 tested (1664 survived, 84 timed out)
Mutation testing 93% (elapsed: ~1h 52m, remaining: ~7m) 1906/2034 tested (1667 survived, 84 timed out)
Mutation testing 93% (elapsed: ~1h 52m, remaining: ~7m) 1909/2034 tested (1670 survived, 84 timed out)
Mutation testing 94% (elapsed: ~1h 52m, remaining: ~7m) 1912/2034 tested (1673 survived, 84 timed out)
Mutation testing 94% (elapsed: ~1h 52m, remaining: ~7m) 1915/2034 tested (1676 survived, 84 timed out)
Mutation testing 94% (elapsed: ~1h 53m, remaining: ~6m) 1918/2034 tested (1679 survived, 84 timed out)
Mutation testing 94% (elapsed: ~1h 53m, remaining: ~6m) 1921/2034 tested (1682 survived, 84 timed out)
Mutation testing 94% (elapsed: ~1h 53m, remaining: ~6m) 1923/2034 tested (1684 survived, 84 timed out)
Mutation testing 94% (elapsed: ~1h 53m, remaining: ~6m) 1927/2034 tested (1688 survived, 84 timed out)
Mutation testing 94% (elapsed: ~1h 53m, remaining: ~6m) 1929/2034 tested (1690 survived, 84 timed out)
Mutation testing 95% (elapsed: ~1h 53m, remaining: ~5m) 1933/2034 tested (1694 survived, 84 timed out)
Mutation testing 95% (elapsed: ~1h 54m, remaining: ~5m) 1935/2034 tested (1696 survived, 84 timed out)
Mutation testing 95% (elapsed: ~1h 54m, remaining: ~5m) 1938/2034 tested (1699 survived, 84 timed out)
Mutation testing 95% (elapsed: ~1h 54m, remaining: ~5m) 1941/2034 tested (1702 survived, 84 timed out)
Mutation testing 95% (elapsed: ~1h 54m, remaining: ~5m) 1944/2034 tested (1705 survived, 84 timed out)
Mutation testing 95% (elapsed: ~1h 54m, remaining: ~5m) 1947/2034 tested (1708 survived, 84 timed out)
Mutation testing 95% (elapsed: ~1h 54m, remaining: ~4m) 1950/2034 tested (1711 survived, 84 timed out)
Mutation testing 96% (elapsed: ~1h 55m, remaining: ~4m) 1953/2034 tested (1714 survived, 84 timed out)
Mutation testing 96% (elapsed: ~1h 55m, remaining: ~4m) 1956/2034 tested (1717 survived, 84 timed out)
Mutation testing 96% (elapsed: ~1h 55m, remaining: ~4m) 1959/2034 tested (1720 survived, 84 timed out)
Mutation testing 96% (elapsed: ~1h 55m, remaining: ~4m) 1962/2034 tested (1723 survived, 84 timed out)
Mutation testing 96% (elapsed: ~1h 55m, remaining: ~4m) 1965/2034 tested (1726 survived, 84 timed out)
Mutation testing 96% (elapsed: ~1h 55m, remaining: ~3m) 1967/2034 tested (1728 survived, 84 timed out)
Mutation testing 96% (elapsed: ~1h 56m, remaining: ~3m) 1971/2034 tested (1732 survived, 84 timed out)
Mutation testing 97% (elapsed: ~1h 56m, remaining: ~3m) 1973/2034 tested (1734 survived, 84 timed out)
Mutation testing 97% (elapsed: ~1h 56m, remaining: ~3m) 1977/2034 tested (1738 survived, 84 timed out)
Mutation testing 97% (elapsed: ~1h 56m, remaining: ~3m) 1979/2034 tested (1740 survived, 84 timed out)
Mutation testing 97% (elapsed: ~1h 56m, remaining: ~3m) 1982/2034 tested (1743 survived, 84 timed out)
Mutation testing 97% (elapsed: ~1h 56m, remaining: ~2m) 1985/2034 tested (1746 survived, 84 timed out)
Mutation testing 97% (elapsed: ~1h 57m, remaining: ~2m) 1988/2034 tested (1749 survived, 84 timed out)
Mutation testing 97% (elapsed: ~1h 57m, remaining: ~2m) 1991/2034 tested (1752 survived, 84 timed out)
Mutation testing 98% (elapsed: ~1h 57m, remaining: ~2m) 1994/2034 tested (1755 survived, 84 timed out)
Mutation testing 98% (elapsed: ~1h 57m, remaining: ~2m) 1997/2034 tested (1758 survived, 84 timed out)
Mutation testing 98% (elapsed: ~1h 57m, remaining: ~2m) 2000/2034 tested (1761 survived, 84 timed out)
Mutation testing 98% (elapsed: ~1h 57m, remaining: ~1m) 2003/2034 tested (1764 survived, 84 timed out)
Mutation testing 98% (elapsed: ~1h 58m, remaining: ~1m) 2006/2034 tested (1767 survived, 84 timed out)
Mutation testing 98% (elapsed: ~1h 58m, remaining: ~1m) 2009/2034 tested (1770 survived, 84 timed out)
Mutation testing 98% (elapsed: ~1h 58m, remaining: ~1m) 2011/2034 tested (1772 survived, 84 timed out)
Mutation testing 99% (elapsed: ~1h 58m, remaining: <1m) 2017/2034 tested (1775 survived, 84 timed out)
Mutation testing 99% (elapsed: ~1h 58m, remaining: <1m) 2020/2034 tested (1778 survived, 84 timed out)
Mutation testing 99% (elapsed: ~1h 58m, remaining: <1m) 2023/2034 tested (1781 survived, 84 timed out)
Mutation testing 99% (elapsed: ~1h 59m, remaining: <1m) 2026/2034 tested (1784 survived, 84 timed out)
Mutation testing 99% (elapsed: ~1h 59m, remaining: <1m) 2029/2034 tested (1787 survived, 84 timed out)
Mutation testing 99% (elapsed: ~1h 59m, remaining: <1m) 2031/2034 tested (1789 survived, 84 timed out)

All tests
  ✓ All tests (killed 158)

[Survived] PrecomputedMutator
q.js:38:9
-       if (typeof bootstrap === "function") {
+       if (typeof bootstrap === "object") {

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           bootstrap("promise", null);

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           bootstrap("promise", function () {});

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           "promise"("promise", definition);

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           null("promise", definition);

[Survived] PrecomputedMutator
q.js:39:9
-           bootstrap("promise", definition);
+           undefined("promise", definition);

[Survived] PrecomputedMutator
q.js:39:19
-           bootstrap("promise", definition);
+           bootstrap("rejected", definition);

[Survived] PrecomputedMutator
q.js:39:19
-           bootstrap("promise", definition);
+           bootstrap("fulfilled", definition);

[Survived] PrecomputedMutator
q.js:39:19
-           bootstrap("promise", definition);
+           bootstrap("pending", definition);

[Survived] PrecomputedMutator
q.js:39:30
-           bootstrap("promise", definition);
+           bootstrap("promise", function () {
+     throw new Error("This is a buggy function");
+   });

[Survived] PrecomputedMutator
q.js:39:30
-           bootstrap("promise", definition);
+           bootstrap("promise", function () {
+     return "This is a buggy function";
+   });

[Survived] PrecomputedMutator
q.js:39:30
-           bootstrap("promise", definition);
+           bootstrap("promise", function () {
+     return function () {
+       throw new Error("This is a buggy function");
+     };
+   });

[Survived] PrecomputedMutator
q.js:46:16
-       } else if (typeof define === "function" && define.amd) {
+       } else if (typeof define === "function" && define.amd && define.amd.buggy) {

[Survived] PrecomputedMutator
q.js:46:16
-       } else if (typeof define === "function" && define.amd) {
+       } else if (typeof define === "function" && define.amd && define.amd.buggy()) {

[Survived] PrecomputedMutator
q.js:47:16
-           define(definition);
+           define(definition());

[Survived] PrecomputedMutator
q.js:47:16
-           define(definition);
+           define(null);

[Survived] PrecomputedMutator
q.js:47:16
-           define(definition);
+           define(function () {});

[Survived] PrecomputedMutator
q.js:50:16
-       } else if (typeof ses !== "undefined") {
+       } else if (typeof ses === "undefined") {

[Survived] PrecomputedMutator
q.js:50:16
-       } else if (typeof ses !== "undefined") {
+       } else if (typeof ses !== "object") {

[Survived] PrecomputedMutator
q.js:50:16
-       } else if (typeof ses !== "undefined") {
+       } else if (typeof ses !== "function") {

[Survived] PrecomputedMutator
q.js:51:13
-           if (!ses.ok()) {
+           if (ses.notOk()) {

[Survived] PrecomputedMutator
q.js:51:13
-           if (!ses.ok()) {
+           if (ses.isNotOk()) {

[Survived] PrecomputedMutator
q.js:51:13
-           if (!ses.ok()) {
+           if (ses.isOk()) {

[Survived] PrecomputedMutator
q.js:51:14
-           if (!ses.ok()) {
+           if (!ses.maybeOk()) {

[Survived] PrecomputedMutator
q.js:51:14
-           if (!ses.ok()) {
+           if (!ses.ok && ses.notOk()) {

[Survived] PrecomputedMutator
q.js:58:16
-       } else if (typeof window !== "undefined" || typeof self !== "undefined") {
+       } else if (typeof window !== "undefined" && typeof self !== "undefined") {

[Survived] PrecomputedMutator
q.js:58:16
-       } else if (typeof window !== "undefined" || typeof self !== "undefined") {
+       } else if (typeof window !== "undefined" ^ typeof self !== "undefined") {

[Survived] PrecomputedMutator
q.js:58:16
-       } else if (typeof window !== "undefined" || typeof self !== "undefined") {
+       } else if (typeof window !== "undefined" && typeof self === "undefined") {

[Survived] PrecomputedMutator
q.js:123:17
-                   domain.enter();
+                   domain.exit();

[Survived] PrecomputedMutator
q.js:123:17
-                   domain.enter();
+                   domain.run();

[Survived] PrecomputedMutator
q.js:123:17
-                   domain.enter();
+                   domain.bind();

[Survived] PrecomputedMutator
q.js:125:13
-               runSingle(task, domain);
+               runSingle(task, domain, undefined);

[Survived] PrecomputedMutator
q.js:125:13
-               runSingle(task, domain);
+               runSingle(task, domain, {});

[Survived] PrecomputedMutator
q.js:125:13
-               runSingle(task, domain);
+               runSingle(task, domain, null);

[Survived] PrecomputedMutator
q.js:125:29
-               runSingle(task, domain);
+               runSingle(task, null);

[Survived] PrecomputedMutator
q.js:125:29
-               runSingle(task, domain);
+               runSingle(task, undefined);

[Survived] PrecomputedMutator
q.js:128:16
-           while (laterQueue.length) {
+           while (laterQueue.length - 1) {

[Survived] PrecomputedMutator
q.js:128:16
-           while (laterQueue.length) {
+           while (laterQueue.length * 2) {

[Survived] PrecomputedMutator
q.js:129:20
-               task = laterQueue.pop();
+               task = laterQueue.shift();

[Survived] PrecomputedMutator
q.js:130:13
-               runSingle(task);
+               noop(task);

[Survived] PrecomputedMutator
q.js:130:23
-               runSingle(task);
+               runSingle(() => {});

[Survived] PrecomputedMutator
q.js:140:17
-               if (isNodeJS) {
+               if (!isNodeJS) {

[Survived] PrecomputedMutator
q.js:140:17
-               if (isNodeJS) {
+               if (isNodeJS && false) {

[Survived] PrecomputedMutator
q.js:140:17
-               if (isNodeJS) {
+               if (isNodeJS || true) {

[Survived] PrecomputedMutator
q.js:147:21
-                   if (domain) {
+                   if (domain.exit()) {

[Survived] PrecomputedMutator
q.js:147:21
-                   if (domain) {
+                   if (domain.enter()) {

[Survived] PrecomputedMutator
q.js:148:21
-                       domain.exit();
+                       domain.enter();

[Survived] PrecomputedMutator
q.js:150:17
-                   setTimeout(flush, 0);
+                   setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:150:17
-                   setTimeout(flush, 0);
+                   setTimeout(flush, -1);

[Survived] PrecomputedMutator
q.js:150:17
-                   setTimeout(flush, 0);
+                   setTimeout(flush, "hello");

[Survived] PrecomputedMutator
q.js:150:17
-                   setTimeout(flush, 0);
+                   setInterval(flush, 0);

[Survived] PrecomputedMutator
q.js:150:28
-                   setTimeout(flush, 0);
+                   setTimeout(flush(), 0);

[Survived] PrecomputedMutator
q.js:150:28
-                   setTimeout(flush, 0);
+                   setTimeout(flush(1), 0);

[Survived] PrecomputedMutator
q.js:150:28
-                   setTimeout(flush, 0);
+                   setTimeout(flush(undefined), 0);

[Survived] PrecomputedMutator
q.js:150:35
-                   setTimeout(flush, 0);
+                   setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:150:35
-                   setTimeout(flush, 0);
+                   setTimeout(flush, -1);

[Survived] PrecomputedMutator
q.js:150:35
-                   setTimeout(flush, 0);
+                   setTimeout(flush, Infinity);

[Survived] PrecomputedMutator
q.js:151:21
-                   if (domain) {
+                   if (!domain) {

[Survived] PrecomputedMutator
q.js:151:21
-                   if (domain) {
+                   if (domain + 1) {

[Survived] PrecomputedMutator
q.js:151:21
-                   if (domain) {
+                   if (domain.foo) {

[Survived] PrecomputedMutator
q.js:152:21
-                       domain.enter();
+                       domain.exit();

[Survived] PrecomputedMutator
q.js:167:13
-               domain.exit();
+               domain.enter();

[Survived] PrecomputedMutator
q.js:178:13
-           if (!flushing) {
+           if (!flushing && true) {

[Survived] PrecomputedMutator
q.js:202:13
-           if (typeof window !== "undefined") {
+           if (typeof window === "undefined") {

[Survived] PrecomputedMutator
q.js:202:13
-           if (typeof window !== "undefined") {
+           if (typeof window !== "object") {

[Survived] PrecomputedMutator
q.js:202:13
-           if (typeof window !== "undefined") {
+           if (typeof window !== "function") {

[Survived] PrecomputedMutator
q.js:203:27
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(null);

[Survived] PrecomputedMutator
q.js:203:27
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(undefined);

[Survived] PrecomputedMutator
q.js:203:27
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(document);

[Survived] PrecomputedMutator
q.js:203:27
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setInterval.bind(window, flush);

[Survived] PrecomputedMutator
q.js:203:27
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = requestAnimationFrame.bind(window, flush);

[Survived] PrecomputedMutator
q.js:203:45
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(null, flush);

[Survived] PrecomputedMutator
q.js:203:45
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(undefined, flush);

[Survived] PrecomputedMutator
q.js:203:45
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind({}, flush);

[Survived] PrecomputedMutator
q.js:203:53
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(window, flush());

[Survived] PrecomputedMutator
q.js:203:53
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(window, flush(1));

[Survived] PrecomputedMutator
q.js:203:53
-               requestTick = setImmediate.bind(window, flush);
+               requestTick = setImmediate.bind(window, flush(function () {}));

[Survived] PrecomputedMutator
q.js:210:16
-       } else if (typeof MessageChannel !== "undefined") {
+       } else if (typeof MessageChannel === "undefined") {

[Survived] PrecomputedMutator
q.js:210:16
-       } else if (typeof MessageChannel !== "undefined") {
+       } else if (typeof MessageChannel !== "object") {

[Survived] PrecomputedMutator
q.js:210:16
-       } else if (typeof MessageChannel !== "undefined") {
+       } else if (typeof MessageChannel !== "function") {

[Survived] PrecomputedMutator
q.js:224:13
-               channel.port2.postMessage(0);
+               channel.port1.postMessage(0);

[Survived] PrecomputedMutator
q.js:224:39
-               channel.port2.postMessage(0);
+               channel.port2.postMessage(1);

[Survived] PrecomputedMutator
q.js:224:39
-               channel.port2.postMessage(0);
+               channel.port2.postMessage("hello");

[Survived] PrecomputedMutator
q.js:224:39
-               channel.port2.postMessage(0);
+               channel.port2.postMessage(null);

[Survived] PrecomputedMutator
q.js:227:13
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:227:13
-               setTimeout(flush, 0);
+               setTimeout(flush, -1);

[Survived] PrecomputedMutator
q.js:227:13
-               setTimeout(flush, 0);
+               setTimeout(flush, "hello");

[Survived] PrecomputedMutator
q.js:227:13
-               setTimeout(flush, 0);
+               setInterval(flush, 0);

[Survived] PrecomputedMutator
q.js:227:13
-               setTimeout(flush, 0);
+               requestAnimationFrame(flush, 0);

[Survived] PrecomputedMutator
q.js:227:24
-               setTimeout(flush, 0);
+               setTimeout(flush(), 0);

[Survived] PrecomputedMutator
q.js:227:31
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:227:31
-               setTimeout(flush, 0);
+               setTimeout(flush, -1);

[Survived] PrecomputedMutator
q.js:227:31
-               setTimeout(flush, 0);
+               setTimeout(flush, null);

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               setTimeout(flush, -1);

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               setTimeout(flush, "hello");

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               setInterval(flush, 0);

[Survived] PrecomputedMutator
q.js:234:13
-               setTimeout(flush, 0);
+               requestAnimationFrame(flush, 0);

[Survived] PrecomputedMutator
q.js:234:24
-               setTimeout(flush, 0);
+               setTimeout(flush(), 0);

[Survived] PrecomputedMutator
q.js:234:31
-               setTimeout(flush, 0);
+               setTimeout(flush, 1);

[Survived] PrecomputedMutator
q.js:234:31
-               setTimeout(flush, 0);
+               setTimeout(flush, -1);

[Survived] PrecomputedMutator
q.js:234:31
-               setTimeout(flush, 0);
+               setTimeout(flush, null);

[Survived] PrecomputedMutator
q.js:241:9
-           laterQueue.push(task);
+           laterQueue.unshift(task);

[Survived] PrecomputedMutator
q.js:241:9
-           laterQueue.push(task);
+           laterQueue.pop(task);

[Survived] PrecomputedMutator
q.js:241:9
-           laterQueue.push(task);
+           laterQueue.shift(task);

[Survived] PrecomputedMutator
q.js:242:13
-           if (!flushing) {
+           if (flushing) {

[Survived] PrecomputedMutator
q.js:242:13
-           if (!flushing) {
+           if (flushing && !flushing) {

[Survived] PrecomputedMutator
q.js:277:13
-           if (arguments.length === 1) {
+           if (arguments.length < 1) {

[Survived] PrecomputedMutator
q.js:277:13
-           if (arguments.length === 1) {
+           if (arguments.length > 1) {

[Survived] PrecomputedMutator
q.js:277:13
-           if (arguments.length === 1) {
+           if (arguments.length === 2) {

[Survived] PrecomputedMutator
q.js:288:22
-               } while (1);
+               } while (0);

[Survived] PrecomputedMutator
q.js:288:22
-               } while (1);
+               } while (-1);

[Survived] PrecomputedMutator
q.js:288:22
-               } while (1);
+               } while (length - 1);

[Survived] PrecomputedMutator
q.js:281:21
-                   if (index in this) {
+                   if (index > this.length) {

[Survived] PrecomputedMutator
q.js:281:21
-                   if (index in this) {
+                   if (index < this.length) {

[Survived] PrecomputedMutator
q.js:281:21
-                   if (index in this) {
+                   if (index === this.length) {

[Survived] PrecomputedMutator
q.js:285:21
-                   if (++index >= length) {
+                   if (index > length) {

[Survived] PrecomputedMutator
q.js:285:21
-                   if (++index >= length) {
+                   if (index >= length + 1) {

[Survived] PrecomputedMutator
q.js:285:21
-                   if (++index >= length) {
+                   if (index + 1 >= length) {

[Survived] PrecomputedMutator
q.js:291:16
-           for (; index < length; index++) {
+           for (; index > length; index++) {

[Survived] PrecomputedMutator
q.js:291:16
-           for (; index < length; index++) {
+           for (; index <= length; index++) {

[Survived] PrecomputedMutator
q.js:291:16
-           for (; index < length; index++) {
+           for (; index >= length; index++) {

[Survived] PrecomputedMutator
q.js:291:32
-           for (; index < length; index++) {
+           for (; index < length; index--) {

[Survived] PrecomputedMutator
q.js:291:32
-           for (; index < length; index++) {
+           for (; index < length; index += 2) {

[Survived] PrecomputedMutator
q.js:291:32
-           for (; index < length; index++) {
+           for (; index < length; index = 0) {

[Survived] PrecomputedMutator
q.js:293:17
-               if (index in this) {
+               if (index > this.length) {

[Survived] PrecomputedMutator
q.js:293:17
-               if (index in this) {
+               if (index < this.length) {

[Survived] PrecomputedMutator
q.js:293:17
-               if (index in this) {
+               if (index >= this.length) {

[Survived] PrecomputedMutator
q.js:294:25
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index + 1);

[Survived] PrecomputedMutator
q.js:294:25
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index - 1);

[Survived] PrecomputedMutator
q.js:294:25
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index * 2);

[Survived] PrecomputedMutator
q.js:294:34
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis + 1, this[index], index);

[Survived] PrecomputedMutator
q.js:294:34
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis - 1, this[index], index);

[Survived] PrecomputedMutator
q.js:294:34
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis * 2, this[index], index);

[Survived] PrecomputedMutator
q.js:294:41
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index + 1], index);

[Survived] PrecomputedMutator
q.js:294:41
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index - 1], index);

[Survived] PrecomputedMutator
q.js:294:41
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index] = 0, index);

[Survived] PrecomputedMutator
q.js:294:54
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index + 1);

[Survived] PrecomputedMutator
q.js:294:54
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index - 1);

[Survived] PrecomputedMutator
q.js:294:54
-                   basis = callback(basis, this[index], index);
+                   basis = callback(basis, this[index], index * 2);

[Survived] PrecomputedMutator
q.js:304:25
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i <= this.length; i++) {

[Survived] PrecomputedMutator
q.js:304:25
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i > this.length; i++) {

[Survived] PrecomputedMutator
q.js:304:25
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i == this.length; i++) {

[Survived] PrecomputedMutator
q.js:304:42
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i < this.length; i--) {

[Survived] PrecomputedMutator
q.js:304:42
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i < this.length; i += 2) {

[Survived] PrecomputedMutator
q.js:304:42
-           for (var i = 0; i < this.length; i++) {
+           for (var i = 0; i < this.length; i = 0) {

[Survived] PrecomputedMutator
q.js:305:17
-               if (this[i] === value) {
+               if (this[i] !== value) {

[Survived] PrecomputedMutator
q.js:305:17
-               if (this[i] === value) {
+               if (this[i] > value) {

[Survived] PrecomputedMutator
q.js:305:17
-               if (this[i] === value) {
+               if (this[i] < value) {

[Survived] PrecomputedMutator
q.js:318:13
-               collect.push(callback.call(thisp, value, index, self));
+               collect.pop(callback.call(thisp, value, index, self));

[Survived] PrecomputedMutator
q.js:318:13
-               collect.push(callback.call(thisp, value, index, self));
+               collect.shift(callback.call(thisp, value, index, self));

[Survived] PrecomputedMutator
q.js:318:13
-               collect.push(callback.call(thisp, value, index, self));
+               collect.unshift(callback.call(thisp, value, index, self));

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index, self) + 1);

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index, self) - 1);

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index, self) * 2);

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.apply(thisp, value, index, self));

[Survived] PrecomputedMutator
q.js:318:26
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.bind(thisp, value, index, self));

[Survived] PrecomputedMutator
q.js:318:40
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(null, value, index, self));

[Survived] PrecomputedMutator
q.js:318:40
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(undefined, value, index, self));

[Survived] PrecomputedMutator
q.js:318:40
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call({}, value, index, self));

[Survived] PrecomputedMutator
q.js:318:47
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, undefined, index, self));

[Survived] PrecomputedMutator
q.js:318:47
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, null, index, self));

[Survived] PrecomputedMutator
q.js:318:47
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, 0, index, self));

[Survived] PrecomputedMutator
q.js:318:54
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index + 1, self));

[Survived] PrecomputedMutator
q.js:318:54
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index - 1, self));

[Survived] PrecomputedMutator
q.js:318:54
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index * 2, self));

[Survived] PrecomputedMutator
q.js:318:61
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index, self.length));

[Survived] PrecomputedMutator
q.js:318:61
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index, self[0]));

[Survived] PrecomputedMutator
q.js:318:61
-               collect.push(callback.call(thisp, value, index, self));
+               collect.push(callback.call(thisp, value, index, self.slice(1)));

[Survived] PrecomputedMutator
q.js:339:5
-       for (var key in object) {
-           if (object_hasOwnProperty(object, key)) {
-               keys.push(key);
-           }
-       }
+       for (var key of object) {
+     if (object_hasOwnProperty(object, key)) {
+       keys.push(key);
+     }
+   }

[Survived] PrecomputedMutator
q.js:339:21
-       for (var key in object) {
+       for (var key in null) {

[Survived] PrecomputedMutator
q.js:339:21
-       for (var key in object) {
+       for (var key in undefined) {

[Survived] PrecomputedMutator
q.js:339:21
-       for (var key in object) {
+       for (var key in {}) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key) && object[key] !== undefined) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key) || object[key] === undefined) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key) && object[key] !== null) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key + 1)) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key - 1)) {

[Survived] PrecomputedMutator
q.js:340:13
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key * 2)) {

[Survived] PrecomputedMutator
q.js:340:35
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty({}, key)) {

[Survived] PrecomputedMutator
q.js:340:43
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key + 1)) {

[Survived] PrecomputedMutator
q.js:340:43
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key * 2)) {

[Survived] PrecomputedMutator
q.js:340:43
-           if (object_hasOwnProperty(object, key)) {
+           if (object_hasOwnProperty(object, key - 1)) {

[Survived] PrecomputedMutator
q.js:341:23
-               keys.push(key);
+               keys.push(this[key]);

[Survived] PrecomputedMutator
q.js:341:23
-               keys.push(key);
+               keys.push(key + 1);

[Survived] PrecomputedMutator
q.js:341:23
-               keys.push(key);
+               keys.push(key * 2);

[Survived] PrecomputedMutator
q.js:358:9
-           object_toString(exception) === "[object StopIteration]" ||
+           object_hasOwnProperty(exception) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:358:9
-           object_toString(exception) === "[object StopIteration]" ||
+           object_keys(exception) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:358:9
-           object_toString(exception) === "[object StopIteration]" ||
+           object_create(exception) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:358:25
-           object_toString(exception) === "[object StopIteration]" ||
+           object_toString(exception.message) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:358:25
-           object_toString(exception) === "[object StopIteration]" ||
+           object_toString(exception.stack) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:358:25
-           object_toString(exception) === "[object StopIteration]" ||
+           object_toString(exception.name) === "[object StopIteration]" ||

[Survived] PrecomputedMutator
q.js:366:5
-   if (typeof ReturnValue !== "undefined") {
+   if (typeof ReturnValue !== "undefined" && ReturnValue !== null) {

[Survived] PrecomputedMutator
q.js:366:5
-   if (typeof ReturnValue !== "undefined") {
+   if (typeof ReturnValue !== "undefined" && ReturnValue !== "undefined") {

[Survived] PrecomputedMutator
q.js:366:5
-   if (typeof ReturnValue !== "undefined") {
+   if (typeof ReturnValue !== "undefined" && ReturnValue !== 0) {

[Survived] PrecomputedMutator
q.js:388:9
-           for (var p = promise; !!p; p = p.source) {
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
-                   stacks.unshift(p.stack);
-               }
-           }
+           for (var p = promise; !!p; p = p.source.value) {
+     if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+       object_defineProperty(error, "__minimumStackCounter__", {
+         value: p.stackCounter,
+         configurable: true
+       });
+       stacks.unshift(p.stack);
+     }
+   }

[Survived] PrecomputedMutator
q.js:388:9
-           for (var p = promise; !!p; p = p.source) {
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
-                   stacks.unshift(p.stack);
-               }
-           }
+           for (var p = promise; !!p; p = p.source.then) {
+     if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+       object_defineProperty(error, "__minimumStackCounter__", {
+         value: p.stackCounter,
+         configurable: true
+       });
+       stacks.unshift(p.stack);
+     }
+   }

[Survived] PrecomputedMutator
q.js:388:9
-           for (var p = promise; !!p; p = p.source) {
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
-                   stacks.unshift(p.stack);
-               }
-           }
+           for (var p = promise; !!p; p = p.source.catch) {
+     if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+       object_defineProperty(error, "__minimumStackCounter__", {
+         value: p.stackCounter,
+         configurable: true
+       });
+       stacks.unshift(p.stack);
+     }
+   }

[Survived] PrecomputedMutator
q.js:388:31
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; !p; p = p.source) {

[Survived] PrecomputedMutator
q.js:388:31
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; p && !p; p = p.source) {

[Survived] PrecomputedMutator
q.js:388:36
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; !!p; p = p.source.slice()) {

[Survived] PrecomputedMutator
q.js:388:36
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; !!p; p = p.source.concat()) {

[Survived] PrecomputedMutator
q.js:388:36
-           for (var p = promise; !!p; p = p.source) {
+           for (var p = promise; !!p; p = p.source.filter(function () {
+     return true;
+   })) {

[Survived] PrecomputedMutator
q.js:389:17
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ < p.stackCounter)) {

[Survived] PrecomputedMutator
q.js:389:17
-               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {
+               if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ === p.stackCounter)) {

[Survived] PrecomputedMutator
q.js:390:17
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter + 1,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:390:17
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter - 1,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:390:17
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter * 2,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:390:46
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__maximumStackCounter__", {value: p.stackCounter, configurable: true});

[Survived] PrecomputedMutator
q.js:390:46
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__stackCounter__", {value: p.stackCounter, configurable: true});

[Survived] PrecomputedMutator
q.js:390:46
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__stackCounter__" + 1, {value: p.stackCounter, configurable: true});

[Survived] PrecomputedMutator
q.js:390:73
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter + 1,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:390:73
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter - 1,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:390:73
-                   object_defineProperty(error, "__minimumStackCounter__", {value: p.stackCounter, configurable: true});
+                   object_defineProperty(error, "__minimumStackCounter__", {
+     value: p.stackCounter * 2,
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:391:17
-                   stacks.unshift(p.stack);
+                   stacks.push(p.stack);

[Survived] PrecomputedMutator
q.js:391:17
-                   stacks.unshift(p.stack);
+                   stacks.pop(p.stack);

[Survived] PrecomputedMutator
q.js:391:17
-                   stacks.unshift(p.stack);
+                   stacks.shift(p.stack);

[Survived] PrecomputedMutator
q.js:391:32
-                   stacks.unshift(p.stack);
+                   stacks.unshift(p.stack.slice(0));

[Survived] PrecomputedMutator
q.js:391:32
-                   stacks.unshift(p.stack);
+                   stacks.unshift(p.stack.concat([]));

[Survived] PrecomputedMutator
q.js:391:32
-                   stacks.unshift(p.stack);
+                   stacks.unshift(p.stack.map(function (x) {
+     return x;
+   }));

[Survived] PrecomputedMutator
q.js:394:9
-           stacks.unshift(error.stack);
+           stacks.push(error.stack);

[Survived] PrecomputedMutator
q.js:394:9
-           stacks.unshift(error.stack);
+           stacks.pop(error.stack);

[Survived] PrecomputedMutator
q.js:394:9
-           stacks.unshift(error.stack);
+           stacks.shift(error.stack);

[Survived] PrecomputedMutator
q.js:394:24
-           stacks.unshift(error.stack);
+           stacks.unshift(error.message);

[Survived] PrecomputedMutator
q.js:394:24
-           stacks.unshift(error.stack);
+           stacks.unshift(error.name);

[Survived] PrecomputedMutator
q.js:394:24
-           stacks.unshift(error.stack);
+           stacks.unshift(error.code);

[Survived] PrecomputedMutator
q.js:396:30
-           var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
+           var concatedStacks = stacks.concat("\n" + STACK_JUMP_SEPARATOR + "\n");

[Survived] PrecomputedMutator
q.js:396:30
-           var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
+           var concatedStacks = stacks.push("\n" + STACK_JUMP_SEPARATOR + "\n");

[Survived] PrecomputedMutator
q.js:396:30
-           var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
+           var concatedStacks = stacks.pop("\n" + STACK_JUMP_SEPARATOR + "\n");

[Survived] PrecomputedMutator
q.js:397:39
-           var stack = filterStackString(concatedStacks);
+           var stack = filterStackString(concatedStacks.split("\n"));

[Survived] PrecomputedMutator
q.js:397:39
-           var stack = filterStackString(concatedStacks);
+           var stack = filterStackString(concatedStacks.toUpperCase());

[Survived] PrecomputedMutator
q.js:397:39
-           var stack = filterStackString(concatedStacks);
+           var stack = filterStackString(concatedStacks.replace("From previous event:", "From previous event: (MODIFIED)"));

[Survived] PrecomputedMutator
q.js:398:9
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack,
+     enumerable: true
+   });

[Survived] PrecomputedMutator
q.js:398:9
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack,
+     writable: false
+   });

[Survived] PrecomputedMutator
q.js:398:9
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack,
+     configurable: false
+   });

[Survived] PrecomputedMutator
q.js:398:38
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stackTrace", {value: stack, configurable: true});

[Survived] PrecomputedMutator
q.js:398:47
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack + "foo",
+     configurable: true
+   });

[Survived] PrecomputedMutator
q.js:398:47
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack,
+     enumerable: true
+   });

[Survived] PrecomputedMutator
q.js:398:47
-           object_defineProperty(error, "stack", {value: stack, configurable: true});
+           object_defineProperty(error, "stack", {
+     value: stack,
+     writable: false
+   });

[Survived] PrecomputedMutator
q.js:403:35
-       var lines = stackString.split("\n");
+       var lines = stackString.split("\t");

[Survived] PrecomputedMutator
q.js:403:35
-       var lines = stackString.split("\n");
+       var lines = stackString.split(" ");

[Survived] PrecomputedMutator
q.js:403:35
-       var lines = stackString.split("\n");
+       var lines = stackString.split("\\n");

[Survived] PrecomputedMutator
q.js:405:5
-       for (var i = 0; i < lines.length; ++i) {
-           var line = lines[i];
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
-               desiredLines.push(line);
-           }
-       }
+       for (var i = 1; i < lines.length; ++i) {
+     var line = lines[i];
+     if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+       desiredLines.push(line);
+     }
+   }

[Survived] PrecomputedMutator
q.js:405:5
-       for (var i = 0; i < lines.length; ++i) {
-           var line = lines[i];
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
-               desiredLines.push(line);
-           }
-       }
+       for (var i = -1; i < lines.length; ++i) {
+     var line = lines[i];
+     if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+       desiredLines.push(line);
+     }
+   }

[Survived] PrecomputedMutator
q.js:405:5
-       for (var i = 0; i < lines.length; ++i) {
-           var line = lines[i];
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
-               desiredLines.push(line);
-           }
-       }
+       for (var i = this.length; i < lines.length; ++i) {
+     var line = lines[i];
+     if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+       desiredLines.push(line);
+     }
+   }

[Survived] PrecomputedMutator
q.js:405:5
-       for (var i = 0; i < lines.length; ++i) {
-           var line = lines[i];
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
-               desiredLines.push(line);
-           }
-       }
+       for (var i = 0; i <= lines.length; ++i) {
+     var line = lines[i];
+     if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+       desiredLines.push(line);
+     }
+   }

[Survived] PrecomputedMutator
q.js:405:5
-       for (var i = 0; i < lines.length; ++i) {
-           var line = lines[i];
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
-               desiredLines.push(line);
-           }
-       }
+       for (var i = 0; i < lines.length - 1; ++i) {
+     var line = lines[i];
+     if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+       desiredLines.push(line);
+     }
+   }

[Survived] PrecomputedMutator
q.js:405:21
-       for (var i = 0; i < lines.length; ++i) {
+       for (var i = 0; i <= lines.length; ++i) {

[Survived] PrecomputedMutator
q.js:405:21
-       for (var i = 0; i < lines.length; ++i) {
+       for (var i = 0; i > lines.length; ++i) {

[Survived] PrecomputedMutator
q.js:405:21
-       for (var i = 0; i < lines.length; ++i) {
+       for (var i = 0; i == lines.length; ++i) {

[Survived] PrecomputedMutator
q.js:405:39
-       for (var i = 0; i < lines.length; ++i) {
+       for (var i = 0; i < lines.length; i--) {

[Survived] PrecomputedMutator
q.js:405:39
-       for (var i = 0; i < lines.length; ++i) {
+       for (var i = 0; i < lines.length; i += 2) {

[Survived] PrecomputedMutator
q.js:405:39
-       for (var i = 0; i < lines.length; ++i) {
+       for (var i = 0; i < lines.length; i = i + 1) {

[Survived] PrecomputedMutator
q.js:408:13
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+           if (!isInternalFrame(line) || !isNodeFrame(line) || line) {

[Survived] PrecomputedMutator
q.js:408:14
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+           if (!isPromiseAlike(line) && !isNodeFrame(line) && line) {

[Survived] PrecomputedMutator
q.js:408:30
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+           if (!isInternalFrame(line + 1) && !isNodeFrame(line) && line) {

[Survived] PrecomputedMutator
q.js:408:30
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+           if (!isInternalFrame(line - 1) && !isNodeFrame(line) && line) {

[Survived] PrecomputedMutator
q.js:408:30
-           if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
+           if (!isInternalFrame(line * 2) && !isNodeFrame(line) && line) {

[Survived] PrecomputedMutator
q.js:409:13
-               desiredLines.push(line);
+               desiredLines.pop(line);

[Survived] PrecomputedMutator
q.js:409:13
-               desiredLines.push(line);
+               desiredLines.shift(line);

[Survived] PrecomputedMutator
q.js:409:13
-               desiredLines.push(line);
+               desiredLines.unshift(line);

[Survived] PrecomputedMutator
q.js:409:31
-               desiredLines.push(line);
+               desiredLines.push(line + 1);

[Survived] PrecomputedMutator
q.js:409:31
-               desiredLines.push(line);
+               desiredLines.push(line - 1);

[Survived] PrecomputedMutator
q.js:409:31
-               desiredLines.push(line);
+               desiredLines.push(line * 2);

[Survived] PrecomputedMutator
q.js:412:30
-       return desiredLines.join("\n");
+       return desiredLines.join("\t");

[Survived] PrecomputedMutator
q.js:412:30
-       return desiredLines.join("\n");
+       return desiredLines.join(" ");

[Survived] PrecomputedMutator
q.js:412:30
-       return desiredLines.join("\n");
+       return desiredLines.join("<br>");

[Survived] PrecomputedMutator
q.js:416:12
-       return stackLine.indexOf("(module.js:") !== -1 ||
+       return stackLine.includes("(module.js:") !== -1 ||

[Survived] PrecomputedMutator
q.js:416:12
-       return stackLine.indexOf("(module.js:") !== -1 ||
+       return stackLine.match("(module.js:") !== -1 ||

[Survived] PrecomputedMutator
q.js:416:12
-       return stackLine.indexOf("(module.js:") !== -1 ||
+       return stackLine.search("(module.js:") !== -1 ||

[Survived] PrecomputedMutator
q.js:417:12
-              stackLine.indexOf("(node.js:") !== -1;
+              stackLine.includes("(node.js:") !== -1;

[Survived] PrecomputedMutator
q.js:417:12
-              stackLine.indexOf("(node.js:") !== -1;
+              stackLine.match("(node.js:") !== -1;

[Survived] PrecomputedMutator
q.js:417:12
-              stackLine.indexOf("(node.js:") !== -1;
+              stackLine.search("(node.js:") !== -1;

[Survived] PrecomputedMutator
q.js:417:30
-              stackLine.indexOf("(node.js:") !== -1;
+              stackLine.indexOf("(node.js:)") !== -1;

[Survived] PrecomputedMutator
q.js:423:57
-       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
+       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine.split("@")[1]);

[Survived] PrecomputedMutator
q.js:423:57
-       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
+       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine.split(":")[0]);

[Survived] PrecomputedMutator
q.js:423:57
-       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
+       var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine.split(" ")[0]);

[Survived] PrecomputedMutator
q.js:425:30
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], "string"(attempt1[2])];

[Survived] PrecomputedMutator
q.js:425:30
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], null(attempt1[2])];

[Survived] PrecomputedMutator
q.js:425:30
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], undefined(attempt1[2])];

[Survived] PrecomputedMutator
q.js:425:37
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], Number(attempt1[1])];

[Survived] PrecomputedMutator
q.js:425:37
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], Number(attempt1[3])];

[Survived] PrecomputedMutator
q.js:425:37
-           return [attempt1[1], Number(attempt1[2])];
+           return [attempt1[1], Number(attempt2[1])];

[Survived] PrecomputedMutator
q.js:429:53
-       var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
+       var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine.split(" ")[0]);

[Survived] PrecomputedMutator
q.js:429:53
-       var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
+       var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine.split(" ").pop());

[Survived] PrecomputedMutator
q.js:429:53
-       var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
+       var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine.split(" ").slice(1).join(" "));

[Survived] PrecomputedMutator
q.js:430:9
-       if (attempt2) {
+       if (attempt2[1]) {

[Survived] PrecomputedMutator
q.js:430:9
-       if (attempt2) {
+       if (attempt2[0]) {

[Survived] PrecomputedMutator
q.js:430:9
-       if (attempt2) {
+       if (attempt2.length) {

[Survived] PrecomputedMutator
q.js:431:37
-           return [attempt2[1], Number(attempt2[2])];
+           return [attempt2[1], Number(attempt2[1])];

[Survived] PrecomputedMutator
q.js:431:37
-           return [attempt2[1], Number(attempt2[2])];
+           return [attempt2[1], Number(attempt2[3])];

[Survived] PrecomputedMutator
q.js:431:37
-           return [attempt2[1], Number(attempt2[2])];
+           return [attempt2[1], Number(attempt2[4])];

[Survived] PrecomputedMutator
q.js:435:42
-       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
+       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine.split(" ")[0]);

[Survived] PrecomputedMutator
q.js:435:42
-       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
+       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine.split(" ").pop());

[Survived] PrecomputedMutator
q.js:435:42
-       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
+       var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine.split(" ").slice(1).join(" "));

[Survived] PrecomputedMutator
q.js:436:9
-       if (attempt3) {
+       if (attempt3[1]) {

[Survived] PrecomputedMutator
q.js:436:9
-       if (attempt3) {
+       if (attempt3[0]) {

[Survived] PrecomputedMutator
q.js:436:9
-       if (attempt3) {
+       if (attempt3.length) {

[Survived] PrecomputedMutator
q.js:437:30
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], "0"(attempt3[2])];

[Survived] PrecomputedMutator
q.js:437:30
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], undefined(attempt3[2])];

[Survived] PrecomputedMutator
q.js:437:30
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], null(attempt3[2])];

[Survived] PrecomputedMutator
q.js:437:37
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], Number(attempt3[3])];

[Survived] PrecomputedMutator
q.js:437:37
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], Number(attempt3[1])];

[Survived] PrecomputedMutator
q.js:437:37
-           return [attempt3[1], Number(attempt3[2])];
+           return [attempt3[1], Number(attempt3[4])];

[Survived] PrecomputedMutator
q.js:442:58
-       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
+       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine.split(":")[0]);

[Survived] PrecomputedMutator
q.js:442:58
-       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
+       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine.split(":")[1]);

[Survived] PrecomputedMutator
q.js:442:58
-       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
+       var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine.split(":")[2]);

[Survived] PrecomputedMutator
q.js:444:9
-       if (!fileNameAndLineNumber) {
+       if (fileNameAndLineNumber[0] === undefined) {

[Survived] PrecomputedMutator
q.js:444:9
-       if (!fileNameAndLineNumber) {
+       if (fileNameAndLineNumber[1] === undefined) {

[Survived] PrecomputedMutator
q.js:444:9
-       if (!fileNameAndLineNumber) {
+       if (fileNameAndLineNumber[0] === null) {

[Survived] PrecomputedMutator
q.js:459:9
-       if (!hasStacks) {
+       if (hasStacks === false) {

[Survived] PrecomputedMutator
q.js:459:9
-       if (!hasStacks) {
+       if (!hasStacks || typeof hasStacks !== 'boolean') {

[Survived] PrecomputedMutator
q.js:459:9
-       if (!hasStacks) {
+       if (hasStacks !== true) {

[Survived] PrecomputedMutator
q.js:466:35
-           var lines = e.stack.split("\n");
+           var lines = e.stack.split("\t");

[Survived] PrecomputedMutator
q.js:466:35
-           var lines = e.stack.split("\n");
+           var lines = e.stack.split(" ");

[Survived] PrecomputedMutator
q.js:466:35
-           var lines = e.stack.split("\n");
+           var lines = e.stack.split("\\n");

[Survived] PrecomputedMutator
q.js:467:25
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[1].indexOf("@") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:467:25
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[lines.length - 1].indexOf("@") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:467:42
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[0].indexOf("#") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:467:42
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[0].indexOf("%") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:467:42
-           var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
+           var firstLine = lines[0].indexOf("^") > 0 ? lines[1] : lines[2];

[Survived] PrecomputedMutator
q.js:468:62
-           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
+           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine.split(":")[0]);

[Survived] PrecomputedMutator
q.js:468:62
-           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
+           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine.split(":")[1]);

[Survived] PrecomputedMutator
q.js:469:13
-           if (!fileNameAndLineNumber) {
+           if (fileNameAndLineNumber === undefined) {

[Survived] PrecomputedMutator
q.js:468:62
-           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
+           var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine.split(":")[2]);

[Survived] PrecomputedMutator
q.js:469:13
-           if (!fileNameAndLineNumber) {
+           if (fileNameAndLineNumber.length === 0) {

[Survived] PrecomputedMutator
q.js:469:13
-           if (!fileNameAndLineNumber) {
+           if (fileNameAndLineNumber[0] === undefined) {

[Survived] PrecomputedMutator
q.js:480:13
-           if (typeof console !== "undefined" &&
-               typeof console.warn === "function") {
+           if (console.warn("deprecated")) {

[Survived] PrecomputedMutator
q.js:480:13
-           if (typeof console !== "undefined" &&
-               typeof console.warn === "function") {
+           if (typeof console.warn === "function") {

[Survived] PrecomputedMutator
q.js:480:13
-           if (typeof console !== "undefined" &&
-               typeof console.warn === "function") {
+           if (typeof console !== "undefined" && typeof console.warn === "function") {

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, arguments[0]);

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, arguments[2]);

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, arguments[1]);

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.bind(callback, arguments);

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.call(callback, arguments);

[Survived] PrecomputedMutator
q.js:485:16
-           return callback.apply(callback, arguments);
+           return callback.toString(callback, arguments);

[Survived] PrecomputedMutator
q.js:485:31
-           return callback.apply(callback, arguments);
+           return callback.apply(callback.bind(this), arguments);

[Survived] PrecomputedMutator
q.js:485:31
-           return callback.apply(callback, arguments);
+           return callback.apply(callback.call(this), arguments);

[Survived] PrecomputedMutator
q.js:485:31
-           return callback.apply(callback, arguments);
+           return callback.apply(callback.apply(this), arguments);

[Survived] PrecomputedMutator
q.js:485:41
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, undefined);

[Survived] PrecomputedMutator
q.js:485:41
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, null);

[Survived] PrecomputedMutator
q.js:485:41
-           return callback.apply(callback, arguments);
+           return callback.apply(callback, 0);

[Survived] PrecomputedMutator
q.js:501:9
-       if (value instanceof Promise) {
+       if (value === Promise) {

[Survived] PrecomputedMutator
q.js:565:17
-               if (op === "when" && operands[1]) { // progress operand
+               if (op === "when" && operands[2]) { // progress operand

[Survived] PrecomputedMutator
q.js:565:17
-               if (op === "when" && operands[1]) { // progress operand
+               if (op === "when" && !operands[1]) { // progress operand

[Survived] PrecomputedMutator
q.js:565:17
-               if (op === "when" && operands[1]) { // progress operand
+               if (op === "when" && operands[1] === undefined) { // progress operand

[Survived] PrecomputedMutator
q.js:566:17
-                   progressListeners.push(operands[1]);
+                   progressListeners.pop(operands[1]);

[Survived] PrecomputedMutator
q.js:566:17
-                   progressListeners.push(operands[1]);
+                   progressListeners.shift(operands[1]);

[Survived] PrecomputedMutator
q.js:566:17
-                   progressListeners.push(operands[1]);
+                   progressListeners.unshift(operands[1]);

[Survived] PrecomputedMutator
q.js:566:40
-                   progressListeners.push(operands[1]);
+                   progressListeners.push(operands[2]);

[Survived] PrecomputedMutator
q.js:566:40
-                   progressListeners.push(operands[1]);
+                   progressListeners.push(operands[0]);

[Survived] PrecomputedMutator
q.js:566:40
-                   progressListeners.push(operands[1]);
+                   progressListeners.push(operands.length);

[Survived] PrecomputedMutator
q.js:570:55
-                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
+                   resolvedPromise.promiseDispatch.apply(null, args);

[Survived] PrecomputedMutator
q.js:570:55
-                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
+                   resolvedPromise.promiseDispatch.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:570:55
-                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
+                   resolvedPromise.promiseDispatch.apply(0, args);

[Survived] PrecomputedMutator
q.js:570:72
-                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
+                   resolvedPromise.promiseDispatch.apply(resolvedPromise, args.concat(["extra argument"]));

[Survived] PrecomputedMutator
q.js:577:13
-           if (messages) {
+           if (messages.length) {

[Survived] PrecomputedMutator
q.js:577:13
-           if (messages) {
+           if (messages[0]) {

[Survived] PrecomputedMutator
q.js:577:13
-           if (messages) {
+           if (messages.pop()) {

[Survived] PrecomputedMutator
q.js:580:27
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearerValue + 1(resolvedPromise);

[Survived] PrecomputedMutator
q.js:580:27
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearerValue * 2(resolvedPromise);

[Survived] PrecomputedMutator
q.js:580:34
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearer(resolvedPromise.promise);

[Survived] PrecomputedMutator
q.js:580:34
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearer(resolvedPromise.source);

[Survived] PrecomputedMutator
q.js:580:34
-           var nearerValue = nearer(resolvedPromise);
+           var nearerValue = nearer(reject(resolvedPromise));

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (nearerValue === null) {

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (nearerValue === undefined) {

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (nearerValue === 0) {

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (isPromiseAlike(nearerValue)) {

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (!isPromise(nearerValue)) {

[Survived] PrecomputedMutator
q.js:581:13
-           if (isPromise(nearerValue)) {
+           if (isPromise || isPromiseAlike(nearerValue)) {

[Survived] PrecomputedMutator
q.js:581:23
-           if (isPromise(nearerValue)) {
+           if (isPromise(nearerValue + 1)) {

[Survived] PrecomputedMutator
q.js:581:23
-           if (isPromise(nearerValue)) {
+           if (isPromise(nearerValue - 1)) {

[Survived] PrecomputedMutator
q.js:581:23
-           if (isPromise(nearerValue)) {
+           if (isPromise(nearerValue * 2)) {

[Survived] PrecomputedMutator
q.js:588:13
-           if (!resolvedPromise) {
+           if (resolvedPromise === undefined) {

[Survived] PrecomputedMutator
q.js:588:13
-           if (!resolvedPromise) {
+           if (resolvedPromise.isFulfilled()) {

[Survived] PrecomputedMutator
q.js:588:13
-           if (!resolvedPromise) {
+           if (resolvedPromise.state === "fulfilled") {

[Survived] PrecomputedMutator
q.js:594:9
-       if (Q.longStackSupport && hasStacks) {
+       if (Q.longStackSupport || hasStacks) {

[Survived] PrecomputedMutator
q.js:594:9
-       if (Q.longStackSupport && hasStacks) {
+       if (Q.longStackSupport && !hasStacks) {

[Survived] PrecomputedMutator
q.js:594:9
-       if (Q.longStackSupport && hasStacks) {
+       if (!Q.longStackSupport || hasStacks) {

[Survived] PrecomputedMutator
q.js:604:47
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.length);

[Survived] PrecomputedMutator
q.js:604:47
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 2);

[Survived] PrecomputedMutator
q.js:604:47
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.lastIndexOf("\n") + 1);

[Survived] PrecomputedMutator
q.js:604:47
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.includes("\n") + 1);

[Survived] PrecomputedMutator
q.js:604:63
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.indexOf("\t") + 1);

[Survived] PrecomputedMutator
q.js:604:63
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.indexOf(" ") + 1);

[Survived] PrecomputedMutator
q.js:604:63
-               promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
+               promise.stack = e.stack.substring(e.stack.indexOf("") + 1);

[Survived] PrecomputedMutator
q.js:616:13
-           if (Q.longStackSupport && hasStacks) {
+           if (!Q.longStackSupport && hasStacks) {

[Survived] PrecomputedMutator
q.js:616:13
-           if (Q.longStackSupport && hasStacks) {
+           if (Q.longStackSupport || hasStacks) {

[Survived] PrecomputedMutator
q.js:616:13
-           if (Q.longStackSupport && hasStacks) {
+           if (Q.longStackSupport && !hasStacks) {

[Survived] PrecomputedMutator
q.js:624:17
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(newPromise, message.concat(newPromise));

[Survived] PrecomputedMutator
q.js:624:50
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(newPromise.promise, message);

[Survived] PrecomputedMutator
q.js:624:50
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(newPromise.then(function (value) {
+     return value;
+   }), message);

[Survived] PrecomputedMutator
q.js:624:50
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(newPromise.catch(function (error) {
+     throw error;
+   }), message);

[Survived] PrecomputedMutator
q.js:624:62
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(newPromise, message.concat(["new element"]));

[Survived] PrecomputedMutator
q.js:624:62
-                   newPromise.promiseDispatch.apply(newPromise, message);
+                   newPromise.promiseDispatch.apply(newPromise, message.filter(function (element) {
+     return element !== "new element";
+   }));

[Survived] PrecomputedMutator
q.js:638:16
-           become(Q(value));
+           become(Q.resolve(value));

[Survived] PrecomputedMutator
q.js:642:13
-           if (resolvedPromise) {
+           if (!resolvedPromise) {

[Survived] PrecomputedMutator
q.js:642:13
-           if (resolvedPromise) {
+           if (resolvedPromise === true) {

[Survived] PrecomputedMutator
q.js:642:13
-           if (resolvedPromise) {
+           if (resolvedPromise !== false) {

[Survived] PrecomputedMutator
q.js:646:16
-           become(fulfill(value));
+           become(reject(value));

[Survived] PrecomputedMutator
q.js:646:16
-           become(fulfill(value));
+           become(fulfill(otherValue));

[Survived] PrecomputedMutator
q.js:646:16
-           become(fulfill(value));
+           become(fulfill(value + 1));

[Survived] PrecomputedMutator
q.js:646:16
-           become(fulfill(value));
+           become(resolve(value));

[Survived] PrecomputedMutator
q.js:646:16
-           become(fulfill(value));
+           become(notify(value));

[Survived] PrecomputedMutator
q.js:646:24
-           become(fulfill(value));
+           become(fulfill(null));

[Survived] PrecomputedMutator
q.js:646:24
-           become(fulfill(value));
+           become(fulfill(undefined));

[Survived] PrecomputedMutator
q.js:646:24
-           become(fulfill(value));
+           become(fulfill(0));

[Survived] PrecomputedMutator
q.js:656:13
-           if (resolvedPromise) {
+           if (resolvedPromise === true) {

[Survived] PrecomputedMutator
q.js:656:13
-           if (resolvedPromise) {
+           if (resolvedPromise !== false) {

[Survived] PrecomputedMutator
q.js:656:13
-           if (resolvedPromise) {
+           if (resolvedPromise !== undefined) {

[Survived] PrecomputedMutator
q.js:662:17
-                   progressListener(progress);
+                   progressListeners[0](progress);

[Survived] PrecomputedMutator
q.js:662:17
-                   progressListener(progress);
+                   progressListeners[progressListeners.length - 1](progress);

[Survived] PrecomputedMutator
q.js:662:34
-                   progressListener(progress);
+                   progressListener(progress + 1);

[Survived] PrecomputedMutator
q.js:662:34
-                   progressListener(progress);
+                   progressListener(progress - 1);

[Survived] PrecomputedMutator
q.js:662:34
-                   progressListener(progress);
+                   progressListener(progress * 2);

[Survived] PrecomputedMutator
q.js:678:13
-           if (error) {
+           if (error.message) {

[Survived] PrecomputedMutator
q.js:678:13
-           if (error) {
+           if (error.stack) {

[Survived] PrecomputedMutator
q.js:678:13
-           if (error) {
+           if (error.name) {

[Survived] PrecomputedMutator
q.js:679:25
-               self.reject(error);
+               self.reject(null);

[Survived] PrecomputedMutator
q.js:679:25
-               self.reject(error);
+               self.reject(undefined);

[Survived] PrecomputedMutator
q.js:679:25
-               self.reject(error);
+               self.reject(new Error());

[Survived] PrecomputedMutator
q.js:680:20
-           } else if (arguments.length > 2) {
+           } else if (arguments.length > 1) {

[Survived] PrecomputedMutator
q.js:680:20
-           } else if (arguments.length > 2) {
+           } else if (arguments.length === 2) {

[Survived] PrecomputedMutator
q.js:680:20
-           } else if (arguments.length > 2) {
+           } else if (arguments.length < 2) {

[Survived] PrecomputedMutator
q.js:681:13
-               self.resolve(array_slice(arguments, 1));
+               self.reject(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:681:13
-               self.resolve(array_slice(arguments, 1));
+               self.notify(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:681:13
-               self.resolve(array_slice(arguments, 1));
+               self.fulfill(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, 0, 1));

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, 1, 2));

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, 3));

[Survived] PrecomputedMutator
q.js:681:26
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, 4));

[Survived] PrecomputedMutator
q.js:681:38
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments[0], 1));

[Survived] PrecomputedMutator
q.js:681:38
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments.slice(1), 1));

[Survived] PrecomputedMutator
q.js:681:38
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments.length, 1));

[Survived] PrecomputedMutator
q.js:681:49
-               self.resolve(array_slice(arguments, 1));
+               self.resolve(array_slice(arguments, -1));

[Survived] PrecomputedMutator
q.js:683:13
-               self.resolve(value);
+               self.reject(value);

[Survived] PrecomputedMutator
q.js:683:13
-               self.resolve(value);
+               self.notify(value);

[Survived] PrecomputedMutator
q.js:683:13
-               self.resolve(value);
+               self.fulfill(value);

[Survived] PrecomputedMutator
q.js:683:26
-               self.resolve(value);
+               self.resolve(null);

[Survived] PrecomputedMutator
q.js:683:26
-               self.resolve(value);
+               self.resolve(undefined);

[Survived] PrecomputedMutator
q.js:683:26
-               self.resolve(value);
+               self.resolve(0);

[Survived] PrecomputedMutator
q.js:697:9
-       if (typeof resolver !== "function") {
+       if (resolver !== "function") {

[Survived] PrecomputedMutator
q.js:697:9
-       if (typeof resolver !== "function") {
+       if (resolver !== Function) {

[Survived] PrecomputedMutator
q.js:700:20
-       var deferred = defer();
+       var deferred = defer.promise();

[Survived] PrecomputedMutator
q.js:702:9
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.reject, deferred.resolve, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:9
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.notify, deferred.resolve, deferred.reject);

[Survived] PrecomputedMutator
q.js:702:9
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.reject, deferred.notify, deferred.resolve);

[Survived] PrecomputedMutator
q.js:702:18
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.reject, deferred.reject, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:18
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.notify, deferred.reject, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:18
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.fulfill, deferred.reject, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:36
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.resolve, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:36
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.notify, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:36
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.fulfill, deferred.notify);

[Survived] PrecomputedMutator
q.js:702:53
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.reject, deferred.reject);

[Survived] PrecomputedMutator
q.js:702:53
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.reject, deferred.fulfill);

[Survived] PrecomputedMutator
q.js:702:53
-           resolver(deferred.resolve, deferred.reject, deferred.notify);
+           resolver(deferred.resolve, deferred.reject, deferred.resolve);

[Survived] PrecomputedMutator
q.js:704:9
-           deferred.reject(reason);
+           deferred.resolve(reason);

[Survived] PrecomputedMutator
q.js:704:9
-           deferred.reject(reason);
+           deferred.notify(reason);

[Survived] PrecomputedMutator
q.js:704:9
-           deferred.reject(reason);
+           deferred.makeNodeResolver(reason);

[Survived] PrecomputedMutator
q.js:704:25
-           deferred.reject(reason);
+           deferred.reject(null);

[Survived] PrecomputedMutator
q.js:704:25
-           deferred.reject(reason);
+           deferred.reject(undefined);

[Survived] PrecomputedMutator
q.js:704:25
-           deferred.reject(reason);
+           deferred.reject("error");

[Survived] PrecomputedMutator
q.js:739:12
-       return Q(x).join(y);
+       return Q.reject(x).join(y);

[Survived] PrecomputedMutator
q.js:739:12
-       return Q(x).join(y);
+       return Q.resolve(x).join(y);

[Survived] PrecomputedMutator
q.js:739:12
-       return Q(x).join(y);
+       return Q.all(x).join(y);

[Survived] PrecomputedMutator
q.js:739:14
-       return Q(x).join(y);
+       return Q(y).join(y);

[Survived] PrecomputedMutator
q.js:739:14
-       return Q(x).join(y);
+       return Q(x + 1).join(y);

[Survived] PrecomputedMutator
q.js:739:14
-       return Q(x).join(y);
+       return Q(x * 2).join(y);

[Survived] PrecomputedMutator
q.js:739:22
-       return Q(x).join(y);
+       return Q(x).join(x);

[Survived] PrecomputedMutator
q.js:739:22
-       return Q(x).join(y);
+       return Q(x).join(y + 1);

[Survived] PrecomputedMutator
q.js:739:22
-       return Q(x).join(y);
+       return Q(x).join(x + y);

[Survived] PrecomputedMutator
q.js:743:12
-       return Q([this, that]).spread(function (x, y) {
+       return Q.reject([this, that]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:743:12
-       return Q([this, that]).spread(function (x, y) {
+       return Q.resolve([this, that]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:743:12
-       return Q([this, that]).spread(function (x, y) {
+       return Q.all([this, that]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:743:14
-       return Q([this, that]).spread(function (x, y) {
+       return Q([that, this]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:743:14
-       return Q([this, that]).spread(function (x, y) {
+       return Q([this, this]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:743:14
-       return Q([this, that]).spread(function (x, y) {
+       return Q([null, that]).spread(function (x, y) {

[Survived] PrecomputedMutator
q.js:744:13
-           if (x === y) {
+           if (x !== y) {

[Survived] PrecomputedMutator
q.js:744:13
-           if (x === y) {
+           if (x == y) {

[Survived] PrecomputedMutator
q.js:744:13
-           if (x === y) {
+           if (x > y) {

[Survived] PrecomputedMutator
q.js:766:48
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i > len; i++) {

[Survived] PrecomputedMutator
q.js:766:48
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i <= len; i++) {

[Survived] PrecomputedMutator
q.js:766:48
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i >= len; i++) {

[Survived] PrecomputedMutator
q.js:766:57
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i < len; i--) {

[Survived] PrecomputedMutator
q.js:766:57
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i < len; i += 2) {

[Survived] PrecomputedMutator
q.js:766:57
-           for (var i = 0, len = answerPs.length; i < len; i++) {
+           for (var i = 0, len = answerPs.length; i < len; i = i + 1) {

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(reject, resolve);

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(resolve, reject, resolve);

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(reject, resolve, reject);

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q.reject(answerPs[i]).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q.resolve(answerPs[i]).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:13
-               Q(answerPs[i]).then(resolve, reject);
+               Q.all(answerPs[i]).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:15
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i] + 1).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:15
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i] - 1).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:15
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i] * 2).then(resolve, reject);

[Survived] PrecomputedMutator
q.js:767:33
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(reject, reject);

[Survived] PrecomputedMutator
q.js:767:42
-               Q(answerPs[i]).then(resolve, reject);
+               Q(answerPs[i]).then(resolve, resolve);

[Survived] PrecomputedMutator
q.js:773:12
-       return this.then(Q.race);
+       return null(Q.race);

[Survived] PrecomputedMutator
q.js:773:12
-       return this.then(Q.race);
+       return undefined(Q.race);

[Survived] PrecomputedMutator
q.js:773:22
-       return this.then(Q.race);
+       return this.then(Q.reject);

[Survived] PrecomputedMutator
q.js:773:22
-       return this.then(Q.race);
+       return this.then(Q.resolve);

[Survived] PrecomputedMutator
q.js:773:22
-       return this.then(Q.race);
+       return this.then(Q.all);

[Survived] PrecomputedMutator
q.js:789:9
-       if (fallback === void 0) {
+       if (fallback === null) {

[Survived] PrecomputedMutator
q.js:789:9
-       if (fallback === void 0) {
+       if (fallback === undefined) {

[Survived] PrecomputedMutator
q.js:789:9
-       if (fallback === void 0) {
+       if (fallback === function () {}) {

[Survived] PrecomputedMutator
q.js:796:9
-       if (inspect === void 0) {
+       if (inspect !== void 0) {

[Survived] PrecomputedMutator
q.js:796:9
-       if (inspect === void 0) {
+       if (inspect === null) {

[Survived] PrecomputedMutator
q.js:796:9
-       if (inspect === void 0) {
+       if (inspect === undefined) {

[Survived] PrecomputedMutator
q.js:808:47
-                   result = descriptor[op].apply(promise, args);
+                   result = descriptor[op].apply(null, args);

[Survived] PrecomputedMutator
q.js:808:47
-                   result = descriptor[op].apply(promise, args);
+                   result = descriptor[op].apply(undefined, args);

[Survived] PrecomputedMutator
q.js:808:47
-                   result = descriptor[op].apply(promise, args);
+                   result = descriptor[op].apply(0, args);

[Survived] PrecomputedMutator
q.js:808:56
-                   result = descriptor[op].apply(promise, args);
+                   result = descriptor[op].apply(promise, args.concat(1));

[Survived] PrecomputedMutator
q.js:810:40
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(null, op, args);

[Survived] PrecomputedMutator
q.js:810:40
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(undefined, op, args);

[Survived] PrecomputedMutator
q.js:810:40
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call({}, op, args);

[Survived] PrecomputedMutator
q.js:810:49
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op + 1, args);

[Survived] PrecomputedMutator
q.js:810:49
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op - 1, args);

[Survived] PrecomputedMutator
q.js:810:49
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op * 2, args);

[Survived] PrecomputedMutator
q.js:810:53
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op, args[0]);

[Survived] PrecomputedMutator
q.js:810:53
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op, args[1]);

[Survived] PrecomputedMutator
q.js:810:53
-                   result = fallback.call(promise, op, args);
+                   result = fallback.call(promise, op, args[2]);

[Survived] PrecomputedMutator
q.js:813:22
-               result = reject(exception);
+               result = resolve(exception);

[Survived] PrecomputedMutator
q.js:813:29
-               result = reject(exception);
+               result = reject(null);

[Survived] PrecomputedMutator
q.js:813:29
-               result = reject(exception);
+               result = reject(undefined);

[Survived] PrecomputedMutator
q.js:813:29
-               result = reject(exception);
+               result = reject(new Error("Something went wrong"));

[Survived] PrecomputedMutator
q.js:823:9
-       if (inspect) {
+       if (inspect.state) {

[Survived] PrecomputedMutator
q.js:823:9
-       if (inspect) {
+       if (inspect.value) {

[Survived] PrecomputedMutator
q.js:823:9
-       if (inspect) {
+       if (inspect.reason) {

[Survived] PrecomputedMutator
q.js:825:13
-           if (inspected.state === "rejected") {
+           if (inspected.state === "fulfilled") {

[Survived] PrecomputedMutator
q.js:825:13
-           if (inspected.state === "rejected") {
+           if (inspected.state === "pending") {

[Survived] PrecomputedMutator
q.js:825:13
-           if (inspected.state === "rejected") {
+           if (inspected.state === "unknown") {

[Survived] PrecomputedMutator
q.js:831:17
-               if (inspected.state === "pending" ||
-                   inspected.state === "rejected") {
+               if (inspected.state === "fulfilled") {

[Survived] PrecomputedMutator
q.js:831:17
-               if (inspected.state === "pending" ||
-                   inspected.state === "rejected") {
+               if (inspected.state !== "rejected") {

[Survived] PrecomputedMutator
q.js:831:17
-               if (inspected.state === "pending" ||
-                   inspected.state === "rejected") {
+               if (inspected.state === "pending") {

[Survived] PrecomputedMutator
q.js:862:13
-               makeStackTraceLong(exception, self);
+               makeStackTraceLong(exception, self);

[Survived] PrecomputedMutator
q.js:873:51
-           return typeof progressed === "function" ? progressed(value) : value;
+           return typeof progressed === "function" ? progressed + 1(value) : value;

[Survived] PrecomputedMutator
q.js:873:51
-           return typeof progressed === "function" ? progressed(value) : value;
+           return typeof progressed === "function" ? progressed - 1(value) : value;

[Survived] PrecomputedMutator
q.js:873:51
-           return typeof progressed === "function" ? progressed(value) : value;
+           return typeof progressed === "function" ? progressed * 2(value) : value;

[Survived] PrecomputedMutator
q.js:873:62
-           return typeof progressed === "function" ? progressed(value) : value;
+           return typeof progressed === "function" ? progressed(null) : value;

[Survived] PrecomputedMutator
q.js:873:62
-           return typeof progressed === "function" ? progressed(value) : value;
+           return typeof progressed === "function" ? progressed(undefined) : value;

[Survived] PrecomputedMutator
q.js:885:17
-               if (done) {
+               if (done && false) {

[Survived] PrecomputedMutator
q.js:899:24
-               newValue = _progressed(value);
+               newValue = _rejected(value);

[Survived] PrecomputedMutator
q.js:899:24
-               newValue = _progressed(value);
+               newValue = _fulfilled(value);

[Survived] PrecomputedMutator
q.js:899:36
-               newValue = _progressed(value);
+               newValue = _progressed(null);

[Survived] PrecomputedMutator
q.js:899:36
-               newValue = _progressed(value);
+               newValue = _progressed(undefined);

[Survived] PrecomputedMutator
q.js:899:36
-               newValue = _progressed(value);
+               newValue = _progressed(0);

[Survived] PrecomputedMutator
q.js:902:17
-               if (Q.onerror) {
+               if (Q.onerror()) {

[Survived] PrecomputedMutator
q.js:903:27
-                   Q.onerror(e);
+                   Q.onerror(e.message);

[Survived] PrecomputedMutator
q.js:903:27
-                   Q.onerror(e);
+                   Q.onerror(e.stack);

[Survived] PrecomputedMutator
q.js:903:27
-                   Q.onerror(e);
+                   Q.onerror(e.toString());

[Survived] PrecomputedMutator
q.js:909:13
-           if (!threw) {
+           if (threw) {

[Survived] PrecomputedMutator
q.js:909:13
-           if (!threw) {
+           if (threw === true) {

[Survived] PrecomputedMutator
q.js:910:13
-               deferred.notify(newValue);
+               deferred.reject(newValue);

[Survived] PrecomputedMutator
q.js:910:29
-               deferred.notify(newValue);
+               deferred.notify(null);

[Survived] PrecomputedMutator
q.js:910:29
-               deferred.notify(newValue);
+               deferred.notify(undefined);

[Survived] PrecomputedMutator
q.js:910:29
-               deferred.notify(newValue);
+               deferred.notify(0);

[Survived] PrecomputedMutator
q.js:918:27
-       return Q(promise).tap(callback);
+       return Q(promise).tap(callback.call(null));

[Survived] PrecomputedMutator
q.js:918:27
-       return Q(promise).tap(callback);
+       return Q(promise).tap(callback.apply(null));

[Survived] PrecomputedMutator
q.js:918:27
-       return Q(promise).tap(callback);
+       return Q(promise).tap(callback.bind(null)());

[Survived] PrecomputedMutator
q.js:934:16
-       callback = Q(callback);
+       callback = Q.fcall(callback);

[Survived] PrecomputedMutator
q.js:934:16
-       callback = Q(callback);
+       callback = Q.resolve(callback);

[Survived] PrecomputedMutator
q.js:934:16
-       callback = Q(callback);
+       callback = Q.reject(callback);

[Survived] PrecomputedMutator
q.js:934:18
-       callback = Q(callback);
+       callback = Q(callback.fcall(value).thenResolve(value));

[Survived] PrecomputedMutator
q.js:934:18
-       callback = Q(callback);
+       callback = Q(callback.then(value));

[Survived] PrecomputedMutator
q.js:934:18
-       callback = Q(callback);
+       callback = Q(callback.resolve(value));

[Survived] PrecomputedMutator
q.js:937:16
-           return callback.fcall(value).thenResolve(value);
+           return callback.fapply(value).thenResolve(value);

[Survived] PrecomputedMutator
q.js:937:16
-           return callback.fcall(value).thenResolve(value);
+           return callback.fbind(value).thenResolve(value);

[Survived] PrecomputedMutator
q.js:937:31
-           return callback.fcall(value).thenResolve(value);
+           return callback.fcall(null).thenResolve(value);

[Survived] PrecomputedMutator
q.js:937:31
-           return callback.fcall(value).thenResolve(value);
+           return callback.fcall(undefined).thenResolve(value);

[Survived] PrecomputedMutator
q.js:937:31
-           return callback.fcall(value).thenResolve(value);
+           return callback.fcall("foo").thenResolve(value);

[Survived] PrecomputedMutator
q.js:937:50
-           return callback.fcall(value).thenResolve(value);
+           return callback.fcall(value).thenResolve(null);

[Survived] PrecomputedMutator
q.js:937:50
-           return callback.fcall(value).thenResolve(value);
+           return callback.fcall(value).thenResolve(undefined);

[Survived] PrecomputedMutator
q.js:959:12
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(rejected, fulfilled, progressed);

[Survived] PrecomputedMutator
q.js:959:12
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, rejected, progressed, null);

[Survived] PrecomputedMutator
q.js:959:12
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(rejected, fulfilled, progressed, undefined);

[Survived] PrecomputedMutator
q.js:959:14
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(0).then(fulfilled, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:26
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(rejected, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:26
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(undefined, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:26
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(null, rejected, progressed);

[Survived] PrecomputedMutator
q.js:959:37
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, fulfilled, progressed);

[Survived] PrecomputedMutator
q.js:959:37
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, undefined, progressed);

[Survived] PrecomputedMutator
q.js:959:47
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, rejected, null);

[Survived] PrecomputedMutator
q.js:959:47
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, rejected, undefined);

[Survived] PrecomputedMutator
q.js:959:47
-       return Q(value).then(fulfilled, rejected, progressed);
+       return Q(value).then(fulfilled, rejected, function () {});

[Survived] PrecomputedMutator
q.js:963:22
-       return this.then(function () { return value; });
+       return this.then(function () {
+     return null;
+   });

[Survived] PrecomputedMutator
q.js:963:22
-       return this.then(function () { return value; });
+       return this.then(function () {
+     return undefined;
+   });

[Survived] PrecomputedMutator
q.js:963:22
-       return this.then(function () { return value; });
+       return this.then(function () {
+     return 0;
+   });

[Survived] PrecomputedMutator
q.js:967:12
-       return Q(promise).thenResolve(value);
+       return Q.reject(promise).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:12
-       return Q(promise).thenResolve(value);
+       return Q.resolve(promise).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:12
-       return Q(promise).thenResolve(value);
+       return Q.defer(promise).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:14
-       return Q(promise).thenResolve(value);
+       return Q(null).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:14
-       return Q(promise).thenResolve(value);
+       return Q(undefined).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:14
-       return Q(promise).thenResolve(value);
+       return Q(0).thenResolve(value);

[Survived] PrecomputedMutator
q.js:967:35
-       return Q(promise).thenResolve(value);
+       return Q(promise).thenResolve(null);

[Survived] PrecomputedMutator
q.js:967:35
-       return Q(promise).thenResolve(value);
+       return Q(promise).thenResolve(undefined);

[Survived] PrecomputedMutator
q.js:967:35
-       return Q(promise).thenResolve(value);
+       return Q(promise).thenResolve(0);

[Survived] PrecomputedMutator
q.js:971:22
-       return this.then(function () { throw reason; });
+       return this.then(function () {
+     return reason;
+   });

[Survived] PrecomputedMutator
q.js:971:22
-       return this.then(function () { throw reason; });
+       return this.then(function () {
+     return new Error(reason);
+   });

[Survived] PrecomputedMutator
q.js:971:22
-       return this.then(function () { throw reason; });
+       return this.then(function () {
+     throw new Error("Reason: " + reason);
+   });

[Survived] PrecomputedMutator
q.js:975:14
-       return Q(promise).thenReject(reason);
+       return Q(null).thenReject(reason);

[Survived] PrecomputedMutator
q.js:975:14
-       return Q(promise).thenReject(reason);
+       return Q(undefined).thenReject(reason);

[Survived] PrecomputedMutator
q.js:975:14
-       return Q(promise).thenReject(reason);
+       return Q(0).thenReject(reason);

[Survived] PrecomputedMutator
q.js:975:34
-       return Q(promise).thenReject(reason);
+       return Q(promise).thenReject(null);

[Survived] PrecomputedMutator
q.js:975:34
-       return Q(promise).thenReject(reason);
+       return Q(promise).thenReject(undefined);

[Survived] PrecomputedMutator
q.js:975:34
-       return Q(promise).thenReject(reason);
+       return Q(promise).thenReject("error");

[Survived] PrecomputedMutator
q.js:991:9
-       if (isPromise(value)) {
+       if (isPromiseAlike(value)) {

[Survived] PrecomputedMutator
q.js:991:9
-       if (isPromise(value)) {
+       if (!isPromise(value)) {

[Survived] PrecomputedMutator
q.js:991:9
-       if (isPromise(value)) {
+       if (isRejected(value)) {

[Survived] PrecomputedMutator
q.js:991:9
-       if (isPromise(value)) {
+       if (isFulfilled(value)) {

[Survived] PrecomputedMutator
q.js:991:19
-       if (isPromise(value)) {
+       if (isPromise(value * 2)) {

[Survived] PrecomputedMutator
q.js:991:19
-       if (isPromise(value)) {
+       if (isPromise(value + 1)) {

[Survived] PrecomputedMutator
q.js:993:13
-           if (inspected.state === "fulfilled") {
+           if (inspected.state === "rejected") {

[Survived] PrecomputedMutator
q.js:991:19
-       if (isPromise(value)) {
+       if (isPromise(value - 1)) {

[Survived] PrecomputedMutator
q.js:993:13
-           if (inspected.state === "fulfilled") {
+           if (inspected.state === "pending") {

[Survived] PrecomputedMutator
q.js:993:13
-           if (inspected.state === "fulfilled") {
+           if (inspected.value === undefined) {

[Survived] PrecomputedMutator
q.js:1020:12
-       return isPromise(object) && object.inspect().state === "pending";
+       return isPromiseAlike(object) && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1020:12
-       return isPromise(object) && object.inspect().state === "pending";
+       return !isPromise(object) && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1020:12
-       return isPromise(object) && object.inspect().state === "pending";
+       return isFulfilled(object) && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1020:22
-       return isPromise(object) && object.inspect().state === "pending";
+       return isPromise(object.inspect().state === "rejected") && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1020:22
-       return isPromise(object) && object.inspect().state === "pending";
+       return isPromise(object.inspect().value === "rejected") && object.inspect().state === "pending";

[Survived] PrecomputedMutator
q.js:1033:13
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !!isPromise(object) || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1033:13
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !isPromiseAlike(object) || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1033:13
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !isFulfilled(object) || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1033:23
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !isPromise(object.inspect().state === "rejected") || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1033:23
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !isPromise(object.inspect().state === "pending") || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1033:23
-       return !isPromise(object) || object.inspect().state === "fulfilled";
+       return !isPromise(object.inspect().state === "fulfilled") || object.inspect().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1037:12
-       return this.inspect().state === "fulfilled";
+       return this.inspect.state().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1037:12
-       return this.inspect().state === "fulfilled";
+       return this.inspect.value().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1037:12
-       return this.inspect().state === "fulfilled";
+       return this.inspect.reason().state === "fulfilled";

[Survived] PrecomputedMutator
q.js:1045:12
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isPromiseAlike(object) && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1045:12
-       return isPromise(object) && object.inspect().state === "rejected";
+       return !isPromise(object) && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1045:22
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isPromise(object.inspect().state === "rejected") && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1045:12
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isFulfilled(object) && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1045:22
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isPromise(object.inspect().state === "fulfilled") && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1045:22
-       return isPromise(object) && object.inspect().state === "rejected";
+       return isPromise(object.state === "rejected") && object.inspect().state === "rejected";

[Survived] PrecomputedMutator
q.js:1067:9
-       if (!trackUnhandledRejections) {
+       if (!trackUnhandledRejections.valueOf()) {

[Survived] PrecomputedMutator
q.js:1067:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections === false) {

[Survived] PrecomputedMutator
q.js:1073:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections === false) {

[Survived] PrecomputedMutator
q.js:1073:9
-       if (!trackUnhandledRejections) {
+       if (typeof trackUnhandledRejections === "boolean") {

[Survived] PrecomputedMutator
q.js:1073:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections !== true) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (unhandledRejections.includes(promise)) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (unhandledRejections.indexOf(promise) > -1) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (unhandledRejections.some(function (p) {
+     return p === promise;
+   })) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledRejections, reason) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(reportedUnhandledRejections, promise) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:17
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledReasons, promise) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:31
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledReasons, promise) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:31
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(reportedUnhandledRejections, promise) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:31
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(trackUnhandledRejections, promise) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:52
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledRejections, promise.then(function () {
+     throw new Error("test");
+   })) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:52
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledRejections, promise.then(function () {
+     return Q.reject("test");
+   })) !== -1) {

[Survived] PrecomputedMutator
q.js:1078:52
-               if (array_indexOf(unhandledRejections, promise) !== -1) {
+               if (array_indexOf(unhandledRejections, promise.then(function () {
+     return Q.resolve("test");
+   })) !== -1) {

[Survived] PrecomputedMutator
q.js:1079:17
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("rejectionHandled", reason, promise);

[Survived] PrecomputedMutator
q.js:1079:17
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason, null);

[Survived] PrecomputedMutator
q.js:1079:30
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection" + "foo", reason, promise);

[Survived] PrecomputedMutator
q.js:1079:30
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection" + "bar", reason, promise);

[Survived] PrecomputedMutator
q.js:1079:30
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection" + "baz", reason, promise);

[Survived] PrecomputedMutator
q.js:1079:52
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason.stack, promise);

[Survived] PrecomputedMutator
q.js:1079:52
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason.message, promise);

[Survived] PrecomputedMutator
q.js:1079:52
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason.toString(), promise);

[Survived] PrecomputedMutator
q.js:1079:60
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason, promise.then(function () {
+     throw new Error("test");
+   }));

[Survived] PrecomputedMutator
q.js:1079:60
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason, promise.then(function () {
+     return Q.reject("test");
+   }));

[Survived] PrecomputedMutator
q.js:1079:60
-                   process.emit("unhandledRejection", reason, promise);
+                   process.emit("unhandledRejection", reason, promise.then(function () {
+     return Q.reject(new Error("test"));
+   }));

[Survived] PrecomputedMutator
q.js:1080:17
-                   reportedUnhandledRejections.push(promise);
+                   reportedUnhandledRejections.pop(promise);

[Survived] PrecomputedMutator
q.js:1080:17
-                   reportedUnhandledRejections.push(promise);
+                   reportedUnhandledRejections.shift(promise);

[Survived] PrecomputedMutator
q.js:1080:17
-                   reportedUnhandledRejections.push(promise);
+                   reportedUnhandledRejections.unshift(promise);

[Survived] PrecomputedMutator
q.js:1085:5
-       unhandledRejections.push(promise);
+       unhandledRejections.pop(promise);

[Survived] PrecomputedMutator
q.js:1085:5
-       unhandledRejections.push(promise);
+       unhandledRejections.shift(promise);

[Survived] PrecomputedMutator
q.js:1085:5
-       unhandledRejections.push(promise);
+       unhandledRejections.unshift(promise);

[Survived] PrecomputedMutator
q.js:1085:30
-       unhandledRejections.push(promise);
+       unhandledRejections.push(null);

[Survived] PrecomputedMutator
q.js:1085:30
-       unhandledRejections.push(promise);
+       unhandledRejections.push(undefined);

[Survived] PrecomputedMutator
q.js:1086:9
-       if (reason && typeof reason.stack !== "undefined") {
+       if (reason && reason.stack !== "undefined") {

[Survived] PrecomputedMutator
q.js:1086:9
-       if (reason && typeof reason.stack !== "undefined") {
+       if (reason && reason.stack !== "undefined" && reason.stack !== null) {

[Survived] PrecomputedMutator
q.js:1086:9
-       if (reason && typeof reason.stack !== "undefined") {
+       if (reason && reason.stack !== "undefined" && reason.stack !== "undefined") {

[Survived] PrecomputedMutator
q.js:1087:31
-           unhandledReasons.push(reason.stack);
+           unhandledReasons.push(reason.message);

[Survived] PrecomputedMutator
q.js:1087:31
-           unhandledReasons.push(reason.stack);
+           unhandledReasons.push(reason.name);

[Survived] PrecomputedMutator
q.js:1087:31
-           unhandledReasons.push(reason.stack);
+           unhandledReasons.push(reason.code);

[Survived] PrecomputedMutator
q.js:1089:9
-           unhandledReasons.push("(no stack) " + reason);
+           unhandledReasons.pop("(no stack) " + reason);

[Survived] PrecomputedMutator
q.js:1089:9
-           unhandledReasons.push("(no stack) " + reason);
+           unhandledReasons.shift("(no stack) " + reason);

[Survived] PrecomputedMutator
q.js:1089:9
-           unhandledReasons.push("(no stack) " + reason);
+           unhandledReasons.unshift("(no stack) " + reason);

[Survived] PrecomputedMutator
q.js:1094:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections === false) {

[Survived] PrecomputedMutator
q.js:1094:9
-       if (!trackUnhandledRejections) {
+       if (trackUnhandledRejections !== true) {

[Survived] PrecomputedMutator
q.js:1098:14
-       var at = array_indexOf(unhandledRejections, promise);
+       var at = array_indexOf(unhandledRejections.length);

[Survived] PrecomputedMutator
q.js:1098:28
-       var at = array_indexOf(unhandledRejections, promise);
+       var at = array_indexOf(unhandledRejections.slice(), promise);

[Survived] PrecomputedMutator
q.js:1098:28
-       var at = array_indexOf(unhandledRejections, promise);
+       var at = array_indexOf(unhandledRejections.splice(0, 1), promise);

[Survived] PrecomputedMutator
q.js:1099:9
-       if (at !== -1) {
+       if (at < -1) {

[Survived] PrecomputedMutator
q.js:1099:9
-       if (at !== -1) {
+       if (at > -1) {

[Survived] PrecomputedMutator
q.js:1099:9
-       if (at !== -1) {
+       if (at === -1) {

[Survived] PrecomputedMutator
q.js:1102:32
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections.length, promise);

[Survived] PrecomputedMutator
q.js:1102:32
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections.indexOf(promise) === -1);

[Survived] PrecomputedMutator
q.js:1102:32
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections.includes(promise));

[Survived] PrecomputedMutator
q.js:1102:46
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(unhandledRejections, promise);

[Survived] PrecomputedMutator
q.js:1102:46
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections.length, promise);

[Survived] PrecomputedMutator
q.js:1102:46
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(unhandledReasons.length, promise);

[Survived] PrecomputedMutator
q.js:1102:75
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections, promise.then(function () {}));

[Survived] PrecomputedMutator
q.js:1102:75
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections, promise.catch(function () {}));

[Survived] PrecomputedMutator
q.js:1102:75
-                   var atReport = array_indexOf(reportedUnhandledRejections, promise);
+                   var atReport = array_indexOf(reportedUnhandledRejections, promise.finally(function () {}));

[Survived] PrecomputedMutator
q.js:1103:21
-                   if (atReport !== -1) {
+                   if (atReport === -1) {

[Survived] PrecomputedMutator
q.js:1103:21
-                   if (atReport !== -1) {
+                   if (reportedUnhandledRejections.length === 0) {

[Survived] PrecomputedMutator
q.js:1103:21
-                   if (atReport !== -1) {
+                   if (unhandledRejections.length === 0) {

[Survived] PrecomputedMutator
q.js:1104:21
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", unhandledReasons[at], unhandledRejections[at]);

[Survived] PrecomputedMutator
q.js:1104:21
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", reason, promise);

[Survived] PrecomputedMutator
q.js:1104:54
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", unhandledReasons[at + 1], promise);

[Survived] PrecomputedMutator
q.js:1104:54
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", unhandledReasons[at - 1], promise);

[Survived] PrecomputedMutator
q.js:1104:54
-                       process.emit("rejectionHandled", unhandledReasons[at], promise);
+                       process.emit("rejectionHandled", unhandledReasons[at] = "new reason", promise);

[Survived] PrecomputedMutator
q.js:1105:21
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, 0);

[Survived] PrecomputedMutator
q.js:1105:21
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, -1);

[Survived] PrecomputedMutator
q.js:1105:21
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, 2);

[Survived] PrecomputedMutator
q.js:1105:56
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport + 1, 1);

[Survived] PrecomputedMutator
q.js:1105:56
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport - 1, 1);

[Survived] PrecomputedMutator
q.js:1105:56
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport.length, 1);

[Survived] PrecomputedMutator
q.js:1105:66
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, 0);

[Survived] PrecomputedMutator
q.js:1105:66
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, -1);

[Survived] PrecomputedMutator
q.js:1105:66
-                       reportedUnhandledRejections.splice(atReport, 1);
+                       reportedUnhandledRejections.splice(atReport, 2);

[Survived] PrecomputedMutator
q.js:1109:9
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, 0);

[Survived] PrecomputedMutator
q.js:1109:9
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, 2);

[Survived] PrecomputedMutator
q.js:1109:9
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, -1);

[Survived] PrecomputedMutator
q.js:1109:36
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at + 1, 1);

[Survived] PrecomputedMutator
q.js:1109:36
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at - 1, 1);

[Survived] PrecomputedMutator
q.js:1109:36
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at + 2, 1);

[Survived] PrecomputedMutator
q.js:1109:40
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, 0);

[Survived] PrecomputedMutator
q.js:1109:40
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, -1);

[Survived] PrecomputedMutator
q.js:1109:40
-           unhandledRejections.splice(at, 1);
+           unhandledRejections.splice(at, 2);

[Survived] PrecomputedMutator
q.js:1110:9
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, 0);

[Survived] PrecomputedMutator
q.js:1110:9
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, 2);

[Survived] PrecomputedMutator
q.js:1110:9
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, -1);

[Survived] PrecomputedMutator
q.js:1110:33
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at + 1, 1);

[Survived] PrecomputedMutator
q.js:1110:33
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at - 1, 1);

[Survived] PrecomputedMutator
q.js:1110:33
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at + 2, 1);

[Survived] PrecomputedMutator
q.js:1110:37
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, 0);

[Survived] PrecomputedMutator
q.js:1110:37
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, -1);

[Survived] PrecomputedMutator
q.js:1110:37
-           unhandledReasons.splice(at, 1);
+           unhandledReasons.splice(at, unhandledReasons.length);

[Survived] PrecomputedMutator
q.js:1122:5
-       resetUnhandledRejections();
+       unhandledRejections.length = 0();

[Survived] PrecomputedMutator
q.js:1122:5
-       resetUnhandledRejections();
+       unhandledReasons.length = 0();

[Survived] PrecomputedMutator
q.js:1139:17
-               if (rejected) {
+               if (!rejected) {

[Survived] PrecomputedMutator
q.js:1139:17
-               if (rejected) {
+               if (rejected && false) {

[Survived] PrecomputedMutator
q.js:1139:17
-               if (rejected) {
+               if (rejected || true) {

[Survived] PrecomputedMutator
q.js:1140:34
-                   untrackRejection(this);
+                   untrackRejection(null);

[Survived] PrecomputedMutator
q.js:1140:34
-                   untrackRejection(this);
+                   untrackRejection(undefined);

[Survived] PrecomputedMutator
q.js:1140:34
-                   untrackRejection(this);
+                   untrackRejection({});

[Survived] PrecomputedMutator
q.js:1151:5
-       trackRejection(rejection, reason);
+       trackRejection(rejection, reason + 1);

[Survived] PrecomputedMutator
q.js:1151:5
-       trackRejection(rejection, reason);
+       trackRejection(rejection, reason - 1);

[Survived] PrecomputedMutator
q.js:1151:5
-       trackRejection(rejection, reason);
+       trackRejection(rejection, reason * 2);

[Survived] PrecomputedMutator
q.js:1151:5
-       trackRejection(rejection, reason);
+       untrackRejection(rejection, reason);

[Survived] PrecomputedMutator
q.js:1151:20
-       trackRejection(rejection, reason);
+       trackRejection(null, reason);

[Survived] PrecomputedMutator
q.js:1151:20
-       trackRejection(rejection, reason);
+       trackRejection(undefined, reason);

[Survived] PrecomputedMutator
q.js:1151:20
-       trackRejection(rejection, reason);
+       trackRejection(0, reason);

[Survived] PrecomputedMutator
q.js:1151:31
-       trackRejection(rejection, reason);
+       trackRejection(rejection, null);

[Survived] PrecomputedMutator
q.js:1151:31
-       trackRejection(rejection, reason);
+       trackRejection(rejection, undefined);

[Survived] PrecomputedMutator
q.js:1151:31
-       trackRejection(rejection, reason);
+       trackRejection(rejection, "some string");

[Survived] PrecomputedMutator
q.js:1178:17
-               if (name === null || name === void 0) {
+               if (name === undefined) {

[Survived] PrecomputedMutator
q.js:1178:17
-               if (name === null || name === void 0) {
+               if (name === void 0) {

[Survived] PrecomputedMutator
q.js:1178:17
-               if (name === null || name === void 0) {
+               if (name === null || name === undefined) {

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.apply(null, args);

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.apply(this, args);

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.call(void 0, args);

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.bind(void 0, args);

[Survived] PrecomputedMutator
q.js:1179:24
-                   return value.apply(void 0, args);
+                   return value.toString(void 0, args);

[Survived] PrecomputedMutator
q.js:1179:36
-                   return value.apply(void 0, args);
+                   return value.apply(null, args);

[Survived] PrecomputedMutator
q.js:1179:36
-                   return value.apply(void 0, args);
+                   return value.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1179:36
-                   return value.apply(void 0, args);
+                   return value.apply(this, args);

[Survived] PrecomputedMutator
q.js:1179:44
-                   return value.apply(void 0, args);
+                   return value.apply(void 0, args.slice());

[Survived] PrecomputedMutator
q.js:1179:44
-                   return value.apply(void 0, args);
+                   return value.apply(void 0, args.concat());

[Survived] PrecomputedMutator
q.js:1179:44
-                   return value.apply(void 0, args);
+                   return value.apply(void 0, args.map(function (arg) {
+     return arg + 1;
+   }));

[Survived] PrecomputedMutator
q.js:1181:24
-                   return value[name].apply(value, args);
+                   return value[name].apply(value, args.slice());

[Survived] PrecomputedMutator
q.js:1181:24
-                   return value[name].apply(value, args);
+                   return value[name].apply(value, args.concat());

[Survived] PrecomputedMutator
q.js:1181:24
-                   return value[name].apply(value, args);
+                   return value[name].call(value, args);

[Survived] PrecomputedMutator
q.js:1181:24
-                   return value[name].apply(value, args);
+                   return value[name].bind(value, args);

[Survived] PrecomputedMutator
q.js:1181:42
-                   return value[name].apply(value, args);
+                   return value[name].apply(null, args);

[Survived] PrecomputedMutator
q.js:1181:42
-                   return value[name].apply(value, args);
+                   return value[name].apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1181:42
-                   return value[name].apply(value, args);
+                   return value[name].apply({}, args);

[Survived] PrecomputedMutator
q.js:1181:49
-                   return value[name].apply(value, args);
+                   return value[name].apply(value, args[0]);

[Survived] PrecomputedMutator
q.js:1181:49
-                   return value[name].apply(value, args);
+                   return value[name].apply(value, args.slice(1));

[Survived] PrecomputedMutator
q.js:1181:49
-                   return value[name].apply(value, args);
+                   return value[name].apply(value, args.concat(["extra argument"]));

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.apply(thisp, args.slice());

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.apply(thisp, args.concat());

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.call(thisp, args);

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.bind(thisp, args);

[Survived] PrecomputedMutator
q.js:1185:20
-               return value.apply(thisp, args);
+               return value.toString(thisp, args);

[Survived] PrecomputedMutator
q.js:1185:32
-               return value.apply(thisp, args);
+               return value.apply(null, args);

[Survived] PrecomputedMutator
q.js:1185:32
-               return value.apply(thisp, args);
+               return value.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1185:32
-               return value.apply(thisp, args);
+               return value.apply({}, args);

[Survived] PrecomputedMutator
q.js:1185:39
-               return value.apply(thisp, args);
+               return value.apply(thisp, args.slice());

[Survived] PrecomputedMutator
q.js:1185:39
-               return value.apply(thisp, args);
+               return value.apply(thisp, args.concat());

[Survived] PrecomputedMutator
q.js:1185:39
-               return value.apply(thisp, args);
+               return value.apply(thisp, args.map(function (x) {
+     return x;
+   }));

[Survived] PrecomputedMutator
q.js:1188:20
-               return object_keys(value);
+               return object_values(value);

[Survived] PrecomputedMutator
q.js:1188:20
-               return object_keys(value);
+               return Object.values(value);

[Survived] PrecomputedMutator
q.js:1188:20
-               return object_keys(value);
+               return Object.keys(value);

[Survived] PrecomputedMutator
q.js:1188:32
-               return object_keys(value);
+               return object_keys(null);

[Survived] PrecomputedMutator
q.js:1188:32
-               return object_keys(value);
+               return object_keys(undefined);

[Survived] PrecomputedMutator
q.js:1188:32
-               return object_keys(value);
+               return object_keys({});

[Survived] PrecomputedMutator
q.js:1204:61
-               promise.then(deferred.resolve, deferred.reject, deferred.notify);
+               promise.then(deferred.resolve, deferred.reject, deferred.reject);

[Survived] PrecomputedMutator
q.js:1204:61
-               promise.then(deferred.resolve, deferred.reject, deferred.notify);
+               promise.then(deferred.resolve, deferred.reject, deferred.resolve);

[Survived] PrecomputedMutator
q.js:1204:61
-               promise.then(deferred.resolve, deferred.reject, deferred.notify);
+               promise.then(deferred.resolve, deferred.reject, deferred.progress);

[Survived] PrecomputedMutator
q.js:1206:13
-               deferred.reject(exception);
+               deferred.resolve(exception);

[Survived] PrecomputedMutator
q.js:1206:13
-               deferred.reject(exception);
+               deferred.notify(exception);

[Survived] PrecomputedMutator
q.js:1206:13
-               deferred.reject(exception);
+               deferred.cancel(exception);

[Survived] PrecomputedMutator
q.js:1206:29
-               deferred.reject(exception);
+               deferred.reject(null);

[Survived] PrecomputedMutator
q.js:1206:29
-               deferred.reject(exception);
+               deferred.reject(undefined);

[Survived] PrecomputedMutator
q.js:1206:29
-               deferred.reject(exception);
+               deferred.reject(false);

[Survived] PrecomputedMutator
q.js:1226:16
-           return dispatch(object, op, args);
+           return dispatch(object, op, args[0]);

[Survived] PrecomputedMutator
q.js:1226:16
-           return dispatch(object, op, args);
+           return dispatch(object, op, args.length);

[Survived] PrecomputedMutator
q.js:1226:16
-           return dispatch(object, op, args);
+           return dispatch(object, op, args[args.length - 1]);

[Survived] PrecomputedMutator
q.js:1226:25
-           return dispatch(object, op, args);
+           return dispatch(null, op, args);

[Survived] PrecomputedMutator
q.js:1226:25
-           return dispatch(object, op, args);
+           return dispatch(undefined, op, args);

[Survived] PrecomputedMutator
q.js:1226:25
-           return dispatch(object, op, args);
+           return dispatch({}, op, args);

[Survived] PrecomputedMutator
q.js:1226:33
-           return dispatch(object, op, args);
+           return dispatch(object, op + 1, args);

[Survived] PrecomputedMutator
q.js:1226:33
-           return dispatch(object, op, args);
+           return dispatch(object, op - 1, args);

[Survived] PrecomputedMutator
q.js:1226:33
-           return dispatch(object, op, args);
+           return dispatch(object, op * 2, args);

[Survived] PrecomputedMutator
q.js:1226:37
-           return dispatch(object, op, args);
+           return dispatch(object, op, null);

[Survived] PrecomputedMutator
q.js:1226:37
-           return dispatch(object, op, args);
+           return dispatch(object, op, undefined);

[Survived] PrecomputedMutator
q.js:1226:37
-           return dispatch(object, op, args);
+           return dispatch(object, op, []);

[Survived] PrecomputedMutator
q.js:1228:16
-           return Q(object).inspect();
+           return Q.reject(object).inspect();

[Survived] PrecomputedMutator
q.js:1228:16
-           return Q(object).inspect();
+           return Q.fulfill(object).inspect();

[Survived] PrecomputedMutator
q.js:1228:16
-           return Q(object).inspect();
+           return Q.defer(object).inspect();

[Survived] PrecomputedMutator
q.js:1228:18
-           return Q(object).inspect();
+           return Q(null).inspect();

[Survived] PrecomputedMutator
q.js:1228:18
-           return Q(object).inspect();
+           return Q(undefined).inspect();

[Survived] PrecomputedMutator
q.js:1228:18
-           return Q(object).inspect();
+           return Q({}).inspect();

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(rejected, fulfilled);

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(fulfilled);

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(null, fulfilled);

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q.reject(value).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q.resolve(value).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:12
-       return Q(value).spread(fulfilled, rejected);
+       return Q.defer(value).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:14
-       return Q(value).spread(fulfilled, rejected);
+       return Q(undefined).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:14
-       return Q(value).spread(fulfilled, rejected);
+       return Q(0).spread(fulfilled, rejected);

[Survived] PrecomputedMutator
q.js:1244:28
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(rejected, rejected);

[Survived] PrecomputedMutator
q.js:1244:28
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(null, rejected);

[Survived] PrecomputedMutator
q.js:1244:28
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(undefined, rejected);

[Survived] PrecomputedMutator
q.js:1244:39
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(fulfilled, fulfilled);

[Survived] PrecomputedMutator
q.js:1244:39
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(fulfilled, undefined);

[Survived] PrecomputedMutator
q.js:1244:39
-       return Q(value).spread(fulfilled, rejected);
+       return Q(value).spread(fulfilled, null);

[Survived] PrecomputedMutator
q.js:1248:12
-       return this.all().then(function (array) {
+       return this.any().then(function (array) {

[Survived] PrecomputedMutator
q.js:1248:12
-       return this.all().then(function (array) {
+       return this.some().then(function (array) {

[Survived] PrecomputedMutator
q.js:1248:12
-       return this.all().then(function (array) {
+       return this.none().then(function (array) {

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(null);

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(undefined);

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(this);

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.call(void 0, array);

[Survived] PrecomputedMutator
q.js:1249:16
-           return fulfilled.apply(void 0, array);
+           return fulfilled.bind(void 0, array);

[Survived] PrecomputedMutator
q.js:1249:32
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(null, array);

[Survived] PrecomputedMutator
q.js:1249:32
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(undefined, array);

[Survived] PrecomputedMutator
q.js:1249:32
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(0, array);

[Survived] PrecomputedMutator
q.js:1249:40
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(void 0, array.slice());

[Survived] PrecomputedMutator
q.js:1249:40
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(void 0, array.concat());

[Survived] PrecomputedMutator
q.js:1249:40
-           return fulfilled.apply(void 0, array);
+           return fulfilled.apply(void 0, array.map(function (x) {
+     return x;
+   }));

[Survived] PrecomputedMutator
q.js:1295:17
-               if (typeof StopIteration === "undefined") {
+               if (StopIteration === "undefined") {

[Survived] PrecomputedMutator
q.js:1295:17
-               if (typeof StopIteration === "undefined") {
+               if (StopIteration !== "undefined") {

[Survived] PrecomputedMutator
q.js:1295:17
-               if (typeof StopIteration === "undefined") {
+               if (typeof StopIteration !== "undefined") {

[Survived] PrecomputedMutator
q.js:1298:46
-                       result = generator[verb](arg);
+                       result = generator[verb](null);

[Survived] PrecomputedMutator
q.js:1298:46
-                       result = generator[verb](arg);
+                       result = generator[verb](undefined);

[Survived] PrecomputedMutator
q.js:1298:46
-                       result = generator[verb](arg);
+                       result = generator[verb](0);

[Survived] PrecomputedMutator
q.js:1300:28
-                       return reject(exception);
+                       return resolve(exception);

[Survived] PrecomputedMutator
q.js:1300:28
-                       return reject(exception);
+                       return Q.reject(exception);

[Survived] PrecomputedMutator
q.js:1300:35
-                       return reject(exception);
+                       return reject(exception.message);

[Survived] PrecomputedMutator
q.js:1300:35
-                       return reject(exception);
+                       return reject(exception.stack);

[Survived] PrecomputedMutator
q.js:1300:35
-                       return reject(exception);
+                       return reject(exception.name);

[Survived] PrecomputedMutator
q.js:1302:21
-                   if (result.done) {
+                   if (result.value) {

[Survived] PrecomputedMutator
q.js:1302:21
-                   if (result.done) {
+                   if (result.value === true) {

[Survived] PrecomputedMutator
q.js:1302:21
-                   if (result.done) {
+                   if (result.value !== false) {

[Survived] PrecomputedMutator
q.js:1303:30
-                       return Q(result.value);
+                       return Q(result.value + 1);

[Survived] PrecomputedMutator
q.js:1303:30
-                       return Q(result.value);
+                       return Q(result.value * 2);

[Survived] PrecomputedMutator
q.js:1303:30
-                       return Q(result.value);
+                       return Q(result.value - 1);

[Survived] PrecomputedMutator
q.js:1305:28
-                       return when(result.value, callback, errback);
+                       return when(result.value, errback, callback);

[Survived] PrecomputedMutator
q.js:1305:28
-                       return when(result.value, callback, errback);
+                       return when(result.value, callback, callback);

[Survived] PrecomputedMutator
q.js:1305:28
-                       return when(result.value, callback, errback);
+                       return when(result.value, errback, errback);

[Survived] PrecomputedMutator
q.js:1305:33
-                       return when(result.value, callback, errback);
+                       return when(result.value + 1, callback, errback);

[Survived] PrecomputedMutator
q.js:1305:33
-                       return when(result.value, callback, errback);
+                       return when(result.value * 2, callback, errback);

[Survived] PrecomputedMutator
q.js:1305:33
-                       return when(result.value, callback, errback);
+                       return when(result.value - 1, callback, errback);

[Survived] PrecomputedMutator
q.js:1305:47
-                       return when(result.value, callback, errback);
+                       return when(result.value, reject, errback);

[Survived] PrecomputedMutator
q.js:1305:47
-                       return when(result.value, callback, errback);
+                       return when(result.value, Q.reject, errback);

[Survived] PrecomputedMutator
q.js:1305:57
-                       return when(result.value, callback, errback);
+                       return when(result.value, callback, reject);

[Survived] PrecomputedMutator
q.js:1305:57
-                       return when(result.value, callback, errback);
+                       return when(result.value, callback, resolve);

[Survived] PrecomputedMutator
q.js:1311:46
-                       result = generator[verb](arg);
+                       result = generator[verb](arg + 1);

[Survived] PrecomputedMutator
q.js:1311:46
-                       result = generator[verb](arg);
+                       result = generator[verb](arg * 2);

[Survived] PrecomputedMutator
q.js:1311:46
-                       result = generator[verb](arg);
+                       result = generator[verb](arg - 1);

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (exception instanceof StopIteration) {

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (exception.name === "StopIteration") {

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (exception.constructor === StopIteration) {

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (isStopIteration = false(exception)) {

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (isStopIteration = true(exception)) {

[Survived] PrecomputedMutator
q.js:1313:25
-                       if (isStopIteration(exception)) {
+                       if (isStopIteration = !isStopIteration(exception)) {

[Survived] PrecomputedMutator
q.js:1313:41
-                       if (isStopIteration(exception)) {
+                       if (isStopIteration(exception.value)) {

[Survived] PrecomputedMutator
q.js:1313:41
-                       if (isStopIteration(exception)) {
+                       if (isStopIteration(exception.message)) {

[Survived] PrecomputedMutator
q.js:1314:34
-                           return Q(exception.value);
+                           return Q(exception);

[Survived] PrecomputedMutator
q.js:1314:34
-                           return Q(exception.value);
+                           return Q(exception.message);

[Survived] PrecomputedMutator
q.js:1314:34
-                           return Q(exception.value);
+                           return Q(exception.stack);

[Survived] PrecomputedMutator
q.js:1316:32
-                           return reject(exception);
+                           return resolve(exception);

[Survived] PrecomputedMutator
q.js:1316:39
-                           return reject(exception);
+                           return reject(null);

[Survived] PrecomputedMutator
q.js:1316:39
-                           return reject(exception);
+                           return reject(undefined);

[Survived] PrecomputedMutator
q.js:1316:39
-                           return reject(exception);
+                           return reject("error");

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return when(result, errback, callback);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return when(result, callback, errback, null);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return when(result, callback, errback, undefined);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return Q.reject(result, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return Q.resolve(result, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:24
-                   return when(result, callback, errback);
+                   return Q.defer(result, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:29
-                   return when(result, callback, errback);
+                   return when(result.value, callback, errback);

[Survived] PrecomputedMutator
q.js:1319:29
-                   return when(result, callback, errback);
+                   return when(result.then(function (value) {
+     return value;
+   }), callback, errback);

[Survived] PrecomputedMutator
q.js:1319:29
-                   return when(result, callback, errback);
+                   return when(result.catch(function (error) {
+     throw error;
+   }), callback, errback);

[Survived] PrecomputedMutator
q.js:1319:37
-                   return when(result, callback, errback);
+                   return when(result, errback, errback);

[Survived] PrecomputedMutator
q.js:1319:37
-                   return when(result, callback, errback);
+                   return when(result, reject, errback);

[Survived] PrecomputedMutator
q.js:1319:37
-                   return when(result, callback, errback);
+                   return when(result, resolve, errback);

[Survived] PrecomputedMutator
q.js:1319:47
-                   return when(result, callback, errback);
+                   return when(result, callback, reject);

[Survived] PrecomputedMutator
q.js:1319:47
-                   return when(result, callback, errback);
+                   return when(result, callback, resolve);

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(null);

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(undefined);

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply({});

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.call(this, arguments);

[Survived] PrecomputedMutator
q.js:1322:25
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.bind(this, arguments);

[Survived] PrecomputedMutator
q.js:1322:45
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(null, arguments);

[Survived] PrecomputedMutator
q.js:1322:45
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(undefined, arguments);

[Survived] PrecomputedMutator
q.js:1322:45
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply({}, arguments);

[Survived] PrecomputedMutator
q.js:1322:51
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(this, null);

[Survived] PrecomputedMutator
q.js:1322:51
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(this, undefined);

[Survived] PrecomputedMutator
q.js:1322:51
-           var generator = makeGenerator.apply(this, arguments);
+           var generator = makeGenerator.apply(this, []);

[Survived] PrecomputedMutator
q.js:1323:24
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer, "throw");

[Survived] PrecomputedMutator
q.js:1323:24
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer, "return");

[Survived] PrecomputedMutator
q.js:1323:24
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.call(continuer, "next");

[Survived] PrecomputedMutator
q.js:1323:24
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.apply(continuer, "next");

[Survived] PrecomputedMutator
q.js:1323:39
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer.bind(continuer, "throw"), "next");

[Survived] PrecomputedMutator
q.js:1323:39
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer.bind(null, "throw"), "next");

[Survived] PrecomputedMutator
q.js:1323:39
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer.bind(undefined, "throw"), "next");

[Survived] PrecomputedMutator
q.js:1323:50
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer, "throw");

[Survived] PrecomputedMutator
q.js:1323:50
-           var callback = continuer.bind(continuer, "next");
+           var callback = continuer.bind(continuer, "return");

[Survived] PrecomputedMutator
q.js:1324:23
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(continuer, "throw"));

[Survived] PrecomputedMutator
q.js:1324:23
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(continuer, "throw", "error"));

[Survived] PrecomputedMutator
q.js:1324:23
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(continuer, "throw", new Error("error")));

[Survived] PrecomputedMutator
q.js:1324:38
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(null, "throw"), "throw");

[Survived] PrecomputedMutator
q.js:1324:38
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(undefined, "throw"), "throw");

[Survived] PrecomputedMutator
q.js:1324:38
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer.bind(void 0, "throw"), "throw");

[Survived] PrecomputedMutator
q.js:1324:49
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer, "send");

[Survived] PrecomputedMutator
q.js:1324:49
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer, "next");

[Survived] PrecomputedMutator
q.js:1324:49
-           var errback = continuer.bind(continuer, "throw");
+           var errback = continuer.bind(continuer, "return");

[Survived] PrecomputedMutator
q.js:1325:16
-           return callback();
+           return errback();

[Survived] PrecomputedMutator
q.js:1325:16
-           return callback();
+           return reject();

[Survived] PrecomputedMutator
q.js:1338:5
-       Q.done(Q.async(makeGenerator)());
+       Q.fail(Q.async(makeGenerator)());

[Survived] PrecomputedMutator
q.js:1338:5
-       Q.done(Q.async(makeGenerator)());
+       Q.reject(Q.async(makeGenerator)());

[Survived] PrecomputedMutator
q.js:1338:5
-       Q.done(Q.async(makeGenerator)());
+       Q.resolve(Q.async(makeGenerator)());

[Survived] PrecomputedMutator
q.js:1338:12
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.async(function* () {}));

[Survived] PrecomputedMutator
q.js:1338:12
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.async(function () {}));

[Survived] PrecomputedMutator
q.js:1338:20
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.async(makeGenerator.bind(this))());

[Survived] PrecomputedMutator
q.js:1338:20
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.async(makeGenerator.call(this))());

[Survived] PrecomputedMutator
q.js:1338:20
-       Q.done(Q.async(makeGenerator)());
+       Q.done(Q.async(makeGenerator.apply(this))());

[Survived] PrecomputedMutator
q.js:1389:30
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, none(arguments)], function (self, args) {

[Survived] PrecomputedMutator
q.js:1389:30
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, any(arguments)], function (self, args) {

[Survived] PrecomputedMutator
q.js:1389:30
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, some(arguments)], function (self, args) {

[Survived] PrecomputedMutator
q.js:1389:34
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, all(null)], function (self, args) {

[Survived] PrecomputedMutator
q.js:1389:34
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, all(undefined)], function (self, args) {

[Survived] PrecomputedMutator
q.js:1389:34
-           return spread([this, all(arguments)], function (self, args) {
+           return spread([this, all([])], function (self, args) {

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.apply(self, args[0]);

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.apply(args[0], self);

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.apply(args[0], args[1]);

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.call(self, args);

[Survived] PrecomputedMutator
q.js:1390:20
-               return callback.apply(self, args);
+               return callback.bind(self, args);

[Survived] PrecomputedMutator
q.js:1390:35
-               return callback.apply(self, args);
+               return callback.apply(null, args);

[Survived] PrecomputedMutator
q.js:1390:35
-               return callback.apply(self, args);
+               return callback.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1390:35
-               return callback.apply(self, args);
+               return callback.apply({}, args);

[Survived] PrecomputedMutator
q.js:1390:41
-               return callback.apply(self, args);
+               return callback.apply(self, args[0]);

[Survived] PrecomputedMutator
q.js:1390:41
-               return callback.apply(self, args);
+               return callback.apply(self, args.slice(1));

[Survived] PrecomputedMutator
q.js:1390:41
-               return callback.apply(self, args);
+               return callback.apply(self, args.concat(args[0]));

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, args.slice(1));

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, args.concat(args));

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, args.reverse());

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q.reject(object).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q.resolve(object).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:12
-       return Q(object).dispatch(op, args);
+       return Q.defer(object).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:14
-       return Q(object).dispatch(op, args);
+       return Q(null).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:14
-       return Q(object).dispatch(op, args);
+       return Q(undefined).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:14
-       return Q(object).dispatch(op, args);
+       return Q({}).dispatch(op, args);

[Survived] PrecomputedMutator
q.js:1404:31
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op + 1, args);

[Survived] PrecomputedMutator
q.js:1404:31
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op - 1, args);

[Survived] PrecomputedMutator
q.js:1404:31
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op * 2, args);

[Survived] PrecomputedMutator
q.js:1404:35
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, null);

[Survived] PrecomputedMutator
q.js:1404:35
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, undefined);

[Survived] PrecomputedMutator
q.js:1404:35
-       return Q(object).dispatch(op, args);
+       return Q(object).dispatch(op, []);

[Survived] PrecomputedMutator
q.js:1409:20
-       var deferred = defer();
+       var deferred = deferred.reject();

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.reject, op, args);

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, "foo", args);

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op, []);

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           deferred.reject(deferred.resolve, op, args);

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           deferred.resolve(deferred.resolve, op, args);

[Survived] PrecomputedMutator
q.js:1411:9
-           self.promiseDispatch(deferred.resolve, op, args);
+           deferred.notify(deferred.resolve, op, args);

[Survived] PrecomputedMutator
q.js:1411:30
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.reject, op, args);

[Survived] PrecomputedMutator
q.js:1411:30
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.notify, op, args);

[Survived] PrecomputedMutator
q.js:1411:30
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.cancel, op, args);

[Survived] PrecomputedMutator
q.js:1411:48
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op + 1, args);

[Survived] PrecomputedMutator
q.js:1411:48
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op - 1, args);

[Survived] PrecomputedMutator
q.js:1411:48
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op * 2, args);

[Survived] PrecomputedMutator
q.js:1411:52
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op, null);

[Survived] PrecomputedMutator
q.js:1411:52
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op, undefined);

[Survived] PrecomputedMutator
q.js:1411:52
-           self.promiseDispatch(deferred.resolve, op, args);
+           self.promiseDispatch(deferred.resolve, op, []);

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("post", [key]);

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q.reject(object).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q.defer(object).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:12
-       return Q(object).dispatch("get", [key]);
+       return Q.async(object).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:14
-       return Q(object).dispatch("get", [key]);
+       return Q(null).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:14
-       return Q(object).dispatch("get", [key]);
+       return Q(undefined).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:14
-       return Q(object).dispatch("get", [key]);
+       return Q("foo").dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1423:31
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1423:31
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("post", [key]);

[Survived] PrecomputedMutator
q.js:1423:38
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("get", [key + 1]);

[Survived] PrecomputedMutator
q.js:1423:38
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("get", [key - 1]);

[Survived] PrecomputedMutator
q.js:1423:38
-       return Q(object).dispatch("get", [key]);
+       return Q(object).dispatch("get", ["key"]);

[Survived] PrecomputedMutator
q.js:1427:12
-       return this.dispatch("get", [key]);
+       return this.dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1427:12
-       return this.dispatch("get", [key]);
+       return this.dispatch("post", [key]);

[Survived] PrecomputedMutator
q.js:1427:26
-       return this.dispatch("get", [key]);
+       return this.dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1427:26
-       return this.dispatch("get", [key]);
+       return this.dispatch("post", [key]);

[Survived] PrecomputedMutator
q.js:1427:33
-       return this.dispatch("get", [key]);
+       return this.dispatch("get", [key + 1]);

[Survived] PrecomputedMutator
q.js:1427:33
-       return this.dispatch("get", [key]);
+       return this.dispatch("get", [key - 1]);

[Survived] PrecomputedMutator
q.js:1427:33
-       return this.dispatch("get", [key]);
+       return this.dispatch("get", ["key"]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [key, value + 1]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [key, value * 2]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q.reject(object).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q.defer(object).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:12
-       return Q(object).dispatch("set", [key, value]);
+       return Q.all(object).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:14
-       return Q(object).dispatch("set", [key, value]);
+       return Q(null).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:14
-       return Q(object).dispatch("set", [key, value]);
+       return Q(undefined).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:14
-       return Q(object).dispatch("set", [key, value]);
+       return Q(Q(object).then(function () {
+     return null;
+   })).dispatch("set", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:31
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("get", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:31
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("post", [key, value]);

[Survived] PrecomputedMutator
q.js:1438:38
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1438:38
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [key, value + 1]);

[Survived] PrecomputedMutator
q.js:1438:38
-       return Q(object).dispatch("set", [key, value]);
+       return Q(object).dispatch("set", [key, value * 2]);

[Survived] PrecomputedMutator
q.js:1442:12
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1442:12
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [key, value + 1]);

[Survived] PrecomputedMutator
q.js:1442:12
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [key, value * 2]);

[Survived] PrecomputedMutator
q.js:1442:26
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("setValue", [key, value]);

[Survived] PrecomputedMutator
q.js:1442:26
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("get", [key, value]);

[Survived] PrecomputedMutator
q.js:1442:33
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [value, key]);

[Survived] PrecomputedMutator
q.js:1442:33
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [key, value, null]);

[Survived] PrecomputedMutator
q.js:1442:33
-       return this.dispatch("set", [key, value]);
+       return this.dispatch("set", [key, value, key]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("set", [key, undefined]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("set", [key, null]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("set", [key, ""]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q.reject(object).dispatch("delete", [key]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q.defer(object).dispatch("delete", [key]);

[Survived] PrecomputedMutator
q.js:1453:12
-       return Q(object).dispatch("delete", [key]);
+       return Q.all(object).dispatch("delete", [key]);

[Survived] PrecomputedMutator
q.js:1453:14
-       return Q(object).dispatch("delete", [key]);
+       return Q(0).dispatch("delete", [key]);

[Survived] PrecomputedMutator
q.js:1453:31
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("set", [key]);

[Survived] PrecomputedMutator
q.js:1453:31
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("get", [key]);

[Survived] PrecomputedMutator
q.js:1453:31
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("post", [key]);

[Survived] PrecomputedMutator
q.js:1453:41
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("delete", [key, value]);

[Survived] PrecomputedMutator
q.js:1453:41
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("delete", [key, "value"]);

[Survived] PrecomputedMutator
q.js:1453:41
-       return Q(object).dispatch("delete", [key]);
+       return Q(object).dispatch("delete", [key, undefined]);

[Survived] PrecomputedMutator
q.js:1458:12
-       return this.dispatch("delete", [key]);
+       return this.dispatch("set", [key, undefined]);

[Survived] PrecomputedMutator
q.js:1458:12
-       return this.dispatch("delete", [key]);
+       return this.dispatch("set", [key, null]);

[Survived] PrecomputedMutator
q.js:1458:12
-       return this.dispatch("delete", [key]);
+       return this.dispatch("set", [key, ""]);

[Survived] PrecomputedMutator
q.js:1458:36
-       return this.dispatch("delete", [key]);
+       return this.dispatch("delete", [key, value]);

[Survived] PrecomputedMutator
q.js:1458:36
-       return this.dispatch("delete", [key]);
+       return this.dispatch("delete", [key, "value"]);

[Survived] PrecomputedMutator
q.js:1458:36
-       return this.dispatch("delete", [key]);
+       return this.dispatch("delete", [key, null]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [args, name]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [name, args.reverse()]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [name, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q.reject(object).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q.resolve(object).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:12
-       return Q(object).dispatch("post", [name, args]);
+       return Q.defer(object).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:14
-       return Q(object).dispatch("post", [name, args]);
+       return Q(null).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:14
-       return Q(object).dispatch("post", [name, args]);
+       return Q(undefined).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:14
-       return Q(object).dispatch("post", [name, args]);
+       return Q({}).dispatch("post", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:31
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("get", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:31
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("set", [name, args]);

[Survived] PrecomputedMutator
q.js:1476:39
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [name, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1476:39
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [name, args.concat(args)]);

[Survived] PrecomputedMutator
q.js:1476:39
-       return Q(object).dispatch("post", [name, args]);
+       return Q(object).dispatch("post", [name, args.reverse()]);

[Survived] PrecomputedMutator
q.js:1481:12
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [args, name]);

[Survived] PrecomputedMutator
q.js:1481:12
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [name, args.reverse()]);

[Survived] PrecomputedMutator
q.js:1481:12
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [name, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1481:26
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("put", [name, args]);

[Survived] PrecomputedMutator
q.js:1481:26
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("get", [name, args]);

[Survived] PrecomputedMutator
q.js:1481:34
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [name, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1481:34
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [name.slice(1), args]);

[Survived] PrecomputedMutator
q.js:1481:34
-       return this.dispatch("post", [name, args]);
+       return this.dispatch("post", [name, args.concat(name)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 3)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 4)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q.reject(object).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q.resolve(object).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:12
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q.defer(object).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:14
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(null).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:14
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(undefined).dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:14
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q("foo").dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:31
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("put", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:31
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("get", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:31
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("resolve", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1494:39
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1494:39
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 3)]);

[Survived] PrecomputedMutator
q.js:1494:39
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 2, 1)]);

[Survived] PrecomputedMutator
q.js:1494:46
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice([], 2)]);

[Survived] PrecomputedMutator
q.js:1494:58
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(null, 2)]);

[Survived] PrecomputedMutator
q.js:1494:58
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(undefined, 2)]);

[Survived] PrecomputedMutator
q.js:1494:58
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice([], 2)]);

[Survived] PrecomputedMutator
q.js:1494:69
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, 0)]);

[Survived] PrecomputedMutator
q.js:1494:69
-       return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
+       return Q(object).dispatch("post", [name, array_slice(arguments, -1)]);

[Survived] PrecomputedMutator
q.js:1500:12
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1500:12
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 1, 2)]);

[Survived] PrecomputedMutator
q.js:1500:12
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 1, -1)]);

[Survived] PrecomputedMutator
q.js:1500:26
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("put", [name, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1500:26
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("patch", [name, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1500:34
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1500:34
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 1, 2)]);

[Survived] PrecomputedMutator
q.js:1500:34
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 1, -1)]);

[Survived] PrecomputedMutator
q.js:1500:41
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 0)]);

[Survived] PrecomputedMutator
q.js:1500:41
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice([1, 2, 3])]);

[Survived] PrecomputedMutator
q.js:1500:53
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(null, 1)]);

[Survived] PrecomputedMutator
q.js:1500:53
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(undefined, 1)]);

[Survived] PrecomputedMutator
q.js:1500:53
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice([], 1)]);

[Survived] PrecomputedMutator
q.js:1500:64
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, 0)]);

[Survived] PrecomputedMutator
q.js:1500:64
-       return this.dispatch("post", [name, array_slice(arguments, 1)]);
+       return this.dispatch("post", [name, array_slice(arguments, arguments.length)]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("call", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("apply", [void 0, [args]]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("apply", [void 0, args.concat([])]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q.reject(object).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q.resolve(object).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:12
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q.then(object).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:14
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(null).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:14
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(undefined).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:14
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(function () {}).dispatch("apply", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:31
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("call", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:31
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("bind", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:31
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("concat", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1509:40
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("apply", [void 0, args, 1]);

[Survived] PrecomputedMutator
q.js:1509:40
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("apply", [void 0, args.slice(1)]);

[Survived] PrecomputedMutator
q.js:1509:40
-       return Q(object).dispatch("apply", [void 0, args]);
+       return Q(object).dispatch("apply", [void 0, args.concat([1])]);

[Survived] PrecomputedMutator
q.js:1513:12
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [null, args]);

[Survived] PrecomputedMutator
q.js:1513:12
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [undefined, args]);

[Survived] PrecomputedMutator
q.js:1513:12
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [args]);

[Survived] PrecomputedMutator
q.js:1513:26
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("call", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1513:26
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("bind", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1513:26
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply" + "call", [void 0, args]);

[Survived] PrecomputedMutator
q.js:1513:35
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [void 0, args, 1]);

[Survived] PrecomputedMutator
q.js:1513:35
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [void 0, args, "foo"]);

[Survived] PrecomputedMutator
q.js:1513:35
-       return this.dispatch("apply", [void 0, args]);
+       return this.dispatch("apply", [void 0, args, null]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1, 2)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1, -1)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q.reject(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q.resolve(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:12
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q.defer(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:14
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(null).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:14
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(undefined).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:14
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q({}).dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:31
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("call", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:31
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("bind", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:31
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("concat", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1523:40
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1523:40
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 0, 1)]);

[Survived] PrecomputedMutator
q.js:1523:40
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1, 2)]);

[Survived] PrecomputedMutator
q.js:1523:49
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 0)]);

[Survived] PrecomputedMutator
q.js:1523:49
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice([], 1)]);

[Survived] PrecomputedMutator
q.js:1523:61
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(array_slice(arguments, 1), 1)]);

[Survived] PrecomputedMutator
q.js:1523:61
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(array_slice(arguments, 3), 1)]);

[Survived] PrecomputedMutator
q.js:1523:72
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 3)]);

[Survived] PrecomputedMutator
q.js:1523:72
-       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
+       return Q(object).dispatch("apply", [void 0, array_slice(arguments, 4)]);

[Survived] PrecomputedMutator
q.js:1527:12
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [this, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1527:12
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1527:12
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [void 0, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1527:26
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("call", [void 0, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1527:26
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("bind", [void 0, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1527:26
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("concat", [void 0, array_slice(arguments)]);

[Survived] PrecomputedMutator
q.js:1527:35
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [void 0, array_slice(arguments, 1)]);

[Survived] PrecomputedMutator
q.js:1527:35
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [void 0, array_slice(arguments, 2)]);

[Survived] PrecomputedMutator
q.js:1527:35
-       return this.dispatch("apply", [void 0, array_slice(arguments)]);
+       return this.dispatch("apply", [void 0, array_slice(arguments, 3)]);

[Survived] PrecomputedMutator
q.js:1537:21
-       var promise = Q(object);
+       var promise = Q(null);

[Survived] PrecomputedMutator
q.js:1537:21
-       var promise = Q(object);
+       var promise = Q(undefined);

[Survived] PrecomputedMutator
q.js:1537:21
-       var promise = Q(object);
+       var promise = Q({});

[Survived] PrecomputedMutator
q.js:1538:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(args.concat(array_slice(arguments, 1)));

[Survived] PrecomputedMutator
q.js:1538:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(args.concat(array_slice(arguments, 2)));

[Survived] PrecomputedMutator
q.js:1538:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(args.concat(array_slice(arguments, 3)));

[Survived] PrecomputedMutator
q.js:1538:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 1), 1);

[Survived] PrecomputedMutator
q.js:1538:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 2), 1);

[Survived] PrecomputedMutator
q.js:1538:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 3), 1);

[Survived] PrecomputedMutator
q.js:1538:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, 0);

[Survived] PrecomputedMutator
q.js:1538:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, -1);

[Survived] PrecomputedMutator
q.js:1538:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, arguments.length - 1);

[Survived] PrecomputedMutator
q.js:1542:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 1))

[Survived] PrecomputedMutator
q.js:1542:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 2))

[Survived] PrecomputedMutator
q.js:1542:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 3))

[Survived] PrecomputedMutator
q.js:1548:28
-       var args = array_slice(arguments);
+       var args = array_slice(args.slice(1));

[Survived] PrecomputedMutator
q.js:1548:28
-       var args = array_slice(arguments);
+       var args = array_slice(args.slice(0, -1));

[Survived] PrecomputedMutator
q.js:1548:28
-       var args = array_slice(arguments);
+       var args = array_slice(args.slice(1, -1));

[Survived] PrecomputedMutator
q.js:1552:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 1))

[Survived] PrecomputedMutator
q.js:1552:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 2))

[Survived] PrecomputedMutator
q.js:1552:25
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(arguments, 3))

[Survived] PrecomputedMutator
q.js:1552:37
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(null))

[Survived] PrecomputedMutator
q.js:1552:37
-               args.concat(array_slice(arguments))
+               args.concat(array_slice(undefined))

[Survived] PrecomputedMutator
q.js:1552:37
-               args.concat(array_slice(arguments))
+               args.concat(array_slice([]))

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys", [1]);

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys", ["foo"]);

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q.reject(object).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q.resolve(object).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:12
-       return Q(object).dispatch("keys", []);
+       return Q.defer(object).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:14
-       return Q(object).dispatch("keys", []);
+       return Q(null).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:14
-       return Q(object).dispatch("keys", []);
+       return Q(undefined).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:14
-       return Q(object).dispatch("keys", []);
+       return Q({}).dispatch("keys", []);

[Survived] PrecomputedMutator
q.js:1564:31
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1564:31
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("length", []);

[Survived] PrecomputedMutator
q.js:1564:31
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("toString", []);

[Survived] PrecomputedMutator
q.js:1564:39
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys", [1]);

[Survived] PrecomputedMutator
q.js:1564:39
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys", [undefined]);

[Survived] PrecomputedMutator
q.js:1564:39
-       return Q(object).dispatch("keys", []);
+       return Q(object).dispatch("keys", [null]);

[Survived] PrecomputedMutator
q.js:1568:12
-       return this.dispatch("keys", []);
+       return this.dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1568:12
-       return this.dispatch("keys", []);
+       return this.dispatch("length", []);

[Survived] PrecomputedMutator
q.js:1568:12
-       return this.dispatch("keys", []);
+       return this.dispatch("toString", []);

[Survived] PrecomputedMutator
q.js:1568:26
-       return this.dispatch("keys", []);
+       return this.dispatch("values", []);

[Survived] PrecomputedMutator
q.js:1568:26
-       return this.dispatch("keys", []);
+       return this.dispatch("length", []);

[Survived] PrecomputedMutator
q.js:1568:26
-       return this.dispatch("keys", []);
+       return this.dispatch("toString", []);

[Survived] PrecomputedMutator
q.js:1568:34
-       return this.dispatch("keys", []);
+       return this.dispatch("keys", [1]);

[Survived] PrecomputedMutator
q.js:1568:34
-       return this.dispatch("keys", []);
+       return this.dispatch("keys", [undefined]);

[Survived] PrecomputedMutator
q.js:1568:34
-       return this.dispatch("keys", []);
+       return this.dispatch("keys", [null]);

[Survived] PrecomputedMutator
q.js:1584:24
-           var deferred = defer();
+           var deferred = deferred.reject();

[Survived] PrecomputedMutator
q.js:1584:24
-           var deferred = defer();
+           var deferred = deferred.resolve();

[Survived] PrecomputedMutator
q.js:1584:24
-           var deferred = defer();
+           var deferred = Q.reject();

[Survived] PrecomputedMutator
q.js:1588:17
-                   isPromise(promise) &&
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   promise.inspect().state === "rejected"

[Survived] PrecomputedMutator
q.js:1588:17
-                   isPromise(promise) &&
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   promise.inspect().state === "pending"

[Survived] PrecomputedMutator
q.js:1588:17
-                   isPromise(promise) &&
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   promise.inspect().state === "fulfilled" && promise.inspect().value === undefined

[Survived] PrecomputedMutator
q.js:1588:27
-                   isPromise(promise) &&
+                   isPromise(promise.then(function () {
+     return null;
+   })) &&

[Survived] PrecomputedMutator
q.js:1588:27
-                   isPromise(promise) &&
+                   isPromise(promise.then(function () {
+     throw new Error("error");
+   })) &&

[Survived] PrecomputedMutator
q.js:1588:27
-                   isPromise(promise) &&
+                   isPromise(promise.then(function () {
+     return Q.reject(new Error("error"));
+   })) &&

[Survived] PrecomputedMutator
q.js:1589:29
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   (snapshot = promise.inspect.state()).state === "fulfilled"

[Survived] PrecomputedMutator
q.js:1589:29
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   (snapshot = promise.inspect.value()).state === "fulfilled"

[Survived] PrecomputedMutator
q.js:1589:29
-                   (snapshot = promise.inspect()).state === "fulfilled"
+                   (snapshot = promise.inspect.reason()).state === "fulfilled"

[Survived] PrecomputedMutator
q.js:1598:29
-                           if (--pendingCount === 0) {
+                           if (pendingCount < 0) {

[Survived] PrecomputedMutator
q.js:1598:29
-                           if (--pendingCount === 0) {
+                           if (pendingCount === promises.length) {

[Survived] PrecomputedMutator
q.js:1598:29
-                           if (--pendingCount === 0) {
+                           if (pendingCount === 0 && promises.length > 0) {

[Survived] PrecomputedMutator
q.js:1599:29
-                               deferred.resolve(promises);
+                               deferred.reject(promises);

[Survived] PrecomputedMutator
q.js:1599:29
-                               deferred.resolve(promises);
+                               deferred.notify(promises);

[Survived] PrecomputedMutator
q.js:1599:46
-                               deferred.resolve(promises);
+                               deferred.resolve(promises.slice(1));

[Survived] PrecomputedMutator
q.js:1599:46
-                               deferred.resolve(promises);
+                               deferred.resolve(promises.concat([]));

[Survived] PrecomputedMutator
q.js:1599:46
-                               deferred.resolve(promises);
+                               deferred.resolve(promises.filter(function () {
+     return true;
+   }));

[Survived] PrecomputedMutator
q.js:1604:25
-                           deferred.notify({ index: index, value: progress });
+                           deferred.reject({ index: index, value: progress });

[Survived] PrecomputedMutator
q.js:1604:25
-                           deferred.notify({ index: index, value: progress });
+                           deferred.resolve({ index: index, value: progress });

[Survived] PrecomputedMutator
q.js:1604:25
-                           deferred.notify({ index: index, value: progress });
+                           deferred.progress({ index: index, value: progress });

[Survived] PrecomputedMutator
q.js:1604:41
-                           deferred.notify({ index: index, value: progress });
+                           deferred.notify({
+     index: index,
+     value: progress + 1
+   });

[Survived] PrecomputedMutator
q.js:1604:41
-                           deferred.notify({ index: index, value: progress });
+                           deferred.notify({
+     index: index,
+     value: progress - 1
+   });

[Survived] PrecomputedMutator
q.js:1604:41
-                           deferred.notify({ index: index, value: progress });
+                           deferred.notify({
+     index: index,
+     value: progress * 2
+   });

[Survived] PrecomputedMutator
q.js:1609:13
-           if (pendingCount === 0) {
+           if (pendingCount < 0) {

[Survived] PrecomputedMutator
q.js:1609:13
-           if (pendingCount === 0) {
+           if (pendingCount === promises.length) {

[Survived] PrecomputedMutator
q.js:1609:13
-           if (pendingCount === 0) {
+           if (pendingCount > 0) {

[Survived] PrecomputedMutator
q.js:1610:13
-               deferred.resolve(promises);
+               deferred.reject(promises);

[Survived] PrecomputedMutator
q.js:1610:13
-               deferred.resolve(promises);
+               deferred.notify(promises);

[Survived] PrecomputedMutator
q.js:1610:13
-               deferred.resolve(promises);
+               deferred.cancel(promises);

[Survived] PrecomputedMutator
q.js:1610:30
-               deferred.resolve(promises);
+               deferred.resolve(promises.slice(1));

[Survived] PrecomputedMutator
q.js:1610:30
-               deferred.resolve(promises);
+               deferred.resolve(promises.concat([Q.reject()]));

[Survived] PrecomputedMutator
q.js:1610:30
-               deferred.resolve(promises);
+               deferred.resolve(promises.map(function (promise) {
+     return Q.reject(promise.inspect().value);
+   }));

[Survived] PrecomputedMutator
q.js:1617:12
-       return all(this);
+       return any(this);

[Survived] PrecomputedMutator
q.js:1617:12
-       return all(this);
+       return none(this);

[Survived] PrecomputedMutator
q.js:1617:12
-       return all(this);
+       return race(this);

[Survived] PrecomputedMutator
q.js:1617:16
-       return all(this);
+       return all(null);

[Survived] PrecomputedMutator
q.js:1617:16
-       return all(this);
+       return all(undefined);

[Survived] PrecomputedMutator
q.js:1617:16
-       return all(this);
+       return all([]);

[Survived] PrecomputedMutator
q.js:1630:9
-       if (promises.length === 0) {
+       if (promises.length < 0) {

[Survived] PrecomputedMutator
q.js:1630:9
-       if (promises.length === 0) {
+       if (promises.length > 0) {

[Survived] PrecomputedMutator
q.js:1630:9
-       if (promises.length === 0) {
+       if (promises.length === 1) {

[Survived] PrecomputedMutator
q.js:1631:16
-           return Q.resolve();
+           return Q.reject();

[Survived] PrecomputedMutator
q.js:1631:16
-           return Q.resolve();
+           return Q.defer();

[Survived] PrecomputedMutator
q.js:1631:16
-           return Q.resolve();
+           return Q.when();

[Survived] PrecomputedMutator
q.js:1641:9
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onFulfilled, onRejected, onProgress));

[Survived] PrecomputedMutator
q.js:1641:9
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onFulfilled, onRejected).then(onProgress));

[Survived] PrecomputedMutator
q.js:1641:9
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onFulfilled, onRejected).then(onProgress).catch(onRejected));

[Survived] PrecomputedMutator
q.js:1641:9
-           when(promise, onFulfilled, onRejected, onProgress);
+           when.reject(promise, onFulfilled, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:9
-           when(promise, onFulfilled, onRejected, onProgress);
+           when.resolve(promise, onFulfilled, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:9
-           when(promise, onFulfilled, onRejected, onProgress);
+           when.then(promise, onFulfilled, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:14
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onFulfilled, onRejected), onFulfilled, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:14
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onRejected, onFulfilled), onFulfilled, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:14
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise.then(onFulfilled, onRejected).then(onFulfilled, onRejected), onFulfilled, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:23
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onRejected, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:23
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onProgress, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:23
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, noop, onRejected, onProgress);

[Survived] PrecomputedMutator
q.js:1641:36
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, onFulfilled, onProgress);

[Survived] PrecomputedMutator
q.js:1641:36
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, onProgress, onProgress);

[Survived] PrecomputedMutator
q.js:1641:48
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, onRejected, onRejected);

[Survived] PrecomputedMutator
q.js:1641:48
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, onRejected, onFulfilled);

[Survived] PrecomputedMutator
q.js:1641:48
-           when(promise, onFulfilled, onRejected, onProgress);
+           when(promise, onFulfilled, onRejected, noop);

[Survived] PrecomputedMutator
q.js:1643:13
-               deferred.resolve(result);
+               deferred.reject(result);

[Survived] PrecomputedMutator
q.js:1643:13
-               deferred.resolve(result);
+               deferred.notify(result);

[Survived] PrecomputedMutator
q.js:1643:30
-               deferred.resolve(result);
+               deferred.resolve(promise);

[Survived] PrecomputedMutator
q.js:1643:30
-               deferred.resolve(result);
+               deferred.resolve(index);

[Survived] PrecomputedMutator
q.js:1643:30
-               deferred.resolve(result);
+               deferred.resolve(promise.value);

[Survived] PrecomputedMutator
q.js:1647:17
-               if (pendingCount === 0) {
+               if (pendingCount > 0) {

[Survived] PrecomputedMutator
q.js:1647:17
-               if (pendingCount === 0) {
+               if (pendingCount < 0) {

[Survived] PrecomputedMutator
q.js:1647:17
-               if (pendingCount === 0) {
+               if (pendingCount === 1) {

[Survived] PrecomputedMutator
q.js:1653:17
-                   deferred.reject(rejection);
+                   deferred.resolve(rejection);

[Survived] PrecomputedMutator
q.js:1653:17
-                   deferred.reject(rejection);
+                   deferred.notify(rejection);

[Survived] PrecomputedMutator
q.js:1653:17
-                   deferred.reject(rejection);
+                   deferred.inspect(rejection);

[Survived] PrecomputedMutator
q.js:1668:12
-       return any(this);
+       return all(this);

[Survived] PrecomputedMutator
q.js:1668:12
-       return any(this);
+       return none(this);

[Survived] PrecomputedMutator
q.js:1668:12
-       return any(this);
+       return some(this);

[Survived] PrecomputedMutator
q.js:1668:16
-       return any(this);
+       return any(null);

[Survived] PrecomputedMutator
q.js:1668:16
-       return any(this);
+       return any(undefined);

[Survived] PrecomputedMutator
q.js:1668:16
-       return any(this);
+       return any(Promise.reject());

[Survived] PrecomputedMutator
q.js:1680:17
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allSettled, "allSettled", "allResolved");

[Survived] PrecomputedMutator
q.js:1680:17
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allSettled", "allResolved");

[Survived] PrecomputedMutator
q.js:1680:27
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allSettled, "allResolved", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:40
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allSettled", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:40
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "any", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:40
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "all", "allSettled");

[Survived] PrecomputedMutator
q.js:1680:55
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allResolved", "allResolved");

[Survived] PrecomputedMutator
q.js:1680:55
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allResolved", "any");

[Survived] PrecomputedMutator
q.js:1680:55
-   Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
+   Q.allResolved = deprecate(allResolved, "allResolved", "all");

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.reject);

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.resolve);

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.defer);

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_filter(promises, Q);

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_reduce(promises, Q);

[Survived] PrecomputedMutator
q.js:1683:20
-           promises = array_map(promises, Q);
+           promises = array_forEach(promises, Q);

[Survived] PrecomputedMutator
q.js:1683:30
-           promises = array_map(promises, Q);
+           promises = array_map(promises.slice(0, promises.length - 1), Q);

[Survived] PrecomputedMutator
q.js:1683:30
-           promises = array_map(promises, Q);
+           promises = array_map(promises.concat(Q.reject()), Q);

[Survived] PrecomputedMutator
q.js:1683:30
-           promises = array_map(promises, Q);
+           promises = array_map(promises.map(function (promise) {
+     return Q.reject(promise);
+   }), Q);

[Survived] PrecomputedMutator
q.js:1683:40
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.reject);

[Survived] PrecomputedMutator
q.js:1683:40
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.resolve);

[Survived] PrecomputedMutator
q.js:1683:40
-           promises = array_map(promises, Q);
+           promises = array_map(promises, Q.defer);

[Survived] PrecomputedMutator
q.js:1685:20
-               return when(promise, noop, noop);
+               return when(promise.then(noop, noop));

[Survived] PrecomputedMutator
q.js:1685:20
-               return when(promise, noop, noop);
+               return when(promise.then(noop, noop).then(noop, noop));

[Survived] PrecomputedMutator
q.js:1693:12
-       return allResolved(this);
+       return allSettled(this);

[Survived] PrecomputedMutator
q.js:1693:12
-       return allResolved(this);
+       return any(this);

[Survived] PrecomputedMutator
q.js:1693:24
-       return allResolved(this);
+       return allResolved(null);

[Survived] PrecomputedMutator
q.js:1693:24
-       return allResolved(this);
+       return allResolved(undefined);

[Survived] PrecomputedMutator
q.js:1693:24
-       return allResolved(this);
+       return allResolved([]);

[Survived] PrecomputedMutator
q.js:1701:14
-       return Q(promises).allSettled();
+       return Q(promises.reverse()).allSettled();

[Survived] PrecomputedMutator
q.js:1701:14
-       return Q(promises).allSettled();
+       return Q(promises.slice(1)).allSettled();

[Survived] PrecomputedMutator
q.js:1701:14
-       return Q(promises).allSettled();
+       return Q(promises.concat(Q.reject())).allSettled();

[Survived] PrecomputedMutator
q.js:1714:25
-               promise = Q(promise);
+               promise = Q(promise.then(function (result) {
+     return result + 1;
+   }));

[Survived] PrecomputedMutator
q.js:1714:25
-               promise = Q(promise);
+               promise = Q(promise.then(function (result) {
+     return result * 2;
+   }));

[Survived] PrecomputedMutator
q.js:1714:25
-               promise = Q(promise);
+               promise = Q(promise.then(function (result) {
+     return result - 1;
+   }));

[Survived] PrecomputedMutator
q.js:1718:20
-               return promise.then(regardless, regardless);
+               return promise.then(onRejected, onRejected);

[Survived] PrecomputedMutator
q.js:1718:20
-               return promise.then(regardless, regardless);
+               return promise.then(onFulfilled, onRejected);

[Survived] PrecomputedMutator
q.js:1718:33
-               return promise.then(regardless, regardless);
+               return promise.then(promise.inspect(), regardless);

[Survived] PrecomputedMutator
q.js:1718:33
-               return promise.then(regardless, regardless);
+               return promise.then(promise.then(noop, noop), regardless);

[Survived] PrecomputedMutator
q.js:1718:33
-               return promise.then(regardless, regardless);
+               return promise.then(promise.then(noop, noop).then(noop, noop), regardless);

[Survived] PrecomputedMutator
q.js:1718:45
-               return promise.then(regardless, regardless);
+               return promise.then(regardless, promise.reject());

[Survived] PrecomputedMutator
q.js:1718:45
-               return promise.then(regardless, regardless);
+               return promise.then(regardless, promise.resolve());

[Survived] PrecomputedMutator
q.js:1718:45
-               return promise.then(regardless, regardless);
+               return promise.then(regardless, promise.then(function () {
+     throw new Error("Test error");
+   }));

[Survived] PrecomputedMutator
q.js:1734:12
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(null, rejected);

[Survived] PrecomputedMutator
q.js:1734:12
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(undefined, rejected);

[Survived] PrecomputedMutator
q.js:1734:12
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(rejected, null);

[Survived] PrecomputedMutator
q.js:1734:14
-       return Q(object).then(void 0, rejected);
+       return Q(0).then(void 0, rejected);

[Survived] PrecomputedMutator
q.js:1734:27
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(null, rejected);

[Survived] PrecomputedMutator
q.js:1734:27
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(undefined, rejected);

[Survived] PrecomputedMutator
q.js:1734:27
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(function () {}, rejected);

[Survived] PrecomputedMutator
q.js:1734:35
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(void 0, promise.reject);

[Survived] PrecomputedMutator
q.js:1734:35
-       return Q(object).then(void 0, rejected);
+       return Q(object).then(void 0, Q.reject);

[Survived] PrecomputedMutator
q.js:1739:12
-       return this.then(void 0, rejected);
+       return this.then(null, rejected);

[Survived] PrecomputedMutator
q.js:1739:12
-       return this.then(void 0, rejected);
+       return this.then(undefined, rejected);

[Survived] PrecomputedMutator
q.js:1739:12
-       return this.then(void 0, rejected);
+       return this.then(rejected, null);

[Survived] PrecomputedMutator
q.js:1739:22
-       return this.then(void 0, rejected);
+       return this.then(null, rejected);

[Survived] PrecomputedMutator
q.js:1739:22
-       return this.then(void 0, rejected);
+       return this.then(undefined, rejected);

[Survived] PrecomputedMutator
q.js:1739:30
-       return this.then(void 0, rejected);
+       return this.then(void 0, resolved);

[Survived] PrecomputedMutator
q.js:1739:30
-       return this.then(void 0, rejected);
+       return this.then(void 0, deferred.reject(rejection));

[Survived] PrecomputedMutator
q.js:1739:30
-       return this.then(void 0, rejected);
+       return this.then(void 0, deferred.notify(rejection));

[Survived] PrecomputedMutator
q.js:1752:12
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(null, null, progressed);

[Survived] PrecomputedMutator
q.js:1752:12
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(undefined, undefined, progressed);

[Survived] PrecomputedMutator
q.js:1752:14
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(0).then(void 0, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:27
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(null, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:27
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(undefined, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:27
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(function () {}, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1752:35
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, null, progressed);

[Survived] PrecomputedMutator
q.js:1752:35
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, undefined, progressed);

[Survived] PrecomputedMutator
q.js:1752:35
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, function () {}, progressed);

[Survived] PrecomputedMutator
q.js:1752:43
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, void 0, promise.then(void 0, progressed));

[Survived] PrecomputedMutator
q.js:1752:43
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, void 0, promise.then(progressed, void 0));

[Survived] PrecomputedMutator
q.js:1752:43
-       return Q(object).then(void 0, void 0, progressed);
+       return Q(object).then(void 0, void 0, promise.then(void 0, void 0));

[Survived] PrecomputedMutator
q.js:1756:12
-       return this.then(void 0, void 0, progressed);
+       return this.then(null, null, progressed);

[Survived] PrecomputedMutator
q.js:1756:12
-       return this.then(void 0, void 0, progressed);
+       return this.then(undefined, undefined, progressed);

[Survived] PrecomputedMutator
q.js:1756:12
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, void 0, progressed.bind(this));

[Survived] PrecomputedMutator
q.js:1756:22
-       return this.then(void 0, void 0, progressed);
+       return this.then(null, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1756:22
-       return this.then(void 0, void 0, progressed);
+       return this.then(undefined, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1756:22
-       return this.then(void 0, void 0, progressed);
+       return this.then(function () {}, void 0, progressed);

[Survived] PrecomputedMutator
q.js:1756:30
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, null, progressed);

[Survived] PrecomputedMutator
q.js:1756:30
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, undefined, progressed);

[Survived] PrecomputedMutator
q.js:1756:30
-       return this.then(void 0, void 0, progressed);
+       return this.then(void 0, function () {}, progressed);

[Survived] PrecomputedMutator
q.js:1772:12
-       return Q(object)["finally"](callback);
+       return Q.reject(object)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1772:12
-       return Q(object)["finally"](callback);
+       return Q.resolve(object)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1772:12
-       return Q(object)["finally"](callback);
+       return Q.defer(object)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1772:14
-       return Q(object)["finally"](callback);
+       return Q(null)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1772:14
-       return Q(object)["finally"](callback);
+       return Q(undefined)["finally"](callback);

[Survived] PrecomputedMutator
q.js:1772:33
-       return Q(object)["finally"](callback);
+       return Q(object)["finally"](callback.fcall());

[Survived] PrecomputedMutator
q.js:1772:33
-       return Q(object)["finally"](callback);
+       return Q(object)["finally"](callback.fcall().then(function () {
+     return Q.reject(new Error("Test error"));
+   }));

[Survived] PrecomputedMutator
q.js:1777:9
-       if (!callback || typeof callback.apply !== "function") {
+       if (callback && typeof callback.apply === "function") {

[Survived] PrecomputedMutator
q.js:1777:9
-       if (!callback || typeof callback.apply !== "function") {
+       if (callback && typeof callback.apply !== "undefined") {

[Survived] PrecomputedMutator
q.js:1777:9
-       if (!callback || typeof callback.apply !== "function") {
+       if (callback && typeof callback.apply !== "object") {

[Survived] PrecomputedMutator
q.js:1780:16
-       callback = Q(callback);
+       callback = Q.reject(callback);

[Survived] PrecomputedMutator
q.js:1780:16
-       callback = Q(callback);
+       callback = Q.resolve(callback);

[Survived] PrecomputedMutator
q.js:1780:16
-       callback = Q(callback);
+       callback = Q.defer(callback);

[Survived] PrecomputedMutator
q.js:1780:18
-       callback = Q(callback);
+       callback = Q(callback.fcall());

[Survived] PrecomputedMutator
q.js:1780:18
-       callback = Q(callback);
+       callback = Q(callback.fcall(null));

[Survived] PrecomputedMutator
q.js:1780:18
-       callback = Q(callback);
+       callback = Q(callback.fcall(this));

[Survived] PrecomputedMutator
q.js:1800:12
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(rejected, fulfilled, progress);

[Survived] PrecomputedMutator
q.js:1800:12
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, rejected, progress + 1);

[Survived] PrecomputedMutator
q.js:1800:12
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, rejected, progress * 2);

[Survived] PrecomputedMutator
q.js:1800:14
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(null).done(fulfilled, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:14
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(undefined).done(fulfilled, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:14
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(0).done(fulfilled, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:27
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(rejected, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:27
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(progressed, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:27
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(void 0, rejected, progress);

[Survived] PrecomputedMutator
q.js:1800:38
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, fulfilled, progress);

[Survived] PrecomputedMutator
q.js:1800:38
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, progressed, progress);

[Survived] PrecomputedMutator
q.js:1800:48
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, rejected, null);

[Survived] PrecomputedMutator
q.js:1800:48
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, rejected, undefined);

[Survived] PrecomputedMutator
q.js:1800:48
-       return Q(object).done(fulfilled, rejected, progress);
+       return Q(object).done(fulfilled, rejected, function () {});

[Survived] PrecomputedMutator
q.js:1808:13
-               makeStackTraceLong(error, promise);
+               makeStackTraceLong(error, promise.then());

[Survived] PrecomputedMutator
q.js:1808:13
-               makeStackTraceLong(error, promise);
+               makeStackTraceLong(error, promise.catch());

[Survived] PrecomputedMutator
q.js:1808:13
-               makeStackTraceLong(error, promise);
+               makeStackTraceLong(error, promise.finally());

[Survived] PrecomputedMutator
q.js:1819:9
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, rejected, null) :

[Survived] PrecomputedMutator
q.js:1819:9
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, rejected, undefined) :

[Survived] PrecomputedMutator
q.js:1819:19
-           this.then(fulfilled, rejected, progress) :
+           this.then(rejected, rejected, progress) :

[Survived] PrecomputedMutator
q.js:1819:19
-           this.then(fulfilled, rejected, progress) :
+           this.then(progressed, rejected, progress) :

[Survived] PrecomputedMutator
q.js:1819:19
-           this.then(fulfilled, rejected, progress) :
+           this.then(void 0, rejected, progress) :

[Survived] PrecomputedMutator
q.js:1819:30
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, resolved, progress) :

[Survived] PrecomputedMutator
q.js:1819:30
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, undefined, progress) :

[Survived] PrecomputedMutator
q.js:1819:40
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, rejected, null) :

[Survived] PrecomputedMutator
q.js:1819:40
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, rejected, undefined) :

[Survived] PrecomputedMutator
q.js:1819:40
-           this.then(fulfilled, rejected, progress) :
+           this.then(fulfilled, rejected, false) :

[Survived] PrecomputedMutator
q.js:1823:48
-           onUnhandledError = process.domain.bind(onUnhandledError);
+           onUnhandledError = process.domain.bind(onUnhandledError.bind(null));

[Survived] PrecomputedMutator
q.js:1823:48
-           onUnhandledError = process.domain.bind(onUnhandledError);
+           onUnhandledError = process.domain.bind(onUnhandledError.call(null));

[Survived] PrecomputedMutator
q.js:1823:48
-           onUnhandledError = process.domain.bind(onUnhandledError);
+           onUnhandledError = process.domain.bind(onUnhandledError.apply(null));

[Survived] PrecomputedMutator
q.js:1826:5
-       promise.then(void 0, onUnhandledError);
+       promise.then(null, onUnhandledError);

[Survived] PrecomputedMutator
q.js:1826:5
-       promise.then(void 0, onUnhandledError);
+       promise.then(undefined, onUnhandledError);

[Survived] PrecomputedMutator
q.js:1826:5
-       promise.then(void 0, onUnhandledError);
+       promise.then(onUnhandledError, null);

[Survived] PrecomputedMutator
q.js:1826:18
-       promise.then(void 0, onUnhandledError);
+       promise.then(null, onUnhandledError);

[Survived] PrecomputedMutator
q.js:1826:18
-       promise.then(void 0, onUnhandledError);
+       promise.then(undefined, onUnhandledError);

[Survived] PrecomputedMutator
q.js:1826:18
-       promise.then(void 0, onUnhandledError);
+       promise.then(0, onUnhandledError);

[Survived] PrecomputedMutator
q.js:1826:26
-       promise.then(void 0, onUnhandledError);
+       promise.then(void 0, onUnhandledError());

[Survived] PrecomputedMutator
q.js:1826:26
-       promise.then(void 0, onUnhandledError);
+       promise.then(void 0, null);

[Survived] PrecomputedMutator
q.js:1826:26
-       promise.then(void 0, onUnhandledError);
+       promise.then(void 0, function () {});

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, null);

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, new Error());

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, "error");

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q.reject(object).timeout(ms, error);

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q.resolve(object).timeout(ms, error);

[Survived] PrecomputedMutator
q.js:1839:12
-       return Q(object).timeout(ms, error);
+       return Q.defer(object).timeout(ms, error);

[Survived] PrecomputedMutator
q.js:1839:14
-       return Q(object).timeout(ms, error);
+       return Q(undefined).timeout(ms, error);

[Survived] PrecomputedMutator
q.js:1839:14
-       return Q(object).timeout(ms, error);
+       return Q(Q.reject(new Error("error"))).timeout(ms, error);

[Survived] PrecomputedMutator
q.js:1839:30
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(0, error);

[Survived] PrecomputedMutator
q.js:1839:30
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(-1, error);

[Survived] PrecomputedMutator
q.js:1839:30
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(null, error);

[Survived] PrecomputedMutator
q.js:1839:34
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, null);

[Survived] PrecomputedMutator
q.js:1839:34
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, new Error());

[Survived] PrecomputedMutator
q.js:1839:34
-       return Q(object).timeout(ms, error);
+       return Q(object).timeout(ms, undefined);

[Survived] PrecomputedMutator
q.js:1845:13
-           if (!error || "string" === typeof error) {
+           if (error && "string" === typeof error) {

[Survived] PrecomputedMutator
q.js:1845:13
-           if (!error || "string" === typeof error) {
+           if (error || "string" !== typeof error) {

[Survived] PrecomputedMutator
q.js:1845:13
-           if (!error || "string" === typeof error) {
+           if (error && "string" !== typeof error) {

[Survived] PrecomputedMutator
q.js:1849:9
-           deferred.reject(error);
+           deferred.resolve(error);

[Survived] PrecomputedMutator
q.js:1849:9
-           deferred.reject(error);
+           deferred.notify(error);

[Survived] PrecomputedMutator
q.js:1849:25
-           deferred.reject(error);
+           deferred.reject(null);

[Survived] PrecomputedMutator
q.js:1849:25
-           deferred.reject(error);
+           deferred.reject(undefined);

[Survived] PrecomputedMutator
q.js:1849:25
-           deferred.reject(error);
+           deferred.reject("error");

[Survived] PrecomputedMutator
q.js:1853:9
-           clearTimeout(timeoutId);
+           clearInterval(timeoutId);

[Survived] PrecomputedMutator
q.js:1853:22
-           clearTimeout(timeoutId);
+           clearTimeout(null);

[Survived] PrecomputedMutator
q.js:1853:22
-           clearTimeout(timeoutId);
+           clearTimeout(undefined);

[Survived] PrecomputedMutator
q.js:1853:22
-           clearTimeout(timeoutId);
+           clearTimeout(0);

[Survived] PrecomputedMutator
q.js:1854:9
-           deferred.resolve(value);
+           deferred.reject(value);

[Survived] PrecomputedMutator
q.js:1854:9
-           deferred.resolve(value);
+           deferred.notify(value);

[Survived] PrecomputedMutator
q.js:1854:26
-           deferred.resolve(value);
+           deferred.resolve(null);

[Survived] PrecomputedMutator
q.js:1854:26
-           deferred.resolve(value);
+           deferred.resolve(undefined);

[Survived] PrecomputedMutator
q.js:1856:9
-           clearTimeout(timeoutId);
+           clearInterval(timeoutId);

[Survived] PrecomputedMutator
q.js:1856:22
-           clearTimeout(timeoutId);
+           clearTimeout(null);

[Survived] PrecomputedMutator
q.js:1856:22
-           clearTimeout(timeoutId);
+           clearTimeout(undefined);

[Survived] PrecomputedMutator
q.js:1856:22
-           clearTimeout(timeoutId);
+           clearTimeout(0);

[Survived] PrecomputedMutator
q.js:1857:9
-           deferred.reject(exception);
+           deferred.resolve(exception);

[Survived] PrecomputedMutator
q.js:1857:9
-           deferred.reject(exception);
+           deferred.notify(exception);

[Survived] PrecomputedMutator
q.js:1873:9
-       if (timeout === void 0) {
+       if (timeout !== void 0) {

[Survived] PrecomputedMutator
q.js:1873:9
-       if (timeout === void 0) {
+       if (timeout === null) {

[Survived] PrecomputedMutator
q.js:1873:9
-       if (timeout === void 0) {
+       if (timeout === 0) {

[Survived] PrecomputedMutator
q.js:1877:12
-       return Q(object).delay(timeout);
+       return Q.reject(object).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:12
-       return Q(object).delay(timeout);
+       return Q.resolve(object).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:12
-       return Q(object).delay(timeout);
+       return Q.defer(object).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:14
-       return Q(object).delay(timeout);
+       return Q(null).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:14
-       return Q(object).delay(timeout);
+       return Q(undefined).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:14
-       return Q(object).delay(timeout);
+       return Q({}).delay(timeout);

[Survived] PrecomputedMutator
q.js:1877:28
-       return Q(object).delay(timeout);
+       return Q(object).delay(timeout + 1);

[Survived] PrecomputedMutator
q.js:1877:28
-       return Q(object).delay(timeout);
+       return Q(object).delay(timeout - 1);

[Survived] PrecomputedMutator
q.js:1877:28
-       return Q(object).delay(timeout);
+       return Q(object).delay(timeout * 2);

[Survived] PrecomputedMutator
q.js:1884:13
-               deferred.resolve(value);
+               deferred.reject(value);

[Survived] PrecomputedMutator
q.js:1884:13
-               deferred.resolve(value);
+               deferred.notify(value);

[Survived] PrecomputedMutator
q.js:1884:30
-               deferred.resolve(value);
+               deferred.resolve(null);

[Survived] PrecomputedMutator
q.js:1884:30
-               deferred.resolve(value);
+               deferred.resolve(undefined);

[Survived] PrecomputedMutator
q.js:1884:30
-               deferred.resolve(value);
+               deferred.resolve("foo");

[Survived] PrecomputedMutator
q.js:1900:12
-       return Q(callback).nfapply(args);
+       return Q.reject(callback).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:12
-       return Q(callback).nfapply(args);
+       return Q.resolve(callback).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:12
-       return Q(callback).nfapply(args);
+       return Q.defer(callback).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:14
-       return Q(callback).nfapply(args);
+       return Q(null).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:14
-       return Q(callback).nfapply(args);
+       return Q(undefined).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:14
-       return Q(callback).nfapply(args);
+       return Q(function () {}).nfapply(args);

[Survived] PrecomputedMutator
q.js:1900:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply(null);

[Survived] PrecomputedMutator
q.js:1900:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply(undefined);

[Survived] PrecomputedMutator
q.js:1900:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply([]);

[Survived] PrecomputedMutator
q.js:1905:32
-       var nodeArgs = array_slice(args);
+       var nodeArgs = array_slice(args.slice(1));

[Survived] PrecomputedMutator
q.js:1905:32
-       var nodeArgs = array_slice(args);
+       var nodeArgs = array_slice(args.concat([1, 2, 3]));

[Survived] PrecomputedMutator
q.js:1905:32
-       var nodeArgs = array_slice(args);
+       var nodeArgs = array_slice(args.filter(function (x) {
+     return x !== 1;
+   }));

[Survived] PrecomputedMutator
q.js:1906:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1906:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.pop(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1906:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.shift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1906:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1906:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(function () {}));

[Survived] PrecomputedMutator
q.js:1906:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(function (error) {
+     throw error;
+   }));

[Survived] PrecomputedMutator
q.js:1907:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.slice(1)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1907:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.concat([])).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1907:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.filter(function () {
+     return true;
+   })).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1907:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1907:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.notify);

[Survived] PrecomputedMutator
q.js:1907:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.reject("new error"));

[Survived] PrecomputedMutator
q.js:1921:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:1921:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 3));

[Survived] PrecomputedMutator
q.js:1921:16
-       var args = array_slice(arguments, 1);
+       var args = array_slice(array_slice(arguments, 1, 2));

[Survived] PrecomputedMutator
q.js:1921:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(null, 1);

[Survived] PrecomputedMutator
q.js:1921:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice(undefined, 1);

[Survived] PrecomputedMutator
q.js:1921:28
-       var args = array_slice(arguments, 1);
+       var args = array_slice([], 1);

[Survived] PrecomputedMutator
q.js:1921:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, 0);

[Survived] PrecomputedMutator
q.js:1921:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, null);

[Survived] PrecomputedMutator
q.js:1921:39
-       var args = array_slice(arguments, 1);
+       var args = array_slice(arguments, undefined);

[Survived] PrecomputedMutator
q.js:1922:14
-       return Q(callback).nfapply(args);
+       return Q(null).nfapply(args);

[Survived] PrecomputedMutator
q.js:1922:14
-       return Q(callback).nfapply(args);
+       return Q(undefined).nfapply(args);

[Survived] PrecomputedMutator
q.js:1922:14
-       return Q(callback).nfapply(args);
+       return Q(function () {}).nfapply(args);

[Survived] PrecomputedMutator
q.js:1922:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply(null);

[Survived] PrecomputedMutator
q.js:1922:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply([]);

[Survived] PrecomputedMutator
q.js:1922:32
-       return Q(callback).nfapply(args);
+       return Q(callback).nfapply([1, 2, 3]);

[Survived] PrecomputedMutator
q.js:1926:32
-       var nodeArgs = array_slice(arguments);
+       var nodeArgs = array_slice(null);

[Survived] PrecomputedMutator
q.js:1926:32
-       var nodeArgs = array_slice(arguments);
+       var nodeArgs = array_slice(undefined);

[Survived] PrecomputedMutator
q.js:1926:32
-       var nodeArgs = array_slice(arguments);
+       var nodeArgs = array_slice([]);

[Survived] PrecomputedMutator
q.js:1928:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1928:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.pop(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1928:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.shift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1928:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1928:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(function () {}));

[Survived] PrecomputedMutator
q.js:1928:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(deferred.resolve));

[Survived] PrecomputedMutator
q.js:1929:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.slice(0)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1929:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.concat([])).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1929:17
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs.map(function (x) {
+     return x;
+   })).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1929:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1929:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.notify);

[Survived] PrecomputedMutator
q.js:1929:32
-       this.fapply(nodeArgs).fail(deferred.reject);
+       this.fapply(nodeArgs).fail(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1943:9
-       if (callback === undefined) {
+       if (callback !== undefined) {

[Survived] PrecomputedMutator
q.js:1943:9
-       if (callback === undefined) {
+       if (callback !== null) {

[Survived] PrecomputedMutator
q.js:1943:9
-       if (callback === undefined) {
+       if (typeof callback === "function") {

[Survived] PrecomputedMutator
q.js:1946:20
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:1946:20
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, 0);

[Survived] PrecomputedMutator
q.js:1946:20
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, -1);

[Survived] PrecomputedMutator
q.js:1946:32
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(null, 1);

[Survived] PrecomputedMutator
q.js:1946:32
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(undefined, 1);

[Survived] PrecomputedMutator
q.js:1946:32
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice([], 1);

[Survived] PrecomputedMutator
q.js:1946:43
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, 0);

[Survived] PrecomputedMutator
q.js:1946:43
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:1946:43
-       var baseArgs = array_slice(arguments, 1);
+       var baseArgs = array_slice(arguments, null);

[Survived] PrecomputedMutator
q.js:1948:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1948:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 0, 1));

[Survived] PrecomputedMutator
q.js:1948:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:1948:52
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(null));

[Survived] PrecomputedMutator
q.js:1948:52
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(undefined));

[Survived] PrecomputedMutator
q.js:1948:52
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice([]));

[Survived] PrecomputedMutator
q.js:1950:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1950:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.pop(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1950:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.shift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1950:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1950:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(function () {}));

[Survived] PrecomputedMutator
q.js:1950:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(function (err) {
+     throw err;
+   }));

[Survived] PrecomputedMutator
q.js:1951:9
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           deferred(callback).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:9
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           undefined(callback).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:11
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(null).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:11
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(undefined).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:11
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(function () {}).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:28
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs.slice(1)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:28
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs.concat([1, 2, 3])).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:28
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs.filter(function (arg) {
+     return arg !== 1;
+   })).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1951:43
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1951:43
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs).fail(deferred.notify);

[Survived] PrecomputedMutator
q.js:1951:43
-           Q(callback).fapply(nodeArgs).fail(deferred.reject);
+           Q(callback).fapply(nodeArgs).fail(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1958:28
-       var args = array_slice(arguments);
+       var args = array_slice(null);

[Survived] PrecomputedMutator
q.js:1958:28
-       var args = array_slice(arguments);
+       var args = array_slice(undefined);

[Survived] PrecomputedMutator
q.js:1958:28
-       var args = array_slice(arguments);
+       var args = array_slice([]);

[Survived] PrecomputedMutator
q.js:1959:5
-       args.unshift(this);
+       args.push(this);

[Survived] PrecomputedMutator
q.js:1959:5
-       args.unshift(this);
+       args.shift(this);

[Survived] PrecomputedMutator
q.js:1959:5
-       args.unshift(this);
+       args.pop(this);

[Survived] PrecomputedMutator
q.js:1959:18
-       args.unshift(this);
+       args.unshift(null);

[Survived] PrecomputedMutator
q.js:1959:18
-       args.unshift(this);
+       args.unshift(undefined);

[Survived] PrecomputedMutator
q.js:1959:18
-       args.unshift(this);
+       args.unshift(0);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(null);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(undefined);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(this);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.call(void 0, args);

[Survived] PrecomputedMutator
q.js:1960:12
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.bind(void 0, args);

[Survived] PrecomputedMutator
q.js:1960:30
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(null, args);

[Survived] PrecomputedMutator
q.js:1960:30
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1960:30
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(0, args);

[Survived] PrecomputedMutator
q.js:1960:38
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(void 0, args.slice(1));

[Survived] PrecomputedMutator
q.js:1960:38
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(void 0, args.concat([1]));

[Survived] PrecomputedMutator
q.js:1960:38
-       return Q.denodeify.apply(void 0, args);
+       return Q.denodeify.apply(void 0, args.filter(function (x) {
+     return x !== 1;
+   }));

[Survived] PrecomputedMutator
q.js:1964:20
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(arguments, 3);

[Survived] PrecomputedMutator
q.js:1964:20
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(args, 2);

[Survived] PrecomputedMutator
q.js:1964:20
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(baseArgs, 1);

[Survived] PrecomputedMutator
q.js:1964:32
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(array_slice(arguments, 1), 2);

[Survived] PrecomputedMutator
q.js:1964:32
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(array_slice(arguments, 2), 2);

[Survived] PrecomputedMutator
q.js:1964:32
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(array_slice(arguments, 3), 2);

[Survived] PrecomputedMutator
q.js:1964:43
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:1964:43
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(arguments, 3);

[Survived] PrecomputedMutator
q.js:1964:43
-       var baseArgs = array_slice(arguments, 2);
+       var baseArgs = array_slice(arguments, 0);

[Survived] PrecomputedMutator
q.js:1966:24
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.push(array_slice(arguments));

[Survived] PrecomputedMutator
q.js:1966:24
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.shift(array_slice(arguments));

[Survived] PrecomputedMutator
q.js:1966:24
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.pop(array_slice(arguments));

[Survived] PrecomputedMutator
q.js:1966:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 1));

[Survived] PrecomputedMutator
q.js:1966:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 0, 1));

[Survived] PrecomputedMutator
q.js:1966:40
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(arguments, 2));

[Survived] PrecomputedMutator
q.js:1966:52
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(null));

[Survived] PrecomputedMutator
q.js:1966:52
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice(undefined));

[Survived] PrecomputedMutator
q.js:1966:52
-           var nodeArgs = baseArgs.concat(array_slice(arguments));
+           var nodeArgs = baseArgs.concat(array_slice([]));

[Survived] PrecomputedMutator
q.js:1968:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1968:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.pop(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1968:9
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.shift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:1968:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:1968:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(function () {}));

[Survived] PrecomputedMutator
q.js:1968:23
-           nodeArgs.push(deferred.makeNodeResolver());
+           nodeArgs.push(deferred.makeNodeResolver(function (err, result) {}));

[Survived] PrecomputedMutator
q.js:1970:20
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, arguments[0]);

[Survived] PrecomputedMutator
q.js:1970:20
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, arguments.length);

[Survived] PrecomputedMutator
q.js:1970:20
-               return callback.apply(thisp, arguments);
+               return callback.call(thisp, arguments);

[Survived] PrecomputedMutator
q.js:1970:20
-               return callback.apply(thisp, arguments);
+               return callback.bind(thisp, arguments);

[Survived] PrecomputedMutator
q.js:1970:35
-               return callback.apply(thisp, arguments);
+               return callback.apply(null, arguments);

[Survived] PrecomputedMutator
q.js:1970:35
-               return callback.apply(thisp, arguments);
+               return callback.apply(undefined, arguments);

[Survived] PrecomputedMutator
q.js:1970:35
-               return callback.apply(thisp, arguments);
+               return callback.apply({}, arguments);

[Survived] PrecomputedMutator
q.js:1970:42
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, nodeArgs);

[Survived] PrecomputedMutator
q.js:1970:42
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, baseArgs);

[Survived] PrecomputedMutator
q.js:1970:42
-               return callback.apply(thisp, arguments);
+               return callback.apply(thisp, args);

[Survived] PrecomputedMutator
q.js:1972:11
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(null).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:11
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(function () {}).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:11
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(function (x) {
+     return x + 1;
+   }).fapply(nodeArgs).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:25
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs.slice(1)).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:25
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs.concat([1, 2, 3])).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:25
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs.filter(function (arg) {
+     return arg !== 1;
+   })).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:1972:40
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:1972:40
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs).fail(null);

[Survived] PrecomputedMutator
q.js:1972:40
-           Q(bound).fapply(nodeArgs).fail(deferred.reject);
+           Q(bound).fapply(nodeArgs).fail(undefined);

[Survived] PrecomputedMutator
q.js:1978:16
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:1978:16
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments.length);

[Survived] PrecomputedMutator
q.js:1978:16
-       var args = array_slice(arguments, 0);
+       var args = array_slice(null);

[Survived] PrecomputedMutator
q.js:1978:28
-       var args = array_slice(arguments, 0);
+       var args = array_slice(null, 0);

[Survived] PrecomputedMutator
q.js:1978:28
-       var args = array_slice(arguments, 0);
+       var args = array_slice(undefined, 0);

[Survived] PrecomputedMutator
q.js:1978:28
-       var args = array_slice(arguments, 0);
+       var args = array_slice([], 0);

[Survived] PrecomputedMutator
q.js:1978:39
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:1978:39
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments, -1);

[Survived] PrecomputedMutator
q.js:1978:39
-       var args = array_slice(arguments, 0);
+       var args = array_slice(arguments, "foo");

[Survived] PrecomputedMutator
q.js:1979:5
-       args.unshift(this);
+       args.push(this);

[Survived] PrecomputedMutator
q.js:1979:5
-       args.unshift(this);
+       args.shift(this);

[Survived] PrecomputedMutator
q.js:1979:5
-       args.unshift(this);
+       args.pop(this);

[Survived] PrecomputedMutator
q.js:1979:18
-       args.unshift(this);
+       args.unshift(null);

[Survived] PrecomputedMutator
q.js:1979:18
-       args.unshift(this);
+       args.unshift(undefined);

[Survived] PrecomputedMutator
q.js:1979:18
-       args.unshift(this);
+       args.unshift(0);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(null, args);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(this, args);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.call(void 0, args);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.bind(void 0, args);

[Survived] PrecomputedMutator
q.js:1980:12
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply.bind(void 0, args);

[Survived] PrecomputedMutator
q.js:1980:26
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(null, args);

[Survived] PrecomputedMutator
q.js:1980:26
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(undefined, args);

[Survived] PrecomputedMutator
q.js:1980:26
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(this, args);

[Survived] PrecomputedMutator
q.js:1980:34
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(void 0, args.slice(1));

[Survived] PrecomputedMutator
q.js:1980:34
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(void 0, args.concat([1]));

[Survived] PrecomputedMutator
q.js:1980:34
-       return Q.nbind.apply(void 0, args);
+       return Q.nbind.apply(void 0, args.filter(function (x) {
+     return x !== 1;
+   }));

[Survived] PrecomputedMutator
q.js:1994:12
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.slice(1));

[Survived] PrecomputedMutator
q.js:1994:12
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.concat(args));

[Survived] PrecomputedMutator
q.js:1994:12
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.reverse());

[Survived] PrecomputedMutator
q.js:1994:14
-       return Q(object).npost(name, args);
+       return Q(null).npost(name, args);

[Survived] PrecomputedMutator
q.js:1994:14
-       return Q(object).npost(name, args);
+       return Q(undefined).npost(name, args);

[Survived] PrecomputedMutator
q.js:1994:14
-       return Q(object).npost(name, args);
+       return Q({}).npost(name, args);

[Survived] PrecomputedMutator
q.js:1994:28
-       return Q(object).npost(name, args);
+       return Q(object).npost(name + "foo", args);

[Survived] PrecomputedMutator
q.js:1994:28
-       return Q(object).npost(name, args);
+       return Q(object).npost(name.toUpperCase(), args);

[Survived] PrecomputedMutator
q.js:1994:28
-       return Q(object).npost(name, args);
+       return Q(object).npost(name.length, args);

[Survived] PrecomputedMutator
q.js:1994:34
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.slice(1));

[Survived] PrecomputedMutator
q.js:1994:34
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.concat([1]));

[Survived] PrecomputedMutator
q.js:1994:34
-       return Q(object).npost(name, args);
+       return Q(object).npost(name, args.filter(function (x) {
+     return x !== 1;
+   }));

[Survived] PrecomputedMutator
q.js:1999:32
-       var nodeArgs = array_slice(args || []);
+       var nodeArgs = array_slice(null);

[Survived] PrecomputedMutator
q.js:1999:32
-       var nodeArgs = array_slice(args || []);
+       var nodeArgs = array_slice(undefined);

[Survived] PrecomputedMutator
q.js:1999:32
-       var nodeArgs = array_slice(args || []);
+       var nodeArgs = array_slice([]);

[Survived] PrecomputedMutator
q.js:2001:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2001:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.pop(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2001:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.shift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2001:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(null);

[Survived] PrecomputedMutator
q.js:2001:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(undefined);

[Survived] PrecomputedMutator
q.js:2001:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:2002:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("get", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, 1]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, function () {}]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("get", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("put", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, null]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, undefined]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, "foo"]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2002:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:2002:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(null);

[Survived] PrecomputedMutator
q.js:2002:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(undefined);

[Survived] PrecomputedMutator
q.js:2019:20
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:2019:20
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 3);

[Survived] PrecomputedMutator
q.js:2019:20
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(nodeArgs);

[Survived] PrecomputedMutator
q.js:2019:20
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice.length(arguments, 2);

[Survived] PrecomputedMutator
q.js:2019:32
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(null, 2);

[Survived] PrecomputedMutator
q.js:2019:32
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(undefined, 2);

[Survived] PrecomputedMutator
q.js:2019:32
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice([], 2);

[Survived] PrecomputedMutator
q.js:2019:43
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 1);

[Survived] PrecomputedMutator
q.js:2019:43
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 3);

[Survived] PrecomputedMutator
q.js:2019:43
-       var nodeArgs = array_slice(arguments, 2);
+       var nodeArgs = array_slice(arguments, 4);

[Survived] PrecomputedMutator
q.js:2021:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2021:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.pop(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2021:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.shift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2021:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(null);

[Survived] PrecomputedMutator
q.js:2021:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(undefined);

[Survived] PrecomputedMutator
q.js:2021:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(function () {});

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("get", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs, 1]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs, function () {}]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:5
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       null(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:7
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(null).dispatch("post", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:7
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(undefined).dispatch("post", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:24
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("get", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:24
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("put", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:32
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs, null]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:32
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs, undefined]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:32
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs, ""]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2022:55
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:2022:55
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs]).fail(null);

[Survived] PrecomputedMutator
q.js:2022:55
-       Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       Q(object).dispatch("post", [name, nodeArgs]).fail(undefined);

[Survived] PrecomputedMutator
q.js:2029:20
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:2029:20
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, 0);

[Survived] PrecomputedMutator
q.js:2029:20
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, 3);

[Survived] PrecomputedMutator
q.js:2029:32
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(null, 1);

[Survived] PrecomputedMutator
q.js:2029:32
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(undefined, 1);

[Survived] PrecomputedMutator
q.js:2029:32
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice([], 1);

[Survived] PrecomputedMutator
q.js:2029:43
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, 0);

[Survived] PrecomputedMutator
q.js:2029:43
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, 2);

[Survived] PrecomputedMutator
q.js:2029:43
-       var nodeArgs = array_slice(arguments, 1);
+       var nodeArgs = array_slice(arguments, null);

[Survived] PrecomputedMutator
q.js:2031:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.unshift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2031:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.pop(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2031:5
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.shift(deferred.makeNodeResolver());

[Survived] PrecomputedMutator
q.js:2031:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(null);

[Survived] PrecomputedMutator
q.js:2031:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(undefined);

[Survived] PrecomputedMutator
q.js:2031:19
-       nodeArgs.push(deferred.makeNodeResolver());
+       nodeArgs.push(deferred.makeNodeResolver(null));

[Survived] PrecomputedMutator
q.js:2032:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("send", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, null]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:5
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, function () {}]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("send", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("dispatch", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:19
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("apply", [name, nodeArgs]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, null]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, undefined]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:27
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs, ""]).fail(deferred.reject);

[Survived] PrecomputedMutator
q.js:2032:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(deferred.resolve);

[Survived] PrecomputedMutator
q.js:2032:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(null);

[Survived] PrecomputedMutator
q.js:2032:50
-       this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
+       this.dispatch("post", [name, nodeArgs]).fail(undefined);

[Survived] PrecomputedMutator
q.js:2048:12
-       return Q(object).nodeify(nodeback);
+       return Q.reject(object).nodeify(nodeback);

[Survived] PrecomputedMutator
q.js:2048:14
-       return Q(object).nodeify(nodeback);
+       return Q(null).nodeify(nodeback);

[Survived] PrecomputedMutator
q.js:2048:14
-       return Q(object).nodeify(nodeback);
+       return Q(undefined).nodeify(nodeback);

[Survived] PrecomputedMutator
q.js:2048:14
-       return Q(object).nodeify(nodeback);
+       return Q({}).nodeify(nodeback);

[Survived] PrecomputedMutator
q.js:2048:30
-       return Q(object).nodeify(nodeback);
+       return Q(object).nodeify(nodeback(error, value));

[Survived] PrecomputedMutator
q.js:2048:30
-       return Q(object).nodeify(nodeback);
+       return Q(object).nodeify(nodeback(value));

[Survived] PrecomputedMutator
q.js:2048:30
-       return Q(object).nodeify(nodeback);
+       return Q(object).nodeify(nodeback(error, null));

[Survived] PrecomputedMutator
q.js:2052:9
-       if (nodeback) {
+       if (!nodeback) {

[Survived] PrecomputedMutator
q.js:2052:9
-       if (nodeback) {
+       if (nodeback + 1) {

[Survived] PrecomputedMutator
q.js:2052:9
-       if (nodeback) {
+       if (nodeback()) {

[Survived] PrecomputedMutator
q.js:2055:17
-                   nodeback(null, value);
+                   nodeback(undefined, value);

[Survived] PrecomputedMutator
q.js:2055:17
-                   nodeback(null, value);
+                   nodeback(value, null);

[Survived] PrecomputedMutator
q.js:2055:17
-                   nodeback(null, value);
+                   nodeback(value, undefined);

[Survived] PrecomputedMutator
q.js:2055:26
-                   nodeback(null, value);
+                   nodeback(undefined, value);

[Survived] PrecomputedMutator
q.js:2055:26
-                   nodeback(null, value);
+                   nodeback(0, value);

[Survived] PrecomputedMutator
q.js:2055:26
-                   nodeback(null, value);
+                   nodeback({}, value);

[Survived] PrecomputedMutator
q.js:2055:32
-                   nodeback(null, value);
+                   nodeback(null, null);

[Survived] PrecomputedMutator
q.js:2055:32
-                   nodeback(null, value);
+                   nodeback(null, undefined);

[Survived] PrecomputedMutator
q.js:2055:32
-                   nodeback(null, value);
+                   nodeback(null, 0);

[Survived] PrecomputedMutator
q.js:2059:26
-                   nodeback(error);
+                   nodeback(null);

[Survived] PrecomputedMutator
q.js:2059:26
-                   nodeback(error);
+                   nodeback(undefined);

[Survived] PrecomputedMutator
q.js:2059:26
-                   nodeback(error);
+                   nodeback("error");

[Survived] PrecomputedMutator
queue.js:18:43
-               var result = ends.promise.get("head");
+               var result = ends.promise.get("tail");

[Survived] PrecomputedMutator
queue.js:18:43
-               var result = ends.promise.get("head");
+               var result = ends.promise.get("head.tail");

[Survived] PrecomputedMutator
queue.js:18:43
-               var result = ends.promise.get("head");
+               var result = ends.promise.get("ends.promise.get('tail')");

[Survived] PrecomputedMutator
queue.js:19:45
-               ends.promise = ends.promise.get("tail");
+               ends.promise = ends.promise.get("head");

[Survived] PrecomputedMutator
queue.js:19:45
-               ends.promise = ends.promise.get("tail");
+               ends.promise = ends.promise.get("tail.head");

[Survived] PrecomputedMutator
queue.js:19:45
-               ends.promise = ends.promise.get("tail");
+               ends.promise = ends.promise.get("tail.tail");

[Survived] PrecomputedMutator
queue.js:21:17
-                   closed.resolve(error);
+                   closed.reject(error);

[Survived] PrecomputedMutator
queue.js:21:32
-                   closed.resolve(error);
+                   closed.resolve(null);

[Survived] PrecomputedMutator
queue.js:21:32
-                   closed.resolve(error);
+                   closed.resolve(undefined);

[Survived] PrecomputedMutator
queue.js:21:32
-                   closed.resolve(error);
+                   closed.resolve(Q.reject(new Error("Can't get value from closed queue")));

[Survived] PrecomputedMutator
queue.js:28:30
-               var end = {head: Q.reject(error)};
+               var end = {head: Q.resolve(error)};

[Survived] PrecomputedMutator
queue.js:28:39
-               var end = {head: Q.reject(error)};
+               var end = {head: Q.reject(null)};

[Survived] PrecomputedMutator
queue.js:28:39
-               var end = {head: Q.reject(error)};
+               var end = {head: Q.reject(undefined)};

[Survived] PrecomputedMutator
queue.js:28:39
-               var end = {head: Q.reject(error)};
+               var end = {head: Q.reject(Q.reject(new Error("Queue is closed")))};

[Survived] PrecomputedMutator
queue.js:30:13
-               ends.resolve(end);
+               ends.reject(end);

[Survived] PrecomputedMutator
queue.js:30:13
-               ends.resolve(end);
+               closed.resolve(end);

[Survived] PrecomputedMutator
queue.js:30:13
-               ends.resolve(end);
+               next.reject(end);

Ran 0.96 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   11.90 |      158 |        84 |       1792 |        0 |        0 |
 q.js     |   12.00 |      158 |        84 |       1775 |        0 |        0 |
 queue.js |    0.00 |        0 |         0 |         17 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m17:44:38 (3025) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/q/reports/mutation/mutation.html
[32m17:44:38 (3025) INFO MutationTestExecutor[39m Done in 119 minutes 38 seconds.

real	119m39.772s
user	45m5.405s
sys	7m34.516s
