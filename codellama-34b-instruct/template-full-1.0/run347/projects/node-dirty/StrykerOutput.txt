*** using precomputed mutations ***
[32m12:29:19 (2581) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m12:29:19 (2581) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m12:29:20 (2581) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m12:29:20 (2581) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m12:29:20 (2581) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m12:29:20 (2581) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 267 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in dirty.js: key replaced with null
Mutant 1 in dirty.js: key replaced with undefined
Mutant 2 in dirty.js: key replaced with val
Mutant 3 in dirty.js: key replaced with key + 'a'
Mutant 4 in dirty.js: key replaced with undefined
Mutant 5 in dirty.js: this.path replaced with this._path
Mutant 6 in dirty.js: this.path replaced with this.path = null
Mutant 7 in dirty.js: this.path replaced with this.path || ''
Mutant 8 in dirty.js: cb replaced with console.log(cb)
Mutant 9 in dirty.js: cb replaced with !cb
Mutant 10 in dirty.js: cb replaced with cb && cb()
Mutant 11 in dirty.js: cbs.push replaced with cbs.unshift
Mutant 12 in dirty.js: cbs.push replaced with cbs.length = 1
Mutant 13 in dirty.js: cb replaced with cb()
Mutant 14 in dirty.js: cb replaced with cb(null, err)
Mutant 15 in dirty.js: cb replaced with cb && cb()
Mutant 16 in dirty.js: key replaced with key + 'suffix'
Mutant 17 in dirty.js: key replaced with key - 1
Mutant 18 in dirty.js: key replaced with 'prefix-' + key
Mutant 19 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
}
Mutant 20 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  if (this._queue.size > 0) this.emit('drain');
}
Mutant 21 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('drain');
  this._queue.clear();
}
Mutant 22 in dirty.js: cb replaced with false
Mutant 23 in dirty.js: cb replaced with null
Mutant 24 in dirty.js: cb replaced with () => {}
Mutant 25 in dirty.js: cb replaced with callee
Mutant 26 in dirty.js: cb replaced with arguments
Mutant 27 in dirty.js: cb replaced with 1 / 0
Mutant 28 in dirty.js: 'drain' replaced with 'dummy'
Mutant 29 in dirty.js: 'drain' replaced with 'error'
Mutant 30 in dirty.js: 'drain' replaced with 'close'
Mutant 31 in dirty.js: key replaced with val
Mutant 32 in dirty.js: key replaced with this._data.size
Mutant 33 in dirty.js: key replaced with Math.random()
Mutant 34 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 35 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, 0, cb)
Mutant 36 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, 'null', cb)
Mutant 37 in dirty.js: this.set replaced with this.rm
Mutant 38 in dirty.js: this.set replaced with this.get
Mutant 39 in dirty.js: this.set replaced with this.update
Mutant 40 in dirty.js: key replaced with null
Mutant 41 in dirty.js: key replaced with key + 'a'
Mutant 42 in dirty.js: key replaced with 'key' + key
Mutant 43 in dirty.js: undefined replaced with null
Mutant 44 in dirty.js: undefined replaced with {}
Mutant 45 in dirty.js: undefined replaced with []
Mutant 46 in dirty.js: cb replaced with false
Mutant 47 in dirty.js: cb replaced with () => {}
Mutant 48 in dirty.js: cb replaced with (key, cb) => Object.getOwnPropertyNames(this._data[key]).indexOf(cb) === -1 ? cb : undefined
Mutant 49 in dirty.js: fn(key, val) === false replaced with val !== undefined
Mutant 50 in dirty.js: fn(key, val) === false replaced with !val
Mutant 51 in dirty.js: fn(key, val) === false replaced with typeof val === 'undefined'
Mutant 52 in dirty.js: fn(key, val) replaced with fn(" new key(), val")
Mutant 53 in dirty.js: fn(key, val) replaced with fn("val, key")
Mutant 54 in dirty.js: fn(key, val) replaced with fn("key, 0")
Mutant 55 in dirty.js: key replaced with null
Mutant 56 in dirty.js: key replaced with this._data[key]
Mutant 57 in dirty.js: key replaced with this._data[key] = val
Mutant 58 in dirty.js: val replaced with {
  key: val
}
Mutant 59 in dirty.js: val replaced with val.key
Mutant 60 in dirty.js: val replaced with key + val
Mutant 61 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(null), cb)
Mutant 62 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key.toString())), cb)
Mutant 63 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this._data.get(key)), cb)
Mutant 64 in dirty.js: this.set replaced with this.update
Mutant 65 in dirty.js: this.set replaced with this.get
Mutant 66 in dirty.js: this.set replaced with this.rm
Mutant 67 in dirty.js: key replaced with undefined
Mutant 68 in dirty.js: key replaced with 'foobar'
Mutant 69 in dirty.js: key replaced with this.key
Mutant 70 in dirty.js: updater replaced with updater.key
Mutant 71 in dirty.js: this.get(key) replaced with this.get(key + 1)
Mutant 72 in dirty.js: this.get(key) replaced with this.get(key - 1)
Mutant 73 in dirty.js: this.get(key) replaced with this.get(key + Object.keys(this._data).length)
Mutant 74 in dirty.js: key replaced with blank
Mutant 75 in dirty.js: key replaced with nonExistentKey
Mutant 76 in dirty.js: key replaced with val + 1
Mutant 77 in dirty.js: cb replaced with null
Mutant 78 in dirty.js: cb replaced with undefined
Mutant 79 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size === 0 && this._inFlightWrites === 0
Mutant 80 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size === 0 || this._inFlightWrites > 1
Mutant 81 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size > 0 && this._inFlightWrites > 0
Mutant 82 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('error', () => this.close())
Mutant 83 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('failure', () => this.close())
Mutant 84 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this.close(true))
Mutant 85 in dirty.js: this.once replaced with this.on
Mutant 86 in dirty.js: this.once replaced with this.emit
Mutant 87 in dirty.js: this.once replaced with this.remove
Mutant 88 in dirty.js: 'drain' replaced with 'overflow'
Mutant 89 in dirty.js: 'drain' replaced with 'wrong'
Mutant 90 in dirty.js: 'drain' replaced with 'something'
Mutant 91 in dirty.js: this.close replaced with this._inFlightWrites = 0
Mutant 92 in dirty.js: this._readStream replaced with this._writeStream
Mutant 93 in dirty.js: this._readStream replaced with null
Mutant 94 in dirty.js: this._readStream replaced with this._writeStream.isReadable()
Mutant 95 in dirty.js: this._writeStream replaced with null
Mutant 96 in dirty.js: this._writeStream replaced with 1
Mutant 97 in dirty.js: this._writeStream replaced with {}
Mutant 98 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end()
Mutant 99 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.destroy(true)
Mutant 100 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.destroySoon()
Mutant 101 in dirty.js: !this.path replaced with !this.path.length
Mutant 102 in dirty.js: !this.path replaced with this.path.length === 0
Mutant 103 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 100)
Mutant 104 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size + 1)
Mutant 105 in dirty.js: this.emit('load', 0) replaced with this.emit('load', error)
Mutant 106 in dirty.js: 'load' replaced with 'error'
Mutant 107 in dirty.js: 'load' replaced with 'close'
Mutant 108 in dirty.js: 'load' replaced with 'write'
Mutant 109 in dirty.js: 0 replaced with null
Mutant 110 in dirty.js: 0 replaced with -1
Mutant 111 in dirty.js: 0 replaced with this._data.size
Mutant 112 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOEXIST'
Mutant 113 in dirty.js: err.code === 'ENOENT' replaced with err.code == 'EACCESS'
Mutant 114 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOTDIR'
Mutant 115 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 116 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size)
Mutant 117 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 118 in dirty.js: this.emit replaced with this._emit
Mutant 119 in dirty.js: 0 replaced with Infinity
Mutant 120 in dirty.js: 0 replaced with this.path
Mutant 121 in dirty.js: 0 replaced with NaN
Mutant 122 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error())
Mutant 123 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 124 in dirty.js: this.emit('error', err) replaced with this.emit('close')
Mutant 125 in dirty.js: 'error' replaced with 'error2'
Mutant 126 in dirty.js: 'error' replaced with 'warning'
Mutant 127 in dirty.js: 'error' replaced with 'disconnect'
Mutant 128 in dirty.js: err replaced with null
Mutant 129 in dirty.js: err replaced with '\n'
Mutant 130 in dirty.js: err replaced with Error('Error message')
Mutant 131 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with -chunk.lastIndexOf('\n') === -1 + chunk.lastIndexOf('\n') === 0
Mutant 132 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with -chunk.lastIndexOf('\n') === -1 + chunk.indexOf('\n') === -1
Mutant 133 in dirty.js: buffer.split replaced with buffer.slice
Mutant 134 in dirty.js: '\n' replaced with '\t'
Mutant 135 in dirty.js: '\n' replaced with ' '
Mutant 136 in dirty.js: '\n' replaced with ''
Mutant 137 in dirty.js: arr.pop replaced with arr.shift
Mutant 138 in dirty.js: !rowStr replaced with !rowObj
Mutant 139 in dirty.js: !rowStr replaced with !rowStr.length
Mutant 140 in dirty.js: !rowStr replaced with rowStr.length !== 0
Mutant 141 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error(key))
Mutant 142 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error(val))
Mutant 143 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error(key + ' ' + val))
Mutant 144 in dirty.js: 'error' replaced with 'please_report_an_error'
Mutant 145 in dirty.js: 'error' replaced with null
Mutant 146 in dirty.js: 'error' replaced with 1
Mutant 147 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Empty lines are OK in a healthy database')
Mutant 148 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Validating...')
Mutant 149 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error(undefined)
Mutant 150 in dirty.js: JSON.parse replaced with JSON.stringify
Mutant 151 in dirty.js: rowStr replaced with rowStr.trim()
Mutant 152 in dirty.js: rowStr replaced with rowStr.toUpperCase()
Mutant 153 in dirty.js: rowStr replaced with rowStr.slice(1)
Mutant 154 in dirty.js: !('key' in row) replaced with row.key === undefined
Mutant 155 in dirty.js: !('key' in row) replaced with typeof row.key === 'undefined'
Mutant 156 in dirty.js: !('key' in row) replaced with row.key !== 'key'
Mutant 157 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Corrupted row: ${this.kv.get(rowStr)}`))
Mutant 158 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Corrupted row: ${rowStr.val}`))
Mutant 159 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Corrupted row: ${this.emit.get(rowStr)}`))
Mutant 160 in dirty.js: this.emit replaced with this._emit
Mutant 161 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Could not load corrupted row: ${rowStr}`, {
  stack: ''
})
Mutant 162 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Could not load corrupted row: ${rowStr}`, {
  code: 'EINVAL'
})
Mutant 163 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Could not load corrupted row: ${rowStr}`, {
  cause: new Error('some other error')
})
Mutant 164 in dirty.js: row.val === undefined replaced with row.val == null
Mutant 165 in dirty.js: row.val === undefined replaced with !row.val
Mutant 166 in dirty.js: row.val === undefined replaced with row.val === void 0
Mutant 167 in dirty.js: row.key replaced with row.key.length + 1
Mutant 168 in dirty.js: row.key replaced with row.val
Mutant 169 in dirty.js: row.key replaced with row.key.replace('a', 'b')
Mutant 170 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.value !== undefined ? row.value : row.key)
Mutant 171 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.value)
Mutant 172 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row['val'])
Mutant 173 in dirty.js: row.key replaced with row.val
Mutant 174 in dirty.js: row.key replaced with row.key + 1
Mutant 175 in dirty.js: row.key replaced with row.key.trim()
Mutant 176 in dirty.js: row.val replaced with !row.val
Mutant 177 in dirty.js: row.val replaced with row.val + 1
Mutant 178 in dirty.js: row.val replaced with null
Mutant 179 in dirty.js: buffer.length replaced with buffer.lengt
Mutant 180 in dirty.js: buffer.length replaced with this._waitForDrain
Mutant 181 in dirty.js: buffer.length replaced with ""
Mutant 182 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`))
Mutant 183 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the beginning of the db: ${buffer}`))
Mutant 184 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new TypeError(`Corrupted row at the end of the db: ${buffer}`))
Mutant 185 in dirty.js: this.emit replaced with Dirty.emit
Mutant 186 in dirty.js: this.emit replaced with Dirty._queue.emit
Mutant 187 in dirty.js: this.emit replaced with Dirty._writeStream.emit
Mutant 188 in dirty.js: 'error' replaced with 'warning'
Mutant 189 in dirty.js: 'error' replaced with 'otherError'
Mutant 190 in dirty.js: 'error' replaced with 'end'
Mutant 191 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', 0)
Mutant 192 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 193 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size - 1)
Mutant 194 in dirty.js: this.emit replaced with !this.data.size
Mutant 195 in dirty.js: this.emit replaced with this.data.size = null
Mutant 196 in dirty.js: 'load' replaced with 'error'
Mutant 197 in dirty.js: 'load' replaced with 'invalid'
Mutant 198 in dirty.js: 'load' replaced with undefined
Mutant 199 in dirty.js: this._data.size replaced with this._data.key
Mutant 200 in dirty.js: this._data.size replaced with this._data.key = ''
Mutant 201 in dirty.js: this._data.size replaced with this._data.size = 10
Mutant 202 in dirty.js: 'read_close' replaced with 'drain'
Mutant 203 in dirty.js: 'read_close' replaced with 'error'
Mutant 204 in dirty.js: 'read_close' replaced with 'destroy'
Mutant 205 in dirty.js: !this._queue.size replaced with -!this._queue.size + this._queue.size === 0
Mutant 206 in dirty.js: !this._queue.size replaced with -!this._queue.size + !(this._queue.size > 0)
Mutant 207 in dirty.js: !this._queue.size replaced with -!this._queue.size + this._queue.size == 0
Mutant 208 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites >= 0
Mutant 209 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites === 0
Mutant 210 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites !== 0
Mutant 211 in dirty.js: 'drain' replaced with 'close'
Mutant 212 in dirty.js: 'drain' replaced with 'error'
Mutant 213 in dirty.js: 'drain' replaced with 'writable'
Mutant 214 in dirty.js: this._flush replaced with this._queue.length
Mutant 215 in dirty.js: this.emit replaced with null.emit
Mutant 216 in dirty.js: this.emit replaced with {}
Mutant 217 in dirty.js: 'write_close' replaced with 'write_error'
Mutant 218 in dirty.js: 'write_close' replaced with 'read_error'
Mutant 219 in dirty.js: 'write_close' replaced with 'drain'
Mutant 220 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size > 0 && !this._waitForDrain
Mutant 221 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size == 0 || this._waitForDrain
Mutant 222 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size > 0 && this._waitForDrain
Mutant 223 in dirty.js: this._writeStream.cork replaced with this._writeStream.uncork
Mutant 224 in dirty.js: this._writeStream.cork replaced with this._writeStream.cork ? 1 : 0
Mutant 225 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.entries()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 226 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of [...this._queue.keys()]) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 227 in dirty.js: this._queue replaced with null
Mutant 228 in dirty.js: this._queue replaced with this._queue.size + 1
Mutant 229 in dirty.js: this._queue replaced with this._queue.size - 1
Mutant 230 in dirty.js: key replaced with null
Mutant 231 in dirty.js: key replaced with undefined
Mutant 232 in dirty.js: key replaced with {}[key]
Mutant 233 in dirty.js: JSON.stringify replaced with typeof key
Mutant 234 in dirty.js: JSON.stringify replaced with key + val
Mutant 235 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key: this._data.get(key),
  val: undefined
}
Mutant 236 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key: this._data.get(key),
  val: null
}
Mutant 237 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key: this._data.get(key),
  val: Math.random()
}
Mutant 238 in dirty.js: this._data.get replaced with this._data.set
Mutant 239 in dirty.js: this._data.get replaced with this._data.has
Mutant 240 in dirty.js: key replaced with this._data.size
Mutant 241 in dirty.js: key replaced with this._data.get(null)
Mutant 242 in dirty.js: key replaced with this._data.keys.length
Mutant 243 in dirty.js: this.emit('error', err) replaced with this.emit('error', 'corrupted file')
Mutant 244 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 245 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('corrupted file'))
Mutant 246 in dirty.js: this.emit replaced with this._emit
Mutant 247 in dirty.js: this.emit replaced with Dirty.emit
Mutant 248 in dirty.js: 'error' replaced with 'join'
Mutant 249 in dirty.js: 'error' replaced with 'drain'
Mutant 250 in dirty.js: 'error' replaced with 'finish'
Mutant 251 in dirty.js: err replaced with err + 1
Mutant 252 in dirty.js: err replaced with err - 1
Mutant 253 in dirty.js: err replaced with err.message
Mutant 254 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 && !this._waitForDrain
Mutant 255 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with !this._inFlightWrites && !this._waitForDrain
Mutant 256 in dirty.js: 'drain' replaced with 'cancel'
Mutant 257 in dirty.js: 'drain' replaced with 'done'
Mutant 258 in dirty.js: 'drain' replaced with 'error'
Mutant 259 in dirty.js: cbs replaced with cbs.pop()
Mutant 260 in dirty.js: cbs replaced with cbs[0]
Mutant 261 in dirty.js: cbs replaced with null
Mutant 262 in dirty.js: err replaced with 0
Mutant 263 in dirty.js: err replaced with NaN
Mutant 264 in dirty.js: err replaced with void 0
Mutant 265 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
Mutant 266 in dirty.js: this._waitForDrain replaced with 0
[32m12:29:20 (2581) INFO Instrumenter[39m Instrumented 2 source file(s) with 267 mutant(s)
[32m12:29:20 (2581) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m12:29:22 (2581) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m12:29:22 (2581) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m12:29:22 (2581) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 527 ms, overhead 0 ms).
Mutation testing 5% (elapsed: <1m, remaining: ~2m) 15/267 tested (3 survived, 0 timed out)
Mutation testing 8% (elapsed: <1m, remaining: ~3m) 22/267 tested (4 survived, 0 timed out)
Mutation testing 10% (elapsed: <1m, remaining: ~4m) 28/267 tested (4 survived, 0 timed out)
Mutation testing 15% (elapsed: <1m, remaining: ~3m) 41/267 tested (4 survived, 0 timed out)
Mutation testing 22% (elapsed: <1m, remaining: ~2m) 60/267 tested (6 survived, 0 timed out)
Mutation testing 29% (elapsed: ~1m, remaining: ~2m) 79/267 tested (10 survived, 0 timed out)
Mutation testing 33% (elapsed: ~1m, remaining: ~2m) 90/267 tested (18 survived, 0 timed out)
Mutation testing 39% (elapsed: ~1m, remaining: ~2m) 106/267 tested (24 survived, 0 timed out)
Mutation testing 40% (elapsed: ~1m, remaining: ~2m) 108/267 tested (24 survived, 1 timed out)
Mutation testing 46% (elapsed: ~1m, remaining: ~1m) 124/267 tested (28 survived, 2 timed out)
Mutation testing 53% (elapsed: ~1m, remaining: ~1m) 143/267 tested (40 survived, 2 timed out)
Mutation testing 61% (elapsed: ~2m, remaining: ~1m) 163/267 tested (56 survived, 2 timed out)
Mutation testing 68% (elapsed: ~2m, remaining: ~1m) 182/267 tested (63 survived, 2 timed out)
Mutation testing 73% (elapsed: ~2m, remaining: <1m) 197/267 tested (72 survived, 2 timed out)
Mutation testing 74% (elapsed: ~2m, remaining: <1m) 200/267 tested (72 survived, 4 timed out)
Mutation testing 81% (elapsed: ~2m, remaining: <1m) 217/267 tested (83 survived, 4 timed out)
Mutation testing 82% (elapsed: ~2m, remaining: <1m) 220/267 tested (83 survived, 4 timed out)
Mutation testing 86% (elapsed: ~3m, remaining: <1m) 231/267 tested (87 survived, 5 timed out)
Mutation testing 91% (elapsed: ~3m, remaining: <1m) 243/267 tested (87 survived, 5 timed out)
Mutation testing 95% (elapsed: ~3m, remaining: <1m) 254/267 tested (98 survived, 5 timed out)
Mutation testing 95% (elapsed: ~3m, remaining: <1m) 256/267 tested (98 survived, 7 timed out)
Mutation testing 97% (elapsed: ~3m, remaining: <1m) 260/267 tested (98 survived, 9 timed out)

All tests
  ✓ All tests (killed 155)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:33:9
-       if (this.path) {
+       if (this.path || '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:11
-         if (cb) cbs.push(cb);
+         if (cb && cb()) cbs.push(cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:15
-         if (cb) cbs.push(cb);
+         if (cb) cbs.unshift(cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) cb();
+     this.emit('drain');
+     this._queue.clear();
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, false);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key.toString())), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this._data.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size > 0 && this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('failure', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.on('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.emit('drain', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('overflow', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('wrong', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('something', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:91:9
-       if (this._readStream) this._readStream.destroy();
+       if (null) this._readStream.destroy();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (1) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if ({}) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroySoon());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:101:27
-           this.emit('load', 0);
+           this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:114:13
-               this.emit('load', 0);
+               this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('error2', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('disconnect', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', '\n');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', Error('Error message'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (-chunk.lastIndexOf('\n') === -1 + chunk.lastIndexOf('\n') === 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (-chunk.lastIndexOf('\n') === -1 + chunk.indexOf('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (!rowStr.length) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(key));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(val));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(key + ' ' + val));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('please_report_an_error', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit(null, new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit(1, new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Empty lines are OK in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Validating...'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(undefined));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:133:32
-                 row = JSON.parse(rowStr);
+                 row = JSON.parse(rowStr.trim());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.key === undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (typeof row.key === 'undefined') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${this.kv.get(rowStr)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${rowStr.val}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${this.emit.get(rowStr)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this._emit('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`, {
+     stack: ''
+   }));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`, {
+     code: 'EINVAL'
+   }));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`, {
+     cause: new Error('some other error')
+   }));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (!row.val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val === void 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer.lengt) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (this._waitForDrain) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if ("") {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the beginning of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new TypeError(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               Dirty.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               Dirty._queue.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               Dirty._writeStream.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('warning', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('otherError', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('destroy');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (-!this._queue.size + this._queue.size === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (-!this._queue.size + !(this._queue.size > 0)) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (-!this._queue.size + this._queue.size == 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites >= 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites === 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites !== 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('writable');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:171:9
-           this._flush();
+           this._queue.length();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size == 0 || this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size > 0 && this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:183:5
-       this._writeStream.cork();
+       this._writeStream.uncork();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:5
-       for (const [key, cbs] of this._queue) {
-         this._queue.delete(key);
-         const data = `${JSON.stringify({key, val: this._data.get(key)})}\n`;
-         ++this._inFlightWrites;
-         this._waitForDrain = !this._writeStream.write(data, (err) => {
-           if (!cbs.length && err != null) this.emit('error', err);
-           if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
-           for (const cb of cbs) cb(err);
-         });
-         if (this._waitForDrain) break;
-       }
+       for (const [key, cbs] of this._queue.entries()) {
+     this._queue.delete(key);
+     const data = `${JSON.stringify({
+       key,
+       val: this._data.get(key)
+     })}\n`;
+     ++this._inFlightWrites;
+     this._waitForDrain = !this._writeStream.write(data, err => {
+       if (!cbs.length && err != null) this.emit('error', err);
+       if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
+       for (const cb of cbs) cb(err);
+     });
+     if (this._waitForDrain) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', 'corrupted file');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('corrupted file'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this._emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) Dirty.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('join', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('drain', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('finish', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err + 1);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err - 1);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(NaN);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(void 0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (0) break;

Ran 0.97 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   61.42 |      155 |         9 |        103 |        0 |        0 |
 dirty.js |   61.42 |      155 |         9 |        103 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m12:33:05 (2581) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m12:33:05 (2581) INFO MutationTestExecutor[39m Done in 3 minutes 45 seconds.

real	3m47.227s
user	2m22.718s
sys	0m24.513s
