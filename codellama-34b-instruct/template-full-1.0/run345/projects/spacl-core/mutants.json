[
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 54,
    "originalCode": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null",
    "replacement": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === true",
    "promptId": 1,
    "completionId": 0,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 54,
    "originalCode": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null",
    "replacement": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null",
    "promptId": 1,
    "completionId": 0,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 54,
    "originalCode": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null",
    "replacement": "spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== \"\"",
    "promptId": 1,
    "completionId": 0,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.test",
    "promptId": 2,
    "completionId": 1,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 8,
    "endLine": 12,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.length",
    "promptId": 2,
    "completionId": 1,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 19,
    "endLine": 12,
    "endColumn": 44,
    "originalCode": "/^[a-zA-Z0-9_/:~.$+*-]*$/",
    "replacement": "/^[a-zA-Z0-9_/:~.$+*?-]*$/",
    "promptId": 3,
    "completionId": 2,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 19,
    "endLine": 12,
    "endColumn": 44,
    "originalCode": "/^[a-zA-Z0-9_/:~.$+*-]*$/",
    "replacement": "/^[a-zA-Z0-9_/:~.#$+*-]*$/",
    "promptId": 3,
    "completionId": 2,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 12,
    "startColumn": 19,
    "endLine": 12,
    "endColumn": 44,
    "originalCode": "/^[a-zA-Z0-9_/:~.$+*-]*$/",
    "replacement": "/^[a-zA-Z0-9_/:~.#$+*-]*[a-zA-Z0-9]$/",
    "promptId": 3,
    "completionId": 2,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 8,
    "endLine": 15,
    "endColumn": 34,
    "originalCode": "spec.match(/^\\//) === null",
    "replacement": "spec.match(/\\/$/) === null",
    "promptId": 4,
    "completionId": 3,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 15,
    "startColumn": 8,
    "endLine": 15,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.test",
    "promptId": 5,
    "completionId": 4,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 8,
    "endLine": 18,
    "endColumn": 35,
    "originalCode": "spec.match(/\\/\\//) !== null",
    "replacement": "spec.match(/(\\/+){2}/) !== null",
    "promptId": 7,
    "completionId": 6,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 8,
    "endLine": 18,
    "endColumn": 35,
    "originalCode": "spec.match(/\\/\\//) !== null",
    "replacement": "spec.indexOf('/') === 0",
    "promptId": 7,
    "completionId": 6,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 8,
    "endLine": 18,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.split",
    "promptId": 8,
    "completionId": 7,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 18,
    "startColumn": 19,
    "endLine": 18,
    "endColumn": 25,
    "originalCode": "/\\/\\//",
    "replacement": "/\\/\\/.*?$/",
    "promptId": 9,
    "completionId": 8,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 21,
    "startColumn": 8,
    "endLine": 23,
    "endColumn": 65,
    "originalCode": "spec.match(version === '1' || version === '1.0'\n      ? /[*+][^/]|[^/][*+]/\n      : /\\*[^*/]|\\+[^+/]|[^/*]\\*|[^/+]\\+|\\*\\*\\*|\\+\\+\\+/) !== null",
    "replacement": "spec.match(/[*+][^/]|[^/][*+]/) !== null",
    "promptId": 10,
    "completionId": 9,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 43,
    "originalCode": "spec.match(/[^/]:|:\\/|:$/) !== null",
    "replacement": "!spec.match(/[^/]:|:\\/|:$/)",
    "promptId": 11,
    "completionId": 10,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 43,
    "originalCode": "spec.match(/[^/]:|:\\/|:$/) !== null",
    "replacement": "spec.match(/[^/]:|:\\/|:$/) === null",
    "promptId": 11,
    "completionId": 10,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "any",
    "promptId": 12,
    "completionId": 11,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "entries",
    "promptId": 12,
    "completionId": 11,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 8,
    "endLine": 26,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "has",
    "promptId": 12,
    "completionId": 11,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 19,
    "endLine": 26,
    "endColumn": 33,
    "originalCode": "/[^/]:|:\\/|:$/",
    "replacement": "/[^/]:|:\\/|:+/",
    "promptId": 13,
    "completionId": 12,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 26,
    "startColumn": 19,
    "endLine": 26,
    "endColumn": 33,
    "originalCode": "/[^/]:|:\\/|:$/",
    "replacement": "/[^/]:|:\\/|:?/",
    "promptId": 13,
    "completionId": 12,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) === null",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) === undefined",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 37,
    "originalCode": "spec.match(/^.+\\/$/) !== null",
    "replacement": "spec.match(/^.+\\/$/) === NaN",
    "promptId": 14,
    "completionId": 13,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec.split",
    "promptId": 15,
    "completionId": 14,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 8,
    "endLine": 29,
    "endColumn": 18,
    "originalCode": "spec.match",
    "replacement": "spec[1]",
    "promptId": 15,
    "completionId": 14,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 19,
    "endLine": 29,
    "endColumn": 27,
    "originalCode": "/^.+\\/$/",
    "replacement": "/^.+\\/\\/.+$/",
    "promptId": 16,
    "completionId": 15,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 19,
    "endLine": 29,
    "endColumn": 27,
    "originalCode": "/^.+\\/$/",
    "replacement": "/^.+\\/+[a-zA-Z0-9_]+$/",
    "promptId": 16,
    "completionId": 15,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 29,
    "startColumn": 19,
    "endLine": 29,
    "endColumn": 27,
    "originalCode": "/^.+\\/$/",
    "replacement": "/^.+\\/+[a-zA-Z0-9_]+:\\/+[a-zA-Z0-9_]+$/",
    "promptId": 16,
    "completionId": 15,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "\"some other value\"",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.startsWith(\"foo\")",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 32,
    "startColumn": 37,
    "endLine": 32,
    "endColumn": 41,
    "originalCode": "spec",
    "replacement": "spec.endsWith(\"bar\")",
    "promptId": 18,
    "completionId": 17,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.length < 1 || !string.endsWith('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "string.length > 1 && string.startsWith('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 8,
    "endLine": 39,
    "endColumn": 49,
    "originalCode": "string.length > 1 && string.endsWith('/')",
    "replacement": "!string.contains('/')",
    "promptId": 19,
    "completionId": 18,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 45,
    "endLine": 39,
    "endColumn": 48,
    "originalCode": "'/'",
    "replacement": "'\\\\'",
    "promptId": 21,
    "completionId": 20,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 45,
    "endLine": 39,
    "endColumn": 48,
    "originalCode": "'/'",
    "replacement": "'\\\\/'",
    "promptId": 21,
    "completionId": 20,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 39,
    "startColumn": 45,
    "endLine": 39,
    "endColumn": 48,
    "originalCode": "'/'",
    "replacement": "'/_'",
    "promptId": 21,
    "completionId": 20,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "1",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "''",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 42,
    "startColumn": 31,
    "endLine": 42,
    "endColumn": 37,
    "originalCode": "string",
    "replacement": "NaN",
    "promptId": 23,
    "completionId": 22,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max > 1 || any",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "max === 1 || any",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 64,
    "startColumn": 8,
    "endLine": 64,
    "endColumn": 22,
    "originalCode": "max > 0 || any",
    "replacement": "any && max > 0",
    "promptId": 24,
    "completionId": 23,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "min > 0",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "!final && !opt && min > 0",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 65,
    "startColumn": 10,
    "endLine": 65,
    "endColumn": 33,
    "originalCode": "final && opt && min < 1",
    "replacement": "max < 0",
    "promptId": 25,
    "completionId": 24,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "min <= 0",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "min != 0",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 67,
    "startColumn": 17,
    "endLine": 67,
    "endColumn": 24,
    "originalCode": "min > 0",
    "replacement": "max < 0",
    "promptId": 26,
    "completionId": 25,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "false",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "string.length <= 1",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 89,
    "startColumn": 12,
    "endLine": 89,
    "endColumn": 16,
    "originalCode": "true",
    "replacement": "string.split('/').length > 1",
    "promptId": 28,
    "completionId": 27,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 47,
    "originalCode": "parts.reduce",
    "replacement": "parts.reduceRight",
    "promptId": 29,
    "completionId": 28,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 47,
    "originalCode": "parts.reduce",
    "replacement": "parts.concat",
    "promptId": 29,
    "completionId": 28,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => acc + seg",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 48,
    "endLine": 90,
    "endColumn": 71,
    "originalCode": "(acc, seg) => seg + acc",
    "replacement": "(acc, seg) => acc + '/' + seg",
    "promptId": 30,
    "completionId": 29,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'/$'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'#'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 73,
    "endLine": 90,
    "endColumn": 76,
    "originalCode": "'$'",
    "replacement": "'?'",
    "promptId": 31,
    "completionId": 30,
    "reason": "call/arg1"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 77,
    "originalCode": "parts.reduce((acc, seg) => seg + acc, '$')",
    "replacement": "parts.reduce((acc, seg) => seg + acc + \"_\")",
    "promptId": 32,
    "completionId": 31,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 77,
    "originalCode": "parts.reduce((acc, seg) => seg + acc, '$')",
    "replacement": "parts.reduce((acc, seg) => seg + acc + seg)",
    "promptId": 32,
    "completionId": 31,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 90,
    "startColumn": 35,
    "endLine": 90,
    "endColumn": 77,
    "originalCode": "parts.reduce((acc, seg) => seg + acc, '$')",
    "replacement": "parts.reduce((acc, seg) => 2 * seg + acc)",
    "promptId": 32,
    "completionId": 31,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split('_')",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split(/\\s+/)",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 21,
    "endLine": 92,
    "endColumn": 55,
    "originalCode": "spec.split('/').slice(1).reverse()",
    "replacement": "spec.split(/\\W+/)",
    "promptId": 34,
    "completionId": 33,
    "reason": "for-of/right"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.split('/').slice(2).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.split('/').slice(0, -1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 2,
    "endLine": 118,
    "endColumn": 3,
    "originalCode": "for (const part of spec.split('/').slice(1).reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "replacement": "for (const part of spec.join('/').split('/').reverse()) {\n    switch (part) {\n      case '+':\n        min++\n        max++\n        break\n      case '++':\n        max++\n        break\n      case '*':\n        min++\n        any = true\n        break\n      case '**':\n        any = true\n        break\n      default:\n        flatten()\n        opt = false\n        if (part.match(/:.+/) !== null) {\n          props.push(part.slice(1))\n          parts.push('/([^/]+)')\n        } else {\n          parts.push(`/${part.replace(/([.$])/g, '\\\\$1')}`)\n        }\n    }\n  }",
    "promptId": 35,
    "completionId": 34,
    "reason": "for-of/header"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "0",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "2",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 43,
    "endLine": 92,
    "endColumn": 44,
    "originalCode": "1",
    "replacement": "-1",
    "promptId": 39,
    "completionId": 38,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 32,
    "endLine": 92,
    "endColumn": 35,
    "originalCode": "'/'",
    "replacement": "'/'.match(/[a-zA-Z0-9_/:~.$+*-]+/) !== null",
    "promptId": 41,
    "completionId": 40,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 32,
    "endLine": 92,
    "endColumn": 35,
    "originalCode": "'/'",
    "replacement": "spec.length >= 2",
    "promptId": 41,
    "completionId": 40,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 92,
    "startColumn": 32,
    "endLine": 92,
    "endColumn": 35,
    "originalCode": "'/'",
    "replacement": "Math.floor(Math.random() * 2) === 0",
    "promptId": 41,
    "completionId": 40,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.length",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part.substring(1)",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 93,
    "startColumn": 12,
    "endLine": 93,
    "endColumn": 16,
    "originalCode": "part",
    "replacement": "part[0]",
    "promptId": 42,
    "completionId": 41,
    "reason": "switch/discriminant"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "part.match(/[^:]+/) !== null",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "!part.match(/:.+/)",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 38,
    "originalCode": "part.match(/:.+/) !== null",
    "replacement": "part.match(/:.*$/) !== null",
    "promptId": 45,
    "completionId": 44,
    "reason": "if/test"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 22,
    "originalCode": "part.match",
    "replacement": "part.split",
    "promptId": 46,
    "completionId": 45,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 22,
    "originalCode": "part.match",
    "replacement": "part.indexOf",
    "promptId": 46,
    "completionId": 45,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 12,
    "endLine": 111,
    "endColumn": 22,
    "originalCode": "part.match",
    "replacement": "part.includes",
    "promptId": 46,
    "completionId": 45,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 23,
    "endLine": 111,
    "endColumn": 28,
    "originalCode": "/:.+/",
    "replacement": "/[a-zA-Z0-9_-]+/",
    "promptId": 47,
    "completionId": 46,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 23,
    "endLine": 111,
    "endColumn": 28,
    "originalCode": "/:.+/",
    "replacement": "/[^/]+/",
    "promptId": 47,
    "completionId": 46,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 111,
    "startColumn": 23,
    "endLine": 111,
    "endColumn": 28,
    "originalCode": "/:.+/",
    "replacement": "/[^/]+$/",
    "promptId": 47,
    "completionId": 46,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.slice(2)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.substring(1)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 21,
    "endLine": 112,
    "endColumn": 34,
    "originalCode": "part.slice(1)",
    "replacement": "part.charAt(0) + part.slice(1)",
    "promptId": 49,
    "completionId": 48,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 32,
    "endLine": 112,
    "endColumn": 33,
    "originalCode": "1",
    "replacement": "part.slice(-1)",
    "promptId": 51,
    "completionId": 50,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 112,
    "startColumn": 32,
    "endLine": 112,
    "endColumn": 33,
    "originalCode": "1",
    "replacement": "part.slice(part.length - 1)",
    "promptId": 51,
    "completionId": 50,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 10,
    "endLine": 113,
    "endColumn": 20,
    "originalCode": "parts.push",
    "replacement": "parts.pop",
    "promptId": 52,
    "completionId": 51,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/(.+)'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/[^/]+?'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 113,
    "startColumn": 21,
    "endLine": 113,
    "endColumn": 31,
    "originalCode": "'/([^/]+)'",
    "replacement": "'/[^/]+'",
    "promptId": 53,
    "completionId": 52,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 10,
    "endLine": 115,
    "endColumn": 20,
    "originalCode": "parts.push",
    "replacement": "parts.pop",
    "promptId": 54,
    "completionId": 53,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 10,
    "endLine": 115,
    "endColumn": 20,
    "originalCode": "parts.push",
    "replacement": "parts.unshift",
    "promptId": 54,
    "completionId": 53,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 21,
    "endLine": 115,
    "endColumn": 58,
    "originalCode": "`/${part.replace(/([.$])/g, '\\\\$1')}`",
    "replacement": "`/${part.replace(/([.$])/g, '[$1]')}`",
    "promptId": 55,
    "completionId": 54,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 21,
    "endLine": 115,
    "endColumn": 58,
    "originalCode": "`/${part.replace(/([.$])/g, '\\\\$1')}`",
    "replacement": "`/${part.substring(1)}`",
    "promptId": 55,
    "completionId": 54,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 21,
    "endLine": 115,
    "endColumn": 58,
    "originalCode": "`/${part.replace(/([.$])/g, '\\\\$1')}`",
    "replacement": "`/${part.split('').reverse().join('')}`",
    "promptId": 55,
    "completionId": 54,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 25,
    "endLine": 115,
    "endColumn": 37,
    "originalCode": "part.replace",
    "replacement": "part[0]",
    "promptId": 56,
    "completionId": 55,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 38,
    "endLine": 115,
    "endColumn": 47,
    "originalCode": "/([.$])/g",
    "replacement": "/(\\\\.|$)/g",
    "promptId": 57,
    "completionId": 56,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 38,
    "endLine": 115,
    "endColumn": 47,
    "originalCode": "/([.$])/g",
    "replacement": "/([^$])/g",
    "promptId": 57,
    "completionId": 56,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 38,
    "endLine": 115,
    "endColumn": 47,
    "originalCode": "/([.$])/g",
    "replacement": "/([$])/g",
    "promptId": 57,
    "completionId": 56,
    "reason": "call/arg0"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 25,
    "endLine": 115,
    "endColumn": 56,
    "originalCode": "part.replace(/([.$])/g, '\\\\$1')",
    "replacement": "part.replace(/([.$])/g, '')",
    "promptId": 59,
    "completionId": 58,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 25,
    "endLine": 115,
    "endColumn": 56,
    "originalCode": "part.replace(/([.$])/g, '\\\\$1')",
    "replacement": "part.replace(/([.$])/g, '<>')",
    "promptId": 59,
    "completionId": 58,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 115,
    "startColumn": 25,
    "endLine": 115,
    "endColumn": 56,
    "originalCode": "part.replace(/([.$])/g, '\\\\$1')",
    "replacement": "part.replace(/([.$])/g, '.*')",
    "promptId": 59,
    "completionId": 58,
    "reason": "call/allArgs"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 121,
    "startColumn": 11,
    "endLine": 121,
    "endColumn": 24,
    "originalCode": "props.reverse",
    "replacement": "props",
    "promptId": 62,
    "completionId": 61,
    "reason": "call/callee"
  },
  {
    "file": "src/matcher.ts",
    "startLine": 121,
    "startColumn": 11,
    "endLine": 121,
    "endColumn": 24,
    "originalCode": "props.reverse",
    "replacement": "props.length",
    "promptId": 62,
    "completionId": 61,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 18,
    "startColumn": 4,
    "endLine": 18,
    "endColumn": 19,
    "originalCode": "this.rules.push",
    "replacement": "this.rules = rules",
    "promptId": 64,
    "completionId": 63,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 32,
    "startColumn": 23,
    "endLine": 32,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules.length",
    "promptId": 67,
    "completionId": 66,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 32,
    "startColumn": 23,
    "endLine": 32,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "this.rules[0]",
    "promptId": 67,
    "completionId": 66,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 28,
    "originalCode": "rule.query",
    "replacement": "!rule.query",
    "promptId": 69,
    "completionId": 68,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb + 'xyz'",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.toUpperCase()",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 35,
    "endLine": 33,
    "endColumn": 39,
    "originalCode": "verb",
    "replacement": "verb.length",
    "promptId": 71,
    "completionId": 70,
    "reason": "call/arg1"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "undefined",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "null",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 41,
    "endLine": 33,
    "endColumn": 44,
    "originalCode": "ctx",
    "replacement": "NaN",
    "promptId": 72,
    "completionId": 71,
    "reason": "call/arg2"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path + verb, ctx)",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(path, verb ^ ctx)",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 33,
    "startColumn": 18,
    "endLine": 33,
    "endColumn": 45,
    "originalCode": "rule.query(path, verb, ctx)",
    "replacement": "rule.query(pattern.match(path), ctx)",
    "promptId": 73,
    "completionId": 72,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "res === true",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "!res",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 34,
    "startColumn": 10,
    "endLine": 34,
    "endColumn": 23,
    "originalCode": "res === false",
    "replacement": "!!res",
    "promptId": 74,
    "completionId": 73,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "res === 1",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "this.rules.includes(res)",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 37,
    "startColumn": 10,
    "endLine": 37,
    "endColumn": 22,
    "originalCode": "res === true",
    "replacement": "res.name == 'allowed'",
    "promptId": 75,
    "completionId": 74,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "    this.rules.flat()",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "    [...this.rules.children]",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 48,
    "startColumn": 23,
    "endLine": 48,
    "endColumn": 33,
    "originalCode": "this.rules",
    "replacement": "    this.rules.push(null)",
    "promptId": 77,
    "completionId": 76,
    "reason": "for-of/right"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.matches(path, ctx) !== false",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "path.startsWith(rule.path)",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 33,
    "originalCode": "rule.matches(path, ctx)",
    "replacement": "rule.query(path, verb, ctx) !== null",
    "promptId": 79,
    "completionId": 78,
    "reason": "if/test"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 22,
    "originalCode": "rule.matches",
    "replacement": "rule.doesNotMatch",
    "promptId": 80,
    "completionId": 79,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 10,
    "endLine": 49,
    "endColumn": 22,
    "originalCode": "rule.matches",
    "replacement": "!rule.matches",
    "promptId": 80,
    "completionId": 79,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.toLowerCase()",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path.slice(1)",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 49,
    "startColumn": 23,
    "endLine": 49,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path + 'foo'",
    "promptId": 81,
    "completionId": 80,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 28,
    "endLine": 61,
    "endColumn": 42,
    "originalCode": "this.rules.map",
    "replacement": "this.rules.concat",
    "promptId": 84,
    "completionId": 83,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 28,
    "endLine": 61,
    "endColumn": 42,
    "originalCode": "this.rules.map",
    "replacement": "this.rules.filter",
    "promptId": 84,
    "completionId": 83,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 28,
    "endLine": 61,
    "endColumn": 42,
    "originalCode": "this.rules.map",
    "replacement": "this.rules.reduce",
    "promptId": 84,
    "completionId": 83,
    "reason": "call/callee"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "(rule) => null",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 43,
    "endLine": 61,
    "endColumn": 65,
    "originalCode": "(rule) => rule.clone()",
    "replacement": "(rule) => rule.copy()",
    "promptId": 85,
    "completionId": 84,
    "reason": "call/arg0"
  },
  {
    "file": "src/policy.ts",
    "startLine": 61,
    "startColumn": 53,
    "endLine": 61,
    "endColumn": 63,
    "originalCode": "rule.clone",
    "replacement": "!rule.clone",
    "promptId": 86,
    "completionId": 85,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 23,
    "endLine": 7,
    "endColumn": 56,
    "originalCode": "(policy) => [policy.name, policy]",
    "replacement": "(policy) => [policy.name, null]",
    "promptId": 89,
    "completionId": 88,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 23,
    "endLine": 7,
    "endColumn": 56,
    "originalCode": "(policy) => [policy.name, policy]",
    "replacement": "(policy) => [policy.name, undefined]",
    "promptId": 89,
    "completionId": 88,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 7,
    "startColumn": 23,
    "endLine": 7,
    "endColumn": 56,
    "originalCode": "(policy) => [policy.name, policy]",
    "replacement": "(policy) => [policy.name, {}]",
    "promptId": 89,
    "completionId": 88,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 4,
    "endLine": 14,
    "endColumn": 5,
    "originalCode": "for (const policy of policies) {\n      this.set(policy.name, policy)\n    }",
    "replacement": "for (const invalidPolicy of policies) {\n      this.set(policy.name, policy)\n    }",
    "promptId": 90,
    "completionId": 89,
    "reason": "for-of/left"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 4,
    "endLine": 14,
    "endColumn": 5,
    "originalCode": "for (const policy of policies) {\n      this.set(policy.name, policy)\n    }",
    "replacement": "for (const policy_ of policies) {\n      this.set(policy.name, policy)\n    }",
    "promptId": 90,
    "completionId": 89,
    "reason": "for-of/left"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.reverse()",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.pop()",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 25,
    "endLine": 12,
    "endColumn": 33,
    "originalCode": "policies",
    "replacement": "policies.shift()",
    "promptId": 91,
    "completionId": 90,
    "reason": "for-of/right"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 12,
    "startColumn": 4,
    "endLine": 14,
    "endColumn": 5,
    "originalCode": "for (const policy of policies) {\n      this.set(policy.name, policy)\n    }",
    "replacement": "for (const policy in policies) {\n      this.set(policy.name, policy)\n    }",
    "promptId": 92,
    "completionId": 91,
    "reason": "for-of/header"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.get('name')",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy['name']",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 15,
    "endLine": 13,
    "endColumn": 26,
    "originalCode": "policy.name",
    "replacement": "policy.set('name', 'policy2')",
    "promptId": 94,
    "completionId": 93,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "policy.name",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 28,
    "endLine": 13,
    "endColumn": 34,
    "originalCode": "policy",
    "replacement": "policy != policy",
    "promptId": 95,
    "completionId": 94,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set([ policy.name, policy ])",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 13,
    "startColumn": 6,
    "endLine": 13,
    "endColumn": 35,
    "originalCode": "this.set(policy.name, policy)",
    "replacement": "this.set([ policy.name ])",
    "promptId": 96,
    "completionId": 95,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "\"Buggy Name\"",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "name + \"Buggy\"",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 28,
    "startColumn": 28,
    "endLine": 28,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "undefined",
    "promptId": 98,
    "completionId": 97,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 20,
    "originalCode": "policy.query",
    "replacement": "policy.eval",
    "promptId": 99,
    "completionId": 98,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path + ''",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.length",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 21,
    "endLine": 30,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toUpperCase()",
    "promptId": 100,
    "completionId": 99,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "'unknown'",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 27,
    "endLine": 30,
    "endColumn": 31,
    "originalCode": "verb",
    "replacement": "null",
    "promptId": 101,
    "completionId": 100,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "link.parentNode",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "link.parentElement",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 33,
    "endLine": 30,
    "endColumn": 36,
    "originalCode": "ctx",
    "replacement": "link.parentNode.nextSibling",
    "promptId": 102,
    "completionId": 101,
    "reason": "call/arg2"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query(path || verb == ctx)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query(verb == ctx && path)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 30,
    "startColumn": 8,
    "endLine": 30,
    "endColumn": 37,
    "originalCode": "policy.query(path, verb, ctx)",
    "replacement": "policy.query( ctx ? path != verb : path)",
    "promptId": 103,
    "completionId": 102,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 19,
    "endLine": 39,
    "endColumn": 27,
    "originalCode": "this.get",
    "replacement": "this.set",
    "promptId": 104,
    "completionId": 103,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 19,
    "endLine": 39,
    "endColumn": 27,
    "originalCode": "this.get",
    "replacement": "this.has",
    "promptId": 104,
    "completionId": 103,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 19,
    "endLine": 39,
    "endColumn": 27,
    "originalCode": "this.get",
    "replacement": "this['get']",
    "promptId": 104,
    "completionId": 103,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "\"undefined\"",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "name + \"x\"",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 39,
    "startColumn": 28,
    "endLine": 39,
    "endColumn": 32,
    "originalCode": "name",
    "replacement": "Math.random()",
    "promptId": 105,
    "completionId": 104,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 22,
    "originalCode": "policy.matches",
    "replacement": "this.policy.matches",
    "promptId": 106,
    "completionId": 105,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 22,
    "originalCode": "policy.matches",
    "replacement": "null",
    "promptId": 106,
    "completionId": 105,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 22,
    "originalCode": "policy.matches",
    "replacement": "policy.name",
    "promptId": 106,
    "completionId": 105,
    "reason": "call/callee"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path + ''",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path * ''",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 23,
    "endLine": 41,
    "endColumn": 27,
    "originalCode": "path",
    "replacement": "path - ''",
    "promptId": 107,
    "completionId": 106,
    "reason": "call/arg0"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx !== undefined",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "typeof ctx !== 'undefined'",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 29,
    "endLine": 41,
    "endColumn": 32,
    "originalCode": "ctx",
    "replacement": "ctx === null",
    "promptId": 108,
    "completionId": 107,
    "reason": "call/arg1"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path + ctx)",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(ctx.path)",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/policymap.ts",
    "startLine": 41,
    "startColumn": 8,
    "endLine": 41,
    "endColumn": 33,
    "originalCode": "policy.matches(path, ctx)",
    "replacement": "policy.matches(path[ctx])",
    "promptId": 109,
    "completionId": 108,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "this.verbs.keys()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "this.verbs.values()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 25,
    "startColumn": 23,
    "endLine": 25,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "this.verbs.entries()",
    "promptId": 111,
    "completionId": 110,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "undefined",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.prop",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 23,
    "endLine": 35,
    "endColumn": 28,
    "originalCode": "verbs",
    "replacement": "verbs.length",
    "promptId": 115,
    "completionId": 114,
    "reason": "for-of/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb in verbs) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 35,
    "startColumn": 4,
    "endLine": 37,
    "endColumn": 5,
    "originalCode": "for (const verb of verbs) {\n      this.verbs[verb] = false\n    }",
    "replacement": "for (const verb of Object.keys(verbs)) {\n      this.verbs[verb] = false\n    }",
    "promptId": 116,
    "completionId": 115,
    "reason": "for-of/header"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "!this.matches(path, ctx) || !(verb in this.verbs)",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "!this.verbs[verb]",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 53,
    "originalCode": "this.matches(path, ctx) && verb in this.verbs",
    "replacement": "this.verbs[verb] === false",
    "promptId": 117,
    "completionId": 116,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 20,
    "originalCode": "this.matches",
    "replacement": "verb in this.regex",
    "promptId": 118,
    "completionId": 117,
    "reason": "call/callee"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path.toUpperCase()",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path + 'foo'",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 21,
    "endLine": 50,
    "endColumn": 25,
    "originalCode": "path",
    "replacement": "path[1]",
    "promptId": 119,
    "completionId": 118,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "ctx.non_existent_property",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 27,
    "endLine": 50,
    "endColumn": 30,
    "originalCode": "ctx",
    "replacement": "'foo'",
    "promptId": 120,
    "completionId": 119,
    "reason": "call/arg1"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(!path, ctx)",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path || ctx)",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 50,
    "startColumn": 8,
    "endLine": 50,
    "endColumn": 31,
    "originalCode": "this.matches(path, ctx)",
    "replacement": "this.matches(path + ctx)",
    "promptId": 121,
    "completionId": 120,
    "reason": "call/allArgs"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 18,
    "endLine": 60,
    "endColumn": 28,
    "originalCode": "path.match",
    "replacement": "path.search",
    "promptId": 122,
    "completionId": 121,
    "reason": "call/callee"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": "this.regex = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 60,
    "startColumn": 29,
    "endLine": 60,
    "endColumn": 39,
    "originalCode": "this.regex",
    "replacement": " this.regex = new RegExp(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]$/g)",
    "promptId": 123,
    "completionId": 122,
    "reason": "call/arg0"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match !== null",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match.length === 0",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 61,
    "startColumn": 8,
    "endLine": 61,
    "endColumn": 22,
    "originalCode": "match === null",
    "replacement": "match[0] === undefined",
    "promptId": 124,
    "completionId": 123,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count < 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count === 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 65,
    "startColumn": 8,
    "endLine": 65,
    "endColumn": 17,
    "originalCode": "count > 0",
    "replacement": "count <= 0",
    "promptId": 125,
    "completionId": 124,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "ctx => undefined",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "ctx !== undefined",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 66,
    "startColumn": 10,
    "endLine": 66,
    "endColumn": 27,
    "originalCode": "ctx === undefined",
    "replacement": "!ctx",
    "promptId": 126,
    "completionId": 125,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index <= count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index > count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 26,
    "endLine": 69,
    "endColumn": 39,
    "originalCode": "index < count",
    "replacement": "index + 1 <= count",
    "promptId": 128,
    "completionId": 127,
    "reason": "for/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index--",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index += 2",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 69,
    "startColumn": 41,
    "endLine": 69,
    "endColumn": 48,
    "originalCode": "index++",
    "replacement": "index = -1",
    "promptId": 129,
    "completionId": 128,
    "reason": "for/update"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop !== undefined || match[index + 1] === prop",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 71,
    "startColumn": 12,
    "endLine": 71,
    "endColumn": 59,
    "originalCode": "prop === undefined || match[index + 1] !== prop",
    "replacement": "prop !== undefined && match[index + 1] === prop",
    "promptId": 131,
    "completionId": 130,
    "reason": "if/test"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 4,
    "endLine": 85,
    "endColumn": 5,
    "originalCode": "for (const verb in this.verbs) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "replacement": "for (const associatedVerbs in this.verbs) {\n      rule.verbs[verb] = this.verbs[verb]\n    }",
    "promptId": 132,
    "completionId": 131,
    "reason": "for-in/left"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.rules",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs.keys()",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  },
  {
    "file": "src/rule.ts",
    "startLine": 83,
    "startColumn": 23,
    "endLine": 83,
    "endColumn": 33,
    "originalCode": "this.verbs",
    "replacement": "this.verbs.values()",
    "promptId": 133,
    "completionId": 132,
    "reason": "for-in/right"
  }
]