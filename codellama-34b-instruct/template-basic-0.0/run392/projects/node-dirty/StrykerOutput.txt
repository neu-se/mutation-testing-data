*** using precomputed mutations ***
[32m02:06:57 (2555) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m02:06:57 (2555) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m02:06:57 (2555) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m02:06:57 (2555) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m02:06:57 (2555) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m02:06:58 (2555) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 43 mutants from MUTATION_TESTING/template-basic_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with this._data.has(key)
Mutant 1 in dirty.js: this._data.set(key, val) replaced with this._data.set(val)
Mutant 2 in dirty.js: val replaced with JSON.stringify(val)
Mutant 3 in dirty.js: this.path replaced with this._queue.size > 0
Mutant 4 in dirty.js: cb replaced with cbs.length === 0
Mutant 5 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(cbs)
Mutant 6 in dirty.js: cb replaced with this._data.has(key)
Mutant 7 in dirty.js: 'drain' replaced with 'set'
Mutant 8 in dirty.js: undefined replaced with null
Mutant 9 in dirty.js: cb replaced with () => {
  if (cb) cb();
  this.emit('drain');
}
Mutant 10 in dirty.js: this._data replaced with this._data.entries()
Mutant 11 in dirty.js: fn(key, val) replaced with fn(key)
Mutant 12 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key)
Mutant 13 in dirty.js: updater(this.get(key)) replaced with this._data.get(key)
Mutant 14 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain')
Mutant 15 in dirty.js: this._readStream replaced with this._readStream.destroyed
Mutant 16 in dirty.js: this._writeStream replaced with this._writeStream.end
Mutant 17 in dirty.js: !this.path replaced with this._readStream.readable
Mutant 18 in dirty.js: this.emit('load', 0) replaced with this.emit('load')
Mutant 19 in dirty.js: this.emit('load', 0) replaced with this.emit('load')
Mutant 20 in dirty.js: this.emit('error', err) replaced with this.emit('error')
Mutant 21 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with buffer.length === 0
Mutant 22 in dirty.js: !rowStr replaced with row.key !== undefined
Mutant 23 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error')
Mutant 24 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error(`Could not load corrupted row: ${rowStr}`)
Mutant 25 in dirty.js: !('key' in row) replaced with row.val !== undefined
Mutant 26 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error')
Mutant 27 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Invalid row: ${rowStr}`)
Mutant 28 in dirty.js: row.key replaced with key
Mutant 29 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key)
Mutant 30 in dirty.js: buffer.length replaced with buffer.length > 0
Mutant 31 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error')
Mutant 32 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Could not load corrupted row: ${buffer.length}`)
Mutant 33 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load')
Mutant 34 in dirty.js: 'read_close' replaced with 'close'
Mutant 35 in dirty.js: this._inFlightWrites <= 0 replaced with this._queue.size === 0
Mutant 36 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size > 0
Mutant 37 in dirty.js: this._queue replaced with this._queue.entries()
Mutant 38 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key: key,
  val: this._data.get(key)
}
Mutant 39 in dirty.js: !cbs.length && err != null replaced with err.code === 'ENOENT'
Mutant 40 in dirty.js: this.emit('error', err) replaced with this.emit('error')
Mutant 41 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites <= 0
Mutant 42 in dirty.js: this._waitForDrain replaced with this._queue.size === 0
[32m02:06:58 (2555) INFO Instrumenter[39m Instrumented 2 source file(s) with 43 mutant(s)
[32m02:06:58 (2555) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m02:06:59 (2555) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m02:06:59 (2555) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m02:06:59 (2555) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 492 ms, overhead 1 ms).
Mutation testing 37% (elapsed: <1m, remaining: <1m) 16/43 tested (1 survived, 0 timed out)
Mutation testing 83% (elapsed: <1m, remaining: <1m) 36/43 tested (13 survived, 0 timed out)
Mutation testing 95% (elapsed: <1m, remaining: <1m) 41/43 tested (16 survived, 1 timed out)

All tests
  âœ“ All tests (killed 24)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:69:30
-       for (const [key, val] of this._data) {
+       for (const [key, val] of this._data.entries()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.end) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (buffer.length === 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Invalid row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer.length > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Could not load corrupted row: ${buffer.length}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._queue.size === 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:30
-       for (const [key, cbs] of this._queue) {
+       for (const [key, cbs] of this._queue.entries()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:186:38
-         const data = `${JSON.stringify({key, val: this._data.get(key)})}\n`;
+         const data = `${JSON.stringify({
+     key: key,
+     val: this._data.get(key)
+   })}\n`;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._queue.size === 0) break;

Ran 0.95 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   60.47 |       24 |         2 |         17 |        0 |        0 |
 dirty.js |   60.47 |       24 |         2 |         17 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m02:07:33 (2555) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m02:07:33 (2555) INFO MutationTestExecutor[39m Done in 36 seconds.

real	0m37.305s
user	0m25.104s
sys	0m4.136s
