
> memfs@4.15.1 test
> jest --maxWorkers 2

FAIL src/fsa-to-node/__tests__/FsaNodeFs.test.ts (118.359 s)
  ● FsaNodeFs › .truncate() › can truncate a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      293 |
      294 |   describe('.truncate()', () => {
    > 295 |     test('can truncate a file', async () => {
          |     ^
      296 |       const { fs, mfs } = setup({ folder: { file: 'test' }, 'empty-folder': null });
      297 |       const res = await new Promise<unknown>((resolve, reject) => {
      298 |         fs.truncate('/folder/file', 2, (err, res) => (err ? reject(err) : resolve(res)));

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:295:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:294:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .ftruncate() › can truncate a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      304 |
      305 |   describe('.ftruncate()', () => {
    > 306 |     test('can truncate a file', async () => {
          |     ^
      307 |       const { fs, mfs } = setup({ folder: { file: 'test' }, 'empty-folder': null });
      308 |       const handle = await fs.promises.open('/folder/file');
      309 |       const res = await new Promise<unknown>((resolve, reject) => {

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:306:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:305:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .appendFile() › can create a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      341 |
      342 |   describe('.appendFile()', () => {
    > 343 |     test('can create a file', async () => {
          |     ^
      344 |       const { fs, mfs } = setup({});
      345 |       await fs.promises.appendFile('/test.txt', 'a');
      346 |       expect(mfs.readFileSync('/mountpoint/test.txt', 'utf8')).toBe('a');

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:343:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:342:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .appendFile() › can append to a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      347 |     });
      348 |
    > 349 |     test('can append to a file', async () => {
          |     ^
      350 |       const { fs, mfs } = setup({});
      351 |       await fs.promises.appendFile('/test.txt', 'a');
      352 |       await fs.promises.appendFile('/test.txt', 'b');

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:349:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:342:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .appendFile() › can append to a file - 2

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      354 |     });
      355 |
    > 356 |     test('can append to a file - 2', async () => {
          |     ^
      357 |       const { fs, mfs } = setup({ file: '123' });
      358 |       await fs.promises.appendFile('file', 'x');
      359 |       expect(mfs.readFileSync('/mountpoint/file', 'utf8')).toBe('123x');

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:356:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:342:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .appendFile() › can append to a file - 2

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      360 |     });
      361 |
    > 362 |     test('can append to a file - 2', async () => {
          |     ^
      363 |       const { fs, mfs } = setup({ file: '123' });
      364 |       await fs.promises.writeFile('cool.txt', 'worlds');
      365 |       await fs.promises.appendFile('cool.txt', '!');

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:362:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:342:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .write() › can write to a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      369 |
      370 |   describe('.write()', () => {
    > 371 |     test('can write to a file', async () => {
          |     ^
      372 |       const { fs, mfs } = setup({});
      373 |       const fd = await new Promise<number>((resolve, reject) =>
      374 |         fs.open('/test.txt', 'w', (err, fd) => {

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:371:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:370:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .write() › can write to a file twice sequentially

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      388 |     });
      389 |
    > 390 |     test('can write to a file twice sequentially', async () => {
          |     ^
      391 |       const { fs, mfs } = setup({});
      392 |       const fd = await new Promise<number>((resolve, reject) =>
      393 |         fs.open('/test.txt', 'w', (err, fd) => {

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:390:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:370:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .writev() › can write to a file two buffers

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      417 |
      418 |   describe('.writev()', () => {
    > 419 |     test('can write to a file two buffers', async () => {
          |     ^
      420 |       const { fs, mfs } = setup({});
      421 |       const fd = await new Promise<number>((resolve, reject) =>
      422 |         fs.open('/test.txt', 'w', (err, fd) => {

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:419:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:418:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .access() › files › succeeds on file "write" check, on writable file system

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      468 |       });
      469 |
    > 470 |       test('succeeds on file "write" check, on writable file system', async () => {
          |       ^
      471 |         const { fs, mfs } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      472 |         await fs.promises.access('/folder/file', AMODE.W_OK);
      473 |       });

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:470:7
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:459:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:458:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .rename() › can rename a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      533 |
      534 |   describe('.rename()', () => {
    > 535 |     test('can rename a file', async () => {
          |     ^
      536 |       const { fs, mfs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      537 |       await fs.promises.rename('/folder/file', '/folder/file2');
      538 |       expect(vol.toJSON()).toStrictEqual({

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:535:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:534:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .copyFile() › can copy a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      649 |
      650 |   describe('.copyFile()', () => {
    > 651 |     test('can copy a file', async () => {
          |     ^
      652 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      653 |       await fs.promises.copyFile('/folder/file', '/folder/file2');
      654 |       expect(vol.toJSON()).toStrictEqual({

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:651:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:650:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .writeFile() › can create a new file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      662 |
      663 |   describe('.writeFile()', () => {
    > 664 |     test('can create a new file', async () => {
          |     ^
      665 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      666 |       const res = await new Promise<void>((resolve, reject) => {
      667 |         fs.writeFile('/folder/foo', 'bar', error => {

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:664:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:663:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createWriteStream() › can use stream to write to a new file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      726 |
      727 |   describe('.createWriteStream()', () => {
    > 728 |     test('can use stream to write to a new file', async () => {
          |     ^
      729 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      730 |       const stream = fs.createWriteStream('/folder/file2');
      731 |       stream.write(Buffer.from('A'));

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:728:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:727:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createWriteStream() › can use stream to write to a new file using strings

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      743 |     });
      744 |
    > 745 |     test('can use stream to write to a new file using strings', async () => {
          |     ^
      746 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      747 |       const stream = fs.createWriteStream('/folder/file2');
      748 |       stream.write('A');

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:745:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:727:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createWriteStream() › can use stream to overwrite existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      760 |     });
      761 |
    > 762 |     test('can use stream to overwrite existing file', async () => {
          |     ^
      763 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      764 |       const stream = fs.createWriteStream('/folder/file');
      765 |       stream.write(Buffer.from('A'));

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:762:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:727:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createWriteStream() › can write by file descriptor

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      775 |     });
      776 |
    > 777 |     test('can write by file descriptor', async () => {
          |     ^
      778 |       const { fs, mfs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      779 |       const handle = await fs.promises.open('/folder/file', 'a');
      780 |       const stream = fs.createWriteStream('', { fd: handle.fd, start: 1, flags: 'a' });

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:777:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:727:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createWriteStream() › closes file once stream ends

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      790 |     });
      791 |
    > 792 |     test('closes file once stream ends', async () => {
          |     ^
      793 |       const { fs } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      794 |       const handle = await fs.promises.open('/folder/file', 'a');
      795 |       const stream = fs.createWriteStream('', { fd: handle.fd, start: 1, flags: 'a' });

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:792:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:727:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createWriteStream() › can use stream to add to existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      830 |     });
      831 |
    > 832 |     test('can use stream to add to existing file', async () => {
          |     ^
      833 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      834 |       const stream = fs.createWriteStream('/folder/file', { flags: 'a' });
      835 |       stream.write(Buffer.from('A'));

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:832:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:727:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createWriteStream() › can use stream to add to existing file at specified offset

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      845 |     });
      846 |
    > 847 |     test('can use stream to add to existing file at specified offset', async () => {
          |     ^
      848 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      849 |       const stream = fs.createWriteStream('/folder/file', { flags: 'a', start: 1 });
      850 |       stream.write(Buffer.from('A'));

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:847:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:727:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createReadStream() › can pipe fs.ReadStream to fs.WriteStream

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      884 |
      885 |   describe('.createReadStream()', () => {
    > 886 |     test('can pipe fs.ReadStream to fs.WriteStream', async () => {
          |     ^
      887 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      888 |       const readStream = fs.createReadStream('/folder/file');
      889 |       const writeStream = fs.createWriteStream('/folder/file2');

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:886:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:885:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createReadStream() › can write to already open file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      919 |     });
      920 |
    > 921 |     test('can write to already open file', async () => {
          |     ^
      922 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      923 |       const handle = await fs.promises.open('/folder/file');
      924 |       const readStream = fs.createReadStream('xyz', { fd: handle.fd });

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:921:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:885:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

  ● FsaNodeFs › .createReadStream() › can read a specified slice of a file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      934 |     });
      935 |
    > 936 |     test('can read a specified slice of a file', async () => {
          |     ^
      937 |       const { fs, vol } = setup({ folder: { file: 'test' }, 'empty-folder': null, 'f.html': 'test' });
      938 |       const readStream = fs.createReadStream('/folder/file', { start: 1, end: 2 });
      939 |       const writeStream = fs.createWriteStream('/folder/file2');

      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:936:5
      at src/fsa-to-node/__tests__/FsaNodeFs.test.ts:885:3
      at Object.<anonymous> (src/fsa-to-node/__tests__/FsaNodeFs.test.ts:26:13)

FAIL src/__tests__/promises.test.ts (157.478 s)
  ● Promises API › FileHandle › fd › FileHandle should have a fd property

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      11 |     });
      12 |     describe('fd', () => {
    > 13 |       it('FileHandle should have a fd property', async () => {
         |       ^
      14 |         const vol = new Volume();
      15 |         const { promises } = vol;
      16 |         vol.fromJSON({

      at src/__tests__/promises.test.ts:13:7
      at src/__tests__/promises.test.ts:12:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › appendFile(data[, options]) › Append data to an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      28 |         '/foo': 'bar',
      29 |       });
    > 30 |       it('Append data to an existing file', async () => {
         |       ^
      31 |         const fileHandle = await promises.open('/foo', 'a');
      32 |         await fileHandle.appendFile('baz');
      33 |         expect(vol.readFileSync('/foo').toString()).toEqual('barbaz');

      at src/__tests__/promises.test.ts:30:7
      at src/__tests__/promises.test.ts:24:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › appendFile(data[, options]) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      34 |         await fileHandle.close();
      35 |       });
    > 36 |       it('Reject when the file handle was closed', async () => {
         |       ^
      37 |         const fileHandle = await promises.open('/foo', 'a');
      38 |         await fileHandle.close();
      39 |         return expect(fileHandle.appendFile('/foo', 'baz')).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:36:7
      at src/__tests__/promises.test.ts:24:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › chmod(mode) › Change mode of existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      48 |         });
      49 |       });
    > 50 |       it('Change mode of existing file', async () => {
         |       ^
      51 |         const { promises } = vol;
      52 |         const fileHandle = await promises.open('/foo', 'a');
      53 |         await fileHandle.chmod(0o444);

      at src/__tests__/promises.test.ts:50:7
      at src/__tests__/promises.test.ts:42:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › chmod(mode) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      55 |         await fileHandle.close();
      56 |       });
    > 57 |       it('Reject when the file handle was closed', async () => {
         |       ^
      58 |         const { promises } = vol;
      59 |         const fileHandle = await promises.open('/foo', 'a');
      60 |         await fileHandle.close();

      at src/__tests__/promises.test.ts:57:7
      at src/__tests__/promises.test.ts:42:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › chown(uid, gid) › Change uid and gid of existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      69 |       });
      70 |       const { uid, gid } = vol.statSync('/foo');
    > 71 |       it('Change uid and gid of existing file', async () => {
         |       ^
      72 |         const fileHandle = await promises.open('/foo', 'a');
      73 |         await fileHandle.chown(uid + 1, gid + 1);
      74 |         const stats = vol.statSync('/foo');

      at src/__tests__/promises.test.ts:71:7
      at src/__tests__/promises.test.ts:64:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › chown(uid, gid) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      77 |         await fileHandle.close();
      78 |       });
    > 79 |       it('Reject when the file handle was closed', async () => {
         |       ^
      80 |         const fileHandle = await promises.open('/foo', 'a');
      81 |         await fileHandle.close();
      82 |         return expect(fileHandle.chown(uid + 2, gid + 2)).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:79:7
      at src/__tests__/promises.test.ts:64:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › supports createWriteStream()

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      107 |         });
      108 |     });
    > 109 |     it('supports createWriteStream()', async () => {
          |     ^
      110 |       const vol = new Volume();
      111 |       const fh = await vol.promises.open('/test.txt', 'wx', 0o600);
      112 |       const writeStream = fh.createWriteStream({});

      at src/__tests__/promises.test.ts:109:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › datasync() › Synchronize data with an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      123 |         '/foo': 'bar',
      124 |       });
    > 125 |       it('Synchronize data with an existing file', async () => {
          |       ^
      126 |         const fileHandle = await promises.open('/foo', 'r+');
      127 |         await fileHandle.datasync();
      128 |         expect(vol.readFileSync('/foo').toString()).toEqual('bar');

      at src/__tests__/promises.test.ts:125:7
      at src/__tests__/promises.test.ts:119:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › datasync() › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      129 |         await fileHandle.close();
      130 |       });
    > 131 |       it('Reject when the file handle was closed', async () => {
          |       ^
      132 |         const fileHandle = await promises.open('/foo', 'r+');
      133 |         await fileHandle.close();
      134 |         return expect(fileHandle.datasync()).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:131:7
      at src/__tests__/promises.test.ts:119:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › read(buffer, offset, length, position) › Read data from an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      141 |         '/foo': 'bar',
      142 |       });
    > 143 |       it('Read data from an existing file', async () => {
          |       ^
      144 |         const fileHandle = await promises.open('/foo', 'r+');
      145 |         const buff = Buffer.from('foofoo');
      146 |         const { bytesRead, buffer } = await fileHandle.read(buff, 0, 6, 0);

      at src/__tests__/promises.test.ts:143:7
      at src/__tests__/promises.test.ts:137:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › read(buffer, offset, length, position) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      149 |         await fileHandle.close();
      150 |       });
    > 151 |       it('Reject when the file handle was closed', async () => {
          |       ^
      152 |         const fileHandle = await promises.open('/foo', 'r+');
      153 |         await fileHandle.close();
      154 |         return expect(fileHandle.read(Buffer.from('foo'), 0, 42, 0)).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:151:7
      at src/__tests__/promises.test.ts:137:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › readv(buffers, position) › Read data from an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      161 |         '/foo': 'Hello, world!',
      162 |       });
    > 163 |       it('Read data from an existing file', async () => {
          |       ^
      164 |         const fileHandle = await promises.open('/foo', 'r+');
      165 |         const buf1 = Buffer.alloc(5);
      166 |         const buf2 = Buffer.alloc(5);

      at src/__tests__/promises.test.ts:163:7
      at src/__tests__/promises.test.ts:157:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › readv(buffers, position) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      172 |         await fileHandle.close();
      173 |       });
    > 174 |       it('Reject when the file handle was closed', async () => {
          |       ^
      175 |         const fileHandle = await promises.open('/foo', 'r+');
      176 |         await fileHandle.close();
      177 |         return expect(fileHandle.readv([Buffer.alloc(10)], 0)).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:174:7
      at src/__tests__/promises.test.ts:157:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › readFile([options]) › Read data from an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      185 |         '/foo': 'bar',
      186 |       });
    > 187 |       it('Read data from an existing file', async () => {
          |       ^
      188 |         const fileHandle = await promises.open('/foo', 'r+');
      189 |         expect((await fileHandle.readFile()).toString()).toEqual('bar');
      190 |         await fileHandle.close();

      at src/__tests__/promises.test.ts:187:7
      at src/__tests__/promises.test.ts:181:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › readFile([options]) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      190 |         await fileHandle.close();
      191 |       });
    > 192 |       it('Reject when the file handle was closed', async () => {
          |       ^
      193 |         const fileHandle = await promises.open('/foo', 'r+');
      194 |         await fileHandle.close();
      195 |         return expect(fileHandle.readFile()).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:192:7
      at src/__tests__/promises.test.ts:181:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › stat() › Return stats of an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      202 |         '/foo': 'bar',
      203 |       });
    > 204 |       it('Return stats of an existing file', async () => {
          |       ^
      205 |         const fileHandle = await promises.open('/foo', 'r+');
      206 |         expect((await fileHandle.stat()).isFile()).toEqual(true);
      207 |         await fileHandle.close();

      at src/__tests__/promises.test.ts:204:7
      at src/__tests__/promises.test.ts:198:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › stat() › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      207 |         await fileHandle.close();
      208 |       });
    > 209 |       it('Reject when the file handle was closed', async () => {
          |       ^
      210 |         const fileHandle = await promises.open('/foo', 'r+');
      211 |         await fileHandle.close();
      212 |         return expect(fileHandle.stat()).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:209:7
      at src/__tests__/promises.test.ts:198:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › truncate([len]) › Truncate an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      253 |         '/foo': '0123456789',
      254 |       });
    > 255 |       it('Truncate an existing file', async () => {
          |       ^
      256 |         const fileHandle = await promises.open('/foo', 'r+');
      257 |         await fileHandle.truncate(5);
      258 |         expect(vol.readFileSync('/foo').toString()).toEqual('01234');

      at src/__tests__/promises.test.ts:255:7
      at src/__tests__/promises.test.ts:249:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › truncate([len]) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      261 |         await fileHandle.close();
      262 |       });
    > 263 |       it('Reject when the file handle was closed', async () => {
          |       ^
      264 |         const fileHandle = await promises.open('/foo', 'r+');
      265 |         await fileHandle.close();
      266 |         return expect(fileHandle.truncate(5)).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:263:7
      at src/__tests__/promises.test.ts:249:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › utimes(atime, mtime) › Changes times of an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      275 |       const fttDeparture = new Date(1985, 9, 26, 1, 21); // ftt stands for "first time travel" :-)
      276 |       const fttArrival = new Date(fttDeparture.getTime() + 60000);
    > 277 |       it('Changes times of an existing file', async () => {
          |       ^
      278 |         const fileHandle = await promises.open('/foo', 'r+');
      279 |         await fileHandle.utimes(fttArrival, fttDeparture);
      280 |         const stats = vol.statSync('/foo');

      at src/__tests__/promises.test.ts:277:7
      at src/__tests__/promises.test.ts:269:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › utimes(atime, mtime) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      283 |         await fileHandle.close();
      284 |       });
    > 285 |       it('Reject when the file handle was closed', async () => {
          |       ^
      286 |         const fileHandle = await promises.open('/foo', 'r+');
      287 |         await fileHandle.close();
      288 |         return expect(fileHandle.utimes(fttArrival, fttDeparture)).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:285:7
      at src/__tests__/promises.test.ts:269:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › write(buffer[, offset[, length[, position]]]) › Write data to an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      295 |         '/foo': 'bar',
      296 |       });
    > 297 |       it('Write data to an existing file', async () => {
          |       ^
      298 |         const fileHandle = await promises.open('/foo', 'w');
      299 |         await fileHandle.write(Buffer.from('foo'));
      300 |         expect(vol.readFileSync('/foo').toString()).toEqual('foo');

      at src/__tests__/promises.test.ts:297:7
      at src/__tests__/promises.test.ts:291:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › write(buffer[, offset[, length[, position]]]) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      301 |         await fileHandle.close();
      302 |       });
    > 303 |       it('Reject when the file handle was closed', async () => {
          |       ^
      304 |         const fileHandle = await promises.open('/foo', 'w');
      305 |         await fileHandle.close();
      306 |         return expect(fileHandle.write(Buffer.from('foo'))).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:303:7
      at src/__tests__/promises.test.ts:291:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › writev(buffers[, position]) › Write data to an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      313 |         '/foo': 'Hello, world!',
      314 |       });
    > 315 |       it('Write data to an existing file', async () => {
          |       ^
      316 |         const fileHandle = await promises.open('/foo', 'w');
      317 |         const buf1 = Buffer.from('foo');
      318 |         const buf2 = Buffer.from('bar');

      at src/__tests__/promises.test.ts:315:7
      at src/__tests__/promises.test.ts:309:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › writev(buffers[, position]) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      323 |         await fileHandle.close();
      324 |       });
    > 325 |       it('Reject when the file handle was closed', async () => {
          |       ^
      326 |         const fileHandle = await promises.open('/foo', 'w');
      327 |         await fileHandle.close();
      328 |         return expect(fileHandle.writev([Buffer.from('foo')], 0)).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:325:7
      at src/__tests__/promises.test.ts:309:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › writeFile(data[, options]) › Write data to an existing file

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      335 |         '/foo': 'bar',
      336 |       });
    > 337 |       it('Write data to an existing file', async () => {
          |       ^
      338 |         const fileHandle = await promises.open('/foo', 'w');
      339 |         await fileHandle.writeFile('foo');
      340 |         expect(vol.readFileSync('/foo').toString()).toEqual('foo');

      at src/__tests__/promises.test.ts:337:7
      at src/__tests__/promises.test.ts:331:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › FileHandle › writeFile(data[, options]) › Reject when the file handle was closed

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      341 |         await fileHandle.close();
      342 |       });
    > 343 |       it('Reject when the file handle was closed', async () => {
          |       ^
      344 |         const fileHandle = await promises.open('/foo', 'w');
      345 |         await fileHandle.close();
      346 |         return expect(fileHandle.writeFile('foo')).rejects.toBeInstanceOf(Error);

      at src/__tests__/promises.test.ts:343:7
      at src/__tests__/promises.test.ts:331:5
      at src/__tests__/promises.test.ts:6:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › appendFile(path, data[, options]) › Append data to existing file using FileHandle

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      371 |       expect(vol.readFileSync('/foo').toString()).toEqual('barbaz');
      372 |     });
    > 373 |     it('Append data to existing file using FileHandle', async () => {
          |     ^
      374 |       const vol = new Volume();
      375 |       const { promises } = vol;
      376 |       vol.fromJSON({

      at src/__tests__/promises.test.ts:373:5
      at src/__tests__/promises.test.ts:363:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › readFile(id[, options]) › Read existing file using FileHandle

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      563 |       expect((await promises.readFile('/foo')).toString()).toEqual('bar');
      564 |     });
    > 565 |     it('Read existing file using FileHandle', async () => {
          |     ^
      566 |       const vol = new Volume();
      567 |       const { promises } = vol;
      568 |       vol.fromJSON({

      at src/__tests__/promises.test.ts:565:5
      at src/__tests__/promises.test.ts:556:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

  ● Promises API › writeFile(id, data[, options]) › Write data to existing file using FileHandle

    thrown: "Exceeded timeout of 5000 ms for a test.
    Add a timeout value to this test to increase the timeout, if this is a long-running test. See https://jestjs.io/docs/api#testname-fn-timeout."

      729 |       expect(vol.readFileSync('/foo').toString()).toEqual('bar');
      730 |     });
    > 731 |     it('Write data to existing file using FileHandle', async () => {
          |     ^
      732 |       const vol = new Volume();
      733 |       const { promises } = vol;
      734 |       vol.fromJSON({

      at src/__tests__/promises.test.ts:731:5
      at src/__tests__/promises.test.ts:721:3
      at Object.<anonymous> (src/__tests__/promises.test.ts:5:1)

