*** using precomputed mutations ***
[32m09:12:29 (2527) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m09:12:29 (2527) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m09:12:29 (2527) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m09:12:30 (2527) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m09:12:30 (2527) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m09:12:30 (2527) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 240 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === true
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 2 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== ""
Mutant 3 in matcher.ts: spec.match replaced with spec.test
Mutant 4 in matcher.ts: spec.match replaced with spec.length
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*?-]*$/
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.#$+*-]*$/
Mutant 7 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.#$+*-]*[a-zA-Z0-9]$/
Mutant 8 in matcher.ts: spec.match(/^\//) === null replaced with spec.match(/\/$/) === null
Mutant 9 in matcher.ts: spec.match replaced with spec.test
Mutant 10 in matcher.ts: spec.match(/\/\//) !== null replaced with spec.match(/(\/+){2}/) !== null
Mutant 11 in matcher.ts: spec.match(/\/\//) !== null replaced with spec.indexOf('/') === 0
Mutant 12 in matcher.ts: spec.match replaced with spec.split
Mutant 13 in matcher.ts: /\/\// replaced with /\/\/.*?$/
Mutant 14 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+][^/]|[^/][*+]/) !== null
Mutant 15 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with !spec.match(/[^/]:|:\/|:$/)
Mutant 16 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) === null
Mutant 17 in matcher.ts: spec.match replaced with any
Mutant 18 in matcher.ts: spec.match replaced with entries
Mutant 19 in matcher.ts: spec.match replaced with has
Mutant 20 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:+/
Mutant 21 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:?/
Mutant 22 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 23 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === undefined
Mutant 24 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === NaN
Mutant 25 in matcher.ts: spec.match replaced with spec.split
Mutant 26 in matcher.ts: spec.match replaced with spec[1]
Mutant 27 in matcher.ts: /^.+\/$/ replaced with /^.+\/\/.+$/
Mutant 28 in matcher.ts: /^.+\/$/ replaced with /^.+\/+[a-zA-Z0-9_]+$/
Mutant 29 in matcher.ts: /^.+\/$/ replaced with /^.+\/+[a-zA-Z0-9_]+:\/+[a-zA-Z0-9_]+$/
Mutant 30 in matcher.ts: spec replaced with "some other value"
Mutant 31 in matcher.ts: spec replaced with spec.startsWith("foo")
Mutant 32 in matcher.ts: spec replaced with spec.endsWith("bar")
Mutant 33 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length < 1 || !string.endsWith('/')
Mutant 34 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.startsWith('/')
Mutant 35 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with !string.contains('/')
Mutant 36 in matcher.ts: '/' replaced with '\\'
Mutant 37 in matcher.ts: '/' replaced with '\\/'
Mutant 38 in matcher.ts: '/' replaced with '/_'
Mutant 39 in matcher.ts: string replaced with 1
Mutant 40 in matcher.ts: string replaced with ''
Mutant 41 in matcher.ts: string replaced with NaN
Mutant 42 in matcher.ts: max > 0 || any replaced with max > 1 || any
Mutant 43 in matcher.ts: max > 0 || any replaced with max === 1 || any
Mutant 44 in matcher.ts: max > 0 || any replaced with any && max > 0
Mutant 45 in matcher.ts: final && opt && min < 1 replaced with min > 0
Mutant 46 in matcher.ts: final && opt && min < 1 replaced with !final && !opt && min > 0
Mutant 47 in matcher.ts: final && opt && min < 1 replaced with max < 0
Mutant 48 in matcher.ts: min > 0 replaced with min <= 0
Mutant 49 in matcher.ts: min > 0 replaced with min != 0
Mutant 50 in matcher.ts: min > 0 replaced with max < 0
Mutant 51 in matcher.ts: true replaced with false
Mutant 52 in matcher.ts: true replaced with string.length <= 1
Mutant 53 in matcher.ts: true replaced with string.split('/').length > 1
Mutant 54 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc + "_")
Mutant 55 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc + seg)
Mutant 56 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => 2 * seg + acc)
Mutant 57 in matcher.ts: parts.reduce replaced with parts.reduceRight
Mutant 58 in matcher.ts: parts.reduce replaced with parts.concat
Mutant 59 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + seg
Mutant 60 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + '/' + seg
Mutant 61 in matcher.ts: '$' replaced with '/$'
Mutant 62 in matcher.ts: '$' replaced with '#'
Mutant 63 in matcher.ts: '$' replaced with '?'
Mutant 64 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(2).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 65 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(0, -1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 66 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.join('/').split('/').reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 67 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('_')
Mutant 68 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split(/\s+/)
Mutant 69 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split(/\W+/)
Mutant 70 in matcher.ts: '/' replaced with '/'.match(/[a-zA-Z0-9_/:~.$+*-]+/) !== null
Mutant 71 in matcher.ts: '/' replaced with spec.length >= 2
Mutant 72 in matcher.ts: '/' replaced with Math.floor(Math.random() * 2) === 0
Mutant 73 in matcher.ts: 1 replaced with 0
Mutant 74 in matcher.ts: 1 replaced with 2
Mutant 75 in matcher.ts: 1 replaced with -1
Mutant 76 in matcher.ts: part replaced with part.length
Mutant 77 in matcher.ts: part replaced with part.substring(1)
Mutant 78 in matcher.ts: part replaced with part[0]
Mutant 79 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/[^:]+/) !== null
Mutant 80 in matcher.ts: part.match(/:.+/) !== null replaced with !part.match(/:.+/)
Mutant 81 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.*$/) !== null
Mutant 82 in matcher.ts: part.match replaced with part.split
Mutant 83 in matcher.ts: part.match replaced with part.indexOf
Mutant 84 in matcher.ts: part.match replaced with part.includes
Mutant 85 in matcher.ts: /:.+/ replaced with /[a-zA-Z0-9_-]+/
Mutant 86 in matcher.ts: /:.+/ replaced with /[^/]+/
Mutant 87 in matcher.ts: /:.+/ replaced with /[^/]+$/
Mutant 88 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 89 in matcher.ts: part.slice(1) replaced with part.substring(1)
Mutant 90 in matcher.ts: part.slice(1) replaced with part.charAt(0) + part.slice(1)
Mutant 91 in matcher.ts: 1 replaced with part.slice(-1)
Mutant 92 in matcher.ts: 1 replaced with part.slice(part.length - 1)
Mutant 93 in matcher.ts: parts.push replaced with parts.pop
Mutant 94 in matcher.ts: '/([^/]+)' replaced with '/(.+)'
Mutant 95 in matcher.ts: '/([^/]+)' replaced with '/[^/]+?'
Mutant 96 in matcher.ts: '/([^/]+)' replaced with '/[^/]+'
Mutant 97 in matcher.ts: parts.push replaced with parts.pop
Mutant 98 in matcher.ts: parts.push replaced with parts.unshift
Mutant 99 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '[$1]')}`
Mutant 100 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.substring(1)}`
Mutant 101 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.split('').reverse().join('')}`
Mutant 102 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '')
Mutant 103 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '<>')
Mutant 104 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '.*')
Mutant 105 in matcher.ts: part.replace replaced with part[0]
Mutant 106 in matcher.ts: /([.$])/g replaced with /(\\.|$)/g
Mutant 107 in matcher.ts: /([.$])/g replaced with /([^$])/g
Mutant 108 in matcher.ts: /([.$])/g replaced with /([$])/g
Mutant 109 in matcher.ts: props.reverse replaced with props
Mutant 110 in matcher.ts: props.reverse replaced with props.length
Mutant 111 in policy.ts: this.rules.push replaced with this.rules = rules
Mutant 112 in policy.ts: this.rules replaced with this.rules.length
Mutant 113 in policy.ts: this.rules replaced with this.rules[0]
Mutant 114 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path + verb, ctx)
Mutant 115 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb ^ ctx)
Mutant 116 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(pattern.match(path), ctx)
Mutant 117 in policy.ts: rule.query replaced with !rule.query
Mutant 118 in policy.ts: verb replaced with verb + 'xyz'
Mutant 119 in policy.ts: verb replaced with verb.toUpperCase()
Mutant 120 in policy.ts: verb replaced with verb.length
Mutant 121 in policy.ts: ctx replaced with undefined
Mutant 122 in policy.ts: ctx replaced with null
Mutant 123 in policy.ts: ctx replaced with NaN
Mutant 124 in policy.ts: res === false replaced with res === true
Mutant 125 in policy.ts: res === false replaced with !res
Mutant 126 in policy.ts: res === false replaced with !!res
Mutant 127 in policy.ts: res === true replaced with res === 1
Mutant 128 in policy.ts: res === true replaced with this.rules.includes(res)
Mutant 129 in policy.ts: res === true replaced with res.name == 'allowed'
Mutant 130 in policy.ts: this.rules replaced with this.rules.flat()
Mutant 131 in policy.ts: this.rules replaced with [...this.rules.children]
Mutant 132 in policy.ts: this.rules replaced with this.rules.push(null)
Mutant 133 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) !== false
Mutant 134 in policy.ts: rule.matches(path, ctx) replaced with path.startsWith(rule.path)
Mutant 135 in policy.ts: rule.matches(path, ctx) replaced with rule.query(path, verb, ctx) !== null
Mutant 136 in policy.ts: rule.matches replaced with rule.doesNotMatch
Mutant 137 in policy.ts: rule.matches replaced with !rule.matches
Mutant 138 in policy.ts: path replaced with path.toLowerCase()
Mutant 139 in policy.ts: path replaced with path.slice(1)
Mutant 140 in policy.ts: path replaced with path + 'foo'
Mutant 141 in policy.ts: this.rules.map replaced with this.rules.concat
Mutant 142 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 143 in policy.ts: this.rules.map replaced with this.rules.reduce
Mutant 144 in policy.ts: rule => rule.clone() replaced with rule => null
Mutant 145 in policy.ts: rule => rule.clone() replaced with rule => rule.copy()
Mutant 146 in policy.ts: rule.clone replaced with !rule.clone
Mutant 147 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, null]
Mutant 148 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, undefined]
Mutant 149 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, {}]
Mutant 150 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const invalidPolicy of policies) {
  this.set(policy.name, policy);
}
Mutant 151 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy_ of policies) {
  this.set(policy.name, policy);
}
Mutant 152 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy in policies) {
  this.set(policy.name, policy);
}
Mutant 153 in policymap.ts: policies replaced with policies.reverse()
Mutant 154 in policymap.ts: policies replaced with policies.pop()
Mutant 155 in policymap.ts: policies replaced with policies.shift()
Mutant 156 in policymap.ts: this.set(policy.name, policy) replaced with this.set([policy.name, policy])
Mutant 157 in policymap.ts: this.set(policy.name, policy) replaced with this.set([policy.name])
Mutant 158 in policymap.ts: policy.name replaced with policy.get('name')
Mutant 159 in policymap.ts: policy.name replaced with policy['name']
Mutant 160 in policymap.ts: policy.name replaced with policy.set('name', 'policy2')
Mutant 161 in policymap.ts: policy replaced with policy.name
Mutant 162 in policymap.ts: policy replaced with policy != policy
Mutant 163 in policymap.ts: name replaced with "Buggy Name"
Mutant 164 in policymap.ts: name replaced with name + "Buggy"
Mutant 165 in policymap.ts: name replaced with undefined
Mutant 166 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path || verb == ctx)
Mutant 167 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(verb == ctx && path)
Mutant 168 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(ctx ? path != verb : path)
Mutant 169 in policymap.ts: policy.query replaced with policy.eval
Mutant 170 in policymap.ts: path replaced with path + ''
Mutant 171 in policymap.ts: path replaced with path.length
Mutant 172 in policymap.ts: path replaced with path.toUpperCase()
Mutant 173 in policymap.ts: verb replaced with 'unknown'
Mutant 174 in policymap.ts: verb replaced with null
Mutant 175 in policymap.ts: ctx replaced with link.parentNode
Mutant 176 in policymap.ts: ctx replaced with link.parentElement
Mutant 177 in policymap.ts: ctx replaced with link.parentNode.nextSibling
Mutant 178 in policymap.ts: this.get replaced with this.set
Mutant 179 in policymap.ts: this.get replaced with this.has
Mutant 180 in policymap.ts: this.get replaced with this['get']
Mutant 181 in policymap.ts: name replaced with "undefined"
Mutant 182 in policymap.ts: name replaced with name + "x"
Mutant 183 in policymap.ts: name replaced with Math.random()
Mutant 184 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + ctx)
Mutant 185 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(ctx.path)
Mutant 186 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path[ctx])
Mutant 187 in policymap.ts: policy.matches replaced with this.policy.matches
Mutant 188 in policymap.ts: policy.matches replaced with null
Mutant 189 in policymap.ts: policy.matches replaced with policy.name
Mutant 190 in policymap.ts: path replaced with path + ''
Mutant 191 in policymap.ts: path replaced with path * ''
Mutant 192 in policymap.ts: path replaced with path - ''
Mutant 193 in policymap.ts: ctx replaced with ctx !== undefined
Mutant 194 in policymap.ts: ctx replaced with typeof ctx !== 'undefined'
Mutant 195 in policymap.ts: ctx replaced with ctx === null
Mutant 196 in rule.ts: verbs replaced with this.verbs.keys()
Mutant 197 in rule.ts: verbs replaced with this.verbs.values()
Mutant 198 in rule.ts: verbs replaced with this.verbs.entries()
Mutant 199 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb in verbs) {
  this.verbs[verb] = false;
}
Mutant 200 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of Object.keys(verbs)) {
  this.verbs[verb] = false;
}
Mutant 201 in rule.ts: verbs replaced with undefined
Mutant 202 in rule.ts: verbs replaced with verbs.prop
Mutant 203 in rule.ts: verbs replaced with verbs.length
Mutant 204 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.matches(path, ctx) || !(verb in this.verbs)
Mutant 205 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.verbs[verb]
Mutant 206 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.verbs[verb] === false
Mutant 207 in rule.ts: this.matches(path, ctx) replaced with this.matches(!path, ctx)
Mutant 208 in rule.ts: this.matches(path, ctx) replaced with this.matches(path || ctx)
Mutant 209 in rule.ts: this.matches(path, ctx) replaced with this.matches(path + ctx)
Mutant 210 in rule.ts: this.matches replaced with verb in this.regex
Mutant 211 in rule.ts: path replaced with path.toUpperCase()
Mutant 212 in rule.ts: path replaced with path + 'foo'
Mutant 213 in rule.ts: path replaced with path[1]
Mutant 214 in rule.ts: ctx replaced with ctx.non_existent_property
Mutant 215 in rule.ts: ctx replaced with 'foo'
Mutant 216 in rule.ts: path.match replaced with path.search
Mutant 217 in rule.ts: this.regex replaced with this.regex = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/
Mutant 218 in rule.ts: this.regex replaced with this.regex = new RegExp(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]$/g)
Mutant 219 in rule.ts: match === null replaced with match !== null
Mutant 220 in rule.ts: match === null replaced with match.length === 0
Mutant 221 in rule.ts: match === null replaced with match[0] === undefined
Mutant 222 in rule.ts: count > 0 replaced with count < 0
Mutant 223 in rule.ts: count > 0 replaced with count === 0
Mutant 224 in rule.ts: count > 0 replaced with count <= 0
Mutant 225 in rule.ts: ctx === undefined replaced with ctx => undefined
Mutant 226 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 227 in rule.ts: ctx === undefined replaced with !ctx
Mutant 228 in rule.ts: index < count replaced with index <= count
Mutant 229 in rule.ts: index < count replaced with index > count
Mutant 230 in rule.ts: index < count replaced with index + 1 <= count
Mutant 231 in rule.ts: index++ replaced with index--
Mutant 232 in rule.ts: index++ replaced with index += 2
Mutant 233 in rule.ts: index++ replaced with index = -1
Mutant 234 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined || match[index + 1] === prop
Mutant 235 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] === prop
Mutant 236 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const associatedVerbs in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 237 in rule.ts: this.verbs replaced with this.rules
Mutant 238 in rule.ts: this.verbs replaced with this.verbs.keys()
Mutant 239 in rule.ts: this.verbs replaced with this.verbs.values()
[32m09:12:30 (2527) INFO Instrumenter[39m Instrumented 6 source file(s) with 240 mutant(s)
[32m09:12:31 (2527) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m09:12:32 (2527) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m09:12:32 (2527) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m09:12:36 (2527) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4439 ms, overhead 1 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~19m) 2/240 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~15m) 5/240 tested (0 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~14m) 8/240 tested (0 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~13m) 11/240 tested (1 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~13m) 14/240 tested (2 survived, 0 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~14m) 16/240 tested (2 survived, 0 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~13m) 19/240 tested (2 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~13m) 22/240 tested (2 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~12m) 25/240 tested (2 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~12m) 28/240 tested (2 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~12m) 31/240 tested (2 survived, 0 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~12m) 34/240 tested (2 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~11m) 37/240 tested (3 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~11m) 40/240 tested (5 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~11m) 42/240 tested (5 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~11m) 45/240 tested (5 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~11m) 48/240 tested (5 survived, 0 timed out)
Mutation testing 21% (elapsed: ~3m, remaining: ~11m) 51/240 tested (6 survived, 0 timed out)
Mutation testing 22% (elapsed: ~3m, remaining: ~10m) 54/240 tested (6 survived, 0 timed out)
Mutation testing 23% (elapsed: ~3m, remaining: ~10m) 57/240 tested (6 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~10m) 60/240 tested (6 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~10m) 63/240 tested (6 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~10m) 66/240 tested (6 survived, 0 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~9m) 69/240 tested (6 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~9m) 72/240 tested (6 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~9m) 74/240 tested (6 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~9m) 77/240 tested (6 survived, 0 timed out)
Mutation testing 33% (elapsed: ~4m, remaining: ~9m) 80/240 tested (6 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~9m) 83/240 tested (7 survived, 0 timed out)
Mutation testing 35% (elapsed: ~5m, remaining: ~8m) 86/240 tested (7 survived, 0 timed out)
Mutation testing 37% (elapsed: ~5m, remaining: ~8m) 89/240 tested (7 survived, 0 timed out)
Mutation testing 38% (elapsed: ~5m, remaining: ~8m) 92/240 tested (8 survived, 0 timed out)
Mutation testing 39% (elapsed: ~5m, remaining: ~8m) 95/240 tested (8 survived, 0 timed out)
Mutation testing 40% (elapsed: ~5m, remaining: ~8m) 98/240 tested (8 survived, 0 timed out)
Mutation testing 42% (elapsed: ~5m, remaining: ~8m) 101/240 tested (8 survived, 0 timed out)
Mutation testing 43% (elapsed: ~6m, remaining: ~7m) 104/240 tested (8 survived, 0 timed out)
Mutation testing 44% (elapsed: ~6m, remaining: ~7m) 107/240 tested (8 survived, 0 timed out)
Mutation testing 45% (elapsed: ~6m, remaining: ~7m) 110/240 tested (8 survived, 0 timed out)
Mutation testing 47% (elapsed: ~6m, remaining: ~7m) 113/240 tested (8 survived, 0 timed out)
Mutation testing 48% (elapsed: ~6m, remaining: ~7m) 116/240 tested (8 survived, 0 timed out)
Mutation testing 49% (elapsed: ~6m, remaining: ~6m) 119/240 tested (8 survived, 0 timed out)
Mutation testing 50% (elapsed: ~7m, remaining: ~6m) 122/240 tested (8 survived, 0 timed out)
Mutation testing 52% (elapsed: ~7m, remaining: ~6m) 125/240 tested (8 survived, 0 timed out)
Mutation testing 53% (elapsed: ~7m, remaining: ~6m) 128/240 tested (8 survived, 0 timed out)
Mutation testing 54% (elapsed: ~7m, remaining: ~6m) 131/240 tested (9 survived, 0 timed out)
Mutation testing 55% (elapsed: ~7m, remaining: ~6m) 134/240 tested (10 survived, 0 timed out)
Mutation testing 57% (elapsed: ~7m, remaining: ~5m) 137/240 tested (10 survived, 0 timed out)
Mutation testing 58% (elapsed: ~8m, remaining: ~5m) 140/240 tested (11 survived, 0 timed out)
Mutation testing 59% (elapsed: ~8m, remaining: ~5m) 143/240 tested (11 survived, 0 timed out)
Mutation testing 60% (elapsed: ~8m, remaining: ~5m) 146/240 tested (11 survived, 0 timed out)
Mutation testing 62% (elapsed: ~8m, remaining: ~5m) 149/240 tested (11 survived, 0 timed out)
Mutation testing 63% (elapsed: ~8m, remaining: ~5m) 152/240 tested (11 survived, 0 timed out)
Mutation testing 64% (elapsed: ~8m, remaining: ~4m) 155/240 tested (12 survived, 0 timed out)
Mutation testing 65% (elapsed: ~9m, remaining: ~4m) 158/240 tested (12 survived, 0 timed out)
Mutation testing 67% (elapsed: ~9m, remaining: ~4m) 161/240 tested (13 survived, 0 timed out)
Mutation testing 68% (elapsed: ~9m, remaining: ~4m) 165/240 tested (13 survived, 0 timed out)
Mutation testing 70% (elapsed: ~9m, remaining: ~4m) 168/240 tested (13 survived, 0 timed out)
Mutation testing 71% (elapsed: ~9m, remaining: ~3m) 171/240 tested (14 survived, 0 timed out)
Mutation testing 72% (elapsed: ~9m, remaining: ~3m) 174/240 tested (14 survived, 0 timed out)
Mutation testing 73% (elapsed: ~10m, remaining: ~3m) 177/240 tested (14 survived, 0 timed out)
Mutation testing 75% (elapsed: ~10m, remaining: ~3m) 180/240 tested (14 survived, 0 timed out)
Mutation testing 76% (elapsed: ~10m, remaining: ~3m) 183/240 tested (15 survived, 0 timed out)
Mutation testing 77% (elapsed: ~10m, remaining: ~3m) 186/240 tested (15 survived, 0 timed out)
Mutation testing 78% (elapsed: ~10m, remaining: ~2m) 189/240 tested (15 survived, 0 timed out)
Mutation testing 80% (elapsed: ~10m, remaining: ~2m) 192/240 tested (16 survived, 0 timed out)
Mutation testing 81% (elapsed: ~11m, remaining: ~2m) 195/240 tested (16 survived, 0 timed out)
Mutation testing 82% (elapsed: ~11m, remaining: ~2m) 198/240 tested (16 survived, 0 timed out)
Mutation testing 84% (elapsed: ~11m, remaining: ~2m) 202/240 tested (16 survived, 0 timed out)
Mutation testing 85% (elapsed: ~11m, remaining: ~1m) 205/240 tested (16 survived, 0 timed out)
Mutation testing 86% (elapsed: ~11m, remaining: ~1m) 208/240 tested (16 survived, 0 timed out)
Mutation testing 87% (elapsed: ~11m, remaining: ~1m) 211/240 tested (16 survived, 0 timed out)
Mutation testing 89% (elapsed: ~12m, remaining: ~1m) 214/240 tested (16 survived, 0 timed out)
Mutation testing 90% (elapsed: ~12m, remaining: ~1m) 217/240 tested (16 survived, 0 timed out)
Mutation testing 91% (elapsed: ~12m, remaining: ~1m) 220/240 tested (16 survived, 0 timed out)
Mutation testing 92% (elapsed: ~12m, remaining: <1m) 223/240 tested (16 survived, 0 timed out)
Mutation testing 94% (elapsed: ~12m, remaining: <1m) 226/240 tested (16 survived, 0 timed out)
Mutation testing 95% (elapsed: ~12m, remaining: <1m) 229/240 tested (17 survived, 0 timed out)
Mutation testing 96% (elapsed: ~13m, remaining: <1m) 232/240 tested (18 survived, 0 timed out)
Mutation testing 97% (elapsed: ~13m, remaining: <1m) 235/240 tested (19 survived, 0 timed out)
Mutation testing 99% (elapsed: ~13m, remaining: <1m) 239/240 tested (19 survived, 0 timed out)

All tests
  ✓ All tests (killed 221)

[Survived] PrecomputedMutator
src/matcher.ts:18:9
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/(\/+){2}/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:18:20
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/\/\/.*?$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/_')) {

[Survived] PrecomputedMutator
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (min != 0) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substring(1))

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.flat()) {

[Survived] PrecomputedMutator
src/policy.ts:49:11
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path, ctx) !== false) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.toLowerCase(), ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.reverse()) {

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy['name'], policy)

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path + '', verb, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:39:20
-       const policy = this.get(name)
+       const policy = this['get'](name)

[Survived] PrecomputedMutator
src/policymap.ts:41:24
-         ? policy.matches(path, ctx)
+         ? policy.matches(path + '', ctx)

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (!ctx) {

[Survived] PrecomputedMutator
src/rule.ts:69:27
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index + 1 <= count; index++) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   92.08 |      221 |         0 |         19 |        0 |        0 |
 matcher.ts   |   92.79 |      103 |         0 |          8 |        0 |        0 |
 policy.ts    |   91.67 |       33 |         0 |          3 |        0 |        0 |
 policymap.ts |   89.80 |       44 |         0 |          5 |        0 |        0 |
 rule.ts      |   93.18 |       41 |         0 |          3 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m09:25:59 (2527) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m09:25:59 (2527) INFO MutationTestExecutor[39m Done in 13 minutes 30 seconds.

real	13m31.622s
user	18m23.419s
sys	1m20.212s
