*** using precomputed mutations ***
[32m15:43:02 (2476) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m15:43:02 (2476) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m15:43:03 (2476) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m15:43:03 (2476) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m15:43:03 (2476) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m15:43:03 (2476) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 230 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.0/mutants.json ***
failed to parse replacement spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
Mutant 0 in matcher.ts: spec.match replaced with spec.search
Mutant 1 in matcher.ts: spec.match replaced with spec.replace
Mutant 2 in matcher.ts: spec.match replaced with spec.split
failed to parse replacement /^[a-zA-Z0-9_/:~.$+*-]*$/g: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /^[a-zA-Z0-9_/:~.$+*-]*$/i: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /^[a-zA-Z0-9_/:~.$+*-]*$/m: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
Mutant 3 in matcher.ts: spec.match replaced with spec.search
Mutant 4 in matcher.ts: spec.match replaced with spec.replace
Mutant 5 in matcher.ts: spec.match replaced with spec.split
failed to parse replacement /^[a-zA-Z0-9_/:~.$+*-]*$/: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
Mutant 6 in matcher.ts: spec.match replaced with spec.search
Mutant 7 in matcher.ts: spec.match replaced with spec.replace
Mutant 8 in matcher.ts: spec.match replaced with spec.split
failed to parse replacement spec.match(version === '1' || version === '1.0'
      ? /[*+][^/]|[^/][*+]/
      : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null: SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
failed to parse replacement spec.match(version === '1' || version === '1.0'
      ? /[*+][^/]|[^/][*+]/
      : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== undefined: SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
failed to parse replacement spec.match(/[^/]:|:\/|:$/) === null: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
Mutant 9 in matcher.ts: spec.match replaced with spec.search
Mutant 10 in matcher.ts: spec.match replaced with spec.replace
Mutant 11 in matcher.ts: spec.match replaced with spec.split
Mutant 12 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 13 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined
Mutant 14 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined && spec.match(/^.+\/$/) !== ''
Mutant 15 in matcher.ts: /^.+\/$/ replaced with /^.+\/(?!$)/
Mutant 16 in matcher.ts: /^.+\/$/ replaced with /^.+\/(?!\/)/
Mutant 17 in matcher.ts: /^.+\/$/ replaced with /^.+\/(?!\/|$)/
Mutant 18 in matcher.ts: spec replaced with spec.replace(/[*+]/g, '')
Mutant 19 in matcher.ts: spec replaced with spec.replace(/[*+]/g, '\\$&')
failed to parse replacement string.length > 1 && string.endsWith('/') && string.startsWith('/'): SyntaxError: Invalid regular expression: //') && string.startsWith('//: Unmatched ')'
Mutant 20 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 21 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.endsWith('\\')
Mutant 22 in matcher.ts: string.endsWith replaced with string.includes
Mutant 23 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 24 in matcher.ts: '/' replaced with '/' + '\\'
Mutant 25 in matcher.ts: '/' replaced with '/' + '\\' + '\\'
Mutant 26 in matcher.ts: string replaced with string.slice(1)
Mutant 27 in matcher.ts: string replaced with string.substring(1)
Mutant 28 in matcher.ts: string replaced with string.substr(1)
Mutant 29 in matcher.ts: max > 0 || any replaced with max > 1 || any
Mutant 30 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 31 in matcher.ts: max > 0 || any replaced with max > 0 || !any
Mutant 32 in matcher.ts: final && opt && min < 1 replaced with final && opt && min <= 1
Mutant 33 in matcher.ts: final && opt && min < 1 replaced with final && opt && min > 1
Mutant 34 in matcher.ts: final && opt && min < 1 replaced with final && opt && min >= 1
Mutant 35 in matcher.ts: min > 0 replaced with min < 0
Mutant 36 in matcher.ts: min > 0 replaced with max < 0
Mutant 37 in matcher.ts: min > 0 replaced with any < 0
Mutant 38 in matcher.ts: true replaced with false
Mutant 39 in matcher.ts: true replaced with null
Mutant 40 in matcher.ts: true replaced with undefined
Mutant 41 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '')
Mutant 42 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '^')
Mutant 43 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + 'foo'
Mutant 44 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + 1
Mutant 45 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc.toUpperCase()
Mutant 46 in matcher.ts: '$' replaced with '\\'
Mutant 47 in matcher.ts: '$' replaced with '/'
Mutant 48 in matcher.ts: '$' replaced with '\\\\'
Mutant 49 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 50 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(2)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 51 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('/')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
failed to parse replacement spec.split('/').slice(1).reverse().join('/'): SyntaxError: Invalid regular expression: //').slice(1).reverse().join('//: Unmatched ')'
failed to parse replacement spec.split('/').slice(1).reverse().map(segment => segment.replace(/[*+]/g, '')): SyntaxError: Invalid regular expression: //').slice(1).reverse().map(segment => segment.replace(//: Unmatched ')'
Mutant 52 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 53 in matcher.ts: '/' replaced with '\\'
Mutant 54 in matcher.ts: 1 replaced with 0
Mutant 55 in matcher.ts: 1 replaced with -1
Mutant 56 in matcher.ts: 1 replaced with spec.length - 1
Mutant 57 in matcher.ts: part replaced with part.length
Mutant 58 in matcher.ts: part replaced with part.toUpperCase()
Mutant 59 in matcher.ts: part replaced with part.split('')
Mutant 60 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 61 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== undefined
Mutant 62 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== null && part.match(/:.+/) !== undefined
Mutant 63 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 64 in matcher.ts: /:.+/ replaced with /:.{2,}/
Mutant 65 in matcher.ts: /:.+/ replaced with /:.{2}/
Mutant 66 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 67 in matcher.ts: part.slice(1) replaced with part.slice(0, -1)
Mutant 68 in matcher.ts: part.slice(1) replaced with part.slice(1, -1)
Mutant 69 in matcher.ts: 1 replaced with null
Mutant 70 in matcher.ts: 1 replaced with undefined
failed to parse replacement '/([^/]+?)': SyntaxError: Invalid regular expression: //([^//: Unterminated character class
failed to parse replacement `/${part.replace(/([.$])/g, '\\$2')}`: SyntaxError: Invalid regular expression: //${part.replace(//: Unterminated group
failed to parse replacement `/${part.replace(/([.$])/g, '\\$&')}`: SyntaxError: Invalid regular expression: //${part.replace(//: Unterminated group
Mutant 71 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 72 in matcher.ts: /([.$])/g replaced with /([^.$]+)/g
Mutant 73 in matcher.ts: /([.$])/g replaced with /([^.$]*)|([^.$]+)/g
Mutant 74 in matcher.ts: '\\$1' replaced with '\\$0'
Mutant 75 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 76 in policy.ts: this.rules.push replaced with this.rules = [...rules, ...this.rules]
Mutant 77 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 78 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.query(path, verb, ctx) === true)
Mutant 79 in policy.ts: this.rules replaced with this.rules.map(rule => rule.query(path, verb, ctx))
Mutant 80 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.clone())
Mutant 81 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.reverse())
Mutant 82 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.slice(1))
Mutant 83 in policy.ts: rule.query replaced with !rule.query
Mutant 84 in policy.ts: path replaced with path.toLowerCase()
Mutant 85 in policy.ts: path replaced with path.substring(1)
Mutant 86 in policy.ts: path replaced with path.split('/')[0]
Mutant 87 in policy.ts: verb replaced with !verb
Mutant 88 in policy.ts: verb replaced with verb + 'foo'
Mutant 89 in policy.ts: verb replaced with verb.toUpperCase()
Mutant 90 in policy.ts: ctx replaced with ctx.path
Mutant 91 in policy.ts: ctx replaced with ctx.verb
Mutant 92 in policy.ts: ctx replaced with ctx.path + ctx.verb
Mutant 93 in policy.ts: res === false replaced with res === true
Mutant 94 in policy.ts: res === false replaced with res !== false
Mutant 95 in policy.ts: res === false replaced with !res
Mutant 96 in policy.ts: res === true replaced with res !== true
Mutant 97 in policy.ts: res === true replaced with res === false
Mutant 98 in policy.ts: res === true replaced with res !== false
Mutant 99 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 100 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.matches(path, ctx))
Mutant 101 in policy.ts: this.rules replaced with this.rules.map(rule => rule.clone())
Mutant 102 in policy.ts: rule.matches(path, ctx) replaced with !rule.matches(path, ctx)
Mutant 103 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) && false
Mutant 104 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) || true
Mutant 105 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.parent)
Mutant 106 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.child)
Mutant 107 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.sibling)
Mutant 108 in policy.ts: path replaced with path.toLowerCase()
Mutant 109 in policy.ts: path replaced with path.substring(1)
Mutant 110 in policy.ts: path replaced with path.split('/').pop()
Mutant 111 in policy.ts: ctx replaced with ctx.path
Mutant 112 in policy.ts: ctx replaced with ctx.verb
Mutant 113 in policy.ts: ctx replaced with ctx.path.verb
Mutant 114 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(null)
Mutant 115 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(undefined)
Mutant 116 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(false)
Mutant 117 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 118 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name.toUpperCase()]
Mutant 119 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name.split('').reverse().join('')]
Mutant 120 in policymap.ts: policies replaced with policies.slice(1)
Mutant 121 in policymap.ts: policies replaced with policies.filter(policy => policy.name !== 'admin')
Mutant 122 in policymap.ts: policies replaced with policies.map(policy => policy.name)
Mutant 123 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 124 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, undefined)
Mutant 125 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, new Policy())
Mutant 126 in policymap.ts: policy.name replaced with policy.name.toLowerCase()
Mutant 127 in policymap.ts: policy.name replaced with policy.name.length
Mutant 128 in policymap.ts: policy.name replaced with policy.name.split('').reverse().join('')
Mutant 129 in policymap.ts: policy replaced with null
Mutant 130 in policymap.ts: policy replaced with undefined
Mutant 131 in policymap.ts: policy replaced with new Policy()
Mutant 132 in policymap.ts: this.get replaced with this.has
Mutant 133 in policymap.ts: this.get replaced with this.size
Mutant 134 in policymap.ts: this.get replaced with this.keys
Mutant 135 in policymap.ts: name replaced with "foo"
Mutant 136 in policymap.ts: name replaced with name.toUpperCase()
Mutant 137 in policymap.ts: name replaced with name.split("").reverse().join("")
Mutant 138 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.parent)
Mutant 139 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.child)
Mutant 140 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx.sibling)
Mutant 141 in policymap.ts: path replaced with path.toLowerCase()
Mutant 142 in policymap.ts: path replaced with path.split('/').pop()
Mutant 143 in policymap.ts: verb replaced with !verb
Mutant 144 in policymap.ts: verb replaced with verb + 1
Mutant 145 in policymap.ts: verb replaced with verb.toLowerCase()
Mutant 146 in policymap.ts: ctx replaced with ctx.path
Mutant 147 in policymap.ts: ctx replaced with ctx.verb
Mutant 148 in policymap.ts: ctx replaced with ctx.name
Mutant 149 in policymap.ts: this.get replaced with this.has
Mutant 150 in policymap.ts: this.get replaced with this.set
Mutant 151 in policymap.ts: name replaced with name + "foo"
Mutant 152 in policymap.ts: name replaced with name.toUpperCase()
Mutant 153 in policymap.ts: name replaced with name.length
Mutant 154 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.parent)
Mutant 155 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.child)
Mutant 156 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx.sibling)
Mutant 157 in policymap.ts: policy.matches replaced with policy.doesNotMatch
Mutant 158 in policymap.ts: path replaced with path.toLowerCase()
Mutant 159 in policymap.ts: path replaced with path.split('/').pop()
Mutant 160 in policymap.ts: ctx replaced with ctx.path
Mutant 161 in policymap.ts: ctx replaced with ctx.verb
Mutant 162 in policymap.ts: ctx replaced with ctx.name
Mutant 163 in rule.ts: verbs replaced with verbs.slice()
Mutant 164 in rule.ts: verbs replaced with verbs.filter(verb => verb.length > 0)
Mutant 165 in rule.ts: verbs replaced with verbs.map(verb => verb.toUpperCase())
Mutant 166 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 167 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb]
Mutant 168 in rule.ts: !(verb in this.verbs) replaced with !this.verbs[verb]
Mutant 169 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.keys()) {
  this.verbs[verb] = false;
}
Mutant 170 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.values()) {
  this.verbs[verb] = false;
}
Mutant 171 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.entries()) {
  this.verbs[verb] = false;
}
Mutant 172 in rule.ts: verbs replaced with verbs.slice()
Mutant 173 in rule.ts: verbs replaced with verbs.filter(verb => verb !== 'GET')
Mutant 174 in rule.ts: verbs replaced with verbs.map(verb => verb.toUpperCase())
Mutant 175 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !this.verbs[verb]
Mutant 176 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 177 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.substring(1), ctx)
Mutant 178 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.toUpperCase(), ctx)
Mutant 179 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.split('/')[0], ctx)
Mutant 180 in rule.ts: this.matches replaced with !this.matches
Mutant 181 in rule.ts: path replaced with path.toLowerCase()
Mutant 182 in rule.ts: path replaced with path.substring(1)
Mutant 183 in rule.ts: path replaced with path.split('/').pop()
Mutant 184 in rule.ts: ctx replaced with ctx.path
Mutant 185 in rule.ts: ctx replaced with ctx.query
Mutant 186 in rule.ts: ctx replaced with ctx.params
Mutant 187 in rule.ts: path.match replaced with path.search
Mutant 188 in rule.ts: path.match replaced with path.replace
Mutant 189 in rule.ts: path.match replaced with path.split
Mutant 190 in rule.ts: this.regex replaced with this.regex.test(path)
Mutant 191 in rule.ts: this.regex replaced with this.regex.exec(path)
Mutant 192 in rule.ts: this.regex replaced with this.regex.search(path)
Mutant 193 in rule.ts: match === null replaced with match === undefined
Mutant 194 in rule.ts: match === null replaced with match.length === 0
Mutant 195 in rule.ts: match === null replaced with match.indexOf('') === 0
Mutant 196 in rule.ts: count > 0 replaced with count < 0
Mutant 197 in rule.ts: count > 0 replaced with count === 0
Mutant 198 in rule.ts: count > 0 replaced with count !== 0
Mutant 199 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 200 in rule.ts: ctx === undefined replaced with ctx.length === 0
Mutant 201 in rule.ts: ctx === undefined replaced with ctx.props.length === 0
Mutant 202 in rule.ts: index < count replaced with index <= count
Mutant 203 in rule.ts: index < count replaced with index > count
Mutant 204 in rule.ts: index < count replaced with index == count
Mutant 205 in rule.ts: index++ replaced with index--
Mutant 206 in rule.ts: index++ replaced with index += 2
Mutant 207 in rule.ts: index++ replaced with index = 0
Mutant 208 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === null || match[index + 1] !== prop
Mutant 209 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] !== prop
Mutant 210 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== null && match[index + 1] !== prop
Mutant 211 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.keys()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 212 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.values()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 213 in rule.ts: this.verbs replaced with this.verbs.slice()
Mutant 214 in rule.ts: this.verbs replaced with this.verbs.concat()
Mutant 215 in rule.ts: this.verbs replaced with this.verbs.filter(Boolean)
[32m15:43:03 (2476) INFO Instrumenter[39m Instrumented 6 source file(s) with 216 mutant(s)
[32m15:43:04 (2476) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m15:43:05 (2476) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m15:43:05 (2476) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m15:43:09 (2476) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4183 ms, overhead 2 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~11m) 3/216 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~11m) 6/216 tested (0 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~11m) 9/216 tested (0 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~11m) 12/216 tested (0 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~11m) 15/216 tested (2 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~11m) 18/216 tested (2 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~10m) 21/216 tested (2 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~10m) 24/216 tested (4 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~10m) 28/216 tested (6 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~9m) 31/216 tested (6 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~9m) 34/216 tested (6 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~9m) 37/216 tested (6 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~9m) 41/216 tested (6 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~9m) 44/216 tested (6 survived, 0 timed out)
Mutation testing 21% (elapsed: ~2m, remaining: ~8m) 47/216 tested (6 survived, 0 timed out)
Mutation testing 23% (elapsed: ~2m, remaining: ~8m) 50/216 tested (6 survived, 0 timed out)
Mutation testing 24% (elapsed: ~2m, remaining: ~8m) 53/216 tested (6 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~8m) 56/216 tested (6 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~8m) 59/216 tested (7 survived, 0 timed out)
Mutation testing 28% (elapsed: ~3m, remaining: ~8m) 62/216 tested (7 survived, 0 timed out)
Mutation testing 30% (elapsed: ~3m, remaining: ~8m) 65/216 tested (9 survived, 0 timed out)
Mutation testing 31% (elapsed: ~3m, remaining: ~7m) 69/216 tested (9 survived, 0 timed out)
Mutation testing 33% (elapsed: ~3m, remaining: ~7m) 72/216 tested (9 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~7m) 75/216 tested (9 survived, 0 timed out)
Mutation testing 36% (elapsed: ~4m, remaining: ~7m) 78/216 tested (11 survived, 0 timed out)
Mutation testing 37% (elapsed: ~4m, remaining: ~7m) 81/216 tested (11 survived, 0 timed out)
Mutation testing 39% (elapsed: ~4m, remaining: ~6m) 85/216 tested (12 survived, 0 timed out)
Mutation testing 40% (elapsed: ~4m, remaining: ~6m) 88/216 tested (12 survived, 0 timed out)
Mutation testing 42% (elapsed: ~4m, remaining: ~6m) 91/216 tested (12 survived, 0 timed out)
Mutation testing 43% (elapsed: ~5m, remaining: ~6m) 94/216 tested (12 survived, 0 timed out)
Mutation testing 44% (elapsed: ~5m, remaining: ~6m) 97/216 tested (12 survived, 0 timed out)
Mutation testing 46% (elapsed: ~5m, remaining: ~6m) 101/216 tested (14 survived, 0 timed out)
Mutation testing 48% (elapsed: ~5m, remaining: ~5m) 104/216 tested (15 survived, 0 timed out)
Mutation testing 49% (elapsed: ~5m, remaining: ~5m) 107/216 tested (15 survived, 0 timed out)
Mutation testing 50% (elapsed: ~5m, remaining: ~5m) 110/216 tested (16 survived, 0 timed out)
Mutation testing 52% (elapsed: ~6m, remaining: ~5m) 113/216 tested (16 survived, 0 timed out)
Mutation testing 54% (elapsed: ~6m, remaining: ~5m) 117/216 tested (17 survived, 0 timed out)
Mutation testing 55% (elapsed: ~6m, remaining: ~5m) 120/216 tested (17 survived, 0 timed out)
Mutation testing 56% (elapsed: ~6m, remaining: ~4m) 123/216 tested (18 survived, 0 timed out)
Mutation testing 58% (elapsed: ~6m, remaining: ~4m) 127/216 tested (19 survived, 0 timed out)
Mutation testing 60% (elapsed: ~6m, remaining: ~4m) 130/216 tested (19 survived, 0 timed out)
Mutation testing 61% (elapsed: ~7m, remaining: ~4m) 133/216 tested (19 survived, 0 timed out)
Mutation testing 62% (elapsed: ~7m, remaining: ~4m) 136/216 tested (19 survived, 0 timed out)
Mutation testing 64% (elapsed: ~7m, remaining: ~3m) 140/216 tested (19 survived, 0 timed out)
Mutation testing 66% (elapsed: ~7m, remaining: ~3m) 143/216 tested (20 survived, 0 timed out)
Mutation testing 67% (elapsed: ~7m, remaining: ~3m) 146/216 tested (21 survived, 0 timed out)
Mutation testing 68% (elapsed: ~7m, remaining: ~3m) 149/216 tested (21 survived, 0 timed out)
Mutation testing 70% (elapsed: ~8m, remaining: ~3m) 153/216 tested (21 survived, 0 timed out)
Mutation testing 72% (elapsed: ~8m, remaining: ~3m) 156/216 tested (21 survived, 0 timed out)
Mutation testing 73% (elapsed: ~8m, remaining: ~2m) 159/216 tested (22 survived, 0 timed out)
Mutation testing 75% (elapsed: ~8m, remaining: ~2m) 163/216 tested (22 survived, 0 timed out)
Mutation testing 76% (elapsed: ~8m, remaining: ~2m) 166/216 tested (24 survived, 0 timed out)
Mutation testing 78% (elapsed: ~8m, remaining: ~2m) 169/216 tested (24 survived, 0 timed out)
Mutation testing 79% (elapsed: ~9m, remaining: ~2m) 172/216 tested (25 survived, 0 timed out)
Mutation testing 81% (elapsed: ~9m, remaining: ~2m) 176/216 tested (27 survived, 0 timed out)
Mutation testing 82% (elapsed: ~9m, remaining: ~1m) 179/216 tested (27 survived, 0 timed out)
Mutation testing 84% (elapsed: ~9m, remaining: ~1m) 182/216 tested (28 survived, 0 timed out)
Mutation testing 85% (elapsed: ~9m, remaining: ~1m) 185/216 tested (28 survived, 0 timed out)
Mutation testing 87% (elapsed: ~9m, remaining: ~1m) 188/216 tested (28 survived, 0 timed out)
Mutation testing 88% (elapsed: ~10m, remaining: ~1m) 192/216 tested (28 survived, 0 timed out)
Mutation testing 90% (elapsed: ~10m, remaining: ~1m) 195/216 tested (28 survived, 0 timed out)
Mutation testing 91% (elapsed: ~10m, remaining: <1m) 198/216 tested (28 survived, 0 timed out)
Mutation testing 93% (elapsed: ~10m, remaining: <1m) 201/216 tested (29 survived, 0 timed out)
Mutation testing 94% (elapsed: ~10m, remaining: <1m) 204/216 tested (29 survived, 0 timed out)
Mutation testing 95% (elapsed: ~10m, remaining: <1m) 207/216 tested (30 survived, 0 timed out)
Mutation testing 96% (elapsed: ~11m, remaining: <1m) 208/216 tested (30 survived, 1 timed out)
Mutation testing 97% (elapsed: ~11m, remaining: <1m) 211/216 tested (32 survived, 1 timed out)
Mutation testing 99% (elapsed: ~11m, remaining: <1m) 215/216 tested (32 survived, 1 timed out)

All tests
  ✓ All tests (killed 183)

[Survived] PrecomputedMutator
src/matcher.ts:29:9
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined) {

[Survived] PrecomputedMutator
src/matcher.ts:29:9
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined && spec.match(/^.+\/$/) !== '') {

[Survived] PrecomputedMutator
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/' + '\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/' + '\\' + '\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.toUpperCase()) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.+/) !== null && part.match(/:.+/) !== undefined) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:33:30
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.filter(rule => rule.matches(path, ctx))) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.map(rule => rule.clone())) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.toLowerCase(), ctx)) {

[Survived] PrecomputedMutator
src/policy.ts:61:44
-         ? new Policy(name, ...this.rules.map((rule) => rule.clone()))
+         ? new Policy(name, ...this.rules.map(rule => rule.clone(undefined)))

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.filter(policy => policy.name !== 'admin')) {

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy.name.toLowerCase(), policy)

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:30:28
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policymap.ts:41:24
-         ? policy.matches(path, ctx)
+         ? policy.matches(path.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of verbs.slice()) {

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of verbs.filter(verb => verb.length > 0)) {

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.values()) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.slice()) {

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.filter(verb => verb !== 'GET')) {

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:65:9
-       if (count > 0) {
+       if (count !== 0) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

[Survived] PrecomputedMutator
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (prop === null || match[index + 1] !== prop) {

[Survived] PrecomputedMutator
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (prop !== null && match[index + 1] !== prop) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   85.19 |      183 |         1 |         32 |        0 |        0 |
 matcher.ts   |   88.00 |       66 |         0 |          9 |        0 |        0 |
 policy.ts    |   80.95 |       34 |         0 |          8 |        0 |        0 |
 policymap.ts |   89.13 |       41 |         0 |          5 |        0 |        0 |
 rule.ts      |   81.13 |       42 |         1 |         10 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m15:54:32 (2476) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m15:54:32 (2476) INFO MutationTestExecutor[39m Done in 11 minutes 29 seconds.

real	11m30.797s
user	15m44.896s
sys	1m12.844s
