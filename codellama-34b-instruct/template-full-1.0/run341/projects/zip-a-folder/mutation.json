{"files":{"lib/ZipAFolder.ts":{"language":"typescript","mutants":[{"id":"2","mutatorName":"PrecomputedMutator","replacement":"o.compression !== COMPRESSION_LEVEL.high","status":"Timeout","location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"1","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.high","status":"Timeout","location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"0","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.low","status":"Timeout","location":{"end":{"column":61,"line":40},"start":{"column":13,"line":40}}},{"id":"5","mutatorName":"PrecomputedMutator","replacement":"{\n  src,\n  targetFilePath: tarFilePath,\n  format: 'tar',\n  someUnexpectedOption: true\n}","status":"Timeout","location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"4","mutatorName":"PrecomputedMutator","replacement":"{\n  src,\n  targetFilePath: tarFilePath,\n  format: 'tar',\n  customWriteStream: output\n}","status":"Timeout","location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"3","mutatorName":"PrecomputedMutator","replacement":"{\n  src,\n  targetFilePath: tarFilePath,\n  format: 'zip',\n  zipAFolderOptions\n}","status":"Timeout","location":{"end":{"column":107,"line":41},"start":{"column":39,"line":41}}},{"id":"6","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.medium","status":"Timeout","location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"8","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions?.customWriteStream && !targetFilePath","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          183 |       output = zipAFolderOptions?.customWriteStream;\n          184 |     } else {\n        > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          186 |     }\n          187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing \n---------------|---------|----------|---------|---------|---------------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s         \n---------------|---------|----------|---------|---------|---------------------------\n\nAll files      |   89.85 |    48.55 |   91.66 |    89.7 |                           \n\n ZipAFolder.ts |   89.85 |    48.55 |   91.66 |    89.7 | 26,41,171,179,183,195-196 \n\n---------------|---------|----------|---------|---------|---------------------------\n\nwith multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          183 |       output = zipAFolderOptions?.customWriteStream;\n          184 |     } else {\n        > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          186 |     }\n          187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › ZIP test custom \nwritestream with zipfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                                                                                                 ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:169:241)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                                                                                                 ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:169:241)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       20 failed, 1 skipped, 1 passed, 22 total\nSnapshots:   0 total\nTime:        4.497 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"10","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions?.customWriteStream || !targetFilePath","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"The \\\"path\\\" argument must be of type string. Received undefined\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                                                                                                                                                                                 ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:169:241)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:36:24)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:37:19)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          183 |       output = zipAFolderOptions?.customWriteStream;\n          184 |     } else {\n        > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          186 |     }\n          187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:8\n---------------|---------|----------|---------|---------|---------------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s         \n---------------|---------|----------|---------|---------|---------------------------\n\nAll files      |   89.85 |    47.82 |   91.66 |    89.7 |                           \n\n ZipAFolder.ts |   89.85 |    47.82 |   91.66 |    89.7 | 26,41,171,179,183,195-196 \n\n---------------|---------|----------|---------|---------|---------------------------\n\n6:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          183 |       output = zipAFolderOptions?.customWriteStream;\n          184 |     } else {\n        > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          186 |     }\n          187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? arc\nhiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                                                                                                 ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:169:241)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                                                                                                 ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:169:241)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       21 failed, 1 skipped, 22 total\nSnapshots:   0 total\nTime:        4.614 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"13","mutatorName":"PrecomputedMutator","replacement":"'my-custom-dirname'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.106 s)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"\\\"my-custom-dirname\\\" is not a function\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                  ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"\\\"my-custom-dirname\\\" is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"\\\"my-custom-dirname\\\" is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    82.6 |    37.31 |   91.66 |   82.35 |                       \n\n ZipAFolder.ts |    82.6 |    37.31 |   91.66 |   82.35 | 26,41,170-181,195-196 \n\n---------------|---------|----------|---------|---------|-----------------------\n\n) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"\\\"my-custom-dirname\\\" is not a function\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                  ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"\\\"my-custom-dirname\\\" is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMa\ntch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"\\\"my-custom-dirname\\\" is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: \"my-custom-dirname\" is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:82)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       16 failed, 1 skipped, 5 passed, 22 total\nSnapshots:   0 total\nTime:        5.291 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":115},"start":{"column":44,"line":115}}},{"id":"12","mutatorName":"PrecomputedMutator","replacement":"null","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.13 s)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"null is not a function\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                                                                  ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"null is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"null is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                \n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    82.6 |    37.68 |   91.66 |   82.35 |                       \n\n ZipAFolder.ts |    82.6 |    37.68 |   91.66 |   82.35 | 26,41,170-181,195-196 \n---------------|---------|----------|---------|---------|-----------------------\n\n  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"null is not a function\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                                                                  ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expec\nted)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"null is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"null is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: null is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                  ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.compress (lib/ZipAFolder.ts:169:130)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       16 failed, 1 skipped, 5 passed, 22 total\nSnapshots:   0 total\nTime:        5.369 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":115},"start":{"column":44,"line":115}}},{"id":"11","mutatorName":"PrecomputedMutator","replacement":"undefined","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.102 s)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"undefined is not a function\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                                                                                                              ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"undefined is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"undefined is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targ\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    82.6 |    38.04 |   91.66 |   82.35 |                       \n\n ZipAFolder.ts |    82.6 |    38.04 |   91.66 |   82.35 | 26,41,170-181,195-196 \n\n---------------|---------|----------|---------|---------|-----------------------\n\netFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"undefined is not a function\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                                                                                                              ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                  \n                            ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"undefined is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"undefined is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: undefined is not a function\n\n      167 |     let output: WriteStream;\n      168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n    > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n          |                                                                                                                                                                              ^\n      170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n      171 |         throw new Error('Source and target folder must be different.');\n      172 |       }\n\n      at Function.undefined [as compress] (lib/ZipAFolder.ts:169:174)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       16 failed, 1 skipped, 5 passed, 22 total\nSnapshots:   0 total\nTime:        5.443 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":115},"start":{"column":44,"line":115}}},{"id":"9","mutatorName":"PrecomputedMutator","replacement":"!zipAFolderOptions?.customWriteStream && !targetFilePath","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.586 s)\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"The \\\"path\\\" argument must be of type string. Received undefined\"\n\n          167 |     let output: WriteStream;\n          168 |     if (stryMutAct_9fa48(\"10\") ? zipAFolderOptions?.customWriteStream || !targetFilePath : stryMutAct_9fa48(\"9\") ? !zipAFolderOptions?.customWriteStream && !targetFilePath : stryMutAct_9fa48(\"8\") ? zipAFolderOptions?.customWriteStream && !targetFilePath : (stryCov_9fa48(\"8\", \"9\", \"10\"), !zipAFolderOptions?.customWriteStream && targetFilePath)) {\n        > 169 |       const targetBasePath: string = stryMutAct_9fa48(\"13\") ? 'my-custom-dirname'(targetFilePath) : stryMutAct_9fa48(\"12\") ? null(targetFilePath) : stryMutAct_9fa48(\"11\") ? undefined(targetFilePath) : (stryCov_9fa48(\"11\", \"12\", \"13\"), path.dirname(targetFilePath));\n              |                                                                                                                                                                                                                                                 ^\n          170 |       if (stryMutAct_9fa48(\"16\") ? targetBasePath.includes(src) : stryMutAct_9fa48(\"15\") ? targetBasePath.indexOf(src) === 0 : stryMutAct_9fa48(\"14\") ? targetBasePath !== src : (stryCov_9fa48(\"14\", \"15\", \"16\"), targetBasePath === src)) {\n          171 |         throw new Error('Source and target folder must be different.');\n          172 |       }\n\n      at Function.dirname [as compress] (lib/ZipAFolder.ts:169:241)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:36:24)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:37:19)\n\n  ● Zip-A-Folder Test › ZIP test folder and zip target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          183 |       output = zipAFolderOptions?.customWriteStream;\n          184 |     } else {\n        > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          186 |     }\n          187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:50:102)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:8\n---------------|---------|----------|---------|---------|-----------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s     \n---------------|---------|----------|---------|---------|-----------------------\n\nAll files      |    82.6 |    37.68 |   91.66 |   82.35 |                       \n\n ZipAFolder.ts |    82.6 |    37.68 |   91.66 |   82.35 | 26,41,170-181,195-196 \n\n---------------|---------|----------|---------|---------|-----------------------\n\n6:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder and tar target in same directory should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /Source and target folder must be different./\n    Received message: \"You must either provide a target file path or a custom write stream to write to.\"\n\n          183 |       output = zipAFolderOptions?.customWriteStream;\n          184 |     } else {\n        > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n              |             ^\n          186 |     }\n          187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:112:102)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? arc\nhiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"You must either provide a target file path or a custom write stream to write to.\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    You must either provide a target file path or a custom write stream to write to.\n\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n    > 185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n          |             ^\n      186 |     }\n      187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n      188 |     return new Promise((resolve, reject) => {\n\n      at Function.compress (lib/ZipAFolder.ts:185:13)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       17 failed, 1 skipped, 4 passed, 22 total\nSnapshots:   0 total\nTime:        5.715 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":114},"start":{"column":13,"line":114}}},{"id":"7","mutatorName":"PrecomputedMutator","replacement":"o.compression === COMPRESSION_LEVEL.high","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.642 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 221016\n    Received:   24232286\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.81 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.81 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        7.798 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":61,"line":74},"start":{"column":13,"line":74}}},{"id":"18","mutatorName":"PrecomputedMutator","replacement":"src === ''","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.233 s)\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n   \n---------------|---------|----------|---------|---------|---------------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s         \n---------------|---------|----------|---------|---------|---------------------------\n\nAll files      |   89.85 |     41.3 |   91.66 |    89.7 |                           \n\n ZipAFolder.ts |   89.85 |     41.3 |   91.66 |    89.7 | 26,41,175-177,181,195-196 \n---------------|---------|----------|---------|---------|---------------------------\n\n > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:18)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:18)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFil\nePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:18)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:18)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        5.352 s, estimated 6 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":28,"line":121},"start":{"column":22,"line":121}}},{"id":"14","mutatorName":"PrecomputedMutator","replacement":"targetBasePath !== src","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"15","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.indexOf(src) === 0","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"16","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.includes(src)","status":"Timeout","location":{"end":{"column":39,"line":117},"start":{"column":17,"line":117}}},{"id":"17","mutatorName":"PrecomputedMutator","replacement":"isGlob(src)","status":"Timeout","location":{"end":{"column":33,"line":121},"start":{"column":21,"line":121}}},{"id":"19","mutatorName":"PrecomputedMutator","replacement":"src.split(',').length","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.161 s)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json, **/*.txt'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '**/*.json, **/*.txt'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    94.2 |    50.72 |   91.66 |   94.11 |                   \n\n ZipAFolder.ts |    94.2 |    50.72 |   91.66 |   94.11 | 26,41,195-196     \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 1 skipped, 17 passed, 22 total\nSnapshots:   0 total\nTime:        8.322 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":121},"start":{"column":29,"line":121}}},{"id":"20","mutatorName":"PrecomputedMutator","replacement":"src.toUpperCase()","status":"Timeout","location":{"end":{"column":32,"line":121},"start":{"column":29,"line":121}}},{"id":"22","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(src | fs.constants.W_OK)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.226 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-l\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    49.63 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    49.63 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nine no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (2)\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        5.483 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":69,"line":122},"start":{"column":27,"line":122}}},{"id":"21","mutatorName":"PrecomputedMutator","replacement":"src.repeat(2)","status":"Timeout","location":{"end":{"column":32,"line":121},"start":{"column":29,"line":121}}},{"id":"24","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(src ^ fs.constants.R_OK)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.548 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-l\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    48.91 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    48.91 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nine no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received type number (4)\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        5.699 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":69,"line":122},"start":{"column":27,"line":122}}},{"id":"25","mutatorName":"PrecomputedMutator","replacement":"fs.promises.exist","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.143 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: fs.promises.exist is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: fs.promises.exist is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: fs.promises.exist is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.exist is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.exist is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: fs.promises.exist is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? ta\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    48.55 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    48.55 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nrgetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: fs.promises.exist is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: fs.promises.exist is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.exist is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.exist is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        6.298 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":45,"line":122},"start":{"column":27,"line":122}}},{"id":"26","mutatorName":"PrecomputedMutator","replacement":"fs.promises.readable","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.268 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: fs.promises.readable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: fs.promises.readable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: fs.promises.readable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.readable is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.readable is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: fs.promises.readable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAc\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    48.18 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    48.18 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nt_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: fs.promises.readable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: fs.promises.readable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.readable is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.readable is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        6.459 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":45,"line":122},"start":{"column":27,"line":122}}},{"id":"23","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(!src && fs.constants.R_OK)","status":"Timeout","location":{"end":{"column":69,"line":122},"start":{"column":27,"line":122}}},{"id":"27","mutatorName":"PrecomputedMutator","replacement":"fs.promises.writable","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (5.848 s)\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: fs.promises.writable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: fs.promises.writable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: fs.promises.writable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.writable is not a function\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.writable is not a function\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: fs.promises.writable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"4\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    47.82 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    47.82 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\n4\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: fs.promises.writable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: fs.promises.writable is not a function\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.writable is not a function\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: fs.promises.writable is not a function\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        5.962 s, estimated 9 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":45,"line":122},"start":{"column":27,"line":122}}},{"id":"29","mutatorName":"PrecomputedMutator","replacement":"\"src\"","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access 'src'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'src'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'src'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access 'src'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access 'src'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.44 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.44 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\n9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access 'src'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 1 skipped, 15 passed, 22 total\nSnapshots:   0 total\nTime:        4.721 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"28","mutatorName":"PrecomputedMutator","replacement":"ssrc","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ssrc is not defined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:26)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ssrc is not defined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:131:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:26)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ssrc is not defined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:18)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: ssrc is not defined\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: ssrc is not defined\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ssrc is not defined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |    \n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    50.72 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    50.72 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\n } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:26)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ssrc is not defined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:82:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:26)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ssrc is not defined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at compress (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:18)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: ssrc is not defined\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: ssrc is not defined\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        5.036 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"30","mutatorName":"PrecomputedMutator","replacement":"undefined","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received undefined\"\n\n      84 |             await zipafolder.zip(path.resolve(__dirname, 'notexisting/'), testZIP);\n      85 |         } catch (e: any) {\n    > 86 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      87 |         }\n      88 |     });\n      89 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:86:31)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received undefined\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |    97.1 |    51.08 |     100 |   97.05 |                   \n ZipAFolder.ts |    97.1 |    51.08 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\n-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test folder failing\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received undefined\"\n\n      146 |             await zipafolder.tar(path.resolve(__dirname, 'notexisting/'), testTAR);\n      147 |         } catch (e: any) {\n    > 148 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      149 |         }\n      150 |     });\n      151 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:148:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"path\\\" argument must be of type string or an instance of Buffer or URL. Received undefined\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        5.023 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":49,"line":122},"start":{"column":46,"line":122}}},{"id":"31","mutatorName":"PrecomputedMutator","replacement":"fs.constants.W_OK","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.729 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 117182\n    Received:   455440\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    52.17 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    52.17 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        7.93 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"32","mutatorName":"PrecomputedMutator","replacement":"(fs.constants.R_OK | fs.constants.W_OK) ^ fs.constants.W_OK","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (8.001 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 47096\n    Received:   455653\n\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n      71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n    > 72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n         |                           ^\n      73 |     });\n      74 |\n      75 |     it('ZIP test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:72:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.81 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.81 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        8.194 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"33","mutatorName":"PrecomputedMutator","replacement":"fs.constants.X_OK","status":"Survived","testsCompleted":1,"location":{"end":{"column":68,"line":122},"start":{"column":51,"line":122}}},{"id":"34","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK)","status":"Survived","testsCompleted":1,"location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"37","mutatorName":"PrecomputedMutator","replacement":"targetBasePath + '../'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   92.75 |    49.27 |   91.66 |   92.64 |                   \n\n ZipAFolder.ts |   92.75 |    49.27 |   91.66 |   92.64 | 26,41,181,195-196 \n\n---------------|---------|----------|---------|---------|-------------------\n\n/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |     \n    await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder/.stryker-tmp/sandbox848803/test../'\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        4.727 s, estimated 5 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"35","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(targetBasePath, fs.constants.X_OK)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.415 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 132913\n    Received:   455440\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    49.63 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    49.63 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        7.541 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"36","mutatorName":"PrecomputedMutator","replacement":"fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.764 s)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: EROFS: read-only file system, access '/'\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: EROFS: read-only file system, access '/'\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    49.27 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    49.27 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        7.907 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":96,"line":124},"start":{"column":23,"line":124}}},{"id":"39","mutatorName":"PrecomputedMutator","replacement":"''","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBas\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   92.75 |    48.55 |   91.66 |   92.64 |                   \n\n ZipAFolder.ts |   92.75 |    48.55 |   91.66 |   92.64 | 26,41,181,195-196 \n\n---------------|---------|----------|---------|---------|-------------------\n\nePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\n\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: ENOENT: no such file or directory, access ''\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        4.943 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"40","mutatorName":"PrecomputedMutator","replacement":"``","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test folder into a zipfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"mode\\\" argument must be of type number. Received type string ('')\"\n\n      93 |             await zipafolder.zip(path.resolve(__dirname, 'data/'), testnotexistingZIP);\n      94 |         } catch (e: any) {\n    > 95 |             expect(e.message).toMatch(/no such file or directory/);\n         |                               ^\n      96 |         }\n      97 |     });\n      98 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:95:31)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolder\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   92.75 |    49.27 |   91.66 |   92.64 |                   \n\n ZipAFolder.ts |   92.75 |    49.27 |   91.66 |   92.64 | 26,41,181,195-196 \n\n---------------|---------|----------|---------|---------|-------------------\n\nOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test folder into a gzipped tarfile in a notexisting folder\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /no such file or directory/\n    Received string:  \"Permission error: The \\\"mode\\\" argument must be of type number.\n Received type string ('')\"\n\n      155 |             await zipafolder.tar(path.resolve(__dirname, 'data/'), testnotexistingTAR);\n      156 |         } catch (e: any) {\n    > 157 |             expect(e.message).toMatch(/no such file or directory/);\n          |                               ^\n      158 |         }\n      159 |     });\n      160 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:157:31)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    Permission error: The \"mode\" argument must be of type number. Received type string ('')\n\n      177 |         await (stryMutAct_9fa48(\"36\") ? fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK) : stryMutAct_9fa48(\"35\") ? fs.promises.access(targetBasePath, fs.constants.X_OK) : stryMutAct_9fa48(\"34\") ? fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK) : (stryCov_9fa48(\"34\", \"35\", \"36\"), fs.promises.access(stryMutAct_9fa48(\"39\") ? '' : stryMutAct_9fa48(\"38\") ? targetBasePath.toUpperCase() : stryMutAct_9fa48(\"37\") ? targetBasePath + '../' : (stryCov_9fa48(\"37\", \"38\", \"39\"), targetBasePath), stryMutAct_9fa48(\"42\") ? fs.constants.F_OK : stryMutAct_9fa48(\"41\") ? fs.constants.X_OK : stryMutAct_9fa48(\"40\") ? `` : (stryCov_9fa48(\"40\", \"41\", \"42\"), fs.constants.R_OK | fs.constants.W_OK)))); //eslint-disable-line no-bitwise\n      178 |       } catch (e: any) {\n    > 179 |         throw new Error(`Permission error: ${e.message}`);\n          |               ^\n      180 |       }\n      181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n\n      at Function.compress (lib/ZipAFolder.ts:179:15)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       12 failed, 1 skipped, 9 passed, 22 total\nSnapshots:   0 total\nTime:        4.672 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":95,"line":124},"start":{"column":58,"line":124}}},{"id":"38","mutatorName":"PrecomputedMutator","replacement":"targetBasePath.toUpperCase()","status":"Survived","testsCompleted":1,"location":{"end":{"column":56,"line":124},"start":{"column":42,"line":124}}},{"id":"42","mutatorName":"PrecomputedMutator","replacement":"fs.constants.F_OK","status":"Survived","testsCompleted":1,"location":{"end":{"column":95,"line":124},"start":{"column":58,"line":124}}},{"id":"41","mutatorName":"PrecomputedMutator","replacement":"fs.constants.X_OK","status":"Survived","testsCompleted":1,"location":{"end":{"column":95,"line":124},"start":{"column":58,"line":124}}},{"id":"45","mutatorName":"PrecomputedMutator","replacement":"fs.createWriteStream('out.txt')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOpt\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    94.2 |    49.63 |   91.66 |   94.11 |                   \n\n ZipAFolder.ts |    94.2 |    49.63 |   91.66 |   94.11 | 26,41,195-196     \n\n---------------|---------|----------|---------|---------|-------------------\n\nions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of WriteStream\n\n      179 |         throw new Error(`Permission error: ${e.message}`);\n      180 |       }\n    > 181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n          |                   ^\n      182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n      183 |       output = zipAFolderOptions?.customWriteStream;\n      184 |     } else {\n\n      at Function.createWriteStream [as compress] (lib/ZipAFolder.ts:181:19)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        5.204 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":57,"line":128},"start":{"column":43,"line":128}}},{"id":"43","mutatorName":"PrecomputedMutator","replacement":"targetFilePath.toUpperCase()","status":"Timeout","location":{"end":{"column":57,"line":128},"start":{"column":43,"line":128}}},{"id":"44","mutatorName":"PrecomputedMutator","replacement":"'not a real file path'","status":"Survived","testsCompleted":1,"location":{"end":{"column":57,"line":128},"start":{"column":43,"line":128}}},{"id":"46","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions !== null && zipAFolderOptions.customWriteStream","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.914 s)\n\n  ● Zip-A-Folder Test › Called without a targetFilePath or a customWriteStream should throw an error\n\n    expect(received).rejects.toThrow(expected)\n\n    Expected pattern: /You must either provide a target file path or a custom write stream to write to./\n    Received message: \"Cannot read properties of undefined (reading 'customWriteStream')\"\n\n          180 |       }\n          181 |       output = fs.createWriteStream(stryMutAct_9fa48(\"45\") ? fs.createWriteStream('out.txt') : stryMutAct_9fa48(\"44\") ? 'not a real file path' : stryMutAct_9fa48(\"43\") ? targetFilePath.toUpperCase() : (stryCov_9fa48(\"43\", \"44\", \"45\"), targetFilePath));\n        > 182 |     } else if (stryMutAct_9fa48(\"48\") ? !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream : stryMutAct_9fa48(\"47\") ? zipAFolderOptions?.customWriteStream : stryMutAct_9fa48(\"46\") ? zipAFolderOptions !== null && zipAFolderOptions.customWriteStream : (stryCov_9fa48(\"46\", \"47\", \"48\"), zipAFolderOptions && zipAFolderOptions.customWriteStream)) {\n              |                                                                                                                                                                                                                                                                                       ^\n          183 |       output = zipAFolderOptions?.customWriteStream;\n          184 |     } else {\n          185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n\n      at Function.customWriteStream [as compress] (lib/ZipAFolder.ts:182:279)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:38:33)\n      at Object.toThrow (../../node_modules/expect/build/index.js:218:22)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:38:91)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    52.17 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    52.17 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        8.093 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"49","mutatorName":"PrecomputedMutator","replacement":"archiver(`format, {gzip: true, gzipOptions: {level: 1}}`)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom writ\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   84.05 |    34.78 |   83.33 |   83.82 |                   \n\n ZipAFolder.ts |   84.05 |    34.78 |   83.33 |   83.82 | 26,41,188-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\ne stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: f\nalse, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \n\"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? arc\nhiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    create(format, {gzip: true, gzipOptions: {level: 1}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                         ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:233)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        3.642 s, estimated 5 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"47","mutatorName":"PrecomputedMutator","replacement":"zipAFolderOptions?.customWriteStream","status":"Survived","testsCompleted":1,"location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"50","mutatorName":"PrecomputedMutator","replacement":"archiver(`format, {gzip: false, gzipOptions: {level: 9}}`)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: \n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   84.05 |    34.42 |   83.33 |   83.82 |                   \n\n ZipAFolder.ts |   84.05 |    34.42 |   83.33 |   83.82 | 26,41,188-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\n9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |  \n                                                                                                                                                 ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa4\n8(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('\nerror', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    create(format, {gzip: false, gzipOptions: {level: 9}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                   ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:147)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.029 s, estimated 5 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"51","mutatorName":"PrecomputedMutator","replacement":"archiver(`format, {store: true, zlib: {level: 0}}`)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") \n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |   84.05 |    34.05 |   83.33 |   83.82 |                   \n\n ZipAFolder.ts |   84.05 |    34.05 |   83.33 |   83.82 | 26,41,188-201     \n---------------|---------|----------|---------|---------|-------------------\n\n? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"\n62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (s\ntryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    create(format, {store: true, zlib: {level: 0}}): format not registered\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 1\n87 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                    ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.Object.<anonymous>.vending.create (../../node_modules/archiver/index.js:39:11)\n      at vending (../../node_modules/archiver/index.js:21:18)\n      at Function.archiver (lib/ZipAFolder.ts:187:68)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        3.77 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":86,"line":135},"start":{"column":47,"line":135}}},{"id":"52","mutatorName":"PrecomputedMutator","replacement":"archiver.finish","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Fun\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   84.05 |    37.68 |   83.33 |   83.82 |                   \n ZipAFolder.ts |   84.05 |    37.68 |   83.33 |   83.82 | 26,41,188-201     \n---------------|---------|----------|---------|---------|-------------------\n\nction.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\n\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\"\n, \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? outpu\nt.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.445 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":55,"line":135},"start":{"column":47,"line":135}}},{"id":"48","mutatorName":"PrecomputedMutator","replacement":"!(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream","status":"Timeout","location":{"end":{"column":76,"line":129},"start":{"column":20,"line":129}}},{"id":"53","mutatorName":"PrecomputedMutator","replacement":"archiver.drain","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Fun\nction.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   84.05 |    37.31 |   83.33 |   83.82 |                   \n\n ZipAFolder.ts |   84.05 |    37.31 |   83.33 |   83.82 | 26,41,188-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\n\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\"\n, \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? outpu\nt.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.55 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":55,"line":135},"start":{"column":47,"line":135}}},{"id":"54","mutatorName":"PrecomputedMutator","replacement":"archiver.finalize","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Fun\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |   84.05 |    36.95 |   83.33 |   83.82 |                   \n\n ZipAFolder.ts |   84.05 |    36.95 |   83.33 |   83.82 | 26,41,188-201     \n---------------|---------|----------|---------|---------|-------------------\n\nction.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\n\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\"\n, \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? outpu\nt.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      185 |       throw new Error('You must either provide a target file path or a custom write stream to write to.');\n      186 |     }\n    > 187 |     const zipArchive: archiver.Archiver = stryMutAct_9fa48(\"51\") ? archiver(`format, {store: true, zlib: {level: 0}}`) : stryMutAct_9fa48(\"50\") ? archiver(`format, {gzip: false, gzipOptions: {level: 9}}`) : stryMutAct_9fa48(\"49\") ? archiver(`format, {gzip: true, gzipOptions: {level: 1}}`) : (stryCov_9fa48(\"49\", \"50\", \"51\"), (stryMutAct_9fa48(\"54\") ? archiver.finalize : stryMutAct_9fa48(\"53\") ? archiver.drain : stryMutAct_9fa48(\"52\") ? archiver.finish : (stryCov_9fa48(\"52\", \"53\", \"54\"), archiver))(format, stryMutAct_9fa48(\"57\") ? 0 : stryMutAct_9fa48(\"56\") ? undefined : stryMutAct_9fa48(\"55\") ? null : (stryCov_9fa48(\"55\", \"56\", \"57\"), archiverOptions || {})));\n          |n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n      190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n\n      at Function.compress (lib/ZipAFolder.ts:187:501)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.523 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":55,"line":135},"start":{"column":47,"line":135}}},{"id":"55","mutatorName":"PrecomputedMutator","replacement":"null","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.368 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 583099\n    Received:   583099\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 8653824\n    Received:   24729600\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.44 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    51.44 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        7.515 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"56","mutatorName":"PrecomputedMutator","replacement":"undefined","status":"Timeout","location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"57","mutatorName":"PrecomputedMutator","replacement":"0","status":"Timeout","location":{"end":{"column":85,"line":135},"start":{"column":64,"line":135}}},{"id":"58","mutatorName":"PrecomputedMutator","replacement":"output.on('finish', resolve)","status":"Timeout","location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"59","mutatorName":"PrecomputedMutator","replacement":"output.on('end', resolve)","status":"Timeout","location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"60","mutatorName":"PrecomputedMutator","replacement":"output.on('error', resolve)","status":"Timeout","location":{"end":{"column":40,"line":138},"start":{"column":13,"line":138}}},{"id":"61","mutatorName":"PrecomputedMutator","replacement":"output.off","status":"Timeout","location":{"end":{"column":22,"line":138},"start":{"column":13,"line":138}}},{"id":"63","mutatorName":"PrecomputedMutator","replacement":"'finish'","status":"Survived","testsCompleted":1,"location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"66","mutatorName":"PrecomputedMutator","replacement":"output.on('finish')","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stry\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    88.4 |    41.66 |   91.66 |   88.23 |                   \n\n ZipAFolder.ts |    88.4 |    41.66 |   91.66 |   88.23 | 26,41,191-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\nMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/Zip\nAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: The \"listener\" argument must be of type function. Received undefined\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryM\nutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                                                                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at on (lib/ZipAFolder.ts:190:206)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        3.721 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":39,"line":139},"start":{"column":13,"line":139}}},{"id":"64","mutatorName":"PrecomputedMutator","replacement":"reject","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (6.073 s)\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    thrown: undefined\n\n      53 |     });\n      54 |\n    > 55 |     it('ZIP test folder', async () => {\n         |     ^\n      56 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testZIP);\n      57 |\n      58 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:55:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    thrown: undefined\n\n      59 |     });\n      60 |\n    > 61 |     it('ZIP test folder using compression rate', async () => {\n         |     ^\n      62 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDZIP, {\n      63 |             compression: COMPRESSION_LEVEL.uncompressed,\n      64 |         });\n\n      at test/tests-ZipAFolder.ts:61:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    thrown: undefined\n\n      73 |     });\n      74 |\n    > 75 |     it('ZIP test folder direct via constant', async () => {\n         |     ^\n      76 |         await zip(path.resolve(__dirname, 'data/'), testZIP);\n      77 |\n      78 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:75:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    thrown: undefined\n\n       97 |     });\n       98 |\n    >  99 |     it('ZIP test globbing', async () => {\n          |     ^\n      100 |         await zip('**/*.json', testGlobZIP);\n      101 |\n      102 |         expect(fs.existsSync(testGlobZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:99:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    thrown: undefined\n\n      103 |     });\n      104 |\n    > 105 |     it('ZIP test globbing with multiple paths', async () => {\n          |     ^\n      106 |         await zip('**/*.json, **/*.txt', testGlobMultiZIP);\n      107 |\n      108 |         expect(fs.existsSync(testGlobMultiZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:105:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    thrown: undefined\n\n      115 |     });\n      116 |\n    > 117 |     it('TGZ test folder', async () => {\n          |     ^\n      118 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testTAR);\n      119 |\n      120 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:117:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    thrown: undefined\n\n      121 |     });\n      122 |\n    > 123 |     it('TGZ test folder using compression rate', async () => {\n          |     ^\n      124 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDTAR, {\n      125 |             compression: COMPRESSION_LEVEL.uncompressed,\n      126 |         });\n\n      at test/tests-ZipAFolder.ts:123:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    thrown: undefined\n\n      135 |     });\n      136 |\n    > 137 |     it('TGZ test folder direct via constant', async () => {\n          |     ^\n      138 |         await tar(path.resolve(__dirname, 'data/'), testTAR);\n      139 |\n      140 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:137:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    thrown: undefined\n\n      159 |     });\n      160 |\n    > 161 |     it('ZIP test custom writestream with zipfilepath empty string', async () => {\n          |     ^\n      162 |         const customWS = fs.createWriteStream('test/123.zip');\n      163 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      164 |         expect(fs.existsSync('test/123.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:161:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    thrown: undefined\n\n      165 |     });\n      166 |\n    > 167 |     it('ZIP test custom writestream with zipfilepath undefined', async () => {\n          |     ^\n      168 |         const customWS = fs.createWriteStream('test/1234.zip');\n      169 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      170 |         expect(fs.existsSync('test/1234.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:167:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    thrown: undefined\n\n      171 |     });\n      172 |\n    > 173 |     it('TGZ test custom writestream with tarfilepath empty string', async () => {\n          |     ^\n      174 |         const customWS = fs.createWriteStream('test/123.tgz');\n      175 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      176 |         expect(fs.existsSync('test/123.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:173:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    thrown: undefined\n\n      177 |     });\n      178 |\n    > 179 |     it('TGZ test custom writestream with tarfilepath undefined', async () => {\n          |     ^\n      180 |         const customWS = fs.createWriteStream('test/1234.tgz');\n      181 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      182 |         expect(fs.existsSync('test/1234.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:179:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    thrown: undefined\n\n      183 |     });\n      184 |\n    > 185 |     it('TGZ test globbing', async () => {\n          |     ^\n      186 |         await tar('**/*.json', testGlobTAR);\n      187 |\n      188 |         expect(fs.existsSync(testGlobTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:185:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    thrown: undefined\n\n      189 |     });\n      190 |\n    > 191 |     it('TGZ test globbing with multiple paths', async () => {\n          |     ^\n      192 |         await tar('**/*.json, **/*.txt', testGlobMultiTAR);\n      193 |\n      194 |         expect(fs.existsSync(testGlobMultiTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:191:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    52.17 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    52.17 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        6.185 s, estimated 8 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":39,"line":138},"start":{"column":32,"line":138}}},{"id":"62","mutatorName":"PrecomputedMutator","replacement":"'end'","status":"Timeout","location":{"end":{"column":30,"line":138},"start":{"column":23,"line":138}}},{"id":"68","mutatorName":"PrecomputedMutator","replacement":"output.error","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: tru\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    88.4 |    40.94 |   91.66 |   88.23 |                   \n\n ZipAFolder.ts |    88.4 |    40.94 |   91.66 |   88.23 | 26,41,191-201     \n---------------|---------|----------|---------|---------|-------------------\n\ne\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? reso\nlve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: output.error is not a function\n\n      188 |     return new Promise((resolve, reject) => {\n      189 |       stryMutAct_9fa48(\"61\") ? output.off('close', resolve) : stryMutAct_9fa48(\"60\") ? output.on('error', resolve) : stryMutAct_9fa48(\"59\") ? output.on('end', resolve) : stryMutAct_9fa48(\"58\") ? output.on('finish', resolve) : (stryCov_9fa48(\"58\", \"59\", \"60\", \"61\"), output.on(stryMutAct_9fa48(\"63\") ? 'finish' : stryMutAct_9fa48(\"62\") ? 'end' : (stryCov_9fa48(\"62\", \"63\"), 'close'), stryMutAct_9fa48(\"64\") ? reject : (stryCov_9fa48(\"64\"), resolve)));\n    > 190 |       stryMutAct_9fa48(\"69\") ? output.end('error', reject) : stryMutAct_9fa48(\"68\") ? output.error('error', reject) : stryMutAct_9fa48(\"67\") ? output.off('error', reject) : stryMutAct_9fa48(\"66\") ? output.on('finish') : stryMutAct_9fa48(\"65\") ? output.on('different', resolve) : (stryCov_9fa48(\"65\", \"66\", \"67\", \"68\", \"69\"), output.on(stryMutAct_9fa48(\"72\") ? 'end' : stryMutAct_9fa48(\"71\") ? 'close' : stryMutAct_9fa48(\"70\") ? 'finish' : (stryCov_9fa48(\"70\", \"71\", \"72\"), 'error'), stryMutAct_9fa48(\"74\") ? console.error : stryMutAct_9fa48(\"73\") ? resolve : (stryCov_9fa48(\"73\", \"74\"), reject)));\n          |                                                                                              ^\n      191 |       zipArchive.pipe(output);\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n\n      at error (lib/ZipAFolder.ts:190:94)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        3.932 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":139},"start":{"column":13,"line":139}}},{"id":"65","mutatorName":"PrecomputedMutator","replacement":"output.on('different', resolve)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.674 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   465454\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    50.36 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    50.36 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        7.827 s, estimated 8 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":39,"line":139},"start":{"column":13,"line":139}}},{"id":"67","mutatorName":"PrecomputedMutator","replacement":"output.off","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.319 s)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 0\n    Received:   465454\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    49.63 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    49.63 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        7.518 s, estimated 8 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":139},"start":{"column":13,"line":139}}},{"id":"69","mutatorName":"PrecomputedMutator","replacement":"output.end","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    write after end\n\n      at Archiver.ondata (../../node_modules/readable-stream/lib/_stream_readable.js:629:20)\n      at addChunk (../../node_modules/readable-stream/lib/_stream_readable.js:279:12)\n      at readableAddChunk (../../node_modules/readable-stream/lib/_stream_readable.js:262:11)\n      at Archiver.Object.<anonymous>.Readable.push (../../node_modules/readable-stream/lib/_stream_readable.js:228:10)\n      at Archiver.Object.<anonymous>.Transform.push (../../node_modules/readable-stream/lib/_stream_transform.js:132:32)\n      at Archiver.afterTransform (../../node_modules/readable-stream/lib/_stream_transform.js:85:10)\n      at Archiver.Object.<anonymous>.Archiver._transform (../../node_modules/archiver/lib/core.js:479:3)\n      at Archiver.Object.<anonymous>.Transform._read (../../node_modules/readable-stream/lib/_stream_transform.js:166:10)\n      at Archiver.Object.<anonymous>.Transform._write (../../node_modules/readable-stream/lib/_stream_transform.js:155:83)\n      at doWrite (../../node_modules/readable-stream/lib/_stream_writable.js:390:139)\n      at writeOrBuffer (../../node_modules/readable-stream/lib/_stream_writable.js:381:5)\n      at Archiver.Object.<anonymous>.Writable.write (../../node_modules/readable-stream/lib/_stream_writable.js:302:11)\n      at Object.<anonymous>.module.exports.ondata (../../node_modules/readable-stream/lib/_stream_readable.js:629:20)\n      at addChunk (../../node_modules/readable-stream/lib/_stream_readable.js:279:12)\n      at readableAddChunk (../../node_modules/readable-stream/lib/_stream_readable.js:262:11)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Readable.push (../../node_modules/readable-stream/lib/_stream_readable.js:228:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Transform.push (../../node_modules/readable-stream/lib/_stream_transform.js:132:32)\n      at Object.<anonymous>.module.exports.afterTransform (../../node_modules/readable-stream/lib/_stream_transform.js:85:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ArchiveOutputStream._transform (../../node_modules/compress-commons/lib/archivers/archive-output-stream.js:54:3)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Transform._read (../../node_modules/readable-stream/lib/_stream_transform.js:166:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Transform._write (../../node_modules/readable-stream/lib/_stream_transform.js:155:83)\n      at doWrite (../../node_modules/readable-stream/lib/_stream_writable.js:390:139)\n      at writeOrBuffer (../../node_modules/readable-stream/lib/_stream_writable.js:381:5)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.Writable.write (../../node_modules/readable-stream/lib/_stream_writable.js:302:11)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ArchiveOutputStream.write (../../node_modules/compress-commons/lib/archivers/archive-output-stream.js:116:36)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ZipArchiveOutputStream._writeLocalFileHeader (../../node_modules/compress-commons/lib/archivers/zip/zip-archive-output-stream.js:390:8)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ZipArchiveOutputStream._appendBuffer (../../node_modules/compress-commons/lib/archivers/zip/zip-archive-output-stream.js:74:8)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ArchiveOutputStream.entry (../../node_modules/compress-commons/lib/archivers/archive-output-stream.js:86:10)\n      at Object.<anonymous>.module.exports.Object.<anonymous>.ZipStream.entry (../../node_modules/zip-stream/index.js:164:49)\n      at Zip.Object.<anonymous>.Zip.append (../../node_modules/archiver/lib/plugins/zip.js:56:15)\n      at Archiver.Object.<anonymous>.Archiver._moduleAppend (../../node_modules/archiver/lib/core.js:179:16)\n      at Archiver.Object.<anonymous>.Archiver._onQueueTask (../../node_modules/archiver/lib/core.js:405:8)\n      at ../../node_modules/async/dist/async.js:4018:13\n      at Object.process (../../node_modules/async/dist/async.js:1681:21)\n      at ../../node_modules/async/dist/async.js:1533:23\n      at ../../node_modules/async/dist/async.js:74:45\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    thrown: null\n\n      59 |     });\n      60 |\n    > 61 |     it('ZIP test folder using compression rate', async () => {\n         |     ^\n      62 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDZIP, {\n      63 |             compression: COMPRESSION_LEVEL.uncompressed,\n      64 |         });\n\n      at test/tests-ZipAFolder.ts:61:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    thrown: null\n\n      73 |     });\n      74 |\n    > 75 |     it('ZIP test folder direct via constant', async () => {\n         |     ^\n      76 |         await zip(path.resolve(__dirname, 'data/'), testZIP);\n      77 |\n      78 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:75:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    thrown: null\n\n       97 |     });\n       98 |\n    >  99 |     it('ZIP test globbing', async () => {\n          |     ^\n      100 |         await zip('**/*.json', testGlobZIP);\n      101 |\n      102 |         expect(fs.existsSync(testGlobZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:99:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    thrown: null\n\n      103 |     });\n      104 |\n    > 105 |     it('ZIP test globbing with multiple paths', async () => {\n          |     ^\n      106 |         await zip('**/*.json, **/*.txt', testGlobMultiZIP);\n      107 |\n      108 |         expect(fs.existsSync(testGlobMultiZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:105:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    thrown: null\n\n      115 |     });\n      116 |\n    > 117 |     it('TGZ test folder', async () => {\n          |     ^\n      118 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testTAR);\n      119 |\n      120 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:117:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    thrown: null\n\n      121 |     });\n      122 |\n    > 123 |     it('TGZ test folder using compression rate', async () => {\n          |     ^\n      124 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDTAR, {\n      125 |             compression: COMPRESSION_LEVEL.uncompressed,\n      126 |         });\n\n      at test/tests-ZipAFolder.ts:123:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    thrown: null\n\n      135 |     });\n      136 |\n    > 137 |     it('TGZ test folder direct via constant', async () => {\n          |     ^\n      138 |         await tar(path.resolve(__dirname, 'data/'), testTAR);\n      139 |\n      140 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:137:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    thrown: null\n\n      159 |     });\n      160 |\n    > 161 |     it('ZIP test custom writestream with zipfilepath empty string', async () => {\n          |     ^\n      162 |         const customWS = fs.createWriteStream('test/123.zip');\n      163 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      164 |         expect(fs.existsSync('test/123.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:161:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    thrown: null\n\n      165 |     });\n      166 |\n    > 167 | \n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    48.91 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    48.91 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\n    it('ZIP test custom writestream with zipfilepath undefined', async () => {\n          |     ^\n      168 |         const customWS = fs.createWriteStream('test/1234.zip');\n      169 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      170 |         expect(fs.existsSync('test/1234.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:167:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    thrown: null\n\n      171 |     });\n      172 |\n    > 173 |     it('TGZ test custom writestream with tarfilepath empty string', async () => {\n          |     ^\n      174 |         const customWS = fs.createWriteStream('test/123.tgz');\n      175 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      176 |         expect(fs.existsSync('test/123.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:173:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    thrown: null\n\n      177 |     });\n      178 |\n    > 179 |     it('TGZ test custom writestream with tarfilepath undefined', async () => {\n          |     ^\n      180 |         const customWS = fs.createWriteStream('test/1234.tgz');\n      181 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      182 |         expect(fs.existsSync('test/1234.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:179:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    thrown: null\n\n      183 |     });\n      184 |\n    > 185 |     it('TGZ test globbing', async () => {\n          |     ^\n      186 |         await tar('**/*.json', testGlobTAR);\n      187 |\n      188 |         expect(fs.existsSync(testGlobTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:185:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    thrown: null\n\n      189 |     });\n      190 |\n    > 191 |     it('TGZ test globbing with multiple paths', async () => {\n          |     ^\n      192 |         await tar('**/*.json, **/*.txt', testGlobMultiTAR);\n      193 |\n      194 |         expect(fs.existsSync(testGlobMultiTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:191:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.692 s, estimated 7 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":139},"start":{"column":13,"line":139}}},{"id":"70","mutatorName":"PrecomputedMutator","replacement":"'finish'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.017 s)\n  ● Zip-A-Folder Test › ZIP test folder\n\n    thrown: undefined\n\n      53 |     });\n      54 |\n    > 55 |     it('ZIP test folder', async () => {\n         |     ^\n      56 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testZIP);\n      57 |\n      58 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:55:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    thrown: undefined\n\n      59 |     });\n      60 |\n    > 61 |     it('ZIP test folder using compression rate', async () => {\n         |     ^\n      62 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDZIP, {\n      63 |             compression: COMPRESSION_LEVEL.uncompressed,\n      64 |         });\n\n      at test/tests-ZipAFolder.ts:61:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    thrown: undefined\n\n      73 |     });\n      74 |\n    > 75 |     it('ZIP test folder direct via constant', async () => {\n         |     ^\n      76 |         await zip(path.resolve(__dirname, 'data/'), testZIP);\n      77 |\n      78 |         expect(fs.existsSync(testZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:75:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    thrown: undefined\n\n       97 |     });\n       98 |\n    >  99 |     it('ZIP test globbing', async () => {\n          |     ^\n      100 |         await zip('**/*.json', testGlobZIP);\n      101 |\n      102 |         expect(fs.existsSync(testGlobZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:99:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    thrown: undefined\n\n      103 |     });\n      104 |\n    > 105 |     it('ZIP test globbing with multiple paths', async () => {\n          |     ^\n      106 |         await zip('**/*.json, **/*.txt', testGlobMultiZIP);\n      107 |\n      108 |         expect(fs.existsSync(testGlobMultiZIP)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:105:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    thrown: undefined\n\n      115 |     });\n      116 |\n    > 117 |     it('TGZ test folder', async () => {\n          |     ^\n      118 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testTAR);\n      119 |\n      120 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:117:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    thrown: undefined\n\n      121 |     });\n      122 |\n    > 123 |     it('TGZ test folder using compression rate', async () => {\n          |     ^\n      124 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), testUNCOMPRESSEDTAR, {\n      125 |             compression: COMPRESSION_LEVEL.uncompressed,\n      126 |         });\n\n      at test/tests-ZipAFolder.ts:123:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    thrown: undefined\n\n      135 |     });\n      136 |\n    > 137 |     it('TGZ test folder direct via constant', async () => {\n          |     ^\n      138 |         await tar(path.resolve(__dirname, 'data/'), testTAR);\n      139 |\n      140 |         expect(fs.existsSync(testTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:137:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    thrown: undefined\n\n      159 |     });\n      160 |\n    > 161 |     it('ZIP test custom writestream with zipfilepath empty string', async () => {\n          |     ^\n      162 |         const customWS = fs.createWriteStream('test/123.zip');\n      163 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      164 |         expect(fs.existsSync('test/123.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:161:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    thrown: undefined\n\n      165 |     });\n      166 |\n    > 167 |     it('ZIP test custom writestream with zipfilepath undefined', async () => {\n          |     ^\n      168 |         const customWS = fs.createWriteStream('test/1234.zip');\n      169 |         await zipafolder.zip(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      170 |         expect(fs.existsSync('test/1234.zip')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:167:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    thrown: undefined\n\n      171 |     });\n      172 |\n    > 173 |     it('TGZ test custom writestream with tarfilepath empty string', async () => {\n          |     ^\n      174 |         const customWS = fs.createWriteStream('test/123.tgz');\n      175 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), '', {customWriteStream: customWS});\n      176 |         expect(fs.existsSync('test/123.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:173:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    thrown: undefined\n\n      177 |     });\n      178 |\n    > 179 |     it('TGZ test custom writestream with tarfilepath undefined', async () => {\n          |     ^\n      180 |         const customWS = fs.createWriteStream('test/1234.tgz');\n      181 |         await zipafolder.tar(path.resolve(__dirname, 'data/'), undefined, {customWriteStream: customWS});\n      182 |         expect(fs.existsSync('test/1234.tgz')).toBeTruthy();\n\n      at test/tests-ZipAFolder.ts:179:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    thrown: undefined\n\n      183 |     });\n      184 |\n    > 185 |     it('TGZ test globbing', async () => {\n          |     ^\n      186 |         await tar('**/*.json', testGlobTAR);\n      187 |\n      188 |         expect(fs.existsSync(testGlobTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:185:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    thrown: undefined\n\n      189 |     });\n      190 |\n    > 191 |     it('TGZ test globbing with multiple paths', async () => {\n          |     ^\n      192 |         await tar('**/*.json, **/*.txt', testGlobMultiTAR);\n      193 |\n      194 |         expect(fs.existsSync(testGlobMultiTAR)).toBe(true);\n\n      at test/tests-ZipAFolder.ts:191:5\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:9:1)\n\n\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |    97.1 |    52.17 |     100 |   97.05 |                   \n ZipAFolder.ts |    97.1 |    52.17 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        7.182 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"71","mutatorName":"PrecomputedMutator","replacement":"'close'","status":"Timeout","location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"72","mutatorName":"PrecomputedMutator","replacement":"'end'","status":"Timeout","location":{"end":{"column":30,"line":139},"start":{"column":23,"line":139}}},{"id":"76","mutatorName":"PrecomputedMutator","replacement":"!isGlob(src)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 1024\n    Received:   100925\n\n      131 |         const sizeBIG = fs.statSync(testMEDIUMTAR).size;\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n    > 133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n          |                         ^\n      134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n      135 |     });\n      136 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:133:25)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |       50 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |       50 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        3.965 s, estimated 5 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"73","mutatorName":"PrecomputedMutator","replacement":"resolve","status":"Timeout","location":{"end":{"column":38,"line":139},"start":{"column":32,"line":139}}},{"id":"74","mutatorName":"PrecomputedMutator","replacement":"console.error","status":"Timeout","location":{"end":{"column":38,"line":139},"start":{"column":32,"line":139}}},{"id":"75","mutatorName":"PrecomputedMutator","replacement":"isGlob(src, /./g)","status":"Timeout","location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"78","mutatorName":"PrecomputedMutator","replacement":"0","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    91.3 |    46.73 |   91.66 |   91.17 |                   \n\n ZipAFolder.ts |    91.3 |    46.73 |   91.66 |   91.17 | 26,41,195-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\n rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress\n [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.124 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":23,"line":143},"start":{"column":17,"line":143}}},{"id":"79","mutatorName":"PrecomputedMutator","replacement":"NaN","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:100:9)\n\n  ● Zip-A-Folder Test › ZIP test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:106:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    91.3 |    46.37 |   91.66 |   91.17 |                   \n\n ZipAFolder.ts |    91.3 |    46.37 |   91.66 |   91.17 | 26,41,195-201     \n\n---------------|---------|----------|---------|---------|-------------------\n\n test folder using compression rate\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:\n12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\n  ● Zip-A-Folder Test › TGZ test globbing\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:186:9)\n\n  ● Zip-A-Folder Test › TGZ test globbing with multiple paths\n\n    TypeError: (intermediate value)(intermediate value)(intermediate value) is not a function\n\n      192 |       if (stryMutAct_9fa48(\"77\") ? isGlob(src, {\n      193 |         git: true\n    > 194 |       }) : stryMutAct_9fa48(\"76\") ? !isGlob(src) : stryMutAct_9fa48(\"75\") ? isGlob(src, /./g) : (stryCov_9fa48(\"75\", \"76\", \"77\"), (stryMutAct_9fa48(\"79\") ? NaN : stryMutAct_9fa48(\"78\") ? 0 : (stryCov_9fa48(\"78\", \"79\"), isGlob))(stryMutAct_9fa48(\"82\") ? '' : stryMutAct_9fa48(\"81\") ? undefined : stryMutAct_9fa48(\"80\") ? null : (stryCov_9fa48(\"80\", \"81\", \"82\"), src)))) {\n          |                                                                                                                                                                                                                                   ^\n      195 |         src.split(',').forEach(globPart => {\n      196 |           zipArchive.glob(stryMutAct_9fa48(\"85\") ? globPart + '*' : stryMutAct_9fa48(\"84\") ? globPart + '[!.]' : stryMutAct_9fa48(\"83\") ? globPart + '/*' : (stryCov_9fa48(\"83\", \"84\", \"85\"), globPart));\n      197 |         });\n\n      at lib/ZipAFolder.ts:194:227\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:192:9)\n\n\nTest Suites: 1 failed, 1 total\nTests:       14 failed, 1 skipped, 7 passed, 22 total\nSnapshots:   0 total\nTime:        4.405 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":23,"line":143},"start":{"column":17,"line":143}}},{"id":"77","mutatorName":"PrecomputedMutator","replacement":"isGlob(src, {\n  git: true\n})","status":"Timeout","location":{"end":{"column":28,"line":143},"start":{"column":17,"line":143}}},{"id":"80","mutatorName":"PrecomputedMutator","replacement":"null","status":"Timeout","location":{"end":{"column":27,"line":143},"start":{"column":24,"line":143}}},{"id":"81","mutatorName":"PrecomputedMutator","replacement":"undefined","status":"Timeout","location":{"end":{"column":27,"line":143},"start":{"column":24,"line":143}}},{"id":"82","mutatorName":"PrecomputedMutator","replacement":"''","status":"Timeout","location":{"end":{"column":27,"line":143},"start":{"column":24,"line":143}}},{"id":"83","mutatorName":"PrecomputedMutator","replacement":"globPart + '/*'","status":"Timeout","location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"84","mutatorName":"PrecomputedMutator","replacement":"globPart + '[!.]'","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts (7.285 s)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 17512\n    Received:   455440\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.81 |     100 |   97.05 |                   \n ZipAFolder.ts |    97.1 |    51.81 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 skipped, 20 passed, 22 total\nSnapshots:   0 total\nTime:        7.402 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"85","mutatorName":"PrecomputedMutator","replacement":"globPart + '*'","status":"Survived","testsCompleted":1,"location":{"end":{"column":45,"line":145},"start":{"column":37,"line":145}}},{"id":"86","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, true)","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"89","mutatorName":"PrecomputedMutator","replacement":"zipArchive.archive","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as z\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\nAll files      |    97.1 |    48.91 |     100 |   97.05 |                   \n ZipAFolder.ts |    97.1 |    48.91 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    TypeError: zipArchive.archive is not a function\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                             ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at archive (lib/ZipAFolder.ts:199:45)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        4.654 s, estimated 5 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":37,"line":148},"start":{"column":17,"line":148}}},{"id":"87","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, 'true')","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"88","mutatorName":"PrecomputedMutator","replacement":"zipArchive.directory(src, ['true'])","status":"Timeout","location":{"end":{"column":49,"line":148},"start":{"column":17,"line":148}}},{"id":"90","mutatorName":"PrecomputedMutator","replacement":"src.slice(1)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    52.17 |     100 |   97.05 |                   \n\n ZipAFolder.ts |    97.1 |    52.17 |     100 |   97.05 | 26,41             \n\n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        4.788 s, estimated 8 s\n\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"91","mutatorName":"PrecomputedMutator","replacement":"src.concat(\"foo\")","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 22\n    Received:   22\n\n      69 |         const sizeMEDIUM = fs.statSync(testMEDIUMZIP).size;\n      70 |         const sizeSMALL = fs.statSync(testSMALLZIP).size;\n    > 71 |         expect(sizeMEDIUM).toBeLessThan(sizeUNCOMPRESSED);\n         |                            ^\n      72 |         expect(sizeSMALL).toBeLessThan(sizeMEDIUM);\n      73 |     });\n      74 |\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:71:28)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    expect(received).toBeLessThan(expected)\n\n    Expected: < 29\n    Received:   29\n\n      132 |         const sizeSMALL = fs.statSync(testSMALLTAR).size;\n      133 |         expect(sizeBIG).toBeLessThan(sizeUNCOMPRESSED);\n    > 134 |         expect(sizeSMALL).toBeLessThan(sizeBIG);\n          |                           ^\n      135 |     });\n      136 |\n      137 |     it('TGZ test folder direct via constant', async () => {\n\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:134:27)\n\n\n---------------|---------|----------|---------|---------|-------------------\n\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    51.81 |     100 |   97.05 |                   \n ZipAFolder.ts |    97.1 |    51.81 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 1 skipped, 19 passed, 22 total\nSnapshots:   0 total\nTime:        5.172 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"92","mutatorName":"PrecomputedMutator","replacement":"fs.join(path.dirname(tarFilePath), src)","statusReason":"\n> zip-a-folder@2.0.0 test\n> jest --coverage\n\n\nFAIL test/tests-ZipAFolder.ts\n\n  ● Zip-A-Folder Test › ZIP test folder\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:56:9)\n\n  ● Zip-A-Folder Test › ZIP test folder using compression rate\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.zip (lib/ZipAFolder.ts:131:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:62:9)\n\n  ● Zip-A-Folder Test › ZIP test folder direct via constant\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at zip (lib/ZipAFolder.ts:141:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:76:9)\n\n  ● Zip-A-Folder Test › TGZ test folder\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:118:9)\n\n  ● Zip-A-Folder Test › TGZ test folder using compression rate\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.tar (lib/ZipAFolder.ts:82:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:124:9)\n\n  ● Zip-A-Folder Test › TGZ test folder direct via constant\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48\n---------------|---------|----------|---------|---------|-------------------\nFile           | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n---------------|---------|----------|---------|---------|-------------------\n\nAll files      |    97.1 |    50.36 |     100 |   97.05 |                   \n ZipAFolder.ts |    97.1 |    50.36 |     100 |   97.05 | 26,41             \n---------------|---------|----------|---------|---------|-------------------\n\n(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at tar (lib/ZipAFolder.ts:104:7)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:138:9)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath empty string\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:163:26)\n\n  ● Zip-A-Folder Test › ZIP test custom writestream with zipfilepath undefined\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as zip] (lib/ZipAFolder.ts:141:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:169:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath empty string\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:175:26)\n\n  ● Zip-A-Folder Test › TGZ test custom writestream with tarfilepath undefined\n\n    ReferenceError: tarFilePath is not defined\n\n      197 |         });\n      198 |       } else {\n    > 199 |         stryMutAct_9fa48(\"89\") ? zipArchive.archive(src, false) : stryMutAct_9fa48(\"88\") ? zipArchive.directory(src, ['true']) : stryMutAct_9fa48(\"87\") ? zipArchive.directory(src, 'true') : stryMutAct_9fa48(\"86\") ? zipArchive.directory(src, true) : (stryCov_9fa48(\"86\", \"87\", \"88\", \"89\"), zipArchive.directory(stryMutAct_9fa48(\"92\") ? fs.join(path.dirname(tarFilePath), src) : stryMutAct_9fa48(\"91\") ? src.concat(\"foo\") : stryMutAct_9fa48(\"90\") ? src.slice(1) : (stryCov_9fa48(\"90\", \"91\", \"92\"), src), stryMutAct_9fa48(\"95\") ? Boolean(null) : stryMutAct_9fa48(\"94\") ? !false : stryMutAct_9fa48(\"93\") ? true : (stryCov_9fa48(\"93\", \"94\", \"95\"), false)));\n          |                                                                                                                                                                                                                                                                                                                                                                     ^\n      200 |       }\n      201 |       zipArchive.finalize();\n      202 |     });\n\n      at tarFilePath (lib/ZipAFolder.ts:199:357)\n      at Function.compress (lib/ZipAFolder.ts:188:12)\n      at Function.compress [as tar] (lib/ZipAFolder.ts:104:24)\n      at Object.<anonymous> (test/tests-ZipAFolder.ts:181:26)\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 1 skipped, 11 passed, 22 total\nSnapshots:   0 total\nTime:        4.876 s, estimated 8 s\nForce exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":41,"line":148},"start":{"column":38,"line":148}}},{"id":"93","mutatorName":"PrecomputedMutator","replacement":"true","status":"Survived","testsCompleted":1,"location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}},{"id":"94","mutatorName":"PrecomputedMutator","replacement":"!false","status":"Survived","testsCompleted":1,"location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}},{"id":"95","mutatorName":"PrecomputedMutator","replacement":"Boolean(null)","status":"Survived","testsCompleted":1,"location":{"end":{"column":48,"line":148},"start":{"column":43,"line":148}}}],"source":"'use strict';\nimport {WriteStream} from 'fs';\nimport * as path from 'path';\nimport * as archiver from 'archiver';\nimport * as fs from 'fs';\nimport * as isGlob from 'is-glob';\n\nexport enum COMPRESSION_LEVEL {\n    uncompressed = 0,\n    medium = 5,\n    high = 9,\n}\n\n/**\n * Options to pass in to zip a folder\n * compression default is 'high'\n */\nexport type ZipAFolderOptions = {\n    compression?: COMPRESSION_LEVEL;\n    customWriteStream?: WriteStream;\n};\n\nexport class ZipAFolder {\n    /**\n     * Tars a given folder or a glob into a gzipped tar archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param tarFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async tar(\n        src: string,\n        tarFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: tarFilePath,\n                format: 'tar',\n                zipAFolderOptions,\n                archiverOptions: {\n                    gzip: true,\n                    gzipOptions: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    /**\n     * Zips a given folder or a glob into a zip archive.\n     * If no zipAFolderOptions are passed in, the default compression level is high.\n     * @param src can be a string path or a glob\n     * @param zipFilePath path to the zip file\n     * @param zipAFolderOptions\n     */\n    static async zip(\n        src: string,\n        zipFilePath: string | undefined,\n        zipAFolderOptions?: ZipAFolderOptions\n    ): Promise<void | Error> {\n        const o: ZipAFolderOptions = zipAFolderOptions || {\n            compression: COMPRESSION_LEVEL.high,\n        };\n\n        if (o.compression === COMPRESSION_LEVEL.uncompressed) {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    store: true,\n                },\n            });\n        } else {\n            await ZipAFolder.compress({\n                src,\n                targetFilePath: zipFilePath,\n                format: 'zip',\n                zipAFolderOptions,\n                archiverOptions: {\n                    zlib: {\n                        level: o.compression,\n                    },\n                },\n            });\n        }\n    }\n\n    private static async compress({\n        src,\n        targetFilePath,\n        format,\n        zipAFolderOptions,\n        archiverOptions,\n    }: {\n        src: string;\n        targetFilePath?: string;\n        format: archiver.Format;\n        zipAFolderOptions?: ZipAFolderOptions;\n        archiverOptions?: archiver.ArchiverOptions;\n    }): Promise<void | Error> {\n        let output: WriteStream;\n\n        if (!zipAFolderOptions?.customWriteStream && targetFilePath) {\n            const targetBasePath: string = path.dirname(targetFilePath);\n\n            if (targetBasePath === src) {\n                throw new Error('Source and target folder must be different.');\n            }\n            try {\n                if (!isGlob(src)) {\n                    await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise\n                }\n                await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise\n            } catch (e: any) {\n                throw new Error(`Permission error: ${e.message}`);\n            }\n            output = fs.createWriteStream(targetFilePath);\n        } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {\n            output = zipAFolderOptions?.customWriteStream;\n        } else {\n            throw new Error('You must either provide a target file path or a custom write stream to write to.');\n        }\n\n        const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});\n\n        return new Promise((resolve, reject) => {\n            output.on('close', resolve);\n            output.on('error', reject);\n\n            zipArchive.pipe(output);\n\n            if (isGlob(src)) {\n                src.split(',').forEach((globPart) => {\n                    zipArchive.glob(globPart);\n                });\n            } else {\n                zipArchive.directory(src, false);\n            }\n            zipArchive.finalize();\n        });\n    }\n}\n\nexport const zip = ZipAFolder.zip;\nexport const tar = ZipAFolder.tar;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"All tests"}]}},"projectRoot":"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/zip-a-folder","config":{"usePrecomputed":true,"mutate":["lib/ZipAFolder.ts"],"reporters":["json","html","progress"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunner":"command","testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"cucumber":{},"jest":{"projectType":"custom","enableFindRelatedTests":true},"mochaOptions":{},"tap":{"testFiles":["{**/@(test|tests|__test__|__tests__)/**,**/*.@(test|tests|spec)}.@(cjs|mjs|js|jsx|ts|tsx|mts|cts)"],"nodeArgs":["-r","{{hookFile}}","{{testFile}}"],"forceBail":true},"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.5","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.2.5","@stryker-mutator/karma-runner":"8.2.5","@stryker-mutator/jasmine-runner":"8.2.5","@stryker-mutator/jest-runner":"8.2.5","mocha":"10.4.0","jasmine-core":"5.1.2","jest":"29.7.0","typescript":"5.4.4","ts-jest":"29.1.2"}}}