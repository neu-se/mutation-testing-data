{
  "instrumentation": "node-jscoverage",
  "sloc": 0,
  "hits": 0,
  "misses": 0,
  "coverage": 0,
  "files": [],
  "stats": {
    "suites": 406,
    "tests": 619,
    "passes": 598,
    "pending": 0,
    "failures": 21,
    "start": "2024-12-31T16:34:17.973Z",
    "end": "2024-12-31T16:34:18.618Z",
    "duration": 645
  },
  "tests": [
    {
      "title": "should match based on index",
      "fullTitle": "Router .match(method, url, i) should match based on index",
      "duration": 1
    },
    {
      "title": "should match based on index",
      "fullTitle": "Router .matchRequest(req, i) should match based on index",
      "duration": 1
    },
    {
      "title": "should dispatch",
      "fullTitle": "Router .middleware should dispatch",
      "duration": 14
    },
    {
      "title": "should throw if a callback is null",
      "fullTitle": "Router .multiple callbacks should throw if a callback is null",
      "duration": 0
    },
    {
      "title": "should throw if a callback is undefined",
      "fullTitle": "Router .multiple callbacks should throw if a callback is undefined",
      "duration": 0
    },
    {
      "title": "should throw if a callback is not a function",
      "fullTitle": "Router .multiple callbacks should throw if a callback is not a function",
      "duration": 0
    },
    {
      "title": "should not throw if all callbacks are functions",
      "fullTitle": "Router .multiple callbacks should not throw if all callbacks are functions",
      "duration": 0
    },
    {
      "title": "should support using .all to capture all http verbs",
      "fullTitle": "Router .all should support using .all to capture all http verbs",
      "duration": 1
    },
    {
      "title": "should add a router per method",
      "fullTitle": "app.all() should add a router per method",
      "duration": 4
    },
    {
      "title": "should ",
      "fullTitle": "app.all() should ",
      "duration": 2
    },
    {
      "title": "should alias app.delete()",
      "fullTitle": "app.del() should alias app.delete()",
      "duration": 2
    },
    {
      "title": "should map a template engine",
      "fullTitle": "app .engine(ext, fn) should map a template engine",
      "duration": 1
    },
    {
      "title": "should throw when the callback is missing",
      "fullTitle": "app .engine(ext, fn) should throw when the callback is missing",
      "duration": 0
    },
    {
      "title": "should work without leading \".\"",
      "fullTitle": "app .engine(ext, fn) should work without leading \".\"",
      "duration": 1
    },
    {
      "title": "should work \"view engine\" setting",
      "fullTitle": "app .engine(ext, fn) should work \"view engine\" setting",
      "duration": 0
    },
    {
      "title": "should work \"view engine\" with leading \".\"",
      "fullTitle": "app .engine(ext, fn) should work \"view engine\" with leading \".\"",
      "duration": 1
    },
    {
      "title": "should default to GET",
      "fullTitle": "HEAD should default to GET",
      "duration": 1
    },
    {
      "title": "should output the same headers as GET requests",
      "fullTitle": "HEAD should output the same headers as GET requests",
      "duration": 3
    },
    {
      "title": "should override",
      "fullTitle": "app.head() should override",
      "duration": 1
    },
    {
      "title": "should inherit from event emitter",
      "fullTitle": "app should inherit from event emitter",
      "duration": 1
    },
    {
      "title": "should return the parent when mounted",
      "fullTitle": "app.parent should return the parent when mounted",
      "duration": 0
    },
    {
      "title": "should return the mounted path",
      "fullTitle": "app.route should return the mounted path",
      "duration": 0
    },
    {
      "title": "should return the canonical",
      "fullTitle": "app.path() should return the canonical",
      "duration": 0
    },
    {
      "title": "should disable \"view cache\"",
      "fullTitle": "in development should disable \"view cache\"",
      "duration": 0
    },
    {
      "title": "should enable \"view cache\"",
      "fullTitle": "in production should enable \"view cache\"",
      "duration": 0
    },
    {
      "title": "should default to development",
      "fullTitle": "without NODE_ENV should default to development",
      "duration": 0
    },
    {
      "title": "should wrap with an HTTP server",
      "fullTitle": "app.listen() should wrap with an HTTP server",
      "duration": 0
    },
    {
      "title": "should merge locals",
      "fullTitle": "app .locals(obj) should merge locals",
      "duration": 0
    },
    {
      "title": "should expose app settings",
      "fullTitle": "app .locals.settings should expose app settings",
      "duration": 1
    },
    {
      "title": "should default to the routes defined",
      "fullTitle": "OPTIONS should default to the routes defined",
      "duration": 2
    },
    {
      "title": "should not respond if the path is not defined",
      "fullTitle": "OPTIONS should not respond if the path is not defined",
      "duration": 1
    },
    {
      "title": "should forward requests down the middleware chain",
      "fullTitle": "OPTIONS should forward requests down the middleware chain",
      "duration": 1
    },
    {
      "title": "should override the default behavior",
      "fullTitle": "app.options() should override the default behavior",
      "duration": 1
    },
    {
      "title": "should map app.param(name, ...) logic",
      "fullTitle": "app .param(fn) should map app.param(name, ...) logic",
      "duration": 3
    },
    {
      "title": "should fail if not given fn",
      "fullTitle": "app .param(fn) should fail if not given fn",
      "duration": 0
    },
    {
      "title": "should map the array",
      "fullTitle": "app .param(names, fn) should map the array",
      "duration": 2
    },
    {
      "title": "should map logic for a single param",
      "fullTitle": "app .param(name, fn) should map logic for a single param",
      "duration": 1
    },
    {
      "title": "should work with encoded values",
      "fullTitle": "app .param(name, fn) should work with encoded values",
      "duration": 1
    },
    {
      "title": "should catch thrown error",
      "fullTitle": "app .param(name, fn) should catch thrown error",
      "duration": 1
    },
    {
      "title": "should defer to next route",
      "fullTitle": "app .param(name, fn) should defer to next route",
      "duration": 1
    },
    {
      "title": "should support absolute paths",
      "fullTitle": "app .render(name, fn) should support absolute paths",
      "duration": 0
    },
    {
      "title": "should support absolute paths with \"view engine\"",
      "fullTitle": "app .render(name, fn) should support absolute paths with \"view engine\"",
      "duration": 0
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "app .render(name, fn) should expose app.locals",
      "duration": 0
    },
    {
      "title": "should support index.<engine>",
      "fullTitle": "app .render(name, fn) should support index.<engine>",
      "duration": 1
    },
    {
      "title": "should handle render error throws",
      "fullTitle": "app .render(name, fn) should handle render error throws",
      "duration": 0
    },
    {
      "title": "should provide a helpful error",
      "fullTitle": "app .render(name, fn) when the file does not exist should provide a helpful error",
      "duration": 0
    },
    {
      "title": "should invoke the callback",
      "fullTitle": "app .render(name, fn) when an error occurs should invoke the callback"
    },
    {
      "title": "should render the template",
      "fullTitle": "app .render(name, fn) when an extension is given should render the template",
      "duration": 1
    },
    {
      "title": "should render the template",
      "fullTitle": "app .render(name, fn) when \"view engine\" is given should render the template",
      "duration": 0
    },
    {
      "title": "should create an instance of it",
      "fullTitle": "app .render(name, fn) when a \"view\" constructor is given should create an instance of it",
      "duration": 0
    },
    {
      "title": "should always lookup view without cache",
      "fullTitle": "app .render(name, fn) caching should always lookup view without cache",
      "duration": 1
    },
    {
      "title": "should cache with \"view cache\" setting",
      "fullTitle": "app .render(name, fn) caching should cache with \"view cache\" setting",
      "duration": 0
    },
    {
      "title": "should render the template",
      "fullTitle": "app .render(name, options, fn) should render the template",
      "duration": 0
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "app .render(name, options, fn) should expose app.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to app.render() locals",
      "fullTitle": "app .render(name, options, fn) should give precedence to app.render() locals",
      "duration": 0
    },
    {
      "title": "should cache with cache option",
      "fullTitle": "app .render(name, options, fn) caching should cache with cache option",
      "duration": 0
    },
    {
      "title": "should extend the request prototype",
      "fullTitle": "app .request should extend the request prototype",
      "duration": 2
    },
    {
      "title": "should extend the response prototype",
      "fullTitle": "app .response should extend the response prototype",
      "duration": 1
    },
    {
      "title": "should not be influenced by other app protos",
      "fullTitle": "app .response should not be influenced by other app protos",
      "duration": 2
    },
    {
      "title": "should be .use()able",
      "fullTitle": "app.router should be .use()able",
      "duration": 1
    },
    {
      "title": "should be auto .use()d on the first app.VERB() call",
      "fullTitle": "app.router should be auto .use()d on the first app.VERB() call",
      "duration": 1
    },
    {
      "title": "should allow escaped regexp",
      "fullTitle": "app.router should allow escaped regexp",
      "duration": 2
    },
    {
      "title": "should allow literal \".\"",
      "fullTitle": "app.router should allow literal \".\"",
      "duration": 1
    },
    {
      "title": "should allow rewriting of the url",
      "fullTitle": "app.router should allow rewriting of the url",
      "duration": 1
    },
    {
      "title": "should be chainable",
      "fullTitle": "app.router should be chainable",
      "duration": 0
    },
    {
      "title": "should include ACL",
      "fullTitle": "app.router methods supported should include ACL",
      "duration": 1
    },
    {
      "title": "should include BIND",
      "fullTitle": "app.router methods supported should include BIND",
      "duration": 1
    },
    {
      "title": "should include CHECKOUT",
      "fullTitle": "app.router methods supported should include CHECKOUT",
      "duration": 1
    },
    {
      "title": "should include COPY",
      "fullTitle": "app.router methods supported should include COPY",
      "duration": 1
    },
    {
      "title": "should include DELETE",
      "fullTitle": "app.router methods supported should include DELETE",
      "duration": 1
    },
    {
      "title": "should include GET",
      "fullTitle": "app.router methods supported should include GET",
      "duration": 1
    },
    {
      "title": "should include HEAD",
      "fullTitle": "app.router methods supported should include HEAD",
      "duration": 1
    },
    {
      "title": "should include LINK",
      "fullTitle": "app.router methods supported should include LINK",
      "duration": 1
    },
    {
      "title": "should include LOCK",
      "fullTitle": "app.router methods supported should include LOCK",
      "duration": 1
    },
    {
      "title": "should include M-SEARCH",
      "fullTitle": "app.router methods supported should include M-SEARCH",
      "duration": 1
    },
    {
      "title": "should include MERGE",
      "fullTitle": "app.router methods supported should include MERGE",
      "duration": 1
    },
    {
      "title": "should include MKACTIVITY",
      "fullTitle": "app.router methods supported should include MKACTIVITY",
      "duration": 1
    },
    {
      "title": "should include MKCALENDAR",
      "fullTitle": "app.router methods supported should include MKCALENDAR",
      "duration": 1
    },
    {
      "title": "should include MKCOL",
      "fullTitle": "app.router methods supported should include MKCOL",
      "duration": 1
    },
    {
      "title": "should include MOVE",
      "fullTitle": "app.router methods supported should include MOVE",
      "duration": 1
    },
    {
      "title": "should include NOTIFY",
      "fullTitle": "app.router methods supported should include NOTIFY",
      "duration": 1
    },
    {
      "title": "should include OPTIONS",
      "fullTitle": "app.router methods supported should include OPTIONS",
      "duration": 1
    },
    {
      "title": "should include PATCH",
      "fullTitle": "app.router methods supported should include PATCH",
      "duration": 1
    },
    {
      "title": "should include POST",
      "fullTitle": "app.router methods supported should include POST",
      "duration": 1
    },
    {
      "title": "should include PROPFIND",
      "fullTitle": "app.router methods supported should include PROPFIND",
      "duration": 1
    },
    {
      "title": "should include PROPPATCH",
      "fullTitle": "app.router methods supported should include PROPPATCH",
      "duration": 1
    },
    {
      "title": "should include PURGE",
      "fullTitle": "app.router methods supported should include PURGE",
      "duration": 1
    },
    {
      "title": "should include PUT",
      "fullTitle": "app.router methods supported should include PUT",
      "duration": 1
    },
    {
      "title": "should include REBIND",
      "fullTitle": "app.router methods supported should include REBIND",
      "duration": 1
    },
    {
      "title": "should include REPORT",
      "fullTitle": "app.router methods supported should include REPORT",
      "duration": 0
    },
    {
      "title": "should include SEARCH",
      "fullTitle": "app.router methods supported should include SEARCH",
      "duration": 0
    },
    {
      "title": "should include SOURCE",
      "fullTitle": "app.router methods supported should include SOURCE",
      "duration": 1
    },
    {
      "title": "should include SUBSCRIBE",
      "fullTitle": "app.router methods supported should include SUBSCRIBE",
      "duration": 1
    },
    {
      "title": "should include TRACE",
      "fullTitle": "app.router methods supported should include TRACE",
      "duration": 1
    },
    {
      "title": "should include UNBIND",
      "fullTitle": "app.router methods supported should include UNBIND",
      "duration": 1
    },
    {
      "title": "should include UNLINK",
      "fullTitle": "app.router methods supported should include UNLINK",
      "duration": 1
    },
    {
      "title": "should include UNLOCK",
      "fullTitle": "app.router methods supported should include UNLOCK",
      "duration": 1
    },
    {
      "title": "should include UNSUBSCRIBE",
      "fullTitle": "app.router methods supported should include UNSUBSCRIBE",
      "duration": 1
    },
    {
      "title": "should include DEL",
      "fullTitle": "app.router methods supported should include DEL",
      "duration": 1
    },
    {
      "title": "should decode correct params",
      "fullTitle": "app.router decode querystring should decode correct params",
      "duration": 1
    },
    {
      "title": "should not accept params in malformed paths",
      "fullTitle": "app.router decode querystring should not accept params in malformed paths",
      "duration": 1
    },
    {
      "title": "should not decode spaces",
      "fullTitle": "app.router decode querystring should not decode spaces",
      "duration": 1
    },
    {
      "title": "should work with unicode",
      "fullTitle": "app.router decode querystring should work with unicode",
      "duration": 1
    },
    {
      "title": "should match the pathname only",
      "fullTitle": "app.router when given a regexp should match the pathname only",
      "duration": 1
    },
    {
      "title": "should populate req.params with the captures",
      "fullTitle": "app.router when given a regexp should populate req.params with the captures",
      "duration": 0
    },
    {
      "title": "should be disabled by default",
      "fullTitle": "app.router case sensitivity should be disabled by default",
      "duration": 1
    },
    {
      "title": "should match identical casing",
      "fullTitle": "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing",
      "duration": 0
    },
    {
      "title": "should not match otherwise",
      "fullTitle": "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise",
      "duration": 0
    },
    {
      "title": "should be optional by default",
      "fullTitle": "app.router trailing slashes should be optional by default",
      "duration": 1
    },
    {
      "title": "should match trailing slashes",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes",
      "duration": 1
    },
    {
      "title": "should match no slashes",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should match no slashes",
      "duration": 0
    },
    {
      "title": "should fail when omitting the trailing slash",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash",
      "duration": 0
    },
    {
      "title": "should fail when adding the trailing slash",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash",
      "duration": 1
    },
    {
      "title": "should denote a greedy capture group",
      "fullTitle": "app.router * should denote a greedy capture group",
      "duration": 1
    },
    {
      "title": "should work with several",
      "fullTitle": "app.router * should work with several",
      "duration": 1
    },
    {
      "title": "should work cross-segment",
      "fullTitle": "app.router * should work cross-segment",
      "duration": 1
    },
    {
      "title": "should allow naming",
      "fullTitle": "app.router * should allow naming",
      "duration": 0
    },
    {
      "title": "should not be greedy immediately after param",
      "fullTitle": "app.router * should not be greedy immediately after param",
      "duration": 1
    },
    {
      "title": "should eat everything after /",
      "fullTitle": "app.router * should eat everything after /",
      "duration": 1
    },
    {
      "title": "should span multiple segments",
      "fullTitle": "app.router * should span multiple segments",
      "duration": 1
    },
    {
      "title": "should be optional",
      "fullTitle": "app.router * should be optional",
      "duration": 1
    },
    {
      "title": "should require a preceeding /",
      "fullTitle": "app.router * should require a preceeding /",
      "duration": 1
    },
    {
      "title": "should denote a capture group",
      "fullTitle": "app.router :name should denote a capture group",
      "duration": 1
    },
    {
      "title": "should match a single segment only",
      "fullTitle": "app.router :name should match a single segment only",
      "duration": 1
    },
    {
      "title": "should allow several capture groups",
      "fullTitle": "app.router :name should allow several capture groups",
      "duration": 1
    },
    {
      "title": "should denote an optional capture group",
      "fullTitle": "app.router :name? should denote an optional capture group",
      "duration": 1
    },
    {
      "title": "should populate the capture group",
      "fullTitle": "app.router :name? should populate the capture group",
      "duration": 1
    },
    {
      "title": "should denote a format",
      "fullTitle": "app.router .:name should denote a format",
      "duration": 2
    },
    {
      "title": "should denote an optional format",
      "fullTitle": "app.router .:name? should denote an optional format",
      "duration": 1
    },
    {
      "title": "should continue lookup",
      "fullTitle": "app.router when next() is called should continue lookup",
      "duration": 1
    },
    {
      "title": "should jump to next route",
      "fullTitle": "app.router when next(\"route\") is called should jump to next route",
      "duration": 1
    },
    {
      "title": "should break out of app.router",
      "fullTitle": "app.router when next(err) is called should break out of app.router",
      "duration": 1
    },
    {
      "title": "should only call an error handling routing callback when an error is propagated",
      "fullTitle": "app .VERB() should only call an error handling routing callback when an error is propagated",
      "duration": 1
    },
    {
      "title": "should be initialized",
      "fullTitle": "app.routes should be initialized",
      "duration": 0
    },
    {
      "title": "should be populated with routes",
      "fullTitle": "app.routes should be populated with routes",
      "duration": 0
    },
    {
      "title": "should be mutable",
      "fullTitle": "app.routes should be mutable",
      "duration": 0
    },
    {
      "title": "should emit \"mount\" when mounted",
      "fullTitle": "app should emit \"mount\" when mounted",
      "duration": 0
    },
    {
      "title": "should mount the app",
      "fullTitle": "app .use(app) should mount the app",
      "duration": 1
    },
    {
      "title": "should support mount-points",
      "fullTitle": "app .use(app) should support mount-points",
      "duration": 2
    },
    {
      "title": "should set the child's .parent",
      "fullTitle": "app .use(app) should set the child's .parent",
      "duration": 0
    },
    {
      "title": "should execute in order as defined",
      "fullTitle": "config .configure() should execute in order as defined",
      "duration": 0
    },
    {
      "title": "should always execute",
      "fullTitle": "config .configure() when no env is given should always execute",
      "duration": 0
    },
    {
      "title": "should only execute the matching env",
      "fullTitle": "config .configure() when an env is given should only execute the matching env",
      "duration": 0
    },
    {
      "title": "should execute when matching one",
      "fullTitle": "config .configure() when several envs are given should execute when matching one",
      "duration": 0
    },
    {
      "title": "should set a value",
      "fullTitle": "config .set() should set a value",
      "duration": 0
    },
    {
      "title": "should return the app",
      "fullTitle": "config .set() should return the app",
      "duration": 0
    },
    {
      "title": "should return the app when undefined",
      "fullTitle": "config .set() should return the app when undefined",
      "duration": 0
    },
    {
      "title": "should throw on bad value",
      "fullTitle": "config .set() \"etag\" should throw on bad value",
      "duration": 0
    },
    {
      "title": "should set \"etag fn\"",
      "fullTitle": "config .set() \"etag\" should set \"etag fn\"",
      "duration": 0
    },
    {
      "title": "should set \"trust proxy fn\"",
      "fullTitle": "config .set() \"trust proxy\" should set \"trust proxy fn\"",
      "duration": 0
    },
    {
      "title": "should return undefined when unset",
      "fullTitle": "config .get() should return undefined when unset",
      "duration": 0
    },
    {
      "title": "should otherwise return the value",
      "fullTitle": "config .get() should otherwise return the value",
      "duration": 0
    },
    {
      "title": "should default to the parent app",
      "fullTitle": "config .get() when mounted should default to the parent app",
      "duration": 1
    },
    {
      "title": "should given precedence to the child",
      "fullTitle": "config .get() when mounted should given precedence to the child",
      "duration": 0
    },
    {
      "title": "should inherit \"trust proxy\" setting",
      "fullTitle": "config .get() when mounted should inherit \"trust proxy\" setting",
      "duration": 0
    },
    {
      "title": "should prefer child \"trust proxy\" setting",
      "fullTitle": "config .get() when mounted should prefer child \"trust proxy\" setting",
      "duration": 0
    },
    {
      "title": "should set the value to true",
      "fullTitle": "config .enable() should set the value to true",
      "duration": 0
    },
    {
      "title": "should set the value to false",
      "fullTitle": "config .disable() should set the value to false",
      "duration": 0
    },
    {
      "title": "should default to false",
      "fullTitle": "config .enabled() should default to false",
      "duration": 0
    },
    {
      "title": "should return true when set",
      "fullTitle": "config .enabled() should return true when set",
      "duration": 0
    },
    {
      "title": "should default to true",
      "fullTitle": "config .disabled() should default to true",
      "duration": 0
    },
    {
      "title": "should return false when set",
      "fullTitle": "config .disabled() should return false when set",
      "duration": 0
    },
    {
      "title": "should expose connect middleware",
      "fullTitle": "exports should expose connect middleware",
      "duration": 0
    },
    {
      "title": "should expose .mime",
      "fullTitle": "exports should expose .mime",
      "duration": 0
    },
    {
      "title": "should expose Router",
      "fullTitle": "exports should expose Router",
      "duration": 0
    },
    {
      "title": "should expose the application prototype",
      "fullTitle": "exports should expose the application prototype",
      "duration": 0
    },
    {
      "title": "should expose the request prototype",
      "fullTitle": "exports should expose the request prototype",
      "duration": 0
    },
    {
      "title": "should expose the response prototype",
      "fullTitle": "exports should expose the response prototype",
      "duration": 0
    },
    {
      "title": "should permit modifying the .application prototype",
      "fullTitle": "exports should permit modifying the .application prototype",
      "duration": 0
    },
    {
      "title": "should permit modifying the .request prototype",
      "fullTitle": "exports should permit modifying the .request prototype",
      "duration": 1
    },
    {
      "title": "should permit modifying the .response prototype",
      "fullTitle": "exports should permit modifying the .response prototype",
      "duration": 1
    },
    {
      "title": "should fail gracefully",
      "fullTitle": "throw after .end() should fail gracefully",
      "duration": 1
    },
    {
      "title": "should return an array of accepted media types",
      "fullTitle": "req .accepted should return an array of accepted media types",
      "duration": 2
    },
    {
      "title": "should default to []",
      "fullTitle": "req .accepted when Accept is not present should default to []",
      "duration": 1
    },
    {
      "title": "should return an array of accepted charsets",
      "fullTitle": "req .acceptedCharsets should return an array of accepted charsets",
      "duration": 1
    },
    {
      "title": "should default to []",
      "fullTitle": "req .acceptedCharsets when Accept-Charset is not present should default to []",
      "duration": 2
    },
    {
      "title": "should return an array of accepted encodings",
      "fullTitle": "req .acceptedEncodings should return an array of accepted encodings",
      "duration": 0
    },
    {
      "title": "should default to []",
      "fullTitle": "req .acceptedEncodings when Accept-Encoding is not present should default to []",
      "duration": 0
    },
    {
      "title": "should return an array of accepted languages",
      "fullTitle": "req .acceptedLanguages should return an array of accepted languages",
      "duration": 0
    },
    {
      "title": "should default to []",
      "fullTitle": "req .acceptedLanguages when Accept-Language is not present should default to []",
      "duration": 0
    },
    {
      "title": "should accept a comma-delimited list of types",
      "fullTitle": "req should accept a comma-delimited list of types",
      "duration": 0
    },
    {
      "title": "should accept an argument list of type names",
      "fullTitle": "req should accept an argument list of type names",
      "duration": 0
    },
    {
      "title": "should return true when Accept is not present",
      "fullTitle": "req .accepts(type) should return true when Accept is not present",
      "duration": 1
    },
    {
      "title": "should return true when present",
      "fullTitle": "req .accepts(type) should return true when present",
      "duration": 1
    },
    {
      "title": "should return false otherwise",
      "fullTitle": "req .accepts(type) should return false otherwise",
      "duration": 1
    },
    {
      "title": "should return the first when Accept is not present",
      "fullTitle": "req .accepts(types) should return the first when Accept is not present",
      "duration": 1
    },
    {
      "title": "should return the first acceptable type",
      "fullTitle": "req .accepts(types) should return the first acceptable type",
      "duration": 1
    },
    {
      "title": "should return false when no match is made",
      "fullTitle": "req .accepts(types) should return false when no match is made",
      "duration": 1
    },
    {
      "title": "should take quality into account",
      "fullTitle": "req .accepts(types) should take quality into account",
      "duration": 1
    },
    {
      "title": "should return the first acceptable type with canonical mime types",
      "fullTitle": "req .accepts(types) should return the first acceptable type with canonical mime types",
      "duration": 0
    },
    {
      "title": "should return true",
      "fullTitle": "req .acceptsCharset(type) when Accept-Charset is not present should return true",
      "duration": 0
    },
    {
      "title": "should return true when present",
      "fullTitle": "req .acceptsCharset(type) when Accept-Charset is not present should return true when present",
      "duration": 0
    },
    {
      "title": "should return false otherwise",
      "fullTitle": "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise",
      "duration": 1
    },
    {
      "title": "should be true if encoding accpeted",
      "fullTitle": "req .acceptsEncodings should be true if encoding accpeted",
      "duration": 1
    },
    {
      "title": "should be false if encoding not accpeted",
      "fullTitle": "req .acceptsEncodings should be false if encoding not accpeted",
      "duration": 1
    },
    {
      "title": "should be true if language accpeted",
      "fullTitle": "req .acceptsLanguage should be true if language accpeted",
      "duration": 1
    },
    {
      "title": "should be false if language not accpeted",
      "fullTitle": "req .acceptsLanguage should be false if language not accpeted",
      "duration": 1
    },
    {
      "title": "should always return true",
      "fullTitle": "req .acceptsLanguage when Accept-Language is not present should always return true",
      "duration": 1
    },
    {
      "title": "should return .username and .password",
      "fullTitle": "req .auth should return .username and .password",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when Authorization is missing should return undefined",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when Authorization is malformed should return undefined",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when Authorization is not Basic should return undefined",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when encoded string is malformed should return undefined",
      "duration": 2
    },
    {
      "title": "should return .username and .password",
      "fullTitle": "req .auth when password contains a colon should return .username and .password",
      "duration": 1
    },
    {
      "title": "should return true when the resource is not modified",
      "fullTitle": "req .fresh should return true when the resource is not modified",
      "duration": 1
    },
    {
      "title": "should return false when the resource is modified",
      "fullTitle": "req .fresh should return false when the resource is modified",
      "duration": 1
    },
    {
      "title": "should return false without response headers",
      "fullTitle": "req .fresh should return false without response headers",
      "duration": 1
    },
    {
      "title": "should return the header field value",
      "fullTitle": "req .get(field) should return the header field value",
      "duration": 1
    },
    {
      "title": "should special-case Referer",
      "fullTitle": "req .get(field) should special-case Referer",
      "duration": 1
    },
    {
      "title": "should return the Host when present",
      "fullTitle": "req .host should return the Host when present",
      "duration": 1
    },
    {
      "title": "should strip port number",
      "fullTitle": "req .host should strip port number",
      "duration": 1
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "req .host should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should work with IPv6 Host",
      "fullTitle": "req .host should work with IPv6 Host",
      "duration": 1
    },
    {
      "title": "should work with IPv6 Host and port",
      "fullTitle": "req .host should work with IPv6 Host and port",
      "duration": 1
    },
    {
      "title": "should respect X-Forwarded-Host",
      "fullTitle": "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Host if socket addr not trusted",
      "fullTitle": "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted",
      "duration": 2
    },
    {
      "title": "should default to Host",
      "fullTitle": "req .host when \"trust proxy\" is enabled should default to Host",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Host",
      "fullTitle": "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host",
      "duration": 1
    },
    {
      "title": "should return the client addr",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr",
      "duration": 0
    },
    {
      "title": "should return the addr after trusted proxy",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy",
      "duration": 0
    },
    {
      "title": "should return the addr after trusted proxy, from sub app",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app",
      "duration": 1
    },
    {
      "title": "should return the remote address",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address",
      "duration": 0
    },
    {
      "title": "should return the remote address",
      "fullTitle": "req .ip when X-Forwarded-For is not present should return the remote address",
      "duration": 0
    },
    {
      "title": "should return an array of the specified addresses",
      "fullTitle": "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses",
      "duration": 1
    },
    {
      "title": "should stop at first untrusted",
      "fullTitle": "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted",
      "duration": 1
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array",
      "duration": 1
    },
    {
      "title": "should return []",
      "fullTitle": "req .ips when X-Forwarded-For is not present should return []",
      "duration": 1
    },
    {
      "title": "should ignore charset",
      "fullTitle": "req.is() should ignore charset",
      "duration": 0
    },
    {
      "title": "should return false",
      "fullTitle": "req.is() when content-type is not present should return false",
      "duration": 0
    },
    {
      "title": "should lookup the mime type",
      "fullTitle": "req.is() when given an extension should lookup the mime type",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given a mime type should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given */subtype should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given */subtype with a charset should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given type/* should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given type/* with a charset should match",
      "duration": 0
    },
    {
      "title": "should use the default value unless defined",
      "fullTitle": "req .param(name, default) should use the default value unless defined",
      "duration": 1
    },
    {
      "title": "should check req.query",
      "fullTitle": "req .param(name) should check req.query",
      "duration": 1
    },
    {
      "title": "should check req.body",
      "fullTitle": "req .param(name) should check req.body",
      "duration": 6
    },
    {
      "title": "should check req.params",
      "fullTitle": "req .param(name) should check req.params",
      "duration": 1
    },
    {
      "title": "should return the parsed pathname",
      "fullTitle": "req .path should return the parsed pathname",
      "duration": 1
    },
    {
      "title": "should return the protocol string",
      "fullTitle": "req .protocol should return the protocol string",
      "duration": 1
    },
    {
      "title": "should respect X-Forwarded-Proto",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto",
      "duration": 1
    },
    {
      "title": "should default to the socket addr if X-Forwarded-Proto not present",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Proto if socket addr not trusted",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted",
      "duration": 1
    },
    {
      "title": "should default to http",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should default to http",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Proto",
      "fullTitle": "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto",
      "duration": 1
    },
    {
      "title": "should default to {}",
      "fullTitle": "req .query should default to {}",
      "duration": 1
    },
    {
      "title": "should contain the parsed query-string",
      "fullTitle": "req .query should contain the parsed query-string",
      "duration": 1
    },
    {
      "title": "should return parsed ranges",
      "fullTitle": "req .range(size) should return parsed ranges",
      "duration": 0
    },
    {
      "title": "should cap to the given size",
      "fullTitle": "req .range(size) should cap to the given size",
      "duration": 1
    },
    {
      "title": "should have a .type",
      "fullTitle": "req .range(size) should have a .type",
      "duration": 0
    },
    {
      "title": "should return undefined if no range",
      "fullTitle": "req .range(size) should return undefined if no range",
      "duration": 0
    },
    {
      "title": "should be the executed Route",
      "fullTitle": "req .route should be the executed Route",
      "duration": 1
    },
    {
      "title": "should return false when http",
      "fullTitle": "req .secure when X-Forwarded-Proto is missing should return false when http",
      "duration": 1
    },
    {
      "title": "should return false when http",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return false when http",
      "duration": 1
    },
    {
      "title": "should return true when \"trust proxy\" is enabled",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled",
      "duration": 1
    },
    {
      "title": "should return false when initial proxy is http",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http",
      "duration": 1
    },
    {
      "title": "should return true when initial proxy is https",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https",
      "duration": 1
    },
    {
      "title": "should return a signed JSON cookie",
      "fullTitle": "req .signedCookies should return a signed JSON cookie",
      "duration": 3
    },
    {
      "title": "should return false when the resource is not modified",
      "fullTitle": "req .stale should return false when the resource is not modified",
      "duration": 1
    },
    {
      "title": "should return true when the resource is modified",
      "fullTitle": "req .stale should return true when the resource is modified",
      "duration": 1
    },
    {
      "title": "should return true without response headers",
      "fullTitle": "req .stale should return true without response headers",
      "duration": 1
    },
    {
      "title": "should return an array",
      "fullTitle": "req .subdomains when present should return an array",
      "duration": 3
    },
    {
      "title": "should work with IPv4 address",
      "fullTitle": "req .subdomains when present should work with IPv4 address",
      "duration": 1
    },
    {
      "title": "should work with IPv6 address",
      "fullTitle": "req .subdomains when present should work with IPv6 address",
      "duration": 2
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .subdomains otherwise should return an empty array",
      "duration": 1
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .subdomains with no host should return an empty array",
      "duration": 1
    },
    {
      "title": "should return an array",
      "fullTitle": "req .subdomains with trusted X-Forwarded-Host should return an array",
      "duration": 1
    },
    {
      "title": "should return an array with the whole domain",
      "fullTitle": "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain",
      "duration": 1
    },
    {
      "title": "should return an array with the whole IPv4",
      "fullTitle": "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4",
      "duration": 1
    },
    {
      "title": "should return an array with the whole IPv6",
      "fullTitle": "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6",
      "duration": 1
    },
    {
      "title": "should return an array",
      "fullTitle": "req .subdomains when subdomain offset is set when present should return an array",
      "duration": 1
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .subdomains when subdomain offset is set otherwise should return an empty array",
      "duration": 1
    },
    {
      "title": "should return true when X-Requested-With is xmlhttprequest",
      "fullTitle": "req .xhr should return true when X-Requested-With is xmlhttprequest",
      "duration": 1
    },
    {
      "title": "should case-insensitive",
      "fullTitle": "req .xhr should case-insensitive",
      "duration": 1
    },
    {
      "title": "should return false otherwise",
      "fullTitle": "req .xhr should return false otherwise",
      "duration": 1
    },
    {
      "title": "should return false when not present",
      "fullTitle": "req .xhr should return false when not present",
      "duration": 1
    },
    {
      "title": "should Content-Disposition to attachment",
      "fullTitle": "res .attachment() should Content-Disposition to attachment",
      "duration": 1
    },
    {
      "title": "should add the filename param",
      "fullTitle": "res .attachment(filename) should add the filename param",
      "duration": 2
    },
    {
      "title": "should set the Content-Type",
      "fullTitle": "res .attachment(filename) should set the Content-Type",
      "duration": 1
    },
    {
      "title": "should add the charset param to Content-Type",
      "fullTitle": "res .charset should add the charset param to Content-Type",
      "duration": 1
    },
    {
      "title": "should be replaced by real charset in res.send",
      "fullTitle": "res .charset should be replaced by real charset in res.send",
      "duration": 1
    },
    {
      "title": "should set a cookie passed expiry",
      "fullTitle": "res .clearCookie(name) should set a cookie passed expiry",
      "duration": 1
    },
    {
      "title": "should set the given params",
      "fullTitle": "res .clearCookie(name, options) should set the given params",
      "duration": 1
    },
    {
      "title": "should generate a JSON cookie",
      "fullTitle": "res .cookie(name, object) should generate a JSON cookie",
      "duration": 1
    },
    {
      "title": "should set a cookie",
      "fullTitle": "res .cookie(name, string) should set a cookie",
      "duration": 1
    },
    {
      "title": "should allow multiple calls",
      "fullTitle": "res .cookie(name, string) should allow multiple calls",
      "duration": 1
    },
    {
      "title": "should set params",
      "fullTitle": "res .cookie(name, string, options) should set params",
      "duration": 1
    },
    {
      "title": "should set relative expires",
      "fullTitle": "res .cookie(name, string, options) maxAge should set relative expires",
      "duration": 1
    },
    {
      "title": "should set max-age",
      "fullTitle": "res .cookie(name, string, options) maxAge should set max-age",
      "duration": 1
    },
    {
      "title": "should not mutate the options object",
      "fullTitle": "res .cookie(name, string, options) maxAge should not mutate the options object",
      "duration": 0
    },
    {
      "title": "should generate a signed JSON cookie",
      "fullTitle": "res .cookie(name, string, options) signed should generate a signed JSON cookie",
      "duration": 1
    },
    {
      "title": "should set a signed cookie",
      "fullTitle": "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie",
      "duration": 1
    },
    {
      "title": "should transfer as an attachment",
      "fullTitle": "res .download(path) should transfer as an attachment",
      "duration": 3
    },
    {
      "title": "should provide an alternate filename",
      "fullTitle": "res .download(path, filename) should provide an alternate filename",
      "duration": 1
    },
    {
      "title": "should invoke the callback",
      "fullTitle": "res .download(path, fn) should invoke the callback",
      "duration": 1
    },
    {
      "title": "should invoke the callback",
      "fullTitle": "res .download(path, filename, fn) should invoke the callback",
      "duration": 1
    },
    {
      "title": "should invoke the callback",
      "fullTitle": "res on failure should invoke the callback",
      "duration": 0
    },
    {
      "title": "should remove Content-Disposition",
      "fullTitle": "res on failure should remove Content-Disposition",
      "duration": 1
    },
    {
      "title": "should utilize qvalues in negotiation",
      "fullTitle": "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation",
      "duration": 1
    },
    {
      "title": "should allow wildcard type/subtypes",
      "fullTitle": "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes",
      "duration": 1
    },
    {
      "title": "should default the Content-Type",
      "fullTitle": "res .format(obj) with canonicalized mime types should default the Content-Type",
      "duration": 1
    },
    {
      "title": "should set the correct  charset for the Content-Type",
      "fullTitle": "res .format(obj) with canonicalized mime types should set the correct  charset for the Content-Type",
      "duration": 0
    },
    {
      "title": "should Vary: Accept",
      "fullTitle": "res .format(obj) with canonicalized mime types should Vary: Accept",
      "duration": 1
    },
    {
      "title": "should invoke the first callback",
      "fullTitle": "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback",
      "duration": 1
    },
    {
      "title": "should should respond with 406 not acceptable",
      "fullTitle": "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable",
      "duration": 1
    },
    {
      "title": "should utilize qvalues in negotiation",
      "fullTitle": "res .format(obj) with extnames should utilize qvalues in negotiation",
      "duration": 1
    },
    {
      "title": "should allow wildcard type/subtypes",
      "fullTitle": "res .format(obj) with extnames should allow wildcard type/subtypes",
      "duration": 0
    },
    {
      "title": "should default the Content-Type",
      "fullTitle": "res .format(obj) with extnames should default the Content-Type",
      "duration": 0
    },
    {
      "title": "should set the correct  charset for the Content-Type",
      "fullTitle": "res .format(obj) with extnames should set the correct  charset for the Content-Type",
      "duration": 1
    },
    {
      "title": "should Vary: Accept",
      "fullTitle": "res .format(obj) with extnames should Vary: Accept",
      "duration": 1
    },
    {
      "title": "should invoke the first callback",
      "fullTitle": "res .format(obj) with extnames when Accept is not present should invoke the first callback",
      "duration": 1
    },
    {
      "title": "should should respond with 406 not acceptable",
      "fullTitle": "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable",
      "duration": 1
    },
    {
      "title": "should be invoked instead of auto-responding",
      "fullTitle": "res .format(obj) given .default should be invoked instead of auto-responding",
      "duration": 1
    },
    {
      "title": "should utilize qvalues in negotiation",
      "fullTitle": "res .format(obj) in router should utilize qvalues in negotiation",
      "duration": 1
    },
    {
      "title": "should allow wildcard type/subtypes",
      "fullTitle": "res .format(obj) in router should allow wildcard type/subtypes",
      "duration": 1
    },
    {
      "title": "should default the Content-Type",
      "fullTitle": "res .format(obj) in router should default the Content-Type",
      "duration": 0
    },
    {
      "title": "should set the correct  charset for the Content-Type",
      "fullTitle": "res .format(obj) in router should set the correct  charset for the Content-Type",
      "duration": 0
    },
    {
      "title": "should Vary: Accept",
      "fullTitle": "res .format(obj) in router should Vary: Accept",
      "duration": 1
    },
    {
      "title": "should invoke the first callback",
      "fullTitle": "res .format(obj) in router when Accept is not present should invoke the first callback",
      "duration": 1
    },
    {
      "title": "should should respond with 406 not acceptable",
      "fullTitle": "res .format(obj) in router when no match is made should should respond with 406 not acceptable",
      "duration": 1
    },
    {
      "title": "should get the response header field",
      "fullTitle": "res .get(field) should get the response header field",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types",
      "fullTitle": "res should not override previous Content-Types",
      "duration": 1
    },
    {
      "title": "should not support jsonp callbacks",
      "fullTitle": "res .json(object) should not support jsonp callbacks",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types",
      "fullTitle": "res .json(object) should not override previous Content-Types",
      "duration": 1
    },
    {
      "title": "should respond with json for null",
      "fullTitle": "res .json(object) when given primitives should respond with json for null",
      "duration": 1
    },
    {
      "title": "should respond with json for Number",
      "fullTitle": "res .json(object) when given primitives should respond with json for Number",
      "duration": 0
    },
    {
      "title": "should respond with json for String",
      "fullTitle": "res .json(object) when given primitives should respond with json for String",
      "duration": 0
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .json(object) when given an array should respond with json",
      "duration": 0
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .json(object) when given an object should respond with json",
      "duration": 0
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()",
      "duration": 0
    },
    {
      "title": "should default to 2 in development",
      "fullTitle": "res .json(object) \"json spaces\" setting should default to 2 in development",
      "duration": 0
    },
    {
      "title": "should be undefined otherwise",
      "fullTitle": "res .json(object) \"json spaces\" setting should be undefined otherwise",
      "duration": 0
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode",
      "fullTitle": "res .json(status, object) should respond with json and set the .statusCode",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode for backwards compat",
      "fullTitle": "res .json(object, status) should respond with json and set the .statusCode for backwards compat",
      "duration": 1
    },
    {
      "title": "should use status as second number for backwards compat",
      "fullTitle": "res .json(object, status) should use status as second number for backwards compat",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types",
      "fullTitle": "res should not override previous Content-Types",
      "duration": 1
    },
    {
      "title": "should respond with jsonp",
      "fullTitle": "res .jsonp(object) should respond with jsonp",
      "duration": 1
    },
    {
      "title": "should use first callback parameter with jsonp",
      "fullTitle": "res .jsonp(object) should use first callback parameter with jsonp",
      "duration": 1
    },
    {
      "title": "should ignore object callback parameter with jsonp",
      "fullTitle": "res .jsonp(object) should ignore object callback parameter with jsonp",
      "duration": 1
    },
    {
      "title": "should allow renaming callback",
      "fullTitle": "res .jsonp(object) should allow renaming callback",
      "duration": 1
    },
    {
      "title": "should allow []",
      "fullTitle": "res .jsonp(object) should allow []",
      "duration": 1
    },
    {
      "title": "should disallow arbitrary js",
      "fullTitle": "res .jsonp(object) should disallow arbitrary js",
      "duration": 1
    },
    {
      "title": "should escape utf whitespace",
      "fullTitle": "res .jsonp(object) should escape utf whitespace",
      "duration": 1
    },
    {
      "title": "should not escape utf whitespace for json fallback",
      "fullTitle": "res .jsonp(object) should not escape utf whitespace for json fallback",
      "duration": 1
    },
    {
      "title": "should include security header and prologue",
      "fullTitle": "res .jsonp(object) should include security header and prologue",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types with no callback",
      "fullTitle": "res .jsonp(object) should not override previous Content-Types with no callback",
      "duration": 1
    },
    {
      "title": "should override previous Content-Types with callback",
      "fullTitle": "res .jsonp(object) should override previous Content-Types with callback",
      "duration": 1
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json",
      "duration": 1
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .jsonp(object) when given an array should respond with json",
      "duration": 1
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .jsonp(object) when given an object should respond with json",
      "duration": 1
    },
    {
      "title": "should respond with json for null",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json for null",
      "duration": 1
    },
    {
      "title": "should respond with json for Number",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json for Number",
      "duration": 1
    },
    {
      "title": "should respond with json for String",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json for String",
      "duration": 1
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()",
      "duration": 1
    },
    {
      "title": "should default to 2 in development",
      "fullTitle": "res .jsonp(object) \"json spaces\" setting should default to 2 in development",
      "duration": 0
    },
    {
      "title": "should be undefined otherwise",
      "fullTitle": "res .jsonp(object) \"json spaces\" setting should be undefined otherwise",
      "duration": 0
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode",
      "fullTitle": "res .jsonp(status, object) should respond with json and set the .statusCode",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode for backwards compat",
      "fullTitle": "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat",
      "duration": 1
    },
    {
      "title": "should use status as second number for backwards compat",
      "fullTitle": "res .jsonp(object, status) should use status as second number for backwards compat",
      "duration": 1
    },
    {
      "title": "should set Link header field",
      "fullTitle": "res .links(obj) should set Link header field",
      "duration": 1
    },
    {
      "title": "should set Link header field for multiple calls",
      "fullTitle": "res .links(obj) should set Link header field for multiple calls",
      "duration": 1
    },
    {
      "title": "should work when mounted",
      "fullTitle": "res should work when mounted",
      "duration": 1
    },
    {
      "title": "should merge locals",
      "fullTitle": "res .locals(obj) should merge locals",
      "duration": 1
    },
    {
      "title": "should set the header",
      "fullTitle": "res .location(url) should set the header",
      "duration": 1
    },
    {
      "title": "should pass through scheme-relative urls",
      "fullTitle": "res .location(url) with leading // should pass through scheme-relative urls",
      "duration": 1
    },
    {
      "title": "should construct scheme-relative urls",
      "fullTitle": "res .location(url) with leading / should construct scheme-relative urls",
      "duration": 1
    },
    {
      "title": "should construct path-relative urls",
      "fullTitle": "res .location(url) with leading ./ should construct path-relative urls",
      "duration": 1
    },
    {
      "title": "should construct path-relative urls",
      "fullTitle": "res .location(url) with leading ../ should construct path-relative urls",
      "duration": 1
    },
    {
      "title": "should construct path-relative urls",
      "fullTitle": "res .location(url) with leading ./ and containing .. should construct path-relative urls",
      "duration": 1
    },
    {
      "title": "should construct mount-point relative urls",
      "fullTitle": "res .location(url) without leading / should construct mount-point relative urls",
      "duration": 1
    },
    {
      "title": "should respect the mount-point",
      "fullTitle": "res .location(url) when mounted deeply should respect the mount-point",
      "duration": 1
    },
    {
      "title": "should respect the mount-point",
      "fullTitle": "res .location(url) when mounted omitting leading / should respect the mount-point",
      "duration": 1
    },
    {
      "title": "should ignore mount-point",
      "fullTitle": "res .location(url) when mounted providing leading / should ignore mount-point",
      "duration": 1
    },
    {
      "title": "should default to a 302 redirect",
      "fullTitle": "res .redirect(url) should default to a 302 redirect",
      "duration": 1
    },
    {
      "title": "should set the response status",
      "fullTitle": "res .redirect(status, url) should set the response status",
      "duration": 1
    },
    {
      "title": "should set the response status",
      "fullTitle": "res .redirect(url, status) should set the response status",
      "duration": 2
    },
    {
      "title": "should ignore the body",
      "fullTitle": "res when the request method is HEAD should ignore the body",
      "duration": 1
    },
    {
      "title": "should respond with html",
      "fullTitle": "res when accepting html should respond with html"
    },
    {
      "title": "should escape the url",
      "fullTitle": "res when accepting html should escape the url"
    },
    {
      "title": "should respond with text",
      "fullTitle": "res when accepting text should respond with text"
    },
    {
      "title": "should encode the url",
      "fullTitle": "res when accepting text should encode the url"
    },
    {
      "title": "should respond with an empty body",
      "fullTitle": "res when accepting neither text or html should respond with an empty body",
      "duration": 1
    },
    {
      "title": "should not contain redundant leading slashes in the location header",
      "fullTitle": "res responses redirected to relative paths should not contain redundant leading slashes in the location header",
      "duration": 1
    },
    {
      "title": "should preserve context when redirecting nested applications at any depth",
      "fullTitle": "res responses redirected to relative paths should preserve context when redirecting nested applications at any depth",
      "duration": 3
    },
    {
      "title": "should redirect correctly for nested applications that have been remounted",
      "fullTitle": "res responses redirected to relative paths should redirect correctly for nested applications that have been remounted",
      "duration": 2
    },
    {
      "title": "should support absolute paths",
      "fullTitle": "res .render(name) should support absolute paths",
      "duration": 1
    },
    {
      "title": "should support absolute paths with \"view engine\"",
      "fullTitle": "res .render(name) should support absolute paths with \"view engine\"",
      "duration": 1
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "res .render(name) should expose app.locals",
      "duration": 1
    },
    {
      "title": "should support index.<engine>",
      "fullTitle": "res .render(name) should support index.<engine>",
      "duration": 1
    },
    {
      "title": "should next(err)",
      "fullTitle": "res .render(name) when an error occurs should next(err)",
      "duration": 1
    },
    {
      "title": "should render the template",
      "fullTitle": "res .render(name) when \"view engine\" is given should render the template",
      "duration": 1
    },
    {
      "title": "should render the template",
      "fullTitle": "res .render(name, option) should render the template",
      "duration": 0
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "res .render(name, option) should expose app.locals",
      "duration": 1
    },
    {
      "title": "should expose res.locals",
      "fullTitle": "res .render(name, option) should expose res.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to res.locals over app.locals",
      "fullTitle": "res .render(name, option) should give precedence to res.locals over app.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to res.render() locals over res.locals",
      "fullTitle": "res .render(name, option) should give precedence to res.render() locals over res.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to res.render() locals over app.locals",
      "fullTitle": "res .render(name, option) should give precedence to res.render() locals over app.locals",
      "duration": 1
    },
    {
      "title": "should pass the resulting string",
      "fullTitle": "res .render(name, options, fn) should pass the resulting string",
      "duration": 1
    },
    {
      "title": "should pass the resulting string",
      "fullTitle": "res .render(name, fn) should pass the resulting string",
      "duration": 1
    },
    {
      "title": "should pass it to the callback",
      "fullTitle": "res .render(name, fn) when an error occurs should pass it to the callback",
      "duration": 2
    },
    {
      "title": "should always check regardless of length",
      "fullTitle": "res should always check regardless of length",
      "duration": 1
    },
    {
      "title": "should respond with 304 Not Modified when fresh",
      "fullTitle": "res should respond with 304 Not Modified when fresh",
      "duration": 2
    },
    {
      "title": "should not perform freshness check unless 2xx or 304",
      "fullTitle": "res should not perform freshness check unless 2xx or 304",
      "duration": 1
    },
    {
      "title": "should not support jsonp callbacks",
      "fullTitle": "res should not support jsonp callbacks",
      "duration": 1
    },
    {
      "title": "should set body to \"\"",
      "fullTitle": "res .send(null) should set body to \"\"",
      "duration": 0
    },
    {
      "title": "should set body to \"\"",
      "fullTitle": "res .send(undefined) should set body to \"\"",
      "duration": 0
    },
    {
      "title": "should set .statusCode",
      "fullTitle": "res .send(code) should set .statusCode",
      "duration": 1
    },
    {
      "title": "should set .statusCode and body",
      "fullTitle": "res .send(code, body) should set .statusCode and body",
      "duration": 1
    },
    {
      "title": "should be supported for backwards compat",
      "fullTitle": "res .send(body, code) should be supported for backwards compat",
      "duration": 1
    },
    {
      "title": "should send number as json",
      "fullTitle": "res .send(code, number) should send number as json",
      "duration": 1
    },
    {
      "title": "should send as html",
      "fullTitle": "res .send(String) should send as html",
      "duration": 0
    },
    {
      "title": "should set ETag",
      "fullTitle": "res .send(String) should set ETag",
      "duration": 1
    },
    {
      "title": "should not override Content-Type",
      "fullTitle": "res .send(String) should not override Content-Type",
      "duration": 1
    },
    {
      "title": "should override charset in Content-Type",
      "fullTitle": "res .send(String) should override charset in Content-Type",
      "duration": 1
    },
    {
      "title": "should keep charset in Content-Type for Buffers",
      "fullTitle": "res .send(String) should keep charset in Content-Type for Buffers",
      "duration": 1
    },
    {
      "title": "should send as octet-stream",
      "fullTitle": "res .send(Buffer) should send as octet-stream",
      "duration": 1
    },
    {
      "title": "should set ETag",
      "fullTitle": "res .send(Buffer) should set ETag",
      "duration": 1
    },
    {
      "title": "should not override Content-Type",
      "fullTitle": "res .send(Buffer) should not override Content-Type",
      "duration": 1
    },
    {
      "title": "should send as application/json",
      "fullTitle": "res .send(Object) should send as application/json",
      "duration": 1
    },
    {
      "title": "should ignore the body",
      "fullTitle": "res when the request method is HEAD should ignore the body",
      "duration": 1
    },
    {
      "title": "should strip Content-* fields, Transfer-Encoding field, and body",
      "fullTitle": "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body",
      "duration": 1
    },
    {
      "title": "should strip Content-* fields, Transfer-Encoding field, and body",
      "fullTitle": "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body",
      "duration": 1
    },
    {
      "title": "should send ETag",
      "fullTitle": "res \"etag\" setting when enabled should send ETag",
      "duration": 0
    },
    {
      "title": "should send ETag in response to ACL request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to ACL request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to BIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to BIND request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to CHECKOUT request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to COPY request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to COPY request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to DELETE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to DELETE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to GET request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to GET request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to HEAD request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to HEAD request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to LINK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to LINK request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to LOCK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to LOCK request",
      "duration": 2
    },
    {
      "title": "should send ETag in response to M-SEARCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MERGE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MERGE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MKACTIVITY request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MKCALENDAR request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MKCOL request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MKCOL request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MOVE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MOVE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to NOTIFY request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to NOTIFY request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to OPTIONS request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to OPTIONS request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to PATCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PATCH request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to POST request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to POST request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PROPFIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PROPFIND request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PROPPATCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PURGE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PURGE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PUT request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PUT request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to REBIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to REBIND request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to REPORT request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to REPORT request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to SEARCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to SEARCH request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to SOURCE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to SOURCE request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to SUBSCRIBE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to TRACE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to TRACE request",
      "duration": 2
    },
    {
      "title": "should send ETag in response to UNBIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNBIND request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to UNLINK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNLINK request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to UNLOCK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNLOCK request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to UNSUBSCRIBE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request",
      "duration": 1
    },
    {
      "title": "should send ETag for empty string response",
      "fullTitle": "res \"etag\" setting when enabled should send ETag for empty string response",
      "duration": 1
    },
    {
      "title": "should send ETag for long response",
      "fullTitle": "res \"etag\" setting when enabled should send ETag for long response",
      "duration": 1
    },
    {
      "title": "should not override ETag when manually set",
      "fullTitle": "res \"etag\" setting when enabled should not override ETag when manually set",
      "duration": 1
    },
    {
      "title": "should not send ETag for res.send()",
      "fullTitle": "res \"etag\" setting when enabled should not send ETag for res.send()",
      "duration": 1
    },
    {
      "title": "should send no ETag",
      "fullTitle": "res \"etag\" setting when disabled should send no ETag",
      "duration": 1
    },
    {
      "title": "should send ETag when manually set",
      "fullTitle": "res \"etag\" setting when disabled should send ETag when manually set",
      "duration": 1
    },
    {
      "title": "should send strong ETag",
      "fullTitle": "res \"etag\" setting when \"strong\" should send strong ETag",
      "duration": 1
    },
    {
      "title": "should send weak ETag",
      "fullTitle": "res \"etag\" setting when \"weak\" should send weak ETag",
      "duration": 1
    },
    {
      "title": "should send custom ETag",
      "fullTitle": "res \"etag\" setting when a function should send custom ETag",
      "duration": 1
    },
    {
      "title": "should not send falsy ETag",
      "fullTitle": "res \"etag\" setting when a function should not send falsy ETag",
      "duration": 1
    },
    {
      "title": "should invoke the callback when complete",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback when complete",
      "duration": 1
    },
    {
      "title": "should utilize the same options as express.static()",
      "fullTitle": "res .sendfile(path, fn) should utilize the same options as express.static()",
      "duration": 1
    },
    {
      "title": "should invoke the callback on 404",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback on 404"
    },
    {
      "title": "should not override manual content-types",
      "fullTitle": "res .sendfile(path, fn) should not override manual content-types",
      "duration": 1
    },
    {
      "title": "should invoke the callback on 403",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback on 403",
      "duration": 1
    },
    {
      "title": "should invoke the callback on socket error",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback on socket error",
      "duration": 1
    },
    {
      "title": "should not serve dotfiles",
      "fullTitle": "res .sendfile(path) should not serve dotfiles",
      "duration": 1
    },
    {
      "title": "should accept dotfiles option",
      "fullTitle": "res .sendfile(path) should accept dotfiles option",
      "duration": 1
    },
    {
      "title": "should transfer a file",
      "fullTitle": "res .sendfile(path) should transfer a file",
      "duration": 1
    },
    {
      "title": "should transfer a directory index file",
      "fullTitle": "res .sendfile(path) should transfer a directory index file",
      "duration": 2
    },
    {
      "title": "should transfer the file",
      "fullTitle": "res .sendfile(path) with an absolute path should transfer the file",
      "duration": 1
    },
    {
      "title": "should transfer the file",
      "fullTitle": "res .sendfile(path) with a relative path should transfer the file",
      "duration": 1
    },
    {
      "title": "should serve relative to \"root\"",
      "fullTitle": "res .sendfile(path) with a relative path should serve relative to \"root\"",
      "duration": 2
    },
    {
      "title": "should consider ../ malicious when \"root\" is not set",
      "fullTitle": "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set",
      "duration": 1
    },
    {
      "title": "should allow ../ when \"root\" is set",
      "fullTitle": "res .sendfile(path) with a relative path should allow ../ when \"root\" is set",
      "duration": 1
    },
    {
      "title": "should disallow requesting out of \"root\"",
      "fullTitle": "res .sendfile(path) with a relative path should disallow requesting out of \"root\"",
      "duration": 1
    },
    {
      "title": "should next(404) when not found",
      "fullTitle": "res .sendfile(path) with a relative path should next(404) when not found",
      "duration": 1
    },
    {
      "title": "should still serve",
      "fullTitle": "res .sendfile(path) with a relative path with non-GET should still serve",
      "duration": 1
    },
    {
      "title": "should set the response header field",
      "fullTitle": "res .set(field, value) should set the response header field",
      "duration": 0
    },
    {
      "title": "should coerce to a string",
      "fullTitle": "res .set(field, value) should coerce to a string",
      "duration": 1
    },
    {
      "title": "should set multiple response header fields",
      "fullTitle": "res .set(field, values) should set multiple response header fields",
      "duration": 1
    },
    {
      "title": "should coerce to an array of strings",
      "fullTitle": "res .set(field, values) should coerce to an array of strings",
      "duration": 1
    },
    {
      "title": "should set multiple fields",
      "fullTitle": "res .set(object) should set multiple fields",
      "duration": 1
    },
    {
      "title": "should coerce to a string",
      "fullTitle": "res .set(object) should coerce to a string",
      "duration": 1
    },
    {
      "title": "should set the response .statusCode",
      "fullTitle": "res .status(code) should set the response .statusCode",
      "duration": 1
    },
    {
      "title": "should set the Content-Type based on a filename",
      "fullTitle": "res .type(str) should set the Content-Type based on a filename",
      "duration": 1
    },
    {
      "title": "should default to application/octet-stream",
      "fullTitle": "res .type(str) should default to application/octet-stream",
      "duration": 0
    },
    {
      "title": "should set the Content-Type with type/subtype",
      "fullTitle": "res .type(str) should set the Content-Type with type/subtype",
      "duration": 0
    },
    {
      "title": "should not set Vary",
      "fullTitle": "res.vary() with no arguments should not set Vary",
      "duration": 1
    },
    {
      "title": "should not set Vary",
      "fullTitle": "res.vary() with an empty array should not set Vary",
      "duration": 1
    },
    {
      "title": "should set the values",
      "fullTitle": "res.vary() with an array should set the values",
      "duration": 1
    },
    {
      "title": "should set the value",
      "fullTitle": "res.vary() with a string should set the value",
      "duration": 1
    },
    {
      "title": "should not add it again",
      "fullTitle": "res.vary() when the value is present should not add it again",
      "duration": 1
    },
    {
      "title": "should support strings",
      "fullTitle": "utils.etag(body, encoding) should support strings",
      "duration": 0
    },
    {
      "title": "should support utf8 strings",
      "fullTitle": "utils.etag(body, encoding) should support utf8 strings",
      "duration": 0
    },
    {
      "title": "should support buffer",
      "fullTitle": "utils.etag(body, encoding) should support buffer",
      "duration": 0
    },
    {
      "title": "should support empty string",
      "fullTitle": "utils.etag(body, encoding) should support empty string",
      "duration": 0
    },
    {
      "title": "should support strings",
      "fullTitle": "utils.wetag(body, encoding) should support strings",
      "duration": 0
    },
    {
      "title": "should support utf8 strings",
      "fullTitle": "utils.wetag(body, encoding) should support utf8 strings",
      "duration": 0
    },
    {
      "title": "should support buffer",
      "fullTitle": "utils.wetag(body, encoding) should support buffer",
      "duration": 1
    },
    {
      "title": "should support empty string",
      "fullTitle": "utils.wetag(body, encoding) should support empty string",
      "duration": 0
    },
    {
      "title": "should support windows",
      "fullTitle": "utils.isAbsolute() should support windows",
      "duration": 0
    },
    {
      "title": "should support windows unc",
      "fullTitle": "utils.isAbsolute() should support windows unc",
      "duration": 0
    },
    {
      "title": "should support unices",
      "fullTitle": "utils.isAbsolute() should support unices",
      "duration": 0
    },
    {
      "title": "should flatten an array",
      "fullTitle": "utils.flatten(arr) should flatten an array",
      "duration": 0
    },
    {
      "title": "should default quality to 1",
      "fullTitle": "utils.parseParams(str) should default quality to 1",
      "duration": 0
    },
    {
      "title": "should parse qvalues",
      "fullTitle": "utils.parseParams(str) should parse qvalues",
      "duration": 1
    },
    {
      "title": "should parse accept parameters",
      "fullTitle": "utils.parseParams(str) should parse accept parameters",
      "duration": 0
    },
    {
      "title": "should work with messed up whitespace",
      "fullTitle": "utils.parseParams(str) should work with messed up whitespace",
      "duration": 0
    },
    {
      "title": "should work with multiples",
      "fullTitle": "utils.parseParams(str) should work with multiples",
      "duration": 0
    },
    {
      "title": "should work with long lists",
      "fullTitle": "utils.parseParams(str) should work with long lists",
      "duration": 0
    },
    {
      "title": "should sort by quality",
      "fullTitle": "utils.parseParams(str) should sort by quality",
      "duration": 0
    },
    {
      "title": "should exclude those with a quality of 0",
      "fullTitle": "utils.parseParams(str) should exclude those with a quality of 0",
      "duration": 0
    },
    {
      "title": "should provide .type",
      "fullTitle": "utils.parseAccept(str) should provide .type",
      "duration": 0
    },
    {
      "title": "should provide .subtype",
      "fullTitle": "utils.parseAccept(str) should provide .subtype",
      "duration": 0
    },
    {
      "title": "should return the value",
      "fullTitle": "utils.accepts(type, str) when a string is not given should return the value",
      "duration": 0
    },
    {
      "title": "should return the value",
      "fullTitle": "utils.accepts(type, str) when a string is empty should return the value",
      "duration": 0
    },
    {
      "title": "should return the value",
      "fullTitle": "utils.accepts(type, str) when */* is given should return the value",
      "duration": 0
    },
    {
      "title": "should return the best match",
      "fullTitle": "utils.accepts(type, str) when an array is given should return the best match",
      "duration": 0
    },
    {
      "title": "should behave like an array",
      "fullTitle": "utils.accepts(type, str) when a comma-delimited list is give should behave like an array",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when accepting type/subtype should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when accepting type/subtype should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when accepting */subtype should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when accepting */subtype should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when accepting type/* should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when accepting type/* should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when an extension is given should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when an extension is given should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should support *",
      "fullTitle": "utils.accepts(type, str) when an extension is given should support *",
      "duration": 0
    },
    {
      "title": "should match params",
      "fullTitle": "utils.accepts(type, str) when params included should match params",
      "duration": 0
    },
    {
      "title": "should redirect to /login",
      "fullTitle": "auth GET / should redirect to /login",
      "duration": 2
    },
    {
      "title": "should render login form",
      "fullTitle": "auth GET /login should render login form",
      "duration": 3
    },
    {
      "title": "should display login error",
      "fullTitle": "auth GET /login should display login error",
      "duration": 4
    },
    {
      "title": "should redirect to /",
      "fullTitle": "auth GET /logout should redirect to /",
      "duration": 1
    },
    {
      "title": "should redirect to /login without cookie",
      "fullTitle": "auth GET /restricted should redirect to /login without cookie",
      "duration": 1
    },
    {
      "title": "should succeed with proper cookie",
      "fullTitle": "auth GET /restricted should succeed with proper cookie",
      "duration": 2
    },
    {
      "title": "should fail without proper username",
      "fullTitle": "auth POST /login should fail without proper username",
      "duration": 1
    },
    {
      "title": "should fail without proper password",
      "fullTitle": "auth POST /login should fail without proper password",
      "duration": 2
    },
    {
      "title": "should succeed with proper credentials",
      "fullTitle": "auth POST /login should succeed with proper credentials",
      "duration": 1
    },
    {
      "title": "should default to text/html",
      "fullTitle": "content-negotiation GET / should default to text/html",
      "duration": 1
    },
    {
      "title": "should accept to text/plain",
      "fullTitle": "content-negotiation GET / should accept to text/plain",
      "duration": 1
    },
    {
      "title": "should accept to application/json",
      "fullTitle": "content-negotiation GET / should accept to application/json",
      "duration": 1
    },
    {
      "title": "should default to text/html",
      "fullTitle": "content-negotiation GET /users should default to text/html",
      "duration": 1
    },
    {
      "title": "should accept to text/plain",
      "fullTitle": "content-negotiation GET /users should accept to text/plain",
      "duration": 1
    },
    {
      "title": "should accept to application/json",
      "fullTitle": "content-negotiation GET /users should accept to application/json",
      "duration": 1
    },
    {
      "title": "should have a form",
      "fullTitle": "cookies GET / should have a form",
      "duration": 1
    },
    {
      "title": "should respond with no cookies",
      "fullTitle": "cookies GET / should respond with no cookies",
      "duration": 1
    },
    {
      "title": "should respond to cookie",
      "fullTitle": "cookies GET / should respond to cookie",
      "duration": 2
    },
    {
      "title": "should clear cookie",
      "fullTitle": "cookies GET /forget should clear cookie",
      "duration": 2
    },
    {
      "title": "should set a cookie",
      "fullTitle": "cookies POST / should set a cookie",
      "duration": 1
    },
    {
      "title": "should no set cookie w/o reminder",
      "fullTitle": "cookies POST / should no set cookie w/o reminder",
      "duration": 1
    },
    {
      "title": "should have a link to amazing.txt",
      "fullTitle": "downloads GET / should have a link to amazing.txt",
      "duration": 1
    },
    {
      "title": "should have a download header",
      "fullTitle": "downloads GET /files/amazing.txt should have a download header",
      "duration": 2
    },
    {
      "title": "should respond with 404",
      "fullTitle": "downloads GET /files/missing.txt should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with html",
      "fullTitle": "ejs GET / should respond with html",
      "duration": 2
    },
    {
      "title": "should respond with page list",
      "fullTitle": "error-pages GET / should respond with page list",
      "duration": 1
    },
    {
      "title": "should respond with 403",
      "fullTitle": "error-pages Accept: text/html GET /403 should respond with 403"
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error-pages Accept: text/html GET /404 should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error-pages Accept: text/html GET /500 should respond with 500"
    },
    {
      "title": "should respond with 403",
      "fullTitle": "error-pages Accept: application/json GET /403 should respond with 403"
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error-pages Accept: application/json GET /404 should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error-pages Accept: application/json GET /500 should respond with 500"
    },
    {
      "title": "should respond with 403",
      "fullTitle": "error-pages Accept: text/plain GET /403 should respond with 403"
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error-pages Accept: text/plain GET /404 should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error-pages Accept: text/plain GET /500 should respond with 500"
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error GET / should respond with 500",
      "duration": 1
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error GET /next should respond with 500",
      "duration": 0
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error GET /missing should respond with 404",
      "duration": 0
    },
    {
      "title": "should respond with html",
      "fullTitle": "markdown GET / should respond with html",
      "duration": 4
    },
    {
      "title": "should respond with an error",
      "fullTitle": "markdown GET /fail should respond with an error",
      "duration": 1
    },
    {
      "title": "should redirect to /users",
      "fullTitle": "mvc GET / should redirect to /users",
      "duration": 1
    },
    {
      "title": "should get pet",
      "fullTitle": "mvc GET /pet/0 should get pet",
      "duration": 1
    },
    {
      "title": "should get pet edit page",
      "fullTitle": "mvc GET /pet/0/edit should get pet edit page",
      "duration": 2
    },
    {
      "title": "should update the pet",
      "fullTitle": "mvc PUT /pet/2 should update the pet",
      "duration": 4
    },
    {
      "title": "should display a list of users",
      "fullTitle": "mvc GET /users should display a list of users",
      "duration": 2
    },
    {
      "title": "should display the user",
      "fullTitle": "mvc GET /user/:id when present should display the user",
      "duration": 1
    },
    {
      "title": "should display the users pets",
      "fullTitle": "mvc GET /user/:id when present should display the users pets",
      "duration": 2
    },
    {
      "title": "should 404",
      "fullTitle": "mvc GET /user/:id when not present should 404",
      "duration": 2
    },
    {
      "title": "should display the edit form",
      "fullTitle": "mvc GET /user/:id/edit should display the edit form",
      "duration": 2
    },
    {
      "title": "should update the user",
      "fullTitle": "mvc PUT /user/:id should update the user",
      "duration": 3
    },
    {
      "title": "should create a pet for user",
      "fullTitle": "mvc POST /user/:id/pet should create a pet for user",
      "duration": 3
    },
    {
      "title": "should respond with instructions",
      "fullTitle": "params GET / should respond with instructions",
      "duration": 1
    },
    {
      "title": "should respond with a user",
      "fullTitle": "params GET /user/0 should respond with a user",
      "duration": 1
    },
    {
      "title": "should fail to find user",
      "fullTitle": "params GET /user/9 should fail to find user",
      "duration": 1
    },
    {
      "title": "should respond with three users",
      "fullTitle": "params GET /users/0-2 should respond with three users",
      "duration": 1
    },
    {
      "title": "should fail integer parsing",
      "fullTitle": "params GET /users/foo-bar should fail integer parsing",
      "duration": 1
    },
    {
      "title": "should respond with instructions",
      "fullTitle": "resource GET / should respond with instructions",
      "duration": 1
    },
    {
      "title": "should respond with all users",
      "fullTitle": "resource GET /users should respond with all users",
      "duration": 1
    },
    {
      "title": "should respond with user 1",
      "fullTitle": "resource GET /users/1 should respond with user 1",
      "duration": 2
    },
    {
      "title": "should respond with error",
      "fullTitle": "resource GET /users/9 should respond with error",
      "duration": 0
    },
    {
      "title": "should respond with users 1 through 3",
      "fullTitle": "resource GET /users/1..3 should respond with users 1 through 3",
      "duration": 0
    },
    {
      "title": "should delete user 1",
      "fullTitle": "resource DELETE /users/1 should delete user 1",
      "duration": 0
    },
    {
      "title": "should fail",
      "fullTitle": "resource DELETE /users/9 should fail",
      "duration": 0
    },
    {
      "title": "should respond with users 2 and 3 as json",
      "fullTitle": "resource GET /users/1..3.json should respond with users 2 and 3 as json",
      "duration": 1
    },
    {
      "title": "should respond with users",
      "fullTitle": "route-map GET /users should respond with users",
      "duration": 1
    },
    {
      "title": "should delete users",
      "fullTitle": "route-map DELETE /users should delete users",
      "duration": 1
    },
    {
      "title": "should get a user",
      "fullTitle": "route-map GET /users/:id should get a user",
      "duration": 1
    },
    {
      "title": "should get a users pets",
      "fullTitle": "route-map GET /users/:id/pets should get a users pets",
      "duration": 1
    },
    {
      "title": "should get a users pet",
      "fullTitle": "route-map GET /users/:id/pets/:pid should get a users pet",
      "duration": 1
    },
    {
      "title": "should respond with 400 bad request",
      "fullTitle": "web-service GET /api/users without an api key should respond with 400 bad request",
      "duration": 1
    },
    {
      "title": "should respond with 401 unauthorized",
      "fullTitle": "web-service GET /api/users with an invalid api key should respond with 401 unauthorized",
      "duration": 1
    },
    {
      "title": "should respond users json",
      "fullTitle": "web-service GET /api/users with a valid api key should respond users json",
      "duration": 1
    },
    {
      "title": "should respond with 400 bad request",
      "fullTitle": "web-service GET /api/repos without an api key should respond with 400 bad request",
      "duration": 1
    },
    {
      "title": "should respond with 401 unauthorized",
      "fullTitle": "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized",
      "duration": 0
    },
    {
      "title": "should respond repos json",
      "fullTitle": "web-service GET /api/repos with a valid api key should respond repos json",
      "duration": 0
    },
    {
      "title": "should respond with 400 bad request",
      "fullTitle": "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request",
      "duration": 0
    },
    {
      "title": "should respond with 401 unauthorized",
      "fullTitle": "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized",
      "duration": 0
    },
    {
      "title": "should respond user repos json",
      "fullTitle": "web-service GET /api/user/:name/repos with a valid api key should respond user repos json",
      "duration": 0
    },
    {
      "title": "should 404 with unknown user",
      "fullTitle": "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user",
      "duration": 0
    },
    {
      "title": "should respond with 404 json",
      "fullTitle": "web-service when requesting an invalid route should respond with 404 json",
      "duration": 0
    }
  ],
  "failures": [
    {
      "title": "should invoke the callback",
      "fullTitle": "app .render(name, fn) when an error occurs should invoke the callback"
    },
    {
      "title": "should respond with html",
      "fullTitle": "res when accepting html should respond with html"
    },
    {
      "title": "should escape the url",
      "fullTitle": "res when accepting html should escape the url"
    },
    {
      "title": "should respond with text",
      "fullTitle": "res when accepting text should respond with text"
    },
    {
      "title": "should encode the url",
      "fullTitle": "res when accepting text should encode the url"
    },
    {
      "title": "should next(err)",
      "fullTitle": "res .render(name) when an error occurs should next(err)",
      "duration": 1
    },
    {
      "title": "should pass it to the callback",
      "fullTitle": "res .render(name, fn) when an error occurs should pass it to the callback",
      "duration": 2
    },
    {
      "title": "should respond with 304 Not Modified when fresh",
      "fullTitle": "res should respond with 304 Not Modified when fresh",
      "duration": 2
    },
    {
      "title": "should set ETag",
      "fullTitle": "res .send(String) should set ETag",
      "duration": 1
    },
    {
      "title": "should set ETag",
      "fullTitle": "res .send(Buffer) should set ETag",
      "duration": 1
    },
    {
      "title": "should send ETag for long response",
      "fullTitle": "res \"etag\" setting when enabled should send ETag for long response",
      "duration": 1
    },
    {
      "title": "should invoke the callback on 404",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback on 404"
    },
    {
      "title": "should succeed with proper cookie",
      "fullTitle": "auth GET /restricted should succeed with proper cookie",
      "duration": 2
    },
    {
      "title": "should fail without proper password",
      "fullTitle": "auth POST /login should fail without proper password",
      "duration": 2
    },
    {
      "title": "should succeed with proper credentials",
      "fullTitle": "auth POST /login should succeed with proper credentials",
      "duration": 1
    },
    {
      "title": "should respond with 403",
      "fullTitle": "error-pages Accept: text/html GET /403 should respond with 403"
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error-pages Accept: text/html GET /500 should respond with 500"
    },
    {
      "title": "should respond with 403",
      "fullTitle": "error-pages Accept: application/json GET /403 should respond with 403"
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error-pages Accept: application/json GET /500 should respond with 500"
    },
    {
      "title": "should respond with 403",
      "fullTitle": "error-pages Accept: text/plain GET /403 should respond with 403"
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error-pages Accept: text/plain GET /500 should respond with 500"
    }
  ],
  "passes": [
    {
      "title": "should match based on index",
      "fullTitle": "Router .match(method, url, i) should match based on index",
      "duration": 1
    },
    {
      "title": "should match based on index",
      "fullTitle": "Router .matchRequest(req, i) should match based on index",
      "duration": 1
    },
    {
      "title": "should dispatch",
      "fullTitle": "Router .middleware should dispatch",
      "duration": 14
    },
    {
      "title": "should throw if a callback is null",
      "fullTitle": "Router .multiple callbacks should throw if a callback is null",
      "duration": 0
    },
    {
      "title": "should throw if a callback is undefined",
      "fullTitle": "Router .multiple callbacks should throw if a callback is undefined",
      "duration": 0
    },
    {
      "title": "should throw if a callback is not a function",
      "fullTitle": "Router .multiple callbacks should throw if a callback is not a function",
      "duration": 0
    },
    {
      "title": "should not throw if all callbacks are functions",
      "fullTitle": "Router .multiple callbacks should not throw if all callbacks are functions",
      "duration": 0
    },
    {
      "title": "should support using .all to capture all http verbs",
      "fullTitle": "Router .all should support using .all to capture all http verbs",
      "duration": 1
    },
    {
      "title": "should add a router per method",
      "fullTitle": "app.all() should add a router per method",
      "duration": 4
    },
    {
      "title": "should ",
      "fullTitle": "app.all() should ",
      "duration": 2
    },
    {
      "title": "should alias app.delete()",
      "fullTitle": "app.del() should alias app.delete()",
      "duration": 2
    },
    {
      "title": "should map a template engine",
      "fullTitle": "app .engine(ext, fn) should map a template engine",
      "duration": 1
    },
    {
      "title": "should throw when the callback is missing",
      "fullTitle": "app .engine(ext, fn) should throw when the callback is missing",
      "duration": 0
    },
    {
      "title": "should work without leading \".\"",
      "fullTitle": "app .engine(ext, fn) should work without leading \".\"",
      "duration": 1
    },
    {
      "title": "should work \"view engine\" setting",
      "fullTitle": "app .engine(ext, fn) should work \"view engine\" setting",
      "duration": 0
    },
    {
      "title": "should work \"view engine\" with leading \".\"",
      "fullTitle": "app .engine(ext, fn) should work \"view engine\" with leading \".\"",
      "duration": 1
    },
    {
      "title": "should default to GET",
      "fullTitle": "HEAD should default to GET",
      "duration": 1
    },
    {
      "title": "should output the same headers as GET requests",
      "fullTitle": "HEAD should output the same headers as GET requests",
      "duration": 3
    },
    {
      "title": "should override",
      "fullTitle": "app.head() should override",
      "duration": 1
    },
    {
      "title": "should inherit from event emitter",
      "fullTitle": "app should inherit from event emitter",
      "duration": 1
    },
    {
      "title": "should return the parent when mounted",
      "fullTitle": "app.parent should return the parent when mounted",
      "duration": 0
    },
    {
      "title": "should return the mounted path",
      "fullTitle": "app.route should return the mounted path",
      "duration": 0
    },
    {
      "title": "should return the canonical",
      "fullTitle": "app.path() should return the canonical",
      "duration": 0
    },
    {
      "title": "should disable \"view cache\"",
      "fullTitle": "in development should disable \"view cache\"",
      "duration": 0
    },
    {
      "title": "should enable \"view cache\"",
      "fullTitle": "in production should enable \"view cache\"",
      "duration": 0
    },
    {
      "title": "should default to development",
      "fullTitle": "without NODE_ENV should default to development",
      "duration": 0
    },
    {
      "title": "should wrap with an HTTP server",
      "fullTitle": "app.listen() should wrap with an HTTP server",
      "duration": 0
    },
    {
      "title": "should merge locals",
      "fullTitle": "app .locals(obj) should merge locals",
      "duration": 0
    },
    {
      "title": "should expose app settings",
      "fullTitle": "app .locals.settings should expose app settings",
      "duration": 1
    },
    {
      "title": "should default to the routes defined",
      "fullTitle": "OPTIONS should default to the routes defined",
      "duration": 2
    },
    {
      "title": "should not respond if the path is not defined",
      "fullTitle": "OPTIONS should not respond if the path is not defined",
      "duration": 1
    },
    {
      "title": "should forward requests down the middleware chain",
      "fullTitle": "OPTIONS should forward requests down the middleware chain",
      "duration": 1
    },
    {
      "title": "should override the default behavior",
      "fullTitle": "app.options() should override the default behavior",
      "duration": 1
    },
    {
      "title": "should map app.param(name, ...) logic",
      "fullTitle": "app .param(fn) should map app.param(name, ...) logic",
      "duration": 3
    },
    {
      "title": "should fail if not given fn",
      "fullTitle": "app .param(fn) should fail if not given fn",
      "duration": 0
    },
    {
      "title": "should map the array",
      "fullTitle": "app .param(names, fn) should map the array",
      "duration": 2
    },
    {
      "title": "should map logic for a single param",
      "fullTitle": "app .param(name, fn) should map logic for a single param",
      "duration": 1
    },
    {
      "title": "should work with encoded values",
      "fullTitle": "app .param(name, fn) should work with encoded values",
      "duration": 1
    },
    {
      "title": "should catch thrown error",
      "fullTitle": "app .param(name, fn) should catch thrown error",
      "duration": 1
    },
    {
      "title": "should defer to next route",
      "fullTitle": "app .param(name, fn) should defer to next route",
      "duration": 1
    },
    {
      "title": "should support absolute paths",
      "fullTitle": "app .render(name, fn) should support absolute paths",
      "duration": 0
    },
    {
      "title": "should support absolute paths with \"view engine\"",
      "fullTitle": "app .render(name, fn) should support absolute paths with \"view engine\"",
      "duration": 0
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "app .render(name, fn) should expose app.locals",
      "duration": 0
    },
    {
      "title": "should support index.<engine>",
      "fullTitle": "app .render(name, fn) should support index.<engine>",
      "duration": 1
    },
    {
      "title": "should handle render error throws",
      "fullTitle": "app .render(name, fn) should handle render error throws",
      "duration": 0
    },
    {
      "title": "should provide a helpful error",
      "fullTitle": "app .render(name, fn) when the file does not exist should provide a helpful error",
      "duration": 0
    },
    {
      "title": "should render the template",
      "fullTitle": "app .render(name, fn) when an extension is given should render the template",
      "duration": 1
    },
    {
      "title": "should render the template",
      "fullTitle": "app .render(name, fn) when \"view engine\" is given should render the template",
      "duration": 0
    },
    {
      "title": "should create an instance of it",
      "fullTitle": "app .render(name, fn) when a \"view\" constructor is given should create an instance of it",
      "duration": 0
    },
    {
      "title": "should always lookup view without cache",
      "fullTitle": "app .render(name, fn) caching should always lookup view without cache",
      "duration": 1
    },
    {
      "title": "should cache with \"view cache\" setting",
      "fullTitle": "app .render(name, fn) caching should cache with \"view cache\" setting",
      "duration": 0
    },
    {
      "title": "should render the template",
      "fullTitle": "app .render(name, options, fn) should render the template",
      "duration": 0
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "app .render(name, options, fn) should expose app.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to app.render() locals",
      "fullTitle": "app .render(name, options, fn) should give precedence to app.render() locals",
      "duration": 0
    },
    {
      "title": "should cache with cache option",
      "fullTitle": "app .render(name, options, fn) caching should cache with cache option",
      "duration": 0
    },
    {
      "title": "should extend the request prototype",
      "fullTitle": "app .request should extend the request prototype",
      "duration": 2
    },
    {
      "title": "should extend the response prototype",
      "fullTitle": "app .response should extend the response prototype",
      "duration": 1
    },
    {
      "title": "should not be influenced by other app protos",
      "fullTitle": "app .response should not be influenced by other app protos",
      "duration": 2
    },
    {
      "title": "should be .use()able",
      "fullTitle": "app.router should be .use()able",
      "duration": 1
    },
    {
      "title": "should be auto .use()d on the first app.VERB() call",
      "fullTitle": "app.router should be auto .use()d on the first app.VERB() call",
      "duration": 1
    },
    {
      "title": "should allow escaped regexp",
      "fullTitle": "app.router should allow escaped regexp",
      "duration": 2
    },
    {
      "title": "should allow literal \".\"",
      "fullTitle": "app.router should allow literal \".\"",
      "duration": 1
    },
    {
      "title": "should allow rewriting of the url",
      "fullTitle": "app.router should allow rewriting of the url",
      "duration": 1
    },
    {
      "title": "should be chainable",
      "fullTitle": "app.router should be chainable",
      "duration": 0
    },
    {
      "title": "should include ACL",
      "fullTitle": "app.router methods supported should include ACL",
      "duration": 1
    },
    {
      "title": "should include BIND",
      "fullTitle": "app.router methods supported should include BIND",
      "duration": 1
    },
    {
      "title": "should include CHECKOUT",
      "fullTitle": "app.router methods supported should include CHECKOUT",
      "duration": 1
    },
    {
      "title": "should include COPY",
      "fullTitle": "app.router methods supported should include COPY",
      "duration": 1
    },
    {
      "title": "should include DELETE",
      "fullTitle": "app.router methods supported should include DELETE",
      "duration": 1
    },
    {
      "title": "should include GET",
      "fullTitle": "app.router methods supported should include GET",
      "duration": 1
    },
    {
      "title": "should include HEAD",
      "fullTitle": "app.router methods supported should include HEAD",
      "duration": 1
    },
    {
      "title": "should include LINK",
      "fullTitle": "app.router methods supported should include LINK",
      "duration": 1
    },
    {
      "title": "should include LOCK",
      "fullTitle": "app.router methods supported should include LOCK",
      "duration": 1
    },
    {
      "title": "should include M-SEARCH",
      "fullTitle": "app.router methods supported should include M-SEARCH",
      "duration": 1
    },
    {
      "title": "should include MERGE",
      "fullTitle": "app.router methods supported should include MERGE",
      "duration": 1
    },
    {
      "title": "should include MKACTIVITY",
      "fullTitle": "app.router methods supported should include MKACTIVITY",
      "duration": 1
    },
    {
      "title": "should include MKCALENDAR",
      "fullTitle": "app.router methods supported should include MKCALENDAR",
      "duration": 1
    },
    {
      "title": "should include MKCOL",
      "fullTitle": "app.router methods supported should include MKCOL",
      "duration": 1
    },
    {
      "title": "should include MOVE",
      "fullTitle": "app.router methods supported should include MOVE",
      "duration": 1
    },
    {
      "title": "should include NOTIFY",
      "fullTitle": "app.router methods supported should include NOTIFY",
      "duration": 1
    },
    {
      "title": "should include OPTIONS",
      "fullTitle": "app.router methods supported should include OPTIONS",
      "duration": 1
    },
    {
      "title": "should include PATCH",
      "fullTitle": "app.router methods supported should include PATCH",
      "duration": 1
    },
    {
      "title": "should include POST",
      "fullTitle": "app.router methods supported should include POST",
      "duration": 1
    },
    {
      "title": "should include PROPFIND",
      "fullTitle": "app.router methods supported should include PROPFIND",
      "duration": 1
    },
    {
      "title": "should include PROPPATCH",
      "fullTitle": "app.router methods supported should include PROPPATCH",
      "duration": 1
    },
    {
      "title": "should include PURGE",
      "fullTitle": "app.router methods supported should include PURGE",
      "duration": 1
    },
    {
      "title": "should include PUT",
      "fullTitle": "app.router methods supported should include PUT",
      "duration": 1
    },
    {
      "title": "should include REBIND",
      "fullTitle": "app.router methods supported should include REBIND",
      "duration": 1
    },
    {
      "title": "should include REPORT",
      "fullTitle": "app.router methods supported should include REPORT",
      "duration": 0
    },
    {
      "title": "should include SEARCH",
      "fullTitle": "app.router methods supported should include SEARCH",
      "duration": 0
    },
    {
      "title": "should include SOURCE",
      "fullTitle": "app.router methods supported should include SOURCE",
      "duration": 1
    },
    {
      "title": "should include SUBSCRIBE",
      "fullTitle": "app.router methods supported should include SUBSCRIBE",
      "duration": 1
    },
    {
      "title": "should include TRACE",
      "fullTitle": "app.router methods supported should include TRACE",
      "duration": 1
    },
    {
      "title": "should include UNBIND",
      "fullTitle": "app.router methods supported should include UNBIND",
      "duration": 1
    },
    {
      "title": "should include UNLINK",
      "fullTitle": "app.router methods supported should include UNLINK",
      "duration": 1
    },
    {
      "title": "should include UNLOCK",
      "fullTitle": "app.router methods supported should include UNLOCK",
      "duration": 1
    },
    {
      "title": "should include UNSUBSCRIBE",
      "fullTitle": "app.router methods supported should include UNSUBSCRIBE",
      "duration": 1
    },
    {
      "title": "should include DEL",
      "fullTitle": "app.router methods supported should include DEL",
      "duration": 1
    },
    {
      "title": "should decode correct params",
      "fullTitle": "app.router decode querystring should decode correct params",
      "duration": 1
    },
    {
      "title": "should not accept params in malformed paths",
      "fullTitle": "app.router decode querystring should not accept params in malformed paths",
      "duration": 1
    },
    {
      "title": "should not decode spaces",
      "fullTitle": "app.router decode querystring should not decode spaces",
      "duration": 1
    },
    {
      "title": "should work with unicode",
      "fullTitle": "app.router decode querystring should work with unicode",
      "duration": 1
    },
    {
      "title": "should match the pathname only",
      "fullTitle": "app.router when given a regexp should match the pathname only",
      "duration": 1
    },
    {
      "title": "should populate req.params with the captures",
      "fullTitle": "app.router when given a regexp should populate req.params with the captures",
      "duration": 0
    },
    {
      "title": "should be disabled by default",
      "fullTitle": "app.router case sensitivity should be disabled by default",
      "duration": 1
    },
    {
      "title": "should match identical casing",
      "fullTitle": "app.router case sensitivity when \"case sensitive routing\" is enabled should match identical casing",
      "duration": 0
    },
    {
      "title": "should not match otherwise",
      "fullTitle": "app.router case sensitivity when \"case sensitive routing\" is enabled should not match otherwise",
      "duration": 0
    },
    {
      "title": "should be optional by default",
      "fullTitle": "app.router trailing slashes should be optional by default",
      "duration": 1
    },
    {
      "title": "should match trailing slashes",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should match trailing slashes",
      "duration": 1
    },
    {
      "title": "should match no slashes",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should match no slashes",
      "duration": 0
    },
    {
      "title": "should fail when omitting the trailing slash",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should fail when omitting the trailing slash",
      "duration": 0
    },
    {
      "title": "should fail when adding the trailing slash",
      "fullTitle": "app.router trailing slashes when \"strict routing\" is enabled should fail when adding the trailing slash",
      "duration": 1
    },
    {
      "title": "should denote a greedy capture group",
      "fullTitle": "app.router * should denote a greedy capture group",
      "duration": 1
    },
    {
      "title": "should work with several",
      "fullTitle": "app.router * should work with several",
      "duration": 1
    },
    {
      "title": "should work cross-segment",
      "fullTitle": "app.router * should work cross-segment",
      "duration": 1
    },
    {
      "title": "should allow naming",
      "fullTitle": "app.router * should allow naming",
      "duration": 0
    },
    {
      "title": "should not be greedy immediately after param",
      "fullTitle": "app.router * should not be greedy immediately after param",
      "duration": 1
    },
    {
      "title": "should eat everything after /",
      "fullTitle": "app.router * should eat everything after /",
      "duration": 1
    },
    {
      "title": "should span multiple segments",
      "fullTitle": "app.router * should span multiple segments",
      "duration": 1
    },
    {
      "title": "should be optional",
      "fullTitle": "app.router * should be optional",
      "duration": 1
    },
    {
      "title": "should require a preceeding /",
      "fullTitle": "app.router * should require a preceeding /",
      "duration": 1
    },
    {
      "title": "should denote a capture group",
      "fullTitle": "app.router :name should denote a capture group",
      "duration": 1
    },
    {
      "title": "should match a single segment only",
      "fullTitle": "app.router :name should match a single segment only",
      "duration": 1
    },
    {
      "title": "should allow several capture groups",
      "fullTitle": "app.router :name should allow several capture groups",
      "duration": 1
    },
    {
      "title": "should denote an optional capture group",
      "fullTitle": "app.router :name? should denote an optional capture group",
      "duration": 1
    },
    {
      "title": "should populate the capture group",
      "fullTitle": "app.router :name? should populate the capture group",
      "duration": 1
    },
    {
      "title": "should denote a format",
      "fullTitle": "app.router .:name should denote a format",
      "duration": 2
    },
    {
      "title": "should denote an optional format",
      "fullTitle": "app.router .:name? should denote an optional format",
      "duration": 1
    },
    {
      "title": "should continue lookup",
      "fullTitle": "app.router when next() is called should continue lookup",
      "duration": 1
    },
    {
      "title": "should jump to next route",
      "fullTitle": "app.router when next(\"route\") is called should jump to next route",
      "duration": 1
    },
    {
      "title": "should break out of app.router",
      "fullTitle": "app.router when next(err) is called should break out of app.router",
      "duration": 1
    },
    {
      "title": "should only call an error handling routing callback when an error is propagated",
      "fullTitle": "app .VERB() should only call an error handling routing callback when an error is propagated",
      "duration": 1
    },
    {
      "title": "should be initialized",
      "fullTitle": "app.routes should be initialized",
      "duration": 0
    },
    {
      "title": "should be populated with routes",
      "fullTitle": "app.routes should be populated with routes",
      "duration": 0
    },
    {
      "title": "should be mutable",
      "fullTitle": "app.routes should be mutable",
      "duration": 0
    },
    {
      "title": "should emit \"mount\" when mounted",
      "fullTitle": "app should emit \"mount\" when mounted",
      "duration": 0
    },
    {
      "title": "should mount the app",
      "fullTitle": "app .use(app) should mount the app",
      "duration": 1
    },
    {
      "title": "should support mount-points",
      "fullTitle": "app .use(app) should support mount-points",
      "duration": 2
    },
    {
      "title": "should set the child's .parent",
      "fullTitle": "app .use(app) should set the child's .parent",
      "duration": 0
    },
    {
      "title": "should execute in order as defined",
      "fullTitle": "config .configure() should execute in order as defined",
      "duration": 0
    },
    {
      "title": "should always execute",
      "fullTitle": "config .configure() when no env is given should always execute",
      "duration": 0
    },
    {
      "title": "should only execute the matching env",
      "fullTitle": "config .configure() when an env is given should only execute the matching env",
      "duration": 0
    },
    {
      "title": "should execute when matching one",
      "fullTitle": "config .configure() when several envs are given should execute when matching one",
      "duration": 0
    },
    {
      "title": "should set a value",
      "fullTitle": "config .set() should set a value",
      "duration": 0
    },
    {
      "title": "should return the app",
      "fullTitle": "config .set() should return the app",
      "duration": 0
    },
    {
      "title": "should return the app when undefined",
      "fullTitle": "config .set() should return the app when undefined",
      "duration": 0
    },
    {
      "title": "should throw on bad value",
      "fullTitle": "config .set() \"etag\" should throw on bad value",
      "duration": 0
    },
    {
      "title": "should set \"etag fn\"",
      "fullTitle": "config .set() \"etag\" should set \"etag fn\"",
      "duration": 0
    },
    {
      "title": "should set \"trust proxy fn\"",
      "fullTitle": "config .set() \"trust proxy\" should set \"trust proxy fn\"",
      "duration": 0
    },
    {
      "title": "should return undefined when unset",
      "fullTitle": "config .get() should return undefined when unset",
      "duration": 0
    },
    {
      "title": "should otherwise return the value",
      "fullTitle": "config .get() should otherwise return the value",
      "duration": 0
    },
    {
      "title": "should default to the parent app",
      "fullTitle": "config .get() when mounted should default to the parent app",
      "duration": 1
    },
    {
      "title": "should given precedence to the child",
      "fullTitle": "config .get() when mounted should given precedence to the child",
      "duration": 0
    },
    {
      "title": "should inherit \"trust proxy\" setting",
      "fullTitle": "config .get() when mounted should inherit \"trust proxy\" setting",
      "duration": 0
    },
    {
      "title": "should prefer child \"trust proxy\" setting",
      "fullTitle": "config .get() when mounted should prefer child \"trust proxy\" setting",
      "duration": 0
    },
    {
      "title": "should set the value to true",
      "fullTitle": "config .enable() should set the value to true",
      "duration": 0
    },
    {
      "title": "should set the value to false",
      "fullTitle": "config .disable() should set the value to false",
      "duration": 0
    },
    {
      "title": "should default to false",
      "fullTitle": "config .enabled() should default to false",
      "duration": 0
    },
    {
      "title": "should return true when set",
      "fullTitle": "config .enabled() should return true when set",
      "duration": 0
    },
    {
      "title": "should default to true",
      "fullTitle": "config .disabled() should default to true",
      "duration": 0
    },
    {
      "title": "should return false when set",
      "fullTitle": "config .disabled() should return false when set",
      "duration": 0
    },
    {
      "title": "should expose connect middleware",
      "fullTitle": "exports should expose connect middleware",
      "duration": 0
    },
    {
      "title": "should expose .mime",
      "fullTitle": "exports should expose .mime",
      "duration": 0
    },
    {
      "title": "should expose Router",
      "fullTitle": "exports should expose Router",
      "duration": 0
    },
    {
      "title": "should expose the application prototype",
      "fullTitle": "exports should expose the application prototype",
      "duration": 0
    },
    {
      "title": "should expose the request prototype",
      "fullTitle": "exports should expose the request prototype",
      "duration": 0
    },
    {
      "title": "should expose the response prototype",
      "fullTitle": "exports should expose the response prototype",
      "duration": 0
    },
    {
      "title": "should permit modifying the .application prototype",
      "fullTitle": "exports should permit modifying the .application prototype",
      "duration": 0
    },
    {
      "title": "should permit modifying the .request prototype",
      "fullTitle": "exports should permit modifying the .request prototype",
      "duration": 1
    },
    {
      "title": "should permit modifying the .response prototype",
      "fullTitle": "exports should permit modifying the .response prototype",
      "duration": 1
    },
    {
      "title": "should fail gracefully",
      "fullTitle": "throw after .end() should fail gracefully",
      "duration": 1
    },
    {
      "title": "should return an array of accepted media types",
      "fullTitle": "req .accepted should return an array of accepted media types",
      "duration": 2
    },
    {
      "title": "should default to []",
      "fullTitle": "req .accepted when Accept is not present should default to []",
      "duration": 1
    },
    {
      "title": "should return an array of accepted charsets",
      "fullTitle": "req .acceptedCharsets should return an array of accepted charsets",
      "duration": 1
    },
    {
      "title": "should default to []",
      "fullTitle": "req .acceptedCharsets when Accept-Charset is not present should default to []",
      "duration": 2
    },
    {
      "title": "should return an array of accepted encodings",
      "fullTitle": "req .acceptedEncodings should return an array of accepted encodings",
      "duration": 0
    },
    {
      "title": "should default to []",
      "fullTitle": "req .acceptedEncodings when Accept-Encoding is not present should default to []",
      "duration": 0
    },
    {
      "title": "should return an array of accepted languages",
      "fullTitle": "req .acceptedLanguages should return an array of accepted languages",
      "duration": 0
    },
    {
      "title": "should default to []",
      "fullTitle": "req .acceptedLanguages when Accept-Language is not present should default to []",
      "duration": 0
    },
    {
      "title": "should accept a comma-delimited list of types",
      "fullTitle": "req should accept a comma-delimited list of types",
      "duration": 0
    },
    {
      "title": "should accept an argument list of type names",
      "fullTitle": "req should accept an argument list of type names",
      "duration": 0
    },
    {
      "title": "should return true when Accept is not present",
      "fullTitle": "req .accepts(type) should return true when Accept is not present",
      "duration": 1
    },
    {
      "title": "should return true when present",
      "fullTitle": "req .accepts(type) should return true when present",
      "duration": 1
    },
    {
      "title": "should return false otherwise",
      "fullTitle": "req .accepts(type) should return false otherwise",
      "duration": 1
    },
    {
      "title": "should return the first when Accept is not present",
      "fullTitle": "req .accepts(types) should return the first when Accept is not present",
      "duration": 1
    },
    {
      "title": "should return the first acceptable type",
      "fullTitle": "req .accepts(types) should return the first acceptable type",
      "duration": 1
    },
    {
      "title": "should return false when no match is made",
      "fullTitle": "req .accepts(types) should return false when no match is made",
      "duration": 1
    },
    {
      "title": "should take quality into account",
      "fullTitle": "req .accepts(types) should take quality into account",
      "duration": 1
    },
    {
      "title": "should return the first acceptable type with canonical mime types",
      "fullTitle": "req .accepts(types) should return the first acceptable type with canonical mime types",
      "duration": 0
    },
    {
      "title": "should return true",
      "fullTitle": "req .acceptsCharset(type) when Accept-Charset is not present should return true",
      "duration": 0
    },
    {
      "title": "should return true when present",
      "fullTitle": "req .acceptsCharset(type) when Accept-Charset is not present should return true when present",
      "duration": 0
    },
    {
      "title": "should return false otherwise",
      "fullTitle": "req .acceptsCharset(type) when Accept-Charset is not present should return false otherwise",
      "duration": 1
    },
    {
      "title": "should be true if encoding accpeted",
      "fullTitle": "req .acceptsEncodings should be true if encoding accpeted",
      "duration": 1
    },
    {
      "title": "should be false if encoding not accpeted",
      "fullTitle": "req .acceptsEncodings should be false if encoding not accpeted",
      "duration": 1
    },
    {
      "title": "should be true if language accpeted",
      "fullTitle": "req .acceptsLanguage should be true if language accpeted",
      "duration": 1
    },
    {
      "title": "should be false if language not accpeted",
      "fullTitle": "req .acceptsLanguage should be false if language not accpeted",
      "duration": 1
    },
    {
      "title": "should always return true",
      "fullTitle": "req .acceptsLanguage when Accept-Language is not present should always return true",
      "duration": 1
    },
    {
      "title": "should return .username and .password",
      "fullTitle": "req .auth should return .username and .password",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when Authorization is missing should return undefined",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when Authorization is malformed should return undefined",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when Authorization is not Basic should return undefined",
      "duration": 1
    },
    {
      "title": "should return undefined",
      "fullTitle": "req .auth when encoded string is malformed should return undefined",
      "duration": 2
    },
    {
      "title": "should return .username and .password",
      "fullTitle": "req .auth when password contains a colon should return .username and .password",
      "duration": 1
    },
    {
      "title": "should return true when the resource is not modified",
      "fullTitle": "req .fresh should return true when the resource is not modified",
      "duration": 1
    },
    {
      "title": "should return false when the resource is modified",
      "fullTitle": "req .fresh should return false when the resource is modified",
      "duration": 1
    },
    {
      "title": "should return false without response headers",
      "fullTitle": "req .fresh should return false without response headers",
      "duration": 1
    },
    {
      "title": "should return the header field value",
      "fullTitle": "req .get(field) should return the header field value",
      "duration": 1
    },
    {
      "title": "should special-case Referer",
      "fullTitle": "req .get(field) should special-case Referer",
      "duration": 1
    },
    {
      "title": "should return the Host when present",
      "fullTitle": "req .host should return the Host when present",
      "duration": 1
    },
    {
      "title": "should strip port number",
      "fullTitle": "req .host should strip port number",
      "duration": 1
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "req .host should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should work with IPv6 Host",
      "fullTitle": "req .host should work with IPv6 Host",
      "duration": 1
    },
    {
      "title": "should work with IPv6 Host and port",
      "fullTitle": "req .host should work with IPv6 Host and port",
      "duration": 1
    },
    {
      "title": "should respect X-Forwarded-Host",
      "fullTitle": "req .host when \"trust proxy\" is enabled should respect X-Forwarded-Host",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Host if socket addr not trusted",
      "fullTitle": "req .host when \"trust proxy\" is enabled should ignore X-Forwarded-Host if socket addr not trusted",
      "duration": 2
    },
    {
      "title": "should default to Host",
      "fullTitle": "req .host when \"trust proxy\" is enabled should default to Host",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Host",
      "fullTitle": "req .host when \"trust proxy\" is disabled should ignore X-Forwarded-Host",
      "duration": 1
    },
    {
      "title": "should return the client addr",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the client addr",
      "duration": 0
    },
    {
      "title": "should return the addr after trusted proxy",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy",
      "duration": 0
    },
    {
      "title": "should return the addr after trusted proxy, from sub app",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is enabled should return the addr after trusted proxy, from sub app",
      "duration": 1
    },
    {
      "title": "should return the remote address",
      "fullTitle": "req .ip when X-Forwarded-For is present when \"trust proxy\" is disabled should return the remote address",
      "duration": 0
    },
    {
      "title": "should return the remote address",
      "fullTitle": "req .ip when X-Forwarded-For is not present should return the remote address",
      "duration": 0
    },
    {
      "title": "should return an array of the specified addresses",
      "fullTitle": "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should return an array of the specified addresses",
      "duration": 1
    },
    {
      "title": "should stop at first untrusted",
      "fullTitle": "req .ips when X-Forwarded-For is present when \"trust proxy\" is enabled should stop at first untrusted",
      "duration": 1
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .ips when X-Forwarded-For is present when \"trust proxy\" is disabled should return an empty array",
      "duration": 1
    },
    {
      "title": "should return []",
      "fullTitle": "req .ips when X-Forwarded-For is not present should return []",
      "duration": 1
    },
    {
      "title": "should ignore charset",
      "fullTitle": "req.is() should ignore charset",
      "duration": 0
    },
    {
      "title": "should return false",
      "fullTitle": "req.is() when content-type is not present should return false",
      "duration": 0
    },
    {
      "title": "should lookup the mime type",
      "fullTitle": "req.is() when given an extension should lookup the mime type",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given a mime type should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given */subtype should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given */subtype with a charset should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given type/* should match",
      "duration": 0
    },
    {
      "title": "should match",
      "fullTitle": "req.is() when given type/* with a charset should match",
      "duration": 0
    },
    {
      "title": "should use the default value unless defined",
      "fullTitle": "req .param(name, default) should use the default value unless defined",
      "duration": 1
    },
    {
      "title": "should check req.query",
      "fullTitle": "req .param(name) should check req.query",
      "duration": 1
    },
    {
      "title": "should check req.body",
      "fullTitle": "req .param(name) should check req.body",
      "duration": 6
    },
    {
      "title": "should check req.params",
      "fullTitle": "req .param(name) should check req.params",
      "duration": 1
    },
    {
      "title": "should return the parsed pathname",
      "fullTitle": "req .path should return the parsed pathname",
      "duration": 1
    },
    {
      "title": "should return the protocol string",
      "fullTitle": "req .protocol should return the protocol string",
      "duration": 1
    },
    {
      "title": "should respect X-Forwarded-Proto",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should respect X-Forwarded-Proto",
      "duration": 1
    },
    {
      "title": "should default to the socket addr if X-Forwarded-Proto not present",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should default to the socket addr if X-Forwarded-Proto not present",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Proto if socket addr not trusted",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should ignore X-Forwarded-Proto if socket addr not trusted",
      "duration": 1
    },
    {
      "title": "should default to http",
      "fullTitle": "req .protocol when \"trust proxy\" is enabled should default to http",
      "duration": 1
    },
    {
      "title": "should ignore X-Forwarded-Proto",
      "fullTitle": "req .protocol when \"trust proxy\" is disabled should ignore X-Forwarded-Proto",
      "duration": 1
    },
    {
      "title": "should default to {}",
      "fullTitle": "req .query should default to {}",
      "duration": 1
    },
    {
      "title": "should contain the parsed query-string",
      "fullTitle": "req .query should contain the parsed query-string",
      "duration": 1
    },
    {
      "title": "should return parsed ranges",
      "fullTitle": "req .range(size) should return parsed ranges",
      "duration": 0
    },
    {
      "title": "should cap to the given size",
      "fullTitle": "req .range(size) should cap to the given size",
      "duration": 1
    },
    {
      "title": "should have a .type",
      "fullTitle": "req .range(size) should have a .type",
      "duration": 0
    },
    {
      "title": "should return undefined if no range",
      "fullTitle": "req .range(size) should return undefined if no range",
      "duration": 0
    },
    {
      "title": "should be the executed Route",
      "fullTitle": "req .route should be the executed Route",
      "duration": 1
    },
    {
      "title": "should return false when http",
      "fullTitle": "req .secure when X-Forwarded-Proto is missing should return false when http",
      "duration": 1
    },
    {
      "title": "should return false when http",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return false when http",
      "duration": 1
    },
    {
      "title": "should return true when \"trust proxy\" is enabled",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return true when \"trust proxy\" is enabled",
      "duration": 1
    },
    {
      "title": "should return false when initial proxy is http",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return false when initial proxy is http",
      "duration": 1
    },
    {
      "title": "should return true when initial proxy is https",
      "fullTitle": "req .secure when X-Forwarded-Proto is present should return true when initial proxy is https",
      "duration": 1
    },
    {
      "title": "should return a signed JSON cookie",
      "fullTitle": "req .signedCookies should return a signed JSON cookie",
      "duration": 3
    },
    {
      "title": "should return false when the resource is not modified",
      "fullTitle": "req .stale should return false when the resource is not modified",
      "duration": 1
    },
    {
      "title": "should return true when the resource is modified",
      "fullTitle": "req .stale should return true when the resource is modified",
      "duration": 1
    },
    {
      "title": "should return true without response headers",
      "fullTitle": "req .stale should return true without response headers",
      "duration": 1
    },
    {
      "title": "should return an array",
      "fullTitle": "req .subdomains when present should return an array",
      "duration": 3
    },
    {
      "title": "should work with IPv4 address",
      "fullTitle": "req .subdomains when present should work with IPv4 address",
      "duration": 1
    },
    {
      "title": "should work with IPv6 address",
      "fullTitle": "req .subdomains when present should work with IPv6 address",
      "duration": 2
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .subdomains otherwise should return an empty array",
      "duration": 1
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .subdomains with no host should return an empty array",
      "duration": 1
    },
    {
      "title": "should return an array",
      "fullTitle": "req .subdomains with trusted X-Forwarded-Host should return an array",
      "duration": 1
    },
    {
      "title": "should return an array with the whole domain",
      "fullTitle": "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole domain",
      "duration": 1
    },
    {
      "title": "should return an array with the whole IPv4",
      "fullTitle": "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv4",
      "duration": 1
    },
    {
      "title": "should return an array with the whole IPv6",
      "fullTitle": "req .subdomains when subdomain offset is set when subdomain offset is zero should return an array with the whole IPv6",
      "duration": 1
    },
    {
      "title": "should return an array",
      "fullTitle": "req .subdomains when subdomain offset is set when present should return an array",
      "duration": 1
    },
    {
      "title": "should return an empty array",
      "fullTitle": "req .subdomains when subdomain offset is set otherwise should return an empty array",
      "duration": 1
    },
    {
      "title": "should return true when X-Requested-With is xmlhttprequest",
      "fullTitle": "req .xhr should return true when X-Requested-With is xmlhttprequest",
      "duration": 1
    },
    {
      "title": "should case-insensitive",
      "fullTitle": "req .xhr should case-insensitive",
      "duration": 1
    },
    {
      "title": "should return false otherwise",
      "fullTitle": "req .xhr should return false otherwise",
      "duration": 1
    },
    {
      "title": "should return false when not present",
      "fullTitle": "req .xhr should return false when not present",
      "duration": 1
    },
    {
      "title": "should Content-Disposition to attachment",
      "fullTitle": "res .attachment() should Content-Disposition to attachment",
      "duration": 1
    },
    {
      "title": "should add the filename param",
      "fullTitle": "res .attachment(filename) should add the filename param",
      "duration": 2
    },
    {
      "title": "should set the Content-Type",
      "fullTitle": "res .attachment(filename) should set the Content-Type",
      "duration": 1
    },
    {
      "title": "should add the charset param to Content-Type",
      "fullTitle": "res .charset should add the charset param to Content-Type",
      "duration": 1
    },
    {
      "title": "should be replaced by real charset in res.send",
      "fullTitle": "res .charset should be replaced by real charset in res.send",
      "duration": 1
    },
    {
      "title": "should set a cookie passed expiry",
      "fullTitle": "res .clearCookie(name) should set a cookie passed expiry",
      "duration": 1
    },
    {
      "title": "should set the given params",
      "fullTitle": "res .clearCookie(name, options) should set the given params",
      "duration": 1
    },
    {
      "title": "should generate a JSON cookie",
      "fullTitle": "res .cookie(name, object) should generate a JSON cookie",
      "duration": 1
    },
    {
      "title": "should set a cookie",
      "fullTitle": "res .cookie(name, string) should set a cookie",
      "duration": 1
    },
    {
      "title": "should allow multiple calls",
      "fullTitle": "res .cookie(name, string) should allow multiple calls",
      "duration": 1
    },
    {
      "title": "should set params",
      "fullTitle": "res .cookie(name, string, options) should set params",
      "duration": 1
    },
    {
      "title": "should set relative expires",
      "fullTitle": "res .cookie(name, string, options) maxAge should set relative expires",
      "duration": 1
    },
    {
      "title": "should set max-age",
      "fullTitle": "res .cookie(name, string, options) maxAge should set max-age",
      "duration": 1
    },
    {
      "title": "should not mutate the options object",
      "fullTitle": "res .cookie(name, string, options) maxAge should not mutate the options object",
      "duration": 0
    },
    {
      "title": "should generate a signed JSON cookie",
      "fullTitle": "res .cookie(name, string, options) signed should generate a signed JSON cookie",
      "duration": 1
    },
    {
      "title": "should set a signed cookie",
      "fullTitle": "res .cookie(name, string, options) .signedCookie(name, string) should set a signed cookie",
      "duration": 1
    },
    {
      "title": "should transfer as an attachment",
      "fullTitle": "res .download(path) should transfer as an attachment",
      "duration": 3
    },
    {
      "title": "should provide an alternate filename",
      "fullTitle": "res .download(path, filename) should provide an alternate filename",
      "duration": 1
    },
    {
      "title": "should invoke the callback",
      "fullTitle": "res .download(path, fn) should invoke the callback",
      "duration": 1
    },
    {
      "title": "should invoke the callback",
      "fullTitle": "res .download(path, filename, fn) should invoke the callback",
      "duration": 1
    },
    {
      "title": "should invoke the callback",
      "fullTitle": "res on failure should invoke the callback",
      "duration": 0
    },
    {
      "title": "should remove Content-Disposition",
      "fullTitle": "res on failure should remove Content-Disposition",
      "duration": 1
    },
    {
      "title": "should utilize qvalues in negotiation",
      "fullTitle": "res .format(obj) with canonicalized mime types should utilize qvalues in negotiation",
      "duration": 1
    },
    {
      "title": "should allow wildcard type/subtypes",
      "fullTitle": "res .format(obj) with canonicalized mime types should allow wildcard type/subtypes",
      "duration": 1
    },
    {
      "title": "should default the Content-Type",
      "fullTitle": "res .format(obj) with canonicalized mime types should default the Content-Type",
      "duration": 1
    },
    {
      "title": "should set the correct  charset for the Content-Type",
      "fullTitle": "res .format(obj) with canonicalized mime types should set the correct  charset for the Content-Type",
      "duration": 0
    },
    {
      "title": "should Vary: Accept",
      "fullTitle": "res .format(obj) with canonicalized mime types should Vary: Accept",
      "duration": 1
    },
    {
      "title": "should invoke the first callback",
      "fullTitle": "res .format(obj) with canonicalized mime types when Accept is not present should invoke the first callback",
      "duration": 1
    },
    {
      "title": "should should respond with 406 not acceptable",
      "fullTitle": "res .format(obj) with canonicalized mime types when no match is made should should respond with 406 not acceptable",
      "duration": 1
    },
    {
      "title": "should utilize qvalues in negotiation",
      "fullTitle": "res .format(obj) with extnames should utilize qvalues in negotiation",
      "duration": 1
    },
    {
      "title": "should allow wildcard type/subtypes",
      "fullTitle": "res .format(obj) with extnames should allow wildcard type/subtypes",
      "duration": 0
    },
    {
      "title": "should default the Content-Type",
      "fullTitle": "res .format(obj) with extnames should default the Content-Type",
      "duration": 0
    },
    {
      "title": "should set the correct  charset for the Content-Type",
      "fullTitle": "res .format(obj) with extnames should set the correct  charset for the Content-Type",
      "duration": 1
    },
    {
      "title": "should Vary: Accept",
      "fullTitle": "res .format(obj) with extnames should Vary: Accept",
      "duration": 1
    },
    {
      "title": "should invoke the first callback",
      "fullTitle": "res .format(obj) with extnames when Accept is not present should invoke the first callback",
      "duration": 1
    },
    {
      "title": "should should respond with 406 not acceptable",
      "fullTitle": "res .format(obj) with extnames when no match is made should should respond with 406 not acceptable",
      "duration": 1
    },
    {
      "title": "should be invoked instead of auto-responding",
      "fullTitle": "res .format(obj) given .default should be invoked instead of auto-responding",
      "duration": 1
    },
    {
      "title": "should utilize qvalues in negotiation",
      "fullTitle": "res .format(obj) in router should utilize qvalues in negotiation",
      "duration": 1
    },
    {
      "title": "should allow wildcard type/subtypes",
      "fullTitle": "res .format(obj) in router should allow wildcard type/subtypes",
      "duration": 1
    },
    {
      "title": "should default the Content-Type",
      "fullTitle": "res .format(obj) in router should default the Content-Type",
      "duration": 0
    },
    {
      "title": "should set the correct  charset for the Content-Type",
      "fullTitle": "res .format(obj) in router should set the correct  charset for the Content-Type",
      "duration": 0
    },
    {
      "title": "should Vary: Accept",
      "fullTitle": "res .format(obj) in router should Vary: Accept",
      "duration": 1
    },
    {
      "title": "should invoke the first callback",
      "fullTitle": "res .format(obj) in router when Accept is not present should invoke the first callback",
      "duration": 1
    },
    {
      "title": "should should respond with 406 not acceptable",
      "fullTitle": "res .format(obj) in router when no match is made should should respond with 406 not acceptable",
      "duration": 1
    },
    {
      "title": "should get the response header field",
      "fullTitle": "res .get(field) should get the response header field",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types",
      "fullTitle": "res should not override previous Content-Types",
      "duration": 1
    },
    {
      "title": "should not support jsonp callbacks",
      "fullTitle": "res .json(object) should not support jsonp callbacks",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types",
      "fullTitle": "res .json(object) should not override previous Content-Types",
      "duration": 1
    },
    {
      "title": "should respond with json for null",
      "fullTitle": "res .json(object) when given primitives should respond with json for null",
      "duration": 1
    },
    {
      "title": "should respond with json for Number",
      "fullTitle": "res .json(object) when given primitives should respond with json for Number",
      "duration": 0
    },
    {
      "title": "should respond with json for String",
      "fullTitle": "res .json(object) when given primitives should respond with json for String",
      "duration": 0
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .json(object) when given an array should respond with json",
      "duration": 0
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .json(object) when given an object should respond with json",
      "duration": 0
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .json(object) \"json replacer\" setting should be passed to JSON.stringify()",
      "duration": 0
    },
    {
      "title": "should default to 2 in development",
      "fullTitle": "res .json(object) \"json spaces\" setting should default to 2 in development",
      "duration": 0
    },
    {
      "title": "should be undefined otherwise",
      "fullTitle": "res .json(object) \"json spaces\" setting should be undefined otherwise",
      "duration": 0
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .json(object) \"json spaces\" setting should be passed to JSON.stringify()",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode",
      "fullTitle": "res .json(status, object) should respond with json and set the .statusCode",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode for backwards compat",
      "fullTitle": "res .json(object, status) should respond with json and set the .statusCode for backwards compat",
      "duration": 1
    },
    {
      "title": "should use status as second number for backwards compat",
      "fullTitle": "res .json(object, status) should use status as second number for backwards compat",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types",
      "fullTitle": "res should not override previous Content-Types",
      "duration": 1
    },
    {
      "title": "should respond with jsonp",
      "fullTitle": "res .jsonp(object) should respond with jsonp",
      "duration": 1
    },
    {
      "title": "should use first callback parameter with jsonp",
      "fullTitle": "res .jsonp(object) should use first callback parameter with jsonp",
      "duration": 1
    },
    {
      "title": "should ignore object callback parameter with jsonp",
      "fullTitle": "res .jsonp(object) should ignore object callback parameter with jsonp",
      "duration": 1
    },
    {
      "title": "should allow renaming callback",
      "fullTitle": "res .jsonp(object) should allow renaming callback",
      "duration": 1
    },
    {
      "title": "should allow []",
      "fullTitle": "res .jsonp(object) should allow []",
      "duration": 1
    },
    {
      "title": "should disallow arbitrary js",
      "fullTitle": "res .jsonp(object) should disallow arbitrary js",
      "duration": 1
    },
    {
      "title": "should escape utf whitespace",
      "fullTitle": "res .jsonp(object) should escape utf whitespace",
      "duration": 1
    },
    {
      "title": "should not escape utf whitespace for json fallback",
      "fullTitle": "res .jsonp(object) should not escape utf whitespace for json fallback",
      "duration": 1
    },
    {
      "title": "should include security header and prologue",
      "fullTitle": "res .jsonp(object) should include security header and prologue",
      "duration": 1
    },
    {
      "title": "should not override previous Content-Types with no callback",
      "fullTitle": "res .jsonp(object) should not override previous Content-Types with no callback",
      "duration": 1
    },
    {
      "title": "should override previous Content-Types with callback",
      "fullTitle": "res .jsonp(object) should override previous Content-Types with callback",
      "duration": 1
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json",
      "duration": 1
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .jsonp(object) when given an array should respond with json",
      "duration": 1
    },
    {
      "title": "should respond with json",
      "fullTitle": "res .jsonp(object) when given an object should respond with json",
      "duration": 1
    },
    {
      "title": "should respond with json for null",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json for null",
      "duration": 1
    },
    {
      "title": "should respond with json for Number",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json for Number",
      "duration": 1
    },
    {
      "title": "should respond with json for String",
      "fullTitle": "res .jsonp(object) when given primitives should respond with json for String",
      "duration": 1
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .jsonp(object) \"json replacer\" setting should be passed to JSON.stringify()",
      "duration": 1
    },
    {
      "title": "should default to 2 in development",
      "fullTitle": "res .jsonp(object) \"json spaces\" setting should default to 2 in development",
      "duration": 0
    },
    {
      "title": "should be undefined otherwise",
      "fullTitle": "res .jsonp(object) \"json spaces\" setting should be undefined otherwise",
      "duration": 0
    },
    {
      "title": "should be passed to JSON.stringify()",
      "fullTitle": "res .jsonp(object) \"json spaces\" setting should be passed to JSON.stringify()",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode",
      "fullTitle": "res .jsonp(status, object) should respond with json and set the .statusCode",
      "duration": 1
    },
    {
      "title": "should respond with json and set the .statusCode for backwards compat",
      "fullTitle": "res .jsonp(object, status) should respond with json and set the .statusCode for backwards compat",
      "duration": 1
    },
    {
      "title": "should use status as second number for backwards compat",
      "fullTitle": "res .jsonp(object, status) should use status as second number for backwards compat",
      "duration": 1
    },
    {
      "title": "should set Link header field",
      "fullTitle": "res .links(obj) should set Link header field",
      "duration": 1
    },
    {
      "title": "should set Link header field for multiple calls",
      "fullTitle": "res .links(obj) should set Link header field for multiple calls",
      "duration": 1
    },
    {
      "title": "should work when mounted",
      "fullTitle": "res should work when mounted",
      "duration": 1
    },
    {
      "title": "should merge locals",
      "fullTitle": "res .locals(obj) should merge locals",
      "duration": 1
    },
    {
      "title": "should set the header",
      "fullTitle": "res .location(url) should set the header",
      "duration": 1
    },
    {
      "title": "should pass through scheme-relative urls",
      "fullTitle": "res .location(url) with leading // should pass through scheme-relative urls",
      "duration": 1
    },
    {
      "title": "should construct scheme-relative urls",
      "fullTitle": "res .location(url) with leading / should construct scheme-relative urls",
      "duration": 1
    },
    {
      "title": "should construct path-relative urls",
      "fullTitle": "res .location(url) with leading ./ should construct path-relative urls",
      "duration": 1
    },
    {
      "title": "should construct path-relative urls",
      "fullTitle": "res .location(url) with leading ../ should construct path-relative urls",
      "duration": 1
    },
    {
      "title": "should construct path-relative urls",
      "fullTitle": "res .location(url) with leading ./ and containing .. should construct path-relative urls",
      "duration": 1
    },
    {
      "title": "should construct mount-point relative urls",
      "fullTitle": "res .location(url) without leading / should construct mount-point relative urls",
      "duration": 1
    },
    {
      "title": "should respect the mount-point",
      "fullTitle": "res .location(url) when mounted deeply should respect the mount-point",
      "duration": 1
    },
    {
      "title": "should respect the mount-point",
      "fullTitle": "res .location(url) when mounted omitting leading / should respect the mount-point",
      "duration": 1
    },
    {
      "title": "should ignore mount-point",
      "fullTitle": "res .location(url) when mounted providing leading / should ignore mount-point",
      "duration": 1
    },
    {
      "title": "should default to a 302 redirect",
      "fullTitle": "res .redirect(url) should default to a 302 redirect",
      "duration": 1
    },
    {
      "title": "should set the response status",
      "fullTitle": "res .redirect(status, url) should set the response status",
      "duration": 1
    },
    {
      "title": "should set the response status",
      "fullTitle": "res .redirect(url, status) should set the response status",
      "duration": 2
    },
    {
      "title": "should ignore the body",
      "fullTitle": "res when the request method is HEAD should ignore the body",
      "duration": 1
    },
    {
      "title": "should respond with an empty body",
      "fullTitle": "res when accepting neither text or html should respond with an empty body",
      "duration": 1
    },
    {
      "title": "should not contain redundant leading slashes in the location header",
      "fullTitle": "res responses redirected to relative paths should not contain redundant leading slashes in the location header",
      "duration": 1
    },
    {
      "title": "should preserve context when redirecting nested applications at any depth",
      "fullTitle": "res responses redirected to relative paths should preserve context when redirecting nested applications at any depth",
      "duration": 3
    },
    {
      "title": "should redirect correctly for nested applications that have been remounted",
      "fullTitle": "res responses redirected to relative paths should redirect correctly for nested applications that have been remounted",
      "duration": 2
    },
    {
      "title": "should support absolute paths",
      "fullTitle": "res .render(name) should support absolute paths",
      "duration": 1
    },
    {
      "title": "should support absolute paths with \"view engine\"",
      "fullTitle": "res .render(name) should support absolute paths with \"view engine\"",
      "duration": 1
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "res .render(name) should expose app.locals",
      "duration": 1
    },
    {
      "title": "should support index.<engine>",
      "fullTitle": "res .render(name) should support index.<engine>",
      "duration": 1
    },
    {
      "title": "should render the template",
      "fullTitle": "res .render(name) when \"view engine\" is given should render the template",
      "duration": 1
    },
    {
      "title": "should render the template",
      "fullTitle": "res .render(name, option) should render the template",
      "duration": 0
    },
    {
      "title": "should expose app.locals",
      "fullTitle": "res .render(name, option) should expose app.locals",
      "duration": 1
    },
    {
      "title": "should expose res.locals",
      "fullTitle": "res .render(name, option) should expose res.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to res.locals over app.locals",
      "fullTitle": "res .render(name, option) should give precedence to res.locals over app.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to res.render() locals over res.locals",
      "fullTitle": "res .render(name, option) should give precedence to res.render() locals over res.locals",
      "duration": 1
    },
    {
      "title": "should give precedence to res.render() locals over app.locals",
      "fullTitle": "res .render(name, option) should give precedence to res.render() locals over app.locals",
      "duration": 1
    },
    {
      "title": "should pass the resulting string",
      "fullTitle": "res .render(name, options, fn) should pass the resulting string",
      "duration": 1
    },
    {
      "title": "should pass the resulting string",
      "fullTitle": "res .render(name, fn) should pass the resulting string",
      "duration": 1
    },
    {
      "title": "should always check regardless of length",
      "fullTitle": "res should always check regardless of length",
      "duration": 1
    },
    {
      "title": "should not perform freshness check unless 2xx or 304",
      "fullTitle": "res should not perform freshness check unless 2xx or 304",
      "duration": 1
    },
    {
      "title": "should not support jsonp callbacks",
      "fullTitle": "res should not support jsonp callbacks",
      "duration": 1
    },
    {
      "title": "should set body to \"\"",
      "fullTitle": "res .send(null) should set body to \"\"",
      "duration": 0
    },
    {
      "title": "should set body to \"\"",
      "fullTitle": "res .send(undefined) should set body to \"\"",
      "duration": 0
    },
    {
      "title": "should set .statusCode",
      "fullTitle": "res .send(code) should set .statusCode",
      "duration": 1
    },
    {
      "title": "should set .statusCode and body",
      "fullTitle": "res .send(code, body) should set .statusCode and body",
      "duration": 1
    },
    {
      "title": "should be supported for backwards compat",
      "fullTitle": "res .send(body, code) should be supported for backwards compat",
      "duration": 1
    },
    {
      "title": "should send number as json",
      "fullTitle": "res .send(code, number) should send number as json",
      "duration": 1
    },
    {
      "title": "should send as html",
      "fullTitle": "res .send(String) should send as html",
      "duration": 0
    },
    {
      "title": "should not override Content-Type",
      "fullTitle": "res .send(String) should not override Content-Type",
      "duration": 1
    },
    {
      "title": "should override charset in Content-Type",
      "fullTitle": "res .send(String) should override charset in Content-Type",
      "duration": 1
    },
    {
      "title": "should keep charset in Content-Type for Buffers",
      "fullTitle": "res .send(String) should keep charset in Content-Type for Buffers",
      "duration": 1
    },
    {
      "title": "should send as octet-stream",
      "fullTitle": "res .send(Buffer) should send as octet-stream",
      "duration": 1
    },
    {
      "title": "should not override Content-Type",
      "fullTitle": "res .send(Buffer) should not override Content-Type",
      "duration": 1
    },
    {
      "title": "should send as application/json",
      "fullTitle": "res .send(Object) should send as application/json",
      "duration": 1
    },
    {
      "title": "should ignore the body",
      "fullTitle": "res when the request method is HEAD should ignore the body",
      "duration": 1
    },
    {
      "title": "should strip Content-* fields, Transfer-Encoding field, and body",
      "fullTitle": "res when .statusCode is 204 should strip Content-* fields, Transfer-Encoding field, and body",
      "duration": 1
    },
    {
      "title": "should strip Content-* fields, Transfer-Encoding field, and body",
      "fullTitle": "res when .statusCode is 304 should strip Content-* fields, Transfer-Encoding field, and body",
      "duration": 1
    },
    {
      "title": "should send ETag",
      "fullTitle": "res \"etag\" setting when enabled should send ETag",
      "duration": 0
    },
    {
      "title": "should send ETag in response to ACL request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to ACL request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to BIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to BIND request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to CHECKOUT request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to CHECKOUT request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to COPY request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to COPY request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to DELETE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to DELETE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to GET request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to GET request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to HEAD request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to HEAD request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to LINK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to LINK request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to LOCK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to LOCK request",
      "duration": 2
    },
    {
      "title": "should send ETag in response to M-SEARCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to M-SEARCH request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MERGE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MERGE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MKACTIVITY request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MKACTIVITY request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MKCALENDAR request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MKCALENDAR request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MKCOL request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MKCOL request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to MOVE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to MOVE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to NOTIFY request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to NOTIFY request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to OPTIONS request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to OPTIONS request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to PATCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PATCH request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to POST request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to POST request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PROPFIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PROPFIND request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PROPPATCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PROPPATCH request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PURGE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PURGE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to PUT request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to PUT request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to REBIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to REBIND request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to REPORT request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to REPORT request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to SEARCH request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to SEARCH request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to SOURCE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to SOURCE request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to SUBSCRIBE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to SUBSCRIBE request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to TRACE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to TRACE request",
      "duration": 2
    },
    {
      "title": "should send ETag in response to UNBIND request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNBIND request",
      "duration": 1
    },
    {
      "title": "should send ETag in response to UNLINK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNLINK request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to UNLOCK request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNLOCK request",
      "duration": 0
    },
    {
      "title": "should send ETag in response to UNSUBSCRIBE request",
      "fullTitle": "res \"etag\" setting when enabled should send ETag in response to UNSUBSCRIBE request",
      "duration": 1
    },
    {
      "title": "should send ETag for empty string response",
      "fullTitle": "res \"etag\" setting when enabled should send ETag for empty string response",
      "duration": 1
    },
    {
      "title": "should not override ETag when manually set",
      "fullTitle": "res \"etag\" setting when enabled should not override ETag when manually set",
      "duration": 1
    },
    {
      "title": "should not send ETag for res.send()",
      "fullTitle": "res \"etag\" setting when enabled should not send ETag for res.send()",
      "duration": 1
    },
    {
      "title": "should send no ETag",
      "fullTitle": "res \"etag\" setting when disabled should send no ETag",
      "duration": 1
    },
    {
      "title": "should send ETag when manually set",
      "fullTitle": "res \"etag\" setting when disabled should send ETag when manually set",
      "duration": 1
    },
    {
      "title": "should send strong ETag",
      "fullTitle": "res \"etag\" setting when \"strong\" should send strong ETag",
      "duration": 1
    },
    {
      "title": "should send weak ETag",
      "fullTitle": "res \"etag\" setting when \"weak\" should send weak ETag",
      "duration": 1
    },
    {
      "title": "should send custom ETag",
      "fullTitle": "res \"etag\" setting when a function should send custom ETag",
      "duration": 1
    },
    {
      "title": "should not send falsy ETag",
      "fullTitle": "res \"etag\" setting when a function should not send falsy ETag",
      "duration": 1
    },
    {
      "title": "should invoke the callback when complete",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback when complete",
      "duration": 1
    },
    {
      "title": "should utilize the same options as express.static()",
      "fullTitle": "res .sendfile(path, fn) should utilize the same options as express.static()",
      "duration": 1
    },
    {
      "title": "should not override manual content-types",
      "fullTitle": "res .sendfile(path, fn) should not override manual content-types",
      "duration": 1
    },
    {
      "title": "should invoke the callback on 403",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback on 403",
      "duration": 1
    },
    {
      "title": "should invoke the callback on socket error",
      "fullTitle": "res .sendfile(path, fn) should invoke the callback on socket error",
      "duration": 1
    },
    {
      "title": "should not serve dotfiles",
      "fullTitle": "res .sendfile(path) should not serve dotfiles",
      "duration": 1
    },
    {
      "title": "should accept dotfiles option",
      "fullTitle": "res .sendfile(path) should accept dotfiles option",
      "duration": 1
    },
    {
      "title": "should transfer a file",
      "fullTitle": "res .sendfile(path) should transfer a file",
      "duration": 1
    },
    {
      "title": "should transfer a directory index file",
      "fullTitle": "res .sendfile(path) should transfer a directory index file",
      "duration": 2
    },
    {
      "title": "should transfer the file",
      "fullTitle": "res .sendfile(path) with an absolute path should transfer the file",
      "duration": 1
    },
    {
      "title": "should transfer the file",
      "fullTitle": "res .sendfile(path) with a relative path should transfer the file",
      "duration": 1
    },
    {
      "title": "should serve relative to \"root\"",
      "fullTitle": "res .sendfile(path) with a relative path should serve relative to \"root\"",
      "duration": 2
    },
    {
      "title": "should consider ../ malicious when \"root\" is not set",
      "fullTitle": "res .sendfile(path) with a relative path should consider ../ malicious when \"root\" is not set",
      "duration": 1
    },
    {
      "title": "should allow ../ when \"root\" is set",
      "fullTitle": "res .sendfile(path) with a relative path should allow ../ when \"root\" is set",
      "duration": 1
    },
    {
      "title": "should disallow requesting out of \"root\"",
      "fullTitle": "res .sendfile(path) with a relative path should disallow requesting out of \"root\"",
      "duration": 1
    },
    {
      "title": "should next(404) when not found",
      "fullTitle": "res .sendfile(path) with a relative path should next(404) when not found",
      "duration": 1
    },
    {
      "title": "should still serve",
      "fullTitle": "res .sendfile(path) with a relative path with non-GET should still serve",
      "duration": 1
    },
    {
      "title": "should set the response header field",
      "fullTitle": "res .set(field, value) should set the response header field",
      "duration": 0
    },
    {
      "title": "should coerce to a string",
      "fullTitle": "res .set(field, value) should coerce to a string",
      "duration": 1
    },
    {
      "title": "should set multiple response header fields",
      "fullTitle": "res .set(field, values) should set multiple response header fields",
      "duration": 1
    },
    {
      "title": "should coerce to an array of strings",
      "fullTitle": "res .set(field, values) should coerce to an array of strings",
      "duration": 1
    },
    {
      "title": "should set multiple fields",
      "fullTitle": "res .set(object) should set multiple fields",
      "duration": 1
    },
    {
      "title": "should coerce to a string",
      "fullTitle": "res .set(object) should coerce to a string",
      "duration": 1
    },
    {
      "title": "should set the response .statusCode",
      "fullTitle": "res .status(code) should set the response .statusCode",
      "duration": 1
    },
    {
      "title": "should set the Content-Type based on a filename",
      "fullTitle": "res .type(str) should set the Content-Type based on a filename",
      "duration": 1
    },
    {
      "title": "should default to application/octet-stream",
      "fullTitle": "res .type(str) should default to application/octet-stream",
      "duration": 0
    },
    {
      "title": "should set the Content-Type with type/subtype",
      "fullTitle": "res .type(str) should set the Content-Type with type/subtype",
      "duration": 0
    },
    {
      "title": "should not set Vary",
      "fullTitle": "res.vary() with no arguments should not set Vary",
      "duration": 1
    },
    {
      "title": "should not set Vary",
      "fullTitle": "res.vary() with an empty array should not set Vary",
      "duration": 1
    },
    {
      "title": "should set the values",
      "fullTitle": "res.vary() with an array should set the values",
      "duration": 1
    },
    {
      "title": "should set the value",
      "fullTitle": "res.vary() with a string should set the value",
      "duration": 1
    },
    {
      "title": "should not add it again",
      "fullTitle": "res.vary() when the value is present should not add it again",
      "duration": 1
    },
    {
      "title": "should support strings",
      "fullTitle": "utils.etag(body, encoding) should support strings",
      "duration": 0
    },
    {
      "title": "should support utf8 strings",
      "fullTitle": "utils.etag(body, encoding) should support utf8 strings",
      "duration": 0
    },
    {
      "title": "should support buffer",
      "fullTitle": "utils.etag(body, encoding) should support buffer",
      "duration": 0
    },
    {
      "title": "should support empty string",
      "fullTitle": "utils.etag(body, encoding) should support empty string",
      "duration": 0
    },
    {
      "title": "should support strings",
      "fullTitle": "utils.wetag(body, encoding) should support strings",
      "duration": 0
    },
    {
      "title": "should support utf8 strings",
      "fullTitle": "utils.wetag(body, encoding) should support utf8 strings",
      "duration": 0
    },
    {
      "title": "should support buffer",
      "fullTitle": "utils.wetag(body, encoding) should support buffer",
      "duration": 1
    },
    {
      "title": "should support empty string",
      "fullTitle": "utils.wetag(body, encoding) should support empty string",
      "duration": 0
    },
    {
      "title": "should support windows",
      "fullTitle": "utils.isAbsolute() should support windows",
      "duration": 0
    },
    {
      "title": "should support windows unc",
      "fullTitle": "utils.isAbsolute() should support windows unc",
      "duration": 0
    },
    {
      "title": "should support unices",
      "fullTitle": "utils.isAbsolute() should support unices",
      "duration": 0
    },
    {
      "title": "should flatten an array",
      "fullTitle": "utils.flatten(arr) should flatten an array",
      "duration": 0
    },
    {
      "title": "should default quality to 1",
      "fullTitle": "utils.parseParams(str) should default quality to 1",
      "duration": 0
    },
    {
      "title": "should parse qvalues",
      "fullTitle": "utils.parseParams(str) should parse qvalues",
      "duration": 1
    },
    {
      "title": "should parse accept parameters",
      "fullTitle": "utils.parseParams(str) should parse accept parameters",
      "duration": 0
    },
    {
      "title": "should work with messed up whitespace",
      "fullTitle": "utils.parseParams(str) should work with messed up whitespace",
      "duration": 0
    },
    {
      "title": "should work with multiples",
      "fullTitle": "utils.parseParams(str) should work with multiples",
      "duration": 0
    },
    {
      "title": "should work with long lists",
      "fullTitle": "utils.parseParams(str) should work with long lists",
      "duration": 0
    },
    {
      "title": "should sort by quality",
      "fullTitle": "utils.parseParams(str) should sort by quality",
      "duration": 0
    },
    {
      "title": "should exclude those with a quality of 0",
      "fullTitle": "utils.parseParams(str) should exclude those with a quality of 0",
      "duration": 0
    },
    {
      "title": "should provide .type",
      "fullTitle": "utils.parseAccept(str) should provide .type",
      "duration": 0
    },
    {
      "title": "should provide .subtype",
      "fullTitle": "utils.parseAccept(str) should provide .subtype",
      "duration": 0
    },
    {
      "title": "should return the value",
      "fullTitle": "utils.accepts(type, str) when a string is not given should return the value",
      "duration": 0
    },
    {
      "title": "should return the value",
      "fullTitle": "utils.accepts(type, str) when a string is empty should return the value",
      "duration": 0
    },
    {
      "title": "should return the value",
      "fullTitle": "utils.accepts(type, str) when */* is given should return the value",
      "duration": 0
    },
    {
      "title": "should return the best match",
      "fullTitle": "utils.accepts(type, str) when an array is given should return the best match",
      "duration": 0
    },
    {
      "title": "should behave like an array",
      "fullTitle": "utils.accepts(type, str) when a comma-delimited list is give should behave like an array",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when accepting type/subtype should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when accepting type/subtype should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when accepting */subtype should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when accepting */subtype should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when accepting type/* should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when accepting type/* should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should return the value when present",
      "fullTitle": "utils.accepts(type, str) when an extension is given should return the value when present",
      "duration": 0
    },
    {
      "title": "should return undefined otherwise",
      "fullTitle": "utils.accepts(type, str) when an extension is given should return undefined otherwise",
      "duration": 0
    },
    {
      "title": "should support *",
      "fullTitle": "utils.accepts(type, str) when an extension is given should support *",
      "duration": 0
    },
    {
      "title": "should match params",
      "fullTitle": "utils.accepts(type, str) when params included should match params",
      "duration": 0
    },
    {
      "title": "should redirect to /login",
      "fullTitle": "auth GET / should redirect to /login",
      "duration": 2
    },
    {
      "title": "should render login form",
      "fullTitle": "auth GET /login should render login form",
      "duration": 3
    },
    {
      "title": "should display login error",
      "fullTitle": "auth GET /login should display login error",
      "duration": 4
    },
    {
      "title": "should redirect to /",
      "fullTitle": "auth GET /logout should redirect to /",
      "duration": 1
    },
    {
      "title": "should redirect to /login without cookie",
      "fullTitle": "auth GET /restricted should redirect to /login without cookie",
      "duration": 1
    },
    {
      "title": "should fail without proper username",
      "fullTitle": "auth POST /login should fail without proper username",
      "duration": 1
    },
    {
      "title": "should default to text/html",
      "fullTitle": "content-negotiation GET / should default to text/html",
      "duration": 1
    },
    {
      "title": "should accept to text/plain",
      "fullTitle": "content-negotiation GET / should accept to text/plain",
      "duration": 1
    },
    {
      "title": "should accept to application/json",
      "fullTitle": "content-negotiation GET / should accept to application/json",
      "duration": 1
    },
    {
      "title": "should default to text/html",
      "fullTitle": "content-negotiation GET /users should default to text/html",
      "duration": 1
    },
    {
      "title": "should accept to text/plain",
      "fullTitle": "content-negotiation GET /users should accept to text/plain",
      "duration": 1
    },
    {
      "title": "should accept to application/json",
      "fullTitle": "content-negotiation GET /users should accept to application/json",
      "duration": 1
    },
    {
      "title": "should have a form",
      "fullTitle": "cookies GET / should have a form",
      "duration": 1
    },
    {
      "title": "should respond with no cookies",
      "fullTitle": "cookies GET / should respond with no cookies",
      "duration": 1
    },
    {
      "title": "should respond to cookie",
      "fullTitle": "cookies GET / should respond to cookie",
      "duration": 2
    },
    {
      "title": "should clear cookie",
      "fullTitle": "cookies GET /forget should clear cookie",
      "duration": 2
    },
    {
      "title": "should set a cookie",
      "fullTitle": "cookies POST / should set a cookie",
      "duration": 1
    },
    {
      "title": "should no set cookie w/o reminder",
      "fullTitle": "cookies POST / should no set cookie w/o reminder",
      "duration": 1
    },
    {
      "title": "should have a link to amazing.txt",
      "fullTitle": "downloads GET / should have a link to amazing.txt",
      "duration": 1
    },
    {
      "title": "should have a download header",
      "fullTitle": "downloads GET /files/amazing.txt should have a download header",
      "duration": 2
    },
    {
      "title": "should respond with 404",
      "fullTitle": "downloads GET /files/missing.txt should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with html",
      "fullTitle": "ejs GET / should respond with html",
      "duration": 2
    },
    {
      "title": "should respond with page list",
      "fullTitle": "error-pages GET / should respond with page list",
      "duration": 1
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error-pages Accept: text/html GET /404 should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error-pages Accept: application/json GET /404 should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error-pages Accept: text/plain GET /404 should respond with 404",
      "duration": 1
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error GET / should respond with 500",
      "duration": 1
    },
    {
      "title": "should respond with 500",
      "fullTitle": "error GET /next should respond with 500",
      "duration": 0
    },
    {
      "title": "should respond with 404",
      "fullTitle": "error GET /missing should respond with 404",
      "duration": 0
    },
    {
      "title": "should respond with html",
      "fullTitle": "markdown GET / should respond with html",
      "duration": 4
    },
    {
      "title": "should respond with an error",
      "fullTitle": "markdown GET /fail should respond with an error",
      "duration": 1
    },
    {
      "title": "should redirect to /users",
      "fullTitle": "mvc GET / should redirect to /users",
      "duration": 1
    },
    {
      "title": "should get pet",
      "fullTitle": "mvc GET /pet/0 should get pet",
      "duration": 1
    },
    {
      "title": "should get pet edit page",
      "fullTitle": "mvc GET /pet/0/edit should get pet edit page",
      "duration": 2
    },
    {
      "title": "should update the pet",
      "fullTitle": "mvc PUT /pet/2 should update the pet",
      "duration": 4
    },
    {
      "title": "should display a list of users",
      "fullTitle": "mvc GET /users should display a list of users",
      "duration": 2
    },
    {
      "title": "should display the user",
      "fullTitle": "mvc GET /user/:id when present should display the user",
      "duration": 1
    },
    {
      "title": "should display the users pets",
      "fullTitle": "mvc GET /user/:id when present should display the users pets",
      "duration": 2
    },
    {
      "title": "should 404",
      "fullTitle": "mvc GET /user/:id when not present should 404",
      "duration": 2
    },
    {
      "title": "should display the edit form",
      "fullTitle": "mvc GET /user/:id/edit should display the edit form",
      "duration": 2
    },
    {
      "title": "should update the user",
      "fullTitle": "mvc PUT /user/:id should update the user",
      "duration": 3
    },
    {
      "title": "should create a pet for user",
      "fullTitle": "mvc POST /user/:id/pet should create a pet for user",
      "duration": 3
    },
    {
      "title": "should respond with instructions",
      "fullTitle": "params GET / should respond with instructions",
      "duration": 1
    },
    {
      "title": "should respond with a user",
      "fullTitle": "params GET /user/0 should respond with a user",
      "duration": 1
    },
    {
      "title": "should fail to find user",
      "fullTitle": "params GET /user/9 should fail to find user",
      "duration": 1
    },
    {
      "title": "should respond with three users",
      "fullTitle": "params GET /users/0-2 should respond with three users",
      "duration": 1
    },
    {
      "title": "should fail integer parsing",
      "fullTitle": "params GET /users/foo-bar should fail integer parsing",
      "duration": 1
    },
    {
      "title": "should respond with instructions",
      "fullTitle": "resource GET / should respond with instructions",
      "duration": 1
    },
    {
      "title": "should respond with all users",
      "fullTitle": "resource GET /users should respond with all users",
      "duration": 1
    },
    {
      "title": "should respond with user 1",
      "fullTitle": "resource GET /users/1 should respond with user 1",
      "duration": 2
    },
    {
      "title": "should respond with error",
      "fullTitle": "resource GET /users/9 should respond with error",
      "duration": 0
    },
    {
      "title": "should respond with users 1 through 3",
      "fullTitle": "resource GET /users/1..3 should respond with users 1 through 3",
      "duration": 0
    },
    {
      "title": "should delete user 1",
      "fullTitle": "resource DELETE /users/1 should delete user 1",
      "duration": 0
    },
    {
      "title": "should fail",
      "fullTitle": "resource DELETE /users/9 should fail",
      "duration": 0
    },
    {
      "title": "should respond with users 2 and 3 as json",
      "fullTitle": "resource GET /users/1..3.json should respond with users 2 and 3 as json",
      "duration": 1
    },
    {
      "title": "should respond with users",
      "fullTitle": "route-map GET /users should respond with users",
      "duration": 1
    },
    {
      "title": "should delete users",
      "fullTitle": "route-map DELETE /users should delete users",
      "duration": 1
    },
    {
      "title": "should get a user",
      "fullTitle": "route-map GET /users/:id should get a user",
      "duration": 1
    },
    {
      "title": "should get a users pets",
      "fullTitle": "route-map GET /users/:id/pets should get a users pets",
      "duration": 1
    },
    {
      "title": "should get a users pet",
      "fullTitle": "route-map GET /users/:id/pets/:pid should get a users pet",
      "duration": 1
    },
    {
      "title": "should respond with 400 bad request",
      "fullTitle": "web-service GET /api/users without an api key should respond with 400 bad request",
      "duration": 1
    },
    {
      "title": "should respond with 401 unauthorized",
      "fullTitle": "web-service GET /api/users with an invalid api key should respond with 401 unauthorized",
      "duration": 1
    },
    {
      "title": "should respond users json",
      "fullTitle": "web-service GET /api/users with a valid api key should respond users json",
      "duration": 1
    },
    {
      "title": "should respond with 400 bad request",
      "fullTitle": "web-service GET /api/repos without an api key should respond with 400 bad request",
      "duration": 1
    },
    {
      "title": "should respond with 401 unauthorized",
      "fullTitle": "web-service GET /api/repos with an invalid api key should respond with 401 unauthorized",
      "duration": 0
    },
    {
      "title": "should respond repos json",
      "fullTitle": "web-service GET /api/repos with a valid api key should respond repos json",
      "duration": 0
    },
    {
      "title": "should respond with 400 bad request",
      "fullTitle": "web-service GET /api/user/:name/repos without an api key should respond with 400 bad request",
      "duration": 0
    },
    {
      "title": "should respond with 401 unauthorized",
      "fullTitle": "web-service GET /api/user/:name/repos with an invalid api key should respond with 401 unauthorized",
      "duration": 0
    },
    {
      "title": "should respond user repos json",
      "fullTitle": "web-service GET /api/user/:name/repos with a valid api key should respond user repos json",
      "duration": 0
    },
    {
      "title": "should 404 with unknown user",
      "fullTitle": "web-service GET /api/user/:name/repos with a valid api key should 404 with unknown user",
      "duration": 0
    },
    {
      "title": "should respond with 404 json",
      "fullTitle": "web-service when requesting an invalid route should respond with 404 json",
      "duration": 0
    }
  ]
}