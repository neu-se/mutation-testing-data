*** using precomputed mutations ***
[32m20:14:14 (2712) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m20:14:14 (2712) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m20:14:15 (2712) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m20:14:15 (2712) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m20:14:15 (2712) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m20:14:17 (2712) INFO ProjectReader[39m Found 31 of 1504 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 280 mutants from MUTATION_TESTING/template-onemutation_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in sinks) exports[k] = sources[k];
Mutant 1 in index.js: sources replaced with sinks
Mutant 2 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k in throughs.reverse()) exports[k] = throughs[k];
Mutant 3 in index.js: throughs replaced with throughs.reverse()
Mutant 4 in index.js: for (var k in sinks) exports[k] = sinks[k]; replaced with for (var k in throughs) exports[k] = sinks[k];
Mutant 5 in index.js: sinks replaced with sources
Mutant 6 in pull.js: typeof a === 'function' && a.length === 1 replaced with typeof a === 'function' && a.length === 2
Mutant 7 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = 1; i < length; i++) args[i] = arguments[i];
Mutant 8 in pull.js: i < length replaced with i <= length
Mutant 9 in pull.js: i++ replaced with i--
Mutant 10 in pull.js: args == null replaced with args === undefined
Mutant 11 in pull.js: length replaced with length - 1
Mutant 12 in pull.js: pull(read, ref[0]) replaced with pull(read, ref[1])
Mutant 13 in pull.js: read replaced with read + 1
Mutant 14 in pull.js: ref[0] replaced with ref[1]
Mutant 15 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[1], ref[0])
Mutant 16 in pull.js: read replaced with read + 1
Mutant 17 in pull.js: ref[0] replaced with ref[1]
Mutant 18 in pull.js: ref[1] replaced with ref[2]
Mutant 19 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[3])
Mutant 20 in pull.js: read replaced with read + 1
Mutant 21 in pull.js: ref[0] replaced with ref[1]
Mutant 22 in pull.js: ref[1] replaced with ref[2]
Mutant 23 in pull.js: ref[2] replaced with ref[3]
Mutant 24 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], ref[4])
Mutant 25 in pull.js: read replaced with read + 1
Mutant 26 in pull.js: ref[0] replaced with ref[1]
Mutant 27 in pull.js: ref[1] replaced with ref[2]
Mutant 28 in pull.js: ref[2] replaced with ref[3]
Mutant 29 in pull.js: ref[3] replaced with ref[4]
Mutant 30 in pull.js: ref.unshift replaced with ref.pop
Mutant 31 in pull.js: read replaced with read.source
Mutant 32 in pull.js: pull.apply(null, ref) replaced with pull.apply(undefined, ref)
Mutant 33 in pull.js: pull.apply replaced with pull.call
Mutant 34 in pull.js: null replaced with undefined
Mutant 35 in pull.js: ref replaced with ref.slice()
Mutant 36 in pull.js: read && typeof read.source === 'function' replaced with read && typeof read.source !== 'function'
Mutant 37 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = 0; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 38 in pull.js: i < length replaced with i <= length
Mutant 39 in pull.js: i++ replaced with i--
Mutant 40 in pull.js: typeof s === 'function' replaced with s instanceof Function
Mutant 41 in pull.js: s replaced with !s
Mutant 42 in pull.js: read replaced with read + 1
Mutant 43 in pull.js: s && typeof s === 'object' replaced with s && s.constructor === Object
Mutant 44 in pull.js: s.sink replaced with s.source
Mutant 45 in pull.js: read replaced with read + 1
Mutant 46 in collect.js: arr.push replaced with arr.pop
Mutant 47 in collect.js: item replaced with item + 1
Mutant 48 in drain.js: !done replaced with done === null
Mutant 49 in drain.js: abort replaced with !abort
Mutant 50 in drain.js: loop replaced with !loop
Mutant 51 in drain.js: end = end || abort replaced with end = abort
Mutant 52 in drain.js: done replaced with done(end === true ? null : end)
Mutant 53 in drain.js: end === true ? null : end replaced with end === false ? null : end
Mutant 54 in drain.js: end && end !== true replaced with end && end !== false
Mutant 55 in drain.js: console.warn replaced with console.error
Mutant 56 in drain.js: doneLackingErr replaced with doneLackingErr.message
Mutant 57 in drain.js: op && false === op(data) || abort replaced with op && false === op(data) || !abort
Mutant 58 in drain.js: op replaced with !op
Mutant 59 in drain.js: data replaced with null
Mutant 60 in drain.js: read(abort || true, done || function () {}) replaced with read(abort || false, done || function () {})
Mutant 61 in drain.js: abort || true replaced with abort && true
Mutant 62 in drain.js: done || function () {} replaced with done && function () {}
Mutant 63 in drain.js: !loop replaced with loop
Mutant 64 in drain.js: next replaced with loop = true
Mutant 65 in drain.js: !cbed replaced with cbed
Mutant 66 in drain.js: 'function' == typeof err replaced with err instanceof Function
Mutant 67 in drain.js: read replaced with read(abort, cb || function () {})
Mutant 68 in drain.js: abort replaced with null
Mutant 69 in drain.js: cb || function () {} replaced with function () {}
Mutant 70 in find.js: !cb replaced with !test
Mutant 71 in find.js: prop replaced with !prop
Mutant 72 in find.js: test replaced with !test
Mutant 73 in find.js: test(data) replaced with !test(data)
Mutant 74 in find.js: data replaced with data.length
Mutant 75 in find.js: cb(null, data) replaced with cb(undefined, data)
Mutant 76 in find.js: null replaced with undefined
Mutant 77 in find.js: data replaced with null
Mutant 78 in find.js: ended replaced with !ended
Mutant 79 in find.js: cb(err === true ? null : err, null) replaced with cb(err === false ? null : err, null)
Mutant 80 in find.js: err === true ? null : err replaced with err === false ? null : err
Mutant 81 in find.js: null replaced with undefined
Mutant 82 in log.js: console.log replaced with console.error
Mutant 83 in log.js: data replaced with data.toUpperCase()
Mutant 84 in on-end.js: drain(null, done) replaced with drain(undefined, done)
Mutant 85 in on-end.js: null replaced with undefined
Mutant 86 in on-end.js: done replaced with done(null)
Mutant 87 in reduce.js: !cb replaced with !acc
Mutant 88 in reduce.js: reducer(acc, data) replaced with reducer(acc + data)
Mutant 89 in reduce.js: acc replaced with null
Mutant 90 in reduce.js: data replaced with null
Mutant 91 in reduce.js: cb(err, acc) replaced with cb(err, acc, null)
Mutant 92 in reduce.js: err replaced with null
Mutant 93 in reduce.js: acc replaced with null
Mutant 94 in reduce.js: arguments.length === 2 replaced with arguments.length < 2
Mutant 95 in reduce.js: end replaced with end === true
Mutant 96 in reduce.js: cb replaced with null
Mutant 97 in reduce.js: end === true ? null : end replaced with end === false ? null : end
Mutant 98 in reduce.js: source replaced with sink(null)
Mutant 99 in count.js: end replaced with end && cb(end)
Mutant 100 in count.js: cb replaced with !cb
Mutant 101 in count.js: end replaced with end + 1
Mutant 102 in count.js: i > max replaced with i >= max
Mutant 103 in count.js: true replaced with false
Mutant 104 in count.js: null replaced with undefined
Mutant 105 in count.js: i++ replaced with i--
Mutant 106 in empty.js: cb replaced with !cb
Mutant 107 in empty.js: true replaced with false
Mutant 108 in error.js: cb replaced with !cb
Mutant 109 in error.js: err replaced with null
Mutant 110 in infinite.js: end replaced with !end
Mutant 111 in infinite.js: cb replaced with !cb
Mutant 112 in infinite.js: end replaced with null
Mutant 113 in infinite.js: cb(null, generate()) replaced with cb(undefined, generate())
Mutant 114 in infinite.js: null replaced with undefined
Mutant 115 in infinite.js: generate() replaced with generate(1)
Mutant 116 in keys.js: object replaced with object.keys()
Mutant 117 in once.js: abort replaced with !abort
Mutant 118 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, onAbort, abort)
Mutant 119 in once.js: cb replaced with _value
Mutant 120 in once.js: abort replaced with !abort
Mutant 121 in once.js: onAbort replaced with onAbort()
Mutant 122 in once.js: value != null replaced with value == null
Mutant 123 in once.js: cb(null, _value) replaced with cb(undefined, _value)
Mutant 124 in once.js: cb replaced with _value
Mutant 125 in once.js: null replaced with undefined
Mutant 126 in once.js: _value replaced with _value + 1
Mutant 127 in once.js: true replaced with false
Mutant 128 in values.js: !array replaced with array.length === 0
Mutant 129 in values.js: abort replaced with !abort
Mutant 130 in values.js: cb replaced with null
Mutant 131 in values.js: abort replaced with abort && onAbort
Mutant 132 in values.js: onAbort replaced with onAbort()
Mutant 133 in values.js: true replaced with false
Mutant 134 in values.js: !Array.isArray(array) replaced with Array.isArray(array)
Mutant 135 in values.js: array replaced with array.length - 1
Mutant 136 in values.js: array replaced with array.length
Mutant 137 in values.js: abort replaced with !abort
Mutant 138 in values.js: cb replaced with null
Mutant 139 in values.js: abort replaced with abort && onAbort
Mutant 140 in values.js: onAbort replaced with onAbort()
Mutant 141 in values.js: i >= array.length replaced with i > array.length
Mutant 142 in values.js: true replaced with false
Mutant 143 in values.js: cb(null, array[i++]) replaced with cb(undefined, array[i++])
Mutant 144 in values.js: null replaced with undefined
Mutant 145 in async-map.js: !map replaced with map === null
Mutant 146 in async-map.js: prop replaced with !prop
Mutant 147 in async-map.js: map replaced with map.length
Mutant 148 in async-map.js: aborted replaced with !aborted
Mutant 149 in async-map.js: cb replaced with abortCb
Mutant 150 in async-map.js: aborted replaced with null
Mutant 151 in async-map.js: abort replaced with !abort
Mutant 152 in async-map.js: !busy replaced with busy
Mutant 153 in async-map.js: cb replaced with abortCb
Mutant 154 in async-map.js: abort replaced with null
Mutant 155 in async-map.js: busy replaced with !busy
Mutant 156 in async-map.js: cb replaced with abortCb
Mutant 157 in async-map.js: abort replaced with null
Mutant 158 in async-map.js: end replaced with !end
Mutant 159 in async-map.js: cb replaced with abortCb
Mutant 160 in async-map.js: end replaced with null
Mutant 161 in async-map.js: aborted replaced with !aborted
Mutant 162 in async-map.js: cb replaced with abortCb
Mutant 163 in async-map.js: aborted replaced with null
Mutant 164 in async-map.js: aborted replaced with !aborted
Mutant 165 in async-map.js: aborted replaced with null
Mutant 166 in async-map.js: aborted replaced with null
Mutant 167 in async-map.js: err replaced with !err
Mutant 168 in async-map.js: next(err, cb) replaced with next(null, cb)
Mutant 169 in async-map.js: err replaced with null
Mutant 170 in async-map.js: cb replaced with null
Mutant 171 in async-map.js: cb(null, data) replaced with cb(undefined, data)
Mutant 172 in async-map.js: cb replaced with null
Mutant 173 in async-map.js: null replaced with undefined
Mutant 174 in async-map.js: data replaced with null
Mutant 175 in filter-not.js: tester replaced with tester.not
Mutant 176 in filter-not.js: test replaced with !test
Mutant 177 in filter-not.js: filter replaced with filterNot
Mutant 178 in filter-not.js: function (data) {
  return !test(data);
} replaced with function (data) {
  return test(data);
}
Mutant 179 in filter-not.js: test replaced with !test
Mutant 180 in filter-not.js: data replaced with !data
Mutant 181 in filter.js: test replaced with !test
Mutant 182 in filter.js: loop replaced with !loop
Mutant 183 in filter.js: !end && !test(data) replaced with end && test(data)
Mutant 184 in filter.js: test replaced with !test
Mutant 185 in filter.js: data replaced with data.toUpperCase()
Mutant 186 in filter.js: next(end, cb) replaced with next(end, data)
Mutant 187 in filter.js: next replaced with loop = true
Mutant 188 in filter.js: end replaced with !end
Mutant 189 in filter.js: cb replaced with null
Mutant 190 in filter.js: cb(end, data) replaced with cb(end, data.slice(0, 1))
Mutant 191 in filter.js: cb replaced with !cb
Mutant 192 in filter.js: end replaced with !end
Mutant 193 in filter.js: data replaced with null
Mutant 194 in flatten.js: abort replaced with !abort
Mutant 195 in flatten.js: read(err || abort, cb) replaced with read(err && abort, cb)
Mutant 196 in flatten.js: err || abort replaced with err && abort
Mutant 197 in flatten.js: cb replaced with null
Mutant 198 in flatten.js: read(abort, cb) replaced with read(abort, null)
Mutant 199 in flatten.js: abort replaced with null
Mutant 200 in flatten.js: cb replaced with cb(null, data)
Mutant 201 in flatten.js: _read replaced with !_read
Mutant 202 in flatten.js: nextChunk replaced with nextStream
Mutant 203 in flatten.js: err replaced with !err
Mutant 204 in flatten.js: err === true replaced with err == false
Mutant 205 in flatten.js: cb replaced with null
Mutant 206 in flatten.js: err replaced with null
Mutant 207 in flatten.js: cb(null, data) replaced with cb(undefined, data)
Mutant 208 in flatten.js: null replaced with undefined
Mutant 209 in flatten.js: data replaced with null
Mutant 210 in flatten.js: end replaced with !end
Mutant 211 in flatten.js: cb replaced with null
Mutant 212 in flatten.js: end replaced with null
Mutant 213 in flatten.js: stream && 'object' === typeof stream replaced with stream && 'function' === typeof stream
Mutant 214 in flatten.js: 'function' !== typeof stream replaced with 'function' === typeof stream
Mutant 215 in flatten.js: once replaced with never
Mutant 216 in flatten.js: stream replaced with null
Mutant 217 in flatten.js: nextChunk replaced with nextStream
Mutant 218 in map.js: !mapper replaced with mapper === null
Mutant 219 in map.js: prop replaced with !prop
Mutant 220 in map.js: mapper replaced with !mapper
Mutant 221 in map.js: mapper replaced with !mapper
Mutant 222 in map.js: data replaced with null
Mutant 223 in map.js: cb replaced with null
Mutant 224 in map.js: err replaced with null
Mutant 225 in map.js: cb(end, data) replaced with cb(end, null)
Mutant 226 in map.js: cb replaced with !cb
Mutant 227 in map.js: end replaced with !end
Mutant 228 in map.js: data replaced with null
Mutant 229 in non-unique.js: unique(field, true) replaced with unique(field, false)
Mutant 230 in non-unique.js: unique replaced with !unique
Mutant 231 in non-unique.js: field replaced with !field
Mutant 232 in non-unique.js: true replaced with false
Mutant 233 in take.js: 'number' === typeof test replaced with 'string' === typeof test
Mutant 234 in take.js: err || true replaced with err && true
Mutant 235 in take.js: ended && !end replaced with end && !ended
Mutant 236 in take.js: cb replaced with null
Mutant 237 in take.js: ended replaced with !ended
Mutant 238 in take.js: ended = end replaced with ended = !end
Mutant 239 in take.js: read(ended, cb) replaced with read(!ended, cb)
Mutant 240 in take.js: ended replaced with !ended
Mutant 241 in take.js: cb replaced with cb(null, data)
Mutant 242 in take.js: ended = ended || end replaced with ended = end
Mutant 243 in take.js: ended replaced with !ended
Mutant 244 in take.js: !test(data) replaced with test(data)
Mutant 245 in take.js: test replaced with !test
Mutant 246 in take.js: data replaced with null
Mutant 247 in take.js: cb(null, data) replaced with cb(undefined, data)
Mutant 248 in take.js: null replaced with undefined
Mutant 249 in take.js: data replaced with null
Mutant 250 in take.js: cb replaced with cb(null, data)
Mutant 251 in take.js: cb(null, data) replaced with cb(undefined, data)
Mutant 252 in take.js: null replaced with undefined
Mutant 253 in take.js: data replaced with null
Mutant 254 in through.js: a || !onEnd replaced with a && onEnd
Mutant 255 in through.js: abort === true ? null : abort replaced with abort === false ? null : abort
Mutant 256 in through.js: end replaced with !end
Mutant 257 in through.js: once replaced with never
Mutant 258 in through.js: end replaced with null
Mutant 259 in through.js: !end replaced with end
Mutant 260 in through.js: op replaced with !op
Mutant 261 in through.js: data replaced with null
Mutant 262 in through.js: end replaced with null
Mutant 263 in through.js: cb(end, data) replaced with cb(end, null)
Mutant 264 in through.js: cb replaced with !cb
Mutant 265 in through.js: end replaced with end && false
Mutant 266 in through.js: data replaced with null
Mutant 267 in unique.js: field replaced with field + 1
Mutant 268 in unique.js: field replaced with field + 1
Mutant 269 in unique.js: data replaced with data.value
Mutant 270 in unique.js: seen[key] replaced with !seen[key]
Mutant 271 in abort-cb.js: cb replaced with !abort
Mutant 272 in abort-cb.js: abort replaced with abort === true ? null : abort
Mutant 273 in abort-cb.js: abort === true ? null : abort replaced with abort === false ? null : abort
Mutant 274 in prop.js: key.exec replaced with key.test
Mutant 275 in prop.js: data replaced with data[0]
Mutant 276 in tester.js: test.test replaced with !test.test
Mutant 277 in tester.js: data replaced with data.toUpperCase()
Mutant 278 in tester.js: prop replaced with prop.test
Mutant 279 in tester.js: test replaced with test.test(data)
[32m20:14:17 (2712) INFO Instrumenter[39m Instrumented 31 source file(s) with 280 mutant(s)
[32m20:14:17 (2712) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m20:14:18 (2712) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m20:14:18 (2712) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m20:14:20 (2712) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 1 second (net 1810 ms, overhead 2 ms).
Mutation testing 3% (elapsed: <1m, remaining: ~5m) 9/280 tested (1 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~6m) 13/280 tested (3 survived, 1 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~6m) 20/280 tested (5 survived, 1 timed out)
Mutation testing 9% (elapsed: <1m, remaining: ~6m) 27/280 tested (8 survived, 1 timed out)
Mutation testing 11% (elapsed: <1m, remaining: ~6m) 32/280 tested (13 survived, 1 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~6m) 40/280 tested (18 survived, 1 timed out)
Mutation testing 17% (elapsed: ~1m, remaining: ~5m) 48/280 tested (22 survived, 1 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~5m) 52/280 tested (23 survived, 2 timed out)
Mutation testing 21% (elapsed: ~1m, remaining: ~5m) 60/280 tested (26 survived, 2 timed out)
Mutation testing 24% (elapsed: ~1m, remaining: ~5m) 68/280 tested (30 survived, 2 timed out)
Mutation testing 26% (elapsed: ~1m, remaining: ~5m) 75/280 tested (32 survived, 2 timed out)
Mutation testing 28% (elapsed: ~2m, remaining: ~4m) 81/280 tested (36 survived, 2 timed out)
Mutation testing 31% (elapsed: ~2m, remaining: ~4m) 88/280 tested (40 survived, 2 timed out)
Mutation testing 34% (elapsed: ~2m, remaining: ~4m) 96/280 tested (43 survived, 2 timed out)
Mutation testing 37% (elapsed: ~2m, remaining: ~4m) 104/280 tested (47 survived, 2 timed out)
Mutation testing 38% (elapsed: ~2m, remaining: ~4m) 107/280 tested (48 survived, 2 timed out)
Mutation testing 39% (elapsed: ~2m, remaining: ~4m) 110/280 tested (48 survived, 3 timed out)
Mutation testing 40% (elapsed: ~3m, remaining: ~4m) 113/280 tested (48 survived, 5 timed out)
Mutation testing 41% (elapsed: ~3m, remaining: ~4m) 117/280 tested (51 survived, 5 timed out)
Mutation testing 43% (elapsed: ~3m, remaining: ~4m) 121/280 tested (54 survived, 6 timed out)
Mutation testing 45% (elapsed: ~3m, remaining: ~4m) 127/280 tested (57 survived, 6 timed out)
Mutation testing 46% (elapsed: ~3m, remaining: ~4m) 129/280 tested (58 survived, 7 timed out)
Mutation testing 47% (elapsed: ~3m, remaining: ~4m) 134/280 tested (63 survived, 7 timed out)
Mutation testing 48% (elapsed: ~4m, remaining: ~4m) 137/280 tested (64 survived, 8 timed out)
Mutation testing 50% (elapsed: ~4m, remaining: ~4m) 140/280 tested (64 survived, 9 timed out)
Mutation testing 51% (elapsed: ~4m, remaining: ~4m) 143/280 tested (64 survived, 10 timed out)
Mutation testing 52% (elapsed: ~4m, remaining: ~4m) 148/280 tested (67 survived, 10 timed out)
Mutation testing 53% (elapsed: ~4m, remaining: ~3m) 151/280 tested (68 survived, 11 timed out)
Mutation testing 56% (elapsed: ~4m, remaining: ~3m) 158/280 tested (68 survived, 12 timed out)
Mutation testing 57% (elapsed: ~5m, remaining: ~3m) 160/280 tested (68 survived, 13 timed out)
Mutation testing 61% (elapsed: ~5m, remaining: ~3m) 171/280 tested (68 survived, 14 timed out)
Mutation testing 62% (elapsed: ~5m, remaining: ~3m) 176/280 tested (70 survived, 14 timed out)
Mutation testing 65% (elapsed: ~5m, remaining: ~2m) 182/280 tested (70 survived, 15 timed out)
Mutation testing 65% (elapsed: ~5m, remaining: ~2m) 184/280 tested (70 survived, 16 timed out)
Mutation testing 68% (elapsed: ~5m, remaining: ~2m) 191/280 tested (74 survived, 16 timed out)
Mutation testing 70% (elapsed: ~6m, remaining: ~2m) 198/280 tested (76 survived, 16 timed out)
Mutation testing 72% (elapsed: ~6m, remaining: ~2m) 203/280 tested (76 survived, 16 timed out)
Mutation testing 73% (elapsed: ~6m, remaining: ~2m) 206/280 tested (76 survived, 17 timed out)
Mutation testing 74% (elapsed: ~6m, remaining: ~2m) 209/280 tested (78 survived, 18 timed out)
Mutation testing 75% (elapsed: ~6m, remaining: ~2m) 212/280 tested (78 survived, 18 timed out)
Mutation testing 77% (elapsed: ~6m, remaining: ~1m) 218/280 tested (78 survived, 19 timed out)
Mutation testing 81% (elapsed: ~7m, remaining: ~1m) 229/280 tested (79 survived, 19 timed out)
Mutation testing 84% (elapsed: ~7m, remaining: ~1m) 237/280 tested (80 survived, 19 timed out)
Mutation testing 88% (elapsed: ~7m, remaining: <1m) 247/280 tested (83 survived, 19 timed out)
Mutation testing 91% (elapsed: ~7m, remaining: <1m) 255/280 tested (87 survived, 19 timed out)
Mutation testing 93% (elapsed: ~7m, remaining: <1m) 262/280 tested (91 survived, 19 timed out)
Mutation testing 95% (elapsed: ~7m, remaining: <1m) 266/280 tested (92 survived, 20 timed out)
Mutation testing 97% (elapsed: ~8m, remaining: <1m) 273/280 tested (93 survived, 20 timed out)
Mutation testing 99% (elapsed: ~8m, remaining: <1m) 279/280 tested (96 survived, 20 timed out)

All tests
  ✓ All tests (killed 164)

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (done === null) {

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end && end !== false) {

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.error(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(doneLackingErr.message)

[Survived] PrecomputedMutator
sinks/drain.js:34:15
-                 read(abort || true, done || function () {})
+                 read(abort || false, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(abort && true, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:49:8
-       if('function' == typeof err)
+       if(err instanceof Function)

[Survived] PrecomputedMutator
sinks/drain.js:52:8
-       if(read) return read(abort, cb || function () {})
+       if(read(abort, cb || function () {})) return read(abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:26
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(null, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:33
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(abort, function () {})

[Survived] PrecomputedMutator
sinks/find.js:17:7
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:17:10
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:22:5
-       cb(err === true ? null : err, null)
+       cb(err === false ? null : err, null)

[Survived] PrecomputedMutator
sinks/find.js:22:8
-       cb(err === true ? null : err, null)
+       cb(err === false ? null : err, null)

[Survived] PrecomputedMutator
sinks/log.js:7:5
-       console.log(data)
+       console.error(data)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(data.toUpperCase())

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/reduce.js:10:5
-       cb(err, acc)
+       cb(err, acc, null)

[Survived] PrecomputedMutator
sinks/reduce.js:12:7
-     if (arguments.length === 2)
+     if (arguments.length < 2)

[Survived] PrecomputedMutator
sinks/reduce.js:16:12
-           if(end) return cb(end === true ? null : end)
+           if(end === true) return cb(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return null(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(end === false ? null : end)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end + 1)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i >= max)

[Survived] PrecomputedMutator
sources/count.js:9:8
-       cb(null, i++)
+       cb(undefined, i++)

[Survived] PrecomputedMutator
sources/infinite.js:6:12
-       return cb(null, generate())
+       return cb(undefined, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:15
-       return cb(null, generate())
+       return cb(undefined, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(1))

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, onAbort, abort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(_value, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, !abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort())

[Survived] PrecomputedMutator
sources/once.js:10:7
-         cb(null, _value)
+         cb(undefined, _value)

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb(undefined, _value)

[Survived] PrecomputedMutator
sources/values.js:5:6
-     if(!array)
+     if(array.length === 0)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(!abort) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(null, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort && onAbort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, onAbort())

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(false)

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(array.length - 1))

[Survived] PrecomputedMutator
sources/values.js:21:7
-         cb(null, array[i++])
+         cb(undefined, array[i++])

[Survived] PrecomputedMutator
sources/values.js:21:10
-         cb(null, array[i++])
+         cb(undefined, array[i++])

[Survived] PrecomputedMutator
throughs/async-map.js:7:6
-     if(!map) return id
+     if(map === null) return id

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(null)

[Survived] PrecomputedMutator
throughs/async-map.js:39:20
-                 else cb(null, data)
+                 else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/async-map.js:39:23
-                 else cb(null, data)
+                 else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, data)

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : loop = true(end, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(!end, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:51
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, null)

[Survived] PrecomputedMutator
throughs/flatten.js:13:11
-             read(err || abort, cb)
+             read(err && abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(err && abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:28:16
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/flatten.js:28:19
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(mapper === null) return id

[Survived] PrecomputedMutator
throughs/take.js:19:26
-           last = false; cb(err || true)
+           last = false; cb(err && true)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(!ended)

[Survived] PrecomputedMutator
throughs/take.js:28:14
-             if(ended = ended || end) {
+             if(ended = end) {

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(!ended)

[Survived] PrecomputedMutator
throughs/take.js:34:20
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(undefined, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:34:23
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(undefined, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:37:13
-               cb(null, data)
+               cb(undefined, data)

[Survived] PrecomputedMutator
throughs/take.js:37:16
-               cb(null, data)
+               cb(undefined, data)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort === false ? null : abort)

[Survived] PrecomputedMutator
throughs/through.js:15:10
-         if(end) once(end)
+         if(!end) once(end)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(null)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(null)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(null)

[Survived] PrecomputedMutator
throughs/unique.js:9:16
-     field = prop(field) || id
+     field = prop(field + 1) || id

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.test(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data[0]); return v && v[0] }

[Survived] PrecomputedMutator
util/tester.js:8:42
-       ? function (data) { return test.test(data) }
+       ? function (data) { return test.test(data.toUpperCase()) }

[Survived] PrecomputedMutator
pull.js:7:20
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i <= length; i++)

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (args === undefined) {

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[1])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read + 1, ref[0])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[1])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[4])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read + 1, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[1], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[2], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[3], ref[3])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[4])

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.pop(read)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(read.source)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(undefined, ref)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.call(null, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(undefined, ref)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref.slice())

[Survived] PrecomputedMutator
pull.js:38:19
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i <= length; i++) {

[Survived] PrecomputedMutator
pull.js:40:9
-       if (typeof s === 'function') {
+       if (s instanceof Function) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s && s.constructor === Object) {

[Survived] PrecomputedMutator
pull.js:43:7
-         s.sink(read)
+         s.source(read)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(read + 1)

Ran 0.93 tests per mutant on average.
----------------|---------|----------|-----------|------------|----------|----------|
File            | % score | # killed | # timeout | # survived | # no cov | # errors |
----------------|---------|----------|-----------|------------|----------|----------|
All files       |   65.71 |      164 |        20 |         96 |        0 |        0 |
 sinks          |   56.60 |       29 |         1 |         23 |        0 |        0 |
  collect.js    |  100.00 |        2 |         0 |          0 |        0 |        0 |
  drain.js      |   54.55 |       11 |         1 |         10 |        0 |        0 |
  find.js       |   66.67 |        8 |         0 |          4 |        0 |        0 |
  log.js        |    0.00 |        0 |         0 |          2 |        0 |        0 |
  on-end.js     |   33.33 |        1 |         0 |          2 |        0 |        0 |
  reduce.js     |   58.33 |        7 |         0 |          5 |        0 |        0 |
 sources        |   54.35 |       17 |         8 |         21 |        0 |        0 |
  count.js      |   57.14 |        4 |         0 |          3 |        0 |        0 |
  empty.js      |  100.00 |        1 |         1 |          0 |        0 |        0 |
  error.js      |  100.00 |        2 |         0 |          0 |        0 |        0 |
  infinite.js   |   50.00 |        1 |         2 |          3 |        0 |        0 |
  keys.js       |  100.00 |        1 |         0 |          0 |        0 |        0 |
  once.js       |   45.45 |        3 |         2 |          6 |        0 |        0 |
  values.js     |   47.06 |        5 |         3 |          9 |        0 |        0 |
 throughs       |   78.57 |       89 |        10 |         27 |        0 |        0 |
  async-map.js  |   86.67 |       22 |         4 |          4 |        0 |        0 |
  filter-not.js |  100.00 |        5 |         1 |          0 |        0 |        0 |
  filter.js     |   69.23 |        8 |         1 |          4 |        0 |        0 |
  flatten.js    |   83.33 |       17 |         3 |          4 |        0 |        0 |
  map.js        |   90.91 |       10 |         0 |          1 |        0 |        0 |
  non-unique.js |  100.00 |        4 |         0 |          0 |        0 |        0 |
  take.js       |   61.90 |       13 |         0 |          8 |        0 |        0 |
  through.js    |   61.54 |        7 |         1 |          5 |        0 |        0 |
  unique.js     |   75.00 |        3 |         0 |          1 |        0 |        0 |
 util           |   66.67 |        6 |         0 |          3 |        0 |        0 |
  abort-cb.js   |  100.00 |        3 |         0 |          0 |        0 |        0 |
  prop.js       |    0.00 |        0 |         0 |          2 |        0 |        0 |
  tester.js     |   75.00 |        3 |         0 |          1 |        0 |        0 |
 index.js       |  100.00 |        6 |         0 |          0 |        0 |        0 |
 pull.js        |   45.00 |       17 |         1 |         22 |        0 |        0 |
----------------|---------|----------|-----------|------------|----------|----------|
[32m20:22:31 (2712) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/reports/mutation/mutation.html
[32m20:22:31 (2712) INFO MutationTestExecutor[39m Done in 8 minutes 16 seconds.

real	8m17.982s
user	3m2.825s
sys	0m39.888s
