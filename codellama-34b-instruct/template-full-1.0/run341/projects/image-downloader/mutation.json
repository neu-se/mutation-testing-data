{"files":{"index.js":{"language":"javascript","mutants":[{"id":"2","mutatorName":"PrecomputedMutator","replacement":"options.url.length === 0","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✕ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (20 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✓ should succeed with HTTPS (12 ms)\n    ✓ should save image with the decoded filename (4 ms)\n    ✓ should save image with an another filename (7 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (14 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (2 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n  ● options › should failed with !options.url === true\n\n    TypeError: Cannot read properties of null (reading 'length')\n\n      52 |   ...options\n      53 | } = {}) => {\n    > 54 |   if (stryMutAct_9fa48(\"2\") ? options.url.length === 0 : stryMutAct_9fa48(\"1\") ? typeof options.url === 'undefined' : stryMutAct_9fa48(\"0\") ? options.url == null : (stryCov_9fa48(\"0\", \"1\", \"2\"), !options.url)) {\n         |                                           ^\n      55 |     return stryMutAct_9fa48(\"3\") ? Promise.resolve(new Error('The options.url is required')) : (stryCov_9fa48(\"3\"), Promise.reject(stryMutAct_9fa48(\"5\") ? new TypeError('The options.url is not a string') : stryMutAct_9fa48(\"4\") ? new Error('The options.url is invalid') : (stryCov_9fa48(\"4\", \"5\"), new Error('The options.url is required'))));\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n\n      at Object.length [as image] (index.js:54:43)\n      at Object.image (test/index.js:52:14)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |    90.8 |    51.78 |     100 |   90.47 |                   \n sandbox1646274     |   93.18 |    52.17 |     100 |   93.02 |                   \n  index.js          |   93.18 |    52.17 |     100 |   93.02 | 24,39,55          \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.854 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":19,"line":5},"start":{"column":7,"line":5}}},{"id":"1","mutatorName":"PrecomputedMutator","replacement":"typeof options.url === 'undefined'","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✕ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true (1 ms)\n  download an image\n    ✓ should save image with the original filename (14 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (12 ms)\n    ✓ should save image with the decoded filename (5 ms)\n    ✓ should save image with an another filename (4 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (1 ms)\n    ✓ should save image with a complex url params (5 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n  ● options › should failed with !options.url === true\n\n    TypeError: Invalid URL\n\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n    > 62 |       const url = new URL(options.url);\n         |                   ^\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n      65 |       const decodedBasename = (stryMutAct_9fa48(\"27\") ? decodeURI : (stryCov_9fa48(\"27\"), decodeURIComponent))(stryMutAct_9fa48(\"30\") ? path.dirname(pathname).split(path.sep).pop() : stryMutAct_9fa48(\"29\") ? path.basename(pathname).substring(1) : stryMutAct_9fa48(\"28\") ? basename.toLowerCase() : (stryCov_9fa48(\"28\", \"29\", \"30\"), basename));\n\n      at Object.<anonymous>.module.exports.image (index.js:62:19)\n      at Object.image (test/index.js:52:14)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    90.8 |    52.23 |     100 |   90.47 |                   \n sandbox1646274     |   93.18 |    52.79 |     100 |   93.02 |                   \n\n  index.js          |   93.18 |    52.79 |     100 |   93.02 | 24,39,55          \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.861 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":19,"line":5},"start":{"column":7,"line":5}}},{"id":"4","mutatorName":"PrecomputedMutator","replacement":"new Error('The options.url is invalid')","status":"Survived","testsCompleted":1,"location":{"end":{"column":67,"line":6},"start":{"column":27,"line":6}}},{"id":"0","mutatorName":"PrecomputedMutator","replacement":"options.url == null","status":"Survived","testsCompleted":1,"location":{"end":{"column":19,"line":5},"start":{"column":7,"line":5}}},{"id":"5","mutatorName":"PrecomputedMutator","replacement":"new TypeError('The options.url is not a string')","status":"Survived","testsCompleted":1,"location":{"end":{"column":67,"line":6},"start":{"column":27,"line":6}}},{"id":"3","mutatorName":"PrecomputedMutator","replacement":"Promise.resolve","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✕ should failed with !options.url === true (10 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout\n    ✓ should succeed with HTTPS (3 ms)\n    ✓ should save image with the decoded filename (2 ms)\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (5 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (8 ms)\n    ✓ #29 - 301 status code while downloading image (28 ms)\n\n  ● options › should failed with !options.url === true\n\n    Should throw an error\n\n      51 |   it('should failed with !options.url === true', (done) => {\n      52 |     download.image({ url: null, dest: '/tmp' })\n    > 53 |       .then(() => done(new Error('Should throw an error')))\n         |                        ^\n      54 |       .catch(() => done());\n      55 |   });\n      56 |\n\n      at test/index.js:53:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   91.95 |    53.57 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |    54.65 |     100 |   95.34 |                   \n  index.js          |   95.45 |    54.65 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.791 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":26,"line":6},"start":{"column":12,"line":6}}},{"id":"6","mutatorName":"PrecomputedMutator","replacement":"!options","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✕ should failed with !options.dest === true (1 ms)\n  download an image\n    ✓ should save image with the original filename (11 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (3 ms)\n    ✓ should save image with the decoded filename (2 ms)\n    ✓ should save image with an another filename (4 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (17 ms)\n\n  ● options › should failed with !options.dest === true\n\n    TypeError: The \"path\" argument must be of type string. Received null\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:58:14)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    90.8 |    52.23 |     100 |   90.47 |                   \n sandbox1646274     |   93.18 |    52.79 |     100 |   93.02 |                   \n\n  index.js          |   93.18 |    52.79 |     100 |   93.02 | 24,39,58          \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.788 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":9},"start":{"column":7,"line":9}}},{"id":"9","mutatorName":"PrecomputedMutator","replacement":"Promise.resolve","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true\n    ✕ should failed with !options.dest === true (6 ms)\n  download an image\n    ✓ should save image with the original filename (10 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (4 ms)\n    ✓ should save image with the decoded filename (5 ms)\n    ✓ should save image with an another filename (9 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (7 ms)\n    ✓ should failed with an error (3 ms)\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (5 ms)\n\n\n  ● options › should failed with !options.dest === true\n\n    Should throw an error\n\n      57 |   it('should failed with !options.dest === true', (done) => {\n      58 |     download.image({ url: 'http://someurl.com/image.jpg', dest: null })\n    > 59 |       .then(() => done(new Error('Should throw an error')))\n         |                        ^\n      60 |       .catch(() => done());\n      61 |   });\n      62 | })\n\n      at test/index.js:59:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    53.12 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    54.03 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    54.03 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.541 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":26,"line":10},"start":{"column":12,"line":10}}},{"id":"11","mutatorName":"PrecomputedMutator","replacement":"new Error(\"The options.dest is not a function\")","status":"Survived","testsCompleted":1,"location":{"end":{"column":68,"line":10},"start":{"column":27,"line":10}}},{"id":"13","mutatorName":"PrecomputedMutator","replacement":"extractFilename = false","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (13 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (1 ms)\n    ✓ should save image with an another filename (3 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (2 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (2 ms)\n    ✓ #29 - 301 status code while downloading image (5 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   85.05 |    42.41 |     100 |   84.52 |                   \n\n sandbox1646274     |   81.81 |    39.13 |     100 |   81.39 |                   \n\n  index.js          |   81.81 |    39.13 |     100 |   81.39 | 24,39,61-66       \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.524 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":13},"start":{"column":7,"line":13}}},{"id":"12","mutatorName":"PrecomputedMutator","replacement":"new Error(\"The options.dest is not a valid destination\")","status":"Survived","testsCompleted":1,"location":{"end":{"column":68,"line":10},"start":{"column":27,"line":10}}},{"id":"10","mutatorName":"PrecomputedMutator","replacement":"new Error(\"The options.dest is not a string\")","status":"Survived","testsCompleted":1,"location":{"end":{"column":68,"line":10},"start":{"column":27,"line":10}}},{"id":"7","mutatorName":"PrecomputedMutator","replacement":"!!options.dest","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.337 s)\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✕ should failed with !options.dest === true (1 ms)\n  download an image\n    ✕ should save image with the original filename\n    ✕ should failed with too short timeout (5001 ms)\n    ✕ should succeed with HTTPS\n    ✕ should save image with the decoded filename\n    ✕ should save image with an another filename\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension\n    ✓ should failed with an error (1 ms)\n    ✕ should save image with a complex url params\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n    ✕ #29 - 301 status code while downloading image\n\n  ● options › should failed with !options.dest === true\n\n    TypeError: The \"path\" argument must be of type string. Received null\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:58:14)\n\n  ● download an image › should save image with the original filename\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: Error\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !opti\nons : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\",\n \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   52.87 |       25 |   47.36 |   53.57 |                   \n sandbox1646274     |   77.27 |    30.43 |     100 |   76.74 |                   \n  index.js          |   77.27 |    30.43 |     100 |   76.74 | 24,39,62-72       \n sandbox1646274/lib |    27.9 |    11.11 |   16.66 |   29.26 |                   \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n\n  request.js        |   26.82 |    11.11 |   18.18 |    28.2 | 6,16-46,62-79     \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 2 passed, 12 total\nSnapshots:   0 total\nTime:        5.53 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":9},"start":{"column":7,"line":9}}},{"id":"8","mutatorName":"PrecomputedMutator","replacement":"Boolean(options.dest)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.37 s)\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✕ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (12 ms)\n    ✕ should failed with too short timeout (5003 ms)\n    ✕ should succeed with HTTPS (1 ms)\n    ✕ should save image with the decoded filename (1 ms)\n    ✕ should save image with an another filename\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (1 ms)\n    ✓ should failed with an error (1 ms)\n    ✕ should save image with a complex url params\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (5 ms)\n    ✕ #29 - 301 status code while downloading image\n\n  ● options › should failed with !options.dest === true\n\n    TypeError: The \"path\" argument must be of type string. Received null\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:58:14)\n\n  ● download an image › should save image with the original filename\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: Error\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutA\nct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src :\n (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    The options.dest is required\n\n      56 |   }\n      57 |   if (stryMutAct_9fa48(\"8\") ? Boolean(options.dest) : stryMutAct_9fa48(\"7\") ? !!options.dest : stryMutAct_9fa48(\"6\") ? !options : (stryCov_9fa48(\"6\", \"7\", \"8\"), !options.dest)) {\n    > 58 |     return stryMutAct_9fa48(\"9\") ? Promise.resolve(new Error('The options.dest is required')) : (stryCov_9fa48(\"9\"), Promise.reject(stryMutAct_9fa48(\"12\") ? new Error(\"The options.dest is not a valid destination\") : stryMutAct_9fa48(\"11\") ? new Error(\"The options.dest is not a function\") : stryMutAct_9fa48(\"10\") ? new Error(\"The options.dest is not a string\") : (stryCov_9fa48(\"10\", \"11\", \"12\"), new Error('The options.dest is required'))));\n         |                                                                                                                                                                                                                                                                                                                                                                                                               ^\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n      61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n\n      at Object.<anonymous>.module.exports.image (index.js:58:399)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   52.87 |    24.55 |   47.36 |   53.57 |                   \n\n sandbox1646274     |   77.27 |    29.81 |     100 |   76.74 |                   \n  index.js          |   77.27 |    29.81 |     100 |   76.74 | 24,39,62-72       \n sandbox1646274/lib |    27.9 |    11.11 |   16.66 |   29.26 |                   \n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n  request.js        |   26.82 |    11.11 |   18.18 |    28.2 | 6,16-46,62-79     \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 2 passed, 12 total\nSnapshots:   0 total\nTime:        5.626 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":9},"start":{"column":7,"line":9}}},{"id":"20","mutatorName":"PrecomputedMutator","replacement":"path.dirname","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (6 ms)\n    ✓ should failed with too short timeout (3 ms)\n    ✕ should succeed with HTTPS (3 ms)\n    ✕ should save image with the decoded filename (4 ms)\n    ✓ should save image with an another filename (10 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (10 ms)\n\n    ✓ should failed with an error (1 ms)\n\n    ✕ should save image with a complex url params (5 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (3 ms)\n    ✓ #29 - 301 status code while downloading image (8 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    86.2 |    45.08 |     100 |   85.71 |                   \n\n sandbox1646274     |   84.09 |    42.85 |     100 |   83.72 |                   \n\n  index.js          |   84.09 |    42.85 |     100 |   83.72 | 24,39,62-66       \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.596 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":14},"start":{"column":10,"line":14}}},{"id":"17","mutatorName":"PrecomputedMutator","replacement":"!path.extname(options.dest) in ['', '.']","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (2 ms)\n    ✓ should save image with an another filename (6 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (3 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (7 ms)\n    ✓ #29 - 301 status code while downloading image (10 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |    86.2 |    44.19 |     100 |   85.71 |                   \n sandbox1646274     |   84.09 |    41.61 |     100 |   83.72 |                   \n  index.js          |   84.09 |    41.61 |     100 |   83.72 | 24,39,62-66       \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.548 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}}},{"id":"14","mutatorName":"PrecomputedMutator","replacement":"!extractFilename","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (3 ms)\n    ✕ should save image with the decoded filename (3 ms)\n    ✓ should save image with an another filename (5 ms)\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (5 ms)\n    ✕ should save image with a complex url params (5 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (11 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    ENOTDIR: not a directory, open '/tmp/image-newname/image-success.jpg'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    53.57 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    54.65 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    54.65 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       5 failed, 7 passed, 12 total\nSnapshots:   0 total\nTime:        0.626 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":13},"start":{"column":7,"line":13}}},{"id":"15","mutatorName":"PrecomputedMutator","replacement":"typeof extractFilename === \"undefined\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (3 ms)\n    ✓ should failed with !options.dest === true (1 ms)\n  download an image\n    ✕ should save image with the original filename (15 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (1 ms)\n    ✕ should save image with the decoded filename (3 ms)\n    ✓ should save image with an another filename (5 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (8 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (7 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (13 ms)\n    ✓ #29 - 301 status code while downloading image (114 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   85.05 |    41.51 |     100 |   84.52 |                   \n\n sandbox1646274     |   81.81 |    37.88 |     100 |   81.39 |                   \n\n  index.js          |   81.81 |    37.88 |     100 |   81.39 | 24,39,61-66       \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.678 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":13},"start":{"column":7,"line":13}}},{"id":"19","mutatorName":"PrecomputedMutator","replacement":"path.basename","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (8 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✕ should succeed with HTTPS (14 ms)\n    ✕ should save image with the decoded filename (12 ms)\n    ✓ should save image with an another filename (90 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (12 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (3 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (3 ms)\n    ✓ #29 - 301 status code while downloading image (8 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |    86.2 |    45.53 |     100 |   85.71 |                   \n sandbox1646274     |   84.09 |    43.47 |     100 |   83.72 |                   \n  index.js          |   84.09 |    43.47 |     100 |   83.72 | 24,39,62-66       \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.681 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":14},"start":{"column":10,"line":14}}},{"id":"18","mutatorName":"PrecomputedMutator","replacement":"path.extname(options.dest).length === 0","status":"Survived","testsCompleted":1,"location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}}},{"id":"16","mutatorName":"PrecomputedMutator","replacement":"path.extname(options.dest) === ''","status":"Survived","testsCompleted":1,"location":{"end":{"column":36,"line":14},"start":{"column":9,"line":14}}},{"id":"22","mutatorName":"PrecomputedMutator","replacement":"options.dest.filename","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename\n    ✕ should failed with too short timeout\n    ✕ should succeed with HTTPS\n\n    ✕ should save image with the decoded filename\n\n    ✕ should save image with an another filename\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (12 ms)\n    ✕ should failed with an error (1 ms)\n    ✕ should save image with a complex url params\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n\n    ✕ #29 - 301 status code while downloading image\n\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:73:14)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? option\ns.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should failed with an error\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:116:14)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js\n:61:383)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|---------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   \n--------------------|---------|----------|---------|---------|---------------------\n\nAll files           |   79.31 |    38.39 |   89.47 |   78.57 |                     \n sandbox1646274     |   81.81 |    37.26 |     100 |   81.39 |                     \n  index.js          |   81.81 |    37.26 |     100 |   81.39 | 24,39,62-66,70      \n sandbox1646274/lib |   76.74 |    41.26 |   83.33 |    75.6 |                     \n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                   \n  request.js        |   78.04 |    41.26 |    90.9 |   76.92 | 6,24,38-41,67-69,79 \n--------------------|---------|----------|---------|---------|---------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        0.651 s, estimated 1 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":14},"start":{"column":23,"line":14}}},{"id":"21","mutatorName":"PrecomputedMutator","replacement":"options.src","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename\n    ✕ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS\n    ✕ should save image with the decoded filename\n\n    ✕ should save image with an another filename\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (9 ms)\n    ✕ should failed with an error\n    ✕ should save image with a complex url params\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n\n    ✕ #29 - 301 status code while downloading image\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:73:14)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? option\ns.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should failed with an error\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:116:14)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js:61:383)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    TypeError: The \"path\" argument must be of type string. Received undefined\n\n      59 |   }\n      60 |   if (stryMutAct_9fa48(\"15\") ? typeof extractFilename === \"undefined\" : stryMutAct_9fa48(\"14\") ? !extractFilename : stryMutAct_9fa48(\"13\") ? extractFilename = false : (stryCov_9fa48(\"13\", \"14\", \"15\"), extractFilename)) {\n    > 61 |     if (stryMutAct_9fa48(\"18\") ? path.extname(options.dest).length === 0 : stryMutAct_9fa48(\"17\") ? !path.extname(options.dest) in ['', '.'] : stryMutAct_9fa48(\"16\") ? path.extname(options.dest) === '' : (stryCov_9fa48(\"16\", \"17\", \"18\"), !(stryMutAct_9fa48(\"20\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"19\") ? path.basename(options.dest) : (stryCov_9fa48(\"19\", \"20\"), path.extname(stryMutAct_9fa48(\"23\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"22\") ? options.dest.filename : stryMutAct_9fa48(\"21\") ? options.src : (stryCov_9fa48(\"21\", \"22\", \"23\"), options.dest)))))) {\n         |                                                                                                                                                                                                                                                                                                                                                                                               ^\n      62 |       const url = new URL(options.url);\n      63 |       const pathname = url.pathname;\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n\n      at Object.extname [as image] (index.js\n:61:383)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|---------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   \n\n--------------------|---------|----------|---------|---------|---------------------\n\nAll files           |   79.31 |    38.83 |   89.47 |   78.57 |                     \n\n sandbox1646274     |   81.81 |    37.88 |     100 |   81.39 |                     \n\n  index.js          |   81.81 |    37.88 |     100 |   81.39 | 24,39,62-66,70      \n\n sandbox1646274/lib |   76.74 |    41.26 |   83.33 |    75.6 |                     \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                   \n\n  request.js        |   78.04 |    41.26 |    90.9 |   76.92 | 6,24,38-41,67-69,79 \n\n--------------------|---------|----------|---------|---------|---------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        0.618 s, estimated 1 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":14},"start":{"column":23,"line":14}}},{"id":"24","mutatorName":"PrecomputedMutator","replacement":"pathname.substr(1)","status":"Survived","testsCompleted":1,"location":{"end":{"column":46,"line":17},"start":{"column":38,"line":17}}},{"id":"25","mutatorName":"PrecomputedMutator","replacement":"pathname.toUpperCase()","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (27 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (3 ms)\n\n    ✕ should save image with the decoded filename (4 ms)\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (6 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (6 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (3 ms)\n    ✓ #29 - 301 status code while downloading image (4 ms)\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/IMAGE SUCCESS.PNG\"\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/IMAGE SUCCESS.PNG\"\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n  ● download an image › should save image with the decoded filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-success.png\"\n    Received: \"/tmp/IMAGE-SUCCESS.PNG\"\n\n      88 |   it('should save image with the decoded filename', () => {\n      89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 90 |       expect(filename).toEqual('/tmp/image-success.png');\n         |                        ^\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      92 |     });\n      93 |   });\n\n      at toEqual (test/index.js:90:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.01 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |    55.27 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    55.27 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 9 passed, 12 total\nSnapshots:   0 total\nTime:        0.54 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":46,"line":17},"start":{"column":38,"line":17}}},{"id":"26","mutatorName":"PrecomputedMutator","replacement":"pathname.split('/').pop()","status":"Survived","testsCompleted":1,"location":{"end":{"column":46,"line":17},"start":{"column":38,"line":17}}},{"id":"23","mutatorName":"PrecomputedMutator","replacement":"path.dirname(options.dest)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (8 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (4 ms)\n    ✓ should save image with the decoded filename (4 ms)\n    ✕ should save image with an another filename (1 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (33 ms)\n    ✕ #29 - 301 status code while downloading image (92 ms)\n\n  ● download an image › should save image with an another filename\n\n    ENOTDIR: not a directory, open '/tmp/image-newname.jpg/image-success.jpg'\n\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    ENOTDIR: not a directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/test/fixtures/someurl.com/image-success.png'\n\n\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    ENOTDIR: not a directory, open '/tmp/SteelCutOats1.jpg/SteelCutOats1.jpg'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    53.12 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    54.03 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    54.03 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 9 passed, 12 total\nSnapshots:   0 total\nTime:        0.633 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":35,"line":14},"start":{"column":23,"line":14}}},{"id":"27","mutatorName":"PrecomputedMutator","replacement":"decodeURI","status":"Survived","testsCompleted":1,"location":{"end":{"column":49,"line":18},"start":{"column":31,"line":18}}},{"id":"28","mutatorName":"PrecomputedMutator","replacement":"basename.toLowerCase()","status":"Survived","testsCompleted":1,"location":{"end":{"column":58,"line":18},"start":{"column":50,"line":18}}},{"id":"29","mutatorName":"PrecomputedMutator","replacement":"path.basename(pathname).substring(1)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout\n    ✕ should succeed with HTTPS (4 ms)\n\n    ✕ should save image with the decoded filename (6 ms)\n\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (7 ms)\n\n    ✓ should failed with an error (3 ms)\n    ✓ should save image with a complex url params (6 ms)\n\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/mage success.png\"\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/mage success.png\"\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n  ● download an image › should save image with the decoded filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-success.png\"\n    Received: \"/tmp/mage-success.png\"\n\n      88 |   it('should save image with the decoded filename', () => {\n      89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 90 |       expect(filename).toEqual('/tmp/image-success.png');\n         |                        ^\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      92 |     });\n      93 |   });\n\n      at toEqual (test/index.js:90:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.01 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    55.27 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    55.27 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 9 passed, 12 total\nSnapshots:   0 total\nTime:        0.263 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":58,"line":18},"start":{"column":50,"line":18}}},{"id":"34","mutatorName":"PrecomputedMutator","replacement":"path.dirname","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (6 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (2 ms)\n    ✓ should save image with an another filename (3 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (2 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (3 ms)\n    ✓ #29 - 301 status code while downloading image (10 ms)\n\n  ● download an image › should save image with the original filename\n\n    EEXIST: file already exists, open '/'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EEXIST: file already exists, open '/'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EEXIST: file already exists, open '/'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EEXIST: file already exists, open '/'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   91.95 |    51.78 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |    52.17 |     100 |   95.34 |                   \n  index.js          |   95.45 |    52.17 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.481 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":20},"start":{"column":22,"line":20}}},{"id":"30","mutatorName":"PrecomputedMutator","replacement":"path.dirname(pathname).split(path.sep).pop()","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (2 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (7 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (1 ms)\n    ✓ should save image with an another filename (6 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n\n    ✓ should failed with an error (1 ms)\n\n    ✕ should save image with a complex url params (2 ms)\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (4 ms)\n\n  ● download an image › should save image with the original filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    EISDIR: illegal operation on a directory, open '/tmp'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    53.57 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    54.65 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    54.65 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.522 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":58,"line":18},"start":{"column":50,"line":18}}},{"id":"33","mutatorName":"PrecomputedMutator","replacement":"path.join(options.dest, url.pathname)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n\n  download an image\n\n    ✕ should save image with the original filename (9 ms)\n\n    ✓ should failed with too short timeout (1 ms)\n\n    ✕ should succeed with HTTPS (3 ms)\n\n    ✓ should save image with the decoded filename (7 ms)\n\n    ✓ should save image with an another filename (6 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (17 ms)\n\n    ✓ should failed with an error (7 ms)\n\n    ✓ should save image with a complex url params (23 ms)\n\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (8 ms)\n\n    ✓ #29 - 301 status code while downloading image (61 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/image%20success.png\"\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/image%20success.png\"\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    52.23 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |    52.79 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    52.79 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 10 passed, 12 total\nSnapshots:   0 total\nTime:        0.513 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":20},"start":{"column":22,"line":20}}},{"id":"32","mutatorName":"PrecomputedMutator","replacement":"path.join(options.dest, pathname)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename (31 ms)\n    ✓ should failed with too short timeout (7 ms)\n    ✕ should succeed with HTTPS (34 ms)\n\n    ✓ should save image with the decoded filename (2 ms)\n\n    ✓ should save image with an another filename (11 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (6 ms)\n    ✓ #29 - 301 status code while downloading image (15 ms)\n\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/image%20success.png\"\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/image%20success.png\"\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    52.67 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    53.41 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    53.41 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 10 passed, 12 total\nSnapshots:   0 total\nTime:        0.485 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":20},"start":{"column":22,"line":20}}},{"id":"31","mutatorName":"PrecomputedMutator","replacement":"path.join(options.dest, basename)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (34 ms)\n    ✓ should failed with too short timeout (32 ms)\n    ✕ should succeed with HTTPS (8 ms)\n    ✓ should save image with the decoded filename (8 ms)\n    ✓ should save image with an another filename (3 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (6 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/image%20success.png\"\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/tmp/image%20success.png\"\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    53.12 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    54.03 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    54.03 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       2 failed, 10 passed, 12 total\nSnapshots:   0 total\nTime:        0.452 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":20},"start":{"column":22,"line":20}}},{"id":"35","mutatorName":"PrecomputedMutator","replacement":"path.basename","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true (1 ms)\n  download an image\n    ✕ should save image with the original filename (8 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (3 ms)\n\n    ✕ should save image with the decoded filename (4 ms)\n\n    ✓ should save image with an another filename (3 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (5 ms)\n\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/tmp\"\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/tmp\"\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n  ● download an image › should save image with the decoded filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-success.png\"\n    Received: \"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/tmp\"\n\n      88 |   it('should save image with the decoded filename', () => {\n      89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 90 |       expect(filename).toEqual('/tmp/image-success.png');\n         |                        ^\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      92 |     });\n      93 |   });\n\n      at toEqual (test/index.js:90:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    51.33 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    51.55 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    51.55 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       3 failed, 9 passed, 12 total\nSnapshots:   0 total\nTime:        0.279 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":20},"start":{"column":22,"line":20}}},{"id":"36","mutatorName":"PrecomputedMutator","replacement":"path.relative","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (6 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (1 ms)\n    ✕ should save image with the decoded filename (2 ms)\n    ✓ should save image with an another filename (3 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (1 ms)\n    ✕ should save image with a complex url params (2 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (5 ms)\n\n  ● download an image › should save image with the original filename\n\n    ENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/image success.png'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    ENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/image success.png'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    ENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/image-success.png'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    ENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/success-image-with-complex-params.jpg'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    50.89 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    50.93 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    50.93 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.257 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":20},"start":{"column":22,"line":20}}},{"id":"38","mutatorName":"PrecomputedMutator","replacement":"options.dest - 1","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✕ should save image with the original filename\n    ✕ should failed with too short timeout\n\n    ✕ should succeed with HTTPS\n\n    ✕ should save image with the decoded filename\n\n    ✓ should save image with an another filename (12 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (11 ms)\n\n    ✕ should failed with an error\n\n    ✕ should save image with a complex url params\n\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n\n    ✓ #29 - 301 status code while downloading image (16 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: The \"path\" argument must be of type string. Received type number (NaN)\n\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n      65 |       const decodedBasename = (stryMutAct_9fa48(\"27\") ? decodeURI : (stryCov_9fa48(\"27\"), decodeURIComponent))(stryMutAct_9fa48(\"30\") ? path.dirname(pathname).split(path.sep).pop() : stryMutAct_9fa48(\"29\") ? path.basename(pathname).substring(1) : stryMutAct_9fa48(\"28\") ? basename.toLowerCase() : (stryCov_9fa48(\"28\", \"29\", \"30\"), basename));\n    > 66 |       options.dest = stryMutAct_9fa48(\"36\") ? path.relative(options.dest, decodedBasename) : stryMutAct_9fa48(\"35\") ? path.basename(options.dest, decodedBasename) : stryMutAct_9fa48(\"34\") ? path.dirname(options.dest, decodedBasename) : stryMutAct_9fa48(\"33\") ? path.join(options.dest, url.pathname) : stryMutAct_9fa48(\"32\") ? path.join(options.dest, pathname) : stryMutAct_9fa48(\"31\") ? path.join(options.dest, basename) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), path.join(stryMutAct_9fa48(\"39\") ? options.dest.replace('foo', 'bar') : stryMutAct_9fa48(\"38\") ? options.dest - 1 : stryMutAct_9fa48(\"37\") ? options.dest + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), options.dest), decodedBasename));\n         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^\n      67 |     }\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n\n      at Object.join [as image] (index.js:66:481)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    TypeError: The \"path\" argument must be of type string. Received type number (NaN)\n\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n      65 |       const decodedBasename = (stryMutAct_9fa48(\"27\") ? decodeURI : (stryCov_9fa48(\"27\"), decodeURIComponent))(stryMutAct_9fa48(\"30\") ? path.dirname(pathname).split(path.sep).pop() : stryMutAct_9fa48(\"29\") ? path.basename(pathname).substring(1) : stryMutAct_9fa48(\"28\") ? basename.toLowerCase() : (stryCov_9fa48(\"28\", \"29\", \"30\"), basename));\n    > 66 |       options.dest = stryMutAct_9fa48(\"36\") ? path.relative(options.dest, decodedBasename) : stryMutAct_9fa48(\"35\") ? path.basename(options.dest, decodedBasename) : stryMutAct_9fa48(\"34\") ? path.dirname(options.dest, decodedBasename) : stryMutAct_9fa48(\"33\") ? path.join(options.dest, url.pathname) : stryMutAct_9fa48(\"32\") ? path.join(options.dest, pathname) : stryMutAct_9fa48(\"31\") ? path.join(options.dest, basename) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), path.join(stryMutAct_9fa48(\"39\") ? options.dest.replace('foo', 'bar') : stryMutAct_9fa48(\"38\") ? options.dest - 1 : stryMutAct_9fa48(\"37\") ? options.dest + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), options.dest), decodedBasename));\n         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^\n      67 |     }\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n\n      at Object.join [as image] (index.js:66:481)\n      at Object.image (test/index.js:73:14)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: The \"path\" argument must be of type string. Received type number (NaN)\n\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n      65 |       const decodedBasename = (stryMutAct_9fa48(\"27\") ? decodeURI : (stryCov_9fa48(\"27\"), decodeURIComponent))(stryMutAct_9fa48(\"30\") ? path.dirname(pathname).split(path.sep).pop() : stryMutAct_9fa48(\"29\") ? path.basename(pathname).substring(1) : stryMutAct_9fa48(\"28\") ? basename.toLowerCase() : (stryCov_9fa48(\"28\", \"29\", \"30\"), basename));\n    > 66 |       options.dest = stryMutAct_9fa48(\"36\") ? path.relative(options.dest, decodedBasename) : stryMutAct_9fa48(\"35\") ? path.basename(options.dest, decodedBasename) : stryMutAct_9fa48(\"34\") ? path.dirname(options.dest, decodedBasename) : stryMutAct_9fa48(\"33\") ? path.join(options.dest, url.pathname) : stryMutAct_9fa48(\"32\") ? path.join(options.dest, pathname) : stryMutAct_9fa48(\"31\") ? path.join(options.dest, basename) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), path.join(stryMutAct_9fa48(\"39\") ? options.dest.replace('foo', 'bar') : stryMutAct_9fa48(\"38\") ? options.dest - 1 : stryMutAct_9fa48(\"37\") ? options.dest + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), options.dest), decodedBasename));\n         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^\n      67 |     }\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n\n      at Object.join [as image] (index.js:66:481)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: The \"path\" argument must be of type string. Received type number (NaN)\n\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.subst\nr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n      65 |       const decodedBasename = (stryMutAct_9fa48(\"27\") ? decodeURI : (stryCov_9fa48(\"27\"), decodeURIComponent))(stryMutAct_9fa48(\"30\") ? path.dirname(pathname).split(path.sep).pop() : stryMutAct_9fa48(\"29\") ? path.basename(pathname).substring(1) : stryMutAct_9fa48(\"28\") ? basename.toLowerCase() : (stryCov_9fa48(\"28\", \"29\", \"30\"), basename));\n    > 66 |       options.dest = stryMutAct_9fa48(\"36\") ? path.relative(options.dest, decodedBasename) : stryMutAct_9fa48(\"35\") ? path.basename(options.dest, decodedBasename) : stryMutAct_9fa48(\"34\") ? path.dirname(options.dest, decodedBasename) : stryMutAct_9fa48(\"33\") ? path.join(options.dest, url.pathname) : stryMutAct_9fa48(\"32\") ? path.join(options.dest, pathname) : stryMutAct_9fa48(\"31\") ? path.join(options.dest, basename) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), path.join(stryMutAct_9fa48(\"39\") ? options.dest.replace('foo', 'bar') : stryMutAct_9fa48(\"38\") ? options.dest - 1 : stryMutAct_9fa48(\"37\") ? options.dest + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), options.dest), decodedBasename));\n         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^\n      67 |     }\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n\n      at Object.join [as image] (index.js:66:481)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should failed with an error\n\n    TypeError: The \"path\" argument must be of type string. Received type number (NaN)\n\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n      65 |       const decodedBasename = (stryMutAct_9fa48(\"27\") ? decodeURI : (stryCov_9fa48(\"27\"), decodeURIComponent))(stryMutAct_9fa48(\"30\") ? path.dirname(pathname).split(path.sep).pop() : stryMutAct_9fa48(\"29\") ? path.basename(pathname).substring(1) : stryMutAct_9fa48(\"28\") ? basename.toLowerCase() : (stryCov_9fa48(\"28\", \"29\", \"30\"), basename));\n    > 66 |       options.dest = stryMutAct_9fa48(\"36\") ? path.relative(options.dest, decodedBasename) : stryMutAct_9fa48(\"35\") ? path.basename(options.dest, decodedBasename) : stryMutAct_9fa48(\"34\") ? path.dirname(options.dest, decodedBasename) : stryMutAct_9fa48(\"33\") ? path.join(options.dest, url.pathname) : stryMutAct_9fa48(\"32\") ? path.join(options.dest, pathname) : stryMutAct_9fa48(\"31\") ? path.join(options.dest, basename) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), path.join(stryMutAct_9fa48(\"39\") ? options.dest.replace('foo', 'bar') : stryMutAct_9fa48(\"38\") ? options.dest - 1 : stryMutAct_9fa48(\"37\") ? options.dest + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), options.dest), decodedBasename));\n         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^\n      67 |     }\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n\n      at Object.join [as image] (index.js:66:481)\n      at Object.image (test/index.js:116:14)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: The \"path\" argument must be of type string. Received type number (NaN)\n\n      64 |       const basename = path.basename(stryMutAct_9fa48(\"26\") ? pathname.split('/').pop() : stryMutAct_9fa48(\"25\") ? pathname.toUpperCase() : stryMutAct_9fa48(\"24\") ? pathname.substr(1) : (stryCov_9fa48(\"24\", \"25\", \"26\"), pathname));\n      65 |       const decodedBasename = (stryMutAct_9fa48(\"27\") ? decodeURI : (stryCov_9fa48(\"27\"), decodeURIComponent))(stryMutAct_9fa48(\"30\") ? path.dirname(pathname).split(path.sep).pop() : stryMutAct_9fa48(\"29\") ? path.basename(pathname).substring(1) : stryMutAct_9fa48(\"28\") ? basename.toLowerCase() : (stryCov_9fa48(\"28\", \"29\", \"30\"), basename));\n    > 66 |       options.dest = stryMutAct_9fa48(\"36\") ? path.relative(options.dest, decodedBasename) : stryMutAct_9fa48(\"35\") ? path.basename(options.dest, decodedBasename) : stryMutAct_9fa48(\"34\") ? path.dirname(options.dest, decodedBasename) : stryMutAct_9fa48(\"33\") ? path.join(options.dest, url.pathname) : stryMutAct_9fa48(\"32\") ? path.join(options.dest, pathname) : stryMutAct_9fa48(\"31\") ? path.join(options.dest, basename) : (stryCov_9fa48(\"31\", \"32\", \"33\", \"34\", \"35\", \"36\"), path.join(stryMutAct_9fa48(\"39\") ? options.dest.replace('foo', 'bar') : stryMutAct_9fa48(\"38\") ? options.dest - 1 : stryMutAct_9fa48(\"37\") ? options.dest + 'foo' : (stryCov_9fa48(\"37\", \"38\", \"39\"), options.dest), decodedBasename));\n         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^\n      67 |     }\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n\n      at Object.join [as image] (index.js:66:481)\n      at Object.image (test/index.js:130:21)\n\n\n--------------------|---------|----------|---------|---------|---------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   \n\n--------------------|---------|----------|---------|---------|---------------------\n\nAll files           |    86.2 |    51.33 |   89.47 |   85.71 |                     \n\n sandbox1646274     |   95.45 |    55.27 |     100 |   95.34 |                     \n\n  index.js          |   95.45 |    55.27 |     100 |   95.34 | 24,39               \n\n sandbox1646274/lib |   76.74 |    41.26 |   83.33 |    75.6 |                     \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                   \n\n  request.js        |   78.04 |    41.26 |    90.9 |   76.92 | 6,24,38-41,67-69,79 \n\n--------------------|---------|----------|---------|---------|---------------------\n\nTest Suites: 1 failed, 1 total\nTests:       6 failed, 6 passed, 12 total\nSnapshots:   0 total\nTime:        0.4 s, estimated 1 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":44,"line":20},"start":{"column":32,"line":20}}},{"id":"37","mutatorName":"PrecomputedMutator","replacement":"options.dest + 'foo'","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (6 ms)\n    ✓ should failed with too short timeout (3 ms)\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (2 ms)\n    ✓ should save image with an another filename (11 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (10 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (1 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (15 ms)\n\n  ● download an image › should save image with the original filename\n\n    ENOENT: no such file or directory, open '/tmpfoo/image success.png'\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    ENOENT: no such file or directory, open '/tmpfoo/image success.png'\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    ENOENT: no such file or directory, open '/tmpfoo/image-success.png'\n\n\n\n  ● download an image › should save image with a complex url params\n\n    ENOENT: no such file or directory, open '/tmpfoo/success-image-with-complex-params.jpg'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   91.95 |    54.46 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |     55.9 |     100 |   95.34 |                   \n  index.js          |   95.45 |     55.9 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       4 failed, 8 passed, 12 total\nSnapshots:   0 total\nTime:        0.346 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":44,"line":20},"start":{"column":32,"line":20}}},{"id":"39","mutatorName":"PrecomputedMutator","replacement":"options.dest.replace('foo', 'bar')","status":"Survived","testsCompleted":1,"location":{"end":{"column":44,"line":20},"start":{"column":32,"line":20}}},{"id":"40","mutatorName":"PrecomputedMutator","replacement":"path.isAbsolute(options.dest)","status":"Survived","testsCompleted":1,"location":{"end":{"column":37,"line":24},"start":{"column":7,"line":24}}},{"id":"41","mutatorName":"PrecomputedMutator","replacement":"!path.isAbsolute(options.dest) && !path.isAbsolute(options.dest)","status":"Survived","testsCompleted":1,"location":{"end":{"column":37,"line":24},"start":{"column":7,"line":24}}},{"id":"42","mutatorName":"PrecomputedMutator","replacement":"!path.isAbsolute(options.dest) && path.isAbsolute(options.dest)","status":"Survived","testsCompleted":1,"location":{"end":{"column":37,"line":24},"start":{"column":7,"line":24}}},{"id":"43","mutatorName":"PrecomputedMutator","replacement":"path.basename","status":"Survived","testsCompleted":1,"location":{"end":{"column":23,"line":24},"start":{"column":8,"line":24}}},{"id":"44","mutatorName":"PrecomputedMutator","replacement":"path.dirname","status":"Survived","testsCompleted":1,"location":{"end":{"column":23,"line":24},"start":{"column":8,"line":24}}},{"id":"45","mutatorName":"PrecomputedMutator","replacement":"path.extname","status":"Survived","testsCompleted":1,"location":{"end":{"column":23,"line":24},"start":{"column":8,"line":24}}},{"id":"46","mutatorName":"PrecomputedMutator","replacement":"path.resolve((__dirname, options.dest).ALTText)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✓ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (2 ms)\n\n    ✓ should save image with the decoded filename (4 ms)\n\n    ✓ should save image with an another filename (3 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (1 ms)\n\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot\n    ✓ #29 - 301 status code while downloading image (4 ms)\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: The \"paths[0]\" argument must be of type string. Received undefined\n\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n    > 70 |     options.dest = stryMutAct_9fa48(\"49\") ? path.parse(__dirname, options.dest) : stryMutAct_9fa48(\"48\") ? path.resolve((options.dest, __dirname).extname) : stryMutAct_9fa48(\"47\") ? path.resolve((options.dest, __dirname).join('path', 'to', 'file.txt')) : stryMutAct_9fa48(\"46\") ? path.resolve((__dirname, options.dest).ALTText) : (stryCov_9fa48(\"46\", \"47\", \"48\", \"49\"), path.resolve(stryMutAct_9fa48(\"52\") ? __dirname + \"/\" : stryMutAct_9fa48(\"51\") ? __dirname + \"./\" : stryMutAct_9fa48(\"50\") ? __dirname + \"..\" : (stryCov_9fa48(\"50\", \"51\", \"52\"), __dirname), stryMutAct_9fa48(\"55\") ? path.basename(options.dest) : stryMutAct_9fa48(\"54\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"53\") ? \"some/other/directory\" : (stryCov_9fa48(\"53\", \"54\", \"55\"), options.dest)));\n         |                                                                                                                                                                                                                                                                                              ^\n      71 |   }\n      72 |   return request(stryMutAct_9fa48(\"58\") ? options.url = new URL(options.url).href : stryMutAct_9fa48(\"57\") ? options.dest = path.resolve(__dirname, options.dest) + \"/foo\" : stryMutAct_9fa48(\"56\") ? options.url : (stryCov_9fa48(\"56\", \"57\", \"58\"), options));\n      73 | };\n\n      at Object.resolve [as image] (index.js:70:286)\n      at Object.image (test/index.js:139:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    51.78 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    52.17 |     100 |   95.34 |                   \n  index.js          |   95.45 |    52.17 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.298 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":57,"line":25},"start":{"column":20,"line":25}}},{"id":"47","mutatorName":"PrecomputedMutator","replacement":"path.resolve((options.dest, __dirname).join('path', 'to', 'file.txt'))","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (10 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (4 ms)\n    ✓ should save image with the decoded filename (3 ms)\n    ✓ should save image with an another filename (31 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (6 ms)\n    ✓ should failed with an error (1 ms)\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: (options.dest , __dirname).join is not a function\n\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n    > 70 |     options.dest = stryMutAct_9fa48(\"49\") ? path.parse(__dirname, options.dest) : stryMutAct_9fa48(\"48\") ? path.resolve((options.dest, __dirname).extname) : stryMutAct_9fa48(\"47\") ? path.resolve((options.dest, __dirname).join('path', 'to', 'file.txt')) : stryMutAct_9fa48(\"46\") ? path.resolve((__dirname, options.dest).ALTText) : (stryCov_9fa48(\"46\", \"47\", \"48\", \"49\"), path.resolve(stryMutAct_9fa48(\"52\") ? __dirname + \"/\" : stryMutAct_9fa48(\"51\") ? __dirname + \"./\" : stryMutAct_9fa48(\"50\") ? __dirname + \"..\" : (stryCov_9fa48(\"50\", \"51\", \"52\"), __dirname), stryMutAct_9fa48(\"55\") ? path.basename(options.dest) : stryMutAct_9fa48(\"54\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"53\") ? \"some/other/directory\" : (stryCov_9fa48(\"53\", \"54\", \"55\"), options.dest)));\n         |                                                                                                                                                                                                                              ^\n      71 |   }\n      72 |   return request(stryMutAct_9fa48(\"58\") ? options.url = new URL(options.url).href : stryMutAct_9fa48(\"57\") ? options.dest = path.resolve(__dirname, options.dest) + \"/foo\" : stryMutAct_9fa48(\"56\") ? options.url : (stryCov_9fa48(\"56\", \"57\", \"58\"), options));\n      73 | };\n\n      at Object.join [as image] (index.js:70:222)\n      at Object.image (test/index.js:139:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    51.33 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |    51.55 |     100 |   95.34 |                   \n  index.js          |   95.45 |    51.55 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.414 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":57,"line":25},"start":{"column":20,"line":25}}},{"id":"48","mutatorName":"PrecomputedMutator","replacement":"path.resolve((options.dest, __dirname).extname)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✓ should save image with the original filename (35 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (8 ms)\n\n    ✓ should save image with the decoded filename (4 ms)\n\n    ✓ should save image with an another filename (3 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: The \"paths[0]\" argument must be of type string. Received undefined\n\n      68 |   }\n      69 |   if (stryMutAct_9fa48(\"42\") ? !path.isAbsolute(options.dest) && path.isAbsolute(options.dest) : stryMutAct_9fa48(\"41\") ? !path.isAbsolute(options.dest) && !path.isAbsolute(options.dest) : stryMutAct_9fa48(\"40\") ? path.isAbsolute(options.dest) : (stryCov_9fa48(\"40\", \"41\", \"42\"), !(stryMutAct_9fa48(\"45\") ? path.extname(options.dest) : stryMutAct_9fa48(\"44\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"43\") ? path.basename(options.dest) : (stryCov_9fa48(\"43\", \"44\", \"45\"), path.isAbsolute(options.dest))))) {\n    > 70 |     options.dest = stryMutAct_9fa48(\"49\") ? path.parse(__dirname, options.dest) : stryMutAct_9fa48(\"48\") ? path.resolve((options.dest, __dirname).extname) : stryMutAct_9fa48(\"47\") ? path.resolve((options.dest, __dirname).join('path', 'to', 'file.txt')) : stryMutAct_9fa48(\"46\") ? path.resolve((__dirname, options.dest).ALTText) : (stryCov_9fa48(\"46\", \"47\", \"48\", \"49\"), path.resolve(stryMutAct_9fa48(\"52\") ? __dirname + \"/\" : stryMutAct_9fa48(\"51\") ? __dirname + \"./\" : stryMutAct_9fa48(\"50\") ? __dirname + \"..\" : (stryCov_9fa48(\"50\", \"51\", \"52\"), __dirname), stryMutAct_9fa48(\"55\") ? path.basename(options.dest) : stryMutAct_9fa48(\"54\") ? path.dirname(options.dest) : stryMutAct_9fa48(\"53\") ? \"some/other/directory\" : (stryCov_9fa48(\"53\", \"54\", \"55\"), options.dest)));\n         |                                                                                                                 ^\n      71 |   }\n      72 |   return request(stryMutAct_9fa48(\"58\") ? options.url = new URL(options.url).href : stryMutAct_9fa48(\"57\") ? options.dest = path.resolve(__dirname, options.dest) + \"/foo\" : stryMutAct_9fa48(\"56\") ? options.url : (stryCov_9fa48(\"56\", \"57\", \"58\"), options));\n      73 | };\n\n      at Object.resolve [as image] (index.js:70:113)\n      at Object.image (test/index.js:139:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    50.89 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    50.93 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    50.93 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.417 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":57,"line":25},"start":{"column":20,"line":25}}},{"id":"49","mutatorName":"PrecomputedMutator","replacement":"path.parse","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✓ should save image with the original filename (8 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (2 ms)\n    ✓ should save image with the decoded filename (4 ms)\n\n    ✓ should save image with an another filename (3 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received an instance of Object\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    50.44 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    50.31 |     100 |   95.34 |                   \n  index.js          |   95.45 |    50.31 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.294 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":25},"start":{"column":20,"line":25}}},{"id":"50","mutatorName":"PrecomputedMutator","replacement":"__dirname + \"..\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true (1 ms)\n  download an image\n    ✓ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (9 ms)\n    ✓ should save image with the decoded filename (7 ms)\n\n    ✓ should save image with an another filename (11 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (5 ms)\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n    ✓ #29 - 301 status code while downloading image (5 ms)\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    ENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274../test/fixtures/someurl.com'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   91.95 |    54.46 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |     55.9 |     100 |   95.34 |                   \n  index.js          |   95.45 |     55.9 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.303 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":42,"line":25},"start":{"column":33,"line":25}}},{"id":"51","mutatorName":"PrecomputedMutator","replacement":"__dirname + \"./\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n    ✓ should failed with !options.url === true\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (8 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (3 ms)\n    ✓ should save image with the decoded filename (3 ms)\n\n    ✓ should save image with an another filename (3 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n    ✓ #29 - 301 status code while downloading image (9 ms)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    ENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274./test/fixtures/someurl.com'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.01 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |    55.27 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    55.27 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.284 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":42,"line":25},"start":{"column":33,"line":25}}},{"id":"52","mutatorName":"PrecomputedMutator","replacement":"__dirname + \"/\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":42,"line":25},"start":{"column":33,"line":25}}},{"id":"53","mutatorName":"PrecomputedMutator","replacement":"\"some/other/directory\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (18 ms)\n    ✓ should failed with too short timeout (3 ms)\n    ✓ should succeed with HTTPS (12 ms)\n    ✓ should save image with the decoded filename (7 ms)\n    ✓ should save image with an another filename (5 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (3 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    ENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/some/other/directory'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.46 |     100 |   91.66 |                   \n\n sandbox1646274     |   95.45 |     55.9 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |     55.9 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.303 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":25},"start":{"column":44,"line":25}}},{"id":"54","mutatorName":"PrecomputedMutator","replacement":"path.dirname(options.dest)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✓ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (2 ms)\n\n    ✓ should save image with the decoded filename (2 ms)\n\n    ✓ should save image with an another filename (3 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    EISDIR: illegal operation on a directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/test/fixtures'\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.01 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |    55.27 |     100 |   95.34 |                   \n  index.js          |   95.45 |    55.27 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.289 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":25},"start":{"column":44,"line":25}}},{"id":"55","mutatorName":"PrecomputedMutator","replacement":"path.basename(options.dest)","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true\n    ✓ should failed with !options.dest === true\n\n  download an image\n\n    ✓ should save image with the original filename (9 ms)\n\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (3 ms)\n    ✓ should save image with the decoded filename (3 ms)\n\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (4 ms)\n\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (5 ms)\n\n    ✓ #29 - 301 status code while downloading image (9 ms)\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /test\\/fixtures\\/someurl\\.com$/\n    Received string:  \"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/someurl.com\"\n\n      138 |   it('#27 - dest: directory cannot contain a dot', () => {\n      139 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: './test/fixtures/someurl.com' }).then(({ filename }) => {\n    > 140 |       expect(filename).toMatch(/test\\/fixtures\\/someurl\\.com$/);\n          |                        ^\n      141 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      142 |     });\n      143 |   });\n\n      at toMatch (test/index.js:140:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\nAll files           |   91.95 |    53.57 |     100 |   91.66 |                   \n sandbox1646274     |   95.45 |    54.65 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    54.65 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   88.37 |    50.79 |     100 |    87.8 |                   \n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |    87.8 |    50.79 |     100 |   87.17 | 6,24,38-41        \n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.337 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":25},"start":{"column":44,"line":25}}},{"id":"56","mutatorName":"PrecomputedMutator","replacement":"options.url","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.167 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename\n\n    ✕ should failed with too short timeout (5001 ms)\n\n    ✕ should succeed with HTTPS\n\n    ✕ should save image with the decoded filename\n\n    ✕ should save image with an another filename\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension\n\n    ✓ should failed with an error (1 ms)\n\n    ✕ should save image with a complex url params\n\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot\n\n    ✕ #29 - 301 status code while downloading image (1 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: TypeError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                     \n               ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    81.6 |    45.98 |   78.94 |   82.14 |                   \n\n sandbox1646274     |   95.45 |     55.9 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |     55.9 |     100 |   95.34 | 24,39             \n sandbox1646274/lib |   67.44 |    20.63 |   66.66 |   68.29 |                   \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n\n  request.js        |   68.29 |    20.63 |   72.72 |   69.23 | 6,24,38-41,64-79  \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        5.264 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":25,"line":28},"start":{"column":18,"line":28}}},{"id":"57","mutatorName":"PrecomputedMutator","replacement":"options.dest = path.resolve(__dirname, options.dest) + \"/foo\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.168 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✕ should save image with the original filename (1 ms)\n    ✕ should failed with too short timeout (5001 ms)\n    ✕ should succeed with HTTPS\n\n    ✕ should save image with the decoded filename (1 ms)\n\n    ✕ should save image with an another filename\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (1 ms)\n\n    ✓ should failed with an error (1 ms)\n    ✕ should save image with a complex url params\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n    ✕ #29 - 301 status code while downloading image\n\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: TypeError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                     \n               ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    81.6 |    45.53 |   78.94 |   82.14 |                   \n\n sandbox1646274     |   95.45 |    55.27 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    55.27 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   67.44 |    20.63 |   66.66 |   68.29 |                   \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n\n  request.js        |   68.29 |    20.63 |   72.72 |   69.23 | 6,24,38-41,64-79  \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        5.304 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":25,"line":28},"start":{"column":18,"line":28}}},{"id":"58","mutatorName":"PrecomputedMutator","replacement":"options.url = new URL(options.url).href","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.165 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename (1 ms)\n    ✕ should failed with too short timeout (5001 ms)\n\n    ✕ should succeed with HTTPS (1 ms)\n    ✕ should save image with the decoded filename\n\n    ✕ should save image with an another filename\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension\n\n    ✓ should failed with an error\n\n    ✕ should save image with a complex url params (1 ms)\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n\n    ✕ #29 - 301 status code while downloading image\n\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: TypeError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                     \n               ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    TypeError: Cannot read properties of undefined (reading 'trimLeft')\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                                                                    ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at trimLeft (lib/request.js:63:100)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    81.6 |    45.08 |   78.94 |   82.14 |                   \n\n sandbox1646274     |   95.45 |    54.65 |     100 |   95.34 |                   \n\n  index.js          |   95.45 |    54.65 |     100 |   95.34 | 24,39             \n\n sandbox1646274/lib |   67.44 |    20.63 |   66.66 |   68.29 |                   \n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n\n  request.js        |   68.29 |    20.63 |   72.72 |   69.23 | 6,24,38-41,64-79  \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        5.301 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":25,"line":28},"start":{"column":18,"line":28}}}],"source":"const path = require('path');\nconst request = require('./lib/request');\n\nmodule.exports.image = ({ extractFilename = true, ...options } = {}) => {\n  if (!options.url) {\n    return Promise.reject(new Error('The options.url is required'));\n  }\n\n  if (!options.dest) {\n    return Promise.reject(new Error('The options.dest is required'));\n  }\n\n  if (extractFilename) {\n    if (!path.extname(options.dest)) {\n      const url = new URL(options.url);\n      const pathname = url.pathname;\n      const basename = path.basename(pathname);\n      const decodedBasename = decodeURIComponent(basename);\n\n      options.dest = path.join(options.dest, decodedBasename);\n    }\n  }\n\n  if (!path.isAbsolute(options.dest)) {\n    options.dest = path.resolve(__dirname, options.dest);\n  }\n\n  return request(options);\n};\n"},"lib/request.js":{"language":"javascript","mutants":[{"id":"61","mutatorName":"PrecomputedMutator","replacement":"res.statusCode != 200","status":"Survived","testsCompleted":1,"location":{"end":{"column":33,"line":10},"start":{"column":11,"line":10}}},{"id":"62","mutatorName":"PrecomputedMutator","replacement":"!res.statusCode","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (7 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✓ should succeed with HTTPS (3 ms)\n    ✓ should save image with the decoded filename (2 ms)\n\n    ✓ should save image with an another filename (4 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✕ should failed with an error (14 ms)\n\n    ✓ should save image with a complex url params (6 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (5 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n\n\n  ● download an image › should failed with an error\n\n    Should throw an error\n\n      115 |   it('should failed with an error', (done) => {\n      116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n    > 117 |       .then(() => done(new Error('Should throw an error')))\n          |                        ^\n      118 |       .catch((err) => {\n      119 |         expect(err).toBeInstanceOf(Error);\n      120 |         done();\n\n      at test/index.js:117:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    88.5 |    53.57 |     100 |   88.09 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   86.04 |    52.38 |     100 |   85.36 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   85.36 |    52.38 |     100 |   84.61 | 6,24,39,67-69     \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.259 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":33,"line":10},"start":{"column":11,"line":10}}},{"id":"59","mutatorName":"PrecomputedMutator","replacement":"null","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.206 s)\n\n  options\n\n    ✓ should failed with !options.url === true\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename (1 ms)\n    ✕ should failed with too short timeout (5002 ms)\n\n    ✕ should succeed with HTTPS (1 ms)\n\n    ✕ should save image with the decoded filename (1 ms)\n\n    ✕ should save image with an another filename (1 ms)\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (1 ms)\n\n    ✓ should failed with an error (1 ms)\n\n    ✕ should save image with a complex url params (1 ms)\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n\n    ✕ #29 - 301 status code while downloading image (1 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    TypeError: null is not a function\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: TypeError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    TypeError: null is not a function\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    TypeError: null is not a function\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    TypeError: null is not a function\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    TypeError: null is not a function\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should save image with a complex url params\n\n    TypeError: null is not a function\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    TypeError: null is not a function\n\n      61 |   ...options\n      62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    TypeError: null is not a function\n\n      61 |   ...options\n \n     62 | }) => new Promise((resolve, reject) => {\n    > 63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n         |                                                 ^\n      64 |   request.get(url, options, res => {\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n\n      at lib/request.js:63:49\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|---------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s   \n\n--------------------|---------|----------|---------|---------|---------------------\n\nAll files           |   68.96 |    43.75 |   68.42 |   70.23 |                     \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                     \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41            \n\n sandbox1646274/lib |   46.51 |    17.46 |      50 |   48.78 |                     \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                   \n\n  request.js        |   46.34 |    17.46 |   54.54 |   48.71 | 6,16-32,39,43,64-79 \n\n--------------------|---------|----------|---------|---------|---------------------\n\nTest Suites: 1 failed, 1 total\nTests:       9 failed, 3 passed, 12 total\nSnapshots:   0 total\nTime:        5.296 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":6},"start":{"column":19,"line":6}}},{"id":"63","mutatorName":"PrecomputedMutator","replacement":"res.statusCode < 200","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true (1 ms)\n\n  download an image\n    ✓ should save image with the original filename (11 ms)\n    ✓ should failed with too short timeout (1 ms)\n\n    ✓ should succeed with HTTPS (3 ms)\n    ✓ should save image with the decoded filename (3 ms)\n\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✕ should failed with an error (6 ms)\n\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (3 ms)\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n\n\n  ● download an image › should failed with an error\n\n    Should throw an error\n\n      115 |   it('should failed with an error', (done) => {\n      116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n    > 117 |       .then(() => done(new Error('Should throw an error')))\n          |                        ^\n      118 |       .catch((err) => {\n      119 |         expect(err).toBeInstanceOf(Error);\n      120 |         done();\n\n      at test/index.js:117:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    88.5 |    53.12 |     100 |   88.09 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   86.04 |    50.79 |     100 |   85.36 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   85.36 |    50.79 |     100 |   84.61 | 6,24,39,67-69     \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.372 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":33,"line":10},"start":{"column":11,"line":10}}},{"id":"65","mutatorName":"PrecomputedMutator","replacement":"undefined","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (5 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (1 ms)\n    ✕ should save image with an another filename (2 ms)\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (2 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (1 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (1 ms)\n    ✕ #29 - 301 status code while downloading image (4 ms)\n\n  ● download an image › should save image with the original filename\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should succeed with HTTPS\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with the decoded filename\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with an another filename\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with a complex url params\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received undefined\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    90.8 |    52.23 |   94.73 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   90.69 |    47.61 |   91.66 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   90.24 |    47.61 |    90.9 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.305 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":38,"line":19},"start":{"column":34,"line":19}}},{"id":"64","mutatorName":"PrecomputedMutator","replacement":"\"\"","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (6 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (1 ms)\n    ✕ should save image with the decoded filename (2 ms)\n    ✕ should save image with an another filename (2 ms)\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (1 ms)\n    ✓ should failed with an error (1 ms)\n    ✕ should save image with a complex url params (3 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n    ✕ #29 - 301 status code while downloading image (12 ms)\n\n  ● download an image › should save image with the original filename\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● download an image › should succeed with HTTPS\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● download an image › should save image with the decoded filename\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● download an image › should save image with an another filename\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● download an image › should save image with a complex url params\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    ENOENT: no such file or directory, open ''\n\n\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    ENOENT: no such file or directory, open ''\n\n\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.46 |     100 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   93.02 |    55.55 |     100 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   92.68 |    55.55 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.288 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":38,"line":19},"start":{"column":34,"line":19}}},{"id":"60","mutatorName":"PrecomputedMutator","replacement":"'http:'","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (10.216 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✕ should save image with the original filename (10 ms)\n\n    ✕ should failed with too short timeout (5002 ms)\n\n    ✕ should succeed with HTTPS (1 ms)\n\n    ✕ should save image with the decoded filename (1 ms)\n\n    ✕ should save image with an another filename (1 ms)\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (1 ms)\n\n    ✕ should failed with an error (5002 ms)\n\n    ✕ should save image with a complex url params (2 ms)\n\n  Issues\n\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n\n    ✕ #29 - 301 status code while downloading image (1 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:66:21)\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: AssertionError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"http:\"\n    Received:\n      \"https:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - http:\n    + https:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:82:21)\n\n  ● download an image › should save image with the decoded filename\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:89:21)\n\n  ● download an image › should save image with an another filename\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:96:21)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:109:21)\n\n  ● download an image › should failed with an error\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: Error\n    Received constructor: AssertionError\n\n      117 |       .then(() => done(new Error('Should throw an error')))\n      118 |       .catch((err) => {\n    > 119 |         expect(err).toBeInstanceOf(Error);\n          |                     ^\n      120 |         done();\n      121 |       });\n      122 |   });\n\n      at toBeInstanceOf (test/index.js:119:21)\n\n  ● down\nload an image › should failed with an error\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      113 |   });\n      114 |\n    > 115 |   it('should failed with an error', (done) => {\n          |   ^\n      116 |     download.image({ url: 'http://someurl.com/image-error.jpg', dest: '/tmp' })\n      117 |       .then(() => done(new Error('Should throw an error')))\n      118 |       .catch((err) => {\n\n      at it (test/index.js:115:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should save image with a complex url params\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:130:21)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:139:21)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    assert.equal(received, expected)\n\n    Expected value to be equal to:\n      \"https:\"\n    Received:\n      \"http:\"\n\n    Message:\n      protocol mismatch\n\n    Difference:\n\n    - Expected\n    + Received\n\n    - https:\n    + http:\n\n      62 | }) => new Promise((resolve, reject) => {\n      63 |   const request = (stryMutAct_9fa48(\"59\") ? null().startsWith('https') : (stryCov_9fa48(\"59\"), url.trimLeft().startsWith(stryMutAct_9fa48(\"60\") ? 'http:' : (stryCov_9fa48(\"60\"), 'https')))) ? https : http;\n    > 64 |   request.get(url, options, res => {\n         |           ^\n      65 |     if (stryMutAct_9fa48(\"63\") ? res.statusCode < 200 : stryMutAct_9fa48(\"62\") ? !res.statusCode : stryMutAct_9fa48(\"61\") ? res.statusCode != 200 : (stryCov_9fa48(\"61\", \"62\", \"63\"), res.statusCode !== 200)) {\n      66 |       // Consume response data to free up memory\n      67 |       res.resume();\n\n      at Object.request (../../node_modules/follow-redirects/index.js:530:14)\n      at Object.get (../../node_modules/follow-redirects/index.js:537:44)\n      at get (lib/request.js:64:11)\n      at Object.<anonymous>.module.exports (lib/request.js:62:7)\n      at Object.request [as image] (index.js:72:10)\n      at Object.image (test/index.js:146:21)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   82.75 |    47.32 |   78.94 |   83.33 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   74.41 |    30.15 |   66.66 |    75.6 |                   \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n\n  request.js        |    75.6 |    30.15 |   72.72 |   76.92 | 6,24,39,65-79     \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       10 failed, 2 passed, 12 total\nSnapshots:   0 total\nTime:        10.31 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":52,"line":6},"start":{"column":45,"line":6}}},{"id":"68","mutatorName":"PrecomputedMutator","replacement":"{}","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✕ should save image with the original filename (9 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (3 ms)\n\n    ✕ should save image with the decoded filename (3 ms)\n    ✕ should save image with an another filename (3 ms)\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (3 ms)\n\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (3 ms)\n    ✕ #29 - 301 status code while downloading image (5 ms)\n\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: undefined\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: undefined\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n  ● download an image › should save image with the decoded filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-success.png\"\n    Received: undefined\n\n      88 |   it('should save image with the decoded filename', () => {\n      89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 90 |       expect(filename).toEqual('/tmp/image-success.png');\n         |                        ^\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      92 |     });\n      93 |   });\n\n      at toEqual (test/index.js:90:24)\n\n  ● download an image › should save image with an another filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-newname.jpg\"\n    Received: undefined\n\n       95 |   it('should save image with an another filename', () => {\n       96 |     return download.image({ url: 'http://someurl.com/image-success.jpg', dest: '/tmp/image-newname.jpg' }).then(({ filename }) => {\n    >  97 |       expect(filename).toEqual('/tmp/image-newname.jpg');\n          |                        ^\n       98 |       expect(() => fs.accessSync(filename)).not.toThrow();\n       99 |     });\n      100 |   });\n\n      at toEqual (test/index.js:97:24)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-newname\"\n    Received: undefined\n\n      108 |\n      109 |     return download.image(options).then(({ filename }) => {\n    > 110 |       expect(filename).toEqual('/tmp/image-newname');\n          |                        ^\n      111 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      112 |     });\n      113 |   });\n\n      at toEqual (test/index.js:110:24)\n\n  ● download an image › should save image with a complex url params\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      129 |\n      130 |     return download.image(options).then(({ filename }) => {\n    > 131 |       expect(filename).toBeDefined();\n          |                        ^\n      132 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      133 |     });\n      134 |   });\n\n      at toBeDefined (test/index.js:131:24)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    expect(received).toMatch(expected)\n\n    Matcher error: received value must be a string\n\n    Received has value: undefined\n\n      138 |   it('#27 - dest: directory cannot contain a dot', () => {\n      139 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: './test/fixtures/someurl.com' }).then(({ filename }) => {\n    > 140 |       expect(filename).toMatch(/test\\/fixtures\\/someurl\\.com$/);\n          |                        ^\n      141 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      142 |     });\n      143 |   });\n\n      at toMatch (test/index.js:140:24)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    expect(received).toMatch(expected)\n\n    Matcher error: received value must be a string\n\n    Received has value: undefined\n\n      145 |   it('#29 - 301 status code while downloading image', () => {\n      146 |     return download.image({ url: 'http://cdn.shopify.com/s/files/1/0516/7244/9178/products/SteelCutOats1.jpg', dest: '/tmp/SteelCutOats1.jpg' }).then(({ filename }) => {\n    > 147 |       expect(filename).toMatch(/tmp\\/SteelCutOats1\\.jpg$/);\n          |                        ^\n      148 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      149 |     });\n      150 |   });\n\n      at toMatch (test/index.js:147:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.46 |     100 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   93.02 |    55.55 |     100 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   92.68 |    55.55 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.311 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":21},"start":{"column":38,"line":21}}},{"id":"66","mutatorName":"PrecomputedMutator","replacement":"null","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (5 ms)\n    ✓ should failed with too short timeout (2 ms)\n    ✕ should succeed with HTTPS (2 ms)\n    ✕ should save image with the decoded filename (2 ms)\n    ✕ should save image with an another filename (2 ms)\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (2 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (2 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (2 ms)\n    ✕ #29 - 301 status code while downloading image (4 ms)\n\n\n\n  ● download an image › should save image with the original filename\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should succeed with HTTPS\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with the decoded filename\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with an another filename\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● download an image › should save image with a complex url params\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    Error [ERR_FR_REDIRECTION_FAILURE]: Redirected request failed: The \"path\" argument must be of type string or an instance of Buffer or URL. Received null\n\n      at OverriddenClientRequest.RedirectableRequest._onNativeResponse (../../node_modules/follow-redirects/index.js:95:17)\n      at Timeout.respond [as _onTimeout] (../../node_modules/nock/lib/playback_interceptor.js:307:11)\n\n\n--------------------|---------|----------|---------|---------|-------------------\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    90.8 |    51.78 |   94.73 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   90.69 |    46.03 |   91.66 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   90.24 |    46.03 |    90.9 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.321 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":38,"line":19},"start":{"column":34,"line":19}}},{"id":"67","mutatorName":"PrecomputedMutator","replacement":"reject","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (7 ms)\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (3 ms)\n    ✕ should save image with the decoded filename (3 ms)\n    ✕ should save image with an another filename (2 ms)\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✕ should save image with a complex url params (2 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (4 ms)\n    ✕ #29 - 301 status code while downloading image (8 ms)\n\n  ● download an image › should save image with the original filename\n\n    thrown: Object {\n      \"filename\": \"/tmp/image success.png\",\n    }\n\n      63 |\n      64 | describe('download an image', () => {\n    > 65 |   it('should save image with the original filename', () => {\n         |   ^\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n      67 |       expect(filename).toEqual('/tmp/image success.png');\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n\n      at it (test/index.js:65:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should succeed with HTTPS\n\n    thrown: Object {\n      \"filename\": \"/tmp/image success.png\",\n    }\n\n      79 |   });\n      80 |\n    > 81 |   it('should succeed with HTTPS', () => {\n         |   ^\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n      83 |       expect(filename).toEqual('/tmp/image success.png');\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n\n      at it (test/index.js:81:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should save image with the decoded filename\n\n    thrown: Object {\n      \"filename\": \"/tmp/image-success.png\",\n    }\n\n      86 |   });\n      87 |\n    > 88 |   it('should save image with the decoded filename', () => {\n         |   ^\n      89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n      90 |       expect(filename).toEqual('/tmp/image-success.png');\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n\n      at it (test/index.js:88:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should save image with an another filename\n\n    thrown: Object {\n      \"filename\": \"/tmp/image-newname.jpg\",\n    }\n\n      93 |   });\n      94 |\n    > 95 |   it('should save image with an another filename', () => {\n         |   ^\n      96 |     return download.image({ url: 'http://someurl.com/image-success.jpg', dest: '/tmp/image-newname.jpg' }).then(({ filename }) => {\n      97 |       expect(filename).toEqual('/tmp/image-newname.jpg');\n      98 |       expect(() => fs.accessSync(filename)).not.toThrow();\n\n      at it (test/index.js:95:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    thrown: Object {\n      \"filename\": \"/tmp/image-newname\",\n    }\n\n      100 |   });\n      101 |\n    > 102 |   it('should save image with options.extractFilename and a defined options.dest without file extension', () => {\n          |   ^\n      103 |     const options = {\n      104 |       url: 'http://someurl.com/image-success.jpg',\n      105 |       dest: '/tmp/image-newname',\n\n      at it (test/index.js:102:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● download an image › should save image with a complex url params\n\n    thrown: Object {\n      \"filename\": \"/tmp/success-image-with-complex-params.jpg\",\n    }\n\n      122 |   });\n      123 |\n    > 124 |   it('should save image with a complex url params', () => {\n          |   ^\n      125 |     const options = {\n      126 |       url: 'http://someurl.com/success-image-with-complex-params.jpg?_nc_cat=1&_nc_ht=scontent.fdad3-1.fna&oh=88171697ef1cf5baf3f887436259273d&oe=5CAD866C',\n      127 |       dest: '/tmp',\n\n      at it (test/index.js:124:3)\n      at Object.describe (test/index.js:64:1)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    thrown: Object {\n      \"filename\": \"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader/.stryker-tmp/sandbox1646274/test/fixtures/someurl.com\",\n    }\n\n      136 |\n      137 | describe('Issues', () => {\n    > 138 |   it('#27 - dest: directory cannot contain a dot', () => {\n          |   ^\n      139 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: './test/fixtures/someurl.com' }).then(({ filename }) => {\n      140 |       expect(filename).toMatch(/test\\/fixtures\\/someurl\\.com$/);\n      141 |       expect(() => fs.accessSync(filename)).not.toThrow();\n\n      at it (test/index.js:138:3)\n      at Object.describe (test/index.js:137:1)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    thrown: Object {\n      \"filename\": \"/tmp/SteelCutOats1.jpg\",\n    }\n\n      143 |   });\n      144 |\n    > 145 |   it('#29 - 301 status code while downloading image', () => {\n          |   ^\n      146 |     return download.image({ url: 'http://cdn.shopify.com/s/files/1/0516/7244/9178/products/SteelCutOats1.jpg', dest: '/tmp/SteelCutOats1.jpg' }).then(({ filename }) => {\n      147 |       expect(filename).toMatch(/tmp\\/SteelCutOats1\\.jpg$/);\n      148 |       expect(() => fs.accessSync(filename)).not.toThrow();\n\n      at it (test/index.js:145:3)\n      at Object.describe (test/index.js:137:1)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.46 |     100 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   93.02 |    55.55 |     100 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   92.68 |    55.55 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.316 s, estimated 6 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":37,"line":21},"start":{"column":30,"line":21}}},{"id":"69","mutatorName":"PrecomputedMutator","replacement":"{\n  filename: 'wrong-file-name'\n}","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n  download an image\n    ✕ should save image with the original filename (11 ms)\n\n    ✓ should failed with too short timeout (1 ms)\n    ✕ should succeed with HTTPS (4 ms)\n\n    ✕ should save image with the decoded filename (3 ms)\n\n    ✕ should save image with an another filename (4 ms)\n\n    ✕ should save image with options.extractFilename and a defined options.dest without file extension (4 ms)\n    ✓ should failed with an error (1 ms)\n\n    ✕ should save image with a complex url params (13 ms)\n  Issues\n    ✕ #27 - dest: directory cannot contain a dot (4 ms)\n    ✕ #29 - 301 status code while downloading image (5 ms)\n\n\n  ● download an image › should save image with the original filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"wrong-file-name\"\n\n      65 |   it('should save image with the original filename', () => {\n      66 |     return download.image({ url: 'http://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 67 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      68 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      69 |     });\n      70 |   });\n\n      at toEqual (test/index.js:67:24)\n\n  ● download an image › should succeed with HTTPS\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image success.png\"\n    Received: \"wrong-file-name\"\n\n      81 |   it('should succeed with HTTPS', () => {\n      82 |     return download.image({ url: 'https://someurl.com/image%20success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 83 |       expect(filename).toEqual('/tmp/image success.png');\n         |                        ^\n      84 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      85 |     });\n      86 |   });\n\n      at toEqual (test/index.js:83:24)\n\n  ● download an image › should save image with the decoded filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-success.png\"\n    Received: \"wrong-file-name\"\n\n      88 |   it('should save image with the decoded filename', () => {\n      89 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: '/tmp' }).then(({ filename }) => {\n    > 90 |       expect(filename).toEqual('/tmp/image-success.png');\n         |                        ^\n      91 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      92 |     });\n      93 |   });\n\n      at toEqual (test/index.js:90:24)\n\n  ● download an image › should save image with an another filename\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-newname.jpg\"\n    Received: \"wrong-file-name\"\n\n       95 |   it('should save image with an another filename', () => {\n       96 |     return download.image({ url: 'http://someurl.com/image-success.jpg', dest: '/tmp/image-newname.jpg' }).then(({ filename }) => {\n    >  97 |       expect(filename).toEqual('/tmp/image-newname.jpg');\n          |                        ^\n       98 |       expect(() => fs.accessSync(filename)).not.toThrow();\n       99 |     });\n      100 |   });\n\n      at toEqual (test/index.js:97:24)\n\n  ● download an image › should save image with options.extractFilename and a defined options.dest without file extension\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: \"/tmp/image-newname\"\n    Received: \"wrong-file-name\"\n\n      108 |\n      109 |     return download.image(options).then(({ filename }) => {\n    > 110 |       expect(filename).toEqual('/tmp/image-newname');\n          |                        ^\n      111 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      112 |     });\n      113 |   });\n\n      at toEqual (test/index.js:110:24)\n\n  ● download an image › should save image with a complex url params\n\n    expect(received).not.toThrow()\n\n    Error name:    \"Error\"\n    Error message: \"ENOENT: no such file or directory, access 'wrong-file-name'\"\n\n          130 |     return download.image(options).then(({ filename }) => {\n          131 |       expect(filename).toBeDefined();\n        > 132 |       expect(() => fs.accessSync(filename)).not.toThrow();\n              |                       ^\n          133 |     });\n          134 |   });\n          135 | });\n\n      at accessSync (test/index.js:132:23)\n      at Object.<anonymous> (../../node_modules/expect/build/toThrowMatchers.js:83:11)\n      at Object.throwingMatcher [as toThrow] (../../node_modules/expect/build/index.js:342:21)\n      at toThrow (test/index.js:132:49)\n      at toThrow (test/index.js:132:49)\n\n  ● Issues › #27 - dest: directory cannot contain a dot\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /test\\/fixtures\\/someurl\\.com$/\n    Received string:  \"wrong-file-name\"\n\n      138 |   it('#27 - dest: directory cannot contain a dot', () => {\n      139 |     return download.image({ url: 'http://someurl.com/image-success.png', dest: './test/fixtures/someurl.com' }).then(({ filename }) => {\n    > 140 |       expect(filename).toMatch(/test\\/fixtures\\/someurl\\.com$/);\n          |                        ^\n      141 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      142 |     });\n      143 |   });\n\n      at toMatch (test/index.js:140:24)\n\n  ● Issues › #29 - 301 status code while downloading image\n\n    expect(received).toMatch(expected)\n\n    Expected pattern: /tmp\\/SteelCutOats1\\.jpg$/\n    Received string:  \"wrong-file-name\"\n\n      145 |   it('#29 - 301 status code while downloading image', () => {\n      146 |     return download.image({ url: 'http://cdn.shopify.com/s/files/1/0516/7244/9178/products/SteelCutOats1.jpg', dest: '/tmp/SteelCutOats1.jpg' }).then(({ filename }) => {\n    > 147 |       expect(filename).toMatch(/tmp\\/SteelCutOats1\\.jpg$/);\n          |                        ^\n      148 |       expect(() => fs.accessSync(filename)).not.toThrow();\n      149 |     });\n      150 |   });\n\n      at toMatch (test/index.js:147:24)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.01 |     100 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   93.02 |    53.96 |     100 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   92.68 |    53.96 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       8 failed, 4 passed, 12 total\nSnapshots:   0 total\nTime:        0.367 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":56,"line":21},"start":{"column":38,"line":21}}},{"id":"71","mutatorName":"PrecomputedMutator","replacement":"resolve","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js\n  options\n    ✓ should failed with !options.url === true\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (7 ms)\n    ✕ should failed with too short timeout (4 ms)\n    ✓ should succeed with HTTPS (4 ms)\n    ✓ should save image with the decoded filename (3 ms)\n    ✓ should save image with an another filename (3 ms)\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (3 ms)\n    ✓ should failed with an error (2 ms)\n    ✓ should save image with a complex url params (4 ms)\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (8 ms)\n\n  ● download an image › should failed with too short timeout\n\n    Should throw an error\n\n      72 |   it('should failed with too short timeout', (done) => {\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n    > 74 |       .then(() => done(new Error('Should throw an error')))\n         |                        ^\n      75 |       .catch((err) => {\n      76 |         expect(err).toBeInstanceOf(TimeoutError);\n      77 |         done();\n\n      at test/index.js:74:24\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    54.46 |     100 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   93.02 |    55.55 |     100 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   92.68 |    55.55 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        0.305 s, estimated 1 s\nRan all test suites.\n\nJest did not exit one second after the test run has completed.\n\nThis usually means that there are asynchronous operations that weren't stopped in your tests. Consider running Jest with `--detectOpenHandles` to troubleshoot this issue.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":23},"start":{"column":26,"line":23}}},{"id":"70","mutatorName":"PrecomputedMutator","replacement":"{\n  filename: dest,\n  extraProperty: 'foo'\n}","status":"Survived","testsCompleted":1,"location":{"end":{"column":56,"line":21},"start":{"column":38,"line":21}}},{"id":"72","mutatorName":"PrecomputedMutator","replacement":"new SyntaxError()","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.189 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n\n  download an image\n    ✓ should save image with the original filename (8 ms)\n\n    ✕ should failed with too short timeout (5002 ms)\n\n    ✓ should succeed with HTTPS (7 ms)\n\n    ✓ should save image with the decoded filename (4 ms)\n\n    ✓ should save image with an another filename (3 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (4 ms)\n\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n\n    ✓ #29 - 301 status code while downloading image (7 ms)\n\n\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: SyntaxError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    90.8 |    54.46 |   94.73 |   90.47 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   90.69 |    55.55 |   91.66 |   90.24 |                   \n\n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n\n  request.js        |   92.68 |    55.55 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        5.281 s, estimated 11 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":51,"line":23},"start":{"column":33,"line":23}}},{"id":"73","mutatorName":"PrecomputedMutator","replacement":"new Error()","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.206 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n\n    ✓ should failed with !options.dest === true\n  download an image\n    ✓ should save image with the original filename (8 ms)\n\n    ✕ should failed with too short timeout (5003 ms)\n\n    ✓ should succeed with HTTPS (5 ms)\n    ✓ should save image with the decoded filename (4 ms)\n\n    ✓ should save image with an another filename (5 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (3 ms)\n\n  Issues\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: Error\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |    90.8 |    54.01 |   94.73 |   90.47 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n\n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   90.69 |    53.96 |   91.66 |   90.24 |                   \n  TimeoutError.js   |      50 |      100 |       0 |      50 | 4                 \n\n  request.js        |   92.68 |    53.96 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        5.321 s, estimated 11 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":51,"line":23},"start":{"column":33,"line":23}}},{"id":"74","mutatorName":"PrecomputedMutator","replacement":"new Promise.reject(new TimeoutError())","statusReason":"\n> image-downloader@4.3.0 test\n> jest --coverage\n\n\nFAIL test/index.js (5.207 s)\n\n  options\n\n    ✓ should failed with !options.url === true (1 ms)\n    ✓ should failed with !options.dest === true\n  download an image\n\n    ✓ should save image with the original filename (8 ms)\n    ✕ should failed with too short timeout (5001 ms)\n    ✓ should succeed with HTTPS (6 ms)\n\n    ✓ should save image with the decoded filename (4 ms)\n\n    ✓ should save image with an another filename (4 ms)\n\n    ✓ should save image with options.extractFilename and a defined options.dest without file extension (5 ms)\n    ✓ should failed with an error (2 ms)\n\n    ✓ should save image with a complex url params (3 ms)\n  Issues\n\n    ✓ #27 - dest: directory cannot contain a dot (4 ms)\n    ✓ #29 - 301 status code while downloading image (6 ms)\n\n\n  ● download an image › should failed with too short timeout\n\n    expect(received).toBeInstanceOf(expected)\n\n    Expected constructor: TimeoutError\n    Received constructor: TypeError\n\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n    > 76 |         expect(err).toBeInstanceOf(TimeoutError);\n         |                     ^\n      77 |         done();\n      78 |       });\n      79 |   });\n\n      at toBeInstanceOf (test/index.js:76:21)\n\n  ● download an image › should failed with too short timeout\n\n    thrown: \"Exceeded timeout of 5000 ms for a test.\n    Use jest.setTimeout(newTimeout) to increase the timeout value, if this is a long-running test.\"\n\n      70 |   });\n      71 |\n    > 72 |   it('should failed with too short timeout', (done) => {\n         |   ^\n      73 |     download.image({ url: 'https://someurl.com/image-timeout.png', timeout: 2000, dest: '/tmp' })\n      74 |       .then(() => done(new Error('Should throw an error')))\n      75 |       .catch((err) => {\n\n      at it (test/index.js:72:3)\n      at Object.describe (test/index.js:64:1)\n\n\n--------------------|---------|----------|---------|---------|-------------------\n\nFile                | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s \n\n--------------------|---------|----------|---------|---------|-------------------\n\nAll files           |   91.95 |    53.57 |     100 |   91.66 |                   \n\n sandbox1646274     |    90.9 |    54.03 |     100 |   90.69 |                   \n  index.js          |    90.9 |    54.03 |     100 |   90.69 | 24,38-41          \n\n sandbox1646274/lib |   93.02 |    52.38 |     100 |   92.68 |                   \n\n  TimeoutError.js   |     100 |      100 |     100 |     100 |                   \n\n  request.js        |   92.68 |    52.38 |     100 |    92.3 | 6,24,39           \n\n--------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 11 passed, 12 total\nSnapshots:   0 total\nTime:        5.325 s, estimated 11 s\nRan all test suites.\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":51,"line":23},"start":{"column":33,"line":23}}}],"source":"const { createWriteStream } = require('fs');\nconst { TimeoutError } = require('./TimeoutError');\nconst { http, https } = require('follow-redirects');\n\nmodule.exports = ({ url, dest, ...options }) => new Promise((resolve, reject) => {\n  const request = url.trimLeft().startsWith('https') ? https : http;\n\n  request\n    .get(url, options, (res) => {\n      if (res.statusCode !== 200) {\n        // Consume response data to free up memory\n        res.resume();\n        reject(new Error('Request Failed.\\n' +\n                         `Status Code: ${res.statusCode}`));\n\n        return;\n      }\n\n      res.pipe(createWriteStream(dest))\n        .on('error', reject)\n        .once('close', () => resolve({ filename: dest }));\n    })\n    .on('timeout', () => reject(new TimeoutError()))\n    .on('error', reject);\n});\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"All tests"}]}},"projectRoot":"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/image-downloader","config":{"usePrecomputed":true,"mutate":["index.js","lib/TimeoutError.js","lib/request.js"],"reporters":["json","html","progress"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunner":"command","testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"cucumber":{},"jest":{"projectType":"custom","enableFindRelatedTests":true},"mochaOptions":{},"tap":{"testFiles":["{**/@(test|tests|__test__|__tests__)/**,**/*.@(test|tests|spec)}.@(cjs|mjs|js|jsx|ts|tsx|mts|cts)"],"nodeArgs":["-r","{{hookFile}}","{{testFile}}"],"forceBail":true},"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.5","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.2.5","@stryker-mutator/karma-runner":"8.2.5","@stryker-mutator/jasmine-runner":"8.2.5","@stryker-mutator/jest-runner":"8.2.5","mocha":"10.4.0","jasmine-core":"5.1.2","jest":"28.1.3","typescript":"5.4.3"}}}