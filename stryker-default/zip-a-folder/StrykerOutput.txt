[32m15:17:11 (2469) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m15:17:11 (2469) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m15:17:11 (2469) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llmorpheus/llmorpheus/zip-a-folder/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[32m15:17:11 (2469) INFO ProjectReader[39m Found 1 of 25 file(s) to be mutated.
*** using standard mutators ***
Mutant 0 in ZipAFolder.ts: {
  const o: ZipAFolderOptions = zipAFolderOptions || {
    compression: COMPRESSION_LEVEL.high
  };
  if (o.compression === COMPRESSION_LEVEL.uncompressed) {
    await ZipAFolder.compress({
      src,
      targetFilePath: tarFilePath,
      format: 'tar',
      zipAFolderOptions
    });
  } else {
    await ZipAFolder.compress({
      src,
      targetFilePath: tarFilePath,
      format: 'tar',
      zipAFolderOptions,
      archiverOptions: {
        gzip: true,
        gzipOptions: {
          level: o.compression
        }
      }
    });
  }
} replaced with {}
Mutant 1 in ZipAFolder.ts: zipAFolderOptions || {
  compression: COMPRESSION_LEVEL.high
} replaced with true
Mutant 2 in ZipAFolder.ts: zipAFolderOptions || {
  compression: COMPRESSION_LEVEL.high
} replaced with false
Mutant 3 in ZipAFolder.ts: zipAFolderOptions || {
  compression: COMPRESSION_LEVEL.high
} replaced with zipAFolderOptions && {
  compression: COMPRESSION_LEVEL.high
}
Mutant 4 in ZipAFolder.ts: {
  compression: COMPRESSION_LEVEL.high
} replaced with {}
Mutant 5 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with true
Mutant 6 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with false
Mutant 7 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression !== COMPRESSION_LEVEL.uncompressed
Mutant 8 in ZipAFolder.ts: {
  await ZipAFolder.compress({
    src,
    targetFilePath: tarFilePath,
    format: 'tar',
    zipAFolderOptions
  });
} replaced with {}
Mutant 9 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {}
Mutant 10 in ZipAFolder.ts: 'tar' replaced with ""
Mutant 11 in ZipAFolder.ts: {
  await ZipAFolder.compress({
    src,
    targetFilePath: tarFilePath,
    format: 'tar',
    zipAFolderOptions,
    archiverOptions: {
      gzip: true,
      gzipOptions: {
        level: o.compression
      }
    }
  });
} replaced with {}
Mutant 12 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions,
  archiverOptions: {
    gzip: true,
    gzipOptions: {
      level: o.compression
    }
  }
} replaced with {}
Mutant 13 in ZipAFolder.ts: 'tar' replaced with ""
Mutant 14 in ZipAFolder.ts: {
  gzip: true,
  gzipOptions: {
    level: o.compression
  }
} replaced with {}
Mutant 15 in ZipAFolder.ts: true replaced with false
Mutant 16 in ZipAFolder.ts: {
  level: o.compression
} replaced with {}
Mutant 17 in ZipAFolder.ts: {
  const o: ZipAFolderOptions = zipAFolderOptions || {
    compression: COMPRESSION_LEVEL.high
  };
  if (o.compression === COMPRESSION_LEVEL.uncompressed) {
    await ZipAFolder.compress({
      src,
      targetFilePath: zipFilePath,
      format: 'zip',
      zipAFolderOptions,
      archiverOptions: {
        store: true
      }
    });
  } else {
    await ZipAFolder.compress({
      src,
      targetFilePath: zipFilePath,
      format: 'zip',
      zipAFolderOptions,
      archiverOptions: {
        zlib: {
          level: o.compression
        }
      }
    });
  }
} replaced with {}
Mutant 18 in ZipAFolder.ts: zipAFolderOptions || {
  compression: COMPRESSION_LEVEL.high
} replaced with true
Mutant 19 in ZipAFolder.ts: zipAFolderOptions || {
  compression: COMPRESSION_LEVEL.high
} replaced with false
Mutant 20 in ZipAFolder.ts: zipAFolderOptions || {
  compression: COMPRESSION_LEVEL.high
} replaced with zipAFolderOptions && {
  compression: COMPRESSION_LEVEL.high
}
Mutant 21 in ZipAFolder.ts: {
  compression: COMPRESSION_LEVEL.high
} replaced with {}
Mutant 22 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with true
Mutant 23 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with false
Mutant 24 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression !== COMPRESSION_LEVEL.uncompressed
Mutant 25 in ZipAFolder.ts: {
  await ZipAFolder.compress({
    src,
    targetFilePath: zipFilePath,
    format: 'zip',
    zipAFolderOptions,
    archiverOptions: {
      store: true
    }
  });
} replaced with {}
Mutant 26 in ZipAFolder.ts: {
  src,
  targetFilePath: zipFilePath,
  format: 'zip',
  zipAFolderOptions,
  archiverOptions: {
    store: true
  }
} replaced with {}
Mutant 27 in ZipAFolder.ts: 'zip' replaced with ""
Mutant 28 in ZipAFolder.ts: {
  store: true
} replaced with {}
Mutant 29 in ZipAFolder.ts: true replaced with false
Mutant 30 in ZipAFolder.ts: {
  await ZipAFolder.compress({
    src,
    targetFilePath: zipFilePath,
    format: 'zip',
    zipAFolderOptions,
    archiverOptions: {
      zlib: {
        level: o.compression
      }
    }
  });
} replaced with {}
Mutant 31 in ZipAFolder.ts: {
  src,
  targetFilePath: zipFilePath,
  format: 'zip',
  zipAFolderOptions,
  archiverOptions: {
    zlib: {
      level: o.compression
    }
  }
} replaced with {}
Mutant 32 in ZipAFolder.ts: 'zip' replaced with ""
Mutant 33 in ZipAFolder.ts: {
  zlib: {
    level: o.compression
  }
} replaced with {}
Mutant 34 in ZipAFolder.ts: {
  level: o.compression
} replaced with {}
Mutant 35 in ZipAFolder.ts: {
  let output: WriteStream;
  if (!zipAFolderOptions?.customWriteStream && targetFilePath) {
    const targetBasePath: string = path.dirname(targetFilePath);
    if (targetBasePath === src) {
      throw new Error('Source and target folder must be different.');
    }
    try {
      if (!isGlob(src)) {
        await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
      }
      await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
    } catch (e: any) {
      throw new Error(`Permission error: ${e.message}`);
    }
    output = fs.createWriteStream(targetFilePath);
  } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {
    output = zipAFolderOptions?.customWriteStream;
  } else {
    throw new Error('You must either provide a target file path or a custom write stream to write to.');
  }
  const zipArchive: archiver.Archiver = archiver(format, archiverOptions || {});
  return new Promise((resolve, reject) => {
    output.on('close', resolve);
    output.on('error', reject);
    zipArchive.pipe(output);
    if (isGlob(src)) {
      src.split(',').forEach(globPart => {
        zipArchive.glob(globPart);
      });
    } else {
      zipArchive.directory(src, false);
    }
    zipArchive.finalize();
  });
} replaced with {}
Mutant 36 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with true
Mutant 37 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with false
Mutant 38 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with !zipAFolderOptions?.customWriteStream || targetFilePath
Mutant 39 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream replaced with zipAFolderOptions?.customWriteStream
Mutant 40 in ZipAFolder.ts: zipAFolderOptions?.customWriteStream replaced with zipAFolderOptions.customWriteStream
Mutant 41 in ZipAFolder.ts: {
  const targetBasePath: string = path.dirname(targetFilePath);
  if (targetBasePath === src) {
    throw new Error('Source and target folder must be different.');
  }
  try {
    if (!isGlob(src)) {
      await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
    }
    await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
  } catch (e: any) {
    throw new Error(`Permission error: ${e.message}`);
  }
  output = fs.createWriteStream(targetFilePath);
} replaced with {}
Mutant 42 in ZipAFolder.ts: targetBasePath === src replaced with true
Mutant 43 in ZipAFolder.ts: targetBasePath === src replaced with false
Mutant 44 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath !== src
Mutant 45 in ZipAFolder.ts: {
  throw new Error('Source and target folder must be different.');
} replaced with {}
Mutant 46 in ZipAFolder.ts: 'Source and target folder must be different.' replaced with ""
Mutant 47 in ZipAFolder.ts: {
  if (!isGlob(src)) {
    await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
  }
  await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
} replaced with {}
Mutant 48 in ZipAFolder.ts: !isGlob(src) replaced with isGlob(src)
Mutant 49 in ZipAFolder.ts: !isGlob(src) replaced with true
Mutant 50 in ZipAFolder.ts: !isGlob(src) replaced with false
Mutant 51 in ZipAFolder.ts: {
  await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
} replaced with {}
Mutant 52 in ZipAFolder.ts: {
  throw new Error(`Permission error: ${e.message}`);
} replaced with {}
Mutant 53 in ZipAFolder.ts: `Permission error: ${e.message}` replaced with ``
Mutant 54 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with true
Mutant 55 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with false
Mutant 56 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions || zipAFolderOptions.customWriteStream
Mutant 57 in ZipAFolder.ts: {
  output = zipAFolderOptions?.customWriteStream;
} replaced with {}
Mutant 58 in ZipAFolder.ts: zipAFolderOptions?.customWriteStream replaced with zipAFolderOptions.customWriteStream
Mutant 59 in ZipAFolder.ts: {
  throw new Error('You must either provide a target file path or a custom write stream to write to.');
} replaced with {}
Mutant 60 in ZipAFolder.ts: 'You must either provide a target file path or a custom write stream to write to.' replaced with ""
Mutant 61 in ZipAFolder.ts: archiverOptions || {} replaced with true
Mutant 62 in ZipAFolder.ts: archiverOptions || {} replaced with false
Mutant 63 in ZipAFolder.ts: archiverOptions || {} replaced with archiverOptions && {}
Mutant 64 in ZipAFolder.ts: {
  output.on('close', resolve);
  output.on('error', reject);
  zipArchive.pipe(output);
  if (isGlob(src)) {
    src.split(',').forEach(globPart => {
      zipArchive.glob(globPart);
    });
  } else {
    zipArchive.directory(src, false);
  }
  zipArchive.finalize();
} replaced with {}
Mutant 65 in ZipAFolder.ts: 'close' replaced with ""
Mutant 66 in ZipAFolder.ts: 'error' replaced with ""
Mutant 67 in ZipAFolder.ts: isGlob(src) replaced with true
Mutant 68 in ZipAFolder.ts: isGlob(src) replaced with false
Mutant 69 in ZipAFolder.ts: {
  src.split(',').forEach(globPart => {
    zipArchive.glob(globPart);
  });
} replaced with {}
Mutant 70 in ZipAFolder.ts: ',' replaced with ""
Mutant 71 in ZipAFolder.ts: {
  zipArchive.glob(globPart);
} replaced with {}
Mutant 72 in ZipAFolder.ts: {
  zipArchive.directory(src, false);
} replaced with {}
Mutant 73 in ZipAFolder.ts: false replaced with true
[32m15:17:11 (2469) INFO Instrumenter[39m Instrumented 1 source file(s) with 74 mutant(s)
[32m15:17:12 (2469) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m15:17:13 (2469) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m15:17:13 (2469) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m15:17:17 (2469) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4687 ms, overhead 0 ms).
Mutation testing 2% (elapsed: <1m, remaining: ~6m) 2/74 tested (0 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~4m) 5/74 tested (1 survived, 0 timed out)
Mutation testing 9% (elapsed: <1m, remaining: ~4m) 7/74 tested (2 survived, 0 timed out)
Mutation testing 13% (elapsed: <1m, remaining: ~4m) 10/74 tested (3 survived, 0 timed out)
Mutation testing 17% (elapsed: <1m, remaining: ~3m) 13/74 tested (3 survived, 0 timed out)
Mutation testing 20% (elapsed: ~1m, remaining: ~3m) 15/74 tested (3 survived, 0 timed out)
Mutation testing 24% (elapsed: ~1m, remaining: ~3m) 18/74 tested (3 survived, 0 timed out)
Mutation testing 28% (elapsed: ~1m, remaining: ~3m) 21/74 tested (3 survived, 0 timed out)
Mutation testing 31% (elapsed: ~1m, remaining: ~3m) 23/74 tested (4 survived, 0 timed out)
Mutation testing 35% (elapsed: ~1m, remaining: ~3m) 26/74 tested (6 survived, 0 timed out)
Mutation testing 37% (elapsed: ~1m, remaining: ~3m) 28/74 tested (6 survived, 0 timed out)
Mutation testing 41% (elapsed: ~2m, remaining: ~2m) 31/74 tested (8 survived, 0 timed out)
Mutation testing 45% (elapsed: ~2m, remaining: ~2m) 34/74 tested (8 survived, 0 timed out)
Mutation testing 50% (elapsed: ~2m, remaining: ~2m) 37/74 tested (8 survived, 0 timed out)
Mutation testing 54% (elapsed: ~2m, remaining: ~2m) 40/74 tested (8 survived, 0 timed out)
Mutation testing 58% (elapsed: ~2m, remaining: ~1m) 43/74 tested (8 survived, 0 timed out)
Mutation testing 59% (elapsed: ~2m, remaining: ~1m) 44/74 tested (8 survived, 0 timed out)
Mutation testing 60% (elapsed: ~3m, remaining: ~1m) 45/74 tested (8 survived, 1 timed out)
Mutation testing 62% (elapsed: ~3m, remaining: ~1m) 46/74 tested (8 survived, 2 timed out)
Mutation testing 63% (elapsed: ~3m, remaining: ~1m) 47/74 tested (8 survived, 3 timed out)
Mutation testing 63% (elapsed: ~3m, remaining: ~2m) 47/74 tested (8 survived, 3 timed out)
Mutation testing 64% (elapsed: ~3m, remaining: ~1m) 48/74 tested (8 survived, 4 timed out)
Mutation testing 66% (elapsed: ~3m, remaining: ~1m) 49/74 tested (8 survived, 5 timed out)
Mutation testing 67% (elapsed: ~4m, remaining: ~1m) 50/74 tested (8 survived, 6 timed out)
Mutation testing 68% (elapsed: ~4m, remaining: ~1m) 51/74 tested (8 survived, 7 timed out)
Mutation testing 70% (elapsed: ~4m, remaining: ~1m) 52/74 tested (8 survived, 8 timed out)
Mutation testing 70% (elapsed: ~4m, remaining: ~1m) 52/74 tested (8 survived, 8 timed out)
Mutation testing 71% (elapsed: ~4m, remaining: ~1m) 53/74 tested (8 survived, 9 timed out)
Mutation testing 72% (elapsed: ~4m, remaining: ~1m) 54/74 tested (8 survived, 10 timed out)
Mutation testing 74% (elapsed: ~5m, remaining: ~1m) 55/74 tested (8 survived, 11 timed out)
Mutation testing 75% (elapsed: ~5m, remaining: ~1m) 56/74 tested (8 survived, 12 timed out)
Mutation testing 77% (elapsed: ~5m, remaining: ~1m) 57/74 tested (8 survived, 13 timed out)
Mutation testing 77% (elapsed: ~5m, remaining: ~1m) 57/74 tested (8 survived, 13 timed out)
Mutation testing 78% (elapsed: ~5m, remaining: ~1m) 58/74 tested (8 survived, 14 timed out)
Mutation testing 79% (elapsed: ~5m, remaining: ~1m) 59/74 tested (8 survived, 15 timed out)
Mutation testing 81% (elapsed: ~6m, remaining: ~1m) 60/74 tested (8 survived, 16 timed out)
Mutation testing 82% (elapsed: ~6m, remaining: ~1m) 61/74 tested (8 survived, 17 timed out)
Mutation testing 83% (elapsed: ~6m, remaining: ~1m) 62/74 tested (8 survived, 18 timed out)
Mutation testing 83% (elapsed: ~6m, remaining: ~1m) 62/74 tested (8 survived, 18 timed out)
Mutation testing 85% (elapsed: ~6m, remaining: ~1m) 63/74 tested (8 survived, 19 timed out)
Mutation testing 86% (elapsed: ~6m, remaining: ~1m) 64/74 tested (8 survived, 20 timed out)
Mutation testing 87% (elapsed: ~7m, remaining: <1m) 65/74 tested (8 survived, 21 timed out)
Mutation testing 89% (elapsed: ~7m, remaining: <1m) 66/74 tested (8 survived, 22 timed out)
Mutation testing 90% (elapsed: ~7m, remaining: <1m) 67/74 tested (8 survived, 23 timed out)
Mutation testing 91% (elapsed: ~7m, remaining: <1m) 68/74 tested (8 survived, 23 timed out)
Mutation testing 93% (elapsed: ~7m, remaining: <1m) 69/74 tested (8 survived, 24 timed out)
Mutation testing 94% (elapsed: ~7m, remaining: <1m) 70/74 tested (8 survived, 25 timed out)
Mutation testing 95% (elapsed: ~8m, remaining: <1m) 71/74 tested (8 survived, 26 timed out)
Mutation testing 95% (elapsed: ~8m, remaining: <1m) 71/74 tested (8 survived, 26 timed out)
Mutation testing 98% (elapsed: ~8m, remaining: <1m) 73/74 tested (8 survived, 27 timed out)

All tests
  ✓ All tests (killed 38)

[Survived] ObjectLiteral
lib/ZipAFolder.ts:36:59
-           const o: ZipAFolderOptions = zipAFolderOptions || {
-               compression: COMPRESSION_LEVEL.high,
-           };
+           const o: ZipAFolderOptions = zipAFolderOptions || {};

[Survived] ConditionalExpression
lib/ZipAFolder.ts:40:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (false) {

[Survived] BlockStatement
lib/ZipAFolder.ts:40:63
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
-           } else {
+           if (o.compression === COMPRESSION_LEVEL.uncompressed) {} else {

[Survived] ObjectLiteral
lib/ZipAFolder.ts:70:59
-           const o: ZipAFolderOptions = zipAFolderOptions || {
-               compression: COMPRESSION_LEVEL.high,
-           };
+           const o: ZipAFolderOptions = zipAFolderOptions || {};

[Survived] ConditionalExpression
lib/ZipAFolder.ts:74:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (false) {

[Survived] BlockStatement
lib/ZipAFolder.ts:74:63
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
-               await ZipAFolder.compress({
-                   src,
-                   targetFilePath: zipFilePath,
-                   format: 'zip',
-                   zipAFolderOptions,
-                   archiverOptions: {
-                       store: true,
-                   },
-               });
-           } else {
+           if (o.compression === COMPRESSION_LEVEL.uncompressed) {} else {

[Survived] ObjectLiteral
lib/ZipAFolder.ts:80:34
-                   archiverOptions: {
-                       store: true,
-                   },
+                   archiverOptions: {},

[Survived] BooleanLiteral
lib/ZipAFolder.ts:81:28
-                       store: true,
+                       store: false,

Ran 0.62 tests per mutant on average.
---------------|---------|----------|-----------|------------|----------|----------|
File           | % score | # killed | # timeout | # survived | # no cov | # errors |
---------------|---------|----------|-----------|------------|----------|----------|
All files      |   89.19 |       38 |        28 |          8 |        0 |        0 |
 ZipAFolder.ts |   89.19 |       38 |        28 |          8 |        0 |        0 |
---------------|---------|----------|-----------|------------|----------|----------|
[32m15:25:42 (2469) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llmorpheus/llmorpheus/zip-a-folder/reports/mutation/mutation.html
[32m15:25:42 (2469) INFO MutationTestExecutor[39m Done in 8 minutes 31 seconds.

real	8m33.272s
user	4m39.830s
sys	0m28.498s
