{"files":{"src/geo-point.ts":{"language":"typescript","mutants":[{"id":"4","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":1,"location":{"end":{"column":54,"line":11},"start":{"column":29,"line":11}}},{"id":"0","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    2) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  8 passing (36ms)\n\n  2 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should construct from GeoJSON:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 54.76% ( 138/252 )\n\nBranches     : 43.79% ( 187/427 )\nFunctions    : 51.92% ( 27/52 )\nLines        : 64.73% ( 134/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":72,"line":11},"start":{"column":18,"line":11}}},{"id":"3","mutatorName":"LogicalOperator","replacement":"typeof input === 'object' || input !== null","status":"Survived","testsCompleted":1,"location":{"end":{"column":72,"line":11},"start":{"column":29,"line":11}}},{"id":"6","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    2) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  8 passing (92ms)\n\n  2 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should construct from GeoJSON:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 54.76% ( 138/252 )\nBranches     : 44.73% ( 191/427 )\nFunctions    : 51.92% ( 27/52 )\nLines        : 64.73% ( 134/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":54,"line":11},"start":{"column":46,"line":11}}},{"id":"2","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    2) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  8 passing (84ms)\n  2 failing\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  2) all-tests\n       should construct from GeoJSON:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 54.76% ( 138/252 )\nBranches     : 45.43% ( 194/427 )\nFunctions    : 51.92% ( 27/52 )\nLines        : 64.73% ( 134/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":72,"line":11},"start":{"column":29,"line":11}}},{"id":"1","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":1,"location":{"end":{"column":72,"line":11},"start":{"column":29,"line":11}}},{"id":"5","mutatorName":"EqualityOperator","replacement":"typeof input !== 'object'","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    2) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  8 passing (21ms)\n  2 failing\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  2) all-tests\n       should construct from GeoJSON:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 54.76% ( 138/252 )\nBranches     : 45.43% ( 194/427 )\n\nFunctions    : 51.92% ( 27/52 )\nLines        : 64.73% ( 134/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":54,"line":11},"start":{"column":29,"line":11}}},{"id":"7","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","testsCompleted":1,"location":{"end":{"column":72,"line":11},"start":{"column":58,"line":11}}},{"id":"8","mutatorName":"EqualityOperator","replacement":"input === null","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    2) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  8 passing (71ms)\n\n  2 failing\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should construct from GeoJSON:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 54.36% ( 137/252 )\n\nBranches     : 44.02% ( 188/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 64.73% ( 134/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":72,"line":11},"start":{"column":58,"line":11}}},{"id":"9","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (65ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n\n      AssertionError: expected [ undefined, undefined ] to deeply equal [ 1, 2 ]\n      + expected - actual\n\n       [\n      -  [undefined]\n      -  [undefined]\n      +  1\n      +  2\n       ]\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:9:37)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     TypeError: deg2rad()::invalid input argument. Must provide either a single numeric value or a numeric array.\n      at deg2rad (/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point/node_modules/compute-deg2rad/lib/index.js:44:9)\n      at Function.calculateDistance (src/geo-point.ts:17:55)\n      at Context.<anonymous> (src/geo-point.spec.ts:17:31)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:27:28)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  4) all-tests\n       should convert to string:\n\n      AssertionError: expected 'undefined,undefined' to equal '51.5,-0.15'\n      + expected - actual\n\n      -undefined,undefined\n      +51.5,-0.15\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:33:26)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  5) all-tests\n       should convert to a plain object:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:44:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  6) all-tests\n       should construct from GeoJSON:\n\n      AssertionError: expected { latitude: undefined, …(1) } to deeply equal { latitude: 51.5, longitude: -0.15 }\n      + expected - actual\n\n       {\n      -  \"latitude\": [undefined]\n      -  \"longitude\": [undefined]\n      +  \"latitude\": 51.5\n      +  \"longitude\": -0.15\n       }\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:54:31)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     TypeError: deg2rad()::invalid input argument. Must provide either a single numeric value or a numeric array.\n      at deg2rad (/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point/node_modules/compute-deg2rad/lib/index.js:44:9)\n      at Function.calculateBearing (src/geo-point.ts:22:24)\n      at Context.<anonymous> (src/geo-point.spec.ts:61:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     TypeError: deg2rad()::invalid input argument. Must provide either a single numeric value or a numeric array.\n      at deg2rad (/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point/node_modules/compute-deg2rad/lib/index.js:44:9)\n      at Function.calculateDestination (src/geo-point.ts:33:2)\n      at GeoPoint.calculateDestination (src/geo-point.ts:48:44)\n      at Context.<anonymous> (src/geo-point.spec.ts:80:22)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  9) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected NaN to equal 130986\n      + expected - actual\n\n      -NaN\n      +130986\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:92:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  10) all-tests\n       should adjust precision:\n     TypeError: Cannot read properties of undefined (reading 'toFixed')\n      at adjust (src/geo-point.ts:103:37)\n      at GeoPoint.adjustPrecision (src/geo-point.ts:103:37)\n      at Context.<anonymous> (src/geo-point.spec.ts:98:27)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 54.36% ( 137/252 )\nBranches     : 44.49% ( 190/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 64.73% ( 134/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":52},"start":{"column":52,"line":37}}},{"id":"10","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (75ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  4) all-tests\n       should convert to string:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  10) all-tests\n       should adjust precision:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 55.55% ( 140/252 )\nBranches     : 45.43% ( 194/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 66.18% ( 137/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":70,"line":38},"start":{"column":9,"line":38}}},{"id":"11","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":70,"line":38},"start":{"column":9,"line":38}}},{"id":"12","mutatorName":"LogicalOperator","replacement":"typeof latitude !== 'number' && typeof longitude !== 'number'","status":"Survived","testsCompleted":1,"location":{"end":{"column":70,"line":38},"start":{"column":9,"line":38}}},{"id":"13","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":37,"line":38},"start":{"column":9,"line":38}}},{"id":"15","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (89ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 23.41% ( 59/252 )\nBranches     : 20.6% ( 88/427 )\nFunctions    : 23.07% ( 12/52 )\nLines        : 27.53% ( 57/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":37,"line":38},"start":{"column":29,"line":38}}},{"id":"14","mutatorName":"EqualityOperator","replacement":"typeof latitude === 'number'","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (98ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  4) all-tests\n       should convert to string:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  10) all-tests\n       should adjust precision:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 23.41% ( 59/252 )\nBranches     : 20.6% ( 88/427 )\nFunctions    : 23.07% ( 12/52 )\nLines        : 27.53% ( 57/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":37,"line":38},"start":{"column":9,"line":38}}},{"id":"17","mutatorName":"EqualityOperator","replacement":"typeof longitude === 'number'","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n  0 passing (75ms)\n  10 failing\n\n  1) all-tests\n       should create an instance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n  2) all-tests\n       should calculate distance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n  8) all-tests\n       should calculate destination:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 23.41% ( 59/252 )\nBranches     : 21.31% ( 91/427 )\nFunctions    : 23.07% ( 12/52 )\n\nLines        : 27.53% ( 57/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":70,"line":38},"start":{"column":41,"line":38}}},{"id":"16","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":70,"line":38},"start":{"column":41,"line":38}}},{"id":"18","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (95ms)\n  10 failing\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n  2) all-tests\n       should calculate distance:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n  8) all-tests\n       should calculate destination:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 53.17% ( 134/252 )\nBranches     : 44.26% ( 189/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":70,"line":38},"start":{"column":62,"line":38}}},{"id":"19","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":40},"start":{"column":72,"line":38}}},{"id":"21","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\nENOENT: no such file or directory, mkdir '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point/.stryker-tmp/sandbox2795372/.nyc_output/processinfo'\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":40,"line":42},"start":{"column":9,"line":42}}},{"id":"20","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":53,"line":39},"start":{"column":28,"line":39}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":40,"line":42},"start":{"column":9,"line":42}}},{"id":"24","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":23,"line":42},"start":{"column":9,"line":42}}},{"id":"23","mutatorName":"LogicalOperator","replacement":"latitude < -90 && latitude > 90","status":"Survived","testsCompleted":1,"location":{"end":{"column":40,"line":42},"start":{"column":9,"line":42}}},{"id":"25","mutatorName":"EqualityOperator","replacement":"latitude <= -90","status":"Survived","testsCompleted":1,"location":{"end":{"column":23,"line":42},"start":{"column":9,"line":42}}},{"id":"26","mutatorName":"EqualityOperator","replacement":"latitude >= -90","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (24ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  10) all-tests\n       should adjust precision:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 53.17% ( 134/252 )\nBranches     : 44.02% ( 188/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":23,"line":42},"start":{"column":9,"line":42}}},{"id":"28","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":40,"line":42},"start":{"column":27,"line":42}}},{"id":"27","mutatorName":"UnaryOperator","replacement":"+90","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n  0 passing (76ms)\n  10 failing\n\n  1) all-tests\n       should create an instance:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n  2) all-tests\n       should calculate distance:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n  8) all-tests\n       should calculate destination:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 0% ( 0/81 )\nBranches     : 0% ( 0/34 )\n\nFunctions    : 0% ( 0/21 )\nLines        : 0% ( 0/76 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":23,"line":42},"start":{"column":20,"line":42}}},{"id":"30","mutatorName":"EqualityOperator","replacement":"latitude <= 90","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (146ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: bad latitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 23.8% ( 60/252 )\n\nBranches     : 23.88% ( 102/427 )\nFunctions    : 23.07% ( 12/52 )\n\nLines        : 28.01% ( 58/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":40,"line":42},"start":{"column":27,"line":42}}},{"id":"31","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":44},"start":{"column":42,"line":42}}},{"id":"29","mutatorName":"EqualityOperator","replacement":"latitude >= 90","status":"Survived","testsCompleted":1,"location":{"end":{"column":40,"line":42},"start":{"column":27,"line":42}}},{"id":"32","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":48,"line":43},"start":{"column":28,"line":43}}},{"id":"33","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (63ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  10) all-tests\n       should adjust precision:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 54.36% ( 137/252 )\nBranches     : 44.49% ( 190/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 64.73% ( 134/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":44,"line":46},"start":{"column":9,"line":46}}},{"id":"34","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":44,"line":46},"start":{"column":9,"line":46}}},{"id":"35","mutatorName":"LogicalOperator","replacement":"longitude < -180 && longitude > 180","status":"Survived","testsCompleted":1,"location":{"end":{"column":44,"line":46},"start":{"column":9,"line":46}}},{"id":"36","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":25,"line":46},"start":{"column":9,"line":46}}},{"id":"37","mutatorName":"EqualityOperator","replacement":"longitude <= -180","status":"Survived","testsCompleted":1,"location":{"end":{"column":25,"line":46},"start":{"column":9,"line":46}}},{"id":"38","mutatorName":"EqualityOperator","replacement":"longitude >= -180","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (53ms)\n\n  10 failing\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  4) all-tests\n       should convert to string:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.32% ( 185/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":25,"line":46},"start":{"column":9,"line":46}}},{"id":"40","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":44,"line":46},"start":{"column":29,"line":46}}},{"id":"39","mutatorName":"UnaryOperator","replacement":"+180","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (29ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should calculate distance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  8) all-tests\n       should calculate destination:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 53.17% ( 134/252 )\nBranches     : 44.26% ( 189/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":25,"line":46},"start":{"column":21,"line":46}}},{"id":"41","mutatorName":"EqualityOperator","replacement":"longitude >= 180","status":"Survived","testsCompleted":1,"location":{"end":{"column":44,"line":46},"start":{"column":29,"line":46}}},{"id":"42","mutatorName":"EqualityOperator","replacement":"longitude <= 180","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    2) should calculate distance\n\n    3) should convert to GeoJSON\n\n    4) should convert to string\n\n    5) should convert to a plain object\n\n    6) should construct from GeoJSON\n\n    7) should calculate bearing\n\n    8) should calculate destination\n\n    9) should return tile coordinates\n\n    10) should adjust precision\n\n\n\n\n\n  0 passing (107ms)\n\n  10 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:8:17)\n      at processImmediate (node:internal/timers:478:21)\n\n  2) all-tests\n       should calculate distance:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:14:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  3) all-tests\n       should convert to GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:22:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  4) all-tests\n       should convert to string:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:32:16)\n      at processImmediate (node:internal/timers:478:21)\n\n  5) all-tests\n       should convert to a plain object:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  6) all-tests\n       should construct from GeoJSON:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.fromLngLatArray (src/geo-point.ts:42:6)\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n  7) all-tests\n       should calculate bearing:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:62:7)\n      at processImmediate (node:internal/timers:478:21)\n\n  8) all-tests\n       should calculate destination:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:78:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  9) all-tests\n       should return tile coordinates:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:88:19)\n      at processImmediate (node:internal/timers:478:21)\n\n  10) all-tests\n       should adjust precision:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Context.<anonymous> (src/geo-point.spec.ts:97:20)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 24.2% ( 61/252 )\nBranches     : 26.93% ( 115/427 )\n\nFunctions    : 23.07% ( 12/52 )\nLines        : 28.5% ( 59/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":44,"line":46},"start":{"column":29,"line":46}}},{"id":"43","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":48},"start":{"column":46,"line":46}}},{"id":"45","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (47ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: Cannot read properties of undefined (reading 'toObject')\n      at Context.<anonymous> (src/geo-point.spec.ts:54:8)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.62% ( 182/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":77},"start":{"column":46,"line":59}}},{"id":"44","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":49,"line":47},"start":{"column":28,"line":47}}},{"id":"46","mutatorName":"BooleanLiteral","replacement":"isObject(point)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (175ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.55% ( 186/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":25,"line":60},"start":{"column":9,"line":60}}},{"id":"47","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (38ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.79% ( 187/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":25,"line":60},"start":{"column":9,"line":60}}},{"id":"48","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":25,"line":60},"start":{"column":9,"line":60}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":62},"start":{"column":27,"line":60}}},{"id":"51","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (174ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: Object must have type and coordinates\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 50.79% ( 128/252 )\n\nBranches     : 37.93% ( 162/427 )\nFunctions    : 48.07% ( 25/52 )\nLines        : 60.38% ( 125/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":78,"line":64},"start":{"column":9,"line":64}}},{"id":"52","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":78,"line":64},"start":{"column":9,"line":64}}},{"id":"50","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":65,"line":61},"start":{"column":27,"line":61}}},{"id":"54","mutatorName":"BooleanLiteral","replacement":"point.hasOwnProperty('type')","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (22ms)\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: Object must have type and coordinates\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 53.17% ( 134/252 )\nBranches     : 44.26% ( 189/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":38,"line":64},"start":{"column":9,"line":64}}},{"id":"53","mutatorName":"LogicalOperator","replacement":"!point.hasOwnProperty('type') && !point.hasOwnProperty('coordinates')","status":"Survived","testsCompleted":1,"location":{"end":{"column":78,"line":64},"start":{"column":9,"line":64}}},{"id":"55","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (22ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: Object must have type and coordinates\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 74.85% ( 128/171 )\nBranches     : 41.98% ( 165/393 )\nFunctions    : 80.64% ( 25/31 )\nLines        : 75.3% ( 125/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":37,"line":64},"start":{"column":31,"line":64}}},{"id":"56","mutatorName":"BooleanLiteral","replacement":"point.hasOwnProperty('coordinates')","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (29ms)\n  1 failing\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: Object must have type and coordinates\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 74.85% ( 128/171 )\nBranches     : 42.74% ( 168/393 )\nFunctions    : 80.64% ( 25/31 )\nLines        : 75.3% ( 125/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":78,"line":64},"start":{"column":42,"line":64}}},{"id":"57","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (53ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: Object must have type and coordinates\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 50.79% ( 128/252 )\nBranches     : 39.34% ( 168/427 )\n\nFunctions    : 48.07% ( 25/52 )\nLines        : 60.38% ( 125/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":77,"line":64},"start":{"column":64,"line":64}}},{"id":"58","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":66},"start":{"column":80,"line":64}}},{"id":"61","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":31,"line":68},"start":{"column":9,"line":68}}},{"id":"59","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":66,"line":65},"start":{"column":27,"line":65}}},{"id":"60","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (91ms)\n  1 failing\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: The value of type should be 'Point'\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 75.43% ( 129/171 )\nBranches     : 43.76% ( 172/393 )\nFunctions    : 80.64% ( 25/31 )\nLines        : 75.9% ( 126/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":68},"start":{"column":9,"line":68}}},{"id":"63","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (31ms)\n\n  1 failing\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: The value of type should be 'Point'\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 75.43% ( 129/171 )\nBranches     : 44.27% ( 174/393 )\nFunctions    : 80.64% ( 25/31 )\nLines        : 75.9% ( 126/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":68},"start":{"column":24,"line":68}}},{"id":"62","mutatorName":"EqualityOperator","replacement":"point.type === 'Point'","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (28ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: The value of type should be 'Point'\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 75.43% ( 129/171 )\nBranches     : 44.52% ( 175/393 )\n\nFunctions    : 80.64% ( 25/31 )\nLines        : 75.9% ( 126/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":31,"line":68},"start":{"column":9,"line":68}}},{"id":"64","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":70},"start":{"column":33,"line":68}}},{"id":"65","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":66,"line":69},"start":{"column":27,"line":69}}},{"id":"66","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (22ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: coordinates must be an array and contain 2 elements\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.02% ( 130/171 )\n\nBranches     : 45.03% ( 177/393 )\n\nFunctions    : 80.64% ( 25/31 )\n\nLines        : 76.5% ( 127/166 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":76,"line":72},"start":{"column":9,"line":72}}},{"id":"69","mutatorName":"BooleanLiteral","replacement":"Array.isArray(point.coordinates)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (22ms)\n  1 failing\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: coordinates must be an array and contain 2 elements\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.02% ( 130/171 )\nBranches     : 45.54% ( 179/393 )\nFunctions    : 80.64% ( 25/31 )\nLines        : 76.5% ( 127/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":42,"line":72},"start":{"column":9,"line":72}}},{"id":"67","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":76,"line":72},"start":{"column":9,"line":72}}},{"id":"68","mutatorName":"LogicalOperator","replacement":"!Array.isArray(point.coordinates) && point.coordinates.length !== 2","status":"Survived","testsCompleted":1,"location":{"end":{"column":76,"line":72},"start":{"column":9,"line":72}}},{"id":"70","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":76,"line":72},"start":{"column":46,"line":72}}},{"id":"72","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":74},"start":{"column":78,"line":72}}},{"id":"71","mutatorName":"EqualityOperator","replacement":"point.coordinates.length === 2","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (91ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: coordinates must be an array and contain 2 elements\n      at Function.fromGeoJSON (src/geo-point.ts:8:22)\n      at Context.<anonymous> (src/geo-point.spec.ts:49:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.32% ( 185/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":76,"line":72},"start":{"column":46,"line":72}}},{"id":"73","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":80,"line":73},"start":{"column":27,"line":73}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (51ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 77.19% ( 132/171 )\nBranches     : 43.76% ( 172/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.71% ( 129/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":26,"line":85},"start":{"column":9,"line":85}}},{"id":"75","mutatorName":"BooleanLiteral","replacement":"isObject(object)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (55ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: GeoPoint: Argument must be an object\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 77.19% ( 132/171 )\n\nBranches     : 44.27% ( 174/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.71% ( 129/166 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":26,"line":85},"start":{"column":9,"line":85}}},{"id":"74","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (80ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: Cannot read properties of undefined (reading 'toObject')\n      at Context.<anonymous> (src/geo-point.spec.ts:41:18)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : Unknown% ( 0/0 )\nBranches     : Unknown% ( 0/0 )\nFunctions    : Unknown% ( 0/0 )\nLines        : Unknown% ( 0/0 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":94},"start":{"column":47,"line":84}}},{"id":"77","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":26,"line":85},"start":{"column":9,"line":85}}},{"id":"78","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":87},"start":{"column":28,"line":85}}},{"id":"79","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":65,"line":86},"start":{"column":27,"line":86}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (52ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: Object must have latitude and longitude\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.32% ( 185/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":82,"line":89},"start":{"column":9,"line":89}}},{"id":"81","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":82,"line":89},"start":{"column":9,"line":89}}},{"id":"82","mutatorName":"LogicalOperator","replacement":"!object.hasOwnProperty('latitude') && !object.hasOwnProperty('longitude')","status":"Survived","testsCompleted":1,"location":{"end":{"column":82,"line":89},"start":{"column":9,"line":89}}},{"id":"83","mutatorName":"BooleanLiteral","replacement":"object.hasOwnProperty('latitude')","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (56ms)\n  1 failing\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: Object must have latitude and longitude\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 77.77% ( 133/171 )\n\nBranches     : 45.54% ( 179/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 78.31% ( 130/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":43,"line":89},"start":{"column":9,"line":89}}},{"id":"84","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (126ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: Object must have latitude and longitude\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : Unknown% ( 0/0 )\nBranches     : Unknown% ( 0/0 )\n\nFunctions    : Unknown% ( 0/0 )\nLines        : Unknown% ( 0/0 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":42,"line":89},"start":{"column":32,"line":89}}},{"id":"87","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":6,"line":91},"start":{"column":84,"line":89}}},{"id":"86","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (75ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: Object must have latitude and longitude\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.55% ( 186/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":81,"line":89},"start":{"column":70,"line":89}}},{"id":"85","mutatorName":"BooleanLiteral","replacement":"object.hasOwnProperty('longitude')","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (75ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: Object must have latitude and longitude\n      at Function.fromObject (src/geo-point.ts:12:23)\n      at Context.<anonymous> (src/geo-point.spec.ts:37:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.55% ( 186/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":82,"line":89},"start":{"column":47,"line":89}}},{"id":"88","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","testsCompleted":1,"location":{"end":{"column":68,"line":90},"start":{"column":27,"line":90}}},{"id":"89","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (15ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected NaN to equal 11142\n      + expected - actual\n\n      -NaN\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 71.92% ( 123/171 )\n\nBranches     : 43.25% ( 170/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 72.28% ( 120/166 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":111},"start":{"column":72,"line":102}}},{"id":"91","mutatorName":"ArithmeticOperator","replacement":"cos(point1Rad) * cos(point2Rad) / cos(a)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (80ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected 11099 to equal 11142\n      + expected - actual\n\n      -11099\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\nBranches     : 45.8% ( 180/393 )\n\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":55,"line":106},"start":{"column":15,"line":106}}},{"id":"90","mutatorName":"ArithmeticOperator","replacement":"deg2rad(point2.longitude) + deg2rad(point1.longitude)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (103ms)\n\n  1 failing\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected 24149 to equal 11142\n      + expected - actual\n\n      -24149\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 76.6% ( 131/171 )\nBranches     : 46.56% ( 183/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":68,"line":105},"start":{"column":15,"line":105}}},{"id":"92","mutatorName":"ArithmeticOperator","replacement":"cos(point1Rad) / cos(point2Rad)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (84ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected +0 to equal 11142\n      + expected - actual\n\n      -0\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.38% ( 181/427 )\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":46,"line":106},"start":{"column":15,"line":106}}},{"id":"94","mutatorName":"ArithmeticOperator","replacement":"b - c","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (35ms)\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected 11464904 to equal 11142\n      + expected - actual\n\n      -11464904\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 43.09% ( 184/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":108},"start":{"column":15,"line":108}}},{"id":"93","mutatorName":"ArithmeticOperator","replacement":"sin(point1Rad) / sin(point2Rad)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (49ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected +0 to equal 11142\n      + expected - actual\n\n      -0\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.32% ( 185/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":46,"line":107},"start":{"column":15,"line":107}}},{"id":"95","mutatorName":"ArithmeticOperator","replacement":"acos(r > 1 ? 1 : r) / 6371392.896","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (72ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected +0 to equal 11142\n      + expected - actual\n\n      -0\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.79% ( 187/427 )\n\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":45,"line":110},"start":{"column":12,"line":110}}},{"id":"98","mutatorName":"EqualityOperator","replacement":"r >= 1","status":"Survived","testsCompleted":1,"location":{"end":{"column":22,"line":110},"start":{"column":17,"line":110}}},{"id":"96","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance (53ms)\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (135ms)\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected +0 to equal 11142\n      + expected - actual\n\n      -0\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\nBranches     : 46.56% ( 183/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":110},"start":{"column":17,"line":110}}},{"id":"97","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","testsCompleted":1,"location":{"end":{"column":22,"line":110},"start":{"column":17,"line":110}}},{"id":"102","mutatorName":"ArithmeticOperator","replacement":"sin(Δλ) / cos(φ2)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\nENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point/.stryker-tmp/sandbox2795372/.nyc_output/processinfo/5e202d05-7736-466a-9541-bffe3261b24c.json'\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":124},"start":{"column":15,"line":124}}},{"id":"100","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (102ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected NaN to equal 89\n      + expected - actual\n\n      -NaN\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.09% ( 184/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":129},"start":{"column":71,"line":119}}},{"id":"99","mutatorName":"EqualityOperator","replacement":"r <= 1","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    1) should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (32ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate distance:\n\n      AssertionError: expected +0 to equal 11142\n      + expected - actual\n\n      -0\n      +11142\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:18:33)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 51.98% ( 131/252 )\nBranches     : 43.09% ( 184/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":22,"line":110},"start":{"column":17,"line":110}}},{"id":"101","mutatorName":"ArithmeticOperator","replacement":"point2.longitude + point1.longitude","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (79ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected 90 to equal 89\n      + expected - actual\n\n      -90\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.32% ( 185/427 )\n\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":59,"line":121},"start":{"column":24,"line":121}}},{"id":"103","mutatorName":"ArithmeticOperator","replacement":"cos(φ1) * sin(φ2) + sin(φ1) * cos(φ2) * cos(Δλ)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (106ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected 1 to equal 89\n      + expected - actual\n\n      -1\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 76.6% ( 131/171 )\nBranches     : 45.29% ( 178/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":125},"start":{"column":15,"line":125}}},{"id":"104","mutatorName":"ArithmeticOperator","replacement":"cos(φ1) / sin(φ2)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (122ms)\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected 3 to equal 89\n      + expected - actual\n\n      -3\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.62% ( 182/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":32,"line":125},"start":{"column":15,"line":125}}},{"id":"105","mutatorName":"ArithmeticOperator","replacement":"sin(φ1) * cos(φ2) / cos(Δλ)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (16ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected 91 to equal 89\n      + expected - actual\n\n      -91\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 43.09% ( 184/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":62,"line":125},"start":{"column":35,"line":125}}},{"id":"106","mutatorName":"ArithmeticOperator","replacement":"sin(φ1) / cos(φ2)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (34ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected 179 to equal 89\n      + expected - actual\n\n      -179\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.32% ( 185/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":52,"line":125},"start":{"column":35,"line":125}}},{"id":"108","mutatorName":"ArithmeticOperator","replacement":"rad2deg(θ) - 360","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (26ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected -271 to equal 89\n      + expected - actual\n\n      --271\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.62% ( 182/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":29,"line":128},"start":{"column":13,"line":128}}},{"id":"107","mutatorName":"ArithmeticOperator","replacement":"(rad2deg(θ) + 360) * 360","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    1) should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (50ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate bearing:\n\n      AssertionError: expected 161817 to equal 89\n      + expected - actual\n\n      -161817\n      +89\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:64:15)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 42.62% ( 182/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":36,"line":128},"start":{"column":12,"line":128}}},{"id":"109","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (75ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate destination:\n     TypeError: Cannot read properties of undefined (reading 'longitude')\n      at Context.<anonymous> (src/geo-point.spec.ts:82:8)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.09% ( 184/427 )\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":163},"start":{"column":96,"line":138}}},{"id":"110","mutatorName":"ArithmeticOperator","replacement":"Number(distance) * radius","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (42ms)\n\n  1 failing\n\n\n  1) all-tests\n       should calculate destination:\n\n      AssertionError: expected -180 to equal +0\n      + expected - actual\n\n      --180\n      +0\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:82:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.85% ( 183/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":40,"line":143},"start":{"column":15,"line":143}}},{"id":"111","mutatorName":"ArithmeticOperator","replacement":"sinφ1 * cosδ - cosφ1 * sinδ * cosθ","status":"Survived","testsCompleted":1,"location":{"end":{"column":53,"line":153},"start":{"column":19,"line":153}}},{"id":"112","mutatorName":"ArithmeticOperator","replacement":"sinφ1 / cosδ","status":"Survived","testsCompleted":1,"location":{"end":{"column":31,"line":153},"start":{"column":19,"line":153}}},{"id":"113","mutatorName":"ArithmeticOperator","replacement":"cosφ1 * sinδ / cosθ","status":"Survived","testsCompleted":1,"location":{"end":{"column":53,"line":153},"start":{"column":34,"line":153}}},{"id":"114","mutatorName":"ArithmeticOperator","replacement":"cosφ1 / sinδ","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (71ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate destination:\n     TypeError: rad2deg()::invalid input argument. Must provide either a single numeric value or a numeric array.\n      at rad2deg (/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point/node_modules/compute-rad2deg/lib/index.js:44:9)\n      at Function.calculateDestination (src/geo-point.ts:33:2)\n      at GeoPoint.calculateDestination (src/geo-point.ts:48:44)\n      at Context.<anonymous> (src/geo-point.spec.ts:80:22)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.19% ( 129/252 )\nBranches     : 41.68% ( 178/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 60.86% ( 126/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":46,"line":153},"start":{"column":34,"line":153}}},{"id":"115","mutatorName":"ArithmeticOperator","replacement":"sinθ * sinδ / cosφ1","status":"Survived","testsCompleted":1,"location":{"end":{"column":34,"line":155},"start":{"column":15,"line":155}}},{"id":"116","mutatorName":"ArithmeticOperator","replacement":"sinθ / sinδ","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (14ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate destination:\n\n      AssertionError: expected -1.4210854715202004e-11 to equal +0\n      + expected - actual\n\n      --1.4210854715202004e-11\n      +0\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:82:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.09% ( 184/427 )\n\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":26,"line":155},"start":{"column":15,"line":155}}},{"id":"117","mutatorName":"ArithmeticOperator","replacement":"cosδ + sinφ1 * sinφ2","status":"Survived","testsCompleted":1,"location":{"end":{"column":35,"line":156},"start":{"column":15,"line":156}}},{"id":"118","mutatorName":"ArithmeticOperator","replacement":"sinφ1 / sinφ2","status":"Survived","testsCompleted":1,"location":{"end":{"column":35,"line":156},"start":{"column":22,"line":156}}},{"id":"119","mutatorName":"ArithmeticOperator","replacement":"λ1 - atan2(y, x)","status":"Survived","testsCompleted":1,"location":{"end":{"column":32,"line":157},"start":{"column":16,"line":157}}},{"id":"120","mutatorName":"ArithmeticOperator","replacement":"(rad2deg(λ2) + 540) % 360 + 180","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (97ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate destination:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.calculateDestination (src/geo-point.ts:34:29)\n      at GeoPoint.calculateDestination (src/geo-point.ts:48:44)\n      at Context.<anonymous> (src/geo-point.spec.ts:80:22)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 78.36% ( 134/171 )\nBranches     : 46.31% ( 182/393 )\n\nFunctions    : 83.87% ( 26/31 )\nLines        : 78.91% ( 131/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":54,"line":160},"start":{"column":23,"line":160}}},{"id":"121","mutatorName":"ArithmeticOperator","replacement":"(rad2deg(λ2) + 540) * 360","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (22ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate destination:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.calculateDestination (src/geo-point.ts:34:29)\n      at GeoPoint.calculateDestination (src/geo-point.ts:48:44)\n      at Context.<anonymous> (src/geo-point.spec.ts:80:22)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 53.17% ( 134/252 )\nBranches     : 42.85% ( 183/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":48,"line":160},"start":{"column":23,"line":160}}},{"id":"122","mutatorName":"ArithmeticOperator","replacement":"rad2deg(λ2) - 540","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (48ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should calculate destination:\n     RangeError: bad longitude value\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at Function.calculateDestination (src/geo-point.ts:34:29)\n      at GeoPoint.calculateDestination (src/geo-point.ts:48:44)\n      at Context.<anonymous> (src/geo-point.spec.ts:80:22)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 53.17% ( 134/252 )\nBranches     : 43.32% ( 185/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 63.28% ( 131/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":41,"line":160},"start":{"column":24,"line":160}}},{"id":"123","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":4,"line":172},"start":{"column":82,"line":170}}},{"id":"124","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    1) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (39ms)\n\n  1 failing\n\n\n  1) all-tests\n       should construct from GeoJSON:\n     TypeError: Cannot read properties of undefined (reading 'toObject')\n      at Context.<anonymous> (src/geo-point.spec.ts:54:8)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 75.43% ( 129/171 )\nBranches     : 46.05% ( 181/393 )\n\nFunctions    : 83.87% ( 26/31 )\nLines        : 75.9% ( 126/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":181},"start":{"column":82,"line":179}}},{"id":"125","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (52ms)\n  1 failing\n\n\n  1) all-tests\n       should return tile coordinates:\n     TypeError: Cannot read properties of undefined (reading 'x')\n      at Context.<anonymous> (src/geo-point.spec.ts:92:10)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 74.26% ( 127/171 )\nBranches     : 42.49% ( 167/393 )\n\nFunctions    : 83.87% ( 26/31 )\nLines        : 74.69% ( 124/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":192},"start":{"column":57,"line":183}}},{"id":"126","mutatorName":"ArithmeticOperator","replacement":"(coordinate.longitude + 180) / 360 / Math.pow(2, zoom)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (17ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected +0 to equal 130986\n      + expected - actual\n\n      -0\n      +130986\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:92:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.15% ( 180/427 )\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":80,"line":185},"start":{"column":26,"line":185}}},{"id":"127","mutatorName":"ArithmeticOperator","replacement":"(coordinate.longitude + 180) * 360","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (58ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 16975861411 to equal 130986\n      + expected - actual\n\n      -16975861411\n      +130986\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:92:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.15% ( 180/427 )\n\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":60,"line":185},"start":{"column":26,"line":185}}},{"id":"128","mutatorName":"ArithmeticOperator","replacement":"coordinate.longitude - 180","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (49ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected -131158 to equal 130986\n      + expected - actual\n\n      --131158\n      +130986\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:92:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 42.38% ( 181/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":53,"line":185},"start":{"column":27,"line":185}}},{"id":"129","mutatorName":"ArithmeticOperator","replacement":"(1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) / 2 / Math.pow(2, zoom)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (78ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected +0 to equal 87152\n      + expected - actual\n\n      -0\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.85% ( 183/427 )\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":6,"line":189},"start":{"column":26,"line":186}}},{"id":"130","mutatorName":"ArithmeticOperator","replacement":"(1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) * 2","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n    ✔ should create an instance\n    ✔ should calculate distance\n    ✔ should convert to GeoJSON\n    ✔ should convert to string\n    ✔ should convert to a plain object\n    ✔ should construct from GeoJSON\n    ✔ should calculate bearing\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (46ms)\n  1 failing\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 348610 to equal 87152\n      + expected - actual\n\n      -348610\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 43.09% ( 184/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":153,"line":186},"start":{"column":26,"line":186}}},{"id":"131","mutatorName":"ArithmeticOperator","replacement":"1 + Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (88ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 174991 to equal 87152\n      + expected - actual\n\n      -174991\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\nBranches     : 44.27% ( 174/393 )\n\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":148,"line":186},"start":{"column":27,"line":186}}},{"id":"132","mutatorName":"ArithmeticOperator","replacement":"Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) * Math.PI","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (48ms)\n  1 failing\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected -302394 to equal 87152\n      + expected - actual\n\n      --302394\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\nBranches     : 44.78% ( 176/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":148,"line":186},"start":{"column":31,"line":186}}},{"id":"133","mutatorName":"ArithmeticOperator","replacement":"Math.tan(coordinate.latitude * Math.PI / 180) - 1 / Math.cos(coordinate.latitude * Math.PI / 180)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (86ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected NaN to equal 87152\n      + expected - actual\n\n      -NaN\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 41.68% ( 178/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":137,"line":186},"start":{"column":40,"line":186}}},{"id":"134","mutatorName":"ArithmeticOperator","replacement":"coordinate.latitude * Math.PI * 180","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (44ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 118029 to equal 87152\n      + expected - actual\n\n      -118029\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\n\nBranches     : 45.8% ( 180/393 )\nFunctions    : 83.87% ( 26/31 )\n\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":84,"line":186},"start":{"column":49,"line":186}}},{"id":"136","mutatorName":"ArithmeticOperator","replacement":"1 * Math.cos(coordinate.latitude * Math.PI / 180)","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (107ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 104726 to equal 87152\n      + expected - actual\n\n      -104726\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.85% ( 183/427 )\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":137,"line":186},"start":{"column":88,"line":186}}},{"id":"135","mutatorName":"ArithmeticOperator","replacement":"coordinate.latitude / Math.PI","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (20ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 108969 to equal 87152\n      + expected - actual\n\n      -108969\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 42.85% ( 183/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":78,"line":186},"start":{"column":49,"line":186}}},{"id":"137","mutatorName":"ArithmeticOperator","replacement":"coordinate.latitude * Math.PI * 180","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (56ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 96565 to equal 87152\n      + expected - actual\n\n      -96565\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 43.09% ( 184/427 )\n\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":136,"line":186},"start":{"column":101,"line":186}}},{"id":"138","mutatorName":"ArithmeticOperator","replacement":"coordinate.latitude / Math.PI","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (20ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n\n      AssertionError: expected 97010 to equal 87152\n      + expected - actual\n\n      -97010\n      +87152\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:93:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 76.6% ( 131/171 )\nBranches     : 46.05% ( 181/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":130,"line":186},"start":{"column":101,"line":186}}},{"id":"139","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (22ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:92:12)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\n\nBranches     : 46.05% ( 181/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":191},"start":{"column":12,"line":191}}},{"id":"142","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\nENOENT: no such file or directory, open '/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point/.stryker-tmp/sandbox2795372/.nyc_output/processinfo/f121c168-2986-4da8-b9e9-4a32544a1436.json'\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":220},"start":{"column":46,"line":218}}},{"id":"140","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    1) should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n  9 passing (38ms)\n  1 failing\n\n\n\n  1) all-tests\n       should calculate destination:\n     TypeError: Cannot read properties of undefined (reading 'longitude')\n      at Context.<anonymous> (src/geo-point.spec.ts:82:8)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 63.74% ( 109/171 )\nBranches     : 42.49% ( 167/393 )\nFunctions    : 80.64% ( 25/31 )\nLines        : 63.85% ( 106/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":202},"start":{"column":69,"line":200}}},{"id":"141","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","testsCompleted":1,"location":{"end":{"column":4,"line":211},"start":{"column":45,"line":209}}},{"id":"143","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    1) should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (18ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to string:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:33:18)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.19% ( 129/252 )\n\nBranches     : 42.15% ( 180/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 60.86% ( 126/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":228},"start":{"column":22,"line":226}}},{"id":"145","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    1) should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (127ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to GeoJSON:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:24:13)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.85% ( 183/427 )\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":242},"start":{"column":22,"line":234}}},{"id":"144","mutatorName":"StringLiteral","replacement":"``","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    1) should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (75ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to string:\n\n      AssertionError: expected '' to equal '51.5,-0.15'\n      + expected - actual\n\n      +51.5,-0.15\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:33:26)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.09% ( 184/427 )\n\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":52,"line":227},"start":{"column":12,"line":227}}},{"id":"146","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    1) should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (60ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to GeoJSON:\n\n      AssertionError: expected {} to have keys 'type', and 'coordinates'\n      + expected - actual\n\n      -[]\n      +[\n      +  \"coordinates\"\n      +  \"type\"\n      +]\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:24:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\nBranches     : 45.54% ( 179/393 )\n\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":6,"line":241},"start":{"column":12,"line":235}}},{"id":"147","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    1) should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (66ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to GeoJSON:\n\n      AssertionError: expected '' to equal 'Point'\n      + expected - actual\n\n      +Point\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:25:25)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\n\nBranches     : 46.31% ( 182/393 )\n\nFunctions    : 83.87% ( 26/31 )\n\nLines        : 77.1% ( 128/166 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":20,"line":236},"start":{"column":13,"line":236}}},{"id":"148","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    1) should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (45ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should convert to GeoJSON:\n\n      AssertionError: expected +0 to equal 2\n      + expected - actual\n\n      -0\n      +2\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:26:39)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 51.98% ( 131/252 )\nBranches     : 42.38% ( 181/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":8,"line":240},"start":{"column":20,"line":237}}},{"id":"149","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n    ✔ should create an instance\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    2) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  8 passing (44ms)\n\n  2 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:42:7)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should construct from GeoJSON:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:54:18)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : Unknown% ( 0/0 )\n\nBranches     : Unknown% ( 0/0 )\nFunctions    : Unknown% ( 0/0 )\n\nLines        : Unknown% ( 0/0 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":253},"start":{"column":22,"line":248}}},{"id":"150","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    1) should convert to a plain object\n\n    2) should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  8 passing (81ms)\n\n  2 failing\n\n\n\n  1) all-tests\n       should convert to a plain object:\n\n      AssertionError: expected {} to have keys 'latitude', and 'longitude'\n      + expected - actual\n\n      -[]\n      +[\n      +  \"latitude\"\n      +  \"longitude\"\n      +]\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:42:19)\n      at processImmediate (node:internal/timers:478:21)\n\n\n  2) all-tests\n       should construct from GeoJSON:\n\n      AssertionError: expected {} to deeply equal { latitude: 51.5, longitude: -0.15 }\n      + expected - actual\n\n      -{}\n      +{\n      +  \"latitude\": 51.5\n      +  \"longitude\": -0.15\n      +}\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:54:31)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 42.38% ( 181/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":6,"line":252},"start":{"column":12,"line":249}}},{"id":"151","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (102ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:9:24)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\nStatements   : 51.98% ( 131/252 )\nBranches     : 42.85% ( 183/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":261},"start":{"column":58,"line":259}}},{"id":"152","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (51ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should create an instance:\n\n      AssertionError: expected [] to deeply equal [ 1, 2 ]\n      + expected - actual\n\n      -[]\n      +[\n      +  1\n      +  2\n      +]\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:9:37)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 43.09% ( 184/427 )\nFunctions    : 50% ( 26/52 )\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":43,"line":260},"start":{"column":12,"line":260}}},{"id":"153","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (50ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should create an instance:\n     TypeError: Cannot read properties of undefined (reading 'should')\n      at Context.<anonymous> (src/geo-point.spec.ts:10:24)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 75.43% ( 129/171 )\n\nBranches     : 45.8% ( 180/393 )\nFunctions    : 83.87% ( 26/31 )\n\nLines        : 75.9% ( 126/166 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":269},"start":{"column":58,"line":267}}},{"id":"154","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    1) should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (32ms)\n\n  1 failing\n\n\n  1) all-tests\n       should create an instance:\n\n      AssertionError: expected [] to deeply equal [ 2, 1 ]\n      + expected - actual\n\n      -[]\n      +[\n      +  2\n      +  1\n      +]\n      \n      at Context.<anonymous> (src/geo-point.spec.ts:10:37)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 76.6% ( 131/171 )\n\nBranches     : 46.31% ( 182/393 )\nFunctions    : 83.87% ( 26/31 )\nLines        : 77.1% ( 128/166 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":43,"line":268},"start":{"column":12,"line":268}}},{"id":"156","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    1) should adjust precision\n\n\n\n\n\n  9 passing (11ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should adjust precision:\n     AssertionError: expected undefined to deeply equal { latitude: 1.235, longitude: 2.346 }\n      at Context.<anonymous> (src/geo-point.spec.ts:100:28)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\nBranches     : 43.32% ( 185/427 )\n\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":300},"start":{"column":38,"line":296}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    1) should return tile coordinates\n\n    ✔ should adjust precision\n\n\n\n\n\n  9 passing (11ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should return tile coordinates:\n     TypeError: Cannot read properties of undefined (reading 'x')\n      at Context.<anonymous> (src/geo-point.spec.ts:92:10)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 51.98% ( 131/252 )\n\nBranches     : 43.32% ( 185/427 )\n\nFunctions    : 50% ( 26/52 )\n\nLines        : 61.83% ( 128/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":4,"line":273},"start":{"column":30,"line":271}}},{"id":"157","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"\n> geo-point@2.0.2 test\n> nyc mocha -r ts-node/register src/*.spec.ts\n\n\n\n\n\n\n  all-tests\n\n    ✔ should create an instance\n\n    ✔ should calculate distance\n\n    ✔ should convert to GeoJSON\n\n    ✔ should convert to string\n\n    ✔ should convert to a plain object\n\n    ✔ should construct from GeoJSON\n\n    ✔ should calculate bearing\n\n    ✔ should calculate destination\n\n    ✔ should return tile coordinates\n\n    1) should adjust precision\n\n\n\n\n\n  9 passing (9ms)\n\n  1 failing\n\n\n\n  1) all-tests\n       should adjust precision:\n     RangeError: Bad geo point arguments\n      at new GeoPoint (src/geo-point.ts:4:50)\n      at GeoPoint.adjustPrecision (src/geo-point.ts:103:37)\n      at Context.<anonymous> (src/geo-point.spec.ts:98:27)\n      at processImmediate (node:internal/timers:478:21)\n\n\n\n\n\n\n\n\n=============================== Coverage summary ===============================\n\nStatements   : 53.57% ( 135/252 )\n\nBranches     : 44.26% ( 189/427 )\n\nFunctions    : 51.92% ( 27/52 )\n\nLines        : 63.28% ( 131/207 )\n\n================================================================================\n","status":"Killed","testsCompleted":1,"killedBy":["0"],"location":{"end":{"column":75,"line":297},"start":{"column":20,"line":297}}}],"source":"const deg2rad = require('compute-deg2rad');\nconst rad2deg = require('compute-rad2deg');\n\nconst cos = Math.cos;\nconst asin = Math.asin;\nconst sin = Math.sin;\nconst acos = Math.acos;\nconst atan2 = Math.atan2;\nconst radius = 6371e3;\n\nconst isObject = (input) => typeof input === 'object' && input !== null;\n\nexport type Point = {\n  type: 'Point';\n  coordinates: [longitude: number, latitude: number];\n};\n\nexport type LatLng = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type Tile = {\n  x: number;\n  y: number;\n};\n\nexport class GeoPoint {\n  readonly latitude: number;\n  readonly longitude: number;\n\n  /**\n   *\n   * @param latitude\n   * @param longitude\n   */\n  constructor(latitude: number, longitude: number) {\n    if (typeof latitude !== 'number' || typeof longitude !== 'number') {\n      throw new RangeError('Bad geo point arguments');\n    }\n\n    if (latitude < -90 || latitude > 90) {\n      throw new RangeError('bad latitude value');\n    }\n\n    if (longitude < -180 || longitude > 180) {\n      throw new RangeError('bad longitude value');\n    }\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n\n  /**\n   *\n   * @param point {{type: String, coordinates: Array}}\n   * @returns {GeoPoint}\n   */\n  static fromGeoJSON(point: Point): GeoPoint {\n    if (!isObject(point)) {\n      throw new TypeError('GeoPoint: Argument must be an object');\n    }\n\n    if (!point.hasOwnProperty('type') || !point.hasOwnProperty('coordinates')) {\n      throw new TypeError('Object must have type and coordinates');\n    }\n\n    if (point.type !== 'Point') {\n      throw new TypeError('The value of type should be \\'Point\\'');\n    }\n\n    if (!Array.isArray(point.coordinates) || point.coordinates.length !== 2) {\n      throw new TypeError('coordinates must be an array and contain 2 elements');\n    }\n\n    return this.fromLngLatArray(point.coordinates);\n  }\n\n  /**\n   *\n   * @param object {{latitude: Number, longitude: Number}}\n   * @returns {GeoPoint}\n   */\n  static fromObject(object: LatLng): GeoPoint {\n    if (!isObject(object)) {\n      throw new TypeError('GeoPoint: Argument must be an object');\n    }\n\n    if (!object.hasOwnProperty('latitude') || !object.hasOwnProperty('longitude')) {\n      throw new TypeError('Object must have latitude and longitude');\n    }\n\n    return new GeoPoint(object.latitude, object.longitude);\n  }\n\n  /**\n   *\n   * @param point1\n   * @param point2\n   * @returns {number}\n   */\n  static calculateDistance(point1: GeoPoint, point2: GeoPoint): number {\n    const point1Rad = deg2rad(point1.latitude);\n    const point2Rad = deg2rad(point2.latitude);\n    const a = deg2rad(point2.longitude) - deg2rad(point1.longitude);\n    const b = cos(point1Rad) * cos(point2Rad) * cos(a);\n    const c = sin(point1Rad) * sin(point2Rad);\n    const r = b + c;\n\n    return acos(r > 1 ? 1 : r) * 6371392.896;\n  }\n\n  /**\n   *\n   * @param point1 {GeoPoint}\n   * @param point2 {GeoPoint}\n   * @returns {number}\n   */\n  static calculateBearing(point1: GeoPoint, point2: GeoPoint): number {\n    const φ1 = deg2rad(point1.latitude), φ2 = deg2rad(point2.latitude);\n    const Δλ = deg2rad(point2.longitude - point1.longitude);\n\n    // see http://mathforum.org/library/drmath/view/55417.html\n    const y = sin(Δλ) * cos(φ2);\n    const x = cos(φ1) * sin(φ2) - sin(φ1) * cos(φ2) * cos(Δλ);\n    const θ = atan2(y, x);\n\n    return (rad2deg(θ) + 360) % 360;\n  }\n\n  /**\n   *\n   * @param coordinate {GeoPoint}\n   * @param distance {Number} distance in meters\n   * @param bearing {Number} bearing in degrees\n   * @returns {GeoPoint}\n   */\n  static calculateDestination(coordinate: LatLng, distance: number, bearing: number): GeoPoint {\n    // sinφ2 = sinφ1⋅cosδ + cosφ1⋅sinδ⋅cosθ\n    // tanΔλ = sinθ⋅sinδ⋅cosφ1 / cosδ−sinφ1⋅sinφ2\n    // see http://williams.best.vwh.net/avform.htm#LL\n\n    const δ = Number(distance) / radius; // angular distance in radians\n    const θ = deg2rad(Number(bearing));\n\n    const φ1 = deg2rad(coordinate.latitude);\n    const λ1 = deg2rad(coordinate.longitude);\n\n    const sinφ1 = sin(φ1), cosφ1 = cos(φ1);\n    const sinδ = sin(δ), cosδ = cos(δ);\n    const sinθ = sin(θ), cosθ = cos(θ);\n\n    const sinφ2 = sinφ1 * cosδ + cosφ1 * sinδ * cosθ;\n    const φ2 = asin(sinφ2);\n    const y = sinθ * sinδ * cosφ1;\n    const x = cosδ - sinφ1 * sinφ2;\n    const λ2 = λ1 + atan2(y, x);\n\n    const latitude = rad2deg(φ2);\n    const longitude = (rad2deg(λ2) + 540) % 360 - 180; // normalise to −180..+180°\n\n    return new GeoPoint(latitude, longitude);\n  }\n\n  /**\n   *\n   * @param array\n   * @returns {GeoPoint}\n   */\n  static fromLatLngArray(array: [latitude: number, longitude: number]): GeoPoint {\n    return new GeoPoint(array[0], array[1]);\n  }\n\n  /**\n   *\n   * @param array\n   * @returns {GeoPoint}\n   */\n  static fromLngLatArray(array: [longitude: number, latitude: number]): GeoPoint {\n    return new GeoPoint(array[1], array[0]);\n  }\n\n  static toTile(coordinate: LatLng, zoom: number): Tile {\n    // retrieved from: https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#ECMAScript_.28JavaScript.2FActionScript.2C_etc..29\n    const x = Math.floor((coordinate.longitude + 180) / 360 * Math.pow(2, zoom));\n    const y = Math.floor((1 - Math.log(Math.tan(coordinate.latitude * Math.PI / 180) + 1 / Math.cos(coordinate.latitude * Math.PI / 180)) / Math.PI) / 2 * Math.pow(\n      2,\n      zoom,\n    ));\n\n    return { x, y };\n  }\n\n  /**\n   *\n   * @param distance {Number} distance in meters\n   * @param bearing {Number} bearing in degrees\n   * @returns {GeoPoint} destination point\n   */\n  calculateDestination(distance: number, bearing: number): GeoPoint {\n    return GeoPoint.calculateDestination(this, distance, bearing);\n  }\n\n  /**\n   *\n   * @param point {GeoPoint} destination geo point\n   * @returns {number} bearing in degrees\n   */\n  calculateBearing(point: GeoPoint): number {\n    return GeoPoint.calculateBearing(this, point);\n  }\n\n  /**\n   *\n   * @param point {GeoPoint}\n   * @returns {number} distance in meters\n   */\n  calculateDistance(point: GeoPoint): number {\n    return GeoPoint.calculateDistance(this, point);\n  }\n\n  /**\n   *\n   * @returns {string}\n   */\n  toString(): string {\n    return `${ this.latitude },${ this.longitude }`;\n  }\n\n  /**\n   *\n   * @returns {{type: string, coordinates: *[]}}\n   */\n  toGeoJSON(): Point {\n    return {\n      type: 'Point',\n      coordinates: [\n        this.longitude,\n        this.latitude,\n      ],\n    };\n  }\n\n  /**\n   *\n   * @returns {{latitude: *, longitude: *}}\n   */\n  toObject(): LatLng {\n    return {\n      latitude: this.latitude,\n      longitude: this.longitude,\n    };\n  }\n\n  /**\n   *\n   * @returns {*[]}\n   */\n  toLatLngArray(): [latitude: number, longitude: number] {\n    return [this.latitude, this.longitude];\n  }\n\n  /**\n   *\n   * @returns {*[]}\n   */\n  toLngLatArray(): [longitude: number, latitude: number] {\n    return [this.longitude, this.latitude];\n  }\n\n  toTile(zoom: number): Tile {\n    return GeoPoint.toTile(this, zoom);\n  }\n\n  /**\n   *\n   * https://gis.stackexchange.com/questions/8650/measuring-accuracy-of-latitude-and-longitude\n   *       The sign tells us whether we are north or south, east or west on the globe.\n   *       A nonzero hundreds digit tells us we're using longitude, not latitude!\n   *       The tens digit gives a position to about 1,000 kilometers. It gives us useful information about what continent or ocean we are on.\n   *       The units digit (one decimal degree) gives a position up to 111 kilometers (60 nautical miles, about 69 miles). It can tell us roughly what large state or country we are in.\n   *       The first decimal place is worth up to 11.1 km: it can distinguish the position of one large city from a neighboring large city.\n   *       The second decimal place is worth up to 1.1 km: it can separate one village from the next.\n   *       The third decimal place is worth up to 110 m: it can identify a large agricultural field or institutional campus.\n   *       The fourth decimal place is worth up to 11 m: it can identify a parcel of land. It is comparable to the typical accuracy of an uncorrected GPS unit with no interference.\n   *       The fifth decimal place is worth up to 1.1 m: it distinguish trees from each other. Accuracy to this level with commercial GPS units can only be achieved with differential correction.\n   *       The sixth decimal place is worth up to 0.11 m: you can use this for laying out structures in detail, for designing landscapes, building roads. It should be more than good enough for tracking movements of glaciers and rivers. This can be achieved by taking painstaking measures with GPS, such as differentially corrected GPS.\n   *       The seventh decimal place is worth up to 11 mm: this is good for much surveying and is near the limit of what GPS-based techniques can achieve.\n   *       The eighth decimal place is worth up to 1.1 mm: this is good for charting motions of tectonic plates and movements of volcanoes. Permanent, corrected, constantly-running GPS base stations might be able to achieve this level of accuracy.\n   *       The ninth decimal place is worth up to 110 microns: we are getting into the range of microscopy. For almost any conceivable application with earth positions, this is overkill and will be more precise than the accuracy of any surveying device.\n   *       Ten or more decimal places indicates a computer or calculator was used and that no attention was paid to the fact that the extra decimals are useless. Be careful, because unless you are the one reading these numbers off the device, this can indicate low quality processing!\n   *\n   * @param {number} precision\n   * @returns {GeoPoint}\n   */\n  adjustPrecision(precision: number) {\n    const adjust = (input: number) => parseFloat(input.toFixed(precision));\n\n    return new GeoPoint(adjust(this.latitude), adjust(this.longitude));\n  }\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"":{"tests":[{"id":"0","name":"All tests"}]}},"projectRoot":"/Users/jon/Documents/NEU/Projects/llm-mutation-testing/projects/node-geo-point","config":{"mutate":["src/geo-point.ts","src/index.ts"],"reporters":["json","html","progress"],"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"coverageAnalysis":"perTest","clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunner":"command","testRunnerNodeArgs":[],"thresholds":{"high":80,"low":60,"break":null},"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"cucumber":{},"jest":{"projectType":"custom","enableFindRelatedTests":true},"mochaOptions":{},"tap":{"testFiles":["{**/@(test|tests|__test__|__tests__)/**,**/*.@(test|tests|spec)}.@(cjs|mjs|js|jsx|ts|tsx|mts|cts)"],"nodeArgs":["-r","{{hookFile}}","{{testFile}}"],"forceBail":true},"vitest":{}},"framework":{"name":"StrykerJS","version":"8.2.5","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"8.2.5","@stryker-mutator/karma-runner":"8.2.5","@stryker-mutator/jasmine-runner":"8.2.5","@stryker-mutator/jest-runner":"8.2.5","mocha":"10.4.0","jasmine-core":"5.1.2","typescript":"4.9.5"}}}