*** using precomputed mutations ***
[32m10:37:46 (2413) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m10:37:46 (2413) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m10:37:46 (2413) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m10:37:46 (2413) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m10:37:46 (2413) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m10:37:46 (2413) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 250 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.5/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null && spec.length > 0
Mutant 2 in matcher.ts: spec.match replaced with spec.search
Mutant 3 in matcher.ts: spec.match replaced with spec.replace
Mutant 4 in matcher.ts: spec.match replaced with spec.split
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]+$/
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]{0}$/
Mutant 7 in matcher.ts: spec.match replaced with spec.split
Mutant 8 in matcher.ts: spec.match replaced with spec.search
Mutant 9 in matcher.ts: spec.match replaced with spec.replace
Mutant 10 in matcher.ts: spec.match replaced with spec.search
Mutant 11 in matcher.ts: spec.match replaced with spec.replace
Mutant 12 in matcher.ts: spec.match replaced with spec.split
Mutant 13 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null
Mutant 14 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== undefined
Mutant 15 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) === null
Mutant 16 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) !== null && spec.match(/[^/]:|:\/|:$/)[0] === ''
Mutant 17 in matcher.ts: spec.match replaced with spec.search
Mutant 18 in matcher.ts: spec.match replaced with spec.replace
Mutant 19 in matcher.ts: spec.match replaced with spec.split
Mutant 20 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/g
Mutant 21 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/i
Mutant 22 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|:\/|:$/m
Mutant 23 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 24 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+$/) !== null
Mutant 25 in matcher.ts: spec.match replaced with spec.search
Mutant 26 in matcher.ts: /^.+\/$/ replaced with /^.+[a-z]$/
Mutant 27 in matcher.ts: /^.+\/$/ replaced with /^.+[0-9]$/
Mutant 28 in matcher.ts: /^.+\/$/ replaced with /^.+[a-z0-9]$/
Mutant 29 in matcher.ts: spec replaced with 'spec'.replace(/^[a-zA-Z0-9_/:~.$+*-]*$/, '')
Mutant 30 in matcher.ts: spec replaced with 'spec'.replace(/^/, '')
Mutant 31 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 32 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && string.endsWith('/') && string.charAt(0) === '/'
Mutant 33 in matcher.ts: string.endsWith replaced with string.startsWith
Mutant 34 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 35 in matcher.ts: string.endsWith replaced with string.lastIndexOf
Mutant 36 in matcher.ts: '/' replaced with '\\'
Mutant 37 in matcher.ts: '/' replaced with '*'
Mutant 38 in matcher.ts: '/' replaced with '\\/'
Mutant 39 in matcher.ts: string replaced with string.substring(0, 1)
Mutant 40 in matcher.ts: string replaced with string.split('/').reverse()[0]
Mutant 41 in matcher.ts: max > 0 || any replaced with max > 1 || any
Mutant 42 in matcher.ts: max > 0 || any replaced with any && max > 0
Mutant 43 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 44 in matcher.ts: final && opt && min < 1 replaced with final && !opt && min < 1
Mutant 45 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 2
Mutant 46 in matcher.ts: final && opt && min < 1 replaced with final && opt && min > 1
Mutant 47 in matcher.ts: min > 0 replaced with min < 0
Mutant 48 in matcher.ts: min > 0 replaced with max < 0
Mutant 49 in matcher.ts: min > 0 replaced with min === max
Mutant 50 in matcher.ts: true replaced with false
Mutant 51 in matcher.ts: true replaced with 0
Mutant 52 in matcher.ts: true replaced with null
Mutant 53 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc, '')
Mutant 54 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => acc + seg, '\\')
Mutant 55 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg - acc
Mutant 56 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + '(' + acc + ')'
Mutant 57 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + '|' + acc
Mutant 58 in matcher.ts: '$' replaced with '#'
Mutant 59 in matcher.ts: '$' replaced with '*'
Mutant 60 in matcher.ts: '$' replaced with '\\'
Mutant 61 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(2).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 62 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 63 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().map(p => p.toLowerCase())) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 64 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 65 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().join('')
Mutant 66 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).reverse().map(part => part.replace(/[a-zA-Z0-9_]/g, ''))
Mutant 67 in matcher.ts: '/' replaced with '\\'
Mutant 68 in matcher.ts: '/' replaced with '/' + '\\'
Mutant 69 in matcher.ts: '/' replaced with '/' + '\\' + '\\'
Mutant 70 in matcher.ts: 1 replaced with -1
Mutant 71 in matcher.ts: 1 replaced with NaN
Mutant 72 in matcher.ts: part replaced with part.slice(0, -1)
Mutant 73 in matcher.ts: part replaced with part.length
Mutant 74 in matcher.ts: part replaced with part.charAt(0)
Mutant 75 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 76 in matcher.ts: part.match(/:.+/) !== null replaced with part.includes(':')
Mutant 77 in matcher.ts: part.match(/:.+/) !== null replaced with part.indexOf(':') !== -1
Mutant 78 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 79 in matcher.ts: /:.+/ replaced with /:.{2,}/
Mutant 80 in matcher.ts: /:.+/ replaced with /:.?/
Mutant 81 in matcher.ts: props.push replaced with props.pop
Mutant 82 in matcher.ts: props.push replaced with props.shift
Mutant 83 in matcher.ts: props.push replaced with props.unshift
Mutant 84 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 85 in matcher.ts: part.slice(1) replaced with part.slice(-1)
Mutant 86 in matcher.ts: part.slice(1) replaced with part.substr(1)
Mutant 87 in matcher.ts: 1 replaced with 0
Mutant 88 in matcher.ts: 1 replaced with Infinity
Mutant 89 in matcher.ts: parts.push replaced with parts.pop
Mutant 90 in matcher.ts: parts.push replaced with parts.shift
Mutant 91 in matcher.ts: parts.push replaced with parts.unshift
Mutant 92 in matcher.ts: '/([^/]+)' replaced with '/([^/]+)/'
Mutant 93 in matcher.ts: '/([^/]+)' replaced with '/([^/:]+)'
Mutant 94 in matcher.ts: parts.push replaced with parts.pop
Mutant 95 in matcher.ts: parts.push replaced with parts.unshift
Mutant 96 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$2')}`
Mutant 97 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '\\$3')}`
Mutant 98 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.$])/g, '\\$0')
Mutant 99 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 100 in matcher.ts: '\\$1' replaced with '\\$0'
Mutant 101 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 102 in policy.ts: this.rules.push replaced with this.rules.pop
Mutant 103 in policy.ts: this.rules.push replaced with this.rules.shift
Mutant 104 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 105 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 106 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.query(path, verb, ctx) === true)
Mutant 107 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.path)
Mutant 108 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.verb)
Mutant 109 in policy.ts: path replaced with path + 'foo'
Mutant 110 in policy.ts: path replaced with path.toUpperCase()
Mutant 111 in policy.ts: path replaced with path.substring(1)
Mutant 112 in policy.ts: verb replaced with verb.toUpperCase()
Mutant 113 in policy.ts: verb replaced with verb.toLowerCase()
Mutant 114 in policy.ts: verb replaced with verb + "X"
Mutant 115 in policy.ts: ctx replaced with undefined
Mutant 116 in policy.ts: ctx replaced with null
Mutant 117 in policy.ts: ctx replaced with ""
Mutant 118 in policy.ts: res === false replaced with res !== false
Mutant 119 in policy.ts: res === false replaced with res !== true
Mutant 120 in policy.ts: res === false replaced with res === null
Mutant 121 in policy.ts: res === true replaced with res === false
Mutant 122 in policy.ts: res === true replaced with res !== false
Mutant 123 in policy.ts: res === true replaced with res === null
Mutant 124 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 125 in policy.ts: this.rules replaced with this.rules.concat([])
Mutant 126 in policy.ts: this.rules replaced with this.rules.slice(0, -1)
Mutant 127 in policy.ts: rule.matches(path, ctx) replaced with !rule.matches(path, ctx)
Mutant 128 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) && false
Mutant 129 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx) || true
Mutant 130 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.parent)
Mutant 131 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.children)
Mutant 132 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.siblings)
Mutant 133 in policy.ts: path replaced with path.toLowerCase()
Mutant 134 in policy.ts: path replaced with path.substring(1)
Mutant 135 in policy.ts: path replaced with path.split("/")[0]
Mutant 136 in policy.ts: ctx replaced with ctx.path
Mutant 137 in policy.ts: ctx replaced with ctx.verb
Mutant 138 in policy.ts: ctx replaced with ctx.path.slice(0)
Mutant 139 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(name, false)
Mutant 140 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(name, true)
Mutant 141 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(name, Math.random() < 0.5)
Mutant 142 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 143 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name.toUpperCase()]
Mutant 144 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name + '1']
Mutant 145 in policymap.ts: policies replaced with policies.reverse()
Mutant 146 in policymap.ts: policies replaced with policies.slice()
Mutant 147 in policymap.ts: policies replaced with policies.map(policy => policy.name)
Mutant 148 in policymap.ts: this.set(policy.name, policy) replaced with this.set(this.set(policy.name, policy))
Mutant 149 in policymap.ts: this.set(policy.name, policy) replaced with this.set(this.set(policy.name, policy.name))
Mutant 150 in policymap.ts: this.set(policy.name, policy) replaced with this.set(this.set(policy.name, null))
Mutant 151 in policymap.ts: this.set replaced with this.clear
Mutant 152 in policymap.ts: this.set replaced with this.get
Mutant 153 in policymap.ts: policy.name replaced with policy.name.toLowerCase()
Mutant 154 in policymap.ts: policy.name replaced with policy.name.substring(1)
Mutant 155 in policymap.ts: policy.name replaced with policy.name.split('').reverse().join('')
Mutant 156 in policymap.ts: policy replaced with null
Mutant 157 in policymap.ts: policy replaced with undefined
Mutant 158 in policymap.ts: policy replaced with new Policy()
Mutant 159 in policymap.ts: this.get replaced with this.has
Mutant 160 in policymap.ts: this.get replaced with this.values
Mutant 161 in policymap.ts: this.get replaced with this.entries
Mutant 162 in policymap.ts: name replaced with name.toLowerCase()
Mutant 163 in policymap.ts: name replaced with name.slice(1)
Mutant 164 in policymap.ts: name replaced with name.replace('a', 'b')
Mutant 165 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path + verb, ctx)
Mutant 166 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, undefined)
Mutant 167 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, "different context")
Mutant 168 in policymap.ts: path replaced with path.toLowerCase()
Mutant 169 in policymap.ts: path replaced with path.length
Mutant 170 in policymap.ts: path replaced with path.replace('/', '')
Mutant 171 in policymap.ts: verb replaced with verb + "foo"
Mutant 172 in policymap.ts: verb replaced with verb - "foo"
Mutant 173 in policymap.ts: verb replaced with verb * "foo"
Mutant 174 in policymap.ts: ctx replaced with undefined
Mutant 175 in policymap.ts: ctx replaced with null
Mutant 176 in policymap.ts: ctx replaced with false
Mutant 177 in policymap.ts: this.get replaced with this.has
Mutant 178 in policymap.ts: this.get replaced with this.set
Mutant 179 in policymap.ts: name replaced with "name"
Mutant 180 in policymap.ts: name replaced with name.toUpperCase()
Mutant 181 in policymap.ts: name replaced with name.substring(1)
Mutant 182 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + ctx)
Mutant 183 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path - ctx)
Mutant 184 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(ctx.path)
Mutant 185 in policymap.ts: policy.matches replaced with policy.doesNotMatch
Mutant 186 in policymap.ts: policy.matches replaced with policy.match
Mutant 187 in policymap.ts: path replaced with path.toLowerCase()
Mutant 188 in policymap.ts: path replaced with path + 'foo'
Mutant 189 in policymap.ts: path replaced with path.split('/').pop()
Mutant 190 in policymap.ts: ctx replaced with undefined
Mutant 191 in policymap.ts: ctx replaced with null
Mutant 192 in policymap.ts: ctx replaced with "different_context"
Mutant 193 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of this.verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 194 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.values()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 195 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const verb of verbs.keys()) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 196 in rule.ts: verbs replaced with verbs.keys()
Mutant 197 in rule.ts: verbs replaced with Object.keys(verbs)
Mutant 198 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 199 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb]
Mutant 200 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb] === undefined
Mutant 201 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (let verb of verbs) {
  this.verbs[verb] = false;
}
Mutant 202 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verbs of verbs) {
  this.verbs[verb] = false;
}
Mutant 203 in rule.ts: verbs replaced with verbs.reverse()
Mutant 204 in rule.ts: verbs replaced with verbs.slice(1)
Mutant 205 in rule.ts: verbs replaced with verbs.pop()
Mutant 206 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 207 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !(verb in this.verbs)
Mutant 208 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && this.verbs[verb]
Mutant 209 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.match(this.regex)[0])
Mutant 210 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.replace(this.regex, ''))
Mutant 211 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.split(this.regex))
Mutant 212 in rule.ts: this.matches replaced with !this.matches
Mutant 213 in rule.ts: path replaced with path.toLowerCase()
Mutant 214 in rule.ts: path replaced with path.substring(1)
Mutant 215 in rule.ts: path replaced with path.split('/')
Mutant 216 in rule.ts: ctx replaced with ctx.length
Mutant 217 in rule.ts: ctx replaced with ctx.toString()
Mutant 218 in rule.ts: ctx replaced with ctx[0]
Mutant 219 in rule.ts: path.match replaced with path.search
Mutant 220 in rule.ts: path.match replaced with path.split
Mutant 221 in rule.ts: path.match replaced with path.replace
Mutant 222 in rule.ts: this.regex replaced with this.regex.test(path)
Mutant 223 in rule.ts: this.regex replaced with path.match(this.regex)
Mutant 224 in rule.ts: this.regex replaced with this.regex.exec(path)
Mutant 225 in rule.ts: match === null replaced with match !== null
Mutant 226 in rule.ts: match === null replaced with match === undefined
Mutant 227 in rule.ts: match === null replaced with match.length === 0
Mutant 228 in rule.ts: count > 0 replaced with count < 0
Mutant 229 in rule.ts: count > 0 replaced with count === 0
Mutant 230 in rule.ts: count > 0 replaced with count !== 0
Mutant 231 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 232 in rule.ts: ctx === undefined replaced with !ctx
Mutant 233 in rule.ts: ctx === undefined replaced with ctx && ctx.props
Mutant 234 in rule.ts: index < count replaced with index <= count
Mutant 235 in rule.ts: index < count replaced with index > count
Mutant 236 in rule.ts: index < count replaced with index >= count
Mutant 237 in rule.ts: index++ replaced with index--
Mutant 238 in rule.ts: index++ replaced with index += 2
Mutant 239 in rule.ts: index++ replaced with index = 0
Mutant 240 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === null || match[index + 1] !== prop
Mutant 241 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] === prop
Mutant 242 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== null && match[index + 1] === prop
Mutant 243 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb2 in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 244 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verbs in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 245 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb of this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 246 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs.keys()) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 247 in rule.ts: this.verbs replaced with this.verbs.slice()
Mutant 248 in rule.ts: this.verbs replaced with this.verbs.concat()
Mutant 249 in rule.ts: this.verbs replaced with this.verbs.filter(Boolean)
[32m10:37:47 (2413) INFO Instrumenter[39m Instrumented 6 source file(s) with 250 mutant(s)
[32m10:37:47 (2413) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m10:37:48 (2413) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m10:37:48 (2413) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m10:37:52 (2413) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4349 ms, overhead 0 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~20m) 2/250 tested (1 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~16m) 5/250 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~15m) 8/250 tested (2 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~14m) 11/250 tested (2 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~14m) 14/250 tested (2 survived, 0 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~13m) 17/250 tested (2 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~13m) 20/250 tested (2 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~13m) 23/250 tested (5 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~12m) 26/250 tested (5 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~13m) 28/250 tested (5 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~12m) 31/250 tested (5 survived, 0 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~12m) 35/250 tested (7 survived, 0 timed out)
Mutation testing 15% (elapsed: ~2m, remaining: ~12m) 38/250 tested (9 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~11m) 41/250 tested (10 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~12m) 43/250 tested (10 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~11m) 47/250 tested (10 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~11m) 50/250 tested (10 survived, 0 timed out)
Mutation testing 20% (elapsed: ~3m, remaining: ~11m) 52/250 tested (10 survived, 0 timed out)
Mutation testing 22% (elapsed: ~3m, remaining: ~11m) 55/250 tested (10 survived, 0 timed out)
Mutation testing 23% (elapsed: ~3m, remaining: ~11m) 58/250 tested (10 survived, 0 timed out)
Mutation testing 24% (elapsed: ~3m, remaining: ~10m) 61/250 tested (10 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~10m) 64/250 tested (11 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~10m) 67/250 tested (11 survived, 0 timed out)
Mutation testing 28% (elapsed: ~4m, remaining: ~10m) 70/250 tested (11 survived, 0 timed out)
Mutation testing 29% (elapsed: ~4m, remaining: ~10m) 73/250 tested (11 survived, 0 timed out)
Mutation testing 30% (elapsed: ~4m, remaining: ~10m) 75/250 tested (11 survived, 0 timed out)
Mutation testing 31% (elapsed: ~4m, remaining: ~9m) 79/250 tested (14 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~9m) 82/250 tested (15 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~9m) 85/250 tested (15 survived, 0 timed out)
Mutation testing 35% (elapsed: ~5m, remaining: ~9m) 88/250 tested (16 survived, 0 timed out)
Mutation testing 36% (elapsed: ~5m, remaining: ~9m) 91/250 tested (16 survived, 0 timed out)
Mutation testing 37% (elapsed: ~5m, remaining: ~8m) 94/250 tested (16 survived, 0 timed out)
Mutation testing 38% (elapsed: ~5m, remaining: ~8m) 97/250 tested (16 survived, 0 timed out)
Mutation testing 40% (elapsed: ~5m, remaining: ~8m) 100/250 tested (16 survived, 0 timed out)
Mutation testing 41% (elapsed: ~5m, remaining: ~8m) 103/250 tested (17 survived, 0 timed out)
Mutation testing 42% (elapsed: ~6m, remaining: ~8m) 106/250 tested (19 survived, 0 timed out)
Mutation testing 43% (elapsed: ~6m, remaining: ~7m) 109/250 tested (19 survived, 0 timed out)
Mutation testing 44% (elapsed: ~6m, remaining: ~7m) 112/250 tested (19 survived, 0 timed out)
Mutation testing 46% (elapsed: ~6m, remaining: ~7m) 115/250 tested (20 survived, 0 timed out)
Mutation testing 47% (elapsed: ~6m, remaining: ~7m) 118/250 tested (20 survived, 0 timed out)
Mutation testing 48% (elapsed: ~6m, remaining: ~7m) 121/250 tested (20 survived, 0 timed out)
Mutation testing 49% (elapsed: ~7m, remaining: ~7m) 124/250 tested (20 survived, 0 timed out)
Mutation testing 50% (elapsed: ~7m, remaining: ~6m) 127/250 tested (22 survived, 0 timed out)
Mutation testing 52% (elapsed: ~7m, remaining: ~6m) 130/250 tested (22 survived, 0 timed out)
Mutation testing 53% (elapsed: ~7m, remaining: ~6m) 133/250 tested (22 survived, 0 timed out)
Mutation testing 54% (elapsed: ~7m, remaining: ~6m) 136/250 tested (23 survived, 0 timed out)
Mutation testing 55% (elapsed: ~7m, remaining: ~6m) 139/250 tested (23 survived, 0 timed out)
Mutation testing 57% (elapsed: ~8m, remaining: ~5m) 143/250 tested (23 survived, 0 timed out)
Mutation testing 58% (elapsed: ~8m, remaining: ~5m) 146/250 tested (24 survived, 0 timed out)
Mutation testing 59% (elapsed: ~8m, remaining: ~5m) 149/250 tested (26 survived, 0 timed out)
Mutation testing 60% (elapsed: ~8m, remaining: ~5m) 152/250 tested (26 survived, 0 timed out)
Mutation testing 62% (elapsed: ~8m, remaining: ~5m) 155/250 tested (27 survived, 0 timed out)
Mutation testing 63% (elapsed: ~8m, remaining: ~5m) 158/250 tested (27 survived, 0 timed out)
Mutation testing 64% (elapsed: ~9m, remaining: ~4m) 161/250 tested (27 survived, 0 timed out)
Mutation testing 65% (elapsed: ~9m, remaining: ~4m) 164/250 tested (28 survived, 0 timed out)
Mutation testing 66% (elapsed: ~9m, remaining: ~4m) 167/250 tested (28 survived, 0 timed out)
Mutation testing 68% (elapsed: ~9m, remaining: ~4m) 170/250 tested (29 survived, 0 timed out)
Mutation testing 69% (elapsed: ~9m, remaining: ~4m) 173/250 tested (29 survived, 0 timed out)
Mutation testing 70% (elapsed: ~9m, remaining: ~4m) 176/250 tested (29 survived, 0 timed out)
Mutation testing 72% (elapsed: ~10m, remaining: ~3m) 180/250 tested (29 survived, 0 timed out)
Mutation testing 73% (elapsed: ~10m, remaining: ~3m) 183/250 tested (29 survived, 0 timed out)
Mutation testing 74% (elapsed: ~10m, remaining: ~3m) 186/250 tested (29 survived, 0 timed out)
Mutation testing 75% (elapsed: ~10m, remaining: ~3m) 189/250 tested (30 survived, 0 timed out)
Mutation testing 76% (elapsed: ~10m, remaining: ~3m) 192/250 tested (30 survived, 0 timed out)
Mutation testing 78% (elapsed: ~10m, remaining: ~3m) 195/250 tested (31 survived, 0 timed out)
Mutation testing 79% (elapsed: ~11m, remaining: ~2m) 198/250 tested (31 survived, 0 timed out)
Mutation testing 80% (elapsed: ~11m, remaining: ~2m) 201/250 tested (32 survived, 0 timed out)
Mutation testing 81% (elapsed: ~11m, remaining: ~2m) 204/250 tested (34 survived, 0 timed out)
Mutation testing 82% (elapsed: ~11m, remaining: ~2m) 207/250 tested (34 survived, 0 timed out)
Mutation testing 84% (elapsed: ~11m, remaining: ~2m) 210/250 tested (34 survived, 0 timed out)
Mutation testing 85% (elapsed: ~11m, remaining: ~2m) 213/250 tested (34 survived, 0 timed out)
Mutation testing 86% (elapsed: ~12m, remaining: ~1m) 216/250 tested (35 survived, 0 timed out)
Mutation testing 87% (elapsed: ~12m, remaining: ~1m) 219/250 tested (35 survived, 0 timed out)
Mutation testing 88% (elapsed: ~12m, remaining: ~1m) 222/250 tested (35 survived, 0 timed out)
Mutation testing 90% (elapsed: ~12m, remaining: ~1m) 225/250 tested (35 survived, 0 timed out)
Mutation testing 91% (elapsed: ~12m, remaining: ~1m) 228/250 tested (35 survived, 0 timed out)
Mutation testing 92% (elapsed: ~12m, remaining: ~1m) 230/250 tested (35 survived, 0 timed out)
Mutation testing 93% (elapsed: ~13m, remaining: <1m) 233/250 tested (37 survived, 0 timed out)
Mutation testing 94% (elapsed: ~13m, remaining: <1m) 236/250 tested (37 survived, 0 timed out)
Mutation testing 95% (elapsed: ~13m, remaining: <1m) 239/250 tested (38 survived, 0 timed out)
Mutation testing 96% (elapsed: ~13m, remaining: <1m) 240/250 tested (38 survived, 1 timed out)
Mutation testing 97% (elapsed: ~13m, remaining: <1m) 243/250 tested (39 survived, 1 timed out)
Mutation testing 98% (elapsed: ~13m, remaining: <1m) 246/250 tested (39 survived, 1 timed out)
Mutation testing 99% (elapsed: ~14m, remaining: <1m) 249/250 tested (39 survived, 1 timed out)

All tests
  ✓ All tests (killed 210)

[Survived] PrecomputedMutator
src/matcher.ts:12:9
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null && spec.length > 0) {

[Survived] PrecomputedMutator
src/matcher.ts:12:20
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]+$/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/g) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/i) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/[^/]:|:\/|:$/m) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('/') && string.charAt(0) === '/') {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('*')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\/')) {

[Survived] PrecomputedMutator
src/matcher.ts:92:3
-     for (const part of spec.split('/').slice(1).reverse()) {
-       switch (part) {
-         case '+':
-           min++
-           max++
-           break
-         case '++':
-           max++
-           break
-         case '*':
-           min++
-           any = true
-           break
-         case '**':
-           any = true
-           break
-         default:
-           flatten()
-           opt = false
-           if (part.match(/:.+/) !== null) {
-             props.push(part.slice(1))
-             parts.push('/([^/]+)')
-           } else {
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
-           }
-       }
-     }
+     for (const part of spec.split('/').slice(1).reverse().map(p => p.toLowerCase())) {
+     switch (part) {
+       case '+':
+         min++;
+         max++;
+         break;
+       case '++':
+         max++;
+         break;
+       case '*':
+         min++;
+         any = true;
+         break;
+       case '**':
+         any = true;
+         break;
+       default:
+         flatten();
+         opt = false;
+         if (part.match(/:.+/) !== null) {
+           props.push(part.slice(1));
+           parts.push('/([^/]+)');
+         } else {
+           parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
+         }
+     }
+   }

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.includes(':')) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.indexOf(':') !== -1) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.?/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substr(1))

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.concat([])) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.toLowerCase(), ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.reverse()) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.slice()) {

[Survived] PrecomputedMutator
src/policymap.ts:13:7
-         this.set(policy.name, policy)
+         this.set(this.set(policy.name, policy))

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy.name.toLowerCase(), policy)

[Survived] PrecomputedMutator
src/policymap.ts:28:29
-       const policy = this.get(name)
+       const policy = this.get(name.toLowerCase())

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:41:24
-         ? policy.matches(path, ctx)
+         ? policy.matches(path.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (const verb of verbs.values()) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:26:11
-         if (!(verb in this.verbs)) {
+         if (this.verbs[verb] === undefined) {

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (let verb of verbs) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.reverse()) {

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:65:9
-       if (count > 0) {
+       if (count !== 0) {

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (!ctx) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

[Survived] PrecomputedMutator
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (prop === null || match[index + 1] !== prop) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   84.40 |      210 |         1 |         39 |        0 |        0 |
 matcher.ts   |   84.16 |       85 |         0 |         16 |        0 |        0 |
 policy.ts    |   82.93 |       34 |         0 |          7 |        0 |        0 |
 policymap.ts |   86.27 |       44 |         0 |          7 |        0 |        0 |
 rule.ts      |   84.21 |       47 |         1 |          9 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m10:51:55 (2413) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m10:51:55 (2413) INFO MutationTestExecutor[39m Done in 14 minutes 9 seconds.

real	14m10.392s
user	19m2.128s
sys	1m23.962s
