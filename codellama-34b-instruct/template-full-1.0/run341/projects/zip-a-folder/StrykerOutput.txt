*** using precomputed mutations ***
[32m21:05:30 (2425) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m21:05:30 (2425) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m21:05:30 (2425) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m21:05:31 (2425) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m21:05:31 (2425) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m21:05:31 (2425) INFO ProjectReader[39m Found 1 of 231 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 96 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.low
Mutant 1 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.high
Mutant 2 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression !== COMPRESSION_LEVEL.high
Mutant 3 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'zip',
  zipAFolderOptions
}
Mutant 4 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  customWriteStream: output
}
Mutant 5 in ZipAFolder.ts: {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  zipAFolderOptions
} replaced with {
  src,
  targetFilePath: tarFilePath,
  format: 'tar',
  someUnexpectedOption: true
}
Mutant 6 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.medium
Mutant 7 in ZipAFolder.ts: o.compression === COMPRESSION_LEVEL.uncompressed replaced with o.compression === COMPRESSION_LEVEL.high
Mutant 8 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with zipAFolderOptions?.customWriteStream && !targetFilePath
Mutant 9 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with !zipAFolderOptions?.customWriteStream && !targetFilePath
Mutant 10 in ZipAFolder.ts: !zipAFolderOptions?.customWriteStream && targetFilePath replaced with zipAFolderOptions?.customWriteStream || !targetFilePath
Mutant 11 in ZipAFolder.ts: path.dirname replaced with undefined
Mutant 12 in ZipAFolder.ts: path.dirname replaced with null
Mutant 13 in ZipAFolder.ts: path.dirname replaced with 'my-custom-dirname'
Mutant 14 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath !== src
Mutant 15 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.indexOf(src) === 0
Mutant 16 in ZipAFolder.ts: targetBasePath === src replaced with targetBasePath.includes(src)
Mutant 17 in ZipAFolder.ts: !isGlob(src) replaced with isGlob(src)
Mutant 18 in ZipAFolder.ts: isGlob replaced with src === ''
Mutant 19 in ZipAFolder.ts: src replaced with src.split(',').length
Mutant 20 in ZipAFolder.ts: src replaced with src.toUpperCase()
Mutant 21 in ZipAFolder.ts: src replaced with src.repeat(2)
Mutant 22 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src | fs.constants.W_OK)
Mutant 23 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(!src && fs.constants.R_OK)
Mutant 24 in ZipAFolder.ts: fs.promises.access(src, fs.constants.R_OK) replaced with fs.promises.access(src ^ fs.constants.R_OK)
Mutant 25 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.exist
Mutant 26 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.readable
Mutant 27 in ZipAFolder.ts: fs.promises.access replaced with fs.promises.writable
Mutant 28 in ZipAFolder.ts: src replaced with ssrc
Mutant 29 in ZipAFolder.ts: src replaced with "src"
Mutant 30 in ZipAFolder.ts: src replaced with undefined
Mutant 31 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.W_OK
Mutant 32 in ZipAFolder.ts: fs.constants.R_OK replaced with (fs.constants.R_OK | fs.constants.W_OK) ^ fs.constants.W_OK
Mutant 33 in ZipAFolder.ts: fs.constants.R_OK replaced with fs.constants.X_OK
Mutant 34 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK)
Mutant 35 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(targetBasePath, fs.constants.X_OK)
Mutant 36 in ZipAFolder.ts: fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK) replaced with fs.promises.access(path.dirname(targetBasePath), fs.constants.R_OK | fs.constants.W_OK)
Mutant 37 in ZipAFolder.ts: targetBasePath replaced with targetBasePath + '../'
Mutant 38 in ZipAFolder.ts: targetBasePath replaced with targetBasePath.toUpperCase()
Mutant 39 in ZipAFolder.ts: targetBasePath replaced with ''
Mutant 40 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with ``
Mutant 41 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.X_OK
Mutant 42 in ZipAFolder.ts: fs.constants.R_OK | fs.constants.W_OK replaced with fs.constants.F_OK
Mutant 43 in ZipAFolder.ts: targetFilePath replaced with targetFilePath.toUpperCase()
Mutant 44 in ZipAFolder.ts: targetFilePath replaced with 'not a real file path'
Mutant 45 in ZipAFolder.ts: targetFilePath replaced with fs.createWriteStream('out.txt')
Mutant 46 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions !== null && zipAFolderOptions.customWriteStream
Mutant 47 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with zipAFolderOptions?.customWriteStream
Mutant 48 in ZipAFolder.ts: zipAFolderOptions && zipAFolderOptions.customWriteStream replaced with !(zipAFolderOptions instanceof Object) || zipAFolderOptions && zipAFolderOptions.customWriteStream
Mutant 49 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(`format, {gzip: true, gzipOptions: {level: 1}}`)
Mutant 50 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(`format, {gzip: false, gzipOptions: {level: 9}}`)
Mutant 51 in ZipAFolder.ts: archiver(format, archiverOptions || {}) replaced with archiver(`format, {store: true, zlib: {level: 0}}`)
Mutant 52 in ZipAFolder.ts: archiver replaced with archiver.finish
Mutant 53 in ZipAFolder.ts: archiver replaced with archiver.drain
Mutant 54 in ZipAFolder.ts: archiver replaced with archiver.finalize
Mutant 55 in ZipAFolder.ts: archiverOptions || {} replaced with null
Mutant 56 in ZipAFolder.ts: archiverOptions || {} replaced with undefined
Mutant 57 in ZipAFolder.ts: archiverOptions || {} replaced with 0
Mutant 58 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('finish', resolve)
Mutant 59 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('end', resolve)
Mutant 60 in ZipAFolder.ts: output.on('close', resolve) replaced with output.on('error', resolve)
Mutant 61 in ZipAFolder.ts: output.on replaced with output.off
Mutant 62 in ZipAFolder.ts: 'close' replaced with 'end'
Mutant 63 in ZipAFolder.ts: 'close' replaced with 'finish'
Mutant 64 in ZipAFolder.ts: resolve replaced with reject
Mutant 65 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('different', resolve)
Mutant 66 in ZipAFolder.ts: output.on('error', reject) replaced with output.on('finish')
Mutant 67 in ZipAFolder.ts: output.on replaced with output.off
Mutant 68 in ZipAFolder.ts: output.on replaced with output.error
Mutant 69 in ZipAFolder.ts: output.on replaced with output.end
Mutant 70 in ZipAFolder.ts: 'error' replaced with 'finish'
Mutant 71 in ZipAFolder.ts: 'error' replaced with 'close'
Mutant 72 in ZipAFolder.ts: 'error' replaced with 'end'
Mutant 73 in ZipAFolder.ts: reject replaced with resolve
Mutant 74 in ZipAFolder.ts: reject replaced with console.error
Mutant 75 in ZipAFolder.ts: isGlob(src) replaced with isGlob(src, /./g)
Mutant 76 in ZipAFolder.ts: isGlob(src) replaced with !isGlob(src)
Mutant 77 in ZipAFolder.ts: isGlob(src) replaced with isGlob(src, {
  git: true
})
Mutant 78 in ZipAFolder.ts: isGlob replaced with 0
Mutant 79 in ZipAFolder.ts: isGlob replaced with NaN
Mutant 80 in ZipAFolder.ts: src replaced with null
Mutant 81 in ZipAFolder.ts: src replaced with undefined
Mutant 82 in ZipAFolder.ts: src replaced with ''
Mutant 83 in ZipAFolder.ts: globPart replaced with globPart + '/*'
Mutant 84 in ZipAFolder.ts: globPart replaced with globPart + '[!.]'
Mutant 85 in ZipAFolder.ts: globPart replaced with globPart + '*'
Mutant 86 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, true)
Mutant 87 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, 'true')
Mutant 88 in ZipAFolder.ts: zipArchive.directory(src, false) replaced with zipArchive.directory(src, ['true'])
Mutant 89 in ZipAFolder.ts: zipArchive.directory replaced with zipArchive.archive
Mutant 90 in ZipAFolder.ts: src replaced with src.slice(1)
Mutant 91 in ZipAFolder.ts: src replaced with src.concat("foo")
Mutant 92 in ZipAFolder.ts: src replaced with fs.join(path.dirname(tarFilePath), src)
Mutant 93 in ZipAFolder.ts: false replaced with true
Mutant 94 in ZipAFolder.ts: false replaced with !false
Mutant 95 in ZipAFolder.ts: false replaced with Boolean(null)
[32m21:05:31 (2425) INFO Instrumenter[39m Instrumented 1 source file(s) with 96 mutant(s)
[32m21:05:31 (2425) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m21:05:32 (2425) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m21:05:32 (2425) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m21:05:38 (2425) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 6 seconds (net 6138 ms, overhead 1 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~15m) 1/96 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~10m) 3/96 tested (1 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~9m) 5/96 tested (2 survived, 0 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~8m) 7/96 tested (3 survived, 0 timed out)
Mutation testing 10% (elapsed: <1m, remaining: ~7m) 10/96 tested (3 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~6m) 13/96 tested (3 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~6m) 15/96 tested (3 survived, 0 timed out)
Mutation testing 17% (elapsed: ~1m, remaining: ~6m) 17/96 tested (5 survived, 0 timed out)
Mutation testing 19% (elapsed: ~1m, remaining: ~6m) 19/96 tested (5 survived, 0 timed out)
Mutation testing 21% (elapsed: ~1m, remaining: ~5m) 21/96 tested (6 survived, 0 timed out)
Mutation testing 23% (elapsed: ~1m, remaining: ~5m) 23/96 tested (7 survived, 0 timed out)
Mutation testing 27% (elapsed: ~2m, remaining: ~5m) 26/96 tested (7 survived, 0 timed out)
Mutation testing 29% (elapsed: ~2m, remaining: ~5m) 28/96 tested (7 survived, 0 timed out)
Mutation testing 32% (elapsed: ~2m, remaining: ~4m) 31/96 tested (7 survived, 0 timed out)
Mutation testing 34% (elapsed: ~2m, remaining: ~4m) 33/96 tested (9 survived, 0 timed out)
Mutation testing 35% (elapsed: ~2m, remaining: ~4m) 34/96 tested (10 survived, 0 timed out)
Mutation testing 37% (elapsed: ~2m, remaining: ~4m) 36/96 tested (12 survived, 0 timed out)
Mutation testing 40% (elapsed: ~3m, remaining: ~4m) 39/96 tested (12 survived, 0 timed out)
Mutation testing 42% (elapsed: ~3m, remaining: ~4m) 41/96 tested (12 survived, 0 timed out)
Mutation testing 44% (elapsed: ~3m, remaining: ~4m) 43/96 tested (14 survived, 0 timed out)
Mutation testing 46% (elapsed: ~3m, remaining: ~3m) 45/96 tested (15 survived, 0 timed out)
Mutation testing 48% (elapsed: ~3m, remaining: ~3m) 47/96 tested (15 survived, 0 timed out)
Mutation testing 51% (elapsed: ~3m, remaining: ~3m) 49/96 tested (16 survived, 0 timed out)
Mutation testing 55% (elapsed: ~4m, remaining: ~3m) 53/96 tested (16 survived, 0 timed out)
Mutation testing 57% (elapsed: ~4m, remaining: ~3m) 55/96 tested (16 survived, 0 timed out)
Mutation testing 60% (elapsed: ~4m, remaining: ~2m) 58/96 tested (16 survived, 0 timed out)
Mutation testing 61% (elapsed: ~4m, remaining: ~2m) 59/96 tested (17 survived, 0 timed out)
Mutation testing 62% (elapsed: ~4m, remaining: ~2m) 60/96 tested (17 survived, 1 timed out)
Mutation testing 62% (elapsed: ~4m, remaining: ~2m) 60/96 tested (17 survived, 1 timed out)
Mutation testing 63% (elapsed: ~5m, remaining: ~2m) 61/96 tested (17 survived, 2 timed out)
Mutation testing 64% (elapsed: ~5m, remaining: ~2m) 62/96 tested (17 survived, 3 timed out)
Mutation testing 64% (elapsed: ~5m, remaining: ~2m) 62/96 tested (17 survived, 3 timed out)
Mutation testing 66% (elapsed: ~5m, remaining: ~2m) 64/96 tested (18 survived, 4 timed out)
Mutation testing 68% (elapsed: ~5m, remaining: ~2m) 66/96 tested (19 survived, 4 timed out)
Mutation testing 70% (elapsed: ~5m, remaining: ~2m) 68/96 tested (20 survived, 4 timed out)
Mutation testing 73% (elapsed: ~6m, remaining: ~2m) 71/96 tested (20 survived, 4 timed out)
Mutation testing 75% (elapsed: ~6m, remaining: ~2m) 72/96 tested (21 survived, 4 timed out)
Mutation testing 77% (elapsed: ~6m, remaining: ~1m) 74/96 tested (23 survived, 4 timed out)
Mutation testing 79% (elapsed: ~6m, remaining: ~1m) 76/96 tested (25 survived, 4 timed out)
Mutation testing 82% (elapsed: ~6m, remaining: ~1m) 79/96 tested (26 survived, 4 timed out)
Mutation testing 84% (elapsed: ~6m, remaining: ~1m) 81/96 tested (27 survived, 4 timed out)
Mutation testing 86% (elapsed: ~7m, remaining: ~1m) 83/96 tested (29 survived, 4 timed out)
Mutation testing 87% (elapsed: ~7m, remaining: ~1m) 84/96 tested (30 survived, 4 timed out)
Mutation testing 89% (elapsed: ~7m, remaining: <1m) 86/96 tested (32 survived, 4 timed out)
Mutation testing 91% (elapsed: ~7m, remaining: <1m) 88/96 tested (34 survived, 4 timed out)
Mutation testing 94% (elapsed: ~7m, remaining: <1m) 91/96 tested (35 survived, 4 timed out)
Mutation testing 96% (elapsed: ~7m, remaining: <1m) 93/96 tested (35 survived, 4 timed out)
Mutation testing 98% (elapsed: ~8m, remaining: <1m) 95/96 tested (37 survived, 4 timed out)

All tests
  ✓ All tests (killed 54)

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:40:13
-           if (o.compression === COMPRESSION_LEVEL.uncompressed) {
+           if (o.compression === COMPRESSION_LEVEL.low) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'zip',
+     zipAFolderOptions
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:41:39
-               await ZipAFolder.compress({src, targetFilePath: tarFilePath, format: 'tar', zipAFolderOptions});
+               await ZipAFolder.compress({
+     src,
+     targetFilePath: tarFilePath,
+     format: 'tar',
+     someUnexpectedOption: true
+   });

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.indexOf(src) === 0) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:117:17
-               if (targetBasePath === src) {
+               if (targetBasePath.includes(src)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:121:29
-                   if (!isGlob(src)) {
+                   if (!isGlob(src.toUpperCase())) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:121:29
-                   if (!isGlob(src)) {
+                   if (!isGlob(src.repeat(2))) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, (fs.constants.R_OK | fs.constants.W_OK) ^ fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:122:51
-                       await fs.promises.access(src, fs.constants.R_OK); //eslint-disable-line no-bitwise
+                       await fs.promises.access(src, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.R_OK & fs.constants.W_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:23
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.X_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:124:58
-                   await fs.promises.access(targetBasePath, fs.constants.R_OK | fs.constants.W_OK); //eslint-disable-line no-bitwise
+                   await fs.promises.access(targetBasePath, fs.constants.F_OK); //eslint-disable-line no-bitwise

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:128:43
-               output = fs.createWriteStream(targetFilePath);
+               output = fs.createWriteStream('not a real file path');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:129:20
-           } else if (zipAFolderOptions && zipAFolderOptions.customWriteStream) {
+           } else if (zipAFolderOptions?.customWriteStream) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:13
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:138:23
-               output.on('close', resolve);
+               output.on('finish', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.on('different', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:13
-               output.on('error', reject);
+               output.off('error', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('close', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:23
-               output.on('error', reject);
+               output.on('end', reject);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:32
-               output.on('error', reject);
+               output.on('error', resolve);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:139:32
-               output.on('error', reject);
+               output.on('error', console.error);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:17
-               if (isGlob(src)) {
+               if (isGlob(src, /./g)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:17
-               if (isGlob(src)) {
+               if (isGlob(src, {
+     git: true
+   })) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(null)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob(undefined)) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:143:24
-               if (isGlob(src)) {
+               if (isGlob('')) {

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart + '/*');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart + '[!.]');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:145:37
-                       zipArchive.glob(globPart);
+                       zipArchive.glob(globPart + '*');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, 'true');

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:17
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, ['true']);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, true);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, !false);

[Survived] PrecomputedMutator
lib/ZipAFolder.ts:148:43
-                   zipArchive.directory(src, false);
+                   zipArchive.directory(src, Boolean(null));

Ran 0.96 tests per mutant on average.
---------------|---------|----------|-----------|------------|----------|----------|
File           | % score | # killed | # timeout | # survived | # no cov | # errors |
---------------|---------|----------|-----------|------------|----------|----------|
All files      |   60.42 |       54 |         4 |         38 |        0 |        0 |
 ZipAFolder.ts |   60.42 |       54 |         4 |         38 |        0 |        0 |
---------------|---------|----------|-----------|------------|----------|----------|
[32m21:13:42 (2425) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/zip-a-folder/reports/mutation/mutation.html
[32m21:13:42 (2425) INFO MutationTestExecutor[39m Done in 8 minutes 11 seconds.

real	8m13.110s
user	9m29.984s
sys	1m5.741s
