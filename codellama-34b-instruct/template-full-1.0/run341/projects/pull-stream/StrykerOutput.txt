*** using precomputed mutations ***
[32m21:40:12 (2814) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m21:40:12 (2814) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m21:40:12 (2814) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m21:40:12 (2814) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m21:40:12 (2814) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m21:40:14 (2814) INFO ProjectReader[39m Found 31 of 1504 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 743 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var l in sources) exports[k] = sources[k];
Mutant 1 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in throughs) exports[k] = sources[k];
Mutant 2 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in sinks) exports[k] = sources[k];
Mutant 3 in index.js: for (var k in sources) exports[k] = sources[k]; replaced with for (var k in exports) exports[k] = sources[k];
Mutant 4 in index.js: sources replaced with sinks
Mutant 5 in index.js: sources replaced with throughs
Mutant 6 in index.js: sources replaced with sources[0]
Mutant 7 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k in throughs[k]) exports[k] = throughs[k];
Mutant 8 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k in throughs.length) exports[k] = throughs[k];
Mutant 9 in index.js: for (var k in throughs) exports[k] = throughs[k]; replaced with for (var k in throughs.keys()) exports[k] = throughs[k];
Mutant 10 in index.js: throughs replaced with throughs.filter(function (item) {
  return item.prop === "value";
})
Mutant 11 in index.js: throughs replaced with throughs.map(function (item) {
  return item * 2;
})
Mutant 12 in index.js: throughs replaced with throughs.forEach(function (item) {
  console.log(item);
})
Mutant 13 in index.js: for (var k in sinks) exports[k] = sinks[k]; replaced with for (var j in sinks) exports[k] = sinks[k];
Mutant 14 in index.js: for (var k in sinks) exports[k] = sinks[k]; replaced with for (var k in throughs) exports[k] = sinks[k];
Mutant 15 in index.js: for (var k in sinks) exports[k] = sinks[k]; replaced with for (var k in sources) exports[k] = sinks[k];
Mutant 16 in index.js: for (var k in sinks) exports[k] = sinks[k]; replaced with for (var k in sinks.children) exports[k] = sinks[k];
Mutant 17 in index.js: sinks replaced with sources
Mutant 18 in index.js: sinks replaced with throughs
Mutant 19 in pull.js: typeof a === 'function' && a.length === 1 replaced with a.length > 1
Mutant 20 in pull.js: typeof a === 'function' && a.length === 1 replaced with typeof a === 'object' && a.length === 1
Mutant 21 in pull.js: typeof a === 'function' && a.length === 1 replaced with typeof a === 'function' && a.length !== 1
Mutant 22 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = 1; i < length; i++) args[i] = arguments[i];
Mutant 23 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (var i = length - 1; i < length; i++) args[i] = arguments[i];
Mutant 24 in pull.js: i < length replaced with i <= length
Mutant 25 in pull.js: i < length replaced with i > length
Mutant 26 in pull.js: i < length replaced with length >= 1
Mutant 27 in pull.js: i++ replaced with i--
Mutant 28 in pull.js: i++ replaced with i += 2
Mutant 29 in pull.js: i++ replaced with i -= 2
Mutant 30 in pull.js: args == null replaced with args || null
Mutant 31 in pull.js: args == null replaced with args && null
Mutant 32 in pull.js: args == null replaced with args?.length === 0
Mutant 33 in pull.js: length replaced with length - 1
Mutant 34 in pull.js: length replaced with length * 2
Mutant 35 in pull.js: pull(read, ref[0]) replaced with pull(read, ref[1])
Mutant 36 in pull.js: pull(read, ref[0]) replaced with pull(read, ref[0], ref[1])
Mutant 37 in pull.js: pull(read, ref[0]) replaced with pull(read, ref[0], ref[1], ref[2])
Mutant 38 in pull.js: read replaced with read + 1
Mutant 39 in pull.js: read replaced with read - 1
Mutant 40 in pull.js: read replaced with read / 2
Mutant 41 in pull.js: ref[0] replaced with ref[1]
Mutant 42 in pull.js: ref[0] replaced with ref[0].length
Mutant 43 in pull.js: ref[0] replaced with ref[0][0]
Mutant 44 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[0], ref[1], ref[2])
Mutant 45 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[0], ref[1], null)
Mutant 46 in pull.js: pull(read, ref[0], ref[1]) replaced with pull(read, ref[0], ref[1], undefined)
Mutant 47 in pull.js: read replaced with s[i]()
Mutant 48 in pull.js: read replaced with s[i + 1]
Mutant 49 in pull.js: ref[0] replaced with ref[1]
Mutant 50 in pull.js: ref[0] replaced with ref[2]
Mutant 51 in pull.js: ref[0] replaced with null
Mutant 52 in pull.js: ref[1] replaced with ref[0]
Mutant 53 in pull.js: ref[1] replaced with ref[2]
Mutant 54 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[3])
Mutant 55 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[2] + 1)
Mutant 56 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull(read, ref[0], ref[1], ref[2] * 2)
Mutant 57 in pull.js: read replaced with read = null
Mutant 58 in pull.js: read replaced with i < length - 1
Mutant 59 in pull.js: read replaced with read[i]
Mutant 60 in pull.js: ref[0] replaced with ref[1]
Mutant 61 in pull.js: ref[0] replaced with ref.length
Mutant 62 in pull.js: ref[0] replaced with ref[0] + 1
Mutant 63 in pull.js: ref[1] replaced with ref[0]
Mutant 64 in pull.js: ref[1] replaced with ref.length
Mutant 65 in pull.js: ref[1] replaced with null
Mutant 66 in pull.js: ref[2] replaced with ref[3]
Mutant 67 in pull.js: ref[2] replaced with ref[2].foo
Mutant 68 in pull.js: ref[2] replaced with ref[0].bar
Mutant 69 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[2], ref[3] + ref[4])
Mutant 70 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[3])
Mutant 71 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(read, ref[0], ref[1], ref[4])
Mutant 72 in pull.js: read replaced with !read
Mutant 73 in pull.js: read replaced with read + 1
Mutant 74 in pull.js: read replaced with read * 2
Mutant 75 in pull.js: ref[0] replaced with ref[1]
Mutant 76 in pull.js: ref[0] replaced with ref["name"]
Mutant 77 in pull.js: ref[0] replaced with ref[Math.floor(Math.random() * ref.length)]
Mutant 78 in pull.js: ref[1] replaced with ref[2]
Mutant 79 in pull.js: ref[1] replaced with ref[0] + ref[1]
Mutant 80 in pull.js: ref[1] replaced with ref.get(1)
Mutant 81 in pull.js: ref[3] replaced with ref[2]
Mutant 82 in pull.js: ref[3] replaced with ref[length - 1]
Mutant 83 in pull.js: ref[3] replaced with ref[0]
Mutant 84 in pull.js: ref.unshift replaced with ref.forEach
Mutant 85 in pull.js: ref.unshift replaced with ref.length
Mutant 86 in pull.js: read replaced with read + 1
Mutant 87 in pull.js: read replaced with read - 1
Mutant 88 in pull.js: read replaced with read = 0
Mutant 89 in pull.js: pull.apply(null, ref) replaced with pull.apply(ref, null)
Mutant 90 in pull.js: pull.apply(null, ref) replaced with pull.apply(undefined, ref)
Mutant 91 in pull.js: pull.apply(null, ref) replaced with pull.apply(ref, [])
Mutant 92 in pull.js: pull.apply replaced with pull.call
Mutant 93 in pull.js: pull.apply replaced with pull.bind
Mutant 94 in pull.js: pull.apply replaced with pull.curry
Mutant 95 in pull.js: null replaced with undefined
Mutant 96 in pull.js: null replaced with {}
Mutant 97 in pull.js: ref replaced with ref = []
Mutant 98 in pull.js: ref replaced with ref = null
Mutant 99 in pull.js: ref replaced with ref = function () {}
Mutant 100 in pull.js: read && typeof read.source === 'function' replaced with read || typeof read.source === 'function'
Mutant 101 in pull.js: read && typeof read.source === 'function' replaced with read ? typeof read.source === 'function' : false
Mutant 102 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = 0; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 103 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = length + 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 104 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (var i = -1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 105 in pull.js: i < length replaced with i <= length
Mutant 106 in pull.js: i < length replaced with i > 0
Mutant 107 in pull.js: i < length replaced with i !== length
Mutant 108 in pull.js: i++ replaced with i--
Mutant 109 in pull.js: i++ replaced with i += 2
Mutant 110 in pull.js: i++ replaced with i = 0
Mutant 111 in pull.js: typeof s === 'function' replaced with s.source === 'function'
Mutant 112 in pull.js: typeof s === 'function' replaced with typeof s === 'undefined'
Mutant 113 in pull.js: typeof s === 'function' replaced with s.sink(read)
Mutant 114 in pull.js: s replaced with s[""]
Mutant 115 in pull.js: read replaced with read || null
Mutant 116 in pull.js: read replaced with read || {}
Mutant 117 in pull.js: s && typeof s === 'object' replaced with s && typeof s.sink === 'function'
Mutant 118 in pull.js: s && typeof s === 'object' replaced with s.sink && typeof s.sink === 'function'
Mutant 119 in pull.js: s && typeof s === 'object' replaced with s && s.length > 0
Mutant 120 in pull.js: read replaced with null
Mutant 121 in pull.js: read replaced with "hello"
Mutant 122 in pull.js: read replaced with console.log("hello")
Mutant 123 in collect.js: item replaced with "hello"
Mutant 124 in collect.js: item replaced with "world"
Mutant 125 in collect.js: item replaced with "item" + "hello"
Mutant 126 in drain.js: !done replaced with !done && false
Mutant 127 in drain.js: !done replaced with !done || true
Mutant 128 in drain.js: !done replaced with !done()
Mutant 129 in drain.js: abort replaced with !abort
Mutant 130 in drain.js: abort replaced with abort()
Mutant 131 in drain.js: sink.abort replaced with sink.aborch
Mutant 132 in drain.js: loop replaced with !loop
Mutant 133 in drain.js: loop replaced with loop + 1
Mutant 134 in drain.js: loop replaced with loop + 2
Mutant 135 in drain.js: done replaced with undefined
Mutant 136 in drain.js: done replaced with null
Mutant 137 in drain.js: done replaced with "some string"
Mutant 138 in drain.js: end && end !== true replaced with end instanceof Error
Mutant 139 in drain.js: end && end !== true replaced with end !== true
Mutant 140 in drain.js: end && end !== true replaced with end > 5
Mutant 141 in drain.js: doneLackingErr replaced with console.log('error')
Mutant 142 in drain.js: doneLackingErr replaced with doneLackingErr = new Error('different error message')
Mutant 143 in drain.js: op && false === op(data) || abort replaced with op && false !== op(data) || abort
Mutant 144 in drain.js: op && false === op(data) || abort replaced with op && false && op(data) || abort
Mutant 145 in drain.js: op && false === op(data) || abort replaced with op && false !== op(data) || abort
Mutant 146 in drain.js: op replaced with !op
Mutant 147 in drain.js: op replaced with op = true
Mutant 148 in drain.js: op replaced with op = false
Mutant 149 in drain.js: data replaced with typeof data
Mutant 150 in drain.js: data replaced with data.length
Mutant 151 in drain.js: data replaced with data[0]
Mutant 152 in drain.js: read(abort || true, done || function () {}) replaced with read(abort || false, done || function () {})
Mutant 153 in drain.js: read(abort || true, done || function () {}) replaced with read(abort || true, done || function () {
  throw new Error('done is not a function');
})
Mutant 154 in drain.js: read(abort || true, done || function () {}) replaced with read(abort || true, done || function () {
  console.log('done is not a function');
})
Mutant 155 in drain.js: abort || true replaced with abort && true
Mutant 156 in drain.js: abort || true replaced with null
Mutant 157 in drain.js: done || function () {} replaced with undefined
Mutant 158 in drain.js: done || function () {} replaced with null
Mutant 159 in drain.js: done || function () {} replaced with function () {}
Mutant 160 in drain.js: !loop replaced with loop
Mutant 161 in drain.js: !loop replaced with !cbed
Mutant 162 in drain.js: !loop replaced with false
Mutant 163 in drain.js: !cbed replaced with cbed
Mutant 164 in drain.js: !cbed replaced with !read
Mutant 165 in drain.js: 'function' == typeof err replaced with err instanceof Error
Mutant 166 in drain.js: 'function' == typeof err replaced with typeof err !== 'function'
Mutant 167 in drain.js: 'function' == typeof err replaced with err.constructor !== Function
Mutant 168 in drain.js: read replaced with undefined
Mutant 169 in drain.js: read replaced with null
Mutant 170 in drain.js: read replaced with () => {}
Mutant 171 in drain.js: read(abort, cb || function () {}) replaced with read(!abort, cb || function () {})
Mutant 172 in drain.js: read(abort, cb || function () {}) replaced with read(abort || cb || function () {})
Mutant 173 in drain.js: read(abort, cb || function () {}) replaced with read(abort && cb || function () {})
Mutant 174 in drain.js: abort replaced with undefined
Mutant 175 in drain.js: cb || function () {} replaced with abort && function () {}
Mutant 176 in drain.js: cb || function () {} replaced with cb ? function () {} : abort
Mutant 177 in drain.js: cb || function () {} replaced with cb & function () {}
Mutant 178 in find.js: !cb replaced with !test
Mutant 179 in find.js: !cb replaced with cb === test
Mutant 180 in find.js: !cb replaced with test(cb)
Mutant 181 in find.js: prop replaced with !prop
Mutant 182 in find.js: prop replaced with prop + 1
Mutant 183 in find.js: prop replaced with prop.length
Mutant 184 in find.js: test replaced with !test
Mutant 185 in find.js: test replaced with test && false
Mutant 186 in find.js: test replaced with test || true
Mutant 187 in find.js: test(data) replaced with !test(data)
Mutant 188 in find.js: test(data) replaced with test(data, data)
Mutant 189 in find.js: test(data) replaced with test(data[0])
Mutant 190 in find.js: test replaced with test.length > 0
Mutant 191 in find.js: data replaced with "string"
Mutant 192 in find.js: data replaced with 12345
Mutant 193 in find.js: data replaced with null
Mutant 194 in find.js: cb(null, data) replaced with cb(null, null)
Mutant 195 in find.js: cb(null, data) replaced with cb(undefined, data)
Mutant 196 in find.js: cb(null, data) replaced with cb(data)
Mutant 197 in find.js: null replaced with undefined
Mutant 198 in find.js: null replaced with 0
Mutant 199 in find.js: data replaced with null
Mutant 200 in find.js: data replaced with data + 1
Mutant 201 in find.js: data replaced with test('foo')
Mutant 202 in find.js: ended replaced with !ended
Mutant 203 in find.js: ended replaced with ended && cb
Mutant 204 in find.js: cb(err === true ? null : err, null) replaced with cb(err ? null : null)
Mutant 205 in find.js: cb(err === true ? null : err, null) replaced with cb(err === false ? err : null)
Mutant 206 in find.js: cb(err === true ? null : err, null) replaced with cb(err || null)
Mutant 207 in find.js: cb replaced with !cb
Mutant 208 in find.js: err === true ? null : err replaced with err === false ? null : err
Mutant 209 in find.js: err === true ? null : err replaced with err !== true ? null : err
Mutant 210 in find.js: err === true ? null : err replaced with !err ? null : err
Mutant 211 in find.js: null replaced with undefined
Mutant 212 in find.js: null replaced with ''
Mutant 213 in log.js: console.log replaced with console.warn
Mutant 214 in log.js: console.log replaced with module.parent.log
Mutant 215 in log.js: data replaced with console.log("Hello, world!")
Mutant 216 in log.js: data replaced with console.log(data + 1)
Mutant 217 in log.js: data replaced with console.log(data.toUpperCase())
Mutant 218 in on-end.js: drain(null, done) replaced with drain(undefined, done)
Mutant 219 in on-end.js: drain(null, done) replaced with drain(null, null)
Mutant 220 in on-end.js: drain(null, done) replaced with drain("some string", done)
Mutant 221 in on-end.js: drain replaced with '!' + drain
Mutant 222 in on-end.js: drain replaced with 'undefined' + drain
Mutant 223 in on-end.js: drain replaced with null + drain
Mutant 224 in on-end.js: null replaced with undefined
Mutant 225 in on-end.js: null replaced with '0'
Mutant 226 in on-end.js: null replaced with 1
Mutant 227 in on-end.js: done replaced with done()
Mutant 228 in on-end.js: done replaced with undefined
Mutant 229 in on-end.js: done replaced with () => {}
Mutant 230 in reduce.js: !cb replaced with acc
Mutant 231 in reduce.js: !cb replaced with null
Mutant 232 in reduce.js: !cb replaced with undefined
Mutant 233 in reduce.js: acc replaced with acc + 1
Mutant 234 in reduce.js: acc replaced with -acc
Mutant 235 in reduce.js: data replaced with acc
Mutant 236 in reduce.js: data replaced with data + 1
Mutant 237 in reduce.js: data replaced with undefined
Mutant 238 in reduce.js: cb(err, acc) replaced with cb(null)
Mutant 239 in reduce.js: cb(err, acc) replaced with cb(acc)
Mutant 240 in reduce.js: cb(err, acc) replaced with cb(err)
Mutant 241 in reduce.js: err replaced with null
Mutant 242 in reduce.js: err replaced with undefined
Mutant 243 in reduce.js: err replaced with "error"
Mutant 244 in reduce.js: acc replaced with acc + 1
Mutant 245 in reduce.js: acc replaced with acc - 1
Mutant 246 in reduce.js: acc replaced with acc * 2
Mutant 247 in reduce.js: arguments.length === 2 replaced with arguments.length > 2
Mutant 248 in reduce.js: arguments.length === 2 replaced with arguments.length < 2
Mutant 249 in reduce.js: arguments.length === 2 replaced with acc !== undefined
Mutant 250 in reduce.js: end replaced with end !== true
Mutant 251 in reduce.js: end replaced with acc > data
Mutant 252 in reduce.js: end replaced with acc - data
Mutant 253 in reduce.js: cb replaced with null
Mutant 254 in reduce.js: cb replaced with undefined
Mutant 255 in reduce.js: cb replaced with false
Mutant 256 in reduce.js: end === true ? null : end replaced with end
Mutant 257 in reduce.js: end === true ? null : end replaced with 'end'
Mutant 258 in reduce.js: end === true ? null : end replaced with false
Mutant 259 in reduce.js: sink replaced with acc
Mutant 260 in reduce.js: sink replaced with acc + data
Mutant 261 in reduce.js: source replaced with null
Mutant 262 in reduce.js: source replaced with NaN
Mutant 263 in reduce.js: source replaced with undefined
Mutant 264 in count.js: end replaced with i > max - 1
Mutant 265 in count.js: end replaced with end === true
Mutant 266 in count.js: end replaced with i < max - 1
Mutant 267 in count.js: cb replaced with !cb
Mutant 268 in count.js: cb replaced with cb + 1
Mutant 269 in count.js: cb replaced with null
Mutant 270 in count.js: i > max replaced with i < max
Mutant 271 in count.js: i > max replaced with i = max
Mutant 272 in count.js: i > max replaced with i == max
Mutant 273 in count.js: true replaced with false
Mutant 274 in count.js: true replaced with null
Mutant 275 in count.js: true replaced with 'hello'
Mutant 276 in count.js: null replaced with undefined
Mutant 277 in count.js: null replaced with Infinity
Mutant 278 in count.js: i++ replaced with i = i + 2
Mutant 279 in count.js: i++ replaced with i = max + 1
Mutant 280 in count.js: i++ replaced with cb(null, max)
Mutant 281 in empty.js: cb replaced with abort
Mutant 282 in empty.js: cb replaced with null
Mutant 283 in empty.js: cb replaced with undefined
Mutant 284 in empty.js: true replaced with false
Mutant 285 in empty.js: true replaced with null
Mutant 286 in empty.js: true replaced with "string"
Mutant 287 in error.js: cb replaced with abort
Mutant 288 in error.js: cb replaced with null
Mutant 289 in error.js: err replaced with undefined
Mutant 290 in error.js: err replaced with null
Mutant 291 in error.js: err replaced with 'error'
Mutant 292 in infinite.js: end replaced with end == null
Mutant 293 in infinite.js: end replaced with end === 0
Mutant 294 in infinite.js: end replaced with cb === undefined
Mutant 295 in infinite.js: cb replaced with !!cb
Mutant 296 in infinite.js: cb replaced with cb + 1
Mutant 297 in infinite.js: end replaced with end + 1
Mutant 298 in infinite.js: end replaced with end - 1
Mutant 299 in infinite.js: end replaced with null
Mutant 300 in infinite.js: cb(null, generate()) replaced with cb(undefined, generate())
Mutant 301 in infinite.js: cb(null, generate()) replaced with cb(0, generate())
Mutant 302 in infinite.js: cb(null, generate()) replaced with cb("", generate())
Mutant 303 in infinite.js: null replaced with undefined
Mutant 304 in infinite.js: null replaced with {}
Mutant 305 in infinite.js: null replaced with Object.create(null)
Mutant 306 in infinite.js: generate() replaced with generate(end)
Mutant 307 in infinite.js: generate replaced with generate + 1
Mutant 308 in keys.js: object replaced with object.keys()
Mutant 309 in keys.js: object replaced with object[Symbol.iterator]()
Mutant 310 in keys.js: object replaced with object.values()
Mutant 311 in once.js: abort replaced with !abort
Mutant 312 in once.js: abort replaced with abort !== true
Mutant 313 in once.js: abort replaced with abort !== null
Mutant 314 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, onAbort, value)
Mutant 315 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, abort, function () {})
Mutant 316 in once.js: abortCb replaced with abort
Mutant 317 in once.js: abortCb replaced with _value
Mutant 318 in once.js: abortCb replaced with 0
Mutant 319 in once.js: cb replaced with abort
Mutant 320 in once.js: cb replaced with foo
Mutant 321 in once.js: cb replaced with cbCb
Mutant 322 in once.js: abort replaced with abort && onAbort
Mutant 323 in once.js: abort replaced with onAbort && abort
Mutant 324 in once.js: abort replaced with onAbort && !abort
Mutant 325 in once.js: onAbort replaced with onAbort.call(this)
Mutant 326 in once.js: onAbort replaced with onAbort.call(this, cb)
Mutant 327 in once.js: onAbort replaced with onAbort.call(this, abort, cb)
Mutant 328 in once.js: value != null replaced with value === null
Mutant 329 in once.js: value != null replaced with value !== null
Mutant 330 in once.js: value != null replaced with value == null
Mutant 331 in once.js: cb(null, _value) replaced with cb(false)
Mutant 332 in once.js: cb(null, _value) replaced with cb(undefined)
Mutant 333 in once.js: cb(null, _value) replaced with cb('null')
Mutant 334 in once.js: null replaced with undefined
Mutant 335 in once.js: null replaced with 0
Mutant 336 in once.js: null replaced with ''
Mutant 337 in once.js: _value replaced with _value + 1
Mutant 338 in once.js: _value replaced with null
Mutant 339 in once.js: _value replaced with undefined
Mutant 340 in once.js: cb replaced with _value = value
Mutant 341 in once.js: cb replaced with _value = _value + value
Mutant 342 in once.js: true replaced with false
Mutant 343 in once.js: true replaced with value
Mutant 344 in once.js: true replaced with onAbort
Mutant 345 in values.js: !array replaced with array === null
Mutant 346 in values.js: !array replaced with false
Mutant 347 in values.js: !array replaced with i == 0
Mutant 348 in values.js: abort replaced with false
Mutant 349 in values.js: abort replaced with i
Mutant 350 in values.js: abort replaced with array.length
Mutant 351 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, onAbort, abort)
Mutant 352 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(abort, cb, onAbort)
Mutant 353 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(onAbort, abort, cb)
Mutant 354 in values.js: cb replaced with null
Mutant 355 in values.js: cb replaced with undefined
Mutant 356 in values.js: cb replaced with 'foo'
Mutant 357 in values.js: abort replaced with !abort
Mutant 358 in values.js: abort replaced with abort === false
Mutant 359 in values.js: abort replaced with !abort === true
Mutant 360 in values.js: onAbort replaced with null
Mutant 361 in values.js: onAbort replaced with undefined
Mutant 362 in values.js: !Array.isArray(array) replaced with Array.isArray(array)
Mutant 363 in values.js: !Array.isArray(array) replaced with typeof array === 'object'
Mutant 364 in values.js: !Array.isArray(array) replaced with array.length === 0
Mutant 365 in values.js: Array.isArray replaced with Array.isObject
Mutant 366 in values.js: Array.isArray replaced with !Array.isArray
Mutant 367 in values.js: array replaced with array + 1
Mutant 368 in values.js: array replaced with array[0]
Mutant 369 in values.js: array replaced with array.length
Mutant 370 in values.js: array replaced with array[0]
Mutant 371 in values.js: array replaced with array.splice(0, 1)
Mutant 372 in values.js: abort replaced with abort || abortCb
Mutant 373 in values.js: abort replaced with abort && abortCb
Mutant 374 in values.js: abort replaced with abort || abortCb && abortCb()
Mutant 375 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb(abort), abort, onAbort)
Mutant 376 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb(null, abort), abort, onAbort)
Mutant 377 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb(abort, onAbort), abort, onAbort)
Mutant 378 in values.js: cb replaced with undefined
Mutant 379 in values.js: cb replaced with null
Mutant 380 in values.js: abort replaced with abortCb(cb, abort, onAbort)
Mutant 381 in values.js: abort replaced with null
Mutant 382 in values.js: abort replaced with array.length
Mutant 383 in values.js: onAbort replaced with onAbort()
Mutant 384 in values.js: onAbort replaced with onAbort.bind(null, array)
Mutant 385 in values.js: onAbort replaced with array.length
Mutant 386 in values.js: i >= array.length replaced with i < array.length
Mutant 387 in values.js: i >= array.length replaced with i <= 0
Mutant 388 in values.js: i >= array.length replaced with array.length === 0
Mutant 389 in values.js: true replaced with false
Mutant 390 in values.js: true replaced with array.length > 0
Mutant 391 in values.js: true replaced with !array.includes(array[i])
Mutant 392 in values.js: cb(null, array[i++]) replaced with cb(abort, array[i++])
Mutant 393 in values.js: cb(null, array[i++]) replaced with cb(array.length, array[i])
Mutant 394 in values.js: cb replaced with [i++]
Mutant 395 in values.js: cb replaced with [i + 1]
Mutant 396 in values.js: cb replaced with [i + array.length]
Mutant 397 in values.js: array[i++] replaced with array[i++ + 1]
Mutant 398 in values.js: array[i++] replaced with array[i + 1]
Mutant 399 in async-map.js: !map replaced with map = null
Mutant 400 in async-map.js: !map replaced with map = !map
Mutant 401 in async-map.js: !map replaced with map = true
Mutant 402 in async-map.js: map replaced with map(data, function (err, data) {
  busy = false;
  if (aborted) {
    cb(aborted);
    abortCb && abortCb(aborted);
  } else if (err) next(err, cb);else cb(null, data);
})
Mutant 403 in async-map.js: aborted replaced with !aborted
Mutant 404 in async-map.js: aborted replaced with false
Mutant 405 in async-map.js: aborted replaced with undefined
Mutant 406 in async-map.js: cb replaced with undefined
Mutant 407 in async-map.js: cb replaced with null
Mutant 408 in async-map.js: aborted replaced with aborted()
Mutant 409 in async-map.js: aborted replaced with undefined
Mutant 410 in async-map.js: aborted replaced with null
Mutant 411 in async-map.js: abort replaced with !abort
Mutant 412 in async-map.js: abort replaced with abort && false
Mutant 413 in async-map.js: !busy replaced with busy
Mutant 414 in async-map.js: !busy replaced with !aborted
Mutant 415 in async-map.js: !busy replaced with false
Mutant 416 in async-map.js: cb replaced with null
Mutant 417 in async-map.js: cb replaced with undefined
Mutant 418 in async-map.js: abort replaced with abort.indexOf('error') !== -1 ? abort : null
Mutant 419 in async-map.js: abort replaced with abort.length !== 0 ? abort : null
Mutant 420 in async-map.js: abort replaced with abort.includes('error') ? abort : null
Mutant 421 in async-map.js: cb replaced with busy = false
Mutant 422 in async-map.js: abort replaced with null
Mutant 423 in async-map.js: abort replaced with undefined
Mutant 424 in async-map.js: abort replaced with "error"
Mutant 425 in async-map.js: end replaced with data
Mutant 426 in async-map.js: end replaced with end && data
Mutant 427 in async-map.js: cb replaced with undefined
Mutant 428 in async-map.js: cb replaced with null
Mutant 429 in async-map.js: aborted replaced with aborted()
Mutant 430 in async-map.js: aborted replaced with aborted.toString()
Mutant 431 in async-map.js: aborted replaced with !aborted
Mutant 432 in async-map.js: aborted replaced with null
Mutant 433 in async-map.js: aborted replaced with undefined
Mutant 434 in async-map.js: aborted replaced with {}
Mutant 435 in async-map.js: aborted replaced with aborted !== null
Mutant 436 in async-map.js: aborted replaced with aborted && abortCb
Mutant 437 in async-map.js: aborted replaced with null
Mutant 438 in async-map.js: aborted replaced with new Error('Aborted')
Mutant 439 in async-map.js: abortCb replaced with abortCb && true
Mutant 440 in async-map.js: abortCb replaced with abortCb || false
Mutant 441 in async-map.js: abortCb replaced with !abortCb
Mutant 442 in async-map.js: aborted replaced with true
Mutant 443 in async-map.js: aborted replaced with false
Mutant 444 in async-map.js: err replaced with `!err`
Mutant 445 in async-map.js: err replaced with `err && err.message === 'something'`
Mutant 446 in async-map.js: err replaced with `err.code === 404`
Mutant 447 in async-map.js: next(err, cb) replaced with next(null, cb)
Mutant 448 in async-map.js: next(err, cb) replaced with next(err, null)
Mutant 449 in async-map.js: next(err, cb) replaced with next(undefined, cb)
Mutant 450 in async-map.js: err replaced with !err
Mutant 451 in async-map.js: err replaced with err = new Error('Some error')
Mutant 452 in async-map.js: err replaced with err.message
Mutant 453 in async-map.js: cb replaced with null
Mutant 454 in async-map.js: cb replaced with undefined
Mutant 455 in async-map.js: cb replaced with 0
Mutant 456 in async-map.js: cb(null, data) replaced with cb(undefined, data)
Mutant 457 in async-map.js: cb(null, data) replaced with cb(null, null)
Mutant 458 in async-map.js: cb(null, data) replaced with cb(null, data + 1)
Mutant 459 in async-map.js: null replaced with undefined
Mutant 460 in async-map.js: null replaced with true
Mutant 461 in async-map.js: data replaced with null
Mutant 462 in async-map.js: data replaced with undefined
Mutant 463 in async-map.js: data replaced with Data
Mutant 464 in filter-not.js: tester replaced with !tester
Mutant 465 in filter-not.js: tester replaced with tester.prop
Mutant 466 in filter-not.js: test replaced with test(data)
Mutant 467 in filter-not.js: test replaced with test.call(this, data)
Mutant 468 in filter-not.js: test replaced with test.bind(null, data)()
Mutant 469 in filter-not.js: function (data) {
  return !test(data);
} replaced with function (data) {
  return !!test(data);
}
Mutant 470 in filter-not.js: function (data) {
  return !test(data);
} replaced with function (data) {
  return test(data) || false;
}
Mutant 471 in filter-not.js: function (data) {
  return !test(data);
} replaced with function (data) {
  return data.hasOwnProperty('test') ? test(data) : !test(data);
}
Mutant 472 in filter-not.js: test replaced with !test
Mutant 473 in filter-not.js: data replaced with data && !test(data)
Mutant 474 in filter-not.js: data replaced with data !== test(data)
Mutant 475 in filter-not.js: data replaced with test(data) ? !data : data
Mutant 476 in filter.js: test replaced with test.toLowerCase()
Mutant 477 in filter.js: test replaced with test + "hello"
Mutant 478 in filter.js: test replaced with function () {
  return test;
}
Mutant 479 in filter.js: !end && !test(data) replaced with end || test(data)
Mutant 480 in filter.js: !end && !test(data) replaced with test(data) !== end
Mutant 481 in filter.js: test replaced with !test
Mutant 482 in filter.js: data replaced with 'testing'
Mutant 483 in filter.js: data replaced with null
Mutant 484 in filter.js: data replaced with undefined
Mutant 485 in filter.js: next(end, cb) replaced with next(end, read)
Mutant 486 in filter.js: next(end, cb) replaced with next(end, test)
Mutant 487 in filter.js: next(end, cb) replaced with next(end, data)
Mutant 488 in filter.js: end replaced with end && data
Mutant 489 in filter.js: end replaced with end || data
Mutant 490 in filter.js: end replaced with end ? data : null
Mutant 491 in filter.js: cb(end, data) replaced with cb(end, !data)
Mutant 492 in filter.js: cb(end, data) replaced with cb(end, data + 1)
Mutant 493 in filter.js: cb(end, data) replaced with cb(end, data * 2)
Mutant 494 in filter.js: cb replaced with !cb
Mutant 495 in filter.js: cb replaced with null
Mutant 496 in filter.js: end replaced with end - 1
Mutant 497 in filter.js: end replaced with end + 1
Mutant 498 in filter.js: end replaced with cb(end, data)
Mutant 499 in filter.js: data replaced with null
Mutant 500 in filter.js: data replaced with undefined
Mutant 501 in filter.js: data replaced with ''
Mutant 502 in flatten.js: abort replaced with !abort
Mutant 503 in flatten.js: abort replaced with abort && !values(stream).length
Mutant 504 in flatten.js: abort replaced with abort || !stream
Mutant 505 in flatten.js: read(err || abort, cb) replaced with read(null || abort, cb)
Mutant 506 in flatten.js: read(err || abort, cb) replaced with read(err && abort, cb)
Mutant 507 in flatten.js: read(err || abort, cb) replaced with read(err || cb)
Mutant 508 in flatten.js: err || abort replaced with !err && !abort
Mutant 509 in flatten.js: err || abort replaced with null || abort
Mutant 510 in flatten.js: err || abort replaced with err ? abort : null
Mutant 511 in flatten.js: cb replaced with read
Mutant 512 in flatten.js: cb replaced with null
Mutant 513 in flatten.js: cb replaced with function () {}
Mutant 514 in flatten.js: read(abort, cb) replaced with read(null)
Mutant 515 in flatten.js: read(abort, cb) replaced with read(undefined)
Mutant 516 in flatten.js: read(abort, cb) replaced with read(false)
Mutant 517 in flatten.js: read replaced with abort
Mutant 518 in flatten.js: abort replaced with null
Mutant 519 in flatten.js: abort replaced with undefined
Mutant 520 in flatten.js: abort replaced with false
Mutant 521 in flatten.js: cb replaced with read(true, cb)
Mutant 522 in flatten.js: cb replaced with cb(err)
Mutant 523 in flatten.js: cb replaced with read(err, cb)
Mutant 524 in flatten.js: _read replaced with !_read
Mutant 525 in flatten.js: _read replaced with ~_read
Mutant 526 in flatten.js: _read replaced with _read === true
Mutant 527 in flatten.js: nextChunk replaced with nextStream
Mutant 528 in flatten.js: err replaced with !err
Mutant 529 in flatten.js: err replaced with err === false
Mutant 530 in flatten.js: err replaced with null
Mutant 531 in flatten.js: err === true replaced with err != true
Mutant 532 in flatten.js: err === true replaced with !err
Mutant 533 in flatten.js: err === true replaced with err === false
Mutant 534 in flatten.js: nextStream replaced with null
Mutant 535 in flatten.js: nextStream replaced with 1
Mutant 536 in flatten.js: err replaced with null
Mutant 537 in flatten.js: err replaced with true
Mutant 538 in flatten.js: err replaced with false
Mutant 539 in flatten.js: cb(null, data) replaced with cb(undefined, data)
Mutant 540 in flatten.js: cb(null, data) replaced with cb(null, data.length)
Mutant 541 in flatten.js: null replaced with undefined
Mutant 542 in flatten.js: null replaced with false
Mutant 543 in flatten.js: null replaced with new Error()
Mutant 544 in flatten.js: data replaced with null
Mutant 545 in flatten.js: data replaced with [data]
Mutant 546 in flatten.js: data replaced with data || []
Mutant 547 in flatten.js: end replaced with !end
Mutant 548 in flatten.js: end replaced with null
Mutant 549 in flatten.js: end replaced with false
Mutant 550 in flatten.js: cb replaced with null
Mutant 551 in flatten.js: cb replaced with undefined
Mutant 552 in flatten.js: cb replaced with read
Mutant 553 in flatten.js: end replaced with true
Mutant 554 in flatten.js: end replaced with null
Mutant 555 in flatten.js: end replaced with false
Mutant 556 in flatten.js: stream && 'object' === typeof stream replaced with !stream || 'object' !== typeof stream
Mutant 557 in flatten.js: stream && 'object' === typeof stream replaced with 'object' !== typeof stream && stream
Mutant 558 in flatten.js: stream replaced with null
Mutant 559 in flatten.js: stream replaced with undefined
Mutant 560 in flatten.js: stream replaced with 0
Mutant 561 in flatten.js: 'function' !== typeof stream replaced with 'string' !== typeof stream
Mutant 562 in flatten.js: 'function' !== typeof stream replaced with stream === null
Mutant 563 in flatten.js: 'function' !== typeof stream replaced with typeof stream !== 'undefined'
Mutant 564 in flatten.js: once replaced with null
Mutant 565 in flatten.js: once replaced with undefined
Mutant 566 in flatten.js: stream replaced with stream + 1
Mutant 567 in flatten.js: stream replaced with stream * 2
Mutant 568 in flatten.js: stream replaced with stream[0]
Mutant 569 in flatten.js: nextChunk replaced with nextStream
Mutant 570 in map.js: !mapper replaced with mapper === null
Mutant 571 in map.js: !mapper replaced with typeof mapper !== 'function'
Mutant 572 in map.js: !mapper replaced with Object.prototype.hasOwnProperty.call(mapper, 'simple')
Mutant 573 in map.js: prop replaced with prop[0]
Mutant 574 in map.js: prop replaced with prop.length
Mutant 575 in map.js: mapper replaced with e => e + 1
Mutant 576 in map.js: mapper replaced with e => null
Mutant 577 in map.js: mapper replaced with e => e.x
Mutant 578 in map.js: mapper replaced with undefined
Mutant 579 in map.js: mapper replaced with 0
Mutant 580 in map.js: mapper replaced with ''
Mutant 581 in map.js: data replaced with null
Mutant 582 in map.js: data replaced with undefined
Mutant 583 in map.js: data replaced with 0
Mutant 584 in map.js: err replaced with cb(end, null)
Mutant 585 in map.js: err replaced with cb(end, undefined)
Mutant 586 in map.js: err replaced with cb(abort, data)
Mutant 587 in map.js: cb(end, data) replaced with cb(end, null)
Mutant 588 in map.js: cb(end, data) replaced with cb(end, data + 1)
Mutant 589 in map.js: cb(end, data) replaced with cb(end, mapper(data))
Mutant 590 in map.js: end replaced with !end
Mutant 591 in map.js: end replaced with undefined
Mutant 592 in map.js: data replaced with null
Mutant 593 in map.js: data replaced with undefined
Mutant 594 in map.js: data replaced with mapper(data) + 1
Mutant 595 in non-unique.js: unique(field, true) replaced with unique(field, false)
Mutant 596 in non-unique.js: unique(field, true) replaced with unique(field, field)
Mutant 597 in non-unique.js: unique(field, true) replaced with unique(field + 1, true)
Mutant 598 in non-unique.js: field replaced with field !== field
Mutant 599 in non-unique.js: field replaced with field + 1
Mutant 600 in non-unique.js: field replaced with field * 0
Mutant 601 in non-unique.js: true replaced with false
Mutant 602 in non-unique.js: true replaced with field !== null
Mutant 603 in non-unique.js: true replaced with field !== undefined
Mutant 604 in take.js: 'number' === typeof test replaced with test.length > 10
Mutant 605 in take.js: 'number' === typeof test replaced with typeof test === 'string'
Mutant 606 in take.js: 'number' === typeof test replaced with test() > 10
Mutant 607 in take.js: cb replaced with null
Mutant 608 in take.js: cb replaced with undefined
Mutant 609 in take.js: cb replaced with false
Mutant 610 in take.js: err || true replaced with err && false
Mutant 611 in take.js: err || true replaced with err ? false : true
Mutant 612 in take.js: err || true replaced with !err
Mutant 613 in take.js: ended && !end replaced with !ended && !end
Mutant 614 in take.js: ended && !end replaced with ended && end
Mutant 615 in take.js: ended && !end replaced with ended || end
Mutant 616 in take.js: cb replaced with null
Mutant 617 in take.js: cb replaced with function () {}
Mutant 618 in take.js: cb replaced with cb("error")
Mutant 619 in take.js: ended replaced with ap
Mutant 620 in take.js: ended replaced with true
Mutant 621 in take.js: ended replaced with ended || true
Mutant 622 in take.js: ended = end replaced with ended = !end
Mutant 623 in take.js: ended = end replaced with ended = !ended
Mutant 624 in take.js: ended = end replaced with ended = true
Mutant 625 in take.js: read(ended, cb) replaced with read(!ended, cb)
Mutant 626 in take.js: read(ended, cb) replaced with read(ended && cb)
Mutant 627 in take.js: read(ended, cb) replaced with read(ended || cb)
Mutant 628 in take.js: ended replaced with ended && !end
Mutant 629 in take.js: ended replaced with ended || end
Mutant 630 in take.js: ended replaced with !ended
Mutant 631 in take.js: cb replaced with null
Mutant 632 in take.js: cb replaced with cb()
Mutant 633 in take.js: cb replaced with read(ended, cb)
Mutant 634 in take.js: ended = ended || end replaced with test(end)
Mutant 635 in take.js: ended = ended || end replaced with ended && !end
Mutant 636 in take.js: ended = ended || end replaced with end || !ended
Mutant 637 in take.js: cb replaced with undefined
Mutant 638 in take.js: ended replaced with !ended
Mutant 639 in take.js: ended replaced with ended == true
Mutant 640 in take.js: ended replaced with ended && false
Mutant 641 in take.js: !test(data) replaced with test(data)
Mutant 642 in take.js: !test(data) replaced with data != test(data)
Mutant 643 in take.js: !test(data) replaced with !test(data) && data == test(data)
Mutant 644 in take.js: data replaced with data + 1
Mutant 645 in take.js: data replaced with data / 2
Mutant 646 in take.js: data replaced with data * 2
Mutant 647 in take.js: cb(null, data) replaced with cb(undefined, data)
Mutant 648 in take.js: cb(null, data) replaced with cb(true, data)
Mutant 649 in take.js: cb(null, data) replaced with cb(false, data)
Mutant 650 in take.js: null replaced with true
Mutant 651 in take.js: null replaced with false
Mutant 652 in take.js: data replaced with null
Mutant 653 in take.js: data replaced with undefined
Mutant 654 in take.js: data replaced with false
Mutant 655 in take.js: cb replaced with last ? terminate(cb) : cb(ended)
Mutant 656 in take.js: cb replaced with !last ? terminate(cb) : cb(ended)
Mutant 657 in take.js: cb replaced with ended && last ? cb(ended) : terminate(cb)
Mutant 658 in take.js: cb(null, data) replaced with cb(undefined)
Mutant 659 in take.js: cb(null, data) replaced with cb(null)
Mutant 660 in take.js: cb(null, data) replaced with cb(NaN)
Mutant 661 in take.js: cb replaced with null
Mutant 662 in take.js: cb replaced with undefined
Mutant 663 in take.js: null replaced with undefined
Mutant 664 in take.js: null replaced with false
Mutant 665 in take.js: null replaced with NaN
Mutant 666 in take.js: data replaced with !data
Mutant 667 in take.js: data replaced with data + 1
Mutant 668 in take.js: data replaced with "something_else"
Mutant 669 in through.js: a || !onEnd replaced with a || !op
Mutant 670 in through.js: a || !onEnd replaced with a && !onEnd
Mutant 671 in through.js: a || !onEnd replaced with !a && onEnd
Mutant 672 in through.js: onEnd replaced with !onEnd
Mutant 673 in through.js: onEnd replaced with onEnd === null
Mutant 674 in through.js: abort === true ? null : abort replaced with abort === false ? null : abort
Mutant 675 in through.js: abort === true ? null : abort replaced with abort !== true ? null : abort
Mutant 676 in through.js: abort === true ? null : abort replaced with !abort ? null : abort
Mutant 677 in through.js: end replaced with end == true
Mutant 678 in through.js: end replaced with end != true
Mutant 679 in through.js: end replaced with !end
Mutant 680 in through.js: end replaced with end => end === 'end'
Mutant 681 in through.js: end replaced with end => !end
Mutant 682 in through.js: end replaced with end => end && cb(end, data)
Mutant 683 in through.js: !end replaced with end || a
Mutant 684 in through.js: !end replaced with !a
Mutant 685 in through.js: !end replaced with a === false
Mutant 686 in through.js: op replaced with 1 + data
Mutant 687 in through.js: op replaced with op > 0 ? data : null
Mutant 688 in through.js: data replaced with null
Mutant 689 in through.js: data replaced with undefined
Mutant 690 in through.js: data replaced with data + 1
Mutant 691 in through.js: end replaced with null
Mutant 692 in through.js: end replaced with undefined
Mutant 693 in through.js: end replaced with false
Mutant 694 in through.js: cb(end, data) replaced with cb(end, data + 1)
Mutant 695 in through.js: cb(end, data) replaced with cb(end, data - 1)
Mutant 696 in through.js: cb(end, data) replaced with cb(end, !data)
Mutant 697 in through.js: cb replaced with abort
Mutant 698 in through.js: cb replaced with data
Mutant 699 in through.js: end replaced with read(end, function (end, data) {
  if (!end) op && op(data);else once(end);
  cb(null, data);
})
Mutant 700 in through.js: end replaced with read(end, function (end, data) {
  if (!end) op && op(data);else once(end);
  cb(end, data);
})
Mutant 701 in through.js: data replaced with null
Mutant 702 in through.js: data replaced with ""
Mutant 703 in through.js: data replaced with error
Mutant 704 in unique.js: prop replaced with -prop
Mutant 705 in unique.js: prop replaced with prop[0]
Mutant 706 in unique.js: field replaced with field + 1
Mutant 707 in unique.js: field replaced with "field"
Mutant 708 in unique.js: field replaced with field.toUpperCase()
Mutant 709 in unique.js: field replaced with field.length
Mutant 710 in unique.js: field replaced with field[0]
Mutant 711 in unique.js: field replaced with field.abc
Mutant 712 in unique.js: data replaced with true
Mutant 713 in unique.js: data replaced with false
Mutant 714 in unique.js: data replaced with null
Mutant 715 in unique.js: seen[key] replaced with !seen[key]
Mutant 716 in unique.js: seen[key] replaced with seen[key] === 1
Mutant 717 in abort-cb.js: cb replaced with !abort
Mutant 718 in abort-cb.js: cb replaced with abort || null
Mutant 719 in abort-cb.js: cb replaced with typeof abort === 'function'
Mutant 720 in abort-cb.js: abort replaced with null
Mutant 721 in abort-cb.js: abort replaced with !abort
Mutant 722 in abort-cb.js: abort replaced with undefined
Mutant 723 in abort-cb.js: onAbort replaced with onAbort || undefined
Mutant 724 in abort-cb.js: onAbort replaced with onAbort && abort
Mutant 725 in abort-cb.js: onAbort replaced with onAbort ? abort : null
Mutant 726 in abort-cb.js: abort === true ? null : abort replaced with abort === false ? null : abort
Mutant 727 in abort-cb.js: abort === true ? null : abort replaced with abort === true && !onAbort
Mutant 728 in abort-cb.js: abort === true ? null : abort replaced with abort === false && !onAbort
Mutant 729 in prop.js: key.exec replaced with key.value
Mutant 730 in prop.js: key.exec replaced with key.test
Mutant 731 in prop.js: key.exec replaced with key.match
Mutant 732 in prop.js: data replaced with data[key]
Mutant 733 in prop.js: data replaced with key + ''
Mutant 734 in prop.js: data replaced with Math.random()
Mutant 735 in tester.js: test.test replaced with !test.test
Mutant 736 in tester.js: data replaced with null
Mutant 737 in tester.js: data replaced with undefined
Mutant 738 in tester.js: data replaced with data + 1
Mutant 739 in tester.js: prop replaced with prop.someOtherProperty
Mutant 740 in tester.js: test replaced with test.test(data)
Mutant 741 in tester.js: test replaced with data[test]
Mutant 742 in tester.js: test replaced with data.prop[test]
[32m21:40:15 (2814) INFO Instrumenter[39m Instrumented 31 source file(s) with 743 mutant(s)
[32m21:40:15 (2814) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m21:40:16 (2814) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m21:40:16 (2814) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m21:40:18 (2814) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 1 second (net 1852 ms, overhead 1 ms).
Mutation testing 2% (elapsed: <1m, remaining: ~6m) 19/743 tested (0 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~9m) 26/743 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~13m) 27/743 tested (1 survived, 1 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~16m) 29/743 tested (1 survived, 2 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~16m) 35/743 tested (4 survived, 3 timed out)
Mutation testing 5% (elapsed: ~1m, remaining: ~17m) 40/743 tested (9 survived, 3 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~17m) 46/743 tested (15 survived, 3 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~17m) 52/743 tested (16 survived, 3 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~16m) 61/743 tested (16 survived, 3 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~16m) 69/743 tested (16 survived, 3 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~16m) 74/743 tested (21 survived, 3 timed out)
Mutation testing 10% (elapsed: ~2m, remaining: ~16m) 80/743 tested (27 survived, 3 timed out)
Mutation testing 11% (elapsed: ~2m, remaining: ~16m) 85/743 tested (32 survived, 3 timed out)
Mutation testing 12% (elapsed: ~2m, remaining: ~16m) 91/743 tested (38 survived, 3 timed out)
Mutation testing 12% (elapsed: ~2m, remaining: ~16m) 96/743 tested (43 survived, 3 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~16m) 105/743 tested (48 survived, 3 timed out)
Mutation testing 14% (elapsed: ~2m, remaining: ~16m) 107/743 tested (49 survived, 4 timed out)
Mutation testing 15% (elapsed: ~3m, remaining: ~16m) 117/743 tested (52 survived, 4 timed out)
Mutation testing 16% (elapsed: ~3m, remaining: ~15m) 123/743 tested (58 survived, 4 timed out)
Mutation testing 17% (elapsed: ~3m, remaining: ~15m) 132/743 tested (61 survived, 4 timed out)
Mutation testing 18% (elapsed: ~3m, remaining: ~15m) 134/743 tested (61 survived, 5 timed out)
Mutation testing 18% (elapsed: ~3m, remaining: ~16m) 138/743 tested (62 survived, 6 timed out)
Mutation testing 19% (elapsed: ~3m, remaining: ~15m) 146/743 tested (67 survived, 6 timed out)
Mutation testing 20% (elapsed: ~4m, remaining: ~15m) 155/743 tested (70 survived, 6 timed out)
Mutation testing 22% (elapsed: ~4m, remaining: ~14m) 164/743 tested (72 survived, 6 timed out)
Mutation testing 22% (elapsed: ~4m, remaining: ~14m) 168/743 tested (72 survived, 7 timed out)
Mutation testing 23% (elapsed: ~4m, remaining: ~14m) 174/743 tested (76 survived, 7 timed out)
Mutation testing 24% (elapsed: ~4m, remaining: ~14m) 182/743 tested (79 survived, 7 timed out)
Mutation testing 25% (elapsed: ~4m, remaining: ~14m) 189/743 tested (80 survived, 7 timed out)
Mutation testing 26% (elapsed: ~5m, remaining: ~14m) 195/743 tested (80 survived, 7 timed out)
Mutation testing 27% (elapsed: ~5m, remaining: ~13m) 202/743 tested (83 survived, 7 timed out)
Mutation testing 28% (elapsed: ~5m, remaining: ~13m) 209/743 tested (85 survived, 7 timed out)
Mutation testing 28% (elapsed: ~5m, remaining: ~13m) 215/743 tested (89 survived, 7 timed out)
Mutation testing 29% (elapsed: ~5m, remaining: ~13m) 221/743 tested (94 survived, 7 timed out)
Mutation testing 30% (elapsed: ~5m, remaining: ~13m) 227/743 tested (97 survived, 7 timed out)
Mutation testing 31% (elapsed: ~6m, remaining: ~12m) 237/743 tested (97 survived, 7 timed out)
Mutation testing 33% (elapsed: ~6m, remaining: ~12m) 250/743 tested (98 survived, 7 timed out)
Mutation testing 34% (elapsed: ~6m, remaining: ~12m) 256/743 tested (102 survived, 7 timed out)
Mutation testing 35% (elapsed: ~6m, remaining: ~11m) 262/743 tested (105 survived, 7 timed out)
Mutation testing 36% (elapsed: ~6m, remaining: ~11m) 273/743 tested (107 survived, 7 timed out)
Mutation testing 37% (elapsed: ~6m, remaining: ~11m) 281/743 tested (110 survived, 7 timed out)
Mutation testing 38% (elapsed: ~7m, remaining: ~11m) 284/743 tested (110 survived, 7 timed out)
Mutation testing 38% (elapsed: ~7m, remaining: ~11m) 286/743 tested (110 survived, 9 timed out)
Mutation testing 39% (elapsed: ~7m, remaining: ~11m) 292/743 tested (110 survived, 9 timed out)
Mutation testing 40% (elapsed: ~7m, remaining: ~11m) 298/743 tested (113 survived, 10 timed out)
Mutation testing 40% (elapsed: ~7m, remaining: ~11m) 299/743 tested (113 survived, 11 timed out)
Mutation testing 40% (elapsed: ~7m, remaining: ~11m) 302/743 tested (115 survived, 12 timed out)
Mutation testing 41% (elapsed: ~8m, remaining: ~11m) 309/743 tested (118 survived, 12 timed out)
Mutation testing 41% (elapsed: ~8m, remaining: ~11m) 312/743 tested (118 survived, 13 timed out)
Mutation testing 42% (elapsed: ~8m, remaining: ~11m) 314/743 tested (119 survived, 14 timed out)
Mutation testing 43% (elapsed: ~8m, remaining: ~11m) 320/743 tested (125 survived, 14 timed out)
Mutation testing 43% (elapsed: ~8m, remaining: ~11m) 325/743 tested (130 survived, 14 timed out)
Mutation testing 44% (elapsed: ~8m, remaining: ~10m) 331/743 tested (134 survived, 14 timed out)
Mutation testing 45% (elapsed: ~9m, remaining: ~10m) 336/743 tested (136 survived, 14 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~10m) 342/743 tested (137 survived, 14 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~10m) 343/743 tested (137 survived, 15 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~11m) 344/743 tested (137 survived, 16 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~10m) 349/743 tested (141 survived, 17 timed out)
Mutation testing 47% (elapsed: ~9m, remaining: ~10m) 355/743 tested (147 survived, 17 timed out)
Mutation testing 48% (elapsed: ~10m, remaining: ~10m) 360/743 tested (152 survived, 17 timed out)
Mutation testing 48% (elapsed: ~10m, remaining: ~10m) 362/743 tested (154 survived, 17 timed out)
Mutation testing 48% (elapsed: ~10m, remaining: ~10m) 364/743 tested (155 survived, 18 timed out)
Mutation testing 49% (elapsed: ~10m, remaining: ~10m) 371/743 tested (157 survived, 19 timed out)
Mutation testing 50% (elapsed: ~10m, remaining: ~10m) 374/743 tested (158 survived, 20 timed out)
Mutation testing 52% (elapsed: ~10m, remaining: ~9m) 387/743 tested (158 survived, 20 timed out)
Mutation testing 52% (elapsed: ~11m, remaining: ~10m) 389/743 tested (158 survived, 21 timed out)
Mutation testing 52% (elapsed: ~11m, remaining: ~9m) 392/743 tested (160 survived, 22 timed out)
Mutation testing 53% (elapsed: ~11m, remaining: ~9m) 398/743 tested (161 survived, 22 timed out)
Mutation testing 54% (elapsed: ~11m, remaining: ~9m) 403/743 tested (161 survived, 23 timed out)
Mutation testing 55% (elapsed: ~11m, remaining: ~9m) 409/743 tested (163 survived, 24 timed out)
Mutation testing 55% (elapsed: ~11m, remaining: ~9m) 411/743 tested (165 survived, 24 timed out)
Mutation testing 56% (elapsed: ~12m, remaining: ~9m) 421/743 tested (168 survived, 25 timed out)
Mutation testing 57% (elapsed: ~12m, remaining: ~9m) 425/743 tested (169 survived, 25 timed out)
Mutation testing 57% (elapsed: ~12m, remaining: ~9m) 428/743 tested (169 survived, 27 timed out)
Mutation testing 59% (elapsed: ~12m, remaining: ~8m) 441/743 tested (171 survived, 27 timed out)
Mutation testing 61% (elapsed: ~12m, remaining: ~7m) 456/743 tested (172 survived, 27 timed out)
Mutation testing 62% (elapsed: ~12m, remaining: ~7m) 464/743 tested (174 survived, 27 timed out)
Mutation testing 63% (elapsed: ~13m, remaining: ~7m) 471/743 tested (174 survived, 27 timed out)
Mutation testing 64% (elapsed: ~13m, remaining: ~7m) 477/743 tested (175 survived, 27 timed out)
Mutation testing 64% (elapsed: ~13m, remaining: ~7m) 479/743 tested (175 survived, 28 timed out)
Mutation testing 64% (elapsed: ~13m, remaining: ~7m) 480/743 tested (175 survived, 29 timed out)
Mutation testing 64% (elapsed: ~13m, remaining: ~7m) 482/743 tested (175 survived, 30 timed out)
Mutation testing 65% (elapsed: ~13m, remaining: ~7m) 484/743 tested (175 survived, 32 timed out)
Mutation testing 65% (elapsed: ~14m, remaining: ~7m) 487/743 tested (177 survived, 33 timed out)
Mutation testing 66% (elapsed: ~14m, remaining: ~7m) 493/743 tested (181 survived, 33 timed out)
Mutation testing 67% (elapsed: ~14m, remaining: ~6m) 500/743 tested (181 survived, 33 timed out)
Mutation testing 68% (elapsed: ~14m, remaining: ~6m) 507/743 tested (183 survived, 33 timed out)
Mutation testing 69% (elapsed: ~14m, remaining: ~6m) 514/743 tested (185 survived, 33 timed out)
Mutation testing 69% (elapsed: ~14m, remaining: ~6m) 520/743 tested (185 survived, 33 timed out)
Mutation testing 70% (elapsed: ~15m, remaining: ~6m) 527/743 tested (185 survived, 33 timed out)
Mutation testing 71% (elapsed: ~15m, remaining: ~6m) 529/743 tested (185 survived, 34 timed out)
Mutation testing 71% (elapsed: ~15m, remaining: ~6m) 530/743 tested (185 survived, 35 timed out)
Mutation testing 71% (elapsed: ~15m, remaining: ~6m) 534/743 tested (185 survived, 36 timed out)
Mutation testing 72% (elapsed: ~15m, remaining: ~6m) 537/743 tested (185 survived, 37 timed out)
Mutation testing 72% (elapsed: ~15m, remaining: ~5m) 539/743 tested (185 survived, 38 timed out)
Mutation testing 73% (elapsed: ~16m, remaining: ~5m) 545/743 tested (188 survived, 38 timed out)
Mutation testing 74% (elapsed: ~16m, remaining: ~5m) 552/743 tested (189 survived, 38 timed out)
Mutation testing 74% (elapsed: ~16m, remaining: ~5m) 554/743 tested (190 survived, 38 timed out)
Mutation testing 74% (elapsed: ~16m, remaining: ~5m) 556/743 tested (190 survived, 40 timed out)
Mutation testing 75% (elapsed: ~16m, remaining: ~5m) 562/743 tested (190 survived, 40 timed out)
Mutation testing 76% (elapsed: ~16m, remaining: ~5m) 569/743 tested (190 survived, 40 timed out)
Mutation testing 77% (elapsed: ~17m, remaining: ~4m) 579/743 tested (193 survived, 40 timed out)
Mutation testing 79% (elapsed: ~17m, remaining: ~4m) 589/743 tested (193 survived, 40 timed out)
Mutation testing 79% (elapsed: ~17m, remaining: ~4m) 593/743 tested (193 survived, 41 timed out)
Mutation testing 80% (elapsed: ~17m, remaining: ~4m) 599/743 tested (195 survived, 41 timed out)
Mutation testing 81% (elapsed: ~17m, remaining: ~3m) 609/743 tested (198 survived, 41 timed out)
Mutation testing 82% (elapsed: ~17m, remaining: ~3m) 614/743 tested (198 survived, 42 timed out)
Mutation testing 83% (elapsed: ~18m, remaining: ~3m) 619/743 tested (198 survived, 43 timed out)
Mutation testing 84% (elapsed: ~18m, remaining: ~3m) 629/743 tested (201 survived, 43 timed out)
Mutation testing 85% (elapsed: ~18m, remaining: ~3m) 634/743 tested (202 survived, 43 timed out)
Mutation testing 86% (elapsed: ~18m, remaining: ~2m) 643/743 tested (205 survived, 44 timed out)
Mutation testing 86% (elapsed: ~18m, remaining: ~2m) 646/743 tested (205 survived, 45 timed out)
Mutation testing 87% (elapsed: ~18m, remaining: ~2m) 653/743 tested (208 survived, 45 timed out)
Mutation testing 89% (elapsed: ~19m, remaining: ~2m) 663/743 tested (208 survived, 45 timed out)
Mutation testing 90% (elapsed: ~19m, remaining: ~1m) 673/743 tested (211 survived, 45 timed out)
Mutation testing 91% (elapsed: ~19m, remaining: ~1m) 679/743 tested (216 survived, 45 timed out)
Mutation testing 92% (elapsed: ~19m, remaining: ~1m) 685/743 tested (220 survived, 45 timed out)
Mutation testing 93% (elapsed: ~19m, remaining: ~1m) 692/743 tested (224 survived, 45 timed out)
Mutation testing 94% (elapsed: ~19m, remaining: ~1m) 704/743 tested (226 survived, 45 timed out)
Mutation testing 95% (elapsed: ~20m, remaining: <1m) 709/743 tested (227 survived, 45 timed out)
Mutation testing 96% (elapsed: ~20m, remaining: <1m) 715/743 tested (227 survived, 45 timed out)
Mutation testing 97% (elapsed: ~20m, remaining: <1m) 723/743 tested (227 survived, 45 timed out)
Mutation testing 98% (elapsed: ~20m, remaining: <1m) 731/743 tested (230 survived, 45 timed out)
Mutation testing 99% (elapsed: ~20m, remaining: <1m) 736/743 tested (234 survived, 45 timed out)
Mutation testing 99% (elapsed: ~20m, remaining: <1m) 737/743 tested (234 survived, 46 timed out)
Mutation testing 99% (elapsed: ~21m, remaining: <1m) 742/743 tested (235 survived, 47 timed out)

All tests
  ✓ All tests (killed 461)

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (!done && false) {

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (!done || true) {

[Survived] PrecomputedMutator
sinks/drain.js:14:22
-       if(abort) return sink.abort()
+       if(abort) return sink.aborch()

[Survived] PrecomputedMutator
sinks/drain.js:26:18
-                 if(done) done(end === true ? null : end)
+                 if("some string") done(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end instanceof Error) {

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end !== true) {

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end > 5) {

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(console.log('error'))

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(doneLackingErr = new Error('different error message'))

[Survived] PrecomputedMutator
sinks/drain.js:34:15
-                 read(abort || true, done || function () {})
+                 read(abort || false, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:15
-                 read(abort || true, done || function () {})
+                 read(abort || true, done || function () {
+     throw new Error('done is not a function');
+   })

[Survived] PrecomputedMutator
sinks/drain.js:34:15
-                 read(abort || true, done || function () {})
+                 read(abort || true, done || function () {
+     console.log('done is not a function');
+   })

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(abort && true, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(null, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:8
-       if(read) return read(abort, cb || function () {})
+       if(undefined) return read(abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:8
-       if(read) return read(abort, cb || function () {})
+       if(null) return read(abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:8
-       if(read) return read(abort, cb || function () {})
+       if(() => {}) return read(abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:21
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(!abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:26
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(undefined, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:33
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(abort, abort && function () {})

[Survived] PrecomputedMutator
sinks/find.js:9:6
-     if(!cb)
+     if(cb === test)

[Survived] PrecomputedMutator
sinks/find.js:15:8
-       if(test(data)) {
+       if(test(data, data)) {

[Survived] PrecomputedMutator
sinks/find.js:17:7
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:17:10
-         cb(null, data)
+         cb(undefined, data)

[Survived] PrecomputedMutator
sinks/find.js:17:10
-         cb(null, data)
+         cb(0, data)

[Survived] PrecomputedMutator
sinks/find.js:21:8
-       if(ended) return //already called back
+       if(ended && cb) return //already called back

[Survived] PrecomputedMutator
sinks/find.js:22:8
-       cb(err === true ? null : err, null)
+       cb(err === false ? null : err, null)

[Survived] PrecomputedMutator
sinks/find.js:22:8
-       cb(err === true ? null : err, null)
+       cb(err !== true ? null : err, null)

[Survived] PrecomputedMutator
sinks/find.js:22:8
-       cb(err === true ? null : err, null)
+       cb(!err ? null : err, null)

[Survived] PrecomputedMutator
sinks/log.js:7:5
-       console.log(data)
+       console.warn(data)

[Survived] PrecomputedMutator
sinks/log.js:7:5
-       console.log(data)
+       module.parent.log(data)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(console.log("Hello, world!"))

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(console.log(data + 1))

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(console.log(data.toUpperCase()))

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain("some string", done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(undefined, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain('0', done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(1, done)

[Survived] PrecomputedMutator
sinks/reduce.js:12:7
-     if (arguments.length === 2)
+     if (arguments.length < 2)

[Survived] PrecomputedMutator
sinks/reduce.js:16:12
-           if(end) return cb(end === true ? null : end)
+           if(acc > data) return cb(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return null(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return undefined(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return false(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb('end')

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(false)

[Survived] PrecomputedMutator
sources/count.js:6:8
-       if(end) return cb && cb(end)
+       if(end === true) return cb && cb(end)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i == max)

[Survived] PrecomputedMutator
sources/count.js:9:8
-       cb(null, i++)
+       cb(undefined, i++)

[Survived] PrecomputedMutator
sources/count.js:9:14
-       cb(null, i++)
+       cb(null, i = i + 2)

[Survived] PrecomputedMutator
sources/count.js:9:14
-       cb(null, i++)
+       cb(null, i = max + 1)

[Survived] PrecomputedMutator
sources/infinite.js:5:8
-       if(end) return cb && cb(end)
+       if(end === 0) return cb && cb(end)

[Survived] PrecomputedMutator
sources/infinite.js:5:8
-       if(end) return cb && cb(end)
+       if(cb === undefined) return cb && cb(end)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end + 1)

[Survived] PrecomputedMutator
sources/infinite.js:6:12
-       return cb(null, generate())
+       return cb(undefined, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:12
-       return cb(null, generate())
+       return cb(0, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:12
-       return cb(null, generate())
+       return cb("", generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:15
-       return cb(null, generate())
+       return cb(undefined, generate())

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(end))

[Survived] PrecomputedMutator
sources/once.js:6:8
-       if(abort)
+       if(abort !== null)

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, onAbort, value)

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, function () {})

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abort(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return _value(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return 0(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(abort, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(foo, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cbCb, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort && onAbort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, onAbort && abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, onAbort && !abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort.call(this))

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort.call(this, cb))

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort.call(this, abort, cb))

[Survived] PrecomputedMutator
sources/once.js:8:8
-       if(value != null) {
+       if(value !== null) {

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb(undefined, _value)

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb(0, _value)

[Survived] PrecomputedMutator
sources/once.js:10:10
-         cb(null, _value)
+         cb('', _value)

[Survived] PrecomputedMutator
sources/values.js:5:6
-     if(!array)
+     if(array === null)

[Survived] PrecomputedMutator
sources/values.js:5:6
-     if(!array)
+     if(false)

[Survived] PrecomputedMutator
sources/values.js:5:6
-     if(!array)
+     if(i == 0)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(false) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(i) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(array.length) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, onAbort, abort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(abort, cb, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(onAbort, abort, cb)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(null, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(undefined, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb('foo', abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, !abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort === false, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, !abort === true, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, null)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, undefined)

[Survived] PrecomputedMutator
sources/values.js:10:6
-     if(!Array.isArray(array))
+     if(typeof array === 'object')

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(array + 1))

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(array[0]))

[Survived] PrecomputedMutator
sources/values.js:16:8
-       if(abort)
+       if(abort && abortCb)

[Survived] PrecomputedMutator
sources/values.js:19:10
-         cb(true)
+         cb(array.length > 0)

[Survived] PrecomputedMutator
sources/values.js:19:10
-         cb(true)
+         cb(!array.includes(array[i]))

[Survived] PrecomputedMutator
sources/values.js:21:7
-         cb(null, array[i++])
+         cb(abort, array[i++])

[Survived] PrecomputedMutator
throughs/async-map.js:12:10
-         if(aborted) return cb(aborted)
+         if(false) return cb(aborted)

[Survived] PrecomputedMutator
throughs/async-map.js:12:10
-         if(aborted) return cb(aborted)
+         if(undefined) return cb(aborted)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(undefined)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(null)

[Survived] PrecomputedMutator
throughs/async-map.js:15:12
-           if(!busy) read(abort, function (err) {
+           if(!aborted) read(abort, function (err) {

[Survived] PrecomputedMutator
throughs/async-map.js:15:12
-           if(!busy) read(abort, function (err) {
+           if(false) read(abort, function (err) {

[Survived] PrecomputedMutator
throughs/async-map.js:18:14
-             cb(abort)
+             cb(abort.length !== 0 ? abort : null)

[Survived] PrecomputedMutator
throughs/async-map.js:23:19
-             else cb(abort)
+             else cb("error")

[Survived] PrecomputedMutator
throughs/async-map.js:29:31
-             else if(aborted) cb(aborted)
+             else if(aborted) cb({})

[Survived] PrecomputedMutator
throughs/async-map.js:36:28
-                   abortCb && abortCb(aborted)
+                   abortCb && abortCb || false(aborted)

[Survived] PrecomputedMutator
throughs/async-map.js:36:36
-                   abortCb && abortCb(aborted)
+                   abortCb && abortCb(true)

[Survived] PrecomputedMutator
throughs/async-map.js:39:20
-                 else cb(null, data)
+                 else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/async-map.js:39:23
-                 else cb(null, data)
+                 else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/filter-not.js:8:17
-     return filter(function (data) { return !test(data) })
+     return filter(function (data) {
+     return data.hasOwnProperty('test') ? test(data) : !test(data);
+   })

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, read)

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, test)

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, data)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end && data, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end || data, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end ? data : null, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:11
-             read(err || abort, cb)
+             read(null || abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:11
-             read(err || abort, cb)
+             read(err && abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(null || abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(err ? abort : null, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:28:16
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/flatten.js:28:19
-             else cb(null, data)
+             else cb(undefined, data)

[Survived] PrecomputedMutator
throughs/flatten.js:28:19
-             else cb(null, data)
+             else cb(false, data)

[Survived] PrecomputedMutator
throughs/flatten.js:28:25
-             else cb(null, data)
+             else cb(null, data || [])

[Survived] PrecomputedMutator
throughs/flatten.js:35:23
-               return cb(end)
+               return cb(true)

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(mapper === null) return id

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(typeof mapper !== 'function') return id

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(Object.prototype.hasOwnProperty.call(mapper, 'simple')) return id

[Survived] PrecomputedMutator
throughs/non-unique.js:7:10
-     return unique(field, true)
+     return unique(field + 1, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(field !== field, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(field + 1, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(field * 0, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:24
-     return unique(field, true)
+     return unique(field, field !== null)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(ap)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(true)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(ended || true)

[Survived] PrecomputedMutator
throughs/take.js:25:33
-         else if(ended = end) read(ended, cb)
+         else if(ended = end) read(ended || end, cb)

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(!ended)

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(ended == true)

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(ended && false)

[Survived] PrecomputedMutator
throughs/take.js:34:20
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(undefined, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:34:20
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(false, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:34:23
-               last ? cb(null, data) : terminate(cb)
+               last ? cb(false, data) : terminate(cb)

[Survived] PrecomputedMutator
throughs/take.js:37:16
-               cb(null, data)
+               cb(undefined, data)

[Survived] PrecomputedMutator
throughs/take.js:37:16
-               cb(null, data)
+               cb(false, data)

[Survived] PrecomputedMutator
throughs/take.js:37:16
-               cb(null, data)
+               cb(NaN, data)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort === false ? null : abort)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort !== true ? null : abort)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(!abort ? null : abort)

[Survived] PrecomputedMutator
throughs/through.js:15:10
-         if(end) once(end)
+         if(end == true) once(end)

[Survived] PrecomputedMutator
throughs/through.js:15:10
-         if(end) once(end)
+         if(end != true) once(end)

[Survived] PrecomputedMutator
throughs/through.js:15:10
-         if(end) once(end)
+         if(!end) once(end)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(end => end === 'end')

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(end => !end)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(end => end && cb(end, data))

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(null)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(undefined)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(data + 1)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(null)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(undefined)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(false)

[Survived] PrecomputedMutator
throughs/unique.js:9:16
-     field = prop(field) || id
+     field = prop(field + 1) || id

[Survived] PrecomputedMutator
util/abort-cb.js:3:14
-     onAbort && onAbort(abort === true ? null: abort)
+     onAbort && onAbort || undefined(abort === true ? null: abort)

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.value(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.test(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.match(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data[key]); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(key + ''); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(Math.random()); return v && v[0] }

[Survived] PrecomputedMutator
util/tester.js:8:42
-       ? function (data) { return test.test(data) }
+       ? function (data) { return test.test(data + 1) }

[Survived] PrecomputedMutator
pull.js:7:20
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i <= length; i++)

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (args && null) {

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (args?.length === 0) {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (length * 2) {

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[1])

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[0], ref[1])

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[0], ref[1], ref[2])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read + 1, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read - 1, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read / 2, ref[0])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[1])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[0].length)

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[0][0])

[Survived] PrecomputedMutator
pull.js:22:22
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[0], ref[1], ref[2])

[Survived] PrecomputedMutator
pull.js:22:22
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[0], ref[1], null)

[Survived] PrecomputedMutator
pull.js:22:22
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[0], ref[1], undefined)

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3] + ref[4])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[3])

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[4])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(!read, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read + 1, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read * 2, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[1], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref["name"], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[Math.floor(Math.random() * ref.length)], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[2], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[0] + ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref.get(1), ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[2])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[length - 1])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[0])

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.forEach(read)

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.length(read)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(read + 1)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(read - 1)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(read = 0)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(ref, null)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(undefined, ref)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(ref, [])

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.call(null, ref)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.bind(null, ref)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.curry(null, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(undefined, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply({}, ref)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref = [])

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref = null)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref = function () {})

[Survived] PrecomputedMutator
pull.js:34:7
-     if (read && typeof read.source === 'function') {
+     if (read ? typeof read.source === 'function' : false) {

[Survived] PrecomputedMutator
pull.js:38:19
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i <= length; i++) {

[Survived] PrecomputedMutator
pull.js:38:19
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i !== length; i++) {

[Survived] PrecomputedMutator
pull.js:41:16
-         read = s(read)
+         read = s(read || null)

[Survived] PrecomputedMutator
pull.js:41:16
-         read = s(read)
+         read = s(read || {})

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s && typeof s.sink === 'function') {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s.sink && typeof s.sink === 'function') {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s && s.length > 0) {

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(null)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink("hello")

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(console.log("hello"))

Ran 0.94 tests per mutant on average.
----------------|---------|----------|-----------|------------|----------|----------|
File            | % score | # killed | # timeout | # survived | # no cov | # errors |
----------------|---------|----------|-----------|------------|----------|----------|
All files       |   68.37 |      461 |        47 |        235 |        0 |        0 |
 sinks          |   66.67 |       91 |         3 |         47 |        0 |        0 |
  collect.js    |  100.00 |        3 |         0 |          0 |        0 |        0 |
  drain.js      |   61.54 |       29 |         3 |         20 |        0 |        0 |
  find.js       |   74.29 |       26 |         0 |          9 |        0 |        0 |
  log.js        |    0.00 |        0 |         0 |          5 |        0 |        0 |
  on-end.js     |   58.33 |        7 |         0 |          5 |        0 |        0 |
  reduce.js     |   76.47 |       26 |         0 |          8 |        0 |        0 |
 sources        |   58.52 |       63 |        16 |         56 |        0 |        0 |
  count.js      |   70.59 |       12 |         0 |          5 |        0 |        0 |
  empty.js      |  100.00 |        4 |         2 |          0 |        0 |        0 |
  error.js      |  100.00 |        5 |         0 |          0 |        0 |        0 |
  infinite.js   |   50.00 |        5 |         3 |          8 |        0 |        0 |
  keys.js       |  100.00 |        3 |         0 |          0 |        0 |        0 |
  once.js       |   44.12 |       10 |         5 |         19 |        0 |        0 |
  values.js     |   55.56 |       24 |         6 |         24 |        0 |        0 |
 throughs       |   79.25 |      230 |        22 |         66 |        0 |        0 |
  async-map.js  |   80.00 |       48 |         4 |         13 |        0 |        0 |
  filter-not.js |   91.67 |       11 |         0 |          1 |        0 |        0 |
  filter.js     |   76.92 |       14 |         6 |          6 |        0 |        0 |
  flatten.js    |   86.76 |       52 |         7 |          9 |        0 |        0 |
  map.js        |   88.00 |       21 |         1 |          3 |        0 |        0 |
  non-unique.js |   44.44 |        4 |         0 |          5 |        0 |        0 |
  take.js       |   80.00 |       48 |         4 |         13 |        0 |        0 |
  through.js    |   57.14 |       20 |         0 |         15 |        0 |        0 |
  unique.js     |   92.31 |       12 |         0 |          1 |        0 |        0 |
 util           |   69.23 |       16 |         2 |          8 |        0 |        0 |
  abort-cb.js   |   91.67 |       11 |         0 |          1 |        0 |        0 |
  prop.js       |    0.00 |        0 |         0 |          6 |        0 |        0 |
  tester.js     |   87.50 |        5 |         2 |          1 |        0 |        0 |
 index.js       |  100.00 |       19 |         0 |          0 |        0 |        0 |
 pull.js        |   44.23 |       42 |         4 |         58 |        0 |        0 |
----------------|---------|----------|-----------|------------|----------|----------|
[32m22:01:19 (2814) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/reports/mutation/mutation.html
[32m22:01:19 (2814) INFO MutationTestExecutor[39m Done in 21 minutes 7 seconds.

real	21m8.623s
user	8m6.224s
sys	1m39.237s
