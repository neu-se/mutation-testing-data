[32m13:05:48 (2163) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m13:05:48 (2163) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m13:05:48 (2163) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[32m13:05:48 (2163) INFO ProjectReader[39m Found 1 of 12 file(s) to be mutated.
*** using standard mutators ***
Mutant 0 in complex.js: {
  'use strict';

  var cosh = Math.cosh || function (x) {
    return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
  };
  var sinh = Math.sinh || function (x) {
    return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
  };

  /**
   * Calculates cos(x) - 1 using Taylor series if x is small (-Â¼Ï€ â‰¤ x â‰¤ Â¼Ï€).
   *
   * @param {number} x
   * @returns {number} cos(x) - 1
   */
  var cosm1 = function (x) {
    var b = Math.PI / 4;
    if (-b > x || x > b) {
      return Math.cos(x) - 1.0;
    }

    /* Calculate horner form of polynomial of taylor series in Q
    var fac = 1, alt = 1, pol = {};
    for (var i = 0; i <= 16; i++) {
      fac*= i || 1;
      if (i % 2 == 0) {
        pol[i] = new Fraction(1, alt * fac);
        alt = -alt;
      }
    }
    console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1
    */

    var xx = x * x;
    return xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);
  };
  var hypot = function (x, y) {
    var a = Math.abs(x);
    var b = Math.abs(y);
    if (a < 3000 && b < 3000) {
      return Math.sqrt(a * a + b * b);
    }
    if (a < b) {
      a = b;
      b = x / y;
    } else {
      b = y / x;
    }
    return a * Math.sqrt(1 + b * b);
  };
  var parser_exit = function () {
    throw SyntaxError('Invalid Param');
  };

  /**
   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
   *
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  function logHypot(a, b) {
    var _a = Math.abs(a);
    var _b = Math.abs(b);
    if (a === 0) {
      return Math.log(_b);
    }
    if (b === 0) {
      return Math.log(_a);
    }
    if (_a < 3000 && _b < 3000) {
      return Math.log(a * a + b * b) * 0.5;
    }

    /* I got 4 ideas to compute this property without overflow:
     *
     * Testing 1000000 times with random samples for a,b âˆˆ [1, 1000000000] against a big decimal library to get an error estimate
     *
     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)
      Math.log(a * a + b * b) / 2
      *
     *
     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)
      var fn = function(a, b) {
     a = Math.abs(a);
     b = Math.abs(b);
     var t = Math.min(a, b);
     a = Math.max(a, b);
     t = t / a;
      return Math.log(a) + Math.log(1 + t * t) / 2;
     };
      * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)
      Math.log(a / Math.cos(Math.atan2(b, a)))
      * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)
      Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))
      */

    a = a / 2;
    b = b / 2;
    return 0.5 * Math.log(a * a + b * b) + Math.LN2;
  }
  var parse = function (a, b) {
    var z = {
      're': 0,
      'im': 0
    };
    if (a === undefined || a === null) {
      z['re'] = z['im'] = 0;
    } else if (b !== undefined) {
      z['re'] = a;
      z['im'] = b;
    } else switch (typeof a) {
      case 'object':
        if ('im' in a && 're' in a) {
          z['re'] = a['re'];
          z['im'] = a['im'];
        } else if ('abs' in a && 'arg' in a) {
          if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
            return Complex['INFINITY'];
          }
          z['re'] = a['abs'] * Math.cos(a['arg']);
          z['im'] = a['abs'] * Math.sin(a['arg']);
        } else if ('r' in a && 'phi' in a) {
          if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
            return Complex['INFINITY'];
          }
          z['re'] = a['r'] * Math.cos(a['phi']);
          z['im'] = a['r'] * Math.sin(a['phi']);
        } else if (a.length === 2) {
          // Quick array check
          z['re'] = a[0];
          z['im'] = a[1];
        } else {
          parser_exit();
        }
        break;
      case 'string':
        z['im'] = /* void */
        z['re'] = 0;
        var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
        var plus = 1;
        var minus = 0;
        if (tokens === null) {
          parser_exit();
        }
        for (var i = 0; i < tokens.length; i++) {
          var c = tokens[i];
          if (c === ' ' || c === '\t' || c === '\n') {
            /* void */
          } else if (c === '+') {
            plus++;
          } else if (c === '-') {
            minus++;
          } else if (c === 'i' || c === 'I') {
            if (plus + minus === 0) {
              parser_exit();
            }
            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
              z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
              i++;
            } else {
              z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
            }
            plus = minus = 0;
          } else {
            if (plus + minus === 0 || isNaN(c)) {
              parser_exit();
            }
            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
              z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
              i++;
            } else {
              z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
            }
            plus = minus = 0;
          }
        }

        // Still something on the stack
        if (plus + minus > 0) {
          parser_exit();
        }
        break;
      case 'number':
        z['im'] = 0;
        z['re'] = a;
        break;
      default:
        parser_exit();
    }
    if (isNaN(z['re']) || isNaN(z['im'])) {
      // If a calculation is NaN, we treat it as NaN and don't throw
      //parser_exit();
    }
    return z;
  };

  /**
   * @constructor
   * @returns {Complex}
   */
  function Complex(a, b) {
    if (!(this instanceof Complex)) {
      return new Complex(a, b);
    }
    var z = parse(a, b);
    this['re'] = z['re'];
    this['im'] = z['im'];
  }
  Complex.prototype = {
    're': 0,
    'im': 0,
    /**
     * Calculates the sign of a complex number, which is a normalized complex
     *
     * @returns {Complex}
     */
    'sign': function () {
      var abs = this['abs']();
      return new Complex(this['re'] / abs, this['im'] / abs);
    },
    /**
     * Adds two complex numbers
     *
     * @returns {Complex}
     */
    'add': function (a, b) {
      var z = new Complex(a, b);

      // Infinity + Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity + z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }
      return new Complex(this['re'] + z['re'], this['im'] + z['im']);
    },
    /**
     * Subtracts two complex numbers
     *
     * @returns {Complex}
     */
    'sub': function (a, b) {
      var z = new Complex(a, b);

      // Infinity - Infinity = NaN
      if (this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity - z = Infinity { where z != Infinity }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }
      return new Complex(this['re'] - z['re'], this['im'] - z['im']);
    },
    /**
     * Multiplies two complex numbers
     *
     * @returns {Complex}
     */
    'mul': function (a, b) {
      var z = new Complex(a, b);

      // Infinity * 0 = NaN
      if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity * z = Infinity { where z != 0 }
      if (this['isInfinite']() || z['isInfinite']()) {
        return Complex['INFINITY'];
      }

      // Short circuit for real values
      if (z['im'] === 0 && this['im'] === 0) {
        return new Complex(this['re'] * z['re'], 0);
      }
      return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);
    },
    /**
     * Divides two complex numbers
     *
     * @returns {Complex}
     */
    'div': function (a, b) {
      var z = new Complex(a, b);

      // 0 / 0 = NaN and Infinity / Infinity = NaN
      if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) {
        return Complex['NAN'];
      }

      // Infinity / 0 = Infinity
      if (this['isInfinite']() || z['isZero']()) {
        return Complex['INFINITY'];
      }

      // 0 / Infinity = 0
      if (this['isZero']() || z['isInfinite']()) {
        return Complex['ZERO'];
      }
      a = this['re'];
      b = this['im'];
      var c = z['re'];
      var d = z['im'];
      var t, x;
      if (0 === d) {
        // Divisor is real
        return new Complex(a / c, b / c);
      }
      if (Math.abs(c) < Math.abs(d)) {
        x = c / d;
        t = c * x + d;
        return new Complex((a * x + b) / t, (b * x - a) / t);
      } else {
        x = d / c;
        t = d * x + c;
        return new Complex((a + b * x) / t, (b - a * x) / t);
      }
    },
    /**
     * Calculate the power of two complex numbers
     *
     * @returns {Complex}
     */
    'pow': function (a, b) {
      var z = new Complex(a, b);
      a = this['re'];
      b = this['im'];
      if (z['isZero']()) {
        return Complex['ONE'];
      }

      // If the exponent is real
      if (z['im'] === 0) {
        if (b === 0 && a > 0) {
          return new Complex(Math.pow(a, z['re']), 0);
        } else if (a === 0) {
          // If base is fully imaginary

          switch ((z['re'] % 4 + 4) % 4) {
            case 0:
              return new Complex(Math.pow(b, z['re']), 0);
            case 1:
              return new Complex(0, Math.pow(b, z['re']));
            case 2:
              return new Complex(-Math.pow(b, z['re']), 0);
            case 3:
              return new Complex(0, -Math.pow(b, z['re']));
          }
        }
      }

      /* I couldn't find a good formula, so here is a derivation and optimization
       *
       * z_1^z_2 = (a + bi)^(c + di)
       *         = exp((c + di) * log(a + bi)
       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
       * =>...
       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
       *
       * =>...
       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
       *
       * =>
       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
       *
       */

      if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
        return Complex['ZERO'];
      }
      var arg = Math.atan2(b, a);
      var loh = logHypot(a, b);
      a = Math.exp(z['re'] * loh - z['im'] * arg);
      b = z['im'] * loh + z['re'] * arg;
      return new Complex(a * Math.cos(b), a * Math.sin(b));
    },
    /**
     * Calculate the complex square root
     *
     * @returns {Complex}
     */
    'sqrt': function () {
      var a = this['re'];
      var b = this['im'];
      var r = this['abs']();
      var re, im;
      if (a >= 0) {
        if (b === 0) {
          return new Complex(Math.sqrt(a), 0);
        }
        re = 0.5 * Math.sqrt(2.0 * (r + a));
      } else {
        re = Math.abs(b) / Math.sqrt(2 * (r - a));
      }
      if (a <= 0) {
        im = 0.5 * Math.sqrt(2.0 * (r - a));
      } else {
        im = Math.abs(b) / Math.sqrt(2 * (r + a));
      }
      return new Complex(re, b < 0 ? -im : im);
    },
    /**
     * Calculate the complex exponent
     *
     * @returns {Complex}
     */
    'exp': function () {
      var tmp = Math.exp(this['re']);
      if (this['im'] === 0) {
        //return new Complex(tmp, 0);
      }
      return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
    },
    /**
     * Calculate the complex exponent and subtracts one.
     *
     * This may be more accurate than `Complex(x).exp().sub(1)` if
     * `x` is small.
     *
     * @returns {Complex}
     */
    'expm1': function () {
      /**
       * exp(a + i*b) - 1
       = exp(a) * (cos(b) + j*sin(b)) - 1
       = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
       */

      var a = this['re'];
      var b = this['im'];
      return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));
    },
    /**
     * Calculate the natural log
     *
     * @returns {Complex}
     */
    'log': function () {
      var a = this['re'];
      var b = this['im'];
      if (b === 0 && a > 0) {
        //return new Complex(Math.log(a), 0);
      }
      return new Complex(logHypot(a, b), Math.atan2(b, a));
    },
    /**
     * Calculate the magnitude of the complex number
     *
     * @returns {number}
     */
    'abs': function () {
      return hypot(this['re'], this['im']);
    },
    /**
     * Calculate the angle of the complex number
     *
     * @returns {number}
     */
    'arg': function () {
      return Math.atan2(this['im'], this['re']);
    },
    /**
     * Calculate the sine of the complex number
     *
     * @returns {Complex}
     */
    'sin': function () {
      // sin(z) = ( e^iz - e^-iz ) / 2i 
      //        = sin(a)cosh(b) + i cos(a)sinh(b)

      var a = this['re'];
      var b = this['im'];
      return new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b));
    },
    /**
     * Calculate the cosine
     *
     * @returns {Complex}
     */
    'cos': function () {
      // cos(z) = ( e^iz + e^-iz ) / 2 
      //        = cos(a)cosh(b) - i sin(a)sinh(b)

      var a = this['re'];
      var b = this['im'];
      return new Complex(Math.cos(a) * cosh(b), -Math.sin(a) * sinh(b));
    },
    /**
     * Calculate the tangent
     *
     * @returns {Complex}
     */
    'tan': function () {
      // tan(z) = sin(z) / cos(z) 
      //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )
      //        = ( e^2iz - 1 ) / i( e^2iz + 1 )
      //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) + cosh(b);
      return new Complex(Math.sin(a) / d, sinh(b) / d);
    },
    /**
     * Calculate the cotangent
     *
     * @returns {Complex}
     */
    'cot': function () {
      // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = Math.cos(a) - cosh(b);
      return new Complex(-Math.sin(a) / d, sinh(b) / d);
    },
    /**
     * Calculate the secant
     *
     * @returns {Complex}
     */
    'sec': function () {
      // sec(c) = 2 / (e^(ci) + e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
      return new Complex(Math.cos(a) * cosh(b) / d, Math.sin(a) * sinh(b) / d);
    },
    /**
     * Calculate the cosecans
     *
     * @returns {Complex}
     */
    'csc': function () {
      // csc(c) = 2i / (e^(ci) - e^(-ci))

      var a = this['re'];
      var b = this['im'];
      var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
      return new Complex(Math.sin(a) * cosh(b) / d, -Math.cos(a) * sinh(b) / d);
    },
    /**
     * Calculate the complex arcus sinus
     *
     * @returns {Complex}
     */
    'asin': function () {
      // asin(c) = -i * log(ci + sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];
      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
      return new Complex(t2['im'], -t2['re']);
    },
    /**
     * Calculate the complex arcus cosinus
     *
     * @returns {Complex}
     */
    'acos': function () {
      // acos(c) = i * log(c - i * sqrt(1 - c^2))

      var a = this['re'];
      var b = this['im'];
      var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
      var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
      return new Complex(Math.PI / 2 - t2['im'], t2['re']);
    },
    /**
     * Calculate the complex arcus tangent
     *
     * @returns {Complex}
     */
    'atan': function () {
      // atan(c) = i / 2 log((i + x) / (i - x))

      var a = this['re'];
      var b = this['im'];
      if (a === 0) {
        if (b === 1) {
          return new Complex(0, Infinity);
        }
        if (b === -1) {
          return new Complex(0, -Infinity);
        }
      }
      var d = a * a + (1.0 - b) * (1.0 - b);
      var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
      return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
    },
    /**
     * Calculate the complex arcus cotangent
     *
     * @returns {Complex}
     */
    'acot': function () {
      // acot(c) = i / 2 log((c - i) / (c + i))

      var a = this['re'];
      var b = this['im'];
      if (b === 0) {
        return new Complex(Math.atan2(1, a), 0);
      }
      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
    },
    /**
     * Calculate the complex arcus secant
     *
     * @returns {Complex}
     */
    'asec': function () {
      // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

      var a = this['re'];
      var b = this['im'];
      if (a === 0 && b === 0) {
        return new Complex(0, Infinity);
      }
      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
    },
    /**
     * Calculate the complex arcus cosecans
     *
     * @returns {Complex}
     */
    'acsc': function () {
      // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

      var a = this['re'];
      var b = this['im'];
      if (a === 0 && b === 0) {
        return new Complex(Math.PI / 2, Infinity);
      }
      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
    },
    /**
     * Calculate the complex sinh
     *
     * @returns {Complex}
     */
    'sinh': function () {
      // sinh(c) = (e^c - e^-c) / 2

      var a = this['re'];
      var b = this['im'];
      return new Complex(sinh(a) * Math.cos(b), cosh(a) * Math.sin(b));
    },
    /**
     * Calculate the complex cosh
     *
     * @returns {Complex}
     */
    'cosh': function () {
      // cosh(c) = (e^c + e^-c) / 2

      var a = this['re'];
      var b = this['im'];
      return new Complex(cosh(a) * Math.cos(b), sinh(a) * Math.sin(b));
    },
    /**
     * Calculate the complex tanh
     *
     * @returns {Complex}
     */
    'tanh': function () {
      // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) + Math.cos(b);
      return new Complex(sinh(a) / d, Math.sin(b) / d);
    },
    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'coth': function () {
      // coth(c) = (e^c + e^-c) / (e^c - e^-c)

      var a = 2 * this['re'];
      var b = 2 * this['im'];
      var d = cosh(a) - Math.cos(b);
      return new Complex(sinh(a) / d, -Math.sin(b) / d);
    },
    /**
     * Calculate the complex coth
     *
     * @returns {Complex}
     */
    'csch': function () {
      // csch(c) = 2 / (e^c - e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) - cosh(2 * a);
      return new Complex(-2 * sinh(a) * Math.cos(b) / d, 2 * cosh(a) * Math.sin(b) / d);
    },
    /**
     * Calculate the complex sech
     *
     * @returns {Complex}
     */
    'sech': function () {
      // sech(c) = 2 / (e^c + e^-c)

      var a = this['re'];
      var b = this['im'];
      var d = Math.cos(2 * b) + cosh(2 * a);
      return new Complex(2 * cosh(a) * Math.cos(b) / d, -2 * sinh(a) * Math.sin(b) / d);
    },
    /**
     * Calculate the complex asinh
     *
     * @returns {Complex}
     */
    'asinh': function () {
      // asinh(c) = log(c + sqrt(c^2 + 1))

      var tmp = this['im'];
      this['im'] = -this['re'];
      this['re'] = tmp;
      var res = this['asin']();
      this['re'] = -this['im'];
      this['im'] = tmp;
      tmp = res['re'];
      res['re'] = -res['im'];
      res['im'] = tmp;
      return res;
    },
    /**
     * Calculate the complex acosh
     *
     * @returns {Complex}
     */
    'acosh': function () {
      // acosh(c) = log(c + sqrt(c^2 - 1))

      var res = this['acos']();
      if (res['im'] <= 0) {
        var tmp = res['re'];
        res['re'] = -res['im'];
        res['im'] = tmp;
      } else {
        var tmp = res['im'];
        res['im'] = -res['re'];
        res['re'] = tmp;
      }
      return res;
    },
    /**
     * Calculate the complex atanh
     *
     * @returns {Complex}
     */
    'atanh': function () {
      // atanh(c) = log((1+c) / (1-c)) / 2

      var a = this['re'];
      var b = this['im'];
      var noIM = a > 1 && b === 0;
      var oneMinus = 1 - a;
      var onePlus = 1 + a;
      var d = oneMinus * oneMinus + b * b;
      var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
      var temp = x['re'];
      x['re'] = logHypot(x['re'], x['im']) / 2;
      x['im'] = Math.atan2(x['im'], temp) / 2;
      if (noIM) {
        x['im'] = -x['im'];
      }
      return x;
    },
    /**
     * Calculate the complex acoth
     *
     * @returns {Complex}
     */
    'acoth': function () {
      // acoth(c) = log((c+1) / (c-1)) / 2

      var a = this['re'];
      var b = this['im'];
      if (a === 0 && b === 0) {
        return new Complex(0, Math.PI / 2);
      }
      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
    },
    /**
     * Calculate the complex acsch
     *
     * @returns {Complex}
     */
    'acsch': function () {
      // acsch(c) = log((1+sqrt(1+c^2))/c)

      var a = this['re'];
      var b = this['im'];
      if (b === 0) {
        return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
      }
      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
    },
    /**
     * Calculate the complex asech
     *
     * @returns {Complex}
     */
    'asech': function () {
      // asech(c) = log((1+sqrt(1-c^2))/c)

      var a = this['re'];
      var b = this['im'];
      if (this['isZero']()) {
        return Complex['INFINITY'];
      }
      var d = a * a + b * b;
      return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
    },
    /**
     * Calculate the complex inverse 1/z
     *
     * @returns {Complex}
     */
    'inverse': function () {
      // 1 / 0 = Infinity and 1 / Infinity = 0
      if (this['isZero']()) {
        return Complex['INFINITY'];
      }
      if (this['isInfinite']()) {
        return Complex['ZERO'];
      }
      var a = this['re'];
      var b = this['im'];
      var d = a * a + b * b;
      return new Complex(a / d, -b / d);
    },
    /**
     * Returns the complex conjugate
     *
     * @returns {Complex}
     */
    'conjugate': function () {
      return new Complex(this['re'], -this['im']);
    },
    /**
     * Gets the negated complex number
     *
     * @returns {Complex}
     */
    'neg': function () {
      return new Complex(-this['re'], -this['im']);
    },
    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'ceil': function (places) {
      places = Math.pow(10, places || 0);
      return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
    },
    /**
     * Floors the actual complex number
     *
     * @returns {Complex}
     */
    'floor': function (places) {
      places = Math.pow(10, places || 0);
      return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
    },
    /**
     * Ceils the actual complex number
     *
     * @returns {Complex}
     */
    'round': function (places) {
      places = Math.pow(10, places || 0);
      return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
    },
    /**
     * Compares two complex numbers
     *
     * **Note:** new Complex(Infinity).equals(Infinity) === false
     *
     * @returns {boolean}
     */
    'equals': function (a, b) {
      var z = new Complex(a, b);
      return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
    },
    /**
     * Clones the actual object
     *
     * @returns {Complex}
     */
    'clone': function () {
      return new Complex(this['re'], this['im']);
    },
    /**
     * Gets a string of the actual complex number
     *
     * @returns {string}
     */
    'toString': function () {
      var a = this['re'];
      var b = this['im'];
      var ret = "";
      if (this['isNaN']()) {
        return 'NaN';
      }
      if (this['isInfinite']()) {
        return 'Infinity';
      }
      if (Math.abs(a) < Complex['EPSILON']) {
        a = 0;
      }
      if (Math.abs(b) < Complex['EPSILON']) {
        b = 0;
      }

      // If is real number
      if (b === 0) {
        return ret + a;
      }
      if (a !== 0) {
        ret += a;
        ret += " ";
        if (b < 0) {
          b = -b;
          ret += "-";
        } else {
          ret += "+";
        }
        ret += " ";
      } else if (b < 0) {
        b = -b;
        ret += "-";
      }
      if (1 !== b) {
        // b is the absolute imaginary part
        ret += b;
      }
      return ret + "i";
    },
    /**
     * Returns the actual number as a vector
     *
     * @returns {Array}
     */
    'toVector': function () {
      return [this['re'], this['im']];
    },
    /**
     * Returns the actual real value of the current object
     *
     * @returns {number|null}
     */
    'valueOf': function () {
      if (this['im'] === 0) {
        return this['re'];
      }
      return null;
    },
    /**
     * Determines whether a complex number is not on the Riemann sphere.
     *
     * @returns {boolean}
     */
    'isNaN': function () {
      return isNaN(this['re']) || isNaN(this['im']);
    },
    /**
     * Determines whether or not a complex number is at the zero pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isZero': function () {
      return this['im'] === 0 && this['re'] === 0;
    },
    /**
     * Determines whether a complex number is not at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isFinite': function () {
      return isFinite(this['re']) && isFinite(this['im']);
    },
    /**
     * Determines whether or not a complex number is at the infinity pole of the
     * Riemann sphere.
     *
     * @returns {boolean}
     */
    'isInfinite': function () {
      return !(this['isNaN']() || this['isFinite']());
    }
  };
  Complex['ZERO'] = new Complex(0, 0);
  Complex['ONE'] = new Complex(1, 0);
  Complex['I'] = new Complex(0, 1);
  Complex['PI'] = new Complex(Math.PI, 0);
  Complex['E'] = new Complex(Math.E, 0);
  Complex['INFINITY'] = new Complex(Infinity, Infinity);
  Complex['NAN'] = new Complex(NaN, NaN);
  Complex['EPSILON'] = 1e-15;
  if (typeof define === 'function' && define['amd']) {
    define([], function () {
      return Complex;
    });
  } else if (typeof exports === 'object') {
    Object.defineProperty(Complex, "__esModule", {
      'value': true
    });
    Complex['default'] = Complex;
    Complex['Complex'] = Complex;
    module['exports'] = Complex;
  } else {
    root['Complex'] = Complex;
  }
} replaced with {}
Mutant 1 in complex.js: Math.cosh || function (x) {
  return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
} replaced with true
Mutant 2 in complex.js: Math.cosh || function (x) {
  return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
} replaced with false
Mutant 3 in complex.js: Math.cosh || function (x) {
  return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
} replaced with Math.cosh && function (x) {
  return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
}
Mutant 4 in complex.js: {
  return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
} replaced with {}
Mutant 5 in complex.js: Math.abs(x) < 1e-9 replaced with true
Mutant 6 in complex.js: Math.abs(x) < 1e-9 replaced with false
Mutant 7 in complex.js: Math.abs(x) < 1e-9 replaced with Math.abs(x) <= 1e-9
Mutant 8 in complex.js: Math.abs(x) < 1e-9 replaced with Math.abs(x) >= 1e-9
Mutant 9 in complex.js: 1 - x replaced with 1 + x
Mutant 10 in complex.js: (Math.exp(x) + Math.exp(-x)) * 0.5 replaced with (Math.exp(x) + Math.exp(-x)) / 0.5
Mutant 11 in complex.js: Math.exp(x) + Math.exp(-x) replaced with Math.exp(x) - Math.exp(-x)
Mutant 12 in complex.js: -x replaced with +x
Mutant 13 in complex.js: Math.sinh || function (x) {
  return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
} replaced with true
Mutant 14 in complex.js: Math.sinh || function (x) {
  return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
} replaced with false
Mutant 15 in complex.js: Math.sinh || function (x) {
  return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
} replaced with Math.sinh && function (x) {
  return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
}
Mutant 16 in complex.js: {
  return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
} replaced with {}
Mutant 17 in complex.js: Math.abs(x) < 1e-9 replaced with true
Mutant 18 in complex.js: Math.abs(x) < 1e-9 replaced with false
Mutant 19 in complex.js: Math.abs(x) < 1e-9 replaced with Math.abs(x) <= 1e-9
Mutant 20 in complex.js: Math.abs(x) < 1e-9 replaced with Math.abs(x) >= 1e-9
Mutant 21 in complex.js: (Math.exp(x) - Math.exp(-x)) * 0.5 replaced with (Math.exp(x) - Math.exp(-x)) / 0.5
Mutant 22 in complex.js: Math.exp(x) - Math.exp(-x) replaced with Math.exp(x) + Math.exp(-x)
Mutant 23 in complex.js: -x replaced with +x
Mutant 24 in complex.js: {
  var b = Math.PI / 4;
  if (-b > x || x > b) {
    return Math.cos(x) - 1.0;
  }

  /* Calculate horner form of polynomial of taylor series in Q
  var fac = 1, alt = 1, pol = {};
  for (var i = 0; i <= 16; i++) {
    fac*= i || 1;
    if (i % 2 == 0) {
      pol[i] = new Fraction(1, alt * fac);
      alt = -alt;
    }
  }
  console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1
  */

  var xx = x * x;
  return xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2);
} replaced with {}
Mutant 25 in complex.js: Math.PI / 4 replaced with Math.PI * 4
Mutant 26 in complex.js: -b > x || x > b replaced with true
Mutant 27 in complex.js: -b > x || x > b replaced with false
Mutant 28 in complex.js: -b > x || x > b replaced with -b > x && x > b
Mutant 29 in complex.js: -b > x replaced with false
Mutant 30 in complex.js: -b > x replaced with -b >= x
Mutant 31 in complex.js: -b > x replaced with -b <= x
Mutant 32 in complex.js: -b replaced with +b
Mutant 33 in complex.js: x > b replaced with false
Mutant 34 in complex.js: x > b replaced with x >= b
Mutant 35 in complex.js: x > b replaced with x <= b
Mutant 36 in complex.js: {
  return Math.cos(x) - 1.0;
} replaced with {}
Mutant 37 in complex.js: Math.cos(x) - 1.0 replaced with Math.cos(x) + 1.0
Mutant 38 in complex.js: x * x replaced with x / x
Mutant 39 in complex.js: xx * (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2) replaced with xx / (xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2)
Mutant 40 in complex.js: xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) - 1 / 2 replaced with xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) + 1 / 2
Mutant 41 in complex.js: xx * (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24) replaced with xx / (xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24)
Mutant 42 in complex.js: xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) + 1 / 24 replaced with xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) - 1 / 24
Mutant 43 in complex.js: xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) replaced with xx / (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720)
Mutant 44 in complex.js: xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720 replaced with xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) + 1 / 720
Mutant 45 in complex.js: xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) replaced with xx / (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320)
Mutant 46 in complex.js: xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320 replaced with xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) - 1 / 40320
Mutant 47 in complex.js: xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) replaced with xx / (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800)
Mutant 48 in complex.js: xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800 replaced with xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) + 1 / 3628800
Mutant 49 in complex.js: xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) replaced with xx / (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600)
Mutant 50 in complex.js: xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600 replaced with xx * (xx / 20922789888000 - 1 / 87178291200) - 1 / 479001600
Mutant 51 in complex.js: xx * (xx / 20922789888000 - 1 / 87178291200) replaced with xx / (xx / 20922789888000 - 1 / 87178291200)
Mutant 52 in complex.js: xx / 20922789888000 - 1 / 87178291200 replaced with xx / 20922789888000 + 1 / 87178291200
Mutant 53 in complex.js: xx / 20922789888000 replaced with xx * 20922789888000
Mutant 54 in complex.js: 1 / 87178291200 replaced with 1 * 87178291200
Mutant 55 in complex.js: 1 / 479001600 replaced with 1 * 479001600
Mutant 56 in complex.js: 1 / 3628800 replaced with 1 * 3628800
Mutant 57 in complex.js: 1 / 40320 replaced with 1 * 40320
Mutant 58 in complex.js: 1 / 720 replaced with 1 * 720
Mutant 59 in complex.js: 1 / 24 replaced with 1 * 24
Mutant 60 in complex.js: 1 / 2 replaced with 1 * 2
Mutant 61 in complex.js: {
  var a = Math.abs(x);
  var b = Math.abs(y);
  if (a < 3000 && b < 3000) {
    return Math.sqrt(a * a + b * b);
  }
  if (a < b) {
    a = b;
    b = x / y;
  } else {
    b = y / x;
  }
  return a * Math.sqrt(1 + b * b);
} replaced with {}
Mutant 62 in complex.js: a < 3000 && b < 3000 replaced with true
Mutant 63 in complex.js: a < 3000 && b < 3000 replaced with false
Mutant 64 in complex.js: a < 3000 && b < 3000 replaced with a < 3000 || b < 3000
Mutant 65 in complex.js: a < 3000 replaced with true
Mutant 66 in complex.js: a < 3000 replaced with a <= 3000
Mutant 67 in complex.js: a < 3000 replaced with a >= 3000
Mutant 68 in complex.js: b < 3000 replaced with true
Mutant 69 in complex.js: b < 3000 replaced with b <= 3000
Mutant 70 in complex.js: b < 3000 replaced with b >= 3000
Mutant 71 in complex.js: {
  return Math.sqrt(a * a + b * b);
} replaced with {}
Mutant 72 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 73 in complex.js: a * a replaced with a / a
Mutant 74 in complex.js: b * b replaced with b / b
Mutant 75 in complex.js: a < b replaced with true
Mutant 76 in complex.js: a < b replaced with false
Mutant 77 in complex.js: a < b replaced with a <= b
Mutant 78 in complex.js: a < b replaced with a >= b
Mutant 79 in complex.js: {
  a = b;
  b = x / y;
} replaced with {}
Mutant 80 in complex.js: x / y replaced with x * y
Mutant 81 in complex.js: {
  b = y / x;
} replaced with {}
Mutant 82 in complex.js: y / x replaced with y * x
Mutant 83 in complex.js: a * Math.sqrt(1 + b * b) replaced with a / Math.sqrt(1 + b * b)
Mutant 84 in complex.js: 1 + b * b replaced with 1 - b * b
Mutant 85 in complex.js: b * b replaced with b / b
Mutant 86 in complex.js: {
  throw SyntaxError('Invalid Param');
} replaced with {}
Mutant 87 in complex.js: 'Invalid Param' replaced with ""
Mutant 88 in complex.js: {
  var _a = Math.abs(a);
  var _b = Math.abs(b);
  if (a === 0) {
    return Math.log(_b);
  }
  if (b === 0) {
    return Math.log(_a);
  }
  if (_a < 3000 && _b < 3000) {
    return Math.log(a * a + b * b) * 0.5;
  }

  /* I got 4 ideas to compute this property without overflow:
   *
   * Testing 1000000 times with random samples for a,b âˆˆ [1, 1000000000] against a big decimal library to get an error estimate
   *
   * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)
    Math.log(a * a + b * b) / 2
    *
   *
   * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)
    var fn = function(a, b) {
   a = Math.abs(a);
   b = Math.abs(b);
   var t = Math.min(a, b);
   a = Math.max(a, b);
   t = t / a;
    return Math.log(a) + Math.log(1 + t * t) / 2;
   };
    * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)
    Math.log(a / Math.cos(Math.atan2(b, a)))
    * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)
    Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))
    */

  a = a / 2;
  b = b / 2;
  return 0.5 * Math.log(a * a + b * b) + Math.LN2;
} replaced with {}
Mutant 89 in complex.js: a === 0 replaced with true
Mutant 90 in complex.js: a === 0 replaced with false
Mutant 91 in complex.js: a === 0 replaced with a !== 0
Mutant 92 in complex.js: {
  return Math.log(_b);
} replaced with {}
Mutant 93 in complex.js: b === 0 replaced with true
Mutant 94 in complex.js: b === 0 replaced with false
Mutant 95 in complex.js: b === 0 replaced with b !== 0
Mutant 96 in complex.js: {
  return Math.log(_a);
} replaced with {}
Mutant 97 in complex.js: _a < 3000 && _b < 3000 replaced with true
Mutant 98 in complex.js: _a < 3000 && _b < 3000 replaced with false
Mutant 99 in complex.js: _a < 3000 && _b < 3000 replaced with _a < 3000 || _b < 3000
Mutant 100 in complex.js: _a < 3000 replaced with true
Mutant 101 in complex.js: _a < 3000 replaced with _a <= 3000
Mutant 102 in complex.js: _a < 3000 replaced with _a >= 3000
Mutant 103 in complex.js: _b < 3000 replaced with true
Mutant 104 in complex.js: _b < 3000 replaced with _b <= 3000
Mutant 105 in complex.js: _b < 3000 replaced with _b >= 3000
Mutant 106 in complex.js: {
  return Math.log(a * a + b * b) * 0.5;
} replaced with {}
Mutant 107 in complex.js: Math.log(a * a + b * b) * 0.5 replaced with Math.log(a * a + b * b) / 0.5
Mutant 108 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 109 in complex.js: a * a replaced with a / a
Mutant 110 in complex.js: b * b replaced with b / b
Mutant 111 in complex.js: a / 2 replaced with a * 2
Mutant 112 in complex.js: b / 2 replaced with b * 2
Mutant 113 in complex.js: 0.5 * Math.log(a * a + b * b) + Math.LN2 replaced with 0.5 * Math.log(a * a + b * b) - Math.LN2
Mutant 114 in complex.js: 0.5 * Math.log(a * a + b * b) replaced with 0.5 / Math.log(a * a + b * b)
Mutant 115 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 116 in complex.js: a * a replaced with a / a
Mutant 117 in complex.js: b * b replaced with b / b
Mutant 118 in complex.js: {
  var z = {
    're': 0,
    'im': 0
  };
  if (a === undefined || a === null) {
    z['re'] = z['im'] = 0;
  } else if (b !== undefined) {
    z['re'] = a;
    z['im'] = b;
  } else switch (typeof a) {
    case 'object':
      if ('im' in a && 're' in a) {
        z['re'] = a['re'];
        z['im'] = a['im'];
      } else if ('abs' in a && 'arg' in a) {
        if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
          return Complex['INFINITY'];
        }
        z['re'] = a['abs'] * Math.cos(a['arg']);
        z['im'] = a['abs'] * Math.sin(a['arg']);
      } else if ('r' in a && 'phi' in a) {
        if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
          return Complex['INFINITY'];
        }
        z['re'] = a['r'] * Math.cos(a['phi']);
        z['im'] = a['r'] * Math.sin(a['phi']);
      } else if (a.length === 2) {
        // Quick array check
        z['re'] = a[0];
        z['im'] = a[1];
      } else {
        parser_exit();
      }
      break;
    case 'string':
      z['im'] = /* void */
      z['re'] = 0;
      var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
      var plus = 1;
      var minus = 0;
      if (tokens === null) {
        parser_exit();
      }
      for (var i = 0; i < tokens.length; i++) {
        var c = tokens[i];
        if (c === ' ' || c === '\t' || c === '\n') {
          /* void */
        } else if (c === '+') {
          plus++;
        } else if (c === '-') {
          minus++;
        } else if (c === 'i' || c === 'I') {
          if (plus + minus === 0) {
            parser_exit();
          }
          if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
            z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
            i++;
          } else {
            z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
          }
          plus = minus = 0;
        } else {
          if (plus + minus === 0 || isNaN(c)) {
            parser_exit();
          }
          if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
            z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
            i++;
          } else {
            z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
          }
          plus = minus = 0;
        }
      }

      // Still something on the stack
      if (plus + minus > 0) {
        parser_exit();
      }
      break;
    case 'number':
      z['im'] = 0;
      z['re'] = a;
      break;
    default:
      parser_exit();
  }
  if (isNaN(z['re']) || isNaN(z['im'])) {
    // If a calculation is NaN, we treat it as NaN and don't throw
    //parser_exit();
  }
  return z;
} replaced with {}
Mutant 119 in complex.js: {
  're': 0,
  'im': 0
} replaced with {}
Mutant 120 in complex.js: a === undefined || a === null replaced with true
Mutant 121 in complex.js: a === undefined || a === null replaced with false
Mutant 122 in complex.js: a === undefined || a === null replaced with a === undefined && a === null
Mutant 123 in complex.js: a === undefined replaced with false
Mutant 124 in complex.js: a === undefined replaced with a !== undefined
Mutant 125 in complex.js: a === null replaced with false
Mutant 126 in complex.js: a === null replaced with a !== null
Mutant 127 in complex.js: {
  z['re'] = z['im'] = 0;
} replaced with {}
Mutant 128 in complex.js: 're' replaced with ""
Mutant 129 in complex.js: 'im' replaced with ""
Mutant 130 in complex.js: b !== undefined replaced with true
Mutant 131 in complex.js: b !== undefined replaced with false
Mutant 132 in complex.js: b !== undefined replaced with b === undefined
Mutant 133 in complex.js: {
  z['re'] = a;
  z['im'] = b;
} replaced with {}
Mutant 134 in complex.js: 're' replaced with ""
Mutant 135 in complex.js: 'im' replaced with ""
Mutant 136 in complex.js: case 'object':
  if ('im' in a && 're' in a) {
    z['re'] = a['re'];
    z['im'] = a['im'];
  } else if ('abs' in a && 'arg' in a) {
    if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
      return Complex['INFINITY'];
    }
    z['re'] = a['abs'] * Math.cos(a['arg']);
    z['im'] = a['abs'] * Math.sin(a['arg']);
  } else if ('r' in a && 'phi' in a) {
    if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
      return Complex['INFINITY'];
    }
    z['re'] = a['r'] * Math.cos(a['phi']);
    z['im'] = a['r'] * Math.sin(a['phi']);
  } else if (a.length === 2) {
    // Quick array check
    z['re'] = a[0];
    z['im'] = a[1];
  } else {
    parser_exit();
  }
  break; replaced with case 'object':
Mutant 137 in complex.js: 'object' replaced with ""
Mutant 138 in complex.js: 'im' in a && 're' in a replaced with true
Mutant 139 in complex.js: 'im' in a && 're' in a replaced with false
Mutant 140 in complex.js: 'im' in a && 're' in a replaced with 'im' in a || 're' in a
Mutant 141 in complex.js: 'im' replaced with ""
Mutant 142 in complex.js: 're' replaced with ""
Mutant 143 in complex.js: {
  z['re'] = a['re'];
  z['im'] = a['im'];
} replaced with {}
Mutant 144 in complex.js: 're' replaced with ""
Mutant 145 in complex.js: 're' replaced with ""
Mutant 146 in complex.js: 'im' replaced with ""
Mutant 147 in complex.js: 'im' replaced with ""
Mutant 148 in complex.js: 'abs' in a && 'arg' in a replaced with true
Mutant 149 in complex.js: 'abs' in a && 'arg' in a replaced with false
Mutant 150 in complex.js: 'abs' in a && 'arg' in a replaced with 'abs' in a || 'arg' in a
Mutant 151 in complex.js: 'abs' replaced with ""
Mutant 152 in complex.js: 'arg' replaced with ""
Mutant 153 in complex.js: {
  if (!Number.isFinite(a['abs']) && Number.isFinite(a['arg'])) {
    return Complex['INFINITY'];
  }
  z['re'] = a['abs'] * Math.cos(a['arg']);
  z['im'] = a['abs'] * Math.sin(a['arg']);
} replaced with {}
Mutant 154 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with true
Mutant 155 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with false
Mutant 156 in complex.js: !Number.isFinite(a['abs']) && Number.isFinite(a['arg']) replaced with !Number.isFinite(a['abs']) || Number.isFinite(a['arg'])
Mutant 157 in complex.js: !Number.isFinite(a['abs']) replaced with Number.isFinite(a['abs'])
Mutant 158 in complex.js: 'abs' replaced with ""
Mutant 159 in complex.js: 'arg' replaced with ""
Mutant 160 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 161 in complex.js: 'INFINITY' replaced with ""
Mutant 162 in complex.js: 're' replaced with ""
Mutant 163 in complex.js: a['abs'] * Math.cos(a['arg']) replaced with a['abs'] / Math.cos(a['arg'])
Mutant 164 in complex.js: 'abs' replaced with ""
Mutant 165 in complex.js: 'arg' replaced with ""
Mutant 166 in complex.js: 'im' replaced with ""
Mutant 167 in complex.js: a['abs'] * Math.sin(a['arg']) replaced with a['abs'] / Math.sin(a['arg'])
Mutant 168 in complex.js: 'abs' replaced with ""
Mutant 169 in complex.js: 'arg' replaced with ""
Mutant 170 in complex.js: 'r' in a && 'phi' in a replaced with true
Mutant 171 in complex.js: 'r' in a && 'phi' in a replaced with false
Mutant 172 in complex.js: 'r' in a && 'phi' in a replaced with 'r' in a || 'phi' in a
Mutant 173 in complex.js: 'r' replaced with ""
Mutant 174 in complex.js: 'phi' replaced with ""
Mutant 175 in complex.js: {
  if (!Number.isFinite(a['r']) && Number.isFinite(a['phi'])) {
    return Complex['INFINITY'];
  }
  z['re'] = a['r'] * Math.cos(a['phi']);
  z['im'] = a['r'] * Math.sin(a['phi']);
} replaced with {}
Mutant 176 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with true
Mutant 177 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with false
Mutant 178 in complex.js: !Number.isFinite(a['r']) && Number.isFinite(a['phi']) replaced with !Number.isFinite(a['r']) || Number.isFinite(a['phi'])
Mutant 179 in complex.js: !Number.isFinite(a['r']) replaced with Number.isFinite(a['r'])
Mutant 180 in complex.js: 'r' replaced with ""
Mutant 181 in complex.js: 'phi' replaced with ""
Mutant 182 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 183 in complex.js: 'INFINITY' replaced with ""
Mutant 184 in complex.js: 're' replaced with ""
Mutant 185 in complex.js: a['r'] * Math.cos(a['phi']) replaced with a['r'] / Math.cos(a['phi'])
Mutant 186 in complex.js: 'r' replaced with ""
Mutant 187 in complex.js: 'phi' replaced with ""
Mutant 188 in complex.js: 'im' replaced with ""
Mutant 189 in complex.js: a['r'] * Math.sin(a['phi']) replaced with a['r'] / Math.sin(a['phi'])
Mutant 190 in complex.js: 'r' replaced with ""
Mutant 191 in complex.js: 'phi' replaced with ""
Mutant 192 in complex.js: a.length === 2 replaced with true
Mutant 193 in complex.js: a.length === 2 replaced with false
Mutant 194 in complex.js: a.length === 2 replaced with a.length !== 2
Mutant 195 in complex.js: {
  // Quick array check
  z['re'] = a[0];
  z['im'] = a[1];
} replaced with {}
Mutant 196 in complex.js: 're' replaced with ""
Mutant 197 in complex.js: 'im' replaced with ""
Mutant 198 in complex.js: {
  parser_exit();
} replaced with {}
Mutant 199 in complex.js: case 'string':
  z['im'] = /* void */
  z['re'] = 0;
  var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
  var plus = 1;
  var minus = 0;
  if (tokens === null) {
    parser_exit();
  }
  for (var i = 0; i < tokens.length; i++) {
    var c = tokens[i];
    if (c === ' ' || c === '\t' || c === '\n') {
      /* void */
    } else if (c === '+') {
      plus++;
    } else if (c === '-') {
      minus++;
    } else if (c === 'i' || c === 'I') {
      if (plus + minus === 0) {
        parser_exit();
      }
      if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
        z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
        i++;
      } else {
        z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
      }
      plus = minus = 0;
    } else {
      if (plus + minus === 0 || isNaN(c)) {
        parser_exit();
      }
      if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
        z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
        i++;
      } else {
        z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
      }
      plus = minus = 0;
    }
  }

  // Still something on the stack
  if (plus + minus > 0) {
    parser_exit();
  }
  break; replaced with case 'string':
Mutant 200 in complex.js: 'string' replaced with ""
Mutant 201 in complex.js: 'im' replaced with ""
Mutant 202 in complex.js: 're' replaced with ""
Mutant 203 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g
Mutant 204 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\D+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g
Mutant 205 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g
Mutant 206 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\de[+-]?\d+|\d+\.?\d*|\.\d+|./g
Mutant 207 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\D*e[+-]?\d+|\d+\.?\d*|\.\d+|./g
Mutant 208 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]\d+|\d+\.?\d*|\.\d+|./g
Mutant 209 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[^+-]?\d+|\d+\.?\d*|\.\d+|./g
Mutant 210 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d|\d+\.?\d*|\.\d+|./g
Mutant 211 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\D+|\d+\.?\d*|\.\d+|./g
Mutant 212 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\d\.?\d*|\.\d+|./g
Mutant 213 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\D+\.?\d*|\.\d+|./g
Mutant 214 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\d+\.\d*|\.\d+|./g
Mutant 215 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\d+\.?\d|\.\d+|./g
Mutant 216 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\d+\.?\D*|\.\d+|./g
Mutant 217 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d|./g
Mutant 218 in complex.js: /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g replaced with /\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\D+|./g
Mutant 219 in complex.js: tokens === null replaced with true
Mutant 220 in complex.js: tokens === null replaced with false
Mutant 221 in complex.js: tokens === null replaced with tokens !== null
Mutant 222 in complex.js: {
  parser_exit();
} replaced with {}
Mutant 223 in complex.js: i < tokens.length replaced with false
Mutant 224 in complex.js: i < tokens.length replaced with i <= tokens.length
Mutant 225 in complex.js: i < tokens.length replaced with i >= tokens.length
Mutant 226 in complex.js: i++ replaced with i--
Mutant 227 in complex.js: {
  var c = tokens[i];
  if (c === ' ' || c === '\t' || c === '\n') {
    /* void */
  } else if (c === '+') {
    plus++;
  } else if (c === '-') {
    minus++;
  } else if (c === 'i' || c === 'I') {
    if (plus + minus === 0) {
      parser_exit();
    }
    if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
      i++;
    } else {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
    }
    plus = minus = 0;
  } else {
    if (plus + minus === 0 || isNaN(c)) {
      parser_exit();
    }
    if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
      z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
      i++;
    } else {
      z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
    }
    plus = minus = 0;
  }
} replaced with {}
Mutant 228 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with true
Mutant 229 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with false
Mutant 230 in complex.js: c === ' ' || c === '\t' || c === '\n' replaced with (c === ' ' || c === '\t') && c === '\n'
Mutant 231 in complex.js: c === ' ' || c === '\t' replaced with false
Mutant 232 in complex.js: c === ' ' || c === '\t' replaced with c === ' ' && c === '\t'
Mutant 233 in complex.js: c === ' ' replaced with false
Mutant 234 in complex.js: c === ' ' replaced with c !== ' '
Mutant 235 in complex.js: ' ' replaced with ""
Mutant 236 in complex.js: c === '\t' replaced with false
Mutant 237 in complex.js: c === '\t' replaced with c !== '\t'
Mutant 238 in complex.js: '\t' replaced with ""
Mutant 239 in complex.js: c === '\n' replaced with false
Mutant 240 in complex.js: c === '\n' replaced with c !== '\n'
Mutant 241 in complex.js: '\n' replaced with ""
Mutant 242 in complex.js: c === '+' replaced with true
Mutant 243 in complex.js: c === '+' replaced with false
Mutant 244 in complex.js: c === '+' replaced with c !== '+'
Mutant 245 in complex.js: '+' replaced with ""
Mutant 246 in complex.js: {
  plus++;
} replaced with {}
Mutant 247 in complex.js: plus++ replaced with plus--
Mutant 248 in complex.js: c === '-' replaced with true
Mutant 249 in complex.js: c === '-' replaced with false
Mutant 250 in complex.js: c === '-' replaced with c !== '-'
Mutant 251 in complex.js: '-' replaced with ""
Mutant 252 in complex.js: {
  minus++;
} replaced with {}
Mutant 253 in complex.js: minus++ replaced with minus--
Mutant 254 in complex.js: c === 'i' || c === 'I' replaced with true
Mutant 255 in complex.js: c === 'i' || c === 'I' replaced with false
Mutant 256 in complex.js: c === 'i' || c === 'I' replaced with c === 'i' && c === 'I'
Mutant 257 in complex.js: c === 'i' replaced with false
Mutant 258 in complex.js: c === 'i' replaced with c !== 'i'
Mutant 259 in complex.js: 'i' replaced with ""
Mutant 260 in complex.js: c === 'I' replaced with false
Mutant 261 in complex.js: c === 'I' replaced with c !== 'I'
Mutant 262 in complex.js: 'I' replaced with ""
Mutant 263 in complex.js: {
  if (plus + minus === 0) {
    parser_exit();
  }
  if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
    z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
    i++;
  } else {
    z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
  }
  plus = minus = 0;
} replaced with {}
Mutant 264 in complex.js: plus + minus === 0 replaced with true
Mutant 265 in complex.js: plus + minus === 0 replaced with false
Mutant 266 in complex.js: plus + minus === 0 replaced with plus + minus !== 0
Mutant 267 in complex.js: plus + minus replaced with plus - minus
Mutant 268 in complex.js: {
  parser_exit();
} replaced with {}
Mutant 269 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with true
Mutant 270 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with false
Mutant 271 in complex.js: tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1]) replaced with tokens[i + 1] !== ' ' || !isNaN(tokens[i + 1])
Mutant 272 in complex.js: tokens[i + 1] !== ' ' replaced with true
Mutant 273 in complex.js: tokens[i + 1] !== ' ' replaced with tokens[i + 1] === ' '
Mutant 274 in complex.js: i + 1 replaced with i - 1
Mutant 275 in complex.js: ' ' replaced with ""
Mutant 276 in complex.js: !isNaN(tokens[i + 1]) replaced with isNaN(tokens[i + 1])
Mutant 277 in complex.js: i + 1 replaced with i - 1
Mutant 278 in complex.js: {
  z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
  i++;
} replaced with {}
Mutant 279 in complex.js: z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]) replaced with z['im'] -= parseFloat((minus % 2 ? '-' : '') + tokens[i + 1])
Mutant 280 in complex.js: 'im' replaced with ""
Mutant 281 in complex.js: (minus % 2 ? '-' : '') + tokens[i + 1] replaced with (minus % 2 ? '-' : '') - tokens[i + 1]
Mutant 282 in complex.js: minus % 2 replaced with minus * 2
Mutant 283 in complex.js: '-' replaced with ""
Mutant 284 in complex.js: '' replaced with "Stryker was here!"
Mutant 285 in complex.js: i + 1 replaced with i - 1
Mutant 286 in complex.js: i++ replaced with i--
Mutant 287 in complex.js: {
  z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
} replaced with {}
Mutant 288 in complex.js: z['im'] += parseFloat((minus % 2 ? '-' : '') + '1') replaced with z['im'] -= parseFloat((minus % 2 ? '-' : '') + '1')
Mutant 289 in complex.js: 'im' replaced with ""
Mutant 290 in complex.js: minus % 2 replaced with minus * 2
Mutant 291 in complex.js: '-' replaced with ""
Mutant 292 in complex.js: '' replaced with "Stryker was here!"
Mutant 293 in complex.js: '1' replaced with ""
Mutant 294 in complex.js: {
  if (plus + minus === 0 || isNaN(c)) {
    parser_exit();
  }
  if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
    z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
    i++;
  } else {
    z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
  }
  plus = minus = 0;
} replaced with {}
Mutant 295 in complex.js: plus + minus === 0 || isNaN(c) replaced with true
Mutant 296 in complex.js: plus + minus === 0 || isNaN(c) replaced with false
Mutant 297 in complex.js: plus + minus === 0 || isNaN(c) replaced with plus + minus === 0 && isNaN(c)
Mutant 298 in complex.js: plus + minus === 0 replaced with false
Mutant 299 in complex.js: plus + minus === 0 replaced with plus + minus !== 0
Mutant 300 in complex.js: plus + minus replaced with plus - minus
Mutant 301 in complex.js: {
  parser_exit();
} replaced with {}
Mutant 302 in complex.js: tokens[i + 1] === 'i' || tokens[i + 1] === 'I' replaced with true
Mutant 303 in complex.js: tokens[i + 1] === 'i' || tokens[i + 1] === 'I' replaced with false
Mutant 304 in complex.js: tokens[i + 1] === 'i' || tokens[i + 1] === 'I' replaced with tokens[i + 1] === 'i' && tokens[i + 1] === 'I'
Mutant 305 in complex.js: tokens[i + 1] === 'i' replaced with false
Mutant 306 in complex.js: tokens[i + 1] === 'i' replaced with tokens[i + 1] !== 'i'
Mutant 307 in complex.js: i + 1 replaced with i - 1
Mutant 308 in complex.js: 'i' replaced with ""
Mutant 309 in complex.js: tokens[i + 1] === 'I' replaced with false
Mutant 310 in complex.js: tokens[i + 1] === 'I' replaced with tokens[i + 1] !== 'I'
Mutant 311 in complex.js: i + 1 replaced with i - 1
Mutant 312 in complex.js: 'I' replaced with ""
Mutant 313 in complex.js: {
  z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
  i++;
} replaced with {}
Mutant 314 in complex.js: z['im'] += parseFloat((minus % 2 ? '-' : '') + c) replaced with z['im'] -= parseFloat((minus % 2 ? '-' : '') + c)
Mutant 315 in complex.js: 'im' replaced with ""
Mutant 316 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 2 ? '-' : '') - c
Mutant 317 in complex.js: minus % 2 replaced with minus * 2
Mutant 318 in complex.js: '-' replaced with ""
Mutant 319 in complex.js: '' replaced with "Stryker was here!"
Mutant 320 in complex.js: i++ replaced with i--
Mutant 321 in complex.js: {
  z['re'] += parseFloat((minus % 2 ? '-' : '') + c);
} replaced with {}
Mutant 322 in complex.js: z['re'] += parseFloat((minus % 2 ? '-' : '') + c) replaced with z['re'] -= parseFloat((minus % 2 ? '-' : '') + c)
Mutant 323 in complex.js: 're' replaced with ""
Mutant 324 in complex.js: (minus % 2 ? '-' : '') + c replaced with (minus % 2 ? '-' : '') - c
Mutant 325 in complex.js: minus % 2 replaced with minus * 2
Mutant 326 in complex.js: '-' replaced with ""
Mutant 327 in complex.js: '' replaced with "Stryker was here!"
Mutant 328 in complex.js: plus + minus > 0 replaced with true
Mutant 329 in complex.js: plus + minus > 0 replaced with false
Mutant 330 in complex.js: plus + minus > 0 replaced with plus + minus >= 0
Mutant 331 in complex.js: plus + minus > 0 replaced with plus + minus <= 0
Mutant 332 in complex.js: plus + minus replaced with plus - minus
Mutant 333 in complex.js: {
  parser_exit();
} replaced with {}
Mutant 334 in complex.js: case 'number':
  z['im'] = 0;
  z['re'] = a;
  break; replaced with case 'number':
Mutant 335 in complex.js: 'number' replaced with ""
Mutant 336 in complex.js: 'im' replaced with ""
Mutant 337 in complex.js: 're' replaced with ""
Mutant 338 in complex.js: default:
  parser_exit(); replaced with default:
Mutant 339 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with true
Mutant 340 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with false
Mutant 341 in complex.js: isNaN(z['re']) || isNaN(z['im']) replaced with isNaN(z['re']) && isNaN(z['im'])
Mutant 342 in complex.js: 're' replaced with ""
Mutant 343 in complex.js: 'im' replaced with ""
Mutant 344 in complex.js: {
  if (!(this instanceof Complex)) {
    return new Complex(a, b);
  }
  var z = parse(a, b);
  this['re'] = z['re'];
  this['im'] = z['im'];
} replaced with {}
Mutant 345 in complex.js: !(this instanceof Complex) replaced with this instanceof Complex
Mutant 346 in complex.js: !(this instanceof Complex) replaced with true
Mutant 347 in complex.js: !(this instanceof Complex) replaced with false
Mutant 348 in complex.js: {
  return new Complex(a, b);
} replaced with {}
Mutant 349 in complex.js: 're' replaced with ""
Mutant 350 in complex.js: 're' replaced with ""
Mutant 351 in complex.js: 'im' replaced with ""
Mutant 352 in complex.js: 'im' replaced with ""
Mutant 353 in complex.js: {
  're': 0,
  'im': 0,
  /**
   * Calculates the sign of a complex number, which is a normalized complex
   *
   * @returns {Complex}
   */
  'sign': function () {
    var abs = this['abs']();
    return new Complex(this['re'] / abs, this['im'] / abs);
  },
  /**
   * Adds two complex numbers
   *
   * @returns {Complex}
   */
  'add': function (a, b) {
    var z = new Complex(a, b);

    // Infinity + Infinity = NaN
    if (this['isInfinite']() && z['isInfinite']()) {
      return Complex['NAN'];
    }

    // Infinity + z = Infinity { where z != Infinity }
    if (this['isInfinite']() || z['isInfinite']()) {
      return Complex['INFINITY'];
    }
    return new Complex(this['re'] + z['re'], this['im'] + z['im']);
  },
  /**
   * Subtracts two complex numbers
   *
   * @returns {Complex}
   */
  'sub': function (a, b) {
    var z = new Complex(a, b);

    // Infinity - Infinity = NaN
    if (this['isInfinite']() && z['isInfinite']()) {
      return Complex['NAN'];
    }

    // Infinity - z = Infinity { where z != Infinity }
    if (this['isInfinite']() || z['isInfinite']()) {
      return Complex['INFINITY'];
    }
    return new Complex(this['re'] - z['re'], this['im'] - z['im']);
  },
  /**
   * Multiplies two complex numbers
   *
   * @returns {Complex}
   */
  'mul': function (a, b) {
    var z = new Complex(a, b);

    // Infinity * 0 = NaN
    if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) {
      return Complex['NAN'];
    }

    // Infinity * z = Infinity { where z != 0 }
    if (this['isInfinite']() || z['isInfinite']()) {
      return Complex['INFINITY'];
    }

    // Short circuit for real values
    if (z['im'] === 0 && this['im'] === 0) {
      return new Complex(this['re'] * z['re'], 0);
    }
    return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);
  },
  /**
   * Divides two complex numbers
   *
   * @returns {Complex}
   */
  'div': function (a, b) {
    var z = new Complex(a, b);

    // 0 / 0 = NaN and Infinity / Infinity = NaN
    if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) {
      return Complex['NAN'];
    }

    // Infinity / 0 = Infinity
    if (this['isInfinite']() || z['isZero']()) {
      return Complex['INFINITY'];
    }

    // 0 / Infinity = 0
    if (this['isZero']() || z['isInfinite']()) {
      return Complex['ZERO'];
    }
    a = this['re'];
    b = this['im'];
    var c = z['re'];
    var d = z['im'];
    var t, x;
    if (0 === d) {
      // Divisor is real
      return new Complex(a / c, b / c);
    }
    if (Math.abs(c) < Math.abs(d)) {
      x = c / d;
      t = c * x + d;
      return new Complex((a * x + b) / t, (b * x - a) / t);
    } else {
      x = d / c;
      t = d * x + c;
      return new Complex((a + b * x) / t, (b - a * x) / t);
    }
  },
  /**
   * Calculate the power of two complex numbers
   *
   * @returns {Complex}
   */
  'pow': function (a, b) {
    var z = new Complex(a, b);
    a = this['re'];
    b = this['im'];
    if (z['isZero']()) {
      return Complex['ONE'];
    }

    // If the exponent is real
    if (z['im'] === 0) {
      if (b === 0 && a > 0) {
        return new Complex(Math.pow(a, z['re']), 0);
      } else if (a === 0) {
        // If base is fully imaginary

        switch ((z['re'] % 4 + 4) % 4) {
          case 0:
            return new Complex(Math.pow(b, z['re']), 0);
          case 1:
            return new Complex(0, Math.pow(b, z['re']));
          case 2:
            return new Complex(-Math.pow(b, z['re']), 0);
          case 3:
            return new Complex(0, -Math.pow(b, z['re']));
        }
      }
    }

    /* I couldn't find a good formula, so here is a derivation and optimization
     *
     * z_1^z_2 = (a + bi)^(c + di)
     *         = exp((c + di) * log(a + bi)
     *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
     * =>...
     * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
     * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
     *
     * =>...
     * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
     * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
     *
     * =>
     * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
     * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
     *
     */

    if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
      return Complex['ZERO'];
    }
    var arg = Math.atan2(b, a);
    var loh = logHypot(a, b);
    a = Math.exp(z['re'] * loh - z['im'] * arg);
    b = z['im'] * loh + z['re'] * arg;
    return new Complex(a * Math.cos(b), a * Math.sin(b));
  },
  /**
   * Calculate the complex square root
   *
   * @returns {Complex}
   */
  'sqrt': function () {
    var a = this['re'];
    var b = this['im'];
    var r = this['abs']();
    var re, im;
    if (a >= 0) {
      if (b === 0) {
        return new Complex(Math.sqrt(a), 0);
      }
      re = 0.5 * Math.sqrt(2.0 * (r + a));
    } else {
      re = Math.abs(b) / Math.sqrt(2 * (r - a));
    }
    if (a <= 0) {
      im = 0.5 * Math.sqrt(2.0 * (r - a));
    } else {
      im = Math.abs(b) / Math.sqrt(2 * (r + a));
    }
    return new Complex(re, b < 0 ? -im : im);
  },
  /**
   * Calculate the complex exponent
   *
   * @returns {Complex}
   */
  'exp': function () {
    var tmp = Math.exp(this['re']);
    if (this['im'] === 0) {
      //return new Complex(tmp, 0);
    }
    return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
  },
  /**
   * Calculate the complex exponent and subtracts one.
   *
   * This may be more accurate than `Complex(x).exp().sub(1)` if
   * `x` is small.
   *
   * @returns {Complex}
   */
  'expm1': function () {
    /**
     * exp(a + i*b) - 1
     = exp(a) * (cos(b) + j*sin(b)) - 1
     = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
     */

    var a = this['re'];
    var b = this['im'];
    return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));
  },
  /**
   * Calculate the natural log
   *
   * @returns {Complex}
   */
  'log': function () {
    var a = this['re'];
    var b = this['im'];
    if (b === 0 && a > 0) {
      //return new Complex(Math.log(a), 0);
    }
    return new Complex(logHypot(a, b), Math.atan2(b, a));
  },
  /**
   * Calculate the magnitude of the complex number
   *
   * @returns {number}
   */
  'abs': function () {
    return hypot(this['re'], this['im']);
  },
  /**
   * Calculate the angle of the complex number
   *
   * @returns {number}
   */
  'arg': function () {
    return Math.atan2(this['im'], this['re']);
  },
  /**
   * Calculate the sine of the complex number
   *
   * @returns {Complex}
   */
  'sin': function () {
    // sin(z) = ( e^iz - e^-iz ) / 2i 
    //        = sin(a)cosh(b) + i cos(a)sinh(b)

    var a = this['re'];
    var b = this['im'];
    return new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b));
  },
  /**
   * Calculate the cosine
   *
   * @returns {Complex}
   */
  'cos': function () {
    // cos(z) = ( e^iz + e^-iz ) / 2 
    //        = cos(a)cosh(b) - i sin(a)sinh(b)

    var a = this['re'];
    var b = this['im'];
    return new Complex(Math.cos(a) * cosh(b), -Math.sin(a) * sinh(b));
  },
  /**
   * Calculate the tangent
   *
   * @returns {Complex}
   */
  'tan': function () {
    // tan(z) = sin(z) / cos(z) 
    //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )
    //        = ( e^2iz - 1 ) / i( e^2iz + 1 )
    //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )

    var a = 2 * this['re'];
    var b = 2 * this['im'];
    var d = Math.cos(a) + cosh(b);
    return new Complex(Math.sin(a) / d, sinh(b) / d);
  },
  /**
   * Calculate the cotangent
   *
   * @returns {Complex}
   */
  'cot': function () {
    // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

    var a = 2 * this['re'];
    var b = 2 * this['im'];
    var d = Math.cos(a) - cosh(b);
    return new Complex(-Math.sin(a) / d, sinh(b) / d);
  },
  /**
   * Calculate the secant
   *
   * @returns {Complex}
   */
  'sec': function () {
    // sec(c) = 2 / (e^(ci) + e^(-ci))

    var a = this['re'];
    var b = this['im'];
    var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
    return new Complex(Math.cos(a) * cosh(b) / d, Math.sin(a) * sinh(b) / d);
  },
  /**
   * Calculate the cosecans
   *
   * @returns {Complex}
   */
  'csc': function () {
    // csc(c) = 2i / (e^(ci) - e^(-ci))

    var a = this['re'];
    var b = this['im'];
    var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
    return new Complex(Math.sin(a) * cosh(b) / d, -Math.cos(a) * sinh(b) / d);
  },
  /**
   * Calculate the complex arcus sinus
   *
   * @returns {Complex}
   */
  'asin': function () {
    // asin(c) = -i * log(ci + sqrt(1 - c^2))

    var a = this['re'];
    var b = this['im'];
    var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
    var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
    return new Complex(t2['im'], -t2['re']);
  },
  /**
   * Calculate the complex arcus cosinus
   *
   * @returns {Complex}
   */
  'acos': function () {
    // acos(c) = i * log(c - i * sqrt(1 - c^2))

    var a = this['re'];
    var b = this['im'];
    var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
    var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
    return new Complex(Math.PI / 2 - t2['im'], t2['re']);
  },
  /**
   * Calculate the complex arcus tangent
   *
   * @returns {Complex}
   */
  'atan': function () {
    // atan(c) = i / 2 log((i + x) / (i - x))

    var a = this['re'];
    var b = this['im'];
    if (a === 0) {
      if (b === 1) {
        return new Complex(0, Infinity);
      }
      if (b === -1) {
        return new Complex(0, -Infinity);
      }
    }
    var d = a * a + (1.0 - b) * (1.0 - b);
    var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
    return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
  },
  /**
   * Calculate the complex arcus cotangent
   *
   * @returns {Complex}
   */
  'acot': function () {
    // acot(c) = i / 2 log((c - i) / (c + i))

    var a = this['re'];
    var b = this['im'];
    if (b === 0) {
      return new Complex(Math.atan2(1, a), 0);
    }
    var d = a * a + b * b;
    return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
  },
  /**
   * Calculate the complex arcus secant
   *
   * @returns {Complex}
   */
  'asec': function () {
    // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

    var a = this['re'];
    var b = this['im'];
    if (a === 0 && b === 0) {
      return new Complex(0, Infinity);
    }
    var d = a * a + b * b;
    return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
  },
  /**
   * Calculate the complex arcus cosecans
   *
   * @returns {Complex}
   */
  'acsc': function () {
    // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

    var a = this['re'];
    var b = this['im'];
    if (a === 0 && b === 0) {
      return new Complex(Math.PI / 2, Infinity);
    }
    var d = a * a + b * b;
    return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
  },
  /**
   * Calculate the complex sinh
   *
   * @returns {Complex}
   */
  'sinh': function () {
    // sinh(c) = (e^c - e^-c) / 2

    var a = this['re'];
    var b = this['im'];
    return new Complex(sinh(a) * Math.cos(b), cosh(a) * Math.sin(b));
  },
  /**
   * Calculate the complex cosh
   *
   * @returns {Complex}
   */
  'cosh': function () {
    // cosh(c) = (e^c + e^-c) / 2

    var a = this['re'];
    var b = this['im'];
    return new Complex(cosh(a) * Math.cos(b), sinh(a) * Math.sin(b));
  },
  /**
   * Calculate the complex tanh
   *
   * @returns {Complex}
   */
  'tanh': function () {
    // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

    var a = 2 * this['re'];
    var b = 2 * this['im'];
    var d = cosh(a) + Math.cos(b);
    return new Complex(sinh(a) / d, Math.sin(b) / d);
  },
  /**
   * Calculate the complex coth
   *
   * @returns {Complex}
   */
  'coth': function () {
    // coth(c) = (e^c + e^-c) / (e^c - e^-c)

    var a = 2 * this['re'];
    var b = 2 * this['im'];
    var d = cosh(a) - Math.cos(b);
    return new Complex(sinh(a) / d, -Math.sin(b) / d);
  },
  /**
   * Calculate the complex coth
   *
   * @returns {Complex}
   */
  'csch': function () {
    // csch(c) = 2 / (e^c - e^-c)

    var a = this['re'];
    var b = this['im'];
    var d = Math.cos(2 * b) - cosh(2 * a);
    return new Complex(-2 * sinh(a) * Math.cos(b) / d, 2 * cosh(a) * Math.sin(b) / d);
  },
  /**
   * Calculate the complex sech
   *
   * @returns {Complex}
   */
  'sech': function () {
    // sech(c) = 2 / (e^c + e^-c)

    var a = this['re'];
    var b = this['im'];
    var d = Math.cos(2 * b) + cosh(2 * a);
    return new Complex(2 * cosh(a) * Math.cos(b) / d, -2 * sinh(a) * Math.sin(b) / d);
  },
  /**
   * Calculate the complex asinh
   *
   * @returns {Complex}
   */
  'asinh': function () {
    // asinh(c) = log(c + sqrt(c^2 + 1))

    var tmp = this['im'];
    this['im'] = -this['re'];
    this['re'] = tmp;
    var res = this['asin']();
    this['re'] = -this['im'];
    this['im'] = tmp;
    tmp = res['re'];
    res['re'] = -res['im'];
    res['im'] = tmp;
    return res;
  },
  /**
   * Calculate the complex acosh
   *
   * @returns {Complex}
   */
  'acosh': function () {
    // acosh(c) = log(c + sqrt(c^2 - 1))

    var res = this['acos']();
    if (res['im'] <= 0) {
      var tmp = res['re'];
      res['re'] = -res['im'];
      res['im'] = tmp;
    } else {
      var tmp = res['im'];
      res['im'] = -res['re'];
      res['re'] = tmp;
    }
    return res;
  },
  /**
   * Calculate the complex atanh
   *
   * @returns {Complex}
   */
  'atanh': function () {
    // atanh(c) = log((1+c) / (1-c)) / 2

    var a = this['re'];
    var b = this['im'];
    var noIM = a > 1 && b === 0;
    var oneMinus = 1 - a;
    var onePlus = 1 + a;
    var d = oneMinus * oneMinus + b * b;
    var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
    var temp = x['re'];
    x['re'] = logHypot(x['re'], x['im']) / 2;
    x['im'] = Math.atan2(x['im'], temp) / 2;
    if (noIM) {
      x['im'] = -x['im'];
    }
    return x;
  },
  /**
   * Calculate the complex acoth
   *
   * @returns {Complex}
   */
  'acoth': function () {
    // acoth(c) = log((c+1) / (c-1)) / 2

    var a = this['re'];
    var b = this['im'];
    if (a === 0 && b === 0) {
      return new Complex(0, Math.PI / 2);
    }
    var d = a * a + b * b;
    return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
  },
  /**
   * Calculate the complex acsch
   *
   * @returns {Complex}
   */
  'acsch': function () {
    // acsch(c) = log((1+sqrt(1+c^2))/c)

    var a = this['re'];
    var b = this['im'];
    if (b === 0) {
      return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
    }
    var d = a * a + b * b;
    return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
  },
  /**
   * Calculate the complex asech
   *
   * @returns {Complex}
   */
  'asech': function () {
    // asech(c) = log((1+sqrt(1-c^2))/c)

    var a = this['re'];
    var b = this['im'];
    if (this['isZero']()) {
      return Complex['INFINITY'];
    }
    var d = a * a + b * b;
    return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
  },
  /**
   * Calculate the complex inverse 1/z
   *
   * @returns {Complex}
   */
  'inverse': function () {
    // 1 / 0 = Infinity and 1 / Infinity = 0
    if (this['isZero']()) {
      return Complex['INFINITY'];
    }
    if (this['isInfinite']()) {
      return Complex['ZERO'];
    }
    var a = this['re'];
    var b = this['im'];
    var d = a * a + b * b;
    return new Complex(a / d, -b / d);
  },
  /**
   * Returns the complex conjugate
   *
   * @returns {Complex}
   */
  'conjugate': function () {
    return new Complex(this['re'], -this['im']);
  },
  /**
   * Gets the negated complex number
   *
   * @returns {Complex}
   */
  'neg': function () {
    return new Complex(-this['re'], -this['im']);
  },
  /**
   * Ceils the actual complex number
   *
   * @returns {Complex}
   */
  'ceil': function (places) {
    places = Math.pow(10, places || 0);
    return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
  },
  /**
   * Floors the actual complex number
   *
   * @returns {Complex}
   */
  'floor': function (places) {
    places = Math.pow(10, places || 0);
    return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
  },
  /**
   * Ceils the actual complex number
   *
   * @returns {Complex}
   */
  'round': function (places) {
    places = Math.pow(10, places || 0);
    return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
  },
  /**
   * Compares two complex numbers
   *
   * **Note:** new Complex(Infinity).equals(Infinity) === false
   *
   * @returns {boolean}
   */
  'equals': function (a, b) {
    var z = new Complex(a, b);
    return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
  },
  /**
   * Clones the actual object
   *
   * @returns {Complex}
   */
  'clone': function () {
    return new Complex(this['re'], this['im']);
  },
  /**
   * Gets a string of the actual complex number
   *
   * @returns {string}
   */
  'toString': function () {
    var a = this['re'];
    var b = this['im'];
    var ret = "";
    if (this['isNaN']()) {
      return 'NaN';
    }
    if (this['isInfinite']()) {
      return 'Infinity';
    }
    if (Math.abs(a) < Complex['EPSILON']) {
      a = 0;
    }
    if (Math.abs(b) < Complex['EPSILON']) {
      b = 0;
    }

    // If is real number
    if (b === 0) {
      return ret + a;
    }
    if (a !== 0) {
      ret += a;
      ret += " ";
      if (b < 0) {
        b = -b;
        ret += "-";
      } else {
        ret += "+";
      }
      ret += " ";
    } else if (b < 0) {
      b = -b;
      ret += "-";
    }
    if (1 !== b) {
      // b is the absolute imaginary part
      ret += b;
    }
    return ret + "i";
  },
  /**
   * Returns the actual number as a vector
   *
   * @returns {Array}
   */
  'toVector': function () {
    return [this['re'], this['im']];
  },
  /**
   * Returns the actual real value of the current object
   *
   * @returns {number|null}
   */
  'valueOf': function () {
    if (this['im'] === 0) {
      return this['re'];
    }
    return null;
  },
  /**
   * Determines whether a complex number is not on the Riemann sphere.
   *
   * @returns {boolean}
   */
  'isNaN': function () {
    return isNaN(this['re']) || isNaN(this['im']);
  },
  /**
   * Determines whether or not a complex number is at the zero pole of the
   * Riemann sphere.
   *
   * @returns {boolean}
   */
  'isZero': function () {
    return this['im'] === 0 && this['re'] === 0;
  },
  /**
   * Determines whether a complex number is not at the infinity pole of the
   * Riemann sphere.
   *
   * @returns {boolean}
   */
  'isFinite': function () {
    return isFinite(this['re']) && isFinite(this['im']);
  },
  /**
   * Determines whether or not a complex number is at the infinity pole of the
   * Riemann sphere.
   *
   * @returns {boolean}
   */
  'isInfinite': function () {
    return !(this['isNaN']() || this['isFinite']());
  }
} replaced with {}
Mutant 354 in complex.js: {
  var abs = this['abs']();
  return new Complex(this['re'] / abs, this['im'] / abs);
} replaced with {}
Mutant 355 in complex.js: 'abs' replaced with ""
Mutant 356 in complex.js: this['re'] / abs replaced with this['re'] * abs
Mutant 357 in complex.js: 're' replaced with ""
Mutant 358 in complex.js: this['im'] / abs replaced with this['im'] * abs
Mutant 359 in complex.js: 'im' replaced with ""
Mutant 360 in complex.js: {
  var z = new Complex(a, b);

  // Infinity + Infinity = NaN
  if (this['isInfinite']() && z['isInfinite']()) {
    return Complex['NAN'];
  }

  // Infinity + z = Infinity { where z != Infinity }
  if (this['isInfinite']() || z['isInfinite']()) {
    return Complex['INFINITY'];
  }
  return new Complex(this['re'] + z['re'], this['im'] + z['im']);
} replaced with {}
Mutant 361 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with true
Mutant 362 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with false
Mutant 363 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 364 in complex.js: 'isInfinite' replaced with ""
Mutant 365 in complex.js: 'isInfinite' replaced with ""
Mutant 366 in complex.js: {
  return Complex['NAN'];
} replaced with {}
Mutant 367 in complex.js: 'NAN' replaced with ""
Mutant 368 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with true
Mutant 369 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with false
Mutant 370 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 371 in complex.js: 'isInfinite' replaced with ""
Mutant 372 in complex.js: 'isInfinite' replaced with ""
Mutant 373 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 374 in complex.js: 'INFINITY' replaced with ""
Mutant 375 in complex.js: this['re'] + z['re'] replaced with this['re'] - z['re']
Mutant 376 in complex.js: 're' replaced with ""
Mutant 377 in complex.js: 're' replaced with ""
Mutant 378 in complex.js: this['im'] + z['im'] replaced with this['im'] - z['im']
Mutant 379 in complex.js: 'im' replaced with ""
Mutant 380 in complex.js: 'im' replaced with ""
Mutant 381 in complex.js: {
  var z = new Complex(a, b);

  // Infinity - Infinity = NaN
  if (this['isInfinite']() && z['isInfinite']()) {
    return Complex['NAN'];
  }

  // Infinity - z = Infinity { where z != Infinity }
  if (this['isInfinite']() || z['isInfinite']()) {
    return Complex['INFINITY'];
  }
  return new Complex(this['re'] - z['re'], this['im'] - z['im']);
} replaced with {}
Mutant 382 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with true
Mutant 383 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with false
Mutant 384 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 385 in complex.js: 'isInfinite' replaced with ""
Mutant 386 in complex.js: 'isInfinite' replaced with ""
Mutant 387 in complex.js: {
  return Complex['NAN'];
} replaced with {}
Mutant 388 in complex.js: 'NAN' replaced with ""
Mutant 389 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with true
Mutant 390 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with false
Mutant 391 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 392 in complex.js: 'isInfinite' replaced with ""
Mutant 393 in complex.js: 'isInfinite' replaced with ""
Mutant 394 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 395 in complex.js: 'INFINITY' replaced with ""
Mutant 396 in complex.js: this['re'] - z['re'] replaced with this['re'] + z['re']
Mutant 397 in complex.js: 're' replaced with ""
Mutant 398 in complex.js: 're' replaced with ""
Mutant 399 in complex.js: this['im'] - z['im'] replaced with this['im'] + z['im']
Mutant 400 in complex.js: 'im' replaced with ""
Mutant 401 in complex.js: 'im' replaced with ""
Mutant 402 in complex.js: {
  var z = new Complex(a, b);

  // Infinity * 0 = NaN
  if (this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']()) {
    return Complex['NAN'];
  }

  // Infinity * z = Infinity { where z != 0 }
  if (this['isInfinite']() || z['isInfinite']()) {
    return Complex['INFINITY'];
  }

  // Short circuit for real values
  if (z['im'] === 0 && this['im'] === 0) {
    return new Complex(this['re'] * z['re'], 0);
  }
  return new Complex(this['re'] * z['re'] - this['im'] * z['im'], this['re'] * z['im'] + this['im'] * z['re']);
} replaced with {}
Mutant 403 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with true
Mutant 404 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with false
Mutant 405 in complex.js: this['isInfinite']() && z['isZero']() || this['isZero']() && z['isInfinite']() replaced with this['isInfinite']() && z['isZero']() && this['isZero']() && z['isInfinite']()
Mutant 406 in complex.js: this['isInfinite']() && z['isZero']() replaced with false
Mutant 407 in complex.js: this['isInfinite']() && z['isZero']() replaced with this['isInfinite']() || z['isZero']()
Mutant 408 in complex.js: 'isInfinite' replaced with ""
Mutant 409 in complex.js: 'isZero' replaced with ""
Mutant 410 in complex.js: this['isZero']() && z['isInfinite']() replaced with false
Mutant 411 in complex.js: this['isZero']() && z['isInfinite']() replaced with this['isZero']() || z['isInfinite']()
Mutant 412 in complex.js: 'isZero' replaced with ""
Mutant 413 in complex.js: 'isInfinite' replaced with ""
Mutant 414 in complex.js: {
  return Complex['NAN'];
} replaced with {}
Mutant 415 in complex.js: 'NAN' replaced with ""
Mutant 416 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with true
Mutant 417 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with false
Mutant 418 in complex.js: this['isInfinite']() || z['isInfinite']() replaced with this['isInfinite']() && z['isInfinite']()
Mutant 419 in complex.js: 'isInfinite' replaced with ""
Mutant 420 in complex.js: 'isInfinite' replaced with ""
Mutant 421 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 422 in complex.js: 'INFINITY' replaced with ""
Mutant 423 in complex.js: z['im'] === 0 && this['im'] === 0 replaced with true
Mutant 424 in complex.js: z['im'] === 0 && this['im'] === 0 replaced with false
Mutant 425 in complex.js: z['im'] === 0 && this['im'] === 0 replaced with z['im'] === 0 || this['im'] === 0
Mutant 426 in complex.js: z['im'] === 0 replaced with true
Mutant 427 in complex.js: z['im'] === 0 replaced with z['im'] !== 0
Mutant 428 in complex.js: 'im' replaced with ""
Mutant 429 in complex.js: this['im'] === 0 replaced with true
Mutant 430 in complex.js: this['im'] === 0 replaced with this['im'] !== 0
Mutant 431 in complex.js: 'im' replaced with ""
Mutant 432 in complex.js: {
  return new Complex(this['re'] * z['re'], 0);
} replaced with {}
Mutant 433 in complex.js: this['re'] * z['re'] replaced with this['re'] / z['re']
Mutant 434 in complex.js: 're' replaced with ""
Mutant 435 in complex.js: 're' replaced with ""
Mutant 436 in complex.js: this['re'] * z['re'] - this['im'] * z['im'] replaced with this['re'] * z['re'] + this['im'] * z['im']
Mutant 437 in complex.js: this['re'] * z['re'] replaced with this['re'] / z['re']
Mutant 438 in complex.js: 're' replaced with ""
Mutant 439 in complex.js: 're' replaced with ""
Mutant 440 in complex.js: this['im'] * z['im'] replaced with this['im'] / z['im']
Mutant 441 in complex.js: 'im' replaced with ""
Mutant 442 in complex.js: 'im' replaced with ""
Mutant 443 in complex.js: this['re'] * z['im'] + this['im'] * z['re'] replaced with this['re'] * z['im'] - this['im'] * z['re']
Mutant 444 in complex.js: this['re'] * z['im'] replaced with this['re'] / z['im']
Mutant 445 in complex.js: 're' replaced with ""
Mutant 446 in complex.js: 'im' replaced with ""
Mutant 447 in complex.js: this['im'] * z['re'] replaced with this['im'] / z['re']
Mutant 448 in complex.js: 'im' replaced with ""
Mutant 449 in complex.js: 're' replaced with ""
Mutant 450 in complex.js: {
  var z = new Complex(a, b);

  // 0 / 0 = NaN and Infinity / Infinity = NaN
  if (this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']()) {
    return Complex['NAN'];
  }

  // Infinity / 0 = Infinity
  if (this['isInfinite']() || z['isZero']()) {
    return Complex['INFINITY'];
  }

  // 0 / Infinity = 0
  if (this['isZero']() || z['isInfinite']()) {
    return Complex['ZERO'];
  }
  a = this['re'];
  b = this['im'];
  var c = z['re'];
  var d = z['im'];
  var t, x;
  if (0 === d) {
    // Divisor is real
    return new Complex(a / c, b / c);
  }
  if (Math.abs(c) < Math.abs(d)) {
    x = c / d;
    t = c * x + d;
    return new Complex((a * x + b) / t, (b * x - a) / t);
  } else {
    x = d / c;
    t = d * x + c;
    return new Complex((a + b * x) / t, (b - a * x) / t);
  }
} replaced with {}
Mutant 451 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with true
Mutant 452 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with false
Mutant 453 in complex.js: this['isZero']() && z['isZero']() || this['isInfinite']() && z['isInfinite']() replaced with this['isZero']() && z['isZero']() && this['isInfinite']() && z['isInfinite']()
Mutant 454 in complex.js: this['isZero']() && z['isZero']() replaced with false
Mutant 455 in complex.js: this['isZero']() && z['isZero']() replaced with this['isZero']() || z['isZero']()
Mutant 456 in complex.js: 'isZero' replaced with ""
Mutant 457 in complex.js: 'isZero' replaced with ""
Mutant 458 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with false
Mutant 459 in complex.js: this['isInfinite']() && z['isInfinite']() replaced with this['isInfinite']() || z['isInfinite']()
Mutant 460 in complex.js: 'isInfinite' replaced with ""
Mutant 461 in complex.js: 'isInfinite' replaced with ""
Mutant 462 in complex.js: {
  return Complex['NAN'];
} replaced with {}
Mutant 463 in complex.js: 'NAN' replaced with ""
Mutant 464 in complex.js: this['isInfinite']() || z['isZero']() replaced with true
Mutant 465 in complex.js: this['isInfinite']() || z['isZero']() replaced with false
Mutant 466 in complex.js: this['isInfinite']() || z['isZero']() replaced with this['isInfinite']() && z['isZero']()
Mutant 467 in complex.js: 'isInfinite' replaced with ""
Mutant 468 in complex.js: 'isZero' replaced with ""
Mutant 469 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 470 in complex.js: 'INFINITY' replaced with ""
Mutant 471 in complex.js: this['isZero']() || z['isInfinite']() replaced with true
Mutant 472 in complex.js: this['isZero']() || z['isInfinite']() replaced with false
Mutant 473 in complex.js: this['isZero']() || z['isInfinite']() replaced with this['isZero']() && z['isInfinite']()
Mutant 474 in complex.js: 'isZero' replaced with ""
Mutant 475 in complex.js: 'isInfinite' replaced with ""
Mutant 476 in complex.js: {
  return Complex['ZERO'];
} replaced with {}
Mutant 477 in complex.js: 'ZERO' replaced with ""
Mutant 478 in complex.js: 're' replaced with ""
Mutant 479 in complex.js: 'im' replaced with ""
Mutant 480 in complex.js: 're' replaced with ""
Mutant 481 in complex.js: 'im' replaced with ""
Mutant 482 in complex.js: 0 === d replaced with true
Mutant 483 in complex.js: 0 === d replaced with false
Mutant 484 in complex.js: 0 === d replaced with 0 !== d
Mutant 485 in complex.js: {
  // Divisor is real
  return new Complex(a / c, b / c);
} replaced with {}
Mutant 486 in complex.js: a / c replaced with a * c
Mutant 487 in complex.js: b / c replaced with b * c
Mutant 488 in complex.js: Math.abs(c) < Math.abs(d) replaced with true
Mutant 489 in complex.js: Math.abs(c) < Math.abs(d) replaced with false
Mutant 490 in complex.js: Math.abs(c) < Math.abs(d) replaced with Math.abs(c) <= Math.abs(d)
Mutant 491 in complex.js: Math.abs(c) < Math.abs(d) replaced with Math.abs(c) >= Math.abs(d)
Mutant 492 in complex.js: {
  x = c / d;
  t = c * x + d;
  return new Complex((a * x + b) / t, (b * x - a) / t);
} replaced with {}
Mutant 493 in complex.js: c / d replaced with c * d
Mutant 494 in complex.js: c * x + d replaced with c * x - d
Mutant 495 in complex.js: c * x replaced with c / x
Mutant 496 in complex.js: (a * x + b) / t replaced with (a * x + b) * t
Mutant 497 in complex.js: a * x + b replaced with a * x - b
Mutant 498 in complex.js: a * x replaced with a / x
Mutant 499 in complex.js: (b * x - a) / t replaced with (b * x - a) * t
Mutant 500 in complex.js: b * x - a replaced with b * x + a
Mutant 501 in complex.js: b * x replaced with b / x
Mutant 502 in complex.js: {
  x = d / c;
  t = d * x + c;
  return new Complex((a + b * x) / t, (b - a * x) / t);
} replaced with {}
Mutant 503 in complex.js: d / c replaced with d * c
Mutant 504 in complex.js: d * x + c replaced with d * x - c
Mutant 505 in complex.js: d * x replaced with d / x
Mutant 506 in complex.js: (a + b * x) / t replaced with (a + b * x) * t
Mutant 507 in complex.js: a + b * x replaced with a - b * x
Mutant 508 in complex.js: b * x replaced with b / x
Mutant 509 in complex.js: (b - a * x) / t replaced with (b - a * x) * t
Mutant 510 in complex.js: b - a * x replaced with b + a * x
Mutant 511 in complex.js: a * x replaced with a / x
Mutant 512 in complex.js: {
  var z = new Complex(a, b);
  a = this['re'];
  b = this['im'];
  if (z['isZero']()) {
    return Complex['ONE'];
  }

  // If the exponent is real
  if (z['im'] === 0) {
    if (b === 0 && a > 0) {
      return new Complex(Math.pow(a, z['re']), 0);
    } else if (a === 0) {
      // If base is fully imaginary

      switch ((z['re'] % 4 + 4) % 4) {
        case 0:
          return new Complex(Math.pow(b, z['re']), 0);
        case 1:
          return new Complex(0, Math.pow(b, z['re']));
        case 2:
          return new Complex(-Math.pow(b, z['re']), 0);
        case 3:
          return new Complex(0, -Math.pow(b, z['re']));
      }
    }
  }

  /* I couldn't find a good formula, so here is a derivation and optimization
   *
   * z_1^z_2 = (a + bi)^(c + di)
   *         = exp((c + di) * log(a + bi)
   *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
   * =>...
   * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
   * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
   *
   * =>...
   * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
   * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
   *
   * =>
   * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
   * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
   *
   */

  if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
    return Complex['ZERO'];
  }
  var arg = Math.atan2(b, a);
  var loh = logHypot(a, b);
  a = Math.exp(z['re'] * loh - z['im'] * arg);
  b = z['im'] * loh + z['re'] * arg;
  return new Complex(a * Math.cos(b), a * Math.sin(b));
} replaced with {}
Mutant 513 in complex.js: 're' replaced with ""
Mutant 514 in complex.js: 'im' replaced with ""
Mutant 515 in complex.js: z['isZero']() replaced with true
Mutant 516 in complex.js: z['isZero']() replaced with false
Mutant 517 in complex.js: 'isZero' replaced with ""
Mutant 518 in complex.js: {
  return Complex['ONE'];
} replaced with {}
Mutant 519 in complex.js: 'ONE' replaced with ""
Mutant 520 in complex.js: z['im'] === 0 replaced with true
Mutant 521 in complex.js: z['im'] === 0 replaced with false
Mutant 522 in complex.js: z['im'] === 0 replaced with z['im'] !== 0
Mutant 523 in complex.js: 'im' replaced with ""
Mutant 524 in complex.js: {
  if (b === 0 && a > 0) {
    return new Complex(Math.pow(a, z['re']), 0);
  } else if (a === 0) {
    // If base is fully imaginary

    switch ((z['re'] % 4 + 4) % 4) {
      case 0:
        return new Complex(Math.pow(b, z['re']), 0);
      case 1:
        return new Complex(0, Math.pow(b, z['re']));
      case 2:
        return new Complex(-Math.pow(b, z['re']), 0);
      case 3:
        return new Complex(0, -Math.pow(b, z['re']));
    }
  }
} replaced with {}
Mutant 525 in complex.js: b === 0 && a > 0 replaced with true
Mutant 526 in complex.js: b === 0 && a > 0 replaced with false
Mutant 527 in complex.js: b === 0 && a > 0 replaced with b === 0 || a > 0
Mutant 528 in complex.js: b === 0 replaced with true
Mutant 529 in complex.js: b === 0 replaced with b !== 0
Mutant 530 in complex.js: a > 0 replaced with true
Mutant 531 in complex.js: a > 0 replaced with a >= 0
Mutant 532 in complex.js: a > 0 replaced with a <= 0
Mutant 533 in complex.js: {
  return new Complex(Math.pow(a, z['re']), 0);
} replaced with {}
Mutant 534 in complex.js: 're' replaced with ""
Mutant 535 in complex.js: a === 0 replaced with true
Mutant 536 in complex.js: a === 0 replaced with false
Mutant 537 in complex.js: a === 0 replaced with a !== 0
Mutant 538 in complex.js: {
  // If base is fully imaginary

  switch ((z['re'] % 4 + 4) % 4) {
    case 0:
      return new Complex(Math.pow(b, z['re']), 0);
    case 1:
      return new Complex(0, Math.pow(b, z['re']));
    case 2:
      return new Complex(-Math.pow(b, z['re']), 0);
    case 3:
      return new Complex(0, -Math.pow(b, z['re']));
  }
} replaced with {}
Mutant 539 in complex.js: (z['re'] % 4 + 4) % 4 replaced with (z['re'] % 4 + 4) * 4
Mutant 540 in complex.js: z['re'] % 4 + 4 replaced with z['re'] % 4 - 4
Mutant 541 in complex.js: z['re'] % 4 replaced with z['re'] * 4
Mutant 542 in complex.js: 're' replaced with ""
Mutant 543 in complex.js: case 0:
  return new Complex(Math.pow(b, z['re']), 0); replaced with case 0:
Mutant 544 in complex.js: 're' replaced with ""
Mutant 545 in complex.js: case 1:
  return new Complex(0, Math.pow(b, z['re'])); replaced with case 1:
Mutant 546 in complex.js: 're' replaced with ""
Mutant 547 in complex.js: case 2:
  return new Complex(-Math.pow(b, z['re']), 0); replaced with case 2:
Mutant 548 in complex.js: -Math.pow(b, z['re']) replaced with +Math.pow(b, z['re'])
Mutant 549 in complex.js: 're' replaced with ""
Mutant 550 in complex.js: case 3:
  return new Complex(0, -Math.pow(b, z['re'])); replaced with case 3:
Mutant 551 in complex.js: -Math.pow(b, z['re']) replaced with +Math.pow(b, z['re'])
Mutant 552 in complex.js: 're' replaced with ""
Mutant 553 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with true
Mutant 554 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with false
Mutant 555 in complex.js: a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0 replaced with a === 0 && b === 0 && z['re'] > 0 || z['im'] >= 0
Mutant 556 in complex.js: a === 0 && b === 0 && z['re'] > 0 replaced with true
Mutant 557 in complex.js: a === 0 && b === 0 && z['re'] > 0 replaced with a === 0 && b === 0 || z['re'] > 0
Mutant 558 in complex.js: a === 0 && b === 0 replaced with true
Mutant 559 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 560 in complex.js: a === 0 replaced with true
Mutant 561 in complex.js: a === 0 replaced with a !== 0
Mutant 562 in complex.js: b === 0 replaced with true
Mutant 563 in complex.js: b === 0 replaced with b !== 0
Mutant 564 in complex.js: z['re'] > 0 replaced with true
Mutant 565 in complex.js: z['re'] > 0 replaced with z['re'] >= 0
Mutant 566 in complex.js: z['re'] > 0 replaced with z['re'] <= 0
Mutant 567 in complex.js: 're' replaced with ""
Mutant 568 in complex.js: z['im'] >= 0 replaced with true
Mutant 569 in complex.js: z['im'] >= 0 replaced with z['im'] > 0
Mutant 570 in complex.js: z['im'] >= 0 replaced with z['im'] < 0
Mutant 571 in complex.js: 'im' replaced with ""
Mutant 572 in complex.js: {
  return Complex['ZERO'];
} replaced with {}
Mutant 573 in complex.js: 'ZERO' replaced with ""
Mutant 574 in complex.js: z['re'] * loh - z['im'] * arg replaced with z['re'] * loh + z['im'] * arg
Mutant 575 in complex.js: z['re'] * loh replaced with z['re'] / loh
Mutant 576 in complex.js: 're' replaced with ""
Mutant 577 in complex.js: z['im'] * arg replaced with z['im'] / arg
Mutant 578 in complex.js: 'im' replaced with ""
Mutant 579 in complex.js: z['im'] * loh + z['re'] * arg replaced with z['im'] * loh - z['re'] * arg
Mutant 580 in complex.js: z['im'] * loh replaced with z['im'] / loh
Mutant 581 in complex.js: 'im' replaced with ""
Mutant 582 in complex.js: z['re'] * arg replaced with z['re'] / arg
Mutant 583 in complex.js: 're' replaced with ""
Mutant 584 in complex.js: a * Math.cos(b) replaced with a / Math.cos(b)
Mutant 585 in complex.js: a * Math.sin(b) replaced with a / Math.sin(b)
Mutant 586 in complex.js: {
  var a = this['re'];
  var b = this['im'];
  var r = this['abs']();
  var re, im;
  if (a >= 0) {
    if (b === 0) {
      return new Complex(Math.sqrt(a), 0);
    }
    re = 0.5 * Math.sqrt(2.0 * (r + a));
  } else {
    re = Math.abs(b) / Math.sqrt(2 * (r - a));
  }
  if (a <= 0) {
    im = 0.5 * Math.sqrt(2.0 * (r - a));
  } else {
    im = Math.abs(b) / Math.sqrt(2 * (r + a));
  }
  return new Complex(re, b < 0 ? -im : im);
} replaced with {}
Mutant 587 in complex.js: 're' replaced with ""
Mutant 588 in complex.js: 'im' replaced with ""
Mutant 589 in complex.js: 'abs' replaced with ""
Mutant 590 in complex.js: a >= 0 replaced with true
Mutant 591 in complex.js: a >= 0 replaced with false
Mutant 592 in complex.js: a >= 0 replaced with a > 0
Mutant 593 in complex.js: a >= 0 replaced with a < 0
Mutant 594 in complex.js: {
  if (b === 0) {
    return new Complex(Math.sqrt(a), 0);
  }
  re = 0.5 * Math.sqrt(2.0 * (r + a));
} replaced with {}
Mutant 595 in complex.js: b === 0 replaced with true
Mutant 596 in complex.js: b === 0 replaced with false
Mutant 597 in complex.js: b === 0 replaced with b !== 0
Mutant 598 in complex.js: {
  return new Complex(Math.sqrt(a), 0);
} replaced with {}
Mutant 599 in complex.js: 0.5 * Math.sqrt(2.0 * (r + a)) replaced with 0.5 / Math.sqrt(2.0 * (r + a))
Mutant 600 in complex.js: 2.0 * (r + a) replaced with 2.0 / (r + a)
Mutant 601 in complex.js: r + a replaced with r - a
Mutant 602 in complex.js: {
  re = Math.abs(b) / Math.sqrt(2 * (r - a));
} replaced with {}
Mutant 603 in complex.js: Math.abs(b) / Math.sqrt(2 * (r - a)) replaced with Math.abs(b) * Math.sqrt(2 * (r - a))
Mutant 604 in complex.js: 2 * (r - a) replaced with 2 / (r - a)
Mutant 605 in complex.js: r - a replaced with r + a
Mutant 606 in complex.js: a <= 0 replaced with true
Mutant 607 in complex.js: a <= 0 replaced with false
Mutant 608 in complex.js: a <= 0 replaced with a < 0
Mutant 609 in complex.js: a <= 0 replaced with a > 0
Mutant 610 in complex.js: {
  im = 0.5 * Math.sqrt(2.0 * (r - a));
} replaced with {}
Mutant 611 in complex.js: 0.5 * Math.sqrt(2.0 * (r - a)) replaced with 0.5 / Math.sqrt(2.0 * (r - a))
Mutant 612 in complex.js: 2.0 * (r - a) replaced with 2.0 / (r - a)
Mutant 613 in complex.js: r - a replaced with r + a
Mutant 614 in complex.js: {
  im = Math.abs(b) / Math.sqrt(2 * (r + a));
} replaced with {}
Mutant 615 in complex.js: Math.abs(b) / Math.sqrt(2 * (r + a)) replaced with Math.abs(b) * Math.sqrt(2 * (r + a))
Mutant 616 in complex.js: 2 * (r + a) replaced with 2 / (r + a)
Mutant 617 in complex.js: r + a replaced with r - a
Mutant 618 in complex.js: b < 0 replaced with true
Mutant 619 in complex.js: b < 0 replaced with false
Mutant 620 in complex.js: b < 0 replaced with b <= 0
Mutant 621 in complex.js: b < 0 replaced with b >= 0
Mutant 622 in complex.js: -im replaced with +im
Mutant 623 in complex.js: {
  var tmp = Math.exp(this['re']);
  if (this['im'] === 0) {
    //return new Complex(tmp, 0);
  }
  return new Complex(tmp * Math.cos(this['im']), tmp * Math.sin(this['im']));
} replaced with {}
Mutant 624 in complex.js: 're' replaced with ""
Mutant 625 in complex.js: this['im'] === 0 replaced with true
Mutant 626 in complex.js: this['im'] === 0 replaced with false
Mutant 627 in complex.js: this['im'] === 0 replaced with this['im'] !== 0
Mutant 628 in complex.js: 'im' replaced with ""
Mutant 629 in complex.js: tmp * Math.cos(this['im']) replaced with tmp / Math.cos(this['im'])
Mutant 630 in complex.js: 'im' replaced with ""
Mutant 631 in complex.js: tmp * Math.sin(this['im']) replaced with tmp / Math.sin(this['im'])
Mutant 632 in complex.js: 'im' replaced with ""
Mutant 633 in complex.js: {
  /**
   * exp(a + i*b) - 1
   = exp(a) * (cos(b) + j*sin(b)) - 1
   = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)
   */

  var a = this['re'];
  var b = this['im'];
  return new Complex(Math.expm1(a) * Math.cos(b) + cosm1(b), Math.exp(a) * Math.sin(b));
} replaced with {}
Mutant 634 in complex.js: 're' replaced with ""
Mutant 635 in complex.js: 'im' replaced with ""
Mutant 636 in complex.js: Math.expm1(a) * Math.cos(b) + cosm1(b) replaced with Math.expm1(a) * Math.cos(b) - cosm1(b)
Mutant 637 in complex.js: Math.expm1(a) * Math.cos(b) replaced with Math.expm1(a) / Math.cos(b)
Mutant 638 in complex.js: Math.exp(a) * Math.sin(b) replaced with Math.exp(a) / Math.sin(b)
Mutant 639 in complex.js: {
  var a = this['re'];
  var b = this['im'];
  if (b === 0 && a > 0) {
    //return new Complex(Math.log(a), 0);
  }
  return new Complex(logHypot(a, b), Math.atan2(b, a));
} replaced with {}
Mutant 640 in complex.js: 're' replaced with ""
Mutant 641 in complex.js: 'im' replaced with ""
Mutant 642 in complex.js: b === 0 && a > 0 replaced with true
Mutant 643 in complex.js: b === 0 && a > 0 replaced with false
Mutant 644 in complex.js: b === 0 && a > 0 replaced with b === 0 || a > 0
Mutant 645 in complex.js: b === 0 replaced with true
Mutant 646 in complex.js: b === 0 replaced with b !== 0
Mutant 647 in complex.js: a > 0 replaced with true
Mutant 648 in complex.js: a > 0 replaced with a >= 0
Mutant 649 in complex.js: a > 0 replaced with a <= 0
Mutant 650 in complex.js: {
  return hypot(this['re'], this['im']);
} replaced with {}
Mutant 651 in complex.js: 're' replaced with ""
Mutant 652 in complex.js: 'im' replaced with ""
Mutant 653 in complex.js: {
  return Math.atan2(this['im'], this['re']);
} replaced with {}
Mutant 654 in complex.js: 'im' replaced with ""
Mutant 655 in complex.js: 're' replaced with ""
Mutant 656 in complex.js: {
  // sin(z) = ( e^iz - e^-iz ) / 2i 
  //        = sin(a)cosh(b) + i cos(a)sinh(b)

  var a = this['re'];
  var b = this['im'];
  return new Complex(Math.sin(a) * cosh(b), Math.cos(a) * sinh(b));
} replaced with {}
Mutant 657 in complex.js: 're' replaced with ""
Mutant 658 in complex.js: 'im' replaced with ""
Mutant 659 in complex.js: Math.sin(a) * cosh(b) replaced with Math.sin(a) / cosh(b)
Mutant 660 in complex.js: Math.cos(a) * sinh(b) replaced with Math.cos(a) / sinh(b)
Mutant 661 in complex.js: {
  // cos(z) = ( e^iz + e^-iz ) / 2 
  //        = cos(a)cosh(b) - i sin(a)sinh(b)

  var a = this['re'];
  var b = this['im'];
  return new Complex(Math.cos(a) * cosh(b), -Math.sin(a) * sinh(b));
} replaced with {}
Mutant 662 in complex.js: 're' replaced with ""
Mutant 663 in complex.js: 'im' replaced with ""
Mutant 664 in complex.js: Math.cos(a) * cosh(b) replaced with Math.cos(a) / cosh(b)
Mutant 665 in complex.js: -Math.sin(a) * sinh(b) replaced with -Math.sin(a) / sinh(b)
Mutant 666 in complex.js: -Math.sin(a) replaced with +Math.sin(a)
Mutant 667 in complex.js: {
  // tan(z) = sin(z) / cos(z) 
  //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )
  //        = ( e^2iz - 1 ) / i( e^2iz + 1 )
  //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )

  var a = 2 * this['re'];
  var b = 2 * this['im'];
  var d = Math.cos(a) + cosh(b);
  return new Complex(Math.sin(a) / d, sinh(b) / d);
} replaced with {}
Mutant 668 in complex.js: 2 * this['re'] replaced with 2 / this['re']
Mutant 669 in complex.js: 're' replaced with ""
Mutant 670 in complex.js: 2 * this['im'] replaced with 2 / this['im']
Mutant 671 in complex.js: 'im' replaced with ""
Mutant 672 in complex.js: Math.cos(a) + cosh(b) replaced with Math.cos(a) - cosh(b)
Mutant 673 in complex.js: Math.sin(a) / d replaced with Math.sin(a) * d
Mutant 674 in complex.js: sinh(b) / d replaced with sinh(b) * d
Mutant 675 in complex.js: {
  // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))

  var a = 2 * this['re'];
  var b = 2 * this['im'];
  var d = Math.cos(a) - cosh(b);
  return new Complex(-Math.sin(a) / d, sinh(b) / d);
} replaced with {}
Mutant 676 in complex.js: 2 * this['re'] replaced with 2 / this['re']
Mutant 677 in complex.js: 're' replaced with ""
Mutant 678 in complex.js: 2 * this['im'] replaced with 2 / this['im']
Mutant 679 in complex.js: 'im' replaced with ""
Mutant 680 in complex.js: Math.cos(a) - cosh(b) replaced with Math.cos(a) + cosh(b)
Mutant 681 in complex.js: -Math.sin(a) / d replaced with -Math.sin(a) * d
Mutant 682 in complex.js: -Math.sin(a) replaced with +Math.sin(a)
Mutant 683 in complex.js: sinh(b) / d replaced with sinh(b) * d
Mutant 684 in complex.js: {
  // sec(c) = 2 / (e^(ci) + e^(-ci))

  var a = this['re'];
  var b = this['im'];
  var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
  return new Complex(Math.cos(a) * cosh(b) / d, Math.sin(a) * sinh(b) / d);
} replaced with {}
Mutant 685 in complex.js: 're' replaced with ""
Mutant 686 in complex.js: 'im' replaced with ""
Mutant 687 in complex.js: 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a) replaced with 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a)
Mutant 688 in complex.js: 0.5 * cosh(2 * b) replaced with 0.5 / cosh(2 * b)
Mutant 689 in complex.js: 2 * b replaced with 2 / b
Mutant 690 in complex.js: 0.5 * Math.cos(2 * a) replaced with 0.5 / Math.cos(2 * a)
Mutant 691 in complex.js: 2 * a replaced with 2 / a
Mutant 692 in complex.js: Math.cos(a) * cosh(b) / d replaced with Math.cos(a) * cosh(b) * d
Mutant 693 in complex.js: Math.cos(a) * cosh(b) replaced with Math.cos(a) / cosh(b)
Mutant 694 in complex.js: Math.sin(a) * sinh(b) / d replaced with Math.sin(a) * sinh(b) * d
Mutant 695 in complex.js: Math.sin(a) * sinh(b) replaced with Math.sin(a) / sinh(b)
Mutant 696 in complex.js: {
  // csc(c) = 2i / (e^(ci) - e^(-ci))

  var a = this['re'];
  var b = this['im'];
  var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
  return new Complex(Math.sin(a) * cosh(b) / d, -Math.cos(a) * sinh(b) / d);
} replaced with {}
Mutant 697 in complex.js: 're' replaced with ""
Mutant 698 in complex.js: 'im' replaced with ""
Mutant 699 in complex.js: 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a) replaced with 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a)
Mutant 700 in complex.js: 0.5 * cosh(2 * b) replaced with 0.5 / cosh(2 * b)
Mutant 701 in complex.js: 2 * b replaced with 2 / b
Mutant 702 in complex.js: 0.5 * Math.cos(2 * a) replaced with 0.5 / Math.cos(2 * a)
Mutant 703 in complex.js: 2 * a replaced with 2 / a
Mutant 704 in complex.js: Math.sin(a) * cosh(b) / d replaced with Math.sin(a) * cosh(b) * d
Mutant 705 in complex.js: Math.sin(a) * cosh(b) replaced with Math.sin(a) / cosh(b)
Mutant 706 in complex.js: -Math.cos(a) * sinh(b) / d replaced with -Math.cos(a) * sinh(b) * d
Mutant 707 in complex.js: -Math.cos(a) * sinh(b) replaced with -Math.cos(a) / sinh(b)
Mutant 708 in complex.js: -Math.cos(a) replaced with +Math.cos(a)
Mutant 709 in complex.js: {
  // asin(c) = -i * log(ci + sqrt(1 - c^2))

  var a = this['re'];
  var b = this['im'];
  var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
  var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
  return new Complex(t2['im'], -t2['re']);
} replaced with {}
Mutant 710 in complex.js: 're' replaced with ""
Mutant 711 in complex.js: 'im' replaced with ""
Mutant 712 in complex.js: b * b - a * a + 1 replaced with b * b - a * a - 1
Mutant 713 in complex.js: b * b - a * a replaced with b * b + a * a
Mutant 714 in complex.js: b * b replaced with b / b
Mutant 715 in complex.js: a * a replaced with a / a
Mutant 716 in complex.js: -2 * a * b replaced with -2 * a / b
Mutant 717 in complex.js: -2 * a replaced with -2 / a
Mutant 718 in complex.js: -2 replaced with +2
Mutant 719 in complex.js: 'sqrt' replaced with ""
Mutant 720 in complex.js: t1['re'] - b replaced with t1['re'] + b
Mutant 721 in complex.js: 're' replaced with ""
Mutant 722 in complex.js: t1['im'] + a replaced with t1['im'] - a
Mutant 723 in complex.js: 'im' replaced with ""
Mutant 724 in complex.js: 'log' replaced with ""
Mutant 725 in complex.js: 'im' replaced with ""
Mutant 726 in complex.js: -t2['re'] replaced with +t2['re']
Mutant 727 in complex.js: 're' replaced with ""
Mutant 728 in complex.js: {
  // acos(c) = i * log(c - i * sqrt(1 - c^2))

  var a = this['re'];
  var b = this['im'];
  var t1 = new Complex(b * b - a * a + 1, -2 * a * b)['sqrt']();
  var t2 = new Complex(t1['re'] - b, t1['im'] + a)['log']();
  return new Complex(Math.PI / 2 - t2['im'], t2['re']);
} replaced with {}
Mutant 729 in complex.js: 're' replaced with ""
Mutant 730 in complex.js: 'im' replaced with ""
Mutant 731 in complex.js: b * b - a * a + 1 replaced with b * b - a * a - 1
Mutant 732 in complex.js: b * b - a * a replaced with b * b + a * a
Mutant 733 in complex.js: b * b replaced with b / b
Mutant 734 in complex.js: a * a replaced with a / a
Mutant 735 in complex.js: -2 * a * b replaced with -2 * a / b
Mutant 736 in complex.js: -2 * a replaced with -2 / a
Mutant 737 in complex.js: -2 replaced with +2
Mutant 738 in complex.js: 'sqrt' replaced with ""
Mutant 739 in complex.js: t1['re'] - b replaced with t1['re'] + b
Mutant 740 in complex.js: 're' replaced with ""
Mutant 741 in complex.js: t1['im'] + a replaced with t1['im'] - a
Mutant 742 in complex.js: 'im' replaced with ""
Mutant 743 in complex.js: 'log' replaced with ""
Mutant 744 in complex.js: Math.PI / 2 - t2['im'] replaced with Math.PI / 2 + t2['im']
Mutant 745 in complex.js: Math.PI / 2 replaced with Math.PI * 2
Mutant 746 in complex.js: 'im' replaced with ""
Mutant 747 in complex.js: 're' replaced with ""
Mutant 748 in complex.js: {
  // atan(c) = i / 2 log((i + x) / (i - x))

  var a = this['re'];
  var b = this['im'];
  if (a === 0) {
    if (b === 1) {
      return new Complex(0, Infinity);
    }
    if (b === -1) {
      return new Complex(0, -Infinity);
    }
  }
  var d = a * a + (1.0 - b) * (1.0 - b);
  var t1 = new Complex((1 - b * b - a * a) / d, -2 * a / d).log();
  return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);
} replaced with {}
Mutant 749 in complex.js: 're' replaced with ""
Mutant 750 in complex.js: 'im' replaced with ""
Mutant 751 in complex.js: a === 0 replaced with true
Mutant 752 in complex.js: a === 0 replaced with false
Mutant 753 in complex.js: a === 0 replaced with a !== 0
Mutant 754 in complex.js: {
  if (b === 1) {
    return new Complex(0, Infinity);
  }
  if (b === -1) {
    return new Complex(0, -Infinity);
  }
} replaced with {}
Mutant 755 in complex.js: b === 1 replaced with true
Mutant 756 in complex.js: b === 1 replaced with false
Mutant 757 in complex.js: b === 1 replaced with b !== 1
Mutant 758 in complex.js: {
  return new Complex(0, Infinity);
} replaced with {}
Mutant 759 in complex.js: b === -1 replaced with true
Mutant 760 in complex.js: b === -1 replaced with false
Mutant 761 in complex.js: b === -1 replaced with b !== -1
Mutant 762 in complex.js: -1 replaced with +1
Mutant 763 in complex.js: {
  return new Complex(0, -Infinity);
} replaced with {}
Mutant 764 in complex.js: -Infinity replaced with +Infinity
Mutant 765 in complex.js: a * a + (1.0 - b) * (1.0 - b) replaced with a * a - (1.0 - b) * (1.0 - b)
Mutant 766 in complex.js: a * a replaced with a / a
Mutant 767 in complex.js: (1.0 - b) * (1.0 - b) replaced with (1.0 - b) / (1.0 - b)
Mutant 768 in complex.js: 1.0 - b replaced with 1.0 + b
Mutant 769 in complex.js: 1.0 - b replaced with 1.0 + b
Mutant 770 in complex.js: (1 - b * b - a * a) / d replaced with (1 - b * b - a * a) * d
Mutant 771 in complex.js: 1 - b * b - a * a replaced with 1 - b * b + a * a
Mutant 772 in complex.js: 1 - b * b replaced with 1 + b * b
Mutant 773 in complex.js: b * b replaced with b / b
Mutant 774 in complex.js: a * a replaced with a / a
Mutant 775 in complex.js: -2 * a / d replaced with -2 * a * d
Mutant 776 in complex.js: -2 * a replaced with -2 / a
Mutant 777 in complex.js: -2 replaced with +2
Mutant 778 in complex.js: -0.5 * t1['im'] replaced with -0.5 / t1['im']
Mutant 779 in complex.js: -0.5 replaced with +0.5
Mutant 780 in complex.js: 'im' replaced with ""
Mutant 781 in complex.js: 0.5 * t1['re'] replaced with 0.5 / t1['re']
Mutant 782 in complex.js: 're' replaced with ""
Mutant 783 in complex.js: {
  // acot(c) = i / 2 log((c - i) / (c + i))

  var a = this['re'];
  var b = this['im'];
  if (b === 0) {
    return new Complex(Math.atan2(1, a), 0);
  }
  var d = a * a + b * b;
  return d !== 0 ? new Complex(a / d, -b / d).atan() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atan();
} replaced with {}
Mutant 784 in complex.js: 're' replaced with ""
Mutant 785 in complex.js: 'im' replaced with ""
Mutant 786 in complex.js: b === 0 replaced with true
Mutant 787 in complex.js: b === 0 replaced with false
Mutant 788 in complex.js: b === 0 replaced with b !== 0
Mutant 789 in complex.js: {
  return new Complex(Math.atan2(1, a), 0);
} replaced with {}
Mutant 790 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 791 in complex.js: a * a replaced with a / a
Mutant 792 in complex.js: b * b replaced with b / b
Mutant 793 in complex.js: d !== 0 replaced with true
Mutant 794 in complex.js: d !== 0 replaced with false
Mutant 795 in complex.js: d !== 0 replaced with d === 0
Mutant 796 in complex.js: a / d replaced with a * d
Mutant 797 in complex.js: -b / d replaced with -b * d
Mutant 798 in complex.js: -b replaced with +b
Mutant 799 in complex.js: a !== 0 replaced with true
Mutant 800 in complex.js: a !== 0 replaced with false
Mutant 801 in complex.js: a !== 0 replaced with a === 0
Mutant 802 in complex.js: a / 0 replaced with a * 0
Mutant 803 in complex.js: b !== 0 replaced with true
Mutant 804 in complex.js: b !== 0 replaced with false
Mutant 805 in complex.js: b !== 0 replaced with b === 0
Mutant 806 in complex.js: -b / 0 replaced with -b * 0
Mutant 807 in complex.js: -b replaced with +b
Mutant 808 in complex.js: {
  // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))

  var a = this['re'];
  var b = this['im'];
  if (a === 0 && b === 0) {
    return new Complex(0, Infinity);
  }
  var d = a * a + b * b;
  return d !== 0 ? new Complex(a / d, -b / d).acos() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acos();
} replaced with {}
Mutant 809 in complex.js: 're' replaced with ""
Mutant 810 in complex.js: 'im' replaced with ""
Mutant 811 in complex.js: a === 0 && b === 0 replaced with true
Mutant 812 in complex.js: a === 0 && b === 0 replaced with false
Mutant 813 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 814 in complex.js: a === 0 replaced with true
Mutant 815 in complex.js: a === 0 replaced with a !== 0
Mutant 816 in complex.js: b === 0 replaced with true
Mutant 817 in complex.js: b === 0 replaced with b !== 0
Mutant 818 in complex.js: {
  return new Complex(0, Infinity);
} replaced with {}
Mutant 819 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 820 in complex.js: a * a replaced with a / a
Mutant 821 in complex.js: b * b replaced with b / b
Mutant 822 in complex.js: d !== 0 replaced with true
Mutant 823 in complex.js: d !== 0 replaced with false
Mutant 824 in complex.js: d !== 0 replaced with d === 0
Mutant 825 in complex.js: a / d replaced with a * d
Mutant 826 in complex.js: -b / d replaced with -b * d
Mutant 827 in complex.js: -b replaced with +b
Mutant 828 in complex.js: a !== 0 replaced with true
Mutant 829 in complex.js: a !== 0 replaced with false
Mutant 830 in complex.js: a !== 0 replaced with a === 0
Mutant 831 in complex.js: a / 0 replaced with a * 0
Mutant 832 in complex.js: b !== 0 replaced with true
Mutant 833 in complex.js: b !== 0 replaced with false
Mutant 834 in complex.js: b !== 0 replaced with b === 0
Mutant 835 in complex.js: -b / 0 replaced with -b * 0
Mutant 836 in complex.js: -b replaced with +b
Mutant 837 in complex.js: {
  // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))

  var a = this['re'];
  var b = this['im'];
  if (a === 0 && b === 0) {
    return new Complex(Math.PI / 2, Infinity);
  }
  var d = a * a + b * b;
  return d !== 0 ? new Complex(a / d, -b / d).asin() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asin();
} replaced with {}
Mutant 838 in complex.js: 're' replaced with ""
Mutant 839 in complex.js: 'im' replaced with ""
Mutant 840 in complex.js: a === 0 && b === 0 replaced with true
Mutant 841 in complex.js: a === 0 && b === 0 replaced with false
Mutant 842 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 843 in complex.js: a === 0 replaced with true
Mutant 844 in complex.js: a === 0 replaced with a !== 0
Mutant 845 in complex.js: b === 0 replaced with true
Mutant 846 in complex.js: b === 0 replaced with b !== 0
Mutant 847 in complex.js: {
  return new Complex(Math.PI / 2, Infinity);
} replaced with {}
Mutant 848 in complex.js: Math.PI / 2 replaced with Math.PI * 2
Mutant 849 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 850 in complex.js: a * a replaced with a / a
Mutant 851 in complex.js: b * b replaced with b / b
Mutant 852 in complex.js: d !== 0 replaced with true
Mutant 853 in complex.js: d !== 0 replaced with false
Mutant 854 in complex.js: d !== 0 replaced with d === 0
Mutant 855 in complex.js: a / d replaced with a * d
Mutant 856 in complex.js: -b / d replaced with -b * d
Mutant 857 in complex.js: -b replaced with +b
Mutant 858 in complex.js: a !== 0 replaced with true
Mutant 859 in complex.js: a !== 0 replaced with false
Mutant 860 in complex.js: a !== 0 replaced with a === 0
Mutant 861 in complex.js: a / 0 replaced with a * 0
Mutant 862 in complex.js: b !== 0 replaced with true
Mutant 863 in complex.js: b !== 0 replaced with false
Mutant 864 in complex.js: b !== 0 replaced with b === 0
Mutant 865 in complex.js: -b / 0 replaced with -b * 0
Mutant 866 in complex.js: -b replaced with +b
Mutant 867 in complex.js: {
  // sinh(c) = (e^c - e^-c) / 2

  var a = this['re'];
  var b = this['im'];
  return new Complex(sinh(a) * Math.cos(b), cosh(a) * Math.sin(b));
} replaced with {}
Mutant 868 in complex.js: 're' replaced with ""
Mutant 869 in complex.js: 'im' replaced with ""
Mutant 870 in complex.js: sinh(a) * Math.cos(b) replaced with sinh(a) / Math.cos(b)
Mutant 871 in complex.js: cosh(a) * Math.sin(b) replaced with cosh(a) / Math.sin(b)
Mutant 872 in complex.js: {
  // cosh(c) = (e^c + e^-c) / 2

  var a = this['re'];
  var b = this['im'];
  return new Complex(cosh(a) * Math.cos(b), sinh(a) * Math.sin(b));
} replaced with {}
Mutant 873 in complex.js: 're' replaced with ""
Mutant 874 in complex.js: 'im' replaced with ""
Mutant 875 in complex.js: cosh(a) * Math.cos(b) replaced with cosh(a) / Math.cos(b)
Mutant 876 in complex.js: sinh(a) * Math.sin(b) replaced with sinh(a) / Math.sin(b)
Mutant 877 in complex.js: {
  // tanh(c) = (e^c - e^-c) / (e^c + e^-c)

  var a = 2 * this['re'];
  var b = 2 * this['im'];
  var d = cosh(a) + Math.cos(b);
  return new Complex(sinh(a) / d, Math.sin(b) / d);
} replaced with {}
Mutant 878 in complex.js: 2 * this['re'] replaced with 2 / this['re']
Mutant 879 in complex.js: 're' replaced with ""
Mutant 880 in complex.js: 2 * this['im'] replaced with 2 / this['im']
Mutant 881 in complex.js: 'im' replaced with ""
Mutant 882 in complex.js: cosh(a) + Math.cos(b) replaced with cosh(a) - Math.cos(b)
Mutant 883 in complex.js: sinh(a) / d replaced with sinh(a) * d
Mutant 884 in complex.js: Math.sin(b) / d replaced with Math.sin(b) * d
Mutant 885 in complex.js: {
  // coth(c) = (e^c + e^-c) / (e^c - e^-c)

  var a = 2 * this['re'];
  var b = 2 * this['im'];
  var d = cosh(a) - Math.cos(b);
  return new Complex(sinh(a) / d, -Math.sin(b) / d);
} replaced with {}
Mutant 886 in complex.js: 2 * this['re'] replaced with 2 / this['re']
Mutant 887 in complex.js: 're' replaced with ""
Mutant 888 in complex.js: 2 * this['im'] replaced with 2 / this['im']
Mutant 889 in complex.js: 'im' replaced with ""
Mutant 890 in complex.js: cosh(a) - Math.cos(b) replaced with cosh(a) + Math.cos(b)
Mutant 891 in complex.js: sinh(a) / d replaced with sinh(a) * d
Mutant 892 in complex.js: -Math.sin(b) / d replaced with -Math.sin(b) * d
Mutant 893 in complex.js: -Math.sin(b) replaced with +Math.sin(b)
Mutant 894 in complex.js: {
  // csch(c) = 2 / (e^c - e^-c)

  var a = this['re'];
  var b = this['im'];
  var d = Math.cos(2 * b) - cosh(2 * a);
  return new Complex(-2 * sinh(a) * Math.cos(b) / d, 2 * cosh(a) * Math.sin(b) / d);
} replaced with {}
Mutant 895 in complex.js: 're' replaced with ""
Mutant 896 in complex.js: 'im' replaced with ""
Mutant 897 in complex.js: Math.cos(2 * b) - cosh(2 * a) replaced with Math.cos(2 * b) + cosh(2 * a)
Mutant 898 in complex.js: 2 * b replaced with 2 / b
Mutant 899 in complex.js: 2 * a replaced with 2 / a
Mutant 900 in complex.js: -2 * sinh(a) * Math.cos(b) / d replaced with -2 * sinh(a) * Math.cos(b) * d
Mutant 901 in complex.js: -2 * sinh(a) * Math.cos(b) replaced with -2 * sinh(a) / Math.cos(b)
Mutant 902 in complex.js: -2 * sinh(a) replaced with -2 / sinh(a)
Mutant 903 in complex.js: -2 replaced with +2
Mutant 904 in complex.js: 2 * cosh(a) * Math.sin(b) / d replaced with 2 * cosh(a) * Math.sin(b) * d
Mutant 905 in complex.js: 2 * cosh(a) * Math.sin(b) replaced with 2 * cosh(a) / Math.sin(b)
Mutant 906 in complex.js: 2 * cosh(a) replaced with 2 / cosh(a)
Mutant 907 in complex.js: {
  // sech(c) = 2 / (e^c + e^-c)

  var a = this['re'];
  var b = this['im'];
  var d = Math.cos(2 * b) + cosh(2 * a);
  return new Complex(2 * cosh(a) * Math.cos(b) / d, -2 * sinh(a) * Math.sin(b) / d);
} replaced with {}
Mutant 908 in complex.js: 're' replaced with ""
Mutant 909 in complex.js: 'im' replaced with ""
Mutant 910 in complex.js: Math.cos(2 * b) + cosh(2 * a) replaced with Math.cos(2 * b) - cosh(2 * a)
Mutant 911 in complex.js: 2 * b replaced with 2 / b
Mutant 912 in complex.js: 2 * a replaced with 2 / a
Mutant 913 in complex.js: 2 * cosh(a) * Math.cos(b) / d replaced with 2 * cosh(a) * Math.cos(b) * d
Mutant 914 in complex.js: 2 * cosh(a) * Math.cos(b) replaced with 2 * cosh(a) / Math.cos(b)
Mutant 915 in complex.js: 2 * cosh(a) replaced with 2 / cosh(a)
Mutant 916 in complex.js: -2 * sinh(a) * Math.sin(b) / d replaced with -2 * sinh(a) * Math.sin(b) * d
Mutant 917 in complex.js: -2 * sinh(a) * Math.sin(b) replaced with -2 * sinh(a) / Math.sin(b)
Mutant 918 in complex.js: -2 * sinh(a) replaced with -2 / sinh(a)
Mutant 919 in complex.js: -2 replaced with +2
Mutant 920 in complex.js: {
  // asinh(c) = log(c + sqrt(c^2 + 1))

  var tmp = this['im'];
  this['im'] = -this['re'];
  this['re'] = tmp;
  var res = this['asin']();
  this['re'] = -this['im'];
  this['im'] = tmp;
  tmp = res['re'];
  res['re'] = -res['im'];
  res['im'] = tmp;
  return res;
} replaced with {}
Mutant 921 in complex.js: 'im' replaced with ""
Mutant 922 in complex.js: 'im' replaced with ""
Mutant 923 in complex.js: -this['re'] replaced with +this['re']
Mutant 924 in complex.js: 're' replaced with ""
Mutant 925 in complex.js: 're' replaced with ""
Mutant 926 in complex.js: 'asin' replaced with ""
Mutant 927 in complex.js: 're' replaced with ""
Mutant 928 in complex.js: -this['im'] replaced with +this['im']
Mutant 929 in complex.js: 'im' replaced with ""
Mutant 930 in complex.js: 'im' replaced with ""
Mutant 931 in complex.js: 're' replaced with ""
Mutant 932 in complex.js: 're' replaced with ""
Mutant 933 in complex.js: -res['im'] replaced with +res['im']
Mutant 934 in complex.js: 'im' replaced with ""
Mutant 935 in complex.js: 'im' replaced with ""
Mutant 936 in complex.js: {
  // acosh(c) = log(c + sqrt(c^2 - 1))

  var res = this['acos']();
  if (res['im'] <= 0) {
    var tmp = res['re'];
    res['re'] = -res['im'];
    res['im'] = tmp;
  } else {
    var tmp = res['im'];
    res['im'] = -res['re'];
    res['re'] = tmp;
  }
  return res;
} replaced with {}
Mutant 937 in complex.js: 'acos' replaced with ""
Mutant 938 in complex.js: res['im'] <= 0 replaced with true
Mutant 939 in complex.js: res['im'] <= 0 replaced with false
Mutant 940 in complex.js: res['im'] <= 0 replaced with res['im'] < 0
Mutant 941 in complex.js: res['im'] <= 0 replaced with res['im'] > 0
Mutant 942 in complex.js: 'im' replaced with ""
Mutant 943 in complex.js: {
  var tmp = res['re'];
  res['re'] = -res['im'];
  res['im'] = tmp;
} replaced with {}
Mutant 944 in complex.js: 're' replaced with ""
Mutant 945 in complex.js: 're' replaced with ""
Mutant 946 in complex.js: -res['im'] replaced with +res['im']
Mutant 947 in complex.js: 'im' replaced with ""
Mutant 948 in complex.js: 'im' replaced with ""
Mutant 949 in complex.js: {
  var tmp = res['im'];
  res['im'] = -res['re'];
  res['re'] = tmp;
} replaced with {}
Mutant 950 in complex.js: 'im' replaced with ""
Mutant 951 in complex.js: 'im' replaced with ""
Mutant 952 in complex.js: -res['re'] replaced with +res['re']
Mutant 953 in complex.js: 're' replaced with ""
Mutant 954 in complex.js: 're' replaced with ""
Mutant 955 in complex.js: {
  // atanh(c) = log((1+c) / (1-c)) / 2

  var a = this['re'];
  var b = this['im'];
  var noIM = a > 1 && b === 0;
  var oneMinus = 1 - a;
  var onePlus = 1 + a;
  var d = oneMinus * oneMinus + b * b;
  var x = d !== 0 ? new Complex((onePlus * oneMinus - b * b) / d, (b * oneMinus + onePlus * b) / d) : new Complex(a !== -1 ? a / 0 : 0, b !== 0 ? b / 0 : 0);
  var temp = x['re'];
  x['re'] = logHypot(x['re'], x['im']) / 2;
  x['im'] = Math.atan2(x['im'], temp) / 2;
  if (noIM) {
    x['im'] = -x['im'];
  }
  return x;
} replaced with {}
Mutant 956 in complex.js: 're' replaced with ""
Mutant 957 in complex.js: 'im' replaced with ""
Mutant 958 in complex.js: a > 1 && b === 0 replaced with true
Mutant 959 in complex.js: a > 1 && b === 0 replaced with false
Mutant 960 in complex.js: a > 1 && b === 0 replaced with a > 1 || b === 0
Mutant 961 in complex.js: a > 1 replaced with true
Mutant 962 in complex.js: a > 1 replaced with a >= 1
Mutant 963 in complex.js: a > 1 replaced with a <= 1
Mutant 964 in complex.js: b === 0 replaced with true
Mutant 965 in complex.js: b === 0 replaced with b !== 0
Mutant 966 in complex.js: 1 - a replaced with 1 + a
Mutant 967 in complex.js: 1 + a replaced with 1 - a
Mutant 968 in complex.js: oneMinus * oneMinus + b * b replaced with oneMinus * oneMinus - b * b
Mutant 969 in complex.js: oneMinus * oneMinus replaced with oneMinus / oneMinus
Mutant 970 in complex.js: b * b replaced with b / b
Mutant 971 in complex.js: d !== 0 replaced with true
Mutant 972 in complex.js: d !== 0 replaced with false
Mutant 973 in complex.js: d !== 0 replaced with d === 0
Mutant 974 in complex.js: (onePlus * oneMinus - b * b) / d replaced with (onePlus * oneMinus - b * b) * d
Mutant 975 in complex.js: onePlus * oneMinus - b * b replaced with onePlus * oneMinus + b * b
Mutant 976 in complex.js: onePlus * oneMinus replaced with onePlus / oneMinus
Mutant 977 in complex.js: b * b replaced with b / b
Mutant 978 in complex.js: (b * oneMinus + onePlus * b) / d replaced with (b * oneMinus + onePlus * b) * d
Mutant 979 in complex.js: b * oneMinus + onePlus * b replaced with b * oneMinus - onePlus * b
Mutant 980 in complex.js: b * oneMinus replaced with b / oneMinus
Mutant 981 in complex.js: onePlus * b replaced with onePlus / b
Mutant 982 in complex.js: a !== -1 replaced with true
Mutant 983 in complex.js: a !== -1 replaced with false
Mutant 984 in complex.js: a !== -1 replaced with a === -1
Mutant 985 in complex.js: -1 replaced with +1
Mutant 986 in complex.js: a / 0 replaced with a * 0
Mutant 987 in complex.js: b !== 0 replaced with true
Mutant 988 in complex.js: b !== 0 replaced with false
Mutant 989 in complex.js: b !== 0 replaced with b === 0
Mutant 990 in complex.js: b / 0 replaced with b * 0
Mutant 991 in complex.js: 're' replaced with ""
Mutant 992 in complex.js: 're' replaced with ""
Mutant 993 in complex.js: logHypot(x['re'], x['im']) / 2 replaced with logHypot(x['re'], x['im']) * 2
Mutant 994 in complex.js: 're' replaced with ""
Mutant 995 in complex.js: 'im' replaced with ""
Mutant 996 in complex.js: 'im' replaced with ""
Mutant 997 in complex.js: Math.atan2(x['im'], temp) / 2 replaced with Math.atan2(x['im'], temp) * 2
Mutant 998 in complex.js: 'im' replaced with ""
Mutant 999 in complex.js: noIM replaced with true
Mutant 1000 in complex.js: noIM replaced with false
Mutant 1001 in complex.js: {
  x['im'] = -x['im'];
} replaced with {}
Mutant 1002 in complex.js: 'im' replaced with ""
Mutant 1003 in complex.js: -x['im'] replaced with +x['im']
Mutant 1004 in complex.js: 'im' replaced with ""
Mutant 1005 in complex.js: {
  // acoth(c) = log((c+1) / (c-1)) / 2

  var a = this['re'];
  var b = this['im'];
  if (a === 0 && b === 0) {
    return new Complex(0, Math.PI / 2);
  }
  var d = a * a + b * b;
  return d !== 0 ? new Complex(a / d, -b / d).atanh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).atanh();
} replaced with {}
Mutant 1006 in complex.js: 're' replaced with ""
Mutant 1007 in complex.js: 'im' replaced with ""
Mutant 1008 in complex.js: a === 0 && b === 0 replaced with true
Mutant 1009 in complex.js: a === 0 && b === 0 replaced with false
Mutant 1010 in complex.js: a === 0 && b === 0 replaced with a === 0 || b === 0
Mutant 1011 in complex.js: a === 0 replaced with true
Mutant 1012 in complex.js: a === 0 replaced with a !== 0
Mutant 1013 in complex.js: b === 0 replaced with true
Mutant 1014 in complex.js: b === 0 replaced with b !== 0
Mutant 1015 in complex.js: {
  return new Complex(0, Math.PI / 2);
} replaced with {}
Mutant 1016 in complex.js: Math.PI / 2 replaced with Math.PI * 2
Mutant 1017 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 1018 in complex.js: a * a replaced with a / a
Mutant 1019 in complex.js: b * b replaced with b / b
Mutant 1020 in complex.js: d !== 0 replaced with true
Mutant 1021 in complex.js: d !== 0 replaced with false
Mutant 1022 in complex.js: d !== 0 replaced with d === 0
Mutant 1023 in complex.js: a / d replaced with a * d
Mutant 1024 in complex.js: -b / d replaced with -b * d
Mutant 1025 in complex.js: -b replaced with +b
Mutant 1026 in complex.js: a !== 0 replaced with true
Mutant 1027 in complex.js: a !== 0 replaced with false
Mutant 1028 in complex.js: a !== 0 replaced with a === 0
Mutant 1029 in complex.js: a / 0 replaced with a * 0
Mutant 1030 in complex.js: b !== 0 replaced with true
Mutant 1031 in complex.js: b !== 0 replaced with false
Mutant 1032 in complex.js: b !== 0 replaced with b === 0
Mutant 1033 in complex.js: -b / 0 replaced with -b * 0
Mutant 1034 in complex.js: -b replaced with +b
Mutant 1035 in complex.js: {
  // acsch(c) = log((1+sqrt(1+c^2))/c)

  var a = this['re'];
  var b = this['im'];
  if (b === 0) {
    return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
  }
  var d = a * a + b * b;
  return d !== 0 ? new Complex(a / d, -b / d).asinh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).asinh();
} replaced with {}
Mutant 1036 in complex.js: 're' replaced with ""
Mutant 1037 in complex.js: 'im' replaced with ""
Mutant 1038 in complex.js: b === 0 replaced with true
Mutant 1039 in complex.js: b === 0 replaced with false
Mutant 1040 in complex.js: b === 0 replaced with b !== 0
Mutant 1041 in complex.js: {
  return new Complex(a !== 0 ? Math.log(a + Math.sqrt(a * a + 1)) : Infinity, 0);
} replaced with {}
Mutant 1042 in complex.js: a !== 0 replaced with true
Mutant 1043 in complex.js: a !== 0 replaced with false
Mutant 1044 in complex.js: a !== 0 replaced with a === 0
Mutant 1045 in complex.js: a + Math.sqrt(a * a + 1) replaced with a - Math.sqrt(a * a + 1)
Mutant 1046 in complex.js: a * a + 1 replaced with a * a - 1
Mutant 1047 in complex.js: a * a replaced with a / a
Mutant 1048 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 1049 in complex.js: a * a replaced with a / a
Mutant 1050 in complex.js: b * b replaced with b / b
Mutant 1051 in complex.js: d !== 0 replaced with true
Mutant 1052 in complex.js: d !== 0 replaced with false
Mutant 1053 in complex.js: d !== 0 replaced with d === 0
Mutant 1054 in complex.js: a / d replaced with a * d
Mutant 1055 in complex.js: -b / d replaced with -b * d
Mutant 1056 in complex.js: -b replaced with +b
Mutant 1057 in complex.js: a !== 0 replaced with true
Mutant 1058 in complex.js: a !== 0 replaced with false
Mutant 1059 in complex.js: a !== 0 replaced with a === 0
Mutant 1060 in complex.js: a / 0 replaced with a * 0
Mutant 1061 in complex.js: b !== 0 replaced with true
Mutant 1062 in complex.js: b !== 0 replaced with false
Mutant 1063 in complex.js: b !== 0 replaced with b === 0
Mutant 1064 in complex.js: -b / 0 replaced with -b * 0
Mutant 1065 in complex.js: -b replaced with +b
Mutant 1066 in complex.js: {
  // asech(c) = log((1+sqrt(1-c^2))/c)

  var a = this['re'];
  var b = this['im'];
  if (this['isZero']()) {
    return Complex['INFINITY'];
  }
  var d = a * a + b * b;
  return d !== 0 ? new Complex(a / d, -b / d).acosh() : new Complex(a !== 0 ? a / 0 : 0, b !== 0 ? -b / 0 : 0).acosh();
} replaced with {}
Mutant 1067 in complex.js: 're' replaced with ""
Mutant 1068 in complex.js: 'im' replaced with ""
Mutant 1069 in complex.js: this['isZero']() replaced with true
Mutant 1070 in complex.js: this['isZero']() replaced with false
Mutant 1071 in complex.js: 'isZero' replaced with ""
Mutant 1072 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 1073 in complex.js: 'INFINITY' replaced with ""
Mutant 1074 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 1075 in complex.js: a * a replaced with a / a
Mutant 1076 in complex.js: b * b replaced with b / b
Mutant 1077 in complex.js: d !== 0 replaced with true
Mutant 1078 in complex.js: d !== 0 replaced with false
Mutant 1079 in complex.js: d !== 0 replaced with d === 0
Mutant 1080 in complex.js: a / d replaced with a * d
Mutant 1081 in complex.js: -b / d replaced with -b * d
Mutant 1082 in complex.js: -b replaced with +b
Mutant 1083 in complex.js: a !== 0 replaced with true
Mutant 1084 in complex.js: a !== 0 replaced with false
Mutant 1085 in complex.js: a !== 0 replaced with a === 0
Mutant 1086 in complex.js: a / 0 replaced with a * 0
Mutant 1087 in complex.js: b !== 0 replaced with true
Mutant 1088 in complex.js: b !== 0 replaced with false
Mutant 1089 in complex.js: b !== 0 replaced with b === 0
Mutant 1090 in complex.js: -b / 0 replaced with -b * 0
Mutant 1091 in complex.js: -b replaced with +b
Mutant 1092 in complex.js: {
  // 1 / 0 = Infinity and 1 / Infinity = 0
  if (this['isZero']()) {
    return Complex['INFINITY'];
  }
  if (this['isInfinite']()) {
    return Complex['ZERO'];
  }
  var a = this['re'];
  var b = this['im'];
  var d = a * a + b * b;
  return new Complex(a / d, -b / d);
} replaced with {}
Mutant 1093 in complex.js: this['isZero']() replaced with true
Mutant 1094 in complex.js: this['isZero']() replaced with false
Mutant 1095 in complex.js: 'isZero' replaced with ""
Mutant 1096 in complex.js: {
  return Complex['INFINITY'];
} replaced with {}
Mutant 1097 in complex.js: 'INFINITY' replaced with ""
Mutant 1098 in complex.js: this['isInfinite']() replaced with true
Mutant 1099 in complex.js: this['isInfinite']() replaced with false
Mutant 1100 in complex.js: 'isInfinite' replaced with ""
Mutant 1101 in complex.js: {
  return Complex['ZERO'];
} replaced with {}
Mutant 1102 in complex.js: 'ZERO' replaced with ""
Mutant 1103 in complex.js: 're' replaced with ""
Mutant 1104 in complex.js: 'im' replaced with ""
Mutant 1105 in complex.js: a * a + b * b replaced with a * a - b * b
Mutant 1106 in complex.js: a * a replaced with a / a
Mutant 1107 in complex.js: b * b replaced with b / b
Mutant 1108 in complex.js: a / d replaced with a * d
Mutant 1109 in complex.js: -b / d replaced with -b * d
Mutant 1110 in complex.js: -b replaced with +b
Mutant 1111 in complex.js: {
  return new Complex(this['re'], -this['im']);
} replaced with {}
Mutant 1112 in complex.js: 're' replaced with ""
Mutant 1113 in complex.js: -this['im'] replaced with +this['im']
Mutant 1114 in complex.js: 'im' replaced with ""
Mutant 1115 in complex.js: {
  return new Complex(-this['re'], -this['im']);
} replaced with {}
Mutant 1116 in complex.js: -this['re'] replaced with +this['re']
Mutant 1117 in complex.js: 're' replaced with ""
Mutant 1118 in complex.js: -this['im'] replaced with +this['im']
Mutant 1119 in complex.js: 'im' replaced with ""
Mutant 1120 in complex.js: {
  places = Math.pow(10, places || 0);
  return new Complex(Math.ceil(this['re'] * places) / places, Math.ceil(this['im'] * places) / places);
} replaced with {}
Mutant 1121 in complex.js: places || 0 replaced with true
Mutant 1122 in complex.js: places || 0 replaced with false
Mutant 1123 in complex.js: places || 0 replaced with places && 0
Mutant 1124 in complex.js: Math.ceil(this['re'] * places) / places replaced with Math.ceil(this['re'] * places) * places
Mutant 1125 in complex.js: this['re'] * places replaced with this['re'] / places
Mutant 1126 in complex.js: 're' replaced with ""
Mutant 1127 in complex.js: Math.ceil(this['im'] * places) / places replaced with Math.ceil(this['im'] * places) * places
Mutant 1128 in complex.js: this['im'] * places replaced with this['im'] / places
Mutant 1129 in complex.js: 'im' replaced with ""
Mutant 1130 in complex.js: {
  places = Math.pow(10, places || 0);
  return new Complex(Math.floor(this['re'] * places) / places, Math.floor(this['im'] * places) / places);
} replaced with {}
Mutant 1131 in complex.js: places || 0 replaced with true
Mutant 1132 in complex.js: places || 0 replaced with false
Mutant 1133 in complex.js: places || 0 replaced with places && 0
Mutant 1134 in complex.js: Math.floor(this['re'] * places) / places replaced with Math.floor(this['re'] * places) * places
Mutant 1135 in complex.js: this['re'] * places replaced with this['re'] / places
Mutant 1136 in complex.js: 're' replaced with ""
Mutant 1137 in complex.js: Math.floor(this['im'] * places) / places replaced with Math.floor(this['im'] * places) * places
Mutant 1138 in complex.js: this['im'] * places replaced with this['im'] / places
Mutant 1139 in complex.js: 'im' replaced with ""
Mutant 1140 in complex.js: {
  places = Math.pow(10, places || 0);
  return new Complex(Math.round(this['re'] * places) / places, Math.round(this['im'] * places) / places);
} replaced with {}
Mutant 1141 in complex.js: places || 0 replaced with true
Mutant 1142 in complex.js: places || 0 replaced with false
Mutant 1143 in complex.js: places || 0 replaced with places && 0
Mutant 1144 in complex.js: Math.round(this['re'] * places) / places replaced with Math.round(this['re'] * places) * places
Mutant 1145 in complex.js: this['re'] * places replaced with this['re'] / places
Mutant 1146 in complex.js: 're' replaced with ""
Mutant 1147 in complex.js: Math.round(this['im'] * places) / places replaced with Math.round(this['im'] * places) * places
Mutant 1148 in complex.js: this['im'] * places replaced with this['im'] / places
Mutant 1149 in complex.js: 'im' replaced with ""
Mutant 1150 in complex.js: {
  var z = new Complex(a, b);
  return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
} replaced with {}
Mutant 1151 in complex.js: Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] replaced with true
Mutant 1152 in complex.js: Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] replaced with false
Mutant 1153 in complex.js: Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] && Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] replaced with Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] || Math.abs(z['im'] - this['im']) <= Complex['EPSILON']
Mutant 1154 in complex.js: Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] replaced with true
Mutant 1155 in complex.js: Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] replaced with Math.abs(z['re'] - this['re']) < Complex['EPSILON']
Mutant 1156 in complex.js: Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] replaced with Math.abs(z['re'] - this['re']) > Complex['EPSILON']
Mutant 1157 in complex.js: z['re'] - this['re'] replaced with z['re'] + this['re']
Mutant 1158 in complex.js: 're' replaced with ""
Mutant 1159 in complex.js: 're' replaced with ""
Mutant 1160 in complex.js: 'EPSILON' replaced with ""
Mutant 1161 in complex.js: Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] replaced with true
Mutant 1162 in complex.js: Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] replaced with Math.abs(z['im'] - this['im']) < Complex['EPSILON']
Mutant 1163 in complex.js: Math.abs(z['im'] - this['im']) <= Complex['EPSILON'] replaced with Math.abs(z['im'] - this['im']) > Complex['EPSILON']
Mutant 1164 in complex.js: z['im'] - this['im'] replaced with z['im'] + this['im']
Mutant 1165 in complex.js: 'im' replaced with ""
Mutant 1166 in complex.js: 'im' replaced with ""
Mutant 1167 in complex.js: 'EPSILON' replaced with ""
Mutant 1168 in complex.js: {
  return new Complex(this['re'], this['im']);
} replaced with {}
Mutant 1169 in complex.js: 're' replaced with ""
Mutant 1170 in complex.js: 'im' replaced with ""
Mutant 1171 in complex.js: {
  var a = this['re'];
  var b = this['im'];
  var ret = "";
  if (this['isNaN']()) {
    return 'NaN';
  }
  if (this['isInfinite']()) {
    return 'Infinity';
  }
  if (Math.abs(a) < Complex['EPSILON']) {
    a = 0;
  }
  if (Math.abs(b) < Complex['EPSILON']) {
    b = 0;
  }

  // If is real number
  if (b === 0) {
    return ret + a;
  }
  if (a !== 0) {
    ret += a;
    ret += " ";
    if (b < 0) {
      b = -b;
      ret += "-";
    } else {
      ret += "+";
    }
    ret += " ";
  } else if (b < 0) {
    b = -b;
    ret += "-";
  }
  if (1 !== b) {
    // b is the absolute imaginary part
    ret += b;
  }
  return ret + "i";
} replaced with {}
Mutant 1172 in complex.js: 're' replaced with ""
Mutant 1173 in complex.js: 'im' replaced with ""
Mutant 1174 in complex.js: "" replaced with "Stryker was here!"
Mutant 1175 in complex.js: this['isNaN']() replaced with true
Mutant 1176 in complex.js: this['isNaN']() replaced with false
Mutant 1177 in complex.js: 'isNaN' replaced with ""
Mutant 1178 in complex.js: {
  return 'NaN';
} replaced with {}
Mutant 1179 in complex.js: 'NaN' replaced with ""
Mutant 1180 in complex.js: this['isInfinite']() replaced with true
Mutant 1181 in complex.js: this['isInfinite']() replaced with false
Mutant 1182 in complex.js: 'isInfinite' replaced with ""
Mutant 1183 in complex.js: {
  return 'Infinity';
} replaced with {}
Mutant 1184 in complex.js: 'Infinity' replaced with ""
Mutant 1185 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with true
Mutant 1186 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with false
Mutant 1187 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with Math.abs(a) <= Complex['EPSILON']
Mutant 1188 in complex.js: Math.abs(a) < Complex['EPSILON'] replaced with Math.abs(a) >= Complex['EPSILON']
Mutant 1189 in complex.js: 'EPSILON' replaced with ""
Mutant 1190 in complex.js: {
  a = 0;
} replaced with {}
Mutant 1191 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with true
Mutant 1192 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with false
Mutant 1193 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with Math.abs(b) <= Complex['EPSILON']
Mutant 1194 in complex.js: Math.abs(b) < Complex['EPSILON'] replaced with Math.abs(b) >= Complex['EPSILON']
Mutant 1195 in complex.js: 'EPSILON' replaced with ""
Mutant 1196 in complex.js: {
  b = 0;
} replaced with {}
Mutant 1197 in complex.js: b === 0 replaced with true
Mutant 1198 in complex.js: b === 0 replaced with false
Mutant 1199 in complex.js: b === 0 replaced with b !== 0
Mutant 1200 in complex.js: {
  return ret + a;
} replaced with {}
Mutant 1201 in complex.js: ret + a replaced with ret - a
Mutant 1202 in complex.js: a !== 0 replaced with true
Mutant 1203 in complex.js: a !== 0 replaced with false
Mutant 1204 in complex.js: a !== 0 replaced with a === 0
Mutant 1205 in complex.js: {
  ret += a;
  ret += " ";
  if (b < 0) {
    b = -b;
    ret += "-";
  } else {
    ret += "+";
  }
  ret += " ";
} replaced with {}
Mutant 1206 in complex.js: ret += a replaced with ret -= a
Mutant 1207 in complex.js: " " replaced with ""
Mutant 1208 in complex.js: b < 0 replaced with true
Mutant 1209 in complex.js: b < 0 replaced with false
Mutant 1210 in complex.js: b < 0 replaced with b <= 0
Mutant 1211 in complex.js: b < 0 replaced with b >= 0
Mutant 1212 in complex.js: {
  b = -b;
  ret += "-";
} replaced with {}
Mutant 1213 in complex.js: -b replaced with +b
Mutant 1214 in complex.js: "-" replaced with ""
Mutant 1215 in complex.js: {
  ret += "+";
} replaced with {}
Mutant 1216 in complex.js: "+" replaced with ""
Mutant 1217 in complex.js: " " replaced with ""
Mutant 1218 in complex.js: b < 0 replaced with true
Mutant 1219 in complex.js: b < 0 replaced with false
Mutant 1220 in complex.js: b < 0 replaced with b <= 0
Mutant 1221 in complex.js: b < 0 replaced with b >= 0
Mutant 1222 in complex.js: {
  b = -b;
  ret += "-";
} replaced with {}
Mutant 1223 in complex.js: -b replaced with +b
Mutant 1224 in complex.js: "-" replaced with ""
Mutant 1225 in complex.js: 1 !== b replaced with true
Mutant 1226 in complex.js: 1 !== b replaced with false
Mutant 1227 in complex.js: 1 !== b replaced with 1 === b
Mutant 1228 in complex.js: {
  // b is the absolute imaginary part
  ret += b;
} replaced with {}
Mutant 1229 in complex.js: ret += b replaced with ret -= b
Mutant 1230 in complex.js: "i" replaced with ""
Mutant 1231 in complex.js: {
  return [this['re'], this['im']];
} replaced with {}
Mutant 1232 in complex.js: [this['re'], this['im']] replaced with []
Mutant 1233 in complex.js: 're' replaced with ""
Mutant 1234 in complex.js: 'im' replaced with ""
Mutant 1235 in complex.js: {
  if (this['im'] === 0) {
    return this['re'];
  }
  return null;
} replaced with {}
Mutant 1236 in complex.js: this['im'] === 0 replaced with true
Mutant 1237 in complex.js: this['im'] === 0 replaced with false
Mutant 1238 in complex.js: this['im'] === 0 replaced with this['im'] !== 0
Mutant 1239 in complex.js: 'im' replaced with ""
Mutant 1240 in complex.js: {
  return this['re'];
} replaced with {}
Mutant 1241 in complex.js: 're' replaced with ""
Mutant 1242 in complex.js: {
  return isNaN(this['re']) || isNaN(this['im']);
} replaced with {}
Mutant 1243 in complex.js: isNaN(this['re']) || isNaN(this['im']) replaced with true
Mutant 1244 in complex.js: isNaN(this['re']) || isNaN(this['im']) replaced with false
Mutant 1245 in complex.js: isNaN(this['re']) || isNaN(this['im']) replaced with isNaN(this['re']) && isNaN(this['im'])
Mutant 1246 in complex.js: 're' replaced with ""
Mutant 1247 in complex.js: 'im' replaced with ""
Mutant 1248 in complex.js: {
  return this['im'] === 0 && this['re'] === 0;
} replaced with {}
Mutant 1249 in complex.js: this['im'] === 0 && this['re'] === 0 replaced with true
Mutant 1250 in complex.js: this['im'] === 0 && this['re'] === 0 replaced with false
Mutant 1251 in complex.js: this['im'] === 0 && this['re'] === 0 replaced with this['im'] === 0 || this['re'] === 0
Mutant 1252 in complex.js: this['im'] === 0 replaced with true
Mutant 1253 in complex.js: this['im'] === 0 replaced with this['im'] !== 0
Mutant 1254 in complex.js: 'im' replaced with ""
Mutant 1255 in complex.js: this['re'] === 0 replaced with true
Mutant 1256 in complex.js: this['re'] === 0 replaced with this['re'] !== 0
Mutant 1257 in complex.js: 're' replaced with ""
Mutant 1258 in complex.js: {
  return isFinite(this['re']) && isFinite(this['im']);
} replaced with {}
Mutant 1259 in complex.js: isFinite(this['re']) && isFinite(this['im']) replaced with true
Mutant 1260 in complex.js: isFinite(this['re']) && isFinite(this['im']) replaced with false
Mutant 1261 in complex.js: isFinite(this['re']) && isFinite(this['im']) replaced with isFinite(this['re']) || isFinite(this['im'])
Mutant 1262 in complex.js: 're' replaced with ""
Mutant 1263 in complex.js: 'im' replaced with ""
Mutant 1264 in complex.js: {
  return !(this['isNaN']() || this['isFinite']());
} replaced with {}
Mutant 1265 in complex.js: !(this['isNaN']() || this['isFinite']()) replaced with this['isNaN']() || this['isFinite']()
Mutant 1266 in complex.js: this['isNaN']() || this['isFinite']() replaced with true
Mutant 1267 in complex.js: this['isNaN']() || this['isFinite']() replaced with false
Mutant 1268 in complex.js: this['isNaN']() || this['isFinite']() replaced with this['isNaN']() && this['isFinite']()
Mutant 1269 in complex.js: 'isNaN' replaced with ""
Mutant 1270 in complex.js: 'isFinite' replaced with ""
Mutant 1271 in complex.js: 'ZERO' replaced with ""
Mutant 1272 in complex.js: 'ONE' replaced with ""
Mutant 1273 in complex.js: 'I' replaced with ""
Mutant 1274 in complex.js: 'PI' replaced with ""
Mutant 1275 in complex.js: 'E' replaced with ""
Mutant 1276 in complex.js: 'INFINITY' replaced with ""
Mutant 1277 in complex.js: 'NAN' replaced with ""
Mutant 1278 in complex.js: 'EPSILON' replaced with ""
Mutant 1279 in complex.js: typeof define === 'function' && define['amd'] replaced with true
Mutant 1280 in complex.js: typeof define === 'function' && define['amd'] replaced with false
Mutant 1281 in complex.js: typeof define === 'function' && define['amd'] replaced with typeof define === 'function' || define['amd']
Mutant 1282 in complex.js: typeof define === 'function' replaced with true
Mutant 1283 in complex.js: typeof define === 'function' replaced with typeof define !== 'function'
Mutant 1284 in complex.js: 'function' replaced with ""
Mutant 1285 in complex.js: 'amd' replaced with ""
Mutant 1286 in complex.js: {
  define([], function () {
    return Complex;
  });
} replaced with {}
Mutant 1287 in complex.js: [] replaced with ["Stryker was here"]
Mutant 1288 in complex.js: {
  return Complex;
} replaced with {}
Mutant 1289 in complex.js: typeof exports === 'object' replaced with true
Mutant 1290 in complex.js: typeof exports === 'object' replaced with false
Mutant 1291 in complex.js: typeof exports === 'object' replaced with typeof exports !== 'object'
Mutant 1292 in complex.js: 'object' replaced with ""
Mutant 1293 in complex.js: {
  Object.defineProperty(Complex, "__esModule", {
    'value': true
  });
  Complex['default'] = Complex;
  Complex['Complex'] = Complex;
  module['exports'] = Complex;
} replaced with {}
Mutant 1294 in complex.js: "__esModule" replaced with ""
Mutant 1295 in complex.js: {
  'value': true
} replaced with {}
Mutant 1296 in complex.js: true replaced with false
Mutant 1297 in complex.js: 'default' replaced with ""
Mutant 1298 in complex.js: 'Complex' replaced with ""
Mutant 1299 in complex.js: 'exports' replaced with ""
Mutant 1300 in complex.js: {
  root['Complex'] = Complex;
} replaced with {}
Mutant 1301 in complex.js: 'Complex' replaced with ""
[32m13:05:49 (2163) INFO Instrumenter[39m Instrumented 1 source file(s) with 1302 mutant(s)
[32m13:05:49 (2163) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m13:05:50 (2163) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m13:05:50 (2163) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m13:05:51 (2163) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 520 ms, overhead 2 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~11m) 19/1302 tested (14 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~10m) 39/1302 tested (21 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~10m) 58/1302 tested (37 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~10m) 78/1302 tested (47 survived, 0 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~10m) 97/1302 tested (56 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~10m) 117/1302 tested (61 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~10m) 136/1302 tested (65 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~9m) 155/1302 tested (67 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~9m) 175/1302 tested (68 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~9m) 194/1302 tested (69 survived, 0 timed out)
Mutation testing 16% (elapsed: ~1m, remaining: ~9m) 214/1302 tested (75 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~9m) 233/1302 tested (79 survived, 0 timed out)
Mutation testing 19% (elapsed: ~2m, remaining: ~8m) 253/1302 tested (81 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~8m) 272/1302 tested (86 survived, 0 timed out)
Mutation testing 22% (elapsed: ~2m, remaining: ~8m) 291/1302 tested (89 survived, 0 timed out)
Mutation testing 23% (elapsed: ~2m, remaining: ~8m) 310/1302 tested (94 survived, 0 timed out)
Mutation testing 25% (elapsed: ~2m, remaining: ~8m) 329/1302 tested (97 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~8m) 349/1302 tested (107 survived, 0 timed out)
Mutation testing 28% (elapsed: ~3m, remaining: ~8m) 367/1302 tested (108 survived, 0 timed out)
Mutation testing 29% (elapsed: ~3m, remaining: ~7m) 386/1302 tested (113 survived, 0 timed out)
Mutation testing 31% (elapsed: ~3m, remaining: ~7m) 406/1302 tested (117 survived, 0 timed out)
Mutation testing 32% (elapsed: ~3m, remaining: ~7m) 425/1302 tested (121 survived, 0 timed out)
Mutation testing 34% (elapsed: ~3m, remaining: ~7m) 444/1302 tested (127 survived, 0 timed out)
Mutation testing 35% (elapsed: ~4m, remaining: ~7m) 464/1302 tested (127 survived, 0 timed out)
Mutation testing 37% (elapsed: ~4m, remaining: ~7m) 483/1302 tested (131 survived, 0 timed out)
Mutation testing 38% (elapsed: ~4m, remaining: ~6m) 502/1302 tested (135 survived, 0 timed out)
Mutation testing 40% (elapsed: ~4m, remaining: ~6m) 522/1302 tested (141 survived, 0 timed out)
Mutation testing 41% (elapsed: ~4m, remaining: ~6m) 541/1302 tested (146 survived, 0 timed out)
Mutation testing 43% (elapsed: ~4m, remaining: ~6m) 560/1302 tested (148 survived, 0 timed out)
Mutation testing 44% (elapsed: ~5m, remaining: ~6m) 579/1302 tested (153 survived, 0 timed out)
Mutation testing 45% (elapsed: ~5m, remaining: ~6m) 597/1302 tested (154 survived, 0 timed out)
Mutation testing 47% (elapsed: ~5m, remaining: ~5m) 616/1302 tested (155 survived, 0 timed out)
Mutation testing 48% (elapsed: ~5m, remaining: ~5m) 634/1302 tested (159 survived, 0 timed out)
Mutation testing 50% (elapsed: ~5m, remaining: ~5m) 652/1302 tested (167 survived, 0 timed out)
Mutation testing 51% (elapsed: ~5m, remaining: ~5m) 671/1302 tested (167 survived, 0 timed out)
Mutation testing 52% (elapsed: ~6m, remaining: ~5m) 689/1302 tested (172 survived, 0 timed out)
Mutation testing 54% (elapsed: ~6m, remaining: ~5m) 707/1302 tested (190 survived, 0 timed out)
Mutation testing 55% (elapsed: ~6m, remaining: ~5m) 726/1302 tested (192 survived, 0 timed out)
Mutation testing 57% (elapsed: ~6m, remaining: ~4m) 744/1302 tested (192 survived, 0 timed out)
Mutation testing 58% (elapsed: ~6m, remaining: ~4m) 762/1302 tested (201 survived, 0 timed out)
Mutation testing 59% (elapsed: ~6m, remaining: ~4m) 780/1302 tested (204 survived, 0 timed out)
Mutation testing 61% (elapsed: ~7m, remaining: ~4m) 798/1302 tested (219 survived, 0 timed out)
Mutation testing 62% (elapsed: ~7m, remaining: ~4m) 817/1302 tested (238 survived, 0 timed out)
Mutation testing 64% (elapsed: ~7m, remaining: ~4m) 837/1302 tested (258 survived, 0 timed out)
Mutation testing 65% (elapsed: ~7m, remaining: ~3m) 856/1302 tested (277 survived, 0 timed out)
Mutation testing 67% (elapsed: ~7m, remaining: ~3m) 875/1302 tested (288 survived, 0 timed out)
Mutation testing 68% (elapsed: ~7m, remaining: ~3m) 894/1302 tested (289 survived, 0 timed out)
Mutation testing 70% (elapsed: ~8m, remaining: ~3m) 913/1302 tested (308 survived, 0 timed out)
Mutation testing 71% (elapsed: ~8m, remaining: ~3m) 932/1302 tested (327 survived, 0 timed out)
Mutation testing 73% (elapsed: ~8m, remaining: ~3m) 951/1302 tested (346 survived, 0 timed out)
Mutation testing 74% (elapsed: ~8m, remaining: ~2m) 970/1302 tested (365 survived, 0 timed out)
Mutation testing 75% (elapsed: ~8m, remaining: ~2m) 989/1302 tested (384 survived, 0 timed out)
Mutation testing 77% (elapsed: ~8m, remaining: ~2m) 1008/1302 tested (403 survived, 0 timed out)
Mutation testing 78% (elapsed: ~9m, remaining: ~2m) 1028/1302 tested (423 survived, 0 timed out)
Mutation testing 80% (elapsed: ~9m, remaining: ~2m) 1047/1302 tested (442 survived, 0 timed out)
Mutation testing 81% (elapsed: ~9m, remaining: ~2m) 1067/1302 tested (462 survived, 0 timed out)
Mutation testing 83% (elapsed: ~9m, remaining: ~1m) 1086/1302 tested (481 survived, 0 timed out)
Mutation testing 84% (elapsed: ~9m, remaining: ~1m) 1106/1302 tested (487 survived, 0 timed out)
Mutation testing 86% (elapsed: ~9m, remaining: ~1m) 1125/1302 tested (492 survived, 0 timed out)
Mutation testing 87% (elapsed: ~10m, remaining: ~1m) 1144/1302 tested (508 survived, 0 timed out)
Mutation testing 89% (elapsed: ~10m, remaining: ~1m) 1163/1302 tested (511 survived, 0 timed out)
Mutation testing 90% (elapsed: ~10m, remaining: ~1m) 1182/1302 tested (514 survived, 0 timed out)
Mutation testing 92% (elapsed: ~10m, remaining: <1m) 1201/1302 tested (516 survived, 0 timed out)
Mutation testing 93% (elapsed: ~10m, remaining: <1m) 1220/1302 tested (517 survived, 0 timed out)
Mutation testing 95% (elapsed: ~10m, remaining: <1m) 1239/1302 tested (523 survived, 0 timed out)
Mutation testing 96% (elapsed: ~11m, remaining: <1m) 1258/1302 tested (524 survived, 0 timed out)
Mutation testing 98% (elapsed: ~11m, remaining: <1m) 1276/1302 tested (525 survived, 0 timed out)
Mutation testing 99% (elapsed: ~11m, remaining: <1m) 1296/1302 tested (534 survived, 0 timed out)

All tests
  âœ“ All tests (killed 763)

[Survived] LogicalOperator
complex.js:40:14
-     var cosh = Math.cosh || function(x) {
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
-     };
+     var cosh = Math.cosh && function (x) {
+     return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+   };

[Survived] BlockStatement
complex.js:40:39
-     var cosh = Math.cosh || function(x) {
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
-     };
+     var cosh = Math.cosh || function(x) {};

[Survived] ConditionalExpression
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return true ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] ConditionalExpression
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return false ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] EqualityOperator
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) <= 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] EqualityOperator
complex.js:41:12
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) >= 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] ArithmeticOperator
complex.js:41:33
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 + x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] ArithmeticOperator
complex.js:41:41
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) / 0.5;

[Survived] ArithmeticOperator
complex.js:41:42
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] UnaryOperator
complex.js:41:65
-       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(+x)) * 0.5;

[Survived] LogicalOperator
complex.js:44:14
-     var sinh = Math.sinh || function(x) {
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
-     };
+     var sinh = Math.sinh && function (x) {
+     return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+   };

[Survived] BlockStatement
complex.js:44:39
-     var sinh = Math.sinh || function(x) {
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
-     };
+     var sinh = Math.sinh || function(x) {};

[Survived] ConditionalExpression
complex.js:45:12
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return true ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] ConditionalExpression
complex.js:45:12
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return false ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] EqualityOperator
complex.js:45:12
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) <= 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] EqualityOperator
complex.js:45:12
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) >= 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;

[Survived] ArithmeticOperator
complex.js:45:37
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) / 0.5;

[Survived] ArithmeticOperator
complex.js:45:38
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) + Math.exp(-x)) * 0.5;

[Survived] UnaryOperator
complex.js:45:61
-       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;
+       return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(+x)) * 0.5;

[Survived] EqualityOperator
complex.js:57:9
-       if (-b > x || x > b) {
+       if (-b >= x || x > b) {

[Survived] EqualityOperator
complex.js:57:19
-       if (-b > x || x > b) {
+       if (-b > x || x >= b) {

[Survived] ArithmeticOperator
complex.js:76:9
-           xx * (
-             xx * (
-               xx * (
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
-                 - 1 / 3628800)
-               + 1 / 40320)
-             - 1 / 720)
-           + 1 / 24)
+           xx * (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720) - 1 / 24)

[Survived] ArithmeticOperator
complex.js:76:9
-           xx * (
-             xx * (
-               xx * (
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
-                 - 1 / 3628800)
-               + 1 / 40320)
-             - 1 / 720)
+           xx / (xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) - 1 / 720)

[Survived] ArithmeticOperator
complex.js:77:11
-             xx * (
-               xx * (
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
-                 - 1 / 3628800)
-               + 1 / 40320)
-             - 1 / 720)
+             xx * (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320) + 1 / 720)

[Survived] ArithmeticOperator
complex.js:77:11
-             xx * (
-               xx * (
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
-                 - 1 / 3628800)
-               + 1 / 40320)
+             xx / (xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) + 1 / 40320)

[Survived] ArithmeticOperator
complex.js:78:13
-               xx * (
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
-                 - 1 / 3628800)
-               + 1 / 40320)
+               xx * (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800) - 1 / 40320)

[Survived] ArithmeticOperator
complex.js:78:13
-               xx * (
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
-                 - 1 / 3628800)
+               xx / (xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) - 1 / 3628800)

[Survived] ArithmeticOperator
complex.js:79:15
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
-                 - 1 / 3628800)
+                 xx * (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600) + 1 / 3628800)

[Survived] ArithmeticOperator
complex.js:79:15
-                 xx * (
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
+                 xx / (xx * (xx / 20922789888000 - 1 / 87178291200) + 1 / 479001600)

[Survived] ArithmeticOperator
complex.js:80:17
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
-                   + 1 / 479001600)
+                   xx * (xx / 20922789888000 - 1 / 87178291200) - 1 / 479001600)

[Survived] ArithmeticOperator
complex.js:80:17
-                   xx * (
-                     xx / 20922789888000
-                     - 1 / 87178291200)
+                   xx / (xx / 20922789888000 - 1 / 87178291200)

[Survived] ArithmeticOperator
complex.js:81:19
-                     xx / 20922789888000
-                     - 1 / 87178291200)
+                     xx / 20922789888000 + 1 / 87178291200)

[Survived] ArithmeticOperator
complex.js:81:19
-                     xx / 20922789888000
+                     xx * 20922789888000

[Survived] ArithmeticOperator
complex.js:82:21
-                     - 1 / 87178291200)
+                     - 1 * 87178291200)

[Survived] ArithmeticOperator
complex.js:83:19
-                   + 1 / 479001600)
+                   + 1 * 479001600)

[Survived] ArithmeticOperator
complex.js:84:17
-                 - 1 / 3628800)
+                 - 1 * 3628800)

[Survived] ArithmeticOperator
complex.js:85:15
-               + 1 / 40320)
+               + 1 * 40320)

[Survived] ArithmeticOperator
complex.js:86:13
-             - 1 / 720)
+             - 1 * 720)

[Survived] ConditionalExpression
complex.js:96:9
-       if (a < 3000 && b < 3000) {
+       if (true) {

[Survived] LogicalOperator
complex.js:96:9
-       if (a < 3000 && b < 3000) {
+       if (a < 3000 || b < 3000) {

[Survived] ConditionalExpression
complex.js:96:9
-       if (a < 3000 && b < 3000) {
+       if (true && b < 3000) {

[Survived] EqualityOperator
complex.js:96:9
-       if (a < 3000 && b < 3000) {
+       if (a <= 3000 && b < 3000) {

[Survived] ConditionalExpression
complex.js:96:21
-       if (a < 3000 && b < 3000) {
+       if (a < 3000 && true) {

[Survived] EqualityOperator
complex.js:96:21
-       if (a < 3000 && b < 3000) {
+       if (a < 3000 && b <= 3000) {

[Survived] ConditionalExpression
complex.js:100:9
-       if (a < b) {
+       if (true) {

[Survived] ConditionalExpression
complex.js:100:9
-       if (a < b) {
+       if (false) {

[Survived] EqualityOperator
complex.js:100:9
-       if (a < b) {
+       if (a <= b) {

[Survived] EqualityOperator
complex.js:100:9
-       if (a < b) {
+       if (a >= b) {

[Survived] BlockStatement
complex.js:100:16
-       if (a < b) {
-         a = b;
-         b = x / y;
-       } else {
+       if (a < b) {} else {

[Survived] ArithmeticOperator
complex.js:102:11
-         b = x / y;
+         b = x * y;

[Survived] BlockStatement
complex.js:103:12
-       } else {
-         b = y / x;
-       }
+       } else {}

[Survived] ArithmeticOperator
complex.js:104:11
-         b = y / x;
+         b = y * x;

[Survived] ArithmeticOperator
complex.js:106:12
-       return a * Math.sqrt(1 + b * b);
+       return a / Math.sqrt(1 + b * b);

[Survived] ArithmeticOperator
complex.js:106:26
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(1 - b * b);

[Survived] ArithmeticOperator
complex.js:106:30
-       return a * Math.sqrt(1 + b * b);
+       return a * Math.sqrt(1 + b / b);

[Survived] BlockStatement
complex.js:109:32
-     var parser_exit = function() {
-       throw SyntaxError('Invalid Param');
-     };
+     var parser_exit = function() {};

[Survived] ConditionalExpression
complex.js:133:9
-       if (_a < 3000 && _b < 3000) {
+       if (true && _b < 3000) {

[Survived] EqualityOperator
complex.js:133:9
-       if (_a < 3000 && _b < 3000) {
+       if (_a <= 3000 && _b < 3000) {

[Survived] EqualityOperator
complex.js:133:22
-       if (_a < 3000 && _b < 3000) {
+       if (_a < 3000 && _b <= 3000) {

[Survived] ArithmeticOperator
complex.js:169:10
-        a = a / 2;
+        a = a * 2;

[Survived] ArithmeticOperator
complex.js:172:27
-       return 0.5 * Math.log(a * a + b * b) + Math.LN2;
+       return 0.5 * Math.log(a / a + b * b) + Math.LN2;

[Survived] ObjectLiteral
complex.js:177:13
-       var z = { 're': 0, 'im': 0 };
+       var z = {};

[Survived] BlockStatement
complex.js:179:40
-       if (a === undefined || a === null) {
-         z['re'] =
-         z['im'] = 0;
-       } else if (b !== undefined) {
+       if (a === undefined || a === null) {} else if (b !== undefined) {

[Survived] StringLiteral
complex.js:180:9
-         z['re'] =
+         z[""] =

[Survived] StringLiteral
complex.js:181:9
-         z['im'] = 0;
+         z[""] = 0;

[Survived] LogicalOperator
complex.js:190:15
-             if ('im' in a && 're' in a) {
+             if ('im' in a || 're' in a) {

[Survived] LogicalOperator
complex.js:193:22
-             } else if ('abs' in a && 'arg' in a) {
+             } else if ('abs' in a || 'arg' in a) {

[Survived] LogicalOperator
complex.js:199:22
-             } else if ('r' in a && 'phi' in a) {
+             } else if ('r' in a || 'phi' in a) {

[Survived] ConditionalExpression
complex.js:205:22
-             } else if (a.length === 2) { // Quick array check
+             } else if (true) { // Quick array check

[Survived] BlockStatement
complex.js:208:18
-             } else {
-               parser_exit();
-             }
+             } else {}

[Survived] StringLiteral
complex.js:215:13
-             z['im'] = /* void */
+             z[""] = /* void */

[Survived] StringLiteral
complex.js:216:13
-             z['re'] = 0;
+             z[""] = 0;

[Survived] Regex
complex.js:218:32
-             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
+             var tokens = a.match(/\d\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);

[Survived] Regex
complex.js:218:32
-             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
+             var tokens = a.match(/\d+\.?\d*e[+-]?\d|\d+\.?\d*|\.\d+|./g);

[Survived] Regex
complex.js:218:32
-             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
+             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d\.?\d*|\.\d+|./g);

[Survived] Regex
complex.js:218:32
-             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
+             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d|./g);

[Survived] Regex
complex.js:218:32
-             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
+             var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\D+|./g);

[Survived] ConditionalExpression
complex.js:222:15
-             if (tokens === null) {
+             if (false) {

[Survived] BlockStatement
complex.js:222:32
-             if (tokens === null) {
-               parser_exit();
-             }
+             if (tokens === null) {}

[Survived] ConditionalExpression
complex.js:230:44
-               if (c === ' ' || c === '\t' || c === '\n') {
+               if (c === ' ' || c === '\t' || false) {

[Survived] StringLiteral
complex.js:230:50
-               if (c === ' ' || c === '\t' || c === '\n') {
+               if (c === ' ' || c === '\t' || c === "") {

[Survived] ConditionalExpression
complex.js:236:37
-               } else if (c === 'i' || c === 'I') {
+               } else if (c === 'i' || false) {

[Survived] StringLiteral
complex.js:236:43
-               } else if (c === 'i' || c === 'I') {
+               } else if (c === 'i' || c === "") {

[Survived] ConditionalExpression
complex.js:238:19
-                 if (plus + minus === 0) {
+                 if (false) {

[Survived] ArithmeticOperator
complex.js:238:19
-                 if (plus + minus === 0) {
+                 if (plus - minus === 0) {

[Survived] BlockStatement
complex.js:238:39
-                 if (plus + minus === 0) {
-                   parser_exit();
-                 }
+                 if (plus + minus === 0) {}

[Survived] ArithmeticOperator
complex.js:243:40
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
+                   z['im'] += parseFloat((minus * 2 ? '-' : '') + tokens[i + 1]);

[Survived] StringLiteral
complex.js:243:58
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
+                   z['im'] += parseFloat((minus % 2 ? '-' : "Stryker was here!") + tokens[i + 1]);

[Survived] ArithmeticOperator
complex.js:246:40
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');
+                   z['im'] += parseFloat((minus * 2 ? '-' : '') + '1');

[Survived] ConditionalExpression
complex.js:252:19
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (false) {

[Survived] LogicalOperator
complex.js:252:19
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (plus + minus === 0 && isNaN(c)) {

[Survived] ConditionalExpression
complex.js:252:19
-                 if (plus + minus === 0 || isNaN(c)) {
+                 if (false || isNaN(c)) {

[Survived] BlockStatement
complex.js:252:51
-                 if (plus + minus === 0 || isNaN(c)) {
-                   parser_exit();
-                 }
+                 if (plus + minus === 0 || isNaN(c)) {}

[Survived] ConditionalExpression
complex.js:256:44
-                 if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
+                 if (tokens[i + 1] === 'i' || false) {

[Survived] ArithmeticOperator
complex.js:256:51
-                 if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
+                 if (tokens[i + 1] === 'i' || tokens[i - 1] === 'I') {

[Survived] StringLiteral
complex.js:256:62
-                 if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
+                 if (tokens[i + 1] === 'i' || tokens[i + 1] === "") {

[Survived] ArithmeticOperator
complex.js:257:40
-                   z['im'] += parseFloat((minus % 2 ? '-' : '') + c);
+                   z['im'] += parseFloat((minus * 2 ? '-' : '') + c);

[Survived] ConditionalExpression
complex.js:267:15
-             if (plus + minus > 0) {
+             if (false) {

[Survived] ArithmeticOperator
complex.js:267:15
-             if (plus + minus > 0) {
+             if (plus - minus > 0) {

[Survived] BlockStatement
complex.js:267:33
-             if (plus + minus > 0) {
-               parser_exit();
-             }
+             if (plus + minus > 0) {}

[Survived] StringLiteral
complex.js:273:13
-             z['im'] = 0;
+             z[""] = 0;

[Survived] ConditionalExpression
complex.js:277:9
-           default:
-             parser_exit();
+           default:

[Survived] ConditionalExpression
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (true) {

[Survived] ConditionalExpression
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (false) {

[Survived] LogicalOperator
complex.js:281:9
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re']) && isNaN(z['im'])) {

[Survived] StringLiteral
complex.js:281:17
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z[""]) || isNaN(z['im'])) {

[Survived] StringLiteral
complex.js:281:35
-       if (isNaN(z['re']) || isNaN(z['im'])) {
+       if (isNaN(z['re']) || isNaN(z[""])) {

[Survived] LogicalOperator
complex.js:334:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] ConditionalExpression
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (false) {

[Survived] LogicalOperator
complex.js:339:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() && z['isInfinite']()) {

[Survived] BlockStatement
complex.js:339:54
-         if (this['isInfinite']() || z['isInfinite']()) {
-           return Complex['INFINITY'];
-         }
+         if (this['isInfinite']() || z['isInfinite']()) {}

[Survived] StringLiteral
complex.js:340:24
-           return Complex['INFINITY'];
+           return Complex[""];

[Survived] LogicalOperator
complex.js:358:11
-         if (this['isInfinite']() && z['isInfinite']()) {
+         if (this['isInfinite']() || z['isInfinite']()) {

[Survived] ConditionalExpression
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (false) {

[Survived] LogicalOperator
complex.js:363:11
-         if (this['isInfinite']() || z['isInfinite']()) {
+         if (this['isInfinite']() && z['isInfinite']()) {

[Survived] BlockStatement
complex.js:363:54
-         if (this['isInfinite']() || z['isInfinite']()) {
-           return Complex['INFINITY'];
-         }
+         if (this['isInfinite']() || z['isInfinite']()) {}

[Survived] StringLiteral
complex.js:364:24
-           return Complex['INFINITY'];
+           return Complex[""];

[Survived] ConditionalExpression
complex.js:382:55
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (false)) {

[Survived] LogicalOperator
complex.js:382:55
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() || z['isInfinite']())) {

[Survived] StringLiteral
complex.js:382:77
-         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z['isInfinite']())) {
+         if ((this['isInfinite']() && z['isZero']()) || (this['isZero']() && z[""]())) {

[Survived] ConditionalExpression
complex.js:392:11
-         if (z['im'] === 0 && this['im'] === 0) {
+         if (false) {

[Survived] StringLiteral
complex.js:392:13
-         if (z['im'] === 0 && this['im'] === 0) {
+         if (z[""] === 0 && this['im'] === 0) {

[Survived] StringLiteral
complex.js:392:33
-         if (z['im'] === 0 && this['im'] === 0) {
+         if (z['im'] === 0 && this[""] === 0) {

[Survived] BlockStatement
complex.js:392:46
-         if (z['im'] === 0 && this['im'] === 0) {
-           return new Complex(this['re'] * z['re'], 0);
-         }
+         if (z['im'] === 0 && this['im'] === 0) {}

[Survived] ArithmeticOperator
complex.js:393:28
-           return new Complex(this['re'] * z['re'], 0);
+           return new Complex(this['re'] / z['re'], 0);

[Survived] StringLiteral
complex.js:393:33
-           return new Complex(this['re'] * z['re'], 0);
+           return new Complex(this[""] * z['re'], 0);

[Survived] StringLiteral
complex.js:393:43
-           return new Complex(this['re'] * z['re'], 0);
+           return new Complex(this['re'] * z[""], 0);

[Survived] LogicalOperator
complex.js:416:11
-         if (this['isInfinite']() || z['isZero']()) {
+         if (this['isInfinite']() && z['isZero']()) {

[Survived] ConditionalExpression
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (false) {

[Survived] LogicalOperator
complex.js:421:11
-         if (this['isZero']() || z['isInfinite']()) {
+         if (this['isZero']() && z['isInfinite']()) {

[Survived] BlockStatement
complex.js:421:50
-         if (this['isZero']() || z['isInfinite']()) {
-           return Complex['ZERO'];
-         }
+         if (this['isZero']() || z['isInfinite']()) {}

[Survived] ConditionalExpression
complex.js:432:11
-         if (0 === d) {
+         if (false) {

[Survived] BlockStatement
complex.js:432:20
-         if (0 === d) {
-           // Divisor is real
-           return new Complex(a / c, b / c);
-         }
+         if (0 === d) {}

[Survived] ConditionalExpression
complex.js:437:11
-         if (Math.abs(c) < Math.abs(d)) {
+         if (true) {

[Survived] EqualityOperator
complex.js:437:11
-         if (Math.abs(c) < Math.abs(d)) {
+         if (Math.abs(c) <= Math.abs(d)) {

[Survived] ArithmeticOperator
complex.js:448:13
-           x = d / c;
+           x = d * c;

[Survived] ArithmeticOperator
complex.js:449:13
-           t = d * x + c;
+           t = d / x + c;

[Survived] ArithmeticOperator
complex.js:452:16
-             (a + b * x) / t,
+             (a + b / x) / t,

[Survived] ArithmeticOperator
complex.js:453:16
-             (b - a * x) / t);
+             (b - a / x) / t);

[Survived] ConditionalExpression
complex.js:469:11
-         if (z['isZero']()) {
+         if (false) {

[Survived] BlockStatement
complex.js:469:26
-         if (z['isZero']()) {
-           return Complex['ONE'];
-         }
+         if (z['isZero']()) {}

[Survived] EqualityOperator
complex.js:476:24
-           if (b === 0 && a > 0) {
+           if (b === 0 && a >= 0) {

[Survived] ConditionalExpression
complex.js:480:20
-           } else if (a === 0) { // If base is fully imaginary
+           } else if (false) { // If base is fully imaginary

[Survived] BlockStatement
complex.js:480:29
-           } else if (a === 0) { // If base is fully imaginary
-             switch ((z['re'] % 4 + 4) % 4) {
-               case 0:
-                 return new Complex(Math.pow(b, z['re']), 0);
-               case 1:
-                 return new Complex(0, Math.pow(b, z['re']));
-               case 2:
-                 return new Complex(-Math.pow(b, z['re']), 0);
-               case 3:
-                 return new Complex(0, -Math.pow(b, z['re']));
-             }
-           }
+           } else if (a === 0) {}

[Survived] ArithmeticOperator
complex.js:482:19
-             switch ((z['re'] % 4 + 4) % 4) {
+             switch ((z['re'] % 4 + 4) * 4) {

[Survived] ArithmeticOperator
complex.js:482:20
-             switch ((z['re'] % 4 + 4) % 4) {
+             switch ((z['re'] % 4 - 4) % 4) {

[Survived] StringLiteral
complex.js:482:22
-             switch ((z['re'] % 4 + 4) % 4) {
+             switch ((z[""] % 4 + 4) % 4) {

[Survived] ConditionalExpression
complex.js:489:13
-               case 3:
-                 return new Complex(0, -Math.pow(b, z['re']));
+               case 3:

[Survived] ConditionalExpression
complex.js:514:22
-         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
+         if (a === 0 && true && z['re'] > 0 && z['im'] >= 0) {

[Survived] ConditionalExpression
complex.js:514:33
-         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
+         if (a === 0 && b === 0 && true && z['im'] >= 0) {

[Survived] EqualityOperator
complex.js:514:33
-         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
+         if (a === 0 && b === 0 && z['re'] >= 0 && z['im'] >= 0) {

[Survived] ConditionalExpression
complex.js:514:48
-         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
+         if (a === 0 && b === 0 && z['re'] > 0 && true) {

[Survived] EqualityOperator
complex.js:514:48
-         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] >= 0) {
+         if (a === 0 && b === 0 && z['re'] > 0 && z['im'] > 0) {

[Survived] ConditionalExpression
complex.js:543:13
-           if (b === 0) {
+           if (false) {

[Survived] BlockStatement
complex.js:543:22
-           if (b === 0) {
-             return new Complex(Math.sqrt(a), 0);
-           }
+           if (b === 0) {}

[Survived] ConditionalExpression
complex.js:570:11
-         if (this['im'] === 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:570:11
-         if (this['im'] === 0) {
+         if (false) {

[Survived] EqualityOperator
complex.js:570:11
-         if (this['im'] === 0) {
+         if (this['im'] !== 0) {

[Survived] StringLiteral
complex.js:570:16
-         if (this['im'] === 0) {
+         if (this[""] === 0) {

[Survived] ConditionalExpression
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (false) {

[Survived] LogicalOperator
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (b === 0 || a > 0) {

[Survived] ConditionalExpression
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (true && a > 0) {

[Survived] EqualityOperator
complex.js:612:11
-         if (b === 0 && a > 0) {
+         if (b !== 0 && a > 0) {

[Survived] ConditionalExpression
complex.js:612:22
-         if (b === 0 && a > 0) {
+         if (b === 0 && true) {

[Survived] EqualityOperator
complex.js:612:22
-         if (b === 0 && a > 0) {
+         if (b === 0 && a >= 0) {

[Survived] EqualityOperator
complex.js:612:22
-         if (b === 0 && a > 0) {
+         if (b === 0 && a <= 0) {

[Survived] BlockStatement
complex.js:721:23
-       'sec': function() {
-         // sec(c) = 2 / (e^(ci) + e^(-ci))
-         var a = this['re'];
-         var b = this['im'];
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
-         return new Complex(
-           Math.cos(a) * cosh(b) / d,
-           Math.sin(a) * sinh(b) / d);
-       },
+       'sec': function() {},

[Survived] StringLiteral
complex.js:725:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:726:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ArithmeticOperator
complex.js:727:15
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:727:15
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 / cosh(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:727:26
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 / b) + 0.5 * Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:727:35
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 / Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:727:50
-         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 / a);

[Survived] ArithmeticOperator
complex.js:730:9
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) * cosh(b) * d,

[Survived] ArithmeticOperator
complex.js:730:9
-           Math.cos(a) * cosh(b) / d,
+           Math.cos(a) / cosh(b) / d,

[Survived] ArithmeticOperator
complex.js:731:9
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) * sinh(b) * d);

[Survived] ArithmeticOperator
complex.js:731:9
-           Math.sin(a) * sinh(b) / d);
+           Math.sin(a) / sinh(b) / d);

[Survived] BlockStatement
complex.js:739:23
-       'csc': function() {
-         // csc(c) = 2i / (e^(ci) - e^(-ci))
-         var a = this['re'];
-         var b = this['im'];
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
-         return new Complex(
-           Math.sin(a) * cosh(b) / d,
-           -Math.cos(a) * sinh(b) / d);
-       },
+       'csc': function() {},

[Survived] StringLiteral
complex.js:743:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:744:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ArithmeticOperator
complex.js:745:15
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:745:15
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 / cosh(2 * b) - 0.5 * Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:745:26
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 / b) - 0.5 * Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:745:35
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 / Math.cos(2 * a);

[Survived] ArithmeticOperator
complex.js:745:50
-         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);
+         var d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 / a);

[Survived] ArithmeticOperator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) * cosh(b) * d,

[Survived] ArithmeticOperator
complex.js:748:9
-           Math.sin(a) * cosh(b) / d,
+           Math.sin(a) / cosh(b) / d,

[Survived] ArithmeticOperator
complex.js:749:9
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) * sinh(b) * d);

[Survived] ArithmeticOperator
complex.js:749:9
-           -Math.cos(a) * sinh(b) / d);
+           -Math.cos(a) / sinh(b) / d);

[Survived] UnaryOperator
complex.js:749:9
-           -Math.cos(a) * sinh(b) / d);
+           +Math.cos(a) * sinh(b) / d);

[Survived] ConditionalExpression
complex.js:810:11
-         if (a === 0) {
+         if (false) {

[Survived] BlockStatement
complex.js:810:20
-         if (a === 0) {
-           if (b === 1) {
-             return new Complex(0, Infinity);
-           }
-           if (b === -1) {
-             return new Complex(0, -Infinity);
-           }
-         }
+         if (a === 0) {}

[Survived] ConditionalExpression
complex.js:812:13
-           if (b === 1) {
+           if (true) {

[Survived] ConditionalExpression
complex.js:812:13
-           if (b === 1) {
+           if (false) {

[Survived] EqualityOperator
complex.js:812:13
-           if (b === 1) {
+           if (b !== 1) {

[Survived] BlockStatement
complex.js:812:22
-           if (b === 1) {
-             return new Complex(0, Infinity);
-           }
+           if (b === 1) {}

[Survived] ConditionalExpression
complex.js:816:13
-           if (b === -1) {
+           if (true) {

[Survived] ConditionalExpression
complex.js:816:13
-           if (b === -1) {
+           if (false) {

[Survived] EqualityOperator
complex.js:816:13
-           if (b === -1) {
+           if (b !== -1) {

[Survived] UnaryOperator
complex.js:816:19
-           if (b === -1) {
+           if (b === +1) {

[Survived] BlockStatement
complex.js:816:23
-           if (b === -1) {
-             return new Complex(0, -Infinity);
-           }
+           if (b === -1) {}

[Survived] UnaryOperator
complex.js:817:33
-             return new Complex(0, -Infinity);
+             return new Complex(0, +Infinity);

[Survived] BlockStatement
complex.js:835:24
-       'acot': function() {
-         // acot(c) = i / 2 log((c - i) / (c + i))
-         var a = this['re'];
-         var b = this['im'];
-         if (b === 0) {
-           return new Complex(Math.atan2(1, a), 0);
-         }
-         var d = a * a + b * b;
-         return (d !== 0)
-           ? new Complex(
-             a / d,
-             -b / d).atan()
-           : new Complex(
-             (a !== 0) ? a / 0 : 0,
-             (b !== 0) ? -b / 0 : 0).atan();
-       },
+       'acot': function() {},

[Survived] StringLiteral
complex.js:839:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:840:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ConditionalExpression
complex.js:842:11
-         if (b === 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:842:11
-         if (b === 0) {
+         if (false) {

[Survived] EqualityOperator
complex.js:842:11
-         if (b === 0) {
+         if (b !== 0) {

[Survived] BlockStatement
complex.js:842:20
-         if (b === 0) {
-           return new Complex(Math.atan2(1, a), 0);
-         }
+         if (b === 0) {}

[Survived] ArithmeticOperator
complex.js:846:15
-         var d = a * a + b * b;
+         var d = a * a - b * b;

[Survived] ArithmeticOperator
complex.js:846:15
-         var d = a * a + b * b;
+         var d = a / a + b * b;

[Survived] ArithmeticOperator
complex.js:846:23
-         var d = a * a + b * b;
+         var d = a * a + b / b;

[Survived] ConditionalExpression
complex.js:847:15
-         return (d !== 0)
+         return (true)

[Survived] ConditionalExpression
complex.js:847:15
-         return (d !== 0)
+         return (false)

[Survived] EqualityOperator
complex.js:847:15
-         return (d !== 0)
+         return (d === 0)

[Survived] ArithmeticOperator
complex.js:849:11
-             a / d,
+             a * d,

[Survived] ArithmeticOperator
complex.js:850:11
-             -b / d).atan()
+             -b * d).atan()

[Survived] UnaryOperator
complex.js:850:11
-             -b / d).atan()
+             +b / d).atan()

[Survived] ConditionalExpression
complex.js:852:12
-             (a !== 0) ? a / 0 : 0,
+             (true) ? a / 0 : 0,

[Survived] ConditionalExpression
complex.js:852:12
-             (a !== 0) ? a / 0 : 0,
+             (false) ? a / 0 : 0,

[Survived] EqualityOperator
complex.js:852:12
-             (a !== 0) ? a / 0 : 0,
+             (a === 0) ? a / 0 : 0,

[Survived] ArithmeticOperator
complex.js:852:23
-             (a !== 0) ? a / 0 : 0,
+             (a !== 0) ? a * 0 : 0,

[Survived] ConditionalExpression
complex.js:853:12
-             (b !== 0) ? -b / 0 : 0).atan();
+             (true) ? -b / 0 : 0).atan();

[Survived] ConditionalExpression
complex.js:853:12
-             (b !== 0) ? -b / 0 : 0).atan();
+             (false) ? -b / 0 : 0).atan();

[Survived] EqualityOperator
complex.js:853:12
-             (b !== 0) ? -b / 0 : 0).atan();
+             (b === 0) ? -b / 0 : 0).atan();

[Survived] ArithmeticOperator
complex.js:853:23
-             (b !== 0) ? -b / 0 : 0).atan();
+             (b !== 0) ? -b * 0 : 0).atan();

[Survived] UnaryOperator
complex.js:853:23
-             (b !== 0) ? -b / 0 : 0).atan();
+             (b !== 0) ? +b / 0 : 0).atan();

[Survived] BlockStatement
complex.js:861:24
-       'asec': function() {
-         // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))
-         var a = this['re'];
-         var b = this['im'];
-         if (a === 0 && b === 0) {
-           return new Complex(0, Infinity);
-         }
-         var d = a * a + b * b;
-         return (d !== 0)
-           ? new Complex(
-             a / d,
-             -b / d).acos()
-           : new Complex(
-             (a !== 0) ? a / 0 : 0,
-             (b !== 0) ? -b / 0 : 0).acos();
-       },
+       'asec': function() {},

[Survived] StringLiteral
complex.js:865:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:866:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ConditionalExpression
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (false) {

[Survived] LogicalOperator
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] ConditionalExpression
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (true && b === 0) {

[Survived] EqualityOperator
complex.js:868:11
-         if (a === 0 && b === 0) {
+         if (a !== 0 && b === 0) {

[Survived] ConditionalExpression
complex.js:868:22
-         if (a === 0 && b === 0) {
+         if (a === 0 && true) {

[Survived] EqualityOperator
complex.js:868:22
-         if (a === 0 && b === 0) {
+         if (a === 0 && b !== 0) {

[Survived] BlockStatement
complex.js:868:31
-         if (a === 0 && b === 0) {
-           return new Complex(0, Infinity);
-         }
+         if (a === 0 && b === 0) {}

[Survived] ArithmeticOperator
complex.js:872:15
-         var d = a * a + b * b;
+         var d = a * a - b * b;

[Survived] ArithmeticOperator
complex.js:872:15
-         var d = a * a + b * b;
+         var d = a / a + b * b;

[Survived] ArithmeticOperator
complex.js:872:23
-         var d = a * a + b * b;
+         var d = a * a + b / b;

[Survived] ConditionalExpression
complex.js:873:15
-         return (d !== 0)
+         return (true)

[Survived] ConditionalExpression
complex.js:873:15
-         return (d !== 0)
+         return (false)

[Survived] EqualityOperator
complex.js:873:15
-         return (d !== 0)
+         return (d === 0)

[Survived] ArithmeticOperator
complex.js:875:11
-             a / d,
+             a * d,

[Survived] ArithmeticOperator
complex.js:876:11
-             -b / d).acos()
+             -b * d).acos()

[Survived] UnaryOperator
complex.js:876:11
-             -b / d).acos()
+             +b / d).acos()

[Survived] ConditionalExpression
complex.js:878:12
-             (a !== 0) ? a / 0 : 0,
+             (true) ? a / 0 : 0,

[Survived] ConditionalExpression
complex.js:878:12
-             (a !== 0) ? a / 0 : 0,
+             (false) ? a / 0 : 0,

[Survived] EqualityOperator
complex.js:878:12
-             (a !== 0) ? a / 0 : 0,
+             (a === 0) ? a / 0 : 0,

[Survived] ArithmeticOperator
complex.js:878:23
-             (a !== 0) ? a / 0 : 0,
+             (a !== 0) ? a * 0 : 0,

[Survived] ConditionalExpression
complex.js:879:12
-             (b !== 0) ? -b / 0 : 0).acos();
+             (true) ? -b / 0 : 0).acos();

[Survived] ConditionalExpression
complex.js:879:12
-             (b !== 0) ? -b / 0 : 0).acos();
+             (false) ? -b / 0 : 0).acos();

[Survived] EqualityOperator
complex.js:879:12
-             (b !== 0) ? -b / 0 : 0).acos();
+             (b === 0) ? -b / 0 : 0).acos();

[Survived] ArithmeticOperator
complex.js:879:23
-             (b !== 0) ? -b / 0 : 0).acos();
+             (b !== 0) ? -b * 0 : 0).acos();

[Survived] UnaryOperator
complex.js:879:23
-             (b !== 0) ? -b / 0 : 0).acos();
+             (b !== 0) ? +b / 0 : 0).acos();

[Survived] BlockStatement
complex.js:887:24
-       'acsc': function() {
-         // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))
-         var a = this['re'];
-         var b = this['im'];
-         if (a === 0 && b === 0) {
-           return new Complex(Math.PI / 2, Infinity);
-         }
-         var d = a * a + b * b;
-         return (d !== 0)
-           ? new Complex(
-             a / d,
-             -b / d).asin()
-           : new Complex(
-             (a !== 0) ? a / 0 : 0,
-             (b !== 0) ? -b / 0 : 0).asin();
-       },
+       'acsc': function() {},

[Survived] StringLiteral
complex.js:891:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:892:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ConditionalExpression
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (false) {

[Survived] LogicalOperator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] ConditionalExpression
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (true && b === 0) {

[Survived] EqualityOperator
complex.js:894:11
-         if (a === 0 && b === 0) {
+         if (a !== 0 && b === 0) {

[Survived] ConditionalExpression
complex.js:894:22
-         if (a === 0 && b === 0) {
+         if (a === 0 && true) {

[Survived] EqualityOperator
complex.js:894:22
-         if (a === 0 && b === 0) {
+         if (a === 0 && b !== 0) {

[Survived] BlockStatement
complex.js:894:31
-         if (a === 0 && b === 0) {
-           return new Complex(Math.PI / 2, Infinity);
-         }
+         if (a === 0 && b === 0) {}

[Survived] ArithmeticOperator
complex.js:895:28
-           return new Complex(Math.PI / 2, Infinity);
+           return new Complex(Math.PI * 2, Infinity);

[Survived] ArithmeticOperator
complex.js:898:15
-         var d = a * a + b * b;
+         var d = a * a - b * b;

[Survived] ArithmeticOperator
complex.js:898:15
-         var d = a * a + b * b;
+         var d = a / a + b * b;

[Survived] ArithmeticOperator
complex.js:898:23
-         var d = a * a + b * b;
+         var d = a * a + b / b;

[Survived] ConditionalExpression
complex.js:899:15
-         return (d !== 0)
+         return (true)

[Survived] ConditionalExpression
complex.js:899:15
-         return (d !== 0)
+         return (false)

[Survived] EqualityOperator
complex.js:899:15
-         return (d !== 0)
+         return (d === 0)

[Survived] ArithmeticOperator
complex.js:901:11
-             a / d,
+             a * d,

[Survived] ArithmeticOperator
complex.js:902:11
-             -b / d).asin()
+             -b * d).asin()

[Survived] UnaryOperator
complex.js:902:11
-             -b / d).asin()
+             +b / d).asin()

[Survived] ConditionalExpression
complex.js:904:12
-             (a !== 0) ? a / 0 : 0,
+             (true) ? a / 0 : 0,

[Survived] ConditionalExpression
complex.js:904:12
-             (a !== 0) ? a / 0 : 0,
+             (false) ? a / 0 : 0,

[Survived] EqualityOperator
complex.js:904:12
-             (a !== 0) ? a / 0 : 0,
+             (a === 0) ? a / 0 : 0,

[Survived] ArithmeticOperator
complex.js:904:23
-             (a !== 0) ? a / 0 : 0,
+             (a !== 0) ? a * 0 : 0,

[Survived] ConditionalExpression
complex.js:905:12
-             (b !== 0) ? -b / 0 : 0).asin();
+             (true) ? -b / 0 : 0).asin();

[Survived] ConditionalExpression
complex.js:905:12
-             (b !== 0) ? -b / 0 : 0).asin();
+             (false) ? -b / 0 : 0).asin();

[Survived] EqualityOperator
complex.js:905:12
-             (b !== 0) ? -b / 0 : 0).asin();
+             (b === 0) ? -b / 0 : 0).asin();

[Survived] ArithmeticOperator
complex.js:905:23
-             (b !== 0) ? -b / 0 : 0).asin();
+             (b !== 0) ? -b * 0 : 0).asin();

[Survived] UnaryOperator
complex.js:905:23
-             (b !== 0) ? -b / 0 : 0).asin();
+             (b !== 0) ? +b / 0 : 0).asin();

[Survived] ArithmeticOperator
complex.js:951:15
-         var a = 2 * this['re'];
+         var a = 2 / this['re'];

[Survived] BlockStatement
complex.js:983:24
-       'csch': function() {
-         // csch(c) = 2 / (e^c - e^-c)
-         var a = this['re'];
-         var b = this['im'];
-         var d = Math.cos(2 * b) - cosh(2 * a);
-         return new Complex(
-           -2 * sinh(a) * Math.cos(b) / d,
-           2 * cosh(a) * Math.sin(b) / d);
-       },
+       'csch': function() {},

[Survived] StringLiteral
complex.js:987:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:988:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ArithmeticOperator
complex.js:989:15
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(2 * a);

[Survived] ArithmeticOperator
complex.js:989:24
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 / b) - cosh(2 * a);

[Survived] ArithmeticOperator
complex.js:989:38
-         var d = Math.cos(2 * b) - cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(2 / a);

[Survived] ArithmeticOperator
complex.js:992:9
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) * Math.cos(b) * d,

[Survived] ArithmeticOperator
complex.js:992:9
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 * sinh(a) / Math.cos(b) / d,

[Survived] ArithmeticOperator
complex.js:992:9
-           -2 * sinh(a) * Math.cos(b) / d,
+           -2 / sinh(a) * Math.cos(b) / d,

[Survived] UnaryOperator
complex.js:992:9
-           -2 * sinh(a) * Math.cos(b) / d,
+           +2 * sinh(a) * Math.cos(b) / d,

[Survived] ArithmeticOperator
complex.js:993:9
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) * Math.sin(b) * d);

[Survived] ArithmeticOperator
complex.js:993:9
-           2 * cosh(a) * Math.sin(b) / d);
+           2 * cosh(a) / Math.sin(b) / d);

[Survived] ArithmeticOperator
complex.js:993:9
-           2 * cosh(a) * Math.sin(b) / d);
+           2 / cosh(a) * Math.sin(b) / d);

[Survived] BlockStatement
complex.js:1001:24
-       'sech': function() {
-         // sech(c) = 2 / (e^c + e^-c)
-         var a = this['re'];
-         var b = this['im'];
-         var d = Math.cos(2 * b) + cosh(2 * a);
-         return new Complex(
-           2 * cosh(a) * Math.cos(b) / d,
-           -2 * sinh(a) * Math.sin(b) / d);
-       },
+       'sech': function() {},

[Survived] StringLiteral
complex.js:1005:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:1006:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ArithmeticOperator
complex.js:1007:15
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) - cosh(2 * a);

[Survived] ArithmeticOperator
complex.js:1007:24
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 / b) + cosh(2 * a);

[Survived] ArithmeticOperator
complex.js:1007:38
-         var d = Math.cos(2 * b) + cosh(2 * a);
+         var d = Math.cos(2 * b) + cosh(2 / a);

[Survived] ArithmeticOperator
complex.js:1010:9
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) * Math.cos(b) * d,

[Survived] ArithmeticOperator
complex.js:1010:9
-           2 * cosh(a) * Math.cos(b) / d,
+           2 * cosh(a) / Math.cos(b) / d,

[Survived] ArithmeticOperator
complex.js:1010:9
-           2 * cosh(a) * Math.cos(b) / d,
+           2 / cosh(a) * Math.cos(b) / d,

[Survived] ArithmeticOperator
complex.js:1011:9
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) * Math.sin(b) * d);

[Survived] ArithmeticOperator
complex.js:1011:9
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 * sinh(a) / Math.sin(b) / d);

[Survived] ArithmeticOperator
complex.js:1011:9
-           -2 * sinh(a) * Math.sin(b) / d);
+           -2 / sinh(a) * Math.sin(b) / d);

[Survived] UnaryOperator
complex.js:1011:9
-           -2 * sinh(a) * Math.sin(b) / d);
+           +2 * sinh(a) * Math.sin(b) / d);

[Survived] BlockStatement
complex.js:1019:25
-       'asinh': function() {
-         // asinh(c) = log(c + sqrt(c^2 + 1))
-         var tmp = this['im'];
-         this['im'] = -this['re'];
-         this['re'] = tmp;
-         var res = this['asin']();
-         this['re'] = -this['im'];
-         this['im'] = tmp;
-         tmp = res['re'];
-         res['re'] = -res['im'];
-         res['im'] = tmp;
-         return res;
-       },
+       'asinh': function() {},

[Survived] StringLiteral
complex.js:1023:22
-         var tmp = this['im'];
+         var tmp = this[""];

[Survived] StringLiteral
complex.js:1024:12
-         this['im'] = -this['re'];
+         this[""] = -this['re'];

[Survived] UnaryOperator
complex.js:1024:20
-         this['im'] = -this['re'];
+         this['im'] = +this['re'];

[Survived] StringLiteral
complex.js:1024:26
-         this['im'] = -this['re'];
+         this['im'] = -this[""];

[Survived] StringLiteral
complex.js:1025:12
-         this['re'] = tmp;
+         this[""] = tmp;

[Survived] StringLiteral
complex.js:1026:22
-         var res = this['asin']();
+         var res = this[""]();

[Survived] StringLiteral
complex.js:1028:12
-         this['re'] = -this['im'];
+         this[""] = -this['im'];

[Survived] UnaryOperator
complex.js:1028:20
-         this['re'] = -this['im'];
+         this['re'] = +this['im'];

[Survived] StringLiteral
complex.js:1028:26
-         this['re'] = -this['im'];
+         this['re'] = -this[""];

[Survived] StringLiteral
complex.js:1029:12
-         this['im'] = tmp;
+         this[""] = tmp;

[Survived] StringLiteral
complex.js:1030:17
-         tmp = res['re'];
+         tmp = res[""];

[Survived] StringLiteral
complex.js:1032:11
-         res['re'] = -res['im'];
+         res[""] = -res['im'];

[Survived] UnaryOperator
complex.js:1032:19
-         res['re'] = -res['im'];
+         res['re'] = +res['im'];

[Survived] StringLiteral
complex.js:1032:24
-         res['re'] = -res['im'];
+         res['re'] = -res[""];

[Survived] StringLiteral
complex.js:1033:11
-         res['im'] = tmp;
+         res[""] = tmp;

[Survived] BlockStatement
complex.js:1042:25
-       'acosh': function() {
-         // acosh(c) = log(c + sqrt(c^2 - 1))
-         var res = this['acos']();
-         if (res['im'] <= 0) {
-           var tmp = res['re'];
-           res['re'] = -res['im'];
-           res['im'] = tmp;
-         } else {
-           var tmp = res['im'];
-           res['im'] = -res['re'];
-           res['re'] = tmp;
-         }
-         return res;
-       },
+       'acosh': function() {},

[Survived] StringLiteral
complex.js:1046:22
-         var res = this['acos']();
+         var res = this[""]();

[Survived] ConditionalExpression
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (false) {

[Survived] EqualityOperator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (res['im'] < 0) {

[Survived] EqualityOperator
complex.js:1047:11
-         if (res['im'] <= 0) {
+         if (res['im'] > 0) {

[Survived] StringLiteral
complex.js:1047:15
-         if (res['im'] <= 0) {
+         if (res[""] <= 0) {

[Survived] BlockStatement
complex.js:1047:27
-         if (res['im'] <= 0) {
-           var tmp = res['re'];
-           res['re'] = -res['im'];
-           res['im'] = tmp;
-         } else {
+         if (res['im'] <= 0) {} else {

[Survived] StringLiteral
complex.js:1048:23
-           var tmp = res['re'];
+           var tmp = res[""];

[Survived] StringLiteral
complex.js:1049:13
-           res['re'] = -res['im'];
+           res[""] = -res['im'];

[Survived] UnaryOperator
complex.js:1049:21
-           res['re'] = -res['im'];
+           res['re'] = +res['im'];

[Survived] StringLiteral
complex.js:1049:26
-           res['re'] = -res['im'];
+           res['re'] = -res[""];

[Survived] StringLiteral
complex.js:1050:13
-           res['im'] = tmp;
+           res[""] = tmp;

[Survived] BlockStatement
complex.js:1051:14
-         } else {
-           var tmp = res['im'];
-           res['im'] = -res['re'];
-           res['re'] = tmp;
-         }
+         } else {}

[Survived] StringLiteral
complex.js:1052:23
-           var tmp = res['im'];
+           var tmp = res[""];

[Survived] StringLiteral
complex.js:1053:13
-           res['im'] = -res['re'];
+           res[""] = -res['re'];

[Survived] UnaryOperator
complex.js:1053:21
-           res['im'] = -res['re'];
+           res['im'] = +res['re'];

[Survived] StringLiteral
complex.js:1053:26
-           res['im'] = -res['re'];
+           res['im'] = -res[""];

[Survived] StringLiteral
complex.js:1054:13
-           res['re'] = tmp;
+           res[""] = tmp;

[Survived] BlockStatement
complex.js:1064:25
-       'atanh': function() {
-         // atanh(c) = log((1+c) / (1-c)) / 2
-         var a = this['re'];
-         var b = this['im'];
-         var noIM = a > 1 && b === 0;
-         var oneMinus = 1 - a;
-         var onePlus = 1 + a;
-         var d = oneMinus * oneMinus + b * b;
-         var x = (d !== 0)
-           ? new Complex(
-             (onePlus * oneMinus - b * b) / d,
-             (b * oneMinus + onePlus * b) / d)
-           : new Complex(
-             (a !== -1) ? (a / 0) : 0,
-             (b !== 0) ? (b / 0) : 0);
-         var temp = x['re'];
-         x['re'] = logHypot(x['re'], x['im']) / 2;
-         x['im'] = Math.atan2(x['im'], temp) / 2;
-         if (noIM) {
-           x['im'] = -x['im'];
-         }
-         return x;
-       },
+       'atanh': function() {},

[Survived] StringLiteral
complex.js:1068:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:1069:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ConditionalExpression
complex.js:1071:18
-         var noIM = a > 1 && b === 0;
+         var noIM = true;

[Survived] ConditionalExpression
complex.js:1071:18
-         var noIM = a > 1 && b === 0;
+         var noIM = false;

[Survived] LogicalOperator
complex.js:1071:18
-         var noIM = a > 1 && b === 0;
+         var noIM = a > 1 || b === 0;

[Survived] ConditionalExpression
complex.js:1071:18
-         var noIM = a > 1 && b === 0;
+         var noIM = true && b === 0;

[Survived] EqualityOperator
complex.js:1071:18
-         var noIM = a > 1 && b === 0;
+         var noIM = a >= 1 && b === 0;

[Survived] EqualityOperator
complex.js:1071:18
-         var noIM = a > 1 && b === 0;
+         var noIM = a <= 1 && b === 0;

[Survived] ConditionalExpression
complex.js:1071:27
-         var noIM = a > 1 && b === 0;
+         var noIM = a > 1 && true;

[Survived] EqualityOperator
complex.js:1071:27
-         var noIM = a > 1 && b === 0;
+         var noIM = a > 1 && b !== 0;

[Survived] ArithmeticOperator
complex.js:1072:22
-         var oneMinus = 1 - a;
+         var oneMinus = 1 + a;

[Survived] ArithmeticOperator
complex.js:1073:21
-         var onePlus = 1 + a;
+         var onePlus = 1 - a;

[Survived] ArithmeticOperator
complex.js:1074:15
-         var d = oneMinus * oneMinus + b * b;
+         var d = oneMinus * oneMinus - b * b;

[Survived] ArithmeticOperator
complex.js:1074:15
-         var d = oneMinus * oneMinus + b * b;
+         var d = oneMinus / oneMinus + b * b;

[Survived] ArithmeticOperator
complex.js:1074:37
-         var d = oneMinus * oneMinus + b * b;
+         var d = oneMinus * oneMinus + b / b;

[Survived] ConditionalExpression
complex.js:1076:16
-         var x = (d !== 0)
+         var x = (true)

[Survived] ConditionalExpression
complex.js:1076:16
-         var x = (d !== 0)
+         var x = (false)

[Survived] EqualityOperator
complex.js:1076:16
-         var x = (d !== 0)
+         var x = (d === 0)

[Survived] ArithmeticOperator
complex.js:1078:11
-             (onePlus * oneMinus - b * b) / d,
+             (onePlus * oneMinus - b * b) * d,

[Survived] ArithmeticOperator
complex.js:1078:12
-             (onePlus * oneMinus - b * b) / d,
+             (onePlus * oneMinus + b * b) / d,

[Survived] ArithmeticOperator
complex.js:1078:12
-             (onePlus * oneMinus - b * b) / d,
+             (onePlus / oneMinus - b * b) / d,

[Survived] ArithmeticOperator
complex.js:1078:33
-             (onePlus * oneMinus - b * b) / d,
+             (onePlus * oneMinus - b / b) / d,

[Survived] ArithmeticOperator
complex.js:1079:11
-             (b * oneMinus + onePlus * b) / d)
+             (b * oneMinus + onePlus * b) * d)

[Survived] ArithmeticOperator
complex.js:1079:12
-             (b * oneMinus + onePlus * b) / d)
+             (b * oneMinus - onePlus * b) / d)

[Survived] ArithmeticOperator
complex.js:1079:12
-             (b * oneMinus + onePlus * b) / d)
+             (b / oneMinus + onePlus * b) / d)

[Survived] ArithmeticOperator
complex.js:1079:27
-             (b * oneMinus + onePlus * b) / d)
+             (b * oneMinus + onePlus / b) / d)

[Survived] ConditionalExpression
complex.js:1081:12
-             (a !== -1) ? (a / 0) : 0,
+             (true) ? (a / 0) : 0,

[Survived] ConditionalExpression
complex.js:1081:12
-             (a !== -1) ? (a / 0) : 0,
+             (false) ? (a / 0) : 0,

[Survived] EqualityOperator
complex.js:1081:12
-             (a !== -1) ? (a / 0) : 0,
+             (a === -1) ? (a / 0) : 0,

[Survived] UnaryOperator
complex.js:1081:18
-             (a !== -1) ? (a / 0) : 0,
+             (a !== +1) ? (a / 0) : 0,

[Survived] ArithmeticOperator
complex.js:1081:25
-             (a !== -1) ? (a / 0) : 0,
+             (a !== -1) ? (a * 0) : 0,

[Survived] ConditionalExpression
complex.js:1082:12
-             (b !== 0) ? (b / 0) : 0);
+             (true) ? (b / 0) : 0);

[Survived] ConditionalExpression
complex.js:1082:12
-             (b !== 0) ? (b / 0) : 0);
+             (false) ? (b / 0) : 0);

[Survived] EqualityOperator
complex.js:1082:12
-             (b !== 0) ? (b / 0) : 0);
+             (b === 0) ? (b / 0) : 0);

[Survived] ArithmeticOperator
complex.js:1082:24
-             (b !== 0) ? (b / 0) : 0);
+             (b !== 0) ? (b * 0) : 0);

[Survived] StringLiteral
complex.js:1084:20
-         var temp = x['re'];
+         var temp = x[""];

[Survived] StringLiteral
complex.js:1085:9
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x[""] = logHypot(x['re'], x['im']) / 2;

[Survived] ArithmeticOperator
complex.js:1085:17
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], x['im']) * 2;

[Survived] StringLiteral
complex.js:1085:28
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x[""], x['im']) / 2;

[Survived] StringLiteral
complex.js:1085:37
-         x['re'] = logHypot(x['re'], x['im']) / 2;
+         x['re'] = logHypot(x['re'], x[""]) / 2;

[Survived] StringLiteral
complex.js:1086:9
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x[""] = Math.atan2(x['im'], temp) / 2;

[Survived] ArithmeticOperator
complex.js:1086:17
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x['im'], temp) * 2;

[Survived] StringLiteral
complex.js:1086:30
-         x['im'] = Math.atan2(x['im'], temp) / 2;
+         x['im'] = Math.atan2(x[""], temp) / 2;

[Survived] ConditionalExpression
complex.js:1087:11
-         if (noIM) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:1087:11
-         if (noIM) {
+         if (false) {

[Survived] BlockStatement
complex.js:1087:17
-         if (noIM) {
-           x['im'] = -x['im'];
-         }
+         if (noIM) {}

[Survived] StringLiteral
complex.js:1088:11
-           x['im'] = -x['im'];
+           x[""] = -x['im'];

[Survived] UnaryOperator
complex.js:1088:19
-           x['im'] = -x['im'];
+           x['im'] = +x['im'];

[Survived] StringLiteral
complex.js:1088:22
-           x['im'] = -x['im'];
+           x['im'] = -x[""];

[Survived] BlockStatement
complex.js:1098:25
-       'acoth': function() {
-         // acoth(c) = log((c+1) / (c-1)) / 2
-         var a = this['re'];
-         var b = this['im'];
-         if (a === 0 && b === 0) {
-           return new Complex(0, Math.PI / 2);
-         }
-         var d = a * a + b * b;
-         return (d !== 0)
-           ? new Complex(
-             a / d,
-             -b / d).atanh()
-           : new Complex(
-             (a !== 0) ? a / 0 : 0,
-             (b !== 0) ? -b / 0 : 0).atanh();
-       },
+       'acoth': function() {},

[Survived] StringLiteral
complex.js:1102:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:1103:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ConditionalExpression
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (false) {

[Survived] LogicalOperator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a === 0 || b === 0) {

[Survived] ConditionalExpression
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (true && b === 0) {

[Survived] EqualityOperator
complex.js:1105:11
-         if (a === 0 && b === 0) {
+         if (a !== 0 && b === 0) {

[Survived] ConditionalExpression
complex.js:1105:22
-         if (a === 0 && b === 0) {
+         if (a === 0 && true) {

[Survived] EqualityOperator
complex.js:1105:22
-         if (a === 0 && b === 0) {
+         if (a === 0 && b !== 0) {

[Survived] BlockStatement
complex.js:1105:31
-         if (a === 0 && b === 0) {
-           return new Complex(0, Math.PI / 2);
-         }
+         if (a === 0 && b === 0) {}

[Survived] ArithmeticOperator
complex.js:1106:31
-           return new Complex(0, Math.PI / 2);
+           return new Complex(0, Math.PI * 2);

[Survived] ArithmeticOperator
complex.js:1109:15
-         var d = a * a + b * b;
+         var d = a * a - b * b;

[Survived] ArithmeticOperator
complex.js:1109:15
-         var d = a * a + b * b;
+         var d = a / a + b * b;

[Survived] ArithmeticOperator
complex.js:1109:23
-         var d = a * a + b * b;
+         var d = a * a + b / b;

[Survived] ConditionalExpression
complex.js:1110:15
-         return (d !== 0)
+         return (true)

[Survived] ConditionalExpression
complex.js:1110:15
-         return (d !== 0)
+         return (false)

[Survived] EqualityOperator
complex.js:1110:15
-         return (d !== 0)
+         return (d === 0)

[Survived] ArithmeticOperator
complex.js:1112:11
-             a / d,
+             a * d,

[Survived] ArithmeticOperator
complex.js:1113:11
-             -b / d).atanh()
+             -b * d).atanh()

[Survived] UnaryOperator
complex.js:1113:11
-             -b / d).atanh()
+             +b / d).atanh()

[Survived] ConditionalExpression
complex.js:1115:12
-             (a !== 0) ? a / 0 : 0,
+             (true) ? a / 0 : 0,

[Survived] ConditionalExpression
complex.js:1115:12
-             (a !== 0) ? a / 0 : 0,
+             (false) ? a / 0 : 0,

[Survived] EqualityOperator
complex.js:1115:12
-             (a !== 0) ? a / 0 : 0,
+             (a === 0) ? a / 0 : 0,

[Survived] ArithmeticOperator
complex.js:1115:23
-             (a !== 0) ? a / 0 : 0,
+             (a !== 0) ? a * 0 : 0,

[Survived] ConditionalExpression
complex.js:1116:12
-             (b !== 0) ? -b / 0 : 0).atanh();
+             (true) ? -b / 0 : 0).atanh();

[Survived] ConditionalExpression
complex.js:1116:12
-             (b !== 0) ? -b / 0 : 0).atanh();
+             (false) ? -b / 0 : 0).atanh();

[Survived] EqualityOperator
complex.js:1116:12
-             (b !== 0) ? -b / 0 : 0).atanh();
+             (b === 0) ? -b / 0 : 0).atanh();

[Survived] ArithmeticOperator
complex.js:1116:23
-             (b !== 0) ? -b / 0 : 0).atanh();
+             (b !== 0) ? -b * 0 : 0).atanh();

[Survived] UnaryOperator
complex.js:1116:23
-             (b !== 0) ? -b / 0 : 0).atanh();
+             (b !== 0) ? +b / 0 : 0).atanh();

[Survived] BlockStatement
complex.js:1124:25
-       'acsch': function() {
-         // acsch(c) = log((1+sqrt(1+c^2))/c)
-         var a = this['re'];
-         var b = this['im'];
-         if (b === 0) {
-           return new Complex(
-             (a !== 0)
-               ? Math.log(a + Math.sqrt(a * a + 1))
-               : Infinity, 0);
-         }
-         var d = a * a + b * b;
-         return (d !== 0)
-           ? new Complex(
-             a / d,
-             -b / d).asinh()
-           : new Complex(
-             (a !== 0) ? a / 0 : 0,
-             (b !== 0) ? -b / 0 : 0).asinh();
-       },
+       'acsch': function() {},

[Survived] StringLiteral
complex.js:1128:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:1129:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ConditionalExpression
complex.js:1131:11
-         if (b === 0) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:1131:11
-         if (b === 0) {
+         if (false) {

[Survived] EqualityOperator
complex.js:1131:11
-         if (b === 0) {
+         if (b !== 0) {

[Survived] BlockStatement
complex.js:1131:20
-         if (b === 0) {
-           return new Complex(
-             (a !== 0)
-               ? Math.log(a + Math.sqrt(a * a + 1))
-               : Infinity, 0);
-         }
+         if (b === 0) {}

[Survived] ConditionalExpression
complex.js:1134:12
-             (a !== 0)
+             (true)

[Survived] ConditionalExpression
complex.js:1134:12
-             (a !== 0)
+             (false)

[Survived] EqualityOperator
complex.js:1134:12
-             (a !== 0)
+             (a === 0)

[Survived] ArithmeticOperator
complex.js:1135:24
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a - Math.sqrt(a * a + 1))

[Survived] ArithmeticOperator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(a * a - 1))

[Survived] ArithmeticOperator
complex.js:1135:38
-               ? Math.log(a + Math.sqrt(a * a + 1))
+               ? Math.log(a + Math.sqrt(a / a + 1))

[Survived] ArithmeticOperator
complex.js:1139:15
-         var d = a * a + b * b;
+         var d = a * a - b * b;

[Survived] ArithmeticOperator
complex.js:1139:15
-         var d = a * a + b * b;
+         var d = a / a + b * b;

[Survived] ArithmeticOperator
complex.js:1139:23
-         var d = a * a + b * b;
+         var d = a * a + b / b;

[Survived] ConditionalExpression
complex.js:1140:15
-         return (d !== 0)
+         return (true)

[Survived] ConditionalExpression
complex.js:1140:15
-         return (d !== 0)
+         return (false)

[Survived] EqualityOperator
complex.js:1140:15
-         return (d !== 0)
+         return (d === 0)

[Survived] ArithmeticOperator
complex.js:1142:11
-             a / d,
+             a * d,

[Survived] ArithmeticOperator
complex.js:1143:11
-             -b / d).asinh()
+             -b * d).asinh()

[Survived] UnaryOperator
complex.js:1143:11
-             -b / d).asinh()
+             +b / d).asinh()

[Survived] ConditionalExpression
complex.js:1145:12
-             (a !== 0) ? a / 0 : 0,
+             (true) ? a / 0 : 0,

[Survived] ConditionalExpression
complex.js:1145:12
-             (a !== 0) ? a / 0 : 0,
+             (false) ? a / 0 : 0,

[Survived] EqualityOperator
complex.js:1145:12
-             (a !== 0) ? a / 0 : 0,
+             (a === 0) ? a / 0 : 0,

[Survived] ArithmeticOperator
complex.js:1145:23
-             (a !== 0) ? a / 0 : 0,
+             (a !== 0) ? a * 0 : 0,

[Survived] ConditionalExpression
complex.js:1146:12
-             (b !== 0) ? -b / 0 : 0).asinh();
+             (true) ? -b / 0 : 0).asinh();

[Survived] ConditionalExpression
complex.js:1146:12
-             (b !== 0) ? -b / 0 : 0).asinh();
+             (false) ? -b / 0 : 0).asinh();

[Survived] EqualityOperator
complex.js:1146:12
-             (b !== 0) ? -b / 0 : 0).asinh();
+             (b === 0) ? -b / 0 : 0).asinh();

[Survived] ArithmeticOperator
complex.js:1146:23
-             (b !== 0) ? -b / 0 : 0).asinh();
+             (b !== 0) ? -b * 0 : 0).asinh();

[Survived] UnaryOperator
complex.js:1146:23
-             (b !== 0) ? -b / 0 : 0).asinh();
+             (b !== 0) ? +b / 0 : 0).asinh();

[Survived] BlockStatement
complex.js:1154:25
-       'asech': function() {
-         // asech(c) = log((1+sqrt(1-c^2))/c)
-         var a = this['re'];
-         var b = this['im'];
-         if (this['isZero']()) {
-           return Complex['INFINITY'];
-         }
-         var d = a * a + b * b;
-         return (d !== 0)
-           ? new Complex(
-             a / d,
-             -b / d).acosh()
-           : new Complex(
-             (a !== 0) ? a / 0 : 0,
-             (b !== 0) ? -b / 0 : 0).acosh();
-       },
+       'asech': function() {},

[Survived] StringLiteral
complex.js:1158:20
-         var a = this['re'];
+         var a = this[""];

[Survived] StringLiteral
complex.js:1159:20
-         var b = this['im'];
+         var b = this[""];

[Survived] ConditionalExpression
complex.js:1161:11
-         if (this['isZero']()) {
+         if (true) {

[Survived] ConditionalExpression
complex.js:1161:11
-         if (this['isZero']()) {
+         if (false) {

[Survived] StringLiteral
complex.js:1161:16
-         if (this['isZero']()) {
+         if (this[""]()) {

[Survived] BlockStatement
complex.js:1161:29
-         if (this['isZero']()) {
-           return Complex['INFINITY'];
-         }
+         if (this['isZero']()) {}

[Survived] StringLiteral
complex.js:1162:24
-           return Complex['INFINITY'];
+           return Complex[""];

[Survived] ArithmeticOperator
complex.js:1165:15
-         var d = a * a + b * b;
+         var d = a * a - b * b;

[Survived] ArithmeticOperator
complex.js:1165:15
-         var d = a * a + b * b;
+         var d = a / a + b * b;

[Survived] ArithmeticOperator
complex.js:1165:23
-         var d = a * a + b * b;
+         var d = a * a + b / b;

[Survived] ConditionalExpression
complex.js:1166:15
-         return (d !== 0)
+         return (true)

[Survived] ConditionalExpression
complex.js:1166:15
-         return (d !== 0)
+         return (false)

[Survived] EqualityOperator
complex.js:1166:15
-         return (d !== 0)
+         return (d === 0)

[Survived] ArithmeticOperator
complex.js:1168:11
-             a / d,
+             a * d,

[Survived] ArithmeticOperator
complex.js:1169:11
-             -b / d).acosh()
+             -b * d).acosh()

[Survived] UnaryOperator
complex.js:1169:11
-             -b / d).acosh()
+             +b / d).acosh()

[Survived] ConditionalExpression
complex.js:1171:12
-             (a !== 0) ? a / 0 : 0,
+             (true) ? a / 0 : 0,

[Survived] ConditionalExpression
complex.js:1171:12
-             (a !== 0) ? a / 0 : 0,
+             (false) ? a / 0 : 0,

[Survived] EqualityOperator
complex.js:1171:12
-             (a !== 0) ? a / 0 : 0,
+             (a === 0) ? a / 0 : 0,

[Survived] ArithmeticOperator
complex.js:1171:23
-             (a !== 0) ? a / 0 : 0,
+             (a !== 0) ? a * 0 : 0,

[Survived] ConditionalExpression
complex.js:1172:12
-             (b !== 0) ? -b / 0 : 0).acosh();
+             (true) ? -b / 0 : 0).acosh();

[Survived] ConditionalExpression
complex.js:1172:12
-             (b !== 0) ? -b / 0 : 0).acosh();
+             (false) ? -b / 0 : 0).acosh();

[Survived] EqualityOperator
complex.js:1172:12
-             (b !== 0) ? -b / 0 : 0).acosh();
+             (b === 0) ? -b / 0 : 0).acosh();

[Survived] ArithmeticOperator
complex.js:1172:23
-             (b !== 0) ? -b / 0 : 0).acosh();
+             (b !== 0) ? -b * 0 : 0).acosh();

[Survived] UnaryOperator
complex.js:1172:23
-             (b !== 0) ? -b / 0 : 0).acosh();
+             (b !== 0) ? +b / 0 : 0).acosh();

[Survived] BlockStatement
complex.js:1224:30
-       'ceil': function(places) {
-         places = Math.pow(10, places || 0);
-         return new Complex(
-           Math.ceil(this['re'] * places) / places,
-           Math.ceil(this['im'] * places) / places);
-       },
+       'ceil': function(places) {},

[Survived] ConditionalExpression
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, true);

[Survived] ConditionalExpression
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, false);

[Survived] LogicalOperator
complex.js:1226:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places && 0);

[Survived] ArithmeticOperator
complex.js:1229:9
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(this['re'] * places) * places,

[Survived] ArithmeticOperator
complex.js:1229:19
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(this['re'] / places) / places,

[Survived] StringLiteral
complex.js:1229:24
-           Math.ceil(this['re'] * places) / places,
+           Math.ceil(this[""] * places) / places,

[Survived] ArithmeticOperator
complex.js:1230:9
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(this['im'] * places) * places);

[Survived] ArithmeticOperator
complex.js:1230:19
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(this['im'] / places) / places);

[Survived] StringLiteral
complex.js:1230:24
-           Math.ceil(this['im'] * places) / places);
+           Math.ceil(this[""] * places) / places);

[Survived] BlockStatement
complex.js:1238:31
-       'floor': function(places) {
-         places = Math.pow(10, places || 0);
-         return new Complex(
-           Math.floor(this['re'] * places) / places,
-           Math.floor(this['im'] * places) / places);
-       },
+       'floor': function(places) {},

[Survived] ConditionalExpression
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, true);

[Survived] ConditionalExpression
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, false);

[Survived] LogicalOperator
complex.js:1240:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, places && 0);

[Survived] ArithmeticOperator
complex.js:1243:9
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this['re'] * places) * places,

[Survived] ArithmeticOperator
complex.js:1243:20
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this['re'] / places) / places,

[Survived] StringLiteral
complex.js:1243:25
-           Math.floor(this['re'] * places) / places,
+           Math.floor(this[""] * places) / places,

[Survived] ArithmeticOperator
complex.js:1244:9
-           Math.floor(this['im'] * places) / places);
+           Math.floor(this['im'] * places) * places);

[Survived] ArithmeticOperator
complex.js:1244:20
-           Math.floor(this['im'] * places) / places);
+           Math.floor(this['im'] / places) / places);

[Survived] StringLiteral
complex.js:1244:25
-           Math.floor(this['im'] * places) / places);
+           Math.floor(this[""] * places) / places);

[Survived] ConditionalExpression
complex.js:1254:29
-         places = Math.pow(10, places || 0);
+         places = Math.pow(10, true);

[Survived] ConditionalExpression
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return true &&

[Survived] EqualityOperator
complex.js:1272:14
-         return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&
+         return Math.abs(z['re'] - this['re']) < Complex['EPSILON'] &&

[Survived] EqualityOperator
complex.js:1273:9
-           Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];
+           Math.abs(z['im'] - this['im']) < Complex['EPSILON'];

[Survived] BlockStatement
complex.js:1281:25
-       'clone': function() {
-         return new Complex(this['re'], this['im']);
-       },
+       'clone': function() {},

[Survived] StringLiteral
complex.js:1283:31
-         return new Complex(this['re'], this['im']);
+         return new Complex(this[""], this['im']);

[Survived] StringLiteral
complex.js:1283:43
-         return new Complex(this['re'], this['im']);
+         return new Complex(this['re'], this[""]);

[Survived] EqualityOperator
complex.js:1305:11
-         if (Math.abs(a) < Complex['EPSILON']) {
+         if (Math.abs(a) <= Complex['EPSILON']) {

[Survived] EqualityOperator
complex.js:1309:11
-         if (Math.abs(b) < Complex['EPSILON']) {
+         if (Math.abs(b) <= Complex['EPSILON']) {

[Survived] EqualityOperator
complex.js:1321:13
-           if (b < 0) {
+           if (b <= 0) {

[Survived] EqualityOperator
complex.js:1328:18
-         } else if (b < 0) {
+         } else if (b <= 0) {

[Survived] BlockStatement
complex.js:1344:28
-       'toVector': function() {
-         return [this['re'], this['im']];
-       },
+       'toVector': function() {},

[Survived] ArrayDeclaration
complex.js:1346:14
-         return [this['re'], this['im']];
+         return [];

[Survived] StringLiteral
complex.js:1346:20
-         return [this['re'], this['im']];
+         return [this[""], this['im']];

[Survived] StringLiteral
complex.js:1346:32
-         return [this['re'], this['im']];
+         return [this['re'], this[""]];

[Survived] ConditionalExpression
complex.js:1356:11
-         if (this['im'] === 0) {
+         if (true) {

[Survived] LogicalOperator
complex.js:1368:14
-         return isNaN(this['re']) || isNaN(this['im']);
+         return isNaN(this['re']) && isNaN(this['im']);

[Survived] StringLiteral
complex.js:1405:11
-     Complex['PI'] = new Complex(Math.PI, 0);
+     Complex[""] = new Complex(Math.PI, 0);

[Survived] ConditionalExpression
complex.js:1411:7
-     if (typeof define === 'function' && define['amd']) {
+     if (false) {

[Survived] StringLiteral
complex.js:1411:25
-     if (typeof define === 'function' && define['amd']) {
+     if (typeof define === "" && define['amd']) {

[Survived] StringLiteral
complex.js:1411:46
-     if (typeof define === 'function' && define['amd']) {
+     if (typeof define === 'function' && define[""]) {

[Survived] BlockStatement
complex.js:1411:54
-     if (typeof define === 'function' && define['amd']) {
-       define([], function() {
-         return Complex;
-       });
-     } else if (typeof exports === 'object') {
+     if (typeof define === 'function' && define['amd']) {} else if (typeof exports === 'object') {

[Survived] ArrayDeclaration
complex.js:1412:12
-       define([], function() {
+       define(["Stryker was here"], function() {

[Survived] BlockStatement
complex.js:1412:27
-       define([], function() {
-         return Complex;
-       });
+       define([], function() {});

[Survived] ConditionalExpression
complex.js:1415:14
-     } else if (typeof exports === 'object') {
+     } else if (true) {

[Survived] StringLiteral
complex.js:1416:36
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "", { 'value': true });

[Survived] ObjectLiteral
complex.js:1416:50
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", {});

[Survived] BooleanLiteral
complex.js:1416:61
-       Object.defineProperty(Complex, "__esModule", { 'value': true });
+       Object.defineProperty(Complex, "__esModule", { 'value': false });

[Survived] StringLiteral
complex.js:1417:13
-       Complex['default'] = Complex;
+       Complex[""] = Complex;

[Survived] StringLiteral
complex.js:1418:13
-       Complex['Complex'] = Complex;
+       Complex[""] = Complex;

[Survived] BlockStatement
complex.js:1420:10
-     } else {
-       root['Complex'] = Complex;
-     }
+     } else {}

[Survived] StringLiteral
complex.js:1421:10
-       root['Complex'] = Complex;
+       root[""] = Complex;

Ran 1.00 tests per mutant on average.
------------|---------|----------|-----------|------------|----------|----------|
File        | % score | # killed | # timeout | # survived | # no cov | # errors |
------------|---------|----------|-----------|------------|----------|----------|
All files   |   58.60 |      763 |         0 |        539 |        0 |        0 |
 complex.js |   58.60 |      763 |         0 |        539 |        0 |        0 |
------------|---------|----------|-----------|------------|----------|----------|
[32m13:17:14 (2163) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/Complex.js/reports/mutation/mutation.html
[32m13:17:14 (2163) INFO MutationTestExecutor[39m Done in 11 minutes 25 seconds.

real	11m27.010s
user	11m40.841s
sys	2m4.037s
