*** using precomputed mutations ***
[32m16:10:18 (2638) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m16:10:18 (2638) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m16:10:18 (2638) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m16:10:18 (2638) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m16:10:18 (2638) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m16:10:18 (2638) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 258 mutants from MUTATION_TESTING/template-noexplanation_codellama-34b-instruct_0.0/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with val == null
Mutant 1 in dirty.js: val === undefined replaced with val !== undefined
Mutant 2 in dirty.js: val === undefined replaced with typeof val === 'undefined'
Mutant 3 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val + 1)
Mutant 4 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val * 2)
Mutant 5 in dirty.js: this._data.set(key, val) replaced with this._data.set(key, val.toUpperCase())
Mutant 6 in dirty.js: key replaced with key + 1
Mutant 7 in dirty.js: key replaced with key - 1
Mutant 8 in dirty.js: key replaced with key * 2
Mutant 9 in dirty.js: val replaced with undefined
Mutant 10 in dirty.js: val replaced with null
Mutant 11 in dirty.js: val replaced with 0
Mutant 12 in dirty.js: this.path replaced with this.path.toUpperCase()
Mutant 13 in dirty.js: this.path replaced with this.path.length
Mutant 14 in dirty.js: this.path replaced with this.path.split('/').pop()
Mutant 15 in dirty.js: key replaced with key + 1
Mutant 16 in dirty.js: key replaced with key.toUpperCase()
Mutant 17 in dirty.js: key replaced with key.split('').reverse().join('')
Mutant 18 in dirty.js: cb replaced with null
Mutant 19 in dirty.js: cb replaced with undefined
Mutant 20 in dirty.js: cb replaced with () => {}
Mutant 21 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, cbs.slice())
Mutant 22 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, cbs.concat())
Mutant 23 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, cbs.map(cb => cb))
Mutant 24 in dirty.js: key replaced with key + 1
Mutant 25 in dirty.js: key replaced with key * 2
Mutant 26 in dirty.js: key replaced with key.toUpperCase()
Mutant 27 in dirty.js: cbs replaced with cbs.slice()
Mutant 28 in dirty.js: cbs replaced with cbs.concat()
Mutant 29 in dirty.js: cbs replaced with cbs.map(cb => cb)
Mutant 30 in dirty.js: cb replaced with !cb
Mutant 31 in dirty.js: cb replaced with cb && false
Mutant 32 in dirty.js: cb replaced with cb || true
Mutant 33 in dirty.js: 'drain' replaced with 'error'
Mutant 34 in dirty.js: 'drain' replaced with 'close'
Mutant 35 in dirty.js: this._data.get replaced with this._data.set
Mutant 36 in dirty.js: this._data.get replaced with this._data.clear
Mutant 37 in dirty.js: key replaced with this._data.get(key)
Mutant 38 in dirty.js: key replaced with this._data.get(key + 1)
Mutant 39 in dirty.js: key replaced with this._data.get(key - 1)
Mutant 40 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 41 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, 'undefined', cb)
Mutant 42 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, undefined, null)
Mutant 43 in dirty.js: key replaced with key + 1
Mutant 44 in dirty.js: key replaced with key - 1
Mutant 45 in dirty.js: key replaced with key * 2
Mutant 46 in dirty.js: undefined replaced with null
Mutant 47 in dirty.js: undefined replaced with NaN
Mutant 48 in dirty.js: cb replaced with cb()
Mutant 49 in dirty.js: this._data replaced with this._queue
Mutant 50 in dirty.js: this._data replaced with this._data.values()
Mutant 51 in dirty.js: this._data replaced with this._data.entries()
Mutant 52 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== false
Mutant 53 in dirty.js: fn(key, val) === false replaced with fn(key, val) === true
Mutant 54 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== true
Mutant 55 in dirty.js: fn(key, val) replaced with fn(key, this._data.get(key))
Mutant 56 in dirty.js: key replaced with key + 1
Mutant 57 in dirty.js: key replaced with key - 1
Mutant 58 in dirty.js: key replaced with key + Math.random()
Mutant 59 in dirty.js: val replaced with undefined
Mutant 60 in dirty.js: val replaced with null
Mutant 61 in dirty.js: val replaced with 0
Mutant 62 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) + 1), cb)
Mutant 63 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) - 1), cb)
Mutant 64 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key) * 2), cb)
Mutant 65 in dirty.js: key replaced with undefined
Mutant 66 in dirty.js: key replaced with null
Mutant 67 in dirty.js: key replaced with ''
Mutant 68 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key)) + 1
Mutant 69 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key)) - 1
Mutant 70 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key)) * 2
Mutant 71 in dirty.js: updater replaced with updater + 1
Mutant 72 in dirty.js: updater replaced with updater - 1
Mutant 73 in dirty.js: updater replaced with updater * 2
Mutant 74 in dirty.js: this.get replaced with this.rm
Mutant 75 in dirty.js: this.get replaced with this.forEach
Mutant 76 in dirty.js: key replaced with undefined
Mutant 77 in dirty.js: key replaced with null
Mutant 78 in dirty.js: cb replaced with undefined
Mutant 79 in dirty.js: cb replaced with null
Mutant 80 in dirty.js: cb replaced with () => {}
Mutant 81 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites > 0
Mutant 82 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size || this._inFlightWrites < 0
Mutant 83 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size && this._inFlightWrites === 0
Mutant 84 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this.close(true))
Mutant 85 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('drain', () => this.close(false))
Mutant 86 in dirty.js: 'drain' replaced with 'error'
Mutant 87 in dirty.js: 'drain' replaced with 'close'
Mutant 88 in dirty.js: 'drain' replaced with 'finish'
Mutant 89 in dirty.js: () => this.close() replaced with () => this.close(true)
Mutant 90 in dirty.js: () => this.close() replaced with () => this.close(false)
Mutant 91 in dirty.js: this._readStream replaced with this._writeStream
Mutant 92 in dirty.js: this._readStream replaced with this._readStream.destroy()
Mutant 93 in dirty.js: this._readStream replaced with this._writeStream.end()
Mutant 94 in dirty.js: this._writeStream.end replaced with this._writeStream.destroy
Mutant 95 in dirty.js: this._writeStream.end replaced with this._writeStream.close
Mutant 96 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end()
Mutant 97 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.destroy(new Error('Intentional error'))
Mutant 98 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.write('')
Mutant 99 in dirty.js: !this.path replaced with this.path === undefined
Mutant 100 in dirty.js: !this.path replaced with this.path.length === 0
Mutant 101 in dirty.js: !this.path replaced with !this.path.trim()
Mutant 102 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 103 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 104 in dirty.js: this.emit('load', 0) replaced with this.emit('load', null)
Mutant 105 in dirty.js: 'load' replaced with 'error'
Mutant 106 in dirty.js: 'load' replaced with 'drain'
Mutant 107 in dirty.js: 'load' replaced with 'close'
Mutant 108 in dirty.js: 0 replaced with 1
Mutant 109 in dirty.js: 0 replaced with -1
Mutant 110 in dirty.js: 0 replaced with null
Mutant 111 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOENT' || err.code === 'ENOFILE'
Mutant 112 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOENT' && err.code === 'ENOFILE'
Mutant 113 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOENT' || err.code === 'ENOFILE' || err.code === 'ENODIR'
Mutant 114 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 115 in dirty.js: this.emit('load', 0) replaced with this.emit('load', -1)
Mutant 116 in dirty.js: this.emit('load', 0) replaced with this.emit('load', null)
Mutant 117 in dirty.js: 'load' replaced with 'error'
Mutant 118 in dirty.js: 'load' replaced with 'drain'
Mutant 119 in dirty.js: 'load' replaced with 'close'
Mutant 120 in dirty.js: 0 replaced with 1
Mutant 121 in dirty.js: 0 replaced with -1
Mutant 122 in dirty.js: 0 replaced with null
Mutant 123 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error(err))
Mutant 124 in dirty.js: this.emit('error', err) replaced with this.emit('error', err.message)
Mutant 125 in dirty.js: this.emit('error', err) replaced with this.emit('error', err.stack)
Mutant 126 in dirty.js: 'error' replaced with 'warning'
Mutant 127 in dirty.js: 'error' replaced with 'info'
Mutant 128 in dirty.js: err replaced with err.message
Mutant 129 in dirty.js: err replaced with new Error(err)
Mutant 130 in dirty.js: err replaced with err.stack
Mutant 131 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') > -1
Mutant 132 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') === 0
Mutant 133 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') === chunk.length - 1
Mutant 134 in dirty.js: chunk.lastIndexOf replaced with chunk.indexOf
Mutant 135 in dirty.js: chunk.lastIndexOf replaced with chunk.includes
Mutant 136 in dirty.js: chunk.lastIndexOf replaced with chunk.match
Mutant 137 in dirty.js: '\n' replaced with '\r'
Mutant 138 in dirty.js: '\n' replaced with '\t'
Mutant 139 in dirty.js: '\n' replaced with ''
Mutant 140 in dirty.js: '\n' replaced with '\t'
Mutant 141 in dirty.js: '\n' replaced with ''
Mutant 142 in dirty.js: '\n' replaced with ' '
Mutant 143 in dirty.js: arr.pop replaced with arr.shift
Mutant 144 in dirty.js: !rowStr replaced with rowStr.length === 0
Mutant 145 in dirty.js: !rowStr replaced with rowStr === ''
Mutant 146 in dirty.js: !rowStr replaced with rowStr.trim() === ''
Mutant 147 in dirty.js: 'error' replaced with 'warn'
Mutant 148 in dirty.js: 'error' replaced with 'info'
Mutant 149 in dirty.js: 'error' replaced with 'debug'
Mutant 150 in dirty.js: JSON.parse replaced with JSON.stringify
Mutant 151 in dirty.js: rowStr replaced with rowStr.toUpperCase()
Mutant 152 in dirty.js: rowStr replaced with rowStr.split('')
Mutant 153 in dirty.js: rowStr replaced with rowStr.replace('key', 'value')
Mutant 154 in dirty.js: !('key' in row) replaced with row.key === undefined
Mutant 155 in dirty.js: !('key' in row) replaced with !Object.prototype.hasOwnProperty.call(row, 'key')
Mutant 156 in dirty.js: !('key' in row) replaced with row.hasOwnProperty('key') === false
Mutant 157 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Corrupted row: ${rowStr}`))
Mutant 158 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Invalid row: ${rowStr}`))
Mutant 159 in dirty.js: 'error' replaced with 'warning'
Mutant 160 in dirty.js: 'error' replaced with 'info'
Mutant 161 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Corrupted row: ${rowStr}`)
Mutant 162 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Invalid row: ${rowStr}`)
Mutant 163 in dirty.js: row.val === undefined replaced with row.val == null
Mutant 164 in dirty.js: row.val === undefined replaced with row.val === null
Mutant 165 in dirty.js: row.val === undefined replaced with row.val !== undefined
Mutant 166 in dirty.js: row.key replaced with row.val
Mutant 167 in dirty.js: row.key replaced with row.key + 1
Mutant 168 in dirty.js: row.key replaced with row.key.toUpperCase()
Mutant 169 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.val, row.key)
Mutant 170 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.val + 1)
Mutant 171 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.val * 2)
Mutant 172 in dirty.js: this._data.set replaced with this._data.clear
Mutant 173 in dirty.js: row.key replaced with row.val
Mutant 174 in dirty.js: row.key replaced with row.key + 1
Mutant 175 in dirty.js: row.key replaced with row.key - 1
Mutant 176 in dirty.js: row.val replaced with row.key
Mutant 177 in dirty.js: row.val replaced with row.val + 1
Mutant 178 in dirty.js: row.val replaced with row.val * 2
Mutant 179 in dirty.js: buffer.length replaced with buffer.length === 0
Mutant 180 in dirty.js: buffer.length replaced with buffer.length > 0
Mutant 181 in dirty.js: buffer.length replaced with buffer.length === 1
Mutant 182 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`))
Mutant 183 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`))
Mutant 184 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.split('').reverse().join('')}`))
Mutant 185 in dirty.js: this.emit replaced with this.emitError
Mutant 186 in dirty.js: this.emit replaced with this.emitWarning
Mutant 187 in dirty.js: this.emit replaced with this.emitInfo
Mutant 188 in dirty.js: 'error' replaced with 'end'
Mutant 189 in dirty.js: 'error' replaced with 'close'
Mutant 190 in dirty.js: 'error' replaced with 'finish'
Mutant 191 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`)
Mutant 192 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`)
Mutant 193 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.split('').reverse().join('')}`)
Mutant 194 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 195 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size - 1)
Mutant 196 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size * 2)
Mutant 197 in dirty.js: 'load' replaced with 'loaded'
Mutant 198 in dirty.js: 'load' replaced with 'data_loaded'
Mutant 199 in dirty.js: this._data.size replaced with this._data.length
Mutant 200 in dirty.js: this._data.size replaced with this._data.size()
Mutant 201 in dirty.js: 'read_close' replaced with 'write_close'
Mutant 202 in dirty.js: 'read_close' replaced with 'drain'
Mutant 203 in dirty.js: !this._queue.size replaced with this._queue.size === 0
Mutant 204 in dirty.js: !this._queue.size replaced with this._queue.size < 1
Mutant 205 in dirty.js: !this._queue.size replaced with this._queue.size <= 0
Mutant 206 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites < 0
Mutant 207 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites > 0
Mutant 208 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites === 0
Mutant 209 in dirty.js: 'drain' replaced with 'error'
Mutant 210 in dirty.js: 'drain' replaced with 'close'
Mutant 211 in dirty.js: 'write_close' replaced with 'write_error'
Mutant 212 in dirty.js: 'write_close' replaced with 'write_end'
Mutant 213 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size && !this._waitForDrain
Mutant 214 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size > 0 && !this._waitForDrain
Mutant 215 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size === 0 || this._waitForDrain
Mutant 216 in dirty.js: this._writeStream.cork replaced with this._writeStream.uncork
Mutant 217 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.entries()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 218 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of Object.entries(this._queue)) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 219 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, cbs] of this._queue.keys()) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 220 in dirty.js: this._queue replaced with this._data
Mutant 221 in dirty.js: this._queue replaced with this._queue.size()
Mutant 222 in dirty.js: this._queue replaced with this._queue.isEmpty()
Mutant 223 in dirty.js: key replaced with key + 1
Mutant 224 in dirty.js: key replaced with this._data.get(key)
Mutant 225 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) + 1
}
Mutant 226 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) - 1
}
Mutant 227 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) * 2
}
Mutant 228 in dirty.js: this._data.get replaced with this._data.set
Mutant 229 in dirty.js: this._data.get replaced with this._data.clear
Mutant 230 in dirty.js: key replaced with this._data.get(key + 1)
Mutant 231 in dirty.js: key replaced with this._data.get(key - 1)
Mutant 232 in dirty.js: !cbs.length && err != null replaced with cbs.length === 0 && err != null
Mutant 233 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Buggy code fragment'))
Mutant 234 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 235 in dirty.js: this.emit('error', err) replaced with this.emit('error', undefined)
Mutant 236 in dirty.js: 'error' replaced with 'drain'
Mutant 237 in dirty.js: 'error' replaced with 'write'
Mutant 238 in dirty.js: err replaced with null
Mutant 239 in dirty.js: err replaced with undefined
Mutant 240 in dirty.js: err replaced with new Error()
Mutant 241 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 && !this._waitForDrain
Mutant 242 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites <= 0 || !this._waitForDrain
Mutant 243 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites <= 0 && !this._waitForDrain
Mutant 244 in dirty.js: 'drain' replaced with 'error'
Mutant 245 in dirty.js: 'drain' replaced with 'close'
Mutant 246 in dirty.js: 'drain' replaced with 'end'
Mutant 247 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.reverse()) cb(err);
Mutant 248 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.slice(1)) cb(err);
Mutant 249 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.filter(cb => cb !== cbs[0])) cb(err);
Mutant 250 in dirty.js: cbs replaced with cbs.reverse()
Mutant 251 in dirty.js: cbs replaced with cbs.slice(0, -1)
Mutant 252 in dirty.js: cbs replaced with cbs.concat(cbs)
Mutant 253 in dirty.js: err replaced with null
Mutant 254 in dirty.js: err replaced with undefined
Mutant 255 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
Mutant 256 in dirty.js: this._waitForDrain replaced with this._waitForDrain === 0
Mutant 257 in dirty.js: this._waitForDrain replaced with this._waitForDrain < 0
[32m16:10:19 (2638) INFO Instrumenter[39m Instrumented 2 source file(s) with 258 mutant(s)
[32m16:10:19 (2638) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m16:10:20 (2638) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m16:10:20 (2638) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m16:10:20 (2638) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 565 ms, overhead 1 ms).
Mutation testing 6% (elapsed: <1m, remaining: ~2m) 17/258 tested (3 survived, 0 timed out)
Mutation testing 11% (elapsed: <1m, remaining: ~2m) 30/258 tested (9 survived, 0 timed out)
Mutation testing 14% (elapsed: <1m, remaining: ~2m) 37/258 tested (9 survived, 0 timed out)
Mutation testing 21% (elapsed: <1m, remaining: ~2m) 55/258 tested (12 survived, 0 timed out)
Mutation testing 27% (elapsed: <1m, remaining: ~2m) 72/258 tested (13 survived, 0 timed out)
Mutation testing 34% (elapsed: ~1m, remaining: ~1m) 89/258 tested (24 survived, 0 timed out)
Mutation testing 41% (elapsed: ~1m, remaining: ~1m) 106/258 tested (27 survived, 0 timed out)
Mutation testing 41% (elapsed: ~1m, remaining: ~1m) 107/258 tested (27 survived, 1 timed out)
Mutation testing 45% (elapsed: ~1m, remaining: ~1m) 118/258 tested (29 survived, 2 timed out)
Mutation testing 47% (elapsed: ~1m, remaining: ~1m) 122/258 tested (29 survived, 4 timed out)
Mutation testing 54% (elapsed: ~1m, remaining: ~1m) 140/258 tested (42 survived, 4 timed out)
Mutation testing 61% (elapsed: ~2m, remaining: ~1m) 158/258 tested (52 survived, 4 timed out)
Mutation testing 67% (elapsed: ~2m, remaining: ~1m) 175/258 tested (58 survived, 4 timed out)
Mutation testing 74% (elapsed: ~2m, remaining: <1m) 193/258 tested (71 survived, 4 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 198/258 tested (72 survived, 5 timed out)
Mutation testing 81% (elapsed: ~2m, remaining: <1m) 209/258 tested (78 survived, 6 timed out)
Mutation testing 82% (elapsed: ~2m, remaining: <1m) 213/258 tested (80 survived, 6 timed out)
Mutation testing 84% (elapsed: ~3m, remaining: <1m) 218/258 tested (83 survived, 8 timed out)
Mutation testing 86% (elapsed: ~3m, remaining: <1m) 223/258 tested (83 survived, 9 timed out)
Mutation testing 93% (elapsed: ~3m, remaining: <1m) 240/258 tested (91 survived, 9 timed out)
Mutation testing 94% (elapsed: ~3m, remaining: <1m) 243/258 tested (92 survived, 10 timed out)
Mutation testing 94% (elapsed: ~3m, remaining: <1m) 245/258 tested (92 survived, 11 timed out)
Mutation testing 96% (elapsed: ~3m, remaining: <1m) 249/258 tested (93 survived, 13 timed out)

All tests
  ✓ All tests (killed 146)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (typeof val === 'undefined') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key + 1) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:7
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.slice());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:7
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.concat());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:7
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.map(cb => cb));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.slice());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.concat());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.map(cb => cb));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:5
-       this.set(key, undefined, cb);
+       this.set(key, undefined, null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:69:30
-       for (const [key, val] of this._data) {
+       for (const [key, val] of this._data.entries()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, val) === true) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, this._data.get(key)) === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size || this._inFlightWrites < 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size && this._inFlightWrites === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(false));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('close', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('finish', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(false));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:113:15
-             if (err.code === 'ENOENT') {
+             if (err.code === 'ENOENT' || err.code === 'ENOFILE') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:113:15
-             if (err.code === 'ENOENT') {
+             if (err.code === 'ENOENT' || err.code === 'ENOFILE' || err.code === 'ENODIR') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error(err));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', err.stack);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('warning', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('info', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', new Error(err));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.stack);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('\n') === 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.indexOf('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.includes('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.match('\n') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:33
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.trim() === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('warn', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('info', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('debug', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.key === undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (!Object.prototype.hasOwnProperty.call(row, 'key')) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.hasOwnProperty('key') === false) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Invalid row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warning', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('info', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Invalid row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer.length > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer.length === 1) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.split('').reverse().join('')}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emitError('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emitWarning('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emitInfo('error', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('close', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('finish', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.split('').reverse().join('')}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size < 1) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size <= 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites < 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites > 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites === 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('close');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size === 0 || this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:183:5
-       this._writeStream.cork();
+       this._writeStream.uncork();

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:5
-       for (const [key, cbs] of this._queue) {
-         this._queue.delete(key);
-         const data = `${JSON.stringify({key, val: this._data.get(key)})}\n`;
-         ++this._inFlightWrites;
-         this._waitForDrain = !this._writeStream.write(data, (err) => {
-           if (!cbs.length && err != null) this.emit('error', err);
-           if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
-           for (const cb of cbs) cb(err);
-         });
-         if (this._waitForDrain) break;
-       }
+       for (const [key, cbs] of this._queue.entries()) {
+     this._queue.delete(key);
+     const data = `${JSON.stringify({
+       key,
+       val: this._data.get(key)
+     })}\n`;
+     ++this._inFlightWrites;
+     this._waitForDrain = !this._writeStream.write(data, err => {
+       if (!cbs.length && err != null) this.emit('error', err);
+       if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
+       for (const cb of cbs) cb(err);
+     });
+     if (this._waitForDrain) break;
+   }

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (cbs.length === 0 && err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Buggy code fragment'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('drain', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('write', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:9
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain === 0) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain < 0) break;

Ran 0.95 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   61.63 |      146 |        13 |         99 |        0 |        0 |
 dirty.js |   61.63 |      146 |        13 |         99 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m16:14:19 (2638) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m16:14:19 (2638) INFO MutationTestExecutor[39m Done in 4 minutes 1 second.

real	4m3.255s
user	2m28.203s
sys	0m27.076s
