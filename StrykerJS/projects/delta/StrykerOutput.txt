[32m13:06:26 (2239) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m13:06:26 (2239) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m13:06:27 (2239) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/delta/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[32m13:06:27 (2239) INFO ProjectReader[39m Found 4 of 37 file(s) to be mutated.
*** using standard mutators ***
Mutant 0 in AttributeMap.ts: false replaced with true
Mutant 1 in AttributeMap.ts: {
  if (typeof a !== 'object') {
    a = {};
  }
  if (typeof b !== 'object') {
    b = {};
  }
  let attributes = cloneDeep(b);
  if (!keepNull) {
    attributes = Object.keys(attributes).reduce<AttributeMap>((copy, key) => {
      if (attributes[key] != null) {
        copy[key] = attributes[key];
      }
      return copy;
    }, {});
  }
  for (const key in a) {
    if (a[key] !== undefined && b[key] === undefined) {
      attributes[key] = a[key];
    }
  }
  return Object.keys(attributes).length > 0 ? attributes : undefined;
} replaced with {}
Mutant 2 in AttributeMap.ts: typeof a !== 'object' replaced with true
Mutant 3 in AttributeMap.ts: typeof a !== 'object' replaced with false
Mutant 4 in AttributeMap.ts: typeof a !== 'object' replaced with typeof a === 'object'
Mutant 5 in AttributeMap.ts: 'object' replaced with ""
Mutant 6 in AttributeMap.ts: {
  a = {};
} replaced with {}
Mutant 7 in AttributeMap.ts: typeof b !== 'object' replaced with true
Mutant 8 in AttributeMap.ts: typeof b !== 'object' replaced with false
Mutant 9 in AttributeMap.ts: typeof b !== 'object' replaced with typeof b === 'object'
Mutant 10 in AttributeMap.ts: 'object' replaced with ""
Mutant 11 in AttributeMap.ts: {
  b = {};
} replaced with {}
Mutant 12 in AttributeMap.ts: !keepNull replaced with keepNull
Mutant 13 in AttributeMap.ts: !keepNull replaced with true
Mutant 14 in AttributeMap.ts: !keepNull replaced with false
Mutant 15 in AttributeMap.ts: {
  attributes = Object.keys(attributes).reduce<AttributeMap>((copy, key) => {
    if (attributes[key] != null) {
      copy[key] = attributes[key];
    }
    return copy;
  }, {});
} replaced with {}
Mutant 16 in AttributeMap.ts: {
  if (attributes[key] != null) {
    copy[key] = attributes[key];
  }
  return copy;
} replaced with {}
Mutant 17 in AttributeMap.ts: attributes[key] != null replaced with true
Mutant 18 in AttributeMap.ts: attributes[key] != null replaced with false
Mutant 19 in AttributeMap.ts: attributes[key] != null replaced with attributes[key] == null
Mutant 20 in AttributeMap.ts: {
  copy[key] = attributes[key];
} replaced with {}
Mutant 21 in AttributeMap.ts: {
  if (a[key] !== undefined && b[key] === undefined) {
    attributes[key] = a[key];
  }
} replaced with {}
Mutant 22 in AttributeMap.ts: a[key] !== undefined && b[key] === undefined replaced with true
Mutant 23 in AttributeMap.ts: a[key] !== undefined && b[key] === undefined replaced with false
Mutant 24 in AttributeMap.ts: a[key] !== undefined && b[key] === undefined replaced with a[key] !== undefined || b[key] === undefined
Mutant 25 in AttributeMap.ts: a[key] !== undefined replaced with true
Mutant 26 in AttributeMap.ts: a[key] !== undefined replaced with a[key] === undefined
Mutant 27 in AttributeMap.ts: b[key] === undefined replaced with true
Mutant 28 in AttributeMap.ts: b[key] === undefined replaced with b[key] !== undefined
Mutant 29 in AttributeMap.ts: {
  attributes[key] = a[key];
} replaced with {}
Mutant 30 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with true
Mutant 31 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with false
Mutant 32 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length >= 0
Mutant 33 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length <= 0
Mutant 34 in AttributeMap.ts: {
  if (typeof a !== 'object') {
    a = {};
  }
  if (typeof b !== 'object') {
    b = {};
  }
  const attributes = Object.keys(a).concat(Object.keys(b)).reduce<AttributeMap>((attrs, key) => {
    if (!isEqual(a[key], b[key])) {
      attrs[key] = b[key] === undefined ? null : b[key];
    }
    return attrs;
  }, {});
  return Object.keys(attributes).length > 0 ? attributes : undefined;
} replaced with {}
Mutant 35 in AttributeMap.ts: typeof a !== 'object' replaced with true
Mutant 36 in AttributeMap.ts: typeof a !== 'object' replaced with false
Mutant 37 in AttributeMap.ts: typeof a !== 'object' replaced with typeof a === 'object'
Mutant 38 in AttributeMap.ts: 'object' replaced with ""
Mutant 39 in AttributeMap.ts: {
  a = {};
} replaced with {}
Mutant 40 in AttributeMap.ts: typeof b !== 'object' replaced with true
Mutant 41 in AttributeMap.ts: typeof b !== 'object' replaced with false
Mutant 42 in AttributeMap.ts: typeof b !== 'object' replaced with typeof b === 'object'
Mutant 43 in AttributeMap.ts: 'object' replaced with ""
Mutant 44 in AttributeMap.ts: {
  b = {};
} replaced with {}
Mutant 45 in AttributeMap.ts: {
  if (!isEqual(a[key], b[key])) {
    attrs[key] = b[key] === undefined ? null : b[key];
  }
  return attrs;
} replaced with {}
Mutant 46 in AttributeMap.ts: !isEqual(a[key], b[key]) replaced with isEqual(a[key], b[key])
Mutant 47 in AttributeMap.ts: !isEqual(a[key], b[key]) replaced with true
Mutant 48 in AttributeMap.ts: !isEqual(a[key], b[key]) replaced with false
Mutant 49 in AttributeMap.ts: {
  attrs[key] = b[key] === undefined ? null : b[key];
} replaced with {}
Mutant 50 in AttributeMap.ts: b[key] === undefined replaced with true
Mutant 51 in AttributeMap.ts: b[key] === undefined replaced with false
Mutant 52 in AttributeMap.ts: b[key] === undefined replaced with b[key] !== undefined
Mutant 53 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with true
Mutant 54 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with false
Mutant 55 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length >= 0
Mutant 56 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length <= 0
Mutant 57 in AttributeMap.ts: {
  attr = attr || {};
  const baseInverted = Object.keys(base).reduce<AttributeMap>((memo, key) => {
    if (base[key] !== attr[key] && attr[key] !== undefined) {
      memo[key] = base[key];
    }
    return memo;
  }, {});
  return Object.keys(attr).reduce<AttributeMap>((memo, key) => {
    if (attr[key] !== base[key] && base[key] === undefined) {
      memo[key] = null;
    }
    return memo;
  }, baseInverted);
} replaced with {}
Mutant 58 in AttributeMap.ts: attr || {} replaced with true
Mutant 59 in AttributeMap.ts: attr || {} replaced with false
Mutant 60 in AttributeMap.ts: attr || {} replaced with attr && {}
Mutant 61 in AttributeMap.ts: {
  if (base[key] !== attr[key] && attr[key] !== undefined) {
    memo[key] = base[key];
  }
  return memo;
} replaced with {}
Mutant 62 in AttributeMap.ts: base[key] !== attr[key] && attr[key] !== undefined replaced with true
Mutant 63 in AttributeMap.ts: base[key] !== attr[key] && attr[key] !== undefined replaced with false
Mutant 64 in AttributeMap.ts: base[key] !== attr[key] && attr[key] !== undefined replaced with base[key] !== attr[key] || attr[key] !== undefined
Mutant 65 in AttributeMap.ts: base[key] !== attr[key] replaced with true
Mutant 66 in AttributeMap.ts: base[key] !== attr[key] replaced with base[key] === attr[key]
Mutant 67 in AttributeMap.ts: attr[key] !== undefined replaced with true
Mutant 68 in AttributeMap.ts: attr[key] !== undefined replaced with attr[key] === undefined
Mutant 69 in AttributeMap.ts: {
  memo[key] = base[key];
} replaced with {}
Mutant 70 in AttributeMap.ts: {
  if (attr[key] !== base[key] && base[key] === undefined) {
    memo[key] = null;
  }
  return memo;
} replaced with {}
Mutant 71 in AttributeMap.ts: attr[key] !== base[key] && base[key] === undefined replaced with true
Mutant 72 in AttributeMap.ts: attr[key] !== base[key] && base[key] === undefined replaced with false
Mutant 73 in AttributeMap.ts: attr[key] !== base[key] && base[key] === undefined replaced with attr[key] !== base[key] || base[key] === undefined
Mutant 74 in AttributeMap.ts: attr[key] !== base[key] replaced with true
Mutant 75 in AttributeMap.ts: attr[key] !== base[key] replaced with attr[key] === base[key]
Mutant 76 in AttributeMap.ts: base[key] === undefined replaced with true
Mutant 77 in AttributeMap.ts: base[key] === undefined replaced with base[key] !== undefined
Mutant 78 in AttributeMap.ts: {
  memo[key] = null;
} replaced with {}
Mutant 79 in AttributeMap.ts: false replaced with true
Mutant 80 in AttributeMap.ts: {
  if (typeof a !== 'object') {
    return b;
  }
  if (typeof b !== 'object') {
    return undefined;
  }
  if (!priority) {
    return b; // b simply overwrites us without priority
  }
  const attributes = Object.keys(b).reduce<AttributeMap>((attrs, key) => {
    if (a[key] === undefined) {
      attrs[key] = b[key]; // null is a valid value
    }
    return attrs;
  }, {});
  return Object.keys(attributes).length > 0 ? attributes : undefined;
} replaced with {}
Mutant 81 in AttributeMap.ts: typeof a !== 'object' replaced with true
Mutant 82 in AttributeMap.ts: typeof a !== 'object' replaced with false
Mutant 83 in AttributeMap.ts: typeof a !== 'object' replaced with typeof a === 'object'
Mutant 84 in AttributeMap.ts: 'object' replaced with ""
Mutant 85 in AttributeMap.ts: {
  return b;
} replaced with {}
Mutant 86 in AttributeMap.ts: typeof b !== 'object' replaced with true
Mutant 87 in AttributeMap.ts: typeof b !== 'object' replaced with false
Mutant 88 in AttributeMap.ts: typeof b !== 'object' replaced with typeof b === 'object'
Mutant 89 in AttributeMap.ts: 'object' replaced with ""
Mutant 90 in AttributeMap.ts: {
  return undefined;
} replaced with {}
Mutant 91 in AttributeMap.ts: !priority replaced with priority
Mutant 92 in AttributeMap.ts: !priority replaced with true
Mutant 93 in AttributeMap.ts: !priority replaced with false
Mutant 94 in AttributeMap.ts: {
  return b; // b simply overwrites us without priority
} replaced with {}
Mutant 95 in AttributeMap.ts: {
  if (a[key] === undefined) {
    attrs[key] = b[key]; // null is a valid value
  }
  return attrs;
} replaced with {}
Mutant 96 in AttributeMap.ts: a[key] === undefined replaced with true
Mutant 97 in AttributeMap.ts: a[key] === undefined replaced with false
Mutant 98 in AttributeMap.ts: a[key] === undefined replaced with a[key] !== undefined
Mutant 99 in AttributeMap.ts: {
  attrs[key] = b[key]; // null is a valid value
} replaced with {}
Mutant 100 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with true
Mutant 101 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with false
Mutant 102 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length >= 0
Mutant 103 in AttributeMap.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length <= 0
Mutant 104 in Delta.ts: {
  if (typeof a !== 'object' || a === null) {
    throw new Error(`cannot retain a ${typeof a}`);
  }
  if (typeof b !== 'object' || b === null) {
    throw new Error(`cannot retain a ${typeof b}`);
  }
  const embedType = Object.keys(a)[0];
  if (!embedType || embedType !== Object.keys(b)[0]) {
    throw new Error(`embed types not matched: ${embedType} != ${Object.keys(b)[0]}`);
  }
  return [embedType, a[embedType], b[embedType]];
} replaced with {}
Mutant 105 in Delta.ts: typeof a !== 'object' || a === null replaced with true
Mutant 106 in Delta.ts: typeof a !== 'object' || a === null replaced with false
Mutant 107 in Delta.ts: typeof a !== 'object' || a === null replaced with typeof a !== 'object' && a === null
Mutant 108 in Delta.ts: typeof a !== 'object' replaced with false
Mutant 109 in Delta.ts: typeof a !== 'object' replaced with typeof a === 'object'
Mutant 110 in Delta.ts: 'object' replaced with ""
Mutant 111 in Delta.ts: a === null replaced with false
Mutant 112 in Delta.ts: a === null replaced with a !== null
Mutant 113 in Delta.ts: {
  throw new Error(`cannot retain a ${typeof a}`);
} replaced with {}
Mutant 114 in Delta.ts: `cannot retain a ${typeof a}` replaced with ``
Mutant 115 in Delta.ts: typeof b !== 'object' || b === null replaced with true
Mutant 116 in Delta.ts: typeof b !== 'object' || b === null replaced with false
Mutant 117 in Delta.ts: typeof b !== 'object' || b === null replaced with typeof b !== 'object' && b === null
Mutant 118 in Delta.ts: typeof b !== 'object' replaced with false
Mutant 119 in Delta.ts: typeof b !== 'object' replaced with typeof b === 'object'
Mutant 120 in Delta.ts: 'object' replaced with ""
Mutant 121 in Delta.ts: b === null replaced with false
Mutant 122 in Delta.ts: b === null replaced with b !== null
Mutant 123 in Delta.ts: {
  throw new Error(`cannot retain a ${typeof b}`);
} replaced with {}
Mutant 124 in Delta.ts: `cannot retain a ${typeof b}` replaced with ``
Mutant 125 in Delta.ts: !embedType || embedType !== Object.keys(b)[0] replaced with true
Mutant 126 in Delta.ts: !embedType || embedType !== Object.keys(b)[0] replaced with false
Mutant 127 in Delta.ts: !embedType || embedType !== Object.keys(b)[0] replaced with !embedType && embedType !== Object.keys(b)[0]
Mutant 128 in Delta.ts: !embedType replaced with embedType
Mutant 129 in Delta.ts: embedType !== Object.keys(b)[0] replaced with false
Mutant 130 in Delta.ts: embedType !== Object.keys(b)[0] replaced with embedType === Object.keys(b)[0]
Mutant 131 in Delta.ts: {
  throw new Error(`embed types not matched: ${embedType} != ${Object.keys(b)[0]}`);
} replaced with {}
Mutant 132 in Delta.ts: `embed types not matched: ${embedType} != ${Object.keys(b)[0]}` replaced with ``
Mutant 133 in Delta.ts: [embedType, a[embedType], b[embedType]] replaced with []
Mutant 134 in Delta.ts: {
  this.handlers[embedType] = handler;
} replaced with {}
Mutant 135 in Delta.ts: {
  delete this.handlers[embedType];
} replaced with {}
Mutant 136 in Delta.ts: {
  const handler = this.handlers[embedType];
  if (!handler) {
    throw new Error(`no handlers for embed type "${embedType}"`);
  }
  return handler;
} replaced with {}
Mutant 137 in Delta.ts: !handler replaced with handler
Mutant 138 in Delta.ts: !handler replaced with true
Mutant 139 in Delta.ts: !handler replaced with false
Mutant 140 in Delta.ts: {
  throw new Error(`no handlers for embed type "${embedType}"`);
} replaced with {}
Mutant 141 in Delta.ts: `no handlers for embed type "${embedType}"` replaced with ``
Mutant 142 in Delta.ts: {
  // Assume we are given a well formed ops
  if (Array.isArray(ops)) {
    this.ops = ops;
  } else if (ops != null && Array.isArray(ops.ops)) {
    this.ops = ops.ops;
  } else {
    this.ops = [];
  }
} replaced with {}
Mutant 143 in Delta.ts: Array.isArray(ops) replaced with true
Mutant 144 in Delta.ts: Array.isArray(ops) replaced with false
Mutant 145 in Delta.ts: {
  this.ops = ops;
} replaced with {}
Mutant 146 in Delta.ts: ops != null && Array.isArray(ops.ops) replaced with true
Mutant 147 in Delta.ts: ops != null && Array.isArray(ops.ops) replaced with false
Mutant 148 in Delta.ts: ops != null && Array.isArray(ops.ops) replaced with ops != null || Array.isArray(ops.ops)
Mutant 149 in Delta.ts: ops != null replaced with true
Mutant 150 in Delta.ts: ops != null replaced with ops == null
Mutant 151 in Delta.ts: {
  this.ops = ops.ops;
} replaced with {}
Mutant 152 in Delta.ts: {
  this.ops = [];
} replaced with {}
Mutant 153 in Delta.ts: [] replaced with ["Stryker was here"]
Mutant 154 in Delta.ts: {
  const newOp: Op = {};
  if (typeof arg === 'string' && arg.length === 0) {
    return this;
  }
  newOp.insert = arg;
  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    newOp.attributes = attributes;
  }
  return this.push(newOp);
} replaced with {}
Mutant 155 in Delta.ts: typeof arg === 'string' && arg.length === 0 replaced with true
Mutant 156 in Delta.ts: typeof arg === 'string' && arg.length === 0 replaced with false
Mutant 157 in Delta.ts: typeof arg === 'string' && arg.length === 0 replaced with typeof arg === 'string' || arg.length === 0
Mutant 158 in Delta.ts: typeof arg === 'string' replaced with true
Mutant 159 in Delta.ts: typeof arg === 'string' replaced with typeof arg !== 'string'
Mutant 160 in Delta.ts: 'string' replaced with ""
Mutant 161 in Delta.ts: arg.length === 0 replaced with true
Mutant 162 in Delta.ts: arg.length === 0 replaced with arg.length !== 0
Mutant 163 in Delta.ts: {
  return this;
} replaced with {}
Mutant 164 in Delta.ts: attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0 replaced with true
Mutant 165 in Delta.ts: attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0 replaced with false
Mutant 166 in Delta.ts: attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0 replaced with attributes != null && typeof attributes === 'object' || Object.keys(attributes).length > 0
Mutant 167 in Delta.ts: attributes != null && typeof attributes === 'object' replaced with true
Mutant 168 in Delta.ts: attributes != null && typeof attributes === 'object' replaced with attributes != null || typeof attributes === 'object'
Mutant 169 in Delta.ts: attributes != null replaced with true
Mutant 170 in Delta.ts: attributes != null replaced with attributes == null
Mutant 171 in Delta.ts: typeof attributes === 'object' replaced with true
Mutant 172 in Delta.ts: typeof attributes === 'object' replaced with typeof attributes !== 'object'
Mutant 173 in Delta.ts: 'object' replaced with ""
Mutant 174 in Delta.ts: Object.keys(attributes).length > 0 replaced with true
Mutant 175 in Delta.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length >= 0
Mutant 176 in Delta.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length <= 0
Mutant 177 in Delta.ts: {
  newOp.attributes = attributes;
} replaced with {}
Mutant 178 in Delta.ts: {
  if (length <= 0) {
    return this;
  }
  return this.push({
    delete: length
  });
} replaced with {}
Mutant 179 in Delta.ts: length <= 0 replaced with true
Mutant 180 in Delta.ts: length <= 0 replaced with false
Mutant 181 in Delta.ts: length <= 0 replaced with length < 0
Mutant 182 in Delta.ts: length <= 0 replaced with length > 0
Mutant 183 in Delta.ts: {
  return this;
} replaced with {}
Mutant 184 in Delta.ts: {
  delete: length
} replaced with {}
Mutant 185 in Delta.ts: {
  if (typeof length === 'number' && length <= 0) {
    return this;
  }
  const newOp: Op = {
    retain: length
  };
  if (attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0) {
    newOp.attributes = attributes;
  }
  return this.push(newOp);
} replaced with {}
Mutant 186 in Delta.ts: typeof length === 'number' && length <= 0 replaced with true
Mutant 187 in Delta.ts: typeof length === 'number' && length <= 0 replaced with false
Mutant 188 in Delta.ts: typeof length === 'number' && length <= 0 replaced with typeof length === 'number' || length <= 0
Mutant 189 in Delta.ts: typeof length === 'number' replaced with true
Mutant 190 in Delta.ts: typeof length === 'number' replaced with typeof length !== 'number'
Mutant 191 in Delta.ts: 'number' replaced with ""
Mutant 192 in Delta.ts: length <= 0 replaced with true
Mutant 193 in Delta.ts: length <= 0 replaced with length < 0
Mutant 194 in Delta.ts: length <= 0 replaced with length > 0
Mutant 195 in Delta.ts: {
  return this;
} replaced with {}
Mutant 196 in Delta.ts: {
  retain: length
} replaced with {}
Mutant 197 in Delta.ts: attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0 replaced with true
Mutant 198 in Delta.ts: attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0 replaced with false
Mutant 199 in Delta.ts: attributes != null && typeof attributes === 'object' && Object.keys(attributes).length > 0 replaced with attributes != null && typeof attributes === 'object' || Object.keys(attributes).length > 0
Mutant 200 in Delta.ts: attributes != null && typeof attributes === 'object' replaced with true
Mutant 201 in Delta.ts: attributes != null && typeof attributes === 'object' replaced with attributes != null || typeof attributes === 'object'
Mutant 202 in Delta.ts: attributes != null replaced with true
Mutant 203 in Delta.ts: attributes != null replaced with attributes == null
Mutant 204 in Delta.ts: typeof attributes === 'object' replaced with true
Mutant 205 in Delta.ts: typeof attributes === 'object' replaced with typeof attributes !== 'object'
Mutant 206 in Delta.ts: 'object' replaced with ""
Mutant 207 in Delta.ts: Object.keys(attributes).length > 0 replaced with true
Mutant 208 in Delta.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length >= 0
Mutant 209 in Delta.ts: Object.keys(attributes).length > 0 replaced with Object.keys(attributes).length <= 0
Mutant 210 in Delta.ts: {
  newOp.attributes = attributes;
} replaced with {}
Mutant 211 in Delta.ts: {
  let index = this.ops.length;
  let lastOp = this.ops[index - 1];
  newOp = cloneDeep(newOp);
  if (typeof lastOp === 'object') {
    if (typeof newOp.delete === 'number' && typeof lastOp.delete === 'number') {
      this.ops[index - 1] = {
        delete: lastOp.delete + newOp.delete
      };
      return this;
    }
    // Since it does not matter if we insert before or after deleting at the same index,
    // always prefer to insert first
    if (typeof lastOp.delete === 'number' && newOp.insert != null) {
      index -= 1;
      lastOp = this.ops[index - 1];
      if (typeof lastOp !== 'object') {
        this.ops.unshift(newOp);
        return this;
      }
    }
    if (isEqual(newOp.attributes, lastOp.attributes)) {
      if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
        this.ops[index - 1] = {
          insert: lastOp.insert + newOp.insert
        };
        if (typeof newOp.attributes === 'object') {
          this.ops[index - 1].attributes = newOp.attributes;
        }
        return this;
      } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
        this.ops[index - 1] = {
          retain: lastOp.retain + newOp.retain
        };
        if (typeof newOp.attributes === 'object') {
          this.ops[index - 1].attributes = newOp.attributes;
        }
        return this;
      }
    }
  }
  if (index === this.ops.length) {
    this.ops.push(newOp);
  } else {
    this.ops.splice(index, 0, newOp);
  }
  return this;
} replaced with {}
Mutant 212 in Delta.ts: index - 1 replaced with index + 1
Mutant 213 in Delta.ts: typeof lastOp === 'object' replaced with true
Mutant 214 in Delta.ts: typeof lastOp === 'object' replaced with false
Mutant 215 in Delta.ts: typeof lastOp === 'object' replaced with typeof lastOp !== 'object'
Mutant 216 in Delta.ts: 'object' replaced with ""
Mutant 217 in Delta.ts: {
  if (typeof newOp.delete === 'number' && typeof lastOp.delete === 'number') {
    this.ops[index - 1] = {
      delete: lastOp.delete + newOp.delete
    };
    return this;
  }
  // Since it does not matter if we insert before or after deleting at the same index,
  // always prefer to insert first
  if (typeof lastOp.delete === 'number' && newOp.insert != null) {
    index -= 1;
    lastOp = this.ops[index - 1];
    if (typeof lastOp !== 'object') {
      this.ops.unshift(newOp);
      return this;
    }
  }
  if (isEqual(newOp.attributes, lastOp.attributes)) {
    if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
      this.ops[index - 1] = {
        insert: lastOp.insert + newOp.insert
      };
      if (typeof newOp.attributes === 'object') {
        this.ops[index - 1].attributes = newOp.attributes;
      }
      return this;
    } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
      this.ops[index - 1] = {
        retain: lastOp.retain + newOp.retain
      };
      if (typeof newOp.attributes === 'object') {
        this.ops[index - 1].attributes = newOp.attributes;
      }
      return this;
    }
  }
} replaced with {}
Mutant 218 in Delta.ts: typeof newOp.delete === 'number' && typeof lastOp.delete === 'number' replaced with true
Mutant 219 in Delta.ts: typeof newOp.delete === 'number' && typeof lastOp.delete === 'number' replaced with false
Mutant 220 in Delta.ts: typeof newOp.delete === 'number' && typeof lastOp.delete === 'number' replaced with typeof newOp.delete === 'number' || typeof lastOp.delete === 'number'
Mutant 221 in Delta.ts: typeof newOp.delete === 'number' replaced with true
Mutant 222 in Delta.ts: typeof newOp.delete === 'number' replaced with typeof newOp.delete !== 'number'
Mutant 223 in Delta.ts: 'number' replaced with ""
Mutant 224 in Delta.ts: typeof lastOp.delete === 'number' replaced with true
Mutant 225 in Delta.ts: typeof lastOp.delete === 'number' replaced with typeof lastOp.delete !== 'number'
Mutant 226 in Delta.ts: 'number' replaced with ""
Mutant 227 in Delta.ts: {
  this.ops[index - 1] = {
    delete: lastOp.delete + newOp.delete
  };
  return this;
} replaced with {}
Mutant 228 in Delta.ts: index - 1 replaced with index + 1
Mutant 229 in Delta.ts: {
  delete: lastOp.delete + newOp.delete
} replaced with {}
Mutant 230 in Delta.ts: lastOp.delete + newOp.delete replaced with lastOp.delete - newOp.delete
Mutant 231 in Delta.ts: typeof lastOp.delete === 'number' && newOp.insert != null replaced with true
Mutant 232 in Delta.ts: typeof lastOp.delete === 'number' && newOp.insert != null replaced with false
Mutant 233 in Delta.ts: typeof lastOp.delete === 'number' && newOp.insert != null replaced with typeof lastOp.delete === 'number' || newOp.insert != null
Mutant 234 in Delta.ts: typeof lastOp.delete === 'number' replaced with true
Mutant 235 in Delta.ts: typeof lastOp.delete === 'number' replaced with typeof lastOp.delete !== 'number'
Mutant 236 in Delta.ts: 'number' replaced with ""
Mutant 237 in Delta.ts: newOp.insert != null replaced with true
Mutant 238 in Delta.ts: newOp.insert != null replaced with newOp.insert == null
Mutant 239 in Delta.ts: {
  index -= 1;
  lastOp = this.ops[index - 1];
  if (typeof lastOp !== 'object') {
    this.ops.unshift(newOp);
    return this;
  }
} replaced with {}
Mutant 240 in Delta.ts: index -= 1 replaced with index += 1
Mutant 241 in Delta.ts: index - 1 replaced with index + 1
Mutant 242 in Delta.ts: typeof lastOp !== 'object' replaced with true
Mutant 243 in Delta.ts: typeof lastOp !== 'object' replaced with false
Mutant 244 in Delta.ts: typeof lastOp !== 'object' replaced with typeof lastOp === 'object'
Mutant 245 in Delta.ts: 'object' replaced with ""
Mutant 246 in Delta.ts: {
  this.ops.unshift(newOp);
  return this;
} replaced with {}
Mutant 247 in Delta.ts: isEqual(newOp.attributes, lastOp.attributes) replaced with true
Mutant 248 in Delta.ts: isEqual(newOp.attributes, lastOp.attributes) replaced with false
Mutant 249 in Delta.ts: {
  if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
    this.ops[index - 1] = {
      insert: lastOp.insert + newOp.insert
    };
    if (typeof newOp.attributes === 'object') {
      this.ops[index - 1].attributes = newOp.attributes;
    }
    return this;
  } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
    this.ops[index - 1] = {
      retain: lastOp.retain + newOp.retain
    };
    if (typeof newOp.attributes === 'object') {
      this.ops[index - 1].attributes = newOp.attributes;
    }
    return this;
  }
} replaced with {}
Mutant 250 in Delta.ts: typeof newOp.insert === 'string' && typeof lastOp.insert === 'string' replaced with true
Mutant 251 in Delta.ts: typeof newOp.insert === 'string' && typeof lastOp.insert === 'string' replaced with false
Mutant 252 in Delta.ts: typeof newOp.insert === 'string' && typeof lastOp.insert === 'string' replaced with typeof newOp.insert === 'string' || typeof lastOp.insert === 'string'
Mutant 253 in Delta.ts: typeof newOp.insert === 'string' replaced with true
Mutant 254 in Delta.ts: typeof newOp.insert === 'string' replaced with typeof newOp.insert !== 'string'
Mutant 255 in Delta.ts: 'string' replaced with ""
Mutant 256 in Delta.ts: typeof lastOp.insert === 'string' replaced with true
Mutant 257 in Delta.ts: typeof lastOp.insert === 'string' replaced with typeof lastOp.insert !== 'string'
Mutant 258 in Delta.ts: 'string' replaced with ""
Mutant 259 in Delta.ts: {
  this.ops[index - 1] = {
    insert: lastOp.insert + newOp.insert
  };
  if (typeof newOp.attributes === 'object') {
    this.ops[index - 1].attributes = newOp.attributes;
  }
  return this;
} replaced with {}
Mutant 260 in Delta.ts: index - 1 replaced with index + 1
Mutant 261 in Delta.ts: {
  insert: lastOp.insert + newOp.insert
} replaced with {}
Mutant 262 in Delta.ts: lastOp.insert + newOp.insert replaced with lastOp.insert - newOp.insert
Mutant 263 in Delta.ts: typeof newOp.attributes === 'object' replaced with true
Mutant 264 in Delta.ts: typeof newOp.attributes === 'object' replaced with false
Mutant 265 in Delta.ts: typeof newOp.attributes === 'object' replaced with typeof newOp.attributes !== 'object'
Mutant 266 in Delta.ts: 'object' replaced with ""
Mutant 267 in Delta.ts: {
  this.ops[index - 1].attributes = newOp.attributes;
} replaced with {}
Mutant 268 in Delta.ts: index - 1 replaced with index + 1
Mutant 269 in Delta.ts: typeof newOp.retain === 'number' && typeof lastOp.retain === 'number' replaced with true
Mutant 270 in Delta.ts: typeof newOp.retain === 'number' && typeof lastOp.retain === 'number' replaced with false
Mutant 271 in Delta.ts: typeof newOp.retain === 'number' && typeof lastOp.retain === 'number' replaced with typeof newOp.retain === 'number' || typeof lastOp.retain === 'number'
Mutant 272 in Delta.ts: typeof newOp.retain === 'number' replaced with true
Mutant 273 in Delta.ts: typeof newOp.retain === 'number' replaced with typeof newOp.retain !== 'number'
Mutant 274 in Delta.ts: 'number' replaced with ""
Mutant 275 in Delta.ts: typeof lastOp.retain === 'number' replaced with true
Mutant 276 in Delta.ts: typeof lastOp.retain === 'number' replaced with typeof lastOp.retain !== 'number'
Mutant 277 in Delta.ts: 'number' replaced with ""
Mutant 278 in Delta.ts: {
  this.ops[index - 1] = {
    retain: lastOp.retain + newOp.retain
  };
  if (typeof newOp.attributes === 'object') {
    this.ops[index - 1].attributes = newOp.attributes;
  }
  return this;
} replaced with {}
Mutant 279 in Delta.ts: index - 1 replaced with index + 1
Mutant 280 in Delta.ts: {
  retain: lastOp.retain + newOp.retain
} replaced with {}
Mutant 281 in Delta.ts: lastOp.retain + newOp.retain replaced with lastOp.retain - newOp.retain
Mutant 282 in Delta.ts: typeof newOp.attributes === 'object' replaced with true
Mutant 283 in Delta.ts: typeof newOp.attributes === 'object' replaced with false
Mutant 284 in Delta.ts: typeof newOp.attributes === 'object' replaced with typeof newOp.attributes !== 'object'
Mutant 285 in Delta.ts: 'object' replaced with ""
Mutant 286 in Delta.ts: {
  this.ops[index - 1].attributes = newOp.attributes;
} replaced with {}
Mutant 287 in Delta.ts: index - 1 replaced with index + 1
Mutant 288 in Delta.ts: index === this.ops.length replaced with true
Mutant 289 in Delta.ts: index === this.ops.length replaced with false
Mutant 290 in Delta.ts: index === this.ops.length replaced with index !== this.ops.length
Mutant 291 in Delta.ts: {
  this.ops.push(newOp);
} replaced with {}
Mutant 292 in Delta.ts: {
  this.ops.splice(index, 0, newOp);
} replaced with {}
Mutant 293 in Delta.ts: {
  const lastOp = this.ops[this.ops.length - 1];
  if (lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes) {
    this.ops.pop();
  }
  return this;
} replaced with {}
Mutant 294 in Delta.ts: this.ops.length - 1 replaced with this.ops.length + 1
Mutant 295 in Delta.ts: lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes replaced with true
Mutant 296 in Delta.ts: lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes replaced with false
Mutant 297 in Delta.ts: lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes replaced with lastOp && typeof lastOp.retain === 'number' || !lastOp.attributes
Mutant 298 in Delta.ts: lastOp && typeof lastOp.retain === 'number' replaced with true
Mutant 299 in Delta.ts: lastOp && typeof lastOp.retain === 'number' replaced with lastOp || typeof lastOp.retain === 'number'
Mutant 300 in Delta.ts: typeof lastOp.retain === 'number' replaced with true
Mutant 301 in Delta.ts: typeof lastOp.retain === 'number' replaced with typeof lastOp.retain !== 'number'
Mutant 302 in Delta.ts: 'number' replaced with ""
Mutant 303 in Delta.ts: !lastOp.attributes replaced with lastOp.attributes
Mutant 304 in Delta.ts: {
  this.ops.pop();
} replaced with {}
Mutant 305 in Delta.ts: {
  return this.ops.filter(predicate);
} replaced with {}
Mutant 306 in Delta.ts: this.ops.filter(predicate) replaced with this.ops
Mutant 307 in Delta.ts: {
  this.ops.forEach(predicate);
} replaced with {}
Mutant 308 in Delta.ts: {
  return this.ops.map(predicate);
} replaced with {}
Mutant 309 in Delta.ts: {
  const passed: Op[] = [];
  const failed: Op[] = [];
  this.forEach(op => {
    const target = predicate(op) ? passed : failed;
    target.push(op);
  });
  return [passed, failed];
} replaced with {}
Mutant 310 in Delta.ts: [] replaced with ["Stryker was here"]
Mutant 311 in Delta.ts: [] replaced with ["Stryker was here"]
Mutant 312 in Delta.ts: {
  const target = predicate(op) ? passed : failed;
  target.push(op);
} replaced with {}
Mutant 313 in Delta.ts: [passed, failed] replaced with []
Mutant 314 in Delta.ts: {
  return this.ops.reduce(predicate, initialValue);
} replaced with {}
Mutant 315 in Delta.ts: {
  return this.reduce((length, elem) => {
    if (elem.insert) {
      return length + Op.length(elem);
    } else if (elem.delete) {
      return length - elem.delete;
    }
    return length;
  }, 0);
} replaced with {}
Mutant 316 in Delta.ts: {
  if (elem.insert) {
    return length + Op.length(elem);
  } else if (elem.delete) {
    return length - elem.delete;
  }
  return length;
} replaced with {}
Mutant 317 in Delta.ts: elem.insert replaced with true
Mutant 318 in Delta.ts: elem.insert replaced with false
Mutant 319 in Delta.ts: {
  return length + Op.length(elem);
} replaced with {}
Mutant 320 in Delta.ts: length + Op.length(elem) replaced with length - Op.length(elem)
Mutant 321 in Delta.ts: elem.delete replaced with true
Mutant 322 in Delta.ts: elem.delete replaced with false
Mutant 323 in Delta.ts: {
  return length - elem.delete;
} replaced with {}
Mutant 324 in Delta.ts: length - elem.delete replaced with length + elem.delete
Mutant 325 in Delta.ts: {
  return this.reduce((length, elem) => {
    return length + Op.length(elem);
  }, 0);
} replaced with {}
Mutant 326 in Delta.ts: {
  return length + Op.length(elem);
} replaced with {}
Mutant 327 in Delta.ts: length + Op.length(elem) replaced with length - Op.length(elem)
Mutant 328 in Delta.ts: {
  const ops = [];
  const iter = new OpIterator(this.ops);
  let index = 0;
  while (index < end && iter.hasNext()) {
    let nextOp;
    if (index < start) {
      nextOp = iter.next(start - index);
    } else {
      nextOp = iter.next(end - index);
      ops.push(nextOp);
    }
    index += Op.length(nextOp);
  }
  return new Delta(ops);
} replaced with {}
Mutant 329 in Delta.ts: [] replaced with ["Stryker was here"]
Mutant 330 in Delta.ts: index < end && iter.hasNext() replaced with false
Mutant 331 in Delta.ts: index < end && iter.hasNext() replaced with index < end || iter.hasNext()
Mutant 332 in Delta.ts: index < end replaced with true
Mutant 333 in Delta.ts: index < end replaced with index <= end
Mutant 334 in Delta.ts: index < end replaced with index >= end
Mutant 335 in Delta.ts: {
  let nextOp;
  if (index < start) {
    nextOp = iter.next(start - index);
  } else {
    nextOp = iter.next(end - index);
    ops.push(nextOp);
  }
  index += Op.length(nextOp);
} replaced with {}
Mutant 336 in Delta.ts: index < start replaced with true
Mutant 337 in Delta.ts: index < start replaced with false
Mutant 338 in Delta.ts: index < start replaced with index <= start
Mutant 339 in Delta.ts: index < start replaced with index >= start
Mutant 340 in Delta.ts: {
  nextOp = iter.next(start - index);
} replaced with {}
Mutant 341 in Delta.ts: start - index replaced with start + index
Mutant 342 in Delta.ts: {
  nextOp = iter.next(end - index);
  ops.push(nextOp);
} replaced with {}
Mutant 343 in Delta.ts: end - index replaced with end + index
Mutant 344 in Delta.ts: index += Op.length(nextOp) replaced with index -= Op.length(nextOp)
Mutant 345 in Delta.ts: {
  const thisIter = new OpIterator(this.ops);
  const otherIter = new OpIterator(other.ops);
  const ops = [];
  const firstOther = otherIter.peek();
  if (firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null) {
    let firstLeft = firstOther.retain;
    while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
      firstLeft -= thisIter.peekLength();
      ops.push(thisIter.next());
    }
    if (firstOther.retain - firstLeft > 0) {
      otherIter.next(firstOther.retain - firstLeft);
    }
  }
  const delta = new Delta(ops);
  while (thisIter.hasNext() || otherIter.hasNext()) {
    if (otherIter.peekType() === 'insert') {
      delta.push(otherIter.next());
    } else if (thisIter.peekType() === 'delete') {
      delta.push(thisIter.next());
    } else {
      const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
      const thisOp = thisIter.next(length);
      const otherOp = otherIter.next(length);
      if (otherOp.retain) {
        const newOp: Op = {};
        if (typeof thisOp.retain === 'number') {
          newOp.retain = typeof otherOp.retain === 'number' ? length : otherOp.retain;
        } else {
          if (typeof otherOp.retain === 'number') {
            if (thisOp.retain == null) {
              newOp.insert = thisOp.insert;
            } else {
              newOp.retain = thisOp.retain;
            }
          } else {
            const action = thisOp.retain == null ? 'insert' : 'retain';
            const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
            const handler = Delta.getHandler(embedType);
            newOp[action] = {
              [embedType]: handler.compose(thisData, otherData, action === 'retain')
            };
          }
        }
        // Preserve null when composing with a retain, otherwise remove it for inserts
        const attributes = AttributeMap.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
        if (attributes) {
          newOp.attributes = attributes;
        }
        delta.push(newOp);

        // Optimization if rest of other is just retain
        if (!otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp)) {
          const rest = new Delta(thisIter.rest());
          return delta.concat(rest).chop();
        }

        // Other op should be delete, we could be an insert or retain
        // Insert + delete cancels out
      } else if (typeof otherOp.delete === 'number' && (typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null)) {
        delta.push(otherOp);
      }
    }
  }
  return delta.chop();
} replaced with {}
Mutant 346 in Delta.ts: [] replaced with ["Stryker was here"]
Mutant 347 in Delta.ts: firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null replaced with true
Mutant 348 in Delta.ts: firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null replaced with false
Mutant 349 in Delta.ts: firstOther != null && typeof firstOther.retain === 'number' && firstOther.attributes == null replaced with firstOther != null && typeof firstOther.retain === 'number' || firstOther.attributes == null
Mutant 350 in Delta.ts: firstOther != null && typeof firstOther.retain === 'number' replaced with true
Mutant 351 in Delta.ts: firstOther != null && typeof firstOther.retain === 'number' replaced with firstOther != null || typeof firstOther.retain === 'number'
Mutant 352 in Delta.ts: firstOther != null replaced with true
Mutant 353 in Delta.ts: firstOther != null replaced with firstOther == null
Mutant 354 in Delta.ts: typeof firstOther.retain === 'number' replaced with true
Mutant 355 in Delta.ts: typeof firstOther.retain === 'number' replaced with typeof firstOther.retain !== 'number'
Mutant 356 in Delta.ts: 'number' replaced with ""
Mutant 357 in Delta.ts: firstOther.attributes == null replaced with true
Mutant 358 in Delta.ts: firstOther.attributes == null replaced with firstOther.attributes != null
Mutant 359 in Delta.ts: {
  let firstLeft = firstOther.retain;
  while (thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft) {
    firstLeft -= thisIter.peekLength();
    ops.push(thisIter.next());
  }
  if (firstOther.retain - firstLeft > 0) {
    otherIter.next(firstOther.retain - firstLeft);
  }
} replaced with {}
Mutant 360 in Delta.ts: thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft replaced with false
Mutant 361 in Delta.ts: thisIter.peekType() === 'insert' && thisIter.peekLength() <= firstLeft replaced with thisIter.peekType() === 'insert' || thisIter.peekLength() <= firstLeft
Mutant 362 in Delta.ts: thisIter.peekType() === 'insert' replaced with true
Mutant 363 in Delta.ts: thisIter.peekType() === 'insert' replaced with thisIter.peekType() !== 'insert'
Mutant 364 in Delta.ts: 'insert' replaced with ""
Mutant 365 in Delta.ts: thisIter.peekLength() <= firstLeft replaced with true
Mutant 366 in Delta.ts: thisIter.peekLength() <= firstLeft replaced with thisIter.peekLength() < firstLeft
Mutant 367 in Delta.ts: thisIter.peekLength() <= firstLeft replaced with thisIter.peekLength() > firstLeft
Mutant 368 in Delta.ts: {
  firstLeft -= thisIter.peekLength();
  ops.push(thisIter.next());
} replaced with {}
Mutant 369 in Delta.ts: firstLeft -= thisIter.peekLength() replaced with firstLeft += thisIter.peekLength()
Mutant 370 in Delta.ts: firstOther.retain - firstLeft > 0 replaced with true
Mutant 371 in Delta.ts: firstOther.retain - firstLeft > 0 replaced with false
Mutant 372 in Delta.ts: firstOther.retain - firstLeft > 0 replaced with firstOther.retain - firstLeft >= 0
Mutant 373 in Delta.ts: firstOther.retain - firstLeft > 0 replaced with firstOther.retain - firstLeft <= 0
Mutant 374 in Delta.ts: firstOther.retain - firstLeft replaced with firstOther.retain + firstLeft
Mutant 375 in Delta.ts: {
  otherIter.next(firstOther.retain - firstLeft);
} replaced with {}
Mutant 376 in Delta.ts: firstOther.retain - firstLeft replaced with firstOther.retain + firstLeft
Mutant 377 in Delta.ts: thisIter.hasNext() || otherIter.hasNext() replaced with false
Mutant 378 in Delta.ts: thisIter.hasNext() || otherIter.hasNext() replaced with thisIter.hasNext() && otherIter.hasNext()
Mutant 379 in Delta.ts: {
  if (otherIter.peekType() === 'insert') {
    delta.push(otherIter.next());
  } else if (thisIter.peekType() === 'delete') {
    delta.push(thisIter.next());
  } else {
    const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    const thisOp = thisIter.next(length);
    const otherOp = otherIter.next(length);
    if (otherOp.retain) {
      const newOp: Op = {};
      if (typeof thisOp.retain === 'number') {
        newOp.retain = typeof otherOp.retain === 'number' ? length : otherOp.retain;
      } else {
        if (typeof otherOp.retain === 'number') {
          if (thisOp.retain == null) {
            newOp.insert = thisOp.insert;
          } else {
            newOp.retain = thisOp.retain;
          }
        } else {
          const action = thisOp.retain == null ? 'insert' : 'retain';
          const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
          const handler = Delta.getHandler(embedType);
          newOp[action] = {
            [embedType]: handler.compose(thisData, otherData, action === 'retain')
          };
        }
      }
      // Preserve null when composing with a retain, otherwise remove it for inserts
      const attributes = AttributeMap.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
      if (attributes) {
        newOp.attributes = attributes;
      }
      delta.push(newOp);

      // Optimization if rest of other is just retain
      if (!otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp)) {
        const rest = new Delta(thisIter.rest());
        return delta.concat(rest).chop();
      }

      // Other op should be delete, we could be an insert or retain
      // Insert + delete cancels out
    } else if (typeof otherOp.delete === 'number' && (typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null)) {
      delta.push(otherOp);
    }
  }
} replaced with {}
Mutant 380 in Delta.ts: otherIter.peekType() === 'insert' replaced with true
Mutant 381 in Delta.ts: otherIter.peekType() === 'insert' replaced with false
Mutant 382 in Delta.ts: otherIter.peekType() === 'insert' replaced with otherIter.peekType() !== 'insert'
Mutant 383 in Delta.ts: 'insert' replaced with ""
Mutant 384 in Delta.ts: {
  delta.push(otherIter.next());
} replaced with {}
Mutant 385 in Delta.ts: thisIter.peekType() === 'delete' replaced with true
Mutant 386 in Delta.ts: thisIter.peekType() === 'delete' replaced with false
Mutant 387 in Delta.ts: thisIter.peekType() === 'delete' replaced with thisIter.peekType() !== 'delete'
Mutant 388 in Delta.ts: 'delete' replaced with ""
Mutant 389 in Delta.ts: {
  delta.push(thisIter.next());
} replaced with {}
Mutant 390 in Delta.ts: {
  const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
  const thisOp = thisIter.next(length);
  const otherOp = otherIter.next(length);
  if (otherOp.retain) {
    const newOp: Op = {};
    if (typeof thisOp.retain === 'number') {
      newOp.retain = typeof otherOp.retain === 'number' ? length : otherOp.retain;
    } else {
      if (typeof otherOp.retain === 'number') {
        if (thisOp.retain == null) {
          newOp.insert = thisOp.insert;
        } else {
          newOp.retain = thisOp.retain;
        }
      } else {
        const action = thisOp.retain == null ? 'insert' : 'retain';
        const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
        const handler = Delta.getHandler(embedType);
        newOp[action] = {
          [embedType]: handler.compose(thisData, otherData, action === 'retain')
        };
      }
    }
    // Preserve null when composing with a retain, otherwise remove it for inserts
    const attributes = AttributeMap.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
    if (attributes) {
      newOp.attributes = attributes;
    }
    delta.push(newOp);

    // Optimization if rest of other is just retain
    if (!otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp)) {
      const rest = new Delta(thisIter.rest());
      return delta.concat(rest).chop();
    }

    // Other op should be delete, we could be an insert or retain
    // Insert + delete cancels out
  } else if (typeof otherOp.delete === 'number' && (typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null)) {
    delta.push(otherOp);
  }
} replaced with {}
Mutant 391 in Delta.ts: Math.min(thisIter.peekLength(), otherIter.peekLength()) replaced with Math.max(thisIter.peekLength(), otherIter.peekLength())
Mutant 392 in Delta.ts: otherOp.retain replaced with true
Mutant 393 in Delta.ts: otherOp.retain replaced with false
Mutant 394 in Delta.ts: {
  const newOp: Op = {};
  if (typeof thisOp.retain === 'number') {
    newOp.retain = typeof otherOp.retain === 'number' ? length : otherOp.retain;
  } else {
    if (typeof otherOp.retain === 'number') {
      if (thisOp.retain == null) {
        newOp.insert = thisOp.insert;
      } else {
        newOp.retain = thisOp.retain;
      }
    } else {
      const action = thisOp.retain == null ? 'insert' : 'retain';
      const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
      const handler = Delta.getHandler(embedType);
      newOp[action] = {
        [embedType]: handler.compose(thisData, otherData, action === 'retain')
      };
    }
  }
  // Preserve null when composing with a retain, otherwise remove it for inserts
  const attributes = AttributeMap.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
  if (attributes) {
    newOp.attributes = attributes;
  }
  delta.push(newOp);

  // Optimization if rest of other is just retain
  if (!otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp)) {
    const rest = new Delta(thisIter.rest());
    return delta.concat(rest).chop();
  }

  // Other op should be delete, we could be an insert or retain
  // Insert + delete cancels out
} replaced with {}
Mutant 395 in Delta.ts: typeof thisOp.retain === 'number' replaced with true
Mutant 396 in Delta.ts: typeof thisOp.retain === 'number' replaced with false
Mutant 397 in Delta.ts: typeof thisOp.retain === 'number' replaced with typeof thisOp.retain !== 'number'
Mutant 398 in Delta.ts: 'number' replaced with ""
Mutant 399 in Delta.ts: {
  newOp.retain = typeof otherOp.retain === 'number' ? length : otherOp.retain;
} replaced with {}
Mutant 400 in Delta.ts: typeof otherOp.retain === 'number' replaced with true
Mutant 401 in Delta.ts: typeof otherOp.retain === 'number' replaced with false
Mutant 402 in Delta.ts: typeof otherOp.retain === 'number' replaced with typeof otherOp.retain !== 'number'
Mutant 403 in Delta.ts: 'number' replaced with ""
Mutant 404 in Delta.ts: {
  if (typeof otherOp.retain === 'number') {
    if (thisOp.retain == null) {
      newOp.insert = thisOp.insert;
    } else {
      newOp.retain = thisOp.retain;
    }
  } else {
    const action = thisOp.retain == null ? 'insert' : 'retain';
    const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
    const handler = Delta.getHandler(embedType);
    newOp[action] = {
      [embedType]: handler.compose(thisData, otherData, action === 'retain')
    };
  }
} replaced with {}
Mutant 405 in Delta.ts: typeof otherOp.retain === 'number' replaced with true
Mutant 406 in Delta.ts: typeof otherOp.retain === 'number' replaced with false
Mutant 407 in Delta.ts: typeof otherOp.retain === 'number' replaced with typeof otherOp.retain !== 'number'
Mutant 408 in Delta.ts: 'number' replaced with ""
Mutant 409 in Delta.ts: {
  if (thisOp.retain == null) {
    newOp.insert = thisOp.insert;
  } else {
    newOp.retain = thisOp.retain;
  }
} replaced with {}
Mutant 410 in Delta.ts: thisOp.retain == null replaced with true
Mutant 411 in Delta.ts: thisOp.retain == null replaced with false
Mutant 412 in Delta.ts: thisOp.retain == null replaced with thisOp.retain != null
Mutant 413 in Delta.ts: {
  newOp.insert = thisOp.insert;
} replaced with {}
Mutant 414 in Delta.ts: {
  newOp.retain = thisOp.retain;
} replaced with {}
Mutant 415 in Delta.ts: {
  const action = thisOp.retain == null ? 'insert' : 'retain';
  const [embedType, thisData, otherData] = getEmbedTypeAndData(thisOp[action], otherOp.retain);
  const handler = Delta.getHandler(embedType);
  newOp[action] = {
    [embedType]: handler.compose(thisData, otherData, action === 'retain')
  };
} replaced with {}
Mutant 416 in Delta.ts: thisOp.retain == null replaced with true
Mutant 417 in Delta.ts: thisOp.retain == null replaced with false
Mutant 418 in Delta.ts: thisOp.retain == null replaced with thisOp.retain != null
Mutant 419 in Delta.ts: 'insert' replaced with ""
Mutant 420 in Delta.ts: 'retain' replaced with ""
Mutant 421 in Delta.ts: {
  [embedType]: handler.compose(thisData, otherData, action === 'retain')
} replaced with {}
Mutant 422 in Delta.ts: action === 'retain' replaced with true
Mutant 423 in Delta.ts: action === 'retain' replaced with false
Mutant 424 in Delta.ts: action === 'retain' replaced with action !== 'retain'
Mutant 425 in Delta.ts: 'retain' replaced with ""
Mutant 426 in Delta.ts: typeof thisOp.retain === 'number' replaced with true
Mutant 427 in Delta.ts: typeof thisOp.retain === 'number' replaced with false
Mutant 428 in Delta.ts: typeof thisOp.retain === 'number' replaced with typeof thisOp.retain !== 'number'
Mutant 429 in Delta.ts: 'number' replaced with ""
Mutant 430 in Delta.ts: attributes replaced with true
Mutant 431 in Delta.ts: attributes replaced with false
Mutant 432 in Delta.ts: {
  newOp.attributes = attributes;
} replaced with {}
Mutant 433 in Delta.ts: !otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp) replaced with true
Mutant 434 in Delta.ts: !otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp) replaced with false
Mutant 435 in Delta.ts: !otherIter.hasNext() && isEqual(delta.ops[delta.ops.length - 1], newOp) replaced with !otherIter.hasNext() || isEqual(delta.ops[delta.ops.length - 1], newOp)
Mutant 436 in Delta.ts: !otherIter.hasNext() replaced with otherIter.hasNext()
Mutant 437 in Delta.ts: delta.ops.length - 1 replaced with delta.ops.length + 1
Mutant 438 in Delta.ts: {
  const rest = new Delta(thisIter.rest());
  return delta.concat(rest).chop();
} replaced with {}
Mutant 439 in Delta.ts: typeof otherOp.delete === 'number' && (typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null) replaced with true
Mutant 440 in Delta.ts: typeof otherOp.delete === 'number' && (typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null) replaced with false
Mutant 441 in Delta.ts: typeof otherOp.delete === 'number' && (typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null) replaced with typeof otherOp.delete === 'number' || typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null
Mutant 442 in Delta.ts: typeof otherOp.delete === 'number' replaced with true
Mutant 443 in Delta.ts: typeof otherOp.delete === 'number' replaced with typeof otherOp.delete !== 'number'
Mutant 444 in Delta.ts: 'number' replaced with ""
Mutant 445 in Delta.ts: typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null replaced with true
Mutant 446 in Delta.ts: typeof thisOp.retain === 'number' || typeof thisOp.retain === 'object' && thisOp.retain !== null replaced with typeof thisOp.retain === 'number' && typeof thisOp.retain === 'object' && thisOp.retain !== null
Mutant 447 in Delta.ts: typeof thisOp.retain === 'number' replaced with false
Mutant 448 in Delta.ts: typeof thisOp.retain === 'number' replaced with typeof thisOp.retain !== 'number'
Mutant 449 in Delta.ts: 'number' replaced with ""
Mutant 450 in Delta.ts: typeof thisOp.retain === 'object' && thisOp.retain !== null replaced with false
Mutant 451 in Delta.ts: typeof thisOp.retain === 'object' && thisOp.retain !== null replaced with typeof thisOp.retain === 'object' || thisOp.retain !== null
Mutant 452 in Delta.ts: typeof thisOp.retain === 'object' replaced with true
Mutant 453 in Delta.ts: typeof thisOp.retain === 'object' replaced with typeof thisOp.retain !== 'object'
Mutant 454 in Delta.ts: 'object' replaced with ""
Mutant 455 in Delta.ts: thisOp.retain !== null replaced with true
Mutant 456 in Delta.ts: thisOp.retain !== null replaced with thisOp.retain === null
Mutant 457 in Delta.ts: {
  delta.push(otherOp);
} replaced with {}
Mutant 458 in Delta.ts: {
  const delta = new Delta(this.ops.slice());
  if (other.ops.length > 0) {
    delta.push(other.ops[0]);
    delta.ops = delta.ops.concat(other.ops.slice(1));
  }
  return delta;
} replaced with {}
Mutant 459 in Delta.ts: this.ops.slice() replaced with this.ops
Mutant 460 in Delta.ts: other.ops.length > 0 replaced with true
Mutant 461 in Delta.ts: other.ops.length > 0 replaced with false
Mutant 462 in Delta.ts: other.ops.length > 0 replaced with other.ops.length >= 0
Mutant 463 in Delta.ts: other.ops.length > 0 replaced with other.ops.length <= 0
Mutant 464 in Delta.ts: {
  delta.push(other.ops[0]);
  delta.ops = delta.ops.concat(other.ops.slice(1));
} replaced with {}
Mutant 465 in Delta.ts: other.ops.slice(1) replaced with other.ops
Mutant 466 in Delta.ts: {
  if (this.ops === other.ops) {
    return new Delta();
  }
  const strings = [this, other].map(delta => {
    return delta.map(op => {
      if (op.insert != null) {
        return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
      }
      const prep = delta === other ? 'on' : 'with';
      throw new Error('diff() called ' + prep + ' non-document');
    }).join('');
  });
  const retDelta = new Delta();
  const diffResult = diff(strings[0], strings[1], cursor);
  const thisIter = new OpIterator(this.ops);
  const otherIter = new OpIterator(other.ops);
  diffResult.forEach((component: diff.Diff) => {
    let length = component[1].length;
    while (length > 0) {
      let opLength = 0;
      switch (component[0]) {
        case diff.INSERT:
          opLength = Math.min(otherIter.peekLength(), length);
          retDelta.push(otherIter.next(opLength));
          break;
        case diff.DELETE:
          opLength = Math.min(length, thisIter.peekLength());
          thisIter.next(opLength);
          retDelta.delete(opLength);
          break;
        case diff.EQUAL:
          opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
          const thisOp = thisIter.next(opLength);
          const otherOp = otherIter.next(opLength);
          if (isEqual(thisOp.insert, otherOp.insert)) {
            retDelta.retain(opLength, AttributeMap.diff(thisOp.attributes, otherOp.attributes));
          } else {
            retDelta.push(otherOp).delete(opLength);
          }
          break;
      }
      length -= opLength;
    }
  });
  return retDelta.chop();
} replaced with {}
Mutant 467 in Delta.ts: this.ops === other.ops replaced with true
Mutant 468 in Delta.ts: this.ops === other.ops replaced with false
Mutant 469 in Delta.ts: this.ops === other.ops replaced with this.ops !== other.ops
Mutant 470 in Delta.ts: {
  return new Delta();
} replaced with {}
Mutant 471 in Delta.ts: [this, other] replaced with []
Mutant 472 in Delta.ts: {
  return delta.map(op => {
    if (op.insert != null) {
      return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
    }
    const prep = delta === other ? 'on' : 'with';
    throw new Error('diff() called ' + prep + ' non-document');
  }).join('');
} replaced with {}
Mutant 473 in Delta.ts: {
  if (op.insert != null) {
    return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
  }
  const prep = delta === other ? 'on' : 'with';
  throw new Error('diff() called ' + prep + ' non-document');
} replaced with {}
Mutant 474 in Delta.ts: op.insert != null replaced with true
Mutant 475 in Delta.ts: op.insert != null replaced with false
Mutant 476 in Delta.ts: op.insert != null replaced with op.insert == null
Mutant 477 in Delta.ts: {
  return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
} replaced with {}
Mutant 478 in Delta.ts: typeof op.insert === 'string' replaced with true
Mutant 479 in Delta.ts: typeof op.insert === 'string' replaced with false
Mutant 480 in Delta.ts: typeof op.insert === 'string' replaced with typeof op.insert !== 'string'
Mutant 481 in Delta.ts: 'string' replaced with ""
Mutant 482 in Delta.ts: delta === other replaced with true
Mutant 483 in Delta.ts: delta === other replaced with false
Mutant 484 in Delta.ts: delta === other replaced with delta !== other
Mutant 485 in Delta.ts: 'on' replaced with ""
Mutant 486 in Delta.ts: 'with' replaced with ""
Mutant 487 in Delta.ts: 'diff() called ' replaced with ""
Mutant 488 in Delta.ts: ' non-document' replaced with ""
Mutant 489 in Delta.ts: '' replaced with "Stryker was here!"
Mutant 490 in Delta.ts: {
  let length = component[1].length;
  while (length > 0) {
    let opLength = 0;
    switch (component[0]) {
      case diff.INSERT:
        opLength = Math.min(otherIter.peekLength(), length);
        retDelta.push(otherIter.next(opLength));
        break;
      case diff.DELETE:
        opLength = Math.min(length, thisIter.peekLength());
        thisIter.next(opLength);
        retDelta.delete(opLength);
        break;
      case diff.EQUAL:
        opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
        const thisOp = thisIter.next(opLength);
        const otherOp = otherIter.next(opLength);
        if (isEqual(thisOp.insert, otherOp.insert)) {
          retDelta.retain(opLength, AttributeMap.diff(thisOp.attributes, otherOp.attributes));
        } else {
          retDelta.push(otherOp).delete(opLength);
        }
        break;
    }
    length -= opLength;
  }
} replaced with {}
Mutant 491 in Delta.ts: length > 0 replaced with false
Mutant 492 in Delta.ts: length > 0 replaced with length >= 0
Mutant 493 in Delta.ts: length > 0 replaced with length <= 0
Mutant 494 in Delta.ts: {
  let opLength = 0;
  switch (component[0]) {
    case diff.INSERT:
      opLength = Math.min(otherIter.peekLength(), length);
      retDelta.push(otherIter.next(opLength));
      break;
    case diff.DELETE:
      opLength = Math.min(length, thisIter.peekLength());
      thisIter.next(opLength);
      retDelta.delete(opLength);
      break;
    case diff.EQUAL:
      opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
      const thisOp = thisIter.next(opLength);
      const otherOp = otherIter.next(opLength);
      if (isEqual(thisOp.insert, otherOp.insert)) {
        retDelta.retain(opLength, AttributeMap.diff(thisOp.attributes, otherOp.attributes));
      } else {
        retDelta.push(otherOp).delete(opLength);
      }
      break;
  }
  length -= opLength;
} replaced with {}
Mutant 495 in Delta.ts: case diff.INSERT:
  opLength = Math.min(otherIter.peekLength(), length);
  retDelta.push(otherIter.next(opLength));
  break; replaced with case diff.INSERT:
Mutant 496 in Delta.ts: Math.min(otherIter.peekLength(), length) replaced with Math.max(otherIter.peekLength(), length)
Mutant 497 in Delta.ts: case diff.DELETE:
  opLength = Math.min(length, thisIter.peekLength());
  thisIter.next(opLength);
  retDelta.delete(opLength);
  break; replaced with case diff.DELETE:
Mutant 498 in Delta.ts: Math.min(length, thisIter.peekLength()) replaced with Math.max(length, thisIter.peekLength())
Mutant 499 in Delta.ts: case diff.EQUAL:
  opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
  const thisOp = thisIter.next(opLength);
  const otherOp = otherIter.next(opLength);
  if (isEqual(thisOp.insert, otherOp.insert)) {
    retDelta.retain(opLength, AttributeMap.diff(thisOp.attributes, otherOp.attributes));
  } else {
    retDelta.push(otherOp).delete(opLength);
  }
  break; replaced with case diff.EQUAL:
Mutant 500 in Delta.ts: Math.min(thisIter.peekLength(), otherIter.peekLength(), length) replaced with Math.max(thisIter.peekLength(), otherIter.peekLength(), length)
Mutant 501 in Delta.ts: isEqual(thisOp.insert, otherOp.insert) replaced with true
Mutant 502 in Delta.ts: isEqual(thisOp.insert, otherOp.insert) replaced with false
Mutant 503 in Delta.ts: {
  retDelta.retain(opLength, AttributeMap.diff(thisOp.attributes, otherOp.attributes));
} replaced with {}
Mutant 504 in Delta.ts: {
  retDelta.push(otherOp).delete(opLength);
} replaced with {}
Mutant 505 in Delta.ts: length -= opLength replaced with length += opLength
Mutant 506 in Delta.ts: '\n' replaced with ""
Mutant 507 in Delta.ts: {
  const iter = new OpIterator(this.ops);
  let line = new Delta();
  let i = 0;
  while (iter.hasNext()) {
    if (iter.peekType() !== 'insert') {
      return;
    }
    const thisOp = iter.peek();
    const start = Op.length(thisOp) - iter.peekLength();
    const index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;
    if (index < 0) {
      line.push(iter.next());
    } else if (index > 0) {
      line.push(iter.next(index));
    } else {
      if (predicate(line, iter.next(1).attributes || {}, i) === false) {
        return;
      }
      i += 1;
      line = new Delta();
    }
  }
  if (line.length() > 0) {
    predicate(line, {}, i);
  }
} replaced with {}
Mutant 508 in Delta.ts: iter.hasNext() replaced with false
Mutant 509 in Delta.ts: {
  if (iter.peekType() !== 'insert') {
    return;
  }
  const thisOp = iter.peek();
  const start = Op.length(thisOp) - iter.peekLength();
  const index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;
  if (index < 0) {
    line.push(iter.next());
  } else if (index > 0) {
    line.push(iter.next(index));
  } else {
    if (predicate(line, iter.next(1).attributes || {}, i) === false) {
      return;
    }
    i += 1;
    line = new Delta();
  }
} replaced with {}
Mutant 510 in Delta.ts: iter.peekType() !== 'insert' replaced with true
Mutant 511 in Delta.ts: iter.peekType() !== 'insert' replaced with false
Mutant 512 in Delta.ts: iter.peekType() !== 'insert' replaced with iter.peekType() === 'insert'
Mutant 513 in Delta.ts: 'insert' replaced with ""
Mutant 514 in Delta.ts: {
  return;
} replaced with {}
Mutant 515 in Delta.ts: Op.length(thisOp) - iter.peekLength() replaced with Op.length(thisOp) + iter.peekLength()
Mutant 516 in Delta.ts: typeof thisOp.insert === 'string' replaced with true
Mutant 517 in Delta.ts: typeof thisOp.insert === 'string' replaced with false
Mutant 518 in Delta.ts: typeof thisOp.insert === 'string' replaced with typeof thisOp.insert !== 'string'
Mutant 519 in Delta.ts: 'string' replaced with ""
Mutant 520 in Delta.ts: thisOp.insert.indexOf(newline, start) - start replaced with thisOp.insert.indexOf(newline, start) + start
Mutant 521 in Delta.ts: -1 replaced with +1
Mutant 522 in Delta.ts: index < 0 replaced with true
Mutant 523 in Delta.ts: index < 0 replaced with false
Mutant 524 in Delta.ts: index < 0 replaced with index <= 0
Mutant 525 in Delta.ts: index < 0 replaced with index >= 0
Mutant 526 in Delta.ts: {
  line.push(iter.next());
} replaced with {}
Mutant 527 in Delta.ts: index > 0 replaced with true
Mutant 528 in Delta.ts: index > 0 replaced with false
Mutant 529 in Delta.ts: index > 0 replaced with index >= 0
Mutant 530 in Delta.ts: index > 0 replaced with index <= 0
Mutant 531 in Delta.ts: {
  line.push(iter.next(index));
} replaced with {}
Mutant 532 in Delta.ts: {
  if (predicate(line, iter.next(1).attributes || {}, i) === false) {
    return;
  }
  i += 1;
  line = new Delta();
} replaced with {}
Mutant 533 in Delta.ts: predicate(line, iter.next(1).attributes || {}, i) === false replaced with true
Mutant 534 in Delta.ts: predicate(line, iter.next(1).attributes || {}, i) === false replaced with false
Mutant 535 in Delta.ts: predicate(line, iter.next(1).attributes || {}, i) === false replaced with predicate(line, iter.next(1).attributes || {}, i) !== false
Mutant 536 in Delta.ts: iter.next(1).attributes || {} replaced with true
Mutant 537 in Delta.ts: iter.next(1).attributes || {} replaced with false
Mutant 538 in Delta.ts: iter.next(1).attributes || {} replaced with iter.next(1).attributes && {}
Mutant 539 in Delta.ts: false replaced with true
Mutant 540 in Delta.ts: {
  return;
} replaced with {}
Mutant 541 in Delta.ts: i += 1 replaced with i -= 1
Mutant 542 in Delta.ts: line.length() > 0 replaced with true
Mutant 543 in Delta.ts: line.length() > 0 replaced with false
Mutant 544 in Delta.ts: line.length() > 0 replaced with line.length() >= 0
Mutant 545 in Delta.ts: line.length() > 0 replaced with line.length() <= 0
Mutant 546 in Delta.ts: {
  predicate(line, {}, i);
} replaced with {}
Mutant 547 in Delta.ts: {
  const inverted = new Delta();
  this.reduce((baseIndex, op) => {
    if (op.insert) {
      inverted.delete(Op.length(op));
    } else if (typeof op.retain === 'number' && op.attributes == null) {
      inverted.retain(op.retain);
      return baseIndex + op.retain;
    } else if (op.delete || typeof op.retain === 'number') {
      const length = ((op.delete || op.retain) as number);
      const slice = base.slice(baseIndex, baseIndex + length);
      slice.forEach(baseOp => {
        if (op.delete) {
          inverted.push(baseOp);
        } else if (op.retain && op.attributes) {
          inverted.retain(Op.length(baseOp), AttributeMap.invert(op.attributes, baseOp.attributes));
        }
      });
      return baseIndex + length;
    } else if (typeof op.retain === 'object' && op.retain !== null) {
      const slice = base.slice(baseIndex, baseIndex + 1);
      const baseOp = new OpIterator(slice.ops).next();
      const [embedType, opData, baseOpData] = getEmbedTypeAndData(op.retain, baseOp.insert);
      const handler = Delta.getHandler(embedType);
      inverted.retain({
        [embedType]: handler.invert(opData, baseOpData)
      }, AttributeMap.invert(op.attributes, baseOp.attributes));
      return baseIndex + 1;
    }
    return baseIndex;
  }, 0);
  return inverted.chop();
} replaced with {}
Mutant 548 in Delta.ts: {
  if (op.insert) {
    inverted.delete(Op.length(op));
  } else if (typeof op.retain === 'number' && op.attributes == null) {
    inverted.retain(op.retain);
    return baseIndex + op.retain;
  } else if (op.delete || typeof op.retain === 'number') {
    const length = ((op.delete || op.retain) as number);
    const slice = base.slice(baseIndex, baseIndex + length);
    slice.forEach(baseOp => {
      if (op.delete) {
        inverted.push(baseOp);
      } else if (op.retain && op.attributes) {
        inverted.retain(Op.length(baseOp), AttributeMap.invert(op.attributes, baseOp.attributes));
      }
    });
    return baseIndex + length;
  } else if (typeof op.retain === 'object' && op.retain !== null) {
    const slice = base.slice(baseIndex, baseIndex + 1);
    const baseOp = new OpIterator(slice.ops).next();
    const [embedType, opData, baseOpData] = getEmbedTypeAndData(op.retain, baseOp.insert);
    const handler = Delta.getHandler(embedType);
    inverted.retain({
      [embedType]: handler.invert(opData, baseOpData)
    }, AttributeMap.invert(op.attributes, baseOp.attributes));
    return baseIndex + 1;
  }
  return baseIndex;
} replaced with {}
Mutant 549 in Delta.ts: op.insert replaced with true
Mutant 550 in Delta.ts: op.insert replaced with false
Mutant 551 in Delta.ts: {
  inverted.delete(Op.length(op));
} replaced with {}
Mutant 552 in Delta.ts: typeof op.retain === 'number' && op.attributes == null replaced with true
Mutant 553 in Delta.ts: typeof op.retain === 'number' && op.attributes == null replaced with false
Mutant 554 in Delta.ts: typeof op.retain === 'number' && op.attributes == null replaced with typeof op.retain === 'number' || op.attributes == null
Mutant 555 in Delta.ts: typeof op.retain === 'number' replaced with true
Mutant 556 in Delta.ts: typeof op.retain === 'number' replaced with typeof op.retain !== 'number'
Mutant 557 in Delta.ts: 'number' replaced with ""
Mutant 558 in Delta.ts: op.attributes == null replaced with true
Mutant 559 in Delta.ts: op.attributes == null replaced with op.attributes != null
Mutant 560 in Delta.ts: {
  inverted.retain(op.retain);
  return baseIndex + op.retain;
} replaced with {}
Mutant 561 in Delta.ts: baseIndex + op.retain replaced with baseIndex - op.retain
Mutant 562 in Delta.ts: op.delete || typeof op.retain === 'number' replaced with true
Mutant 563 in Delta.ts: op.delete || typeof op.retain === 'number' replaced with false
Mutant 564 in Delta.ts: op.delete || typeof op.retain === 'number' replaced with op.delete && typeof op.retain === 'number'
Mutant 565 in Delta.ts: typeof op.retain === 'number' replaced with false
Mutant 566 in Delta.ts: typeof op.retain === 'number' replaced with typeof op.retain !== 'number'
Mutant 567 in Delta.ts: 'number' replaced with ""
Mutant 568 in Delta.ts: {
  const length = ((op.delete || op.retain) as number);
  const slice = base.slice(baseIndex, baseIndex + length);
  slice.forEach(baseOp => {
    if (op.delete) {
      inverted.push(baseOp);
    } else if (op.retain && op.attributes) {
      inverted.retain(Op.length(baseOp), AttributeMap.invert(op.attributes, baseOp.attributes));
    }
  });
  return baseIndex + length;
} replaced with {}
Mutant 569 in Delta.ts: base.slice(baseIndex, baseIndex + length) replaced with base
Mutant 570 in Delta.ts: baseIndex + length replaced with baseIndex - length
Mutant 571 in Delta.ts: {
  if (op.delete) {
    inverted.push(baseOp);
  } else if (op.retain && op.attributes) {
    inverted.retain(Op.length(baseOp), AttributeMap.invert(op.attributes, baseOp.attributes));
  }
} replaced with {}
Mutant 572 in Delta.ts: op.delete replaced with true
Mutant 573 in Delta.ts: op.delete replaced with false
Mutant 574 in Delta.ts: {
  inverted.push(baseOp);
} replaced with {}
Mutant 575 in Delta.ts: op.retain && op.attributes replaced with true
Mutant 576 in Delta.ts: op.retain && op.attributes replaced with false
Mutant 577 in Delta.ts: op.retain && op.attributes replaced with op.retain || op.attributes
Mutant 578 in Delta.ts: {
  inverted.retain(Op.length(baseOp), AttributeMap.invert(op.attributes, baseOp.attributes));
} replaced with {}
Mutant 579 in Delta.ts: baseIndex + length replaced with baseIndex - length
Mutant 580 in Delta.ts: typeof op.retain === 'object' && op.retain !== null replaced with true
Mutant 581 in Delta.ts: typeof op.retain === 'object' && op.retain !== null replaced with false
Mutant 582 in Delta.ts: typeof op.retain === 'object' && op.retain !== null replaced with typeof op.retain === 'object' || op.retain !== null
Mutant 583 in Delta.ts: typeof op.retain === 'object' replaced with true
Mutant 584 in Delta.ts: typeof op.retain === 'object' replaced with typeof op.retain !== 'object'
Mutant 585 in Delta.ts: 'object' replaced with ""
Mutant 586 in Delta.ts: op.retain !== null replaced with true
Mutant 587 in Delta.ts: op.retain !== null replaced with op.retain === null
Mutant 588 in Delta.ts: {
  const slice = base.slice(baseIndex, baseIndex + 1);
  const baseOp = new OpIterator(slice.ops).next();
  const [embedType, opData, baseOpData] = getEmbedTypeAndData(op.retain, baseOp.insert);
  const handler = Delta.getHandler(embedType);
  inverted.retain({
    [embedType]: handler.invert(opData, baseOpData)
  }, AttributeMap.invert(op.attributes, baseOp.attributes));
  return baseIndex + 1;
} replaced with {}
Mutant 589 in Delta.ts: base.slice(baseIndex, baseIndex + 1) replaced with base
Mutant 590 in Delta.ts: baseIndex + 1 replaced with baseIndex - 1
Mutant 591 in Delta.ts: {
  [embedType]: handler.invert(opData, baseOpData)
} replaced with {}
Mutant 592 in Delta.ts: baseIndex + 1 replaced with baseIndex - 1
Mutant 593 in Delta.ts: false replaced with true
Mutant 594 in Delta.ts: {
  priority = !!priority;
  if (typeof arg === 'number') {
    return this.transformPosition(arg, priority);
  }
  const other: Delta = arg;
  const thisIter = new OpIterator(this.ops);
  const otherIter = new OpIterator(other.ops);
  const delta = new Delta();
  while (thisIter.hasNext() || otherIter.hasNext()) {
    if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
      delta.retain(Op.length(thisIter.next()));
    } else if (otherIter.peekType() === 'insert') {
      delta.push(otherIter.next());
    } else {
      const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
      const thisOp = thisIter.next(length);
      const otherOp = otherIter.next(length);
      if (thisOp.delete) {
        // Our delete either makes their delete redundant or removes their retain
        continue;
      } else if (otherOp.delete) {
        delta.push(otherOp);
      } else {
        const thisData = thisOp.retain;
        const otherData = otherOp.retain;
        let transformedData: Op['retain'] = typeof otherData === 'object' && otherData !== null ? otherData : length;
        if (typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null) {
          const embedType = Object.keys(thisData)[0];
          if (embedType === Object.keys(otherData)[0]) {
            const handler = Delta.getHandler(embedType);
            if (handler) {
              transformedData = {
                [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
              };
            }
          }
        }

        // We retain either their retain or insert
        delta.retain(transformedData, AttributeMap.transform(thisOp.attributes, otherOp.attributes, priority));
      }
    }
  }
  return delta.chop();
} replaced with {}
Mutant 595 in Delta.ts: !!priority replaced with !priority
Mutant 596 in Delta.ts: !priority replaced with priority
Mutant 597 in Delta.ts: typeof arg === 'number' replaced with true
Mutant 598 in Delta.ts: typeof arg === 'number' replaced with false
Mutant 599 in Delta.ts: typeof arg === 'number' replaced with typeof arg !== 'number'
Mutant 600 in Delta.ts: 'number' replaced with ""
Mutant 601 in Delta.ts: {
  return this.transformPosition(arg, priority);
} replaced with {}
Mutant 602 in Delta.ts: thisIter.hasNext() || otherIter.hasNext() replaced with false
Mutant 603 in Delta.ts: thisIter.hasNext() || otherIter.hasNext() replaced with thisIter.hasNext() && otherIter.hasNext()
Mutant 604 in Delta.ts: {
  if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
    delta.retain(Op.length(thisIter.next()));
  } else if (otherIter.peekType() === 'insert') {
    delta.push(otherIter.next());
  } else {
    const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
    const thisOp = thisIter.next(length);
    const otherOp = otherIter.next(length);
    if (thisOp.delete) {
      // Our delete either makes their delete redundant or removes their retain
      continue;
    } else if (otherOp.delete) {
      delta.push(otherOp);
    } else {
      const thisData = thisOp.retain;
      const otherData = otherOp.retain;
      let transformedData: Op['retain'] = typeof otherData === 'object' && otherData !== null ? otherData : length;
      if (typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null) {
        const embedType = Object.keys(thisData)[0];
        if (embedType === Object.keys(otherData)[0]) {
          const handler = Delta.getHandler(embedType);
          if (handler) {
            transformedData = {
              [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
            };
          }
        }
      }

      // We retain either their retain or insert
      delta.retain(transformedData, AttributeMap.transform(thisOp.attributes, otherOp.attributes, priority));
    }
  }
} replaced with {}
Mutant 605 in Delta.ts: thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert') replaced with true
Mutant 606 in Delta.ts: thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert') replaced with false
Mutant 607 in Delta.ts: thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert') replaced with thisIter.peekType() === 'insert' || priority || otherIter.peekType() !== 'insert'
Mutant 608 in Delta.ts: thisIter.peekType() === 'insert' replaced with true
Mutant 609 in Delta.ts: thisIter.peekType() === 'insert' replaced with thisIter.peekType() !== 'insert'
Mutant 610 in Delta.ts: 'insert' replaced with ""
Mutant 611 in Delta.ts: priority || otherIter.peekType() !== 'insert' replaced with true
Mutant 612 in Delta.ts: priority || otherIter.peekType() !== 'insert' replaced with priority && otherIter.peekType() !== 'insert'
Mutant 613 in Delta.ts: otherIter.peekType() !== 'insert' replaced with false
Mutant 614 in Delta.ts: otherIter.peekType() !== 'insert' replaced with otherIter.peekType() === 'insert'
Mutant 615 in Delta.ts: 'insert' replaced with ""
Mutant 616 in Delta.ts: {
  delta.retain(Op.length(thisIter.next()));
} replaced with {}
Mutant 617 in Delta.ts: otherIter.peekType() === 'insert' replaced with true
Mutant 618 in Delta.ts: otherIter.peekType() === 'insert' replaced with false
Mutant 619 in Delta.ts: otherIter.peekType() === 'insert' replaced with otherIter.peekType() !== 'insert'
Mutant 620 in Delta.ts: 'insert' replaced with ""
Mutant 621 in Delta.ts: {
  delta.push(otherIter.next());
} replaced with {}
Mutant 622 in Delta.ts: {
  const length = Math.min(thisIter.peekLength(), otherIter.peekLength());
  const thisOp = thisIter.next(length);
  const otherOp = otherIter.next(length);
  if (thisOp.delete) {
    // Our delete either makes their delete redundant or removes their retain
    continue;
  } else if (otherOp.delete) {
    delta.push(otherOp);
  } else {
    const thisData = thisOp.retain;
    const otherData = otherOp.retain;
    let transformedData: Op['retain'] = typeof otherData === 'object' && otherData !== null ? otherData : length;
    if (typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null) {
      const embedType = Object.keys(thisData)[0];
      if (embedType === Object.keys(otherData)[0]) {
        const handler = Delta.getHandler(embedType);
        if (handler) {
          transformedData = {
            [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
          };
        }
      }
    }

    // We retain either their retain or insert
    delta.retain(transformedData, AttributeMap.transform(thisOp.attributes, otherOp.attributes, priority));
  }
} replaced with {}
Mutant 623 in Delta.ts: Math.min(thisIter.peekLength(), otherIter.peekLength()) replaced with Math.max(thisIter.peekLength(), otherIter.peekLength())
Mutant 624 in Delta.ts: thisOp.delete replaced with true
Mutant 625 in Delta.ts: thisOp.delete replaced with false
Mutant 626 in Delta.ts: {
  // Our delete either makes their delete redundant or removes their retain
  continue;
} replaced with {}
Mutant 627 in Delta.ts: otherOp.delete replaced with true
Mutant 628 in Delta.ts: otherOp.delete replaced with false
Mutant 629 in Delta.ts: {
  delta.push(otherOp);
} replaced with {}
Mutant 630 in Delta.ts: {
  const thisData = thisOp.retain;
  const otherData = otherOp.retain;
  let transformedData: Op['retain'] = typeof otherData === 'object' && otherData !== null ? otherData : length;
  if (typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null) {
    const embedType = Object.keys(thisData)[0];
    if (embedType === Object.keys(otherData)[0]) {
      const handler = Delta.getHandler(embedType);
      if (handler) {
        transformedData = {
          [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
        };
      }
    }
  }

  // We retain either their retain or insert
  delta.retain(transformedData, AttributeMap.transform(thisOp.attributes, otherOp.attributes, priority));
} replaced with {}
Mutant 631 in Delta.ts: typeof otherData === 'object' && otherData !== null replaced with true
Mutant 632 in Delta.ts: typeof otherData === 'object' && otherData !== null replaced with false
Mutant 633 in Delta.ts: typeof otherData === 'object' && otherData !== null replaced with typeof otherData === 'object' || otherData !== null
Mutant 634 in Delta.ts: typeof otherData === 'object' replaced with true
Mutant 635 in Delta.ts: typeof otherData === 'object' replaced with typeof otherData !== 'object'
Mutant 636 in Delta.ts: 'object' replaced with ""
Mutant 637 in Delta.ts: otherData !== null replaced with true
Mutant 638 in Delta.ts: otherData !== null replaced with otherData === null
Mutant 639 in Delta.ts: typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null replaced with true
Mutant 640 in Delta.ts: typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null replaced with false
Mutant 641 in Delta.ts: typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' && otherData !== null replaced with typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' || otherData !== null
Mutant 642 in Delta.ts: typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' replaced with true
Mutant 643 in Delta.ts: typeof thisData === 'object' && thisData !== null && typeof otherData === 'object' replaced with typeof thisData === 'object' && thisData !== null || typeof otherData === 'object'
Mutant 644 in Delta.ts: typeof thisData === 'object' && thisData !== null replaced with true
Mutant 645 in Delta.ts: typeof thisData === 'object' && thisData !== null replaced with typeof thisData === 'object' || thisData !== null
Mutant 646 in Delta.ts: typeof thisData === 'object' replaced with true
Mutant 647 in Delta.ts: typeof thisData === 'object' replaced with typeof thisData !== 'object'
Mutant 648 in Delta.ts: 'object' replaced with ""
Mutant 649 in Delta.ts: thisData !== null replaced with true
Mutant 650 in Delta.ts: thisData !== null replaced with thisData === null
Mutant 651 in Delta.ts: typeof otherData === 'object' replaced with true
Mutant 652 in Delta.ts: typeof otherData === 'object' replaced with typeof otherData !== 'object'
Mutant 653 in Delta.ts: 'object' replaced with ""
Mutant 654 in Delta.ts: otherData !== null replaced with true
Mutant 655 in Delta.ts: otherData !== null replaced with otherData === null
Mutant 656 in Delta.ts: {
  const embedType = Object.keys(thisData)[0];
  if (embedType === Object.keys(otherData)[0]) {
    const handler = Delta.getHandler(embedType);
    if (handler) {
      transformedData = {
        [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
      };
    }
  }
} replaced with {}
Mutant 657 in Delta.ts: embedType === Object.keys(otherData)[0] replaced with true
Mutant 658 in Delta.ts: embedType === Object.keys(otherData)[0] replaced with false
Mutant 659 in Delta.ts: embedType === Object.keys(otherData)[0] replaced with embedType !== Object.keys(otherData)[0]
Mutant 660 in Delta.ts: {
  const handler = Delta.getHandler(embedType);
  if (handler) {
    transformedData = {
      [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
    };
  }
} replaced with {}
Mutant 661 in Delta.ts: handler replaced with true
Mutant 662 in Delta.ts: handler replaced with false
Mutant 663 in Delta.ts: {
  transformedData = {
    [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
  };
} replaced with {}
Mutant 664 in Delta.ts: {
  [embedType]: handler.transform(thisData[embedType], otherData[embedType], priority)
} replaced with {}
Mutant 665 in Delta.ts: false replaced with true
Mutant 666 in Delta.ts: {
  priority = !!priority;
  const thisIter = new OpIterator(this.ops);
  let offset = 0;
  while (thisIter.hasNext() && offset <= index) {
    const length = thisIter.peekLength();
    const nextType = thisIter.peekType();
    thisIter.next();
    if (nextType === 'delete') {
      index -= Math.min(length, index - offset);
      continue;
    } else if (nextType === 'insert' && (offset < index || !priority)) {
      index += length;
    }
    offset += length;
  }
  return index;
} replaced with {}
Mutant 667 in Delta.ts: !!priority replaced with !priority
Mutant 668 in Delta.ts: !priority replaced with priority
Mutant 669 in Delta.ts: thisIter.hasNext() && offset <= index replaced with false
Mutant 670 in Delta.ts: thisIter.hasNext() && offset <= index replaced with thisIter.hasNext() || offset <= index
Mutant 671 in Delta.ts: offset <= index replaced with true
Mutant 672 in Delta.ts: offset <= index replaced with offset < index
Mutant 673 in Delta.ts: offset <= index replaced with offset > index
Mutant 674 in Delta.ts: {
  const length = thisIter.peekLength();
  const nextType = thisIter.peekType();
  thisIter.next();
  if (nextType === 'delete') {
    index -= Math.min(length, index - offset);
    continue;
  } else if (nextType === 'insert' && (offset < index || !priority)) {
    index += length;
  }
  offset += length;
} replaced with {}
Mutant 675 in Delta.ts: nextType === 'delete' replaced with true
Mutant 676 in Delta.ts: nextType === 'delete' replaced with false
Mutant 677 in Delta.ts: nextType === 'delete' replaced with nextType !== 'delete'
Mutant 678 in Delta.ts: 'delete' replaced with ""
Mutant 679 in Delta.ts: {
  index -= Math.min(length, index - offset);
  continue;
} replaced with {}
Mutant 680 in Delta.ts: index -= Math.min(length, index - offset) replaced with index += Math.min(length, index - offset)
Mutant 681 in Delta.ts: Math.min(length, index - offset) replaced with Math.max(length, index - offset)
Mutant 682 in Delta.ts: index - offset replaced with index + offset
Mutant 683 in Delta.ts: nextType === 'insert' && (offset < index || !priority) replaced with true
Mutant 684 in Delta.ts: nextType === 'insert' && (offset < index || !priority) replaced with false
Mutant 685 in Delta.ts: nextType === 'insert' && (offset < index || !priority) replaced with nextType === 'insert' || offset < index || !priority
Mutant 686 in Delta.ts: nextType === 'insert' replaced with true
Mutant 687 in Delta.ts: nextType === 'insert' replaced with nextType !== 'insert'
Mutant 688 in Delta.ts: 'insert' replaced with ""
Mutant 689 in Delta.ts: offset < index || !priority replaced with true
Mutant 690 in Delta.ts: offset < index || !priority replaced with offset < index && !priority
Mutant 691 in Delta.ts: offset < index replaced with false
Mutant 692 in Delta.ts: offset < index replaced with offset <= index
Mutant 693 in Delta.ts: offset < index replaced with offset >= index
Mutant 694 in Delta.ts: !priority replaced with priority
Mutant 695 in Delta.ts: {
  index += length;
} replaced with {}
Mutant 696 in Delta.ts: index += length replaced with index -= length
Mutant 697 in Delta.ts: offset += length replaced with offset -= length
Mutant 698 in Delta.ts: typeof module === 'object' replaced with true
Mutant 699 in Delta.ts: typeof module === 'object' replaced with false
Mutant 700 in Delta.ts: typeof module === 'object' replaced with typeof module !== 'object'
Mutant 701 in Delta.ts: 'object' replaced with ""
Mutant 702 in Delta.ts: {
  module.exports = Delta;
  module.exports.default = Delta;
} replaced with {}
Mutant 703 in Op.ts: {
  if (typeof op.delete === 'number') {
    return op.delete;
  } else if (typeof op.retain === 'number') {
    return op.retain;
  } else if (typeof op.retain === 'object' && op.retain !== null) {
    return 1;
  } else {
    return typeof op.insert === 'string' ? op.insert.length : 1;
  }
} replaced with {}
Mutant 704 in Op.ts: typeof op.delete === 'number' replaced with true
Mutant 705 in Op.ts: typeof op.delete === 'number' replaced with false
Mutant 706 in Op.ts: typeof op.delete === 'number' replaced with typeof op.delete !== 'number'
Mutant 707 in Op.ts: 'number' replaced with ""
Mutant 708 in Op.ts: {
  return op.delete;
} replaced with {}
Mutant 709 in Op.ts: typeof op.retain === 'number' replaced with true
Mutant 710 in Op.ts: typeof op.retain === 'number' replaced with false
Mutant 711 in Op.ts: typeof op.retain === 'number' replaced with typeof op.retain !== 'number'
Mutant 712 in Op.ts: 'number' replaced with ""
Mutant 713 in Op.ts: {
  return op.retain;
} replaced with {}
Mutant 714 in Op.ts: typeof op.retain === 'object' && op.retain !== null replaced with true
Mutant 715 in Op.ts: typeof op.retain === 'object' && op.retain !== null replaced with false
Mutant 716 in Op.ts: typeof op.retain === 'object' && op.retain !== null replaced with typeof op.retain === 'object' || op.retain !== null
Mutant 717 in Op.ts: typeof op.retain === 'object' replaced with true
Mutant 718 in Op.ts: typeof op.retain === 'object' replaced with typeof op.retain !== 'object'
Mutant 719 in Op.ts: 'object' replaced with ""
Mutant 720 in Op.ts: op.retain !== null replaced with true
Mutant 721 in Op.ts: op.retain !== null replaced with op.retain === null
Mutant 722 in Op.ts: {
  return 1;
} replaced with {}
Mutant 723 in Op.ts: {
  return typeof op.insert === 'string' ? op.insert.length : 1;
} replaced with {}
Mutant 724 in Op.ts: typeof op.insert === 'string' replaced with true
Mutant 725 in Op.ts: typeof op.insert === 'string' replaced with false
Mutant 726 in Op.ts: typeof op.insert === 'string' replaced with typeof op.insert !== 'string'
Mutant 727 in Op.ts: 'string' replaced with ""
Mutant 728 in OpIterator.ts: {
  this.ops = ops;
  this.index = 0;
  this.offset = 0;
} replaced with {}
Mutant 729 in OpIterator.ts: {
  return this.peekLength() < Infinity;
} replaced with {}
Mutant 730 in OpIterator.ts: this.peekLength() < Infinity replaced with true
Mutant 731 in OpIterator.ts: this.peekLength() < Infinity replaced with false
Mutant 732 in OpIterator.ts: this.peekLength() < Infinity replaced with this.peekLength() <= Infinity
Mutant 733 in OpIterator.ts: this.peekLength() < Infinity replaced with this.peekLength() >= Infinity
Mutant 734 in OpIterator.ts: {
  if (!length) {
    length = Infinity;
  }
  const nextOp = this.ops[this.index];
  if (nextOp) {
    const offset = this.offset;
    const opLength = Op.length(nextOp);
    if (length >= opLength - offset) {
      length = opLength - offset;
      this.index += 1;
      this.offset = 0;
    } else {
      this.offset += length;
    }
    if (typeof nextOp.delete === 'number') {
      return {
        delete: length
      };
    } else {
      const retOp: Op = {};
      if (nextOp.attributes) {
        retOp.attributes = nextOp.attributes;
      }
      if (typeof nextOp.retain === 'number') {
        retOp.retain = length;
      } else if (typeof nextOp.retain === 'object' && nextOp.retain !== null) {
        // offset should === 0, length should === 1
        retOp.retain = nextOp.retain;
      } else if (typeof nextOp.insert === 'string') {
        retOp.insert = nextOp.insert.substr(offset, length);
      } else {
        // offset should === 0, length should === 1
        retOp.insert = nextOp.insert;
      }
      return retOp;
    }
  } else {
    return {
      retain: Infinity
    };
  }
} replaced with {}
Mutant 735 in OpIterator.ts: !length replaced with length
Mutant 736 in OpIterator.ts: !length replaced with true
Mutant 737 in OpIterator.ts: !length replaced with false
Mutant 738 in OpIterator.ts: {
  length = Infinity;
} replaced with {}
Mutant 739 in OpIterator.ts: nextOp replaced with true
Mutant 740 in OpIterator.ts: nextOp replaced with false
Mutant 741 in OpIterator.ts: {
  const offset = this.offset;
  const opLength = Op.length(nextOp);
  if (length >= opLength - offset) {
    length = opLength - offset;
    this.index += 1;
    this.offset = 0;
  } else {
    this.offset += length;
  }
  if (typeof nextOp.delete === 'number') {
    return {
      delete: length
    };
  } else {
    const retOp: Op = {};
    if (nextOp.attributes) {
      retOp.attributes = nextOp.attributes;
    }
    if (typeof nextOp.retain === 'number') {
      retOp.retain = length;
    } else if (typeof nextOp.retain === 'object' && nextOp.retain !== null) {
      // offset should === 0, length should === 1
      retOp.retain = nextOp.retain;
    } else if (typeof nextOp.insert === 'string') {
      retOp.insert = nextOp.insert.substr(offset, length);
    } else {
      // offset should === 0, length should === 1
      retOp.insert = nextOp.insert;
    }
    return retOp;
  }
} replaced with {}
Mutant 742 in OpIterator.ts: length >= opLength - offset replaced with true
Mutant 743 in OpIterator.ts: length >= opLength - offset replaced with false
Mutant 744 in OpIterator.ts: length >= opLength - offset replaced with length > opLength - offset
Mutant 745 in OpIterator.ts: length >= opLength - offset replaced with length < opLength - offset
Mutant 746 in OpIterator.ts: opLength - offset replaced with opLength + offset
Mutant 747 in OpIterator.ts: {
  length = opLength - offset;
  this.index += 1;
  this.offset = 0;
} replaced with {}
Mutant 748 in OpIterator.ts: opLength - offset replaced with opLength + offset
Mutant 749 in OpIterator.ts: this.index += 1 replaced with this.index -= 1
Mutant 750 in OpIterator.ts: {
  this.offset += length;
} replaced with {}
Mutant 751 in OpIterator.ts: this.offset += length replaced with this.offset -= length
Mutant 752 in OpIterator.ts: typeof nextOp.delete === 'number' replaced with true
Mutant 753 in OpIterator.ts: typeof nextOp.delete === 'number' replaced with false
Mutant 754 in OpIterator.ts: typeof nextOp.delete === 'number' replaced with typeof nextOp.delete !== 'number'
Mutant 755 in OpIterator.ts: 'number' replaced with ""
Mutant 756 in OpIterator.ts: {
  return {
    delete: length
  };
} replaced with {}
Mutant 757 in OpIterator.ts: {
  delete: length
} replaced with {}
Mutant 758 in OpIterator.ts: {
  const retOp: Op = {};
  if (nextOp.attributes) {
    retOp.attributes = nextOp.attributes;
  }
  if (typeof nextOp.retain === 'number') {
    retOp.retain = length;
  } else if (typeof nextOp.retain === 'object' && nextOp.retain !== null) {
    // offset should === 0, length should === 1
    retOp.retain = nextOp.retain;
  } else if (typeof nextOp.insert === 'string') {
    retOp.insert = nextOp.insert.substr(offset, length);
  } else {
    // offset should === 0, length should === 1
    retOp.insert = nextOp.insert;
  }
  return retOp;
} replaced with {}
Mutant 759 in OpIterator.ts: nextOp.attributes replaced with true
Mutant 760 in OpIterator.ts: nextOp.attributes replaced with false
Mutant 761 in OpIterator.ts: {
  retOp.attributes = nextOp.attributes;
} replaced with {}
Mutant 762 in OpIterator.ts: typeof nextOp.retain === 'number' replaced with true
Mutant 763 in OpIterator.ts: typeof nextOp.retain === 'number' replaced with false
Mutant 764 in OpIterator.ts: typeof nextOp.retain === 'number' replaced with typeof nextOp.retain !== 'number'
Mutant 765 in OpIterator.ts: 'number' replaced with ""
Mutant 766 in OpIterator.ts: {
  retOp.retain = length;
} replaced with {}
Mutant 767 in OpIterator.ts: typeof nextOp.retain === 'object' && nextOp.retain !== null replaced with true
Mutant 768 in OpIterator.ts: typeof nextOp.retain === 'object' && nextOp.retain !== null replaced with false
Mutant 769 in OpIterator.ts: typeof nextOp.retain === 'object' && nextOp.retain !== null replaced with typeof nextOp.retain === 'object' || nextOp.retain !== null
Mutant 770 in OpIterator.ts: typeof nextOp.retain === 'object' replaced with true
Mutant 771 in OpIterator.ts: typeof nextOp.retain === 'object' replaced with typeof nextOp.retain !== 'object'
Mutant 772 in OpIterator.ts: 'object' replaced with ""
Mutant 773 in OpIterator.ts: nextOp.retain !== null replaced with true
Mutant 774 in OpIterator.ts: nextOp.retain !== null replaced with nextOp.retain === null
Mutant 775 in OpIterator.ts: {
  // offset should === 0, length should === 1
  retOp.retain = nextOp.retain;
} replaced with {}
Mutant 776 in OpIterator.ts: typeof nextOp.insert === 'string' replaced with true
Mutant 777 in OpIterator.ts: typeof nextOp.insert === 'string' replaced with false
Mutant 778 in OpIterator.ts: typeof nextOp.insert === 'string' replaced with typeof nextOp.insert !== 'string'
Mutant 779 in OpIterator.ts: 'string' replaced with ""
Mutant 780 in OpIterator.ts: {
  retOp.insert = nextOp.insert.substr(offset, length);
} replaced with {}
Mutant 781 in OpIterator.ts: nextOp.insert.substr(offset, length) replaced with nextOp.insert
Mutant 782 in OpIterator.ts: {
  // offset should === 0, length should === 1
  retOp.insert = nextOp.insert;
} replaced with {}
Mutant 783 in OpIterator.ts: {
  return {
    retain: Infinity
  };
} replaced with {}
Mutant 784 in OpIterator.ts: {
  retain: Infinity
} replaced with {}
Mutant 785 in OpIterator.ts: {
  return this.ops[this.index];
} replaced with {}
Mutant 786 in OpIterator.ts: {
  if (this.ops[this.index]) {
    // Should never return 0 if our index is being managed correctly
    return Op.length(this.ops[this.index]) - this.offset;
  } else {
    return Infinity;
  }
} replaced with {}
Mutant 787 in OpIterator.ts: this.ops[this.index] replaced with true
Mutant 788 in OpIterator.ts: this.ops[this.index] replaced with false
Mutant 789 in OpIterator.ts: {
  // Should never return 0 if our index is being managed correctly
  return Op.length(this.ops[this.index]) - this.offset;
} replaced with {}
Mutant 790 in OpIterator.ts: Op.length(this.ops[this.index]) - this.offset replaced with Op.length(this.ops[this.index]) + this.offset
Mutant 791 in OpIterator.ts: {
  return Infinity;
} replaced with {}
Mutant 792 in OpIterator.ts: {
  const op = this.ops[this.index];
  if (op) {
    if (typeof op.delete === 'number') {
      return 'delete';
    } else if (typeof op.retain === 'number' || typeof op.retain === 'object' && op.retain !== null) {
      return 'retain';
    } else {
      return 'insert';
    }
  }
  return 'retain';
} replaced with {}
Mutant 793 in OpIterator.ts: op replaced with true
Mutant 794 in OpIterator.ts: op replaced with false
Mutant 795 in OpIterator.ts: {
  if (typeof op.delete === 'number') {
    return 'delete';
  } else if (typeof op.retain === 'number' || typeof op.retain === 'object' && op.retain !== null) {
    return 'retain';
  } else {
    return 'insert';
  }
} replaced with {}
Mutant 796 in OpIterator.ts: typeof op.delete === 'number' replaced with true
Mutant 797 in OpIterator.ts: typeof op.delete === 'number' replaced with false
Mutant 798 in OpIterator.ts: typeof op.delete === 'number' replaced with typeof op.delete !== 'number'
Mutant 799 in OpIterator.ts: 'number' replaced with ""
Mutant 800 in OpIterator.ts: {
  return 'delete';
} replaced with {}
Mutant 801 in OpIterator.ts: 'delete' replaced with ""
Mutant 802 in OpIterator.ts: typeof op.retain === 'number' || typeof op.retain === 'object' && op.retain !== null replaced with true
Mutant 803 in OpIterator.ts: typeof op.retain === 'number' || typeof op.retain === 'object' && op.retain !== null replaced with false
Mutant 804 in OpIterator.ts: typeof op.retain === 'number' || typeof op.retain === 'object' && op.retain !== null replaced with typeof op.retain === 'number' && typeof op.retain === 'object' && op.retain !== null
Mutant 805 in OpIterator.ts: typeof op.retain === 'number' replaced with false
Mutant 806 in OpIterator.ts: typeof op.retain === 'number' replaced with typeof op.retain !== 'number'
Mutant 807 in OpIterator.ts: 'number' replaced with ""
Mutant 808 in OpIterator.ts: typeof op.retain === 'object' && op.retain !== null replaced with false
Mutant 809 in OpIterator.ts: typeof op.retain === 'object' && op.retain !== null replaced with typeof op.retain === 'object' || op.retain !== null
Mutant 810 in OpIterator.ts: typeof op.retain === 'object' replaced with true
Mutant 811 in OpIterator.ts: typeof op.retain === 'object' replaced with typeof op.retain !== 'object'
Mutant 812 in OpIterator.ts: 'object' replaced with ""
Mutant 813 in OpIterator.ts: op.retain !== null replaced with true
Mutant 814 in OpIterator.ts: op.retain !== null replaced with op.retain === null
Mutant 815 in OpIterator.ts: {
  return 'retain';
} replaced with {}
Mutant 816 in OpIterator.ts: 'retain' replaced with ""
Mutant 817 in OpIterator.ts: {
  return 'insert';
} replaced with {}
Mutant 818 in OpIterator.ts: 'insert' replaced with ""
Mutant 819 in OpIterator.ts: 'retain' replaced with ""
Mutant 820 in OpIterator.ts: {
  if (!this.hasNext()) {
    return [];
  } else if (this.offset === 0) {
    return this.ops.slice(this.index);
  } else {
    const offset = this.offset;
    const index = this.index;
    const next = this.next();
    const rest = this.ops.slice(this.index);
    this.offset = offset;
    this.index = index;
    return [next].concat(rest);
  }
} replaced with {}
Mutant 821 in OpIterator.ts: !this.hasNext() replaced with this.hasNext()
Mutant 822 in OpIterator.ts: !this.hasNext() replaced with true
Mutant 823 in OpIterator.ts: !this.hasNext() replaced with false
Mutant 824 in OpIterator.ts: {
  return [];
} replaced with {}
Mutant 825 in OpIterator.ts: [] replaced with ["Stryker was here"]
Mutant 826 in OpIterator.ts: this.offset === 0 replaced with true
Mutant 827 in OpIterator.ts: this.offset === 0 replaced with false
Mutant 828 in OpIterator.ts: this.offset === 0 replaced with this.offset !== 0
Mutant 829 in OpIterator.ts: {
  return this.ops.slice(this.index);
} replaced with {}
Mutant 830 in OpIterator.ts: this.ops.slice(this.index) replaced with this.ops
Mutant 831 in OpIterator.ts: {
  const offset = this.offset;
  const index = this.index;
  const next = this.next();
  const rest = this.ops.slice(this.index);
  this.offset = offset;
  this.index = index;
  return [next].concat(rest);
} replaced with {}
Mutant 832 in OpIterator.ts: this.ops.slice(this.index) replaced with this.ops
Mutant 833 in OpIterator.ts: [next] replaced with []
[32m13:06:28 (2239) INFO Instrumenter[39m Instrumented 4 source file(s) with 834 mutant(s)
[32m13:06:28 (2239) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m13:06:29 (2239) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m13:06:29 (2239) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m13:06:34 (2239) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4642 ms, overhead 1 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~1h 9m) 2/834 tested (0 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 9m) 4/834 tested (1 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 9m) 6/834 tested (1 survived, 0 timed out)
Mutation testing 0% (elapsed: <1m, remaining: ~1h 8m) 8/834 tested (2 survived, 0 timed out)
Mutation testing 1% (elapsed: <1m, remaining: ~1h 8m) 10/834 tested (3 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 3m) 13/834 tested (4 survived, 0 timed out)
Mutation testing 1% (elapsed: ~1m, remaining: ~1h 3m) 15/834 tested (4 survived, 0 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~1h 4m) 17/834 tested (4 survived, 0 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~1h 4m) 19/834 tested (4 survived, 0 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~1h 1m) 22/834 tested (4 survived, 0 timed out)
Mutation testing 2% (elapsed: ~1m, remaining: ~1h 1m) 24/834 tested (4 survived, 0 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 2m) 26/834 tested (5 survived, 0 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 2m) 28/834 tested (5 survived, 0 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 0m) 31/834 tested (5 survived, 0 timed out)
Mutation testing 3% (elapsed: ~2m, remaining: ~1h 0m) 33/834 tested (5 survived, 0 timed out)
Mutation testing 4% (elapsed: ~2m, remaining: ~1h 0m) 35/834 tested (5 survived, 0 timed out)
Mutation testing 4% (elapsed: ~2m, remaining: ~1h 1m) 37/834 tested (6 survived, 0 timed out)
Mutation testing 4% (elapsed: ~3m, remaining: ~1h 1m) 39/834 tested (6 survived, 0 timed out)
Mutation testing 5% (elapsed: ~3m, remaining: ~59m) 42/834 tested (8 survived, 0 timed out)
Mutation testing 5% (elapsed: ~3m, remaining: ~59m) 44/834 tested (8 survived, 0 timed out)
Mutation testing 5% (elapsed: ~3m, remaining: ~59m) 46/834 tested (9 survived, 0 timed out)
Mutation testing 5% (elapsed: ~3m, remaining: ~1h 0m) 48/834 tested (9 survived, 0 timed out)
Mutation testing 5% (elapsed: ~3m, remaining: ~1h 0m) 50/834 tested (9 survived, 0 timed out)
Mutation testing 6% (elapsed: ~4m, remaining: ~58m) 53/834 tested (9 survived, 0 timed out)
Mutation testing 6% (elapsed: ~4m, remaining: ~59m) 55/834 tested (9 survived, 0 timed out)
Mutation testing 6% (elapsed: ~4m, remaining: ~59m) 57/834 tested (9 survived, 0 timed out)
Mutation testing 7% (elapsed: ~4m, remaining: ~59m) 59/834 tested (9 survived, 0 timed out)
Mutation testing 7% (elapsed: ~4m, remaining: ~58m) 62/834 tested (9 survived, 0 timed out)
Mutation testing 7% (elapsed: ~4m, remaining: ~58m) 64/834 tested (9 survived, 0 timed out)
Mutation testing 7% (elapsed: ~5m, remaining: ~58m) 66/834 tested (9 survived, 0 timed out)
Mutation testing 8% (elapsed: ~5m, remaining: ~58m) 68/834 tested (9 survived, 0 timed out)
Mutation testing 8% (elapsed: ~5m, remaining: ~57m) 71/834 tested (9 survived, 0 timed out)
Mutation testing 8% (elapsed: ~5m, remaining: ~57m) 73/834 tested (9 survived, 0 timed out)
Mutation testing 8% (elapsed: ~5m, remaining: ~57m) 75/834 tested (10 survived, 0 timed out)
Mutation testing 9% (elapsed: ~5m, remaining: ~57m) 77/834 tested (10 survived, 0 timed out)
Mutation testing 9% (elapsed: ~6m, remaining: ~56m) 80/834 tested (11 survived, 0 timed out)
Mutation testing 9% (elapsed: ~6m, remaining: ~56m) 82/834 tested (11 survived, 0 timed out)
Mutation testing 10% (elapsed: ~6m, remaining: ~56m) 84/834 tested (11 survived, 0 timed out)
Mutation testing 10% (elapsed: ~6m, remaining: ~56m) 86/834 tested (11 survived, 0 timed out)
Mutation testing 10% (elapsed: ~6m, remaining: ~55m) 89/834 tested (11 survived, 0 timed out)
Mutation testing 10% (elapsed: ~6m, remaining: ~55m) 91/834 tested (11 survived, 0 timed out)
Mutation testing 11% (elapsed: ~7m, remaining: ~55m) 93/834 tested (11 survived, 0 timed out)
Mutation testing 11% (elapsed: ~7m, remaining: ~55m) 95/834 tested (11 survived, 0 timed out)
Mutation testing 11% (elapsed: ~7m, remaining: ~55m) 97/834 tested (11 survived, 0 timed out)
Mutation testing 11% (elapsed: ~7m, remaining: ~55m) 100/834 tested (11 survived, 0 timed out)
Mutation testing 12% (elapsed: ~7m, remaining: ~55m) 102/834 tested (12 survived, 0 timed out)
Mutation testing 12% (elapsed: ~7m, remaining: ~54m) 104/834 tested (13 survived, 0 timed out)
Mutation testing 12% (elapsed: ~8m, remaining: ~54m) 106/834 tested (13 survived, 0 timed out)
Mutation testing 13% (elapsed: ~8m, remaining: ~54m) 109/834 tested (13 survived, 0 timed out)
Mutation testing 13% (elapsed: ~8m, remaining: ~54m) 111/834 tested (13 survived, 0 timed out)
Mutation testing 13% (elapsed: ~8m, remaining: ~54m) 113/834 tested (14 survived, 0 timed out)
Mutation testing 13% (elapsed: ~8m, remaining: ~54m) 115/834 tested (14 survived, 0 timed out)
Mutation testing 14% (elapsed: ~8m, remaining: ~54m) 117/834 tested (14 survived, 0 timed out)
Mutation testing 14% (elapsed: ~9m, remaining: ~53m) 120/834 tested (14 survived, 0 timed out)
Mutation testing 14% (elapsed: ~9m, remaining: ~53m) 122/834 tested (15 survived, 0 timed out)
Mutation testing 14% (elapsed: ~9m, remaining: ~53m) 124/834 tested (15 survived, 0 timed out)
Mutation testing 15% (elapsed: ~9m, remaining: ~52m) 127/834 tested (15 survived, 0 timed out)
Mutation testing 15% (elapsed: ~9m, remaining: ~52m) 129/834 tested (15 survived, 0 timed out)
Mutation testing 15% (elapsed: ~9m, remaining: ~52m) 131/834 tested (15 survived, 0 timed out)
Mutation testing 15% (elapsed: ~10m, remaining: ~52m) 133/834 tested (15 survived, 0 timed out)
Mutation testing 16% (elapsed: ~10m, remaining: ~52m) 136/834 tested (16 survived, 0 timed out)
Mutation testing 16% (elapsed: ~10m, remaining: ~52m) 138/834 tested (16 survived, 0 timed out)
Mutation testing 16% (elapsed: ~10m, remaining: ~52m) 140/834 tested (16 survived, 0 timed out)
Mutation testing 17% (elapsed: ~10m, remaining: ~51m) 142/834 tested (16 survived, 0 timed out)
Mutation testing 17% (elapsed: ~10m, remaining: ~51m) 145/834 tested (16 survived, 0 timed out)
Mutation testing 17% (elapsed: ~11m, remaining: ~51m) 147/834 tested (16 survived, 0 timed out)
Mutation testing 17% (elapsed: ~11m, remaining: ~51m) 149/834 tested (16 survived, 0 timed out)
Mutation testing 18% (elapsed: ~11m, remaining: ~51m) 151/834 tested (16 survived, 0 timed out)
Mutation testing 18% (elapsed: ~11m, remaining: ~50m) 154/834 tested (16 survived, 0 timed out)
Mutation testing 18% (elapsed: ~11m, remaining: ~50m) 156/834 tested (16 survived, 0 timed out)
Mutation testing 18% (elapsed: ~11m, remaining: ~50m) 158/834 tested (16 survived, 0 timed out)
Mutation testing 19% (elapsed: ~12m, remaining: ~50m) 160/834 tested (17 survived, 0 timed out)
Mutation testing 19% (elapsed: ~12m, remaining: ~50m) 162/834 tested (17 survived, 0 timed out)
Mutation testing 19% (elapsed: ~12m, remaining: ~50m) 165/834 tested (17 survived, 0 timed out)
Mutation testing 20% (elapsed: ~12m, remaining: ~49m) 167/834 tested (17 survived, 0 timed out)
Mutation testing 20% (elapsed: ~12m, remaining: ~49m) 169/834 tested (17 survived, 0 timed out)
Mutation testing 20% (elapsed: ~12m, remaining: ~49m) 171/834 tested (17 survived, 0 timed out)
Mutation testing 20% (elapsed: ~13m, remaining: ~49m) 173/834 tested (18 survived, 0 timed out)
Mutation testing 21% (elapsed: ~13m, remaining: ~49m) 176/834 tested (18 survived, 0 timed out)
Mutation testing 21% (elapsed: ~13m, remaining: ~49m) 178/834 tested (18 survived, 0 timed out)
Mutation testing 21% (elapsed: ~13m, remaining: ~49m) 180/834 tested (18 survived, 0 timed out)
Mutation testing 21% (elapsed: ~13m, remaining: ~48m) 182/834 tested (18 survived, 0 timed out)
Mutation testing 22% (elapsed: ~13m, remaining: ~48m) 185/834 tested (18 survived, 0 timed out)
Mutation testing 22% (elapsed: ~14m, remaining: ~48m) 187/834 tested (18 survived, 0 timed out)
Mutation testing 22% (elapsed: ~14m, remaining: ~48m) 189/834 tested (18 survived, 0 timed out)
Mutation testing 22% (elapsed: ~14m, remaining: ~48m) 191/834 tested (19 survived, 0 timed out)
Mutation testing 23% (elapsed: ~14m, remaining: ~48m) 193/834 tested (19 survived, 0 timed out)
Mutation testing 23% (elapsed: ~14m, remaining: ~47m) 196/834 tested (19 survived, 0 timed out)
Mutation testing 23% (elapsed: ~14m, remaining: ~47m) 198/834 tested (19 survived, 0 timed out)
Mutation testing 23% (elapsed: ~15m, remaining: ~47m) 200/834 tested (19 survived, 0 timed out)
Mutation testing 24% (elapsed: ~15m, remaining: ~47m) 202/834 tested (19 survived, 0 timed out)
Mutation testing 24% (elapsed: ~15m, remaining: ~47m) 205/834 tested (20 survived, 0 timed out)
Mutation testing 24% (elapsed: ~15m, remaining: ~46m) 207/834 tested (20 survived, 0 timed out)
Mutation testing 25% (elapsed: ~15m, remaining: ~46m) 209/834 tested (20 survived, 0 timed out)
Mutation testing 25% (elapsed: ~15m, remaining: ~46m) 211/834 tested (20 survived, 0 timed out)
Mutation testing 25% (elapsed: ~16m, remaining: ~46m) 213/834 tested (20 survived, 0 timed out)
Mutation testing 25% (elapsed: ~16m, remaining: ~46m) 216/834 tested (20 survived, 0 timed out)
Mutation testing 26% (elapsed: ~16m, remaining: ~46m) 218/834 tested (20 survived, 0 timed out)
Mutation testing 26% (elapsed: ~16m, remaining: ~46m) 218/834 tested (20 survived, 0 timed out)
Mutation testing 26% (elapsed: ~16m, remaining: ~46m) 220/834 tested (20 survived, 1 timed out)
Mutation testing 26% (elapsed: ~16m, remaining: ~46m) 221/834 tested (20 survived, 2 timed out)
Mutation testing 26% (elapsed: ~17m, remaining: ~46m) 223/834 tested (20 survived, 2 timed out)
Mutation testing 26% (elapsed: ~17m, remaining: ~46m) 224/834 tested (20 survived, 2 timed out)
Mutation testing 26% (elapsed: ~17m, remaining: ~46m) 225/834 tested (20 survived, 3 timed out)
Mutation testing 27% (elapsed: ~17m, remaining: ~46m) 227/834 tested (20 survived, 4 timed out)
Mutation testing 27% (elapsed: ~17m, remaining: ~46m) 229/834 tested (20 survived, 4 timed out)
Mutation testing 27% (elapsed: ~17m, remaining: ~46m) 231/834 tested (20 survived, 4 timed out)
Mutation testing 27% (elapsed: ~18m, remaining: ~46m) 233/834 tested (20 survived, 4 timed out)
Mutation testing 28% (elapsed: ~18m, remaining: ~46m) 236/834 tested (20 survived, 4 timed out)
Mutation testing 28% (elapsed: ~18m, remaining: ~45m) 238/834 tested (20 survived, 4 timed out)
Mutation testing 28% (elapsed: ~18m, remaining: ~45m) 240/834 tested (20 survived, 4 timed out)
Mutation testing 29% (elapsed: ~18m, remaining: ~45m) 242/834 tested (20 survived, 4 timed out)
Mutation testing 29% (elapsed: ~18m, remaining: ~45m) 245/834 tested (20 survived, 4 timed out)
Mutation testing 29% (elapsed: ~19m, remaining: ~45m) 247/834 tested (20 survived, 4 timed out)
Mutation testing 29% (elapsed: ~19m, remaining: ~45m) 249/834 tested (20 survived, 4 timed out)
Mutation testing 30% (elapsed: ~19m, remaining: ~44m) 251/834 tested (20 survived, 4 timed out)
Mutation testing 30% (elapsed: ~19m, remaining: ~44m) 254/834 tested (20 survived, 4 timed out)
Mutation testing 30% (elapsed: ~19m, remaining: ~44m) 256/834 tested (20 survived, 4 timed out)
Mutation testing 30% (elapsed: ~19m, remaining: ~44m) 258/834 tested (20 survived, 4 timed out)
Mutation testing 31% (elapsed: ~20m, remaining: ~44m) 260/834 tested (20 survived, 4 timed out)
Mutation testing 31% (elapsed: ~20m, remaining: ~43m) 263/834 tested (20 survived, 4 timed out)
Mutation testing 31% (elapsed: ~20m, remaining: ~43m) 265/834 tested (20 survived, 4 timed out)
Mutation testing 32% (elapsed: ~20m, remaining: ~43m) 267/834 tested (20 survived, 4 timed out)
Mutation testing 32% (elapsed: ~20m, remaining: ~43m) 269/834 tested (20 survived, 4 timed out)
Mutation testing 32% (elapsed: ~20m, remaining: ~43m) 271/834 tested (20 survived, 4 timed out)
Mutation testing 32% (elapsed: ~21m, remaining: ~42m) 274/834 tested (20 survived, 4 timed out)
Mutation testing 33% (elapsed: ~21m, remaining: ~42m) 276/834 tested (20 survived, 4 timed out)
Mutation testing 33% (elapsed: ~21m, remaining: ~42m) 278/834 tested (20 survived, 4 timed out)
Mutation testing 33% (elapsed: ~21m, remaining: ~42m) 280/834 tested (20 survived, 4 timed out)
Mutation testing 33% (elapsed: ~21m, remaining: ~42m) 283/834 tested (20 survived, 4 timed out)
Mutation testing 34% (elapsed: ~21m, remaining: ~42m) 285/834 tested (20 survived, 4 timed out)
Mutation testing 34% (elapsed: ~22m, remaining: ~41m) 287/834 tested (20 survived, 4 timed out)
Mutation testing 34% (elapsed: ~22m, remaining: ~41m) 290/834 tested (21 survived, 4 timed out)
Mutation testing 35% (elapsed: ~22m, remaining: ~41m) 292/834 tested (21 survived, 4 timed out)
Mutation testing 35% (elapsed: ~22m, remaining: ~41m) 294/834 tested (21 survived, 4 timed out)
Mutation testing 35% (elapsed: ~22m, remaining: ~41m) 296/834 tested (21 survived, 4 timed out)
Mutation testing 35% (elapsed: ~22m, remaining: ~41m) 298/834 tested (21 survived, 4 timed out)
Mutation testing 36% (elapsed: ~23m, remaining: ~40m) 301/834 tested (21 survived, 4 timed out)
Mutation testing 36% (elapsed: ~23m, remaining: ~40m) 303/834 tested (21 survived, 4 timed out)
Mutation testing 36% (elapsed: ~23m, remaining: ~40m) 305/834 tested (21 survived, 4 timed out)
Mutation testing 36% (elapsed: ~23m, remaining: ~40m) 307/834 tested (21 survived, 4 timed out)
Mutation testing 37% (elapsed: ~23m, remaining: ~40m) 309/834 tested (21 survived, 4 timed out)
Mutation testing 37% (elapsed: ~23m, remaining: ~39m) 312/834 tested (21 survived, 4 timed out)
Mutation testing 37% (elapsed: ~24m, remaining: ~39m) 314/834 tested (21 survived, 4 timed out)
Mutation testing 37% (elapsed: ~24m, remaining: ~39m) 316/834 tested (21 survived, 4 timed out)
Mutation testing 38% (elapsed: ~24m, remaining: ~39m) 318/834 tested (21 survived, 4 timed out)
Mutation testing 38% (elapsed: ~24m, remaining: ~39m) 321/834 tested (21 survived, 4 timed out)
Mutation testing 38% (elapsed: ~24m, remaining: ~39m) 323/834 tested (21 survived, 4 timed out)
Mutation testing 38% (elapsed: ~24m, remaining: ~38m) 325/834 tested (21 survived, 4 timed out)
Mutation testing 39% (elapsed: ~25m, remaining: ~38m) 327/834 tested (21 survived, 4 timed out)
Mutation testing 39% (elapsed: ~25m, remaining: ~38m) 330/834 tested (21 survived, 4 timed out)
Mutation testing 39% (elapsed: ~25m, remaining: ~38m) 331/834 tested (21 survived, 4 timed out)
Mutation testing 39% (elapsed: ~25m, remaining: ~38m) 332/834 tested (21 survived, 5 timed out)
Mutation testing 39% (elapsed: ~25m, remaining: ~38m) 333/834 tested (21 survived, 6 timed out)
Mutation testing 40% (elapsed: ~25m, remaining: ~38m) 335/834 tested (21 survived, 6 timed out)
Mutation testing 40% (elapsed: ~26m, remaining: ~38m) 336/834 tested (21 survived, 7 timed out)
Mutation testing 40% (elapsed: ~26m, remaining: ~38m) 336/834 tested (21 survived, 7 timed out)
Mutation testing 40% (elapsed: ~26m, remaining: ~38m) 338/834 tested (21 survived, 8 timed out)
Mutation testing 40% (elapsed: ~26m, remaining: ~38m) 339/834 tested (21 survived, 8 timed out)
Mutation testing 40% (elapsed: ~26m, remaining: ~38m) 341/834 tested (21 survived, 9 timed out)
Mutation testing 41% (elapsed: ~26m, remaining: ~38m) 344/834 tested (21 survived, 9 timed out)
Mutation testing 41% (elapsed: ~27m, remaining: ~38m) 346/834 tested (21 survived, 9 timed out)
Mutation testing 41% (elapsed: ~27m, remaining: ~37m) 348/834 tested (21 survived, 9 timed out)
Mutation testing 41% (elapsed: ~27m, remaining: ~37m) 350/834 tested (22 survived, 9 timed out)
Mutation testing 42% (elapsed: ~27m, remaining: ~37m) 353/834 tested (25 survived, 9 timed out)
Mutation testing 42% (elapsed: ~27m, remaining: ~37m) 355/834 tested (27 survived, 9 timed out)
Mutation testing 42% (elapsed: ~27m, remaining: ~37m) 357/834 tested (29 survived, 9 timed out)
Mutation testing 43% (elapsed: ~28m, remaining: ~37m) 359/834 tested (29 survived, 9 timed out)
Mutation testing 43% (elapsed: ~28m, remaining: ~36m) 362/834 tested (31 survived, 9 timed out)
Mutation testing 43% (elapsed: ~28m, remaining: ~36m) 364/834 tested (33 survived, 9 timed out)
Mutation testing 43% (elapsed: ~28m, remaining: ~36m) 366/834 tested (34 survived, 9 timed out)
Mutation testing 44% (elapsed: ~28m, remaining: ~36m) 368/834 tested (35 survived, 9 timed out)
Mutation testing 44% (elapsed: ~28m, remaining: ~36m) 369/834 tested (35 survived, 10 timed out)
Mutation testing 44% (elapsed: ~29m, remaining: ~36m) 371/834 tested (35 survived, 10 timed out)
Mutation testing 44% (elapsed: ~29m, remaining: ~36m) 373/834 tested (35 survived, 10 timed out)
Mutation testing 45% (elapsed: ~29m, remaining: ~35m) 376/834 tested (35 survived, 10 timed out)
Mutation testing 45% (elapsed: ~29m, remaining: ~35m) 378/834 tested (35 survived, 10 timed out)
Mutation testing 45% (elapsed: ~29m, remaining: ~35m) 379/834 tested (35 survived, 10 timed out)
Mutation testing 45% (elapsed: ~29m, remaining: ~35m) 380/834 tested (35 survived, 11 timed out)
Mutation testing 45% (elapsed: ~30m, remaining: ~35m) 381/834 tested (35 survived, 12 timed out)
Mutation testing 45% (elapsed: ~30m, remaining: ~35m) 382/834 tested (35 survived, 12 timed out)
Mutation testing 46% (elapsed: ~30m, remaining: ~35m) 384/834 tested (35 survived, 13 timed out)
Mutation testing 46% (elapsed: ~30m, remaining: ~35m) 385/834 tested (35 survived, 14 timed out)
Mutation testing 46% (elapsed: ~30m, remaining: ~35m) 385/834 tested (35 survived, 14 timed out)
Mutation testing 46% (elapsed: ~30m, remaining: ~35m) 387/834 tested (35 survived, 15 timed out)
Mutation testing 46% (elapsed: ~31m, remaining: ~35m) 388/834 tested (35 survived, 16 timed out)
Mutation testing 46% (elapsed: ~31m, remaining: ~35m) 389/834 tested (35 survived, 16 timed out)
Mutation testing 46% (elapsed: ~31m, remaining: ~35m) 390/834 tested (35 survived, 17 timed out)
Mutation testing 46% (elapsed: ~31m, remaining: ~35m) 391/834 tested (35 survived, 18 timed out)
Mutation testing 47% (elapsed: ~31m, remaining: ~35m) 393/834 tested (35 survived, 18 timed out)
Mutation testing 47% (elapsed: ~31m, remaining: ~35m) 396/834 tested (35 survived, 18 timed out)
Mutation testing 47% (elapsed: ~32m, remaining: ~35m) 398/834 tested (35 survived, 18 timed out)
Mutation testing 47% (elapsed: ~32m, remaining: ~34m) 400/834 tested (35 survived, 18 timed out)
Mutation testing 48% (elapsed: ~32m, remaining: ~34m) 402/834 tested (35 survived, 18 timed out)
Mutation testing 48% (elapsed: ~32m, remaining: ~34m) 405/834 tested (35 survived, 18 timed out)
Mutation testing 48% (elapsed: ~32m, remaining: ~34m) 407/834 tested (35 survived, 18 timed out)
Mutation testing 49% (elapsed: ~32m, remaining: ~34m) 409/834 tested (35 survived, 18 timed out)
Mutation testing 49% (elapsed: ~33m, remaining: ~33m) 411/834 tested (35 survived, 18 timed out)
Mutation testing 49% (elapsed: ~33m, remaining: ~33m) 414/834 tested (35 survived, 18 timed out)
Mutation testing 49% (elapsed: ~33m, remaining: ~33m) 416/834 tested (35 survived, 18 timed out)
Mutation testing 50% (elapsed: ~33m, remaining: ~33m) 418/834 tested (36 survived, 18 timed out)
Mutation testing 50% (elapsed: ~33m, remaining: ~33m) 420/834 tested (36 survived, 18 timed out)
Mutation testing 50% (elapsed: ~33m, remaining: ~32m) 423/834 tested (38 survived, 18 timed out)
Mutation testing 50% (elapsed: ~34m, remaining: ~32m) 425/834 tested (40 survived, 18 timed out)
Mutation testing 51% (elapsed: ~34m, remaining: ~32m) 427/834 tested (41 survived, 18 timed out)
Mutation testing 51% (elapsed: ~34m, remaining: ~32m) 429/834 tested (41 survived, 18 timed out)
Mutation testing 51% (elapsed: ~34m, remaining: ~32m) 432/834 tested (41 survived, 18 timed out)
Mutation testing 52% (elapsed: ~34m, remaining: ~31m) 434/834 tested (41 survived, 18 timed out)
Mutation testing 52% (elapsed: ~34m, remaining: ~31m) 436/834 tested (42 survived, 18 timed out)
Mutation testing 52% (elapsed: ~35m, remaining: ~31m) 438/834 tested (43 survived, 18 timed out)
Mutation testing 52% (elapsed: ~35m, remaining: ~31m) 441/834 tested (44 survived, 18 timed out)
Mutation testing 53% (elapsed: ~35m, remaining: ~31m) 443/834 tested (45 survived, 18 timed out)
Mutation testing 53% (elapsed: ~35m, remaining: ~31m) 445/834 tested (45 survived, 18 timed out)
Mutation testing 53% (elapsed: ~35m, remaining: ~30m) 447/834 tested (45 survived, 18 timed out)
Mutation testing 53% (elapsed: ~35m, remaining: ~30m) 449/834 tested (45 survived, 18 timed out)
Mutation testing 54% (elapsed: ~36m, remaining: ~30m) 452/834 tested (45 survived, 18 timed out)
Mutation testing 54% (elapsed: ~36m, remaining: ~30m) 454/834 tested (45 survived, 18 timed out)
Mutation testing 54% (elapsed: ~36m, remaining: ~30m) 456/834 tested (46 survived, 18 timed out)
Mutation testing 54% (elapsed: ~36m, remaining: ~29m) 458/834 tested (46 survived, 18 timed out)
Mutation testing 55% (elapsed: ~36m, remaining: ~29m) 461/834 tested (46 survived, 18 timed out)
Mutation testing 55% (elapsed: ~36m, remaining: ~29m) 463/834 tested (46 survived, 18 timed out)
Mutation testing 55% (elapsed: ~37m, remaining: ~29m) 465/834 tested (46 survived, 18 timed out)
Mutation testing 55% (elapsed: ~37m, remaining: ~29m) 467/834 tested (46 survived, 18 timed out)
Mutation testing 56% (elapsed: ~37m, remaining: ~28m) 470/834 tested (47 survived, 18 timed out)
Mutation testing 56% (elapsed: ~37m, remaining: ~28m) 472/834 tested (48 survived, 18 timed out)
Mutation testing 56% (elapsed: ~37m, remaining: ~28m) 474/834 tested (48 survived, 18 timed out)
Mutation testing 57% (elapsed: ~37m, remaining: ~28m) 476/834 tested (48 survived, 18 timed out)
Mutation testing 57% (elapsed: ~38m, remaining: ~28m) 479/834 tested (48 survived, 18 timed out)
Mutation testing 57% (elapsed: ~38m, remaining: ~28m) 481/834 tested (48 survived, 18 timed out)
Mutation testing 57% (elapsed: ~38m, remaining: ~27m) 483/834 tested (49 survived, 18 timed out)
Mutation testing 58% (elapsed: ~38m, remaining: ~27m) 485/834 tested (49 survived, 18 timed out)
Mutation testing 58% (elapsed: ~38m, remaining: ~27m) 488/834 tested (50 survived, 18 timed out)
Mutation testing 58% (elapsed: ~38m, remaining: ~27m) 490/834 tested (50 survived, 18 timed out)
Mutation testing 58% (elapsed: ~39m, remaining: ~27m) 492/834 tested (50 survived, 18 timed out)
Mutation testing 59% (elapsed: ~39m, remaining: ~27m) 493/834 tested (50 survived, 19 timed out)
Mutation testing 59% (elapsed: ~39m, remaining: ~27m) 494/834 tested (50 survived, 19 timed out)
Mutation testing 59% (elapsed: ~39m, remaining: ~27m) 495/834 tested (50 survived, 20 timed out)
Mutation testing 59% (elapsed: ~39m, remaining: ~26m) 498/834 tested (51 survived, 20 timed out)
Mutation testing 59% (elapsed: ~39m, remaining: ~26m) 499/834 tested (51 survived, 20 timed out)
Mutation testing 59% (elapsed: ~40m, remaining: ~26m) 500/834 tested (51 survived, 21 timed out)
Mutation testing 60% (elapsed: ~40m, remaining: ~26m) 503/834 tested (51 survived, 21 timed out)
Mutation testing 60% (elapsed: ~40m, remaining: ~26m) 505/834 tested (51 survived, 21 timed out)
Mutation testing 60% (elapsed: ~40m, remaining: ~26m) 505/834 tested (51 survived, 21 timed out)
Mutation testing 60% (elapsed: ~40m, remaining: ~26m) 508/834 tested (51 survived, 22 timed out)
Mutation testing 61% (elapsed: ~40m, remaining: ~26m) 509/834 tested (51 survived, 22 timed out)
Mutation testing 61% (elapsed: ~41m, remaining: ~26m) 510/834 tested (51 survived, 23 timed out)
Mutation testing 61% (elapsed: ~41m, remaining: ~25m) 513/834 tested (51 survived, 23 timed out)
Mutation testing 61% (elapsed: ~41m, remaining: ~25m) 515/834 tested (51 survived, 23 timed out)
Mutation testing 61% (elapsed: ~41m, remaining: ~25m) 517/834 tested (51 survived, 23 timed out)
Mutation testing 62% (elapsed: ~41m, remaining: ~25m) 519/834 tested (51 survived, 23 timed out)
Mutation testing 62% (elapsed: ~41m, remaining: ~25m) 522/834 tested (52 survived, 23 timed out)
Mutation testing 62% (elapsed: ~42m, remaining: ~24m) 524/834 tested (52 survived, 23 timed out)
Mutation testing 63% (elapsed: ~42m, remaining: ~24m) 526/834 tested (52 survived, 23 timed out)
Mutation testing 63% (elapsed: ~42m, remaining: ~24m) 527/834 tested (52 survived, 24 timed out)
Mutation testing 63% (elapsed: ~42m, remaining: ~24m) 529/834 tested (52 survived, 24 timed out)
Mutation testing 63% (elapsed: ~42m, remaining: ~24m) 531/834 tested (52 survived, 24 timed out)
Mutation testing 63% (elapsed: ~42m, remaining: ~24m) 532/834 tested (52 survived, 25 timed out)
Mutation testing 63% (elapsed: ~43m, remaining: ~24m) 532/834 tested (52 survived, 25 timed out)
Mutation testing 64% (elapsed: ~43m, remaining: ~24m) 534/834 tested (52 survived, 26 timed out)
Mutation testing 64% (elapsed: ~43m, remaining: ~24m) 535/834 tested (52 survived, 27 timed out)
Mutation testing 64% (elapsed: ~43m, remaining: ~24m) 536/834 tested (52 survived, 27 timed out)
Mutation testing 64% (elapsed: ~43m, remaining: ~24m) 537/834 tested (52 survived, 28 timed out)
Mutation testing 64% (elapsed: ~43m, remaining: ~24m) 538/834 tested (52 survived, 29 timed out)
Mutation testing 64% (elapsed: ~44m, remaining: ~23m) 540/834 tested (52 survived, 29 timed out)
Mutation testing 65% (elapsed: ~44m, remaining: ~23m) 543/834 tested (52 survived, 29 timed out)
Mutation testing 65% (elapsed: ~44m, remaining: ~23m) 545/834 tested (52 survived, 29 timed out)
Mutation testing 65% (elapsed: ~44m, remaining: ~23m) 547/834 tested (52 survived, 29 timed out)
Mutation testing 65% (elapsed: ~44m, remaining: ~23m) 549/834 tested (52 survived, 29 timed out)
Mutation testing 66% (elapsed: ~44m, remaining: ~22m) 552/834 tested (52 survived, 29 timed out)
Mutation testing 66% (elapsed: ~45m, remaining: ~22m) 554/834 tested (52 survived, 29 timed out)
Mutation testing 66% (elapsed: ~45m, remaining: ~22m) 556/834 tested (52 survived, 29 timed out)
Mutation testing 66% (elapsed: ~45m, remaining: ~22m) 558/834 tested (52 survived, 29 timed out)
Mutation testing 67% (elapsed: ~45m, remaining: ~22m) 561/834 tested (52 survived, 29 timed out)
Mutation testing 67% (elapsed: ~45m, remaining: ~21m) 563/834 tested (52 survived, 29 timed out)
Mutation testing 67% (elapsed: ~45m, remaining: ~21m) 565/834 tested (52 survived, 29 timed out)
Mutation testing 67% (elapsed: ~46m, remaining: ~21m) 567/834 tested (52 survived, 29 timed out)
Mutation testing 68% (elapsed: ~46m, remaining: ~21m) 570/834 tested (52 survived, 29 timed out)
Mutation testing 68% (elapsed: ~46m, remaining: ~21m) 572/834 tested (52 survived, 29 timed out)
Mutation testing 68% (elapsed: ~46m, remaining: ~21m) 574/834 tested (52 survived, 29 timed out)
Mutation testing 69% (elapsed: ~46m, remaining: ~20m) 576/834 tested (53 survived, 29 timed out)
Mutation testing 69% (elapsed: ~46m, remaining: ~20m) 578/834 tested (54 survived, 29 timed out)
Mutation testing 69% (elapsed: ~47m, remaining: ~20m) 581/834 tested (55 survived, 29 timed out)
Mutation testing 69% (elapsed: ~47m, remaining: ~20m) 583/834 tested (56 survived, 29 timed out)
Mutation testing 70% (elapsed: ~47m, remaining: ~20m) 585/834 tested (57 survived, 29 timed out)
Mutation testing 70% (elapsed: ~47m, remaining: ~19m) 587/834 tested (58 survived, 29 timed out)
Mutation testing 70% (elapsed: ~47m, remaining: ~19m) 590/834 tested (58 survived, 29 timed out)
Mutation testing 70% (elapsed: ~47m, remaining: ~19m) 592/834 tested (58 survived, 29 timed out)
Mutation testing 71% (elapsed: ~48m, remaining: ~19m) 594/834 tested (58 survived, 29 timed out)
Mutation testing 71% (elapsed: ~48m, remaining: ~19m) 596/834 tested (58 survived, 29 timed out)
Mutation testing 71% (elapsed: ~48m, remaining: ~19m) 598/834 tested (58 survived, 29 timed out)
Mutation testing 72% (elapsed: ~48m, remaining: ~18m) 601/834 tested (58 survived, 29 timed out)
Mutation testing 72% (elapsed: ~48m, remaining: ~18m) 603/834 tested (58 survived, 29 timed out)
Mutation testing 72% (elapsed: ~48m, remaining: ~18m) 604/834 tested (58 survived, 29 timed out)
Mutation testing 72% (elapsed: ~49m, remaining: ~18m) 605/834 tested (58 survived, 30 timed out)
Mutation testing 72% (elapsed: ~49m, remaining: ~18m) 606/834 tested (58 survived, 31 timed out)
Mutation testing 72% (elapsed: ~49m, remaining: ~18m) 607/834 tested (58 survived, 31 timed out)
Mutation testing 72% (elapsed: ~49m, remaining: ~18m) 608/834 tested (58 survived, 32 timed out)
Mutation testing 73% (elapsed: ~49m, remaining: ~18m) 609/834 tested (58 survived, 33 timed out)
Mutation testing 73% (elapsed: ~49m, remaining: ~18m) 610/834 tested (58 survived, 34 timed out)
Mutation testing 73% (elapsed: ~50m, remaining: ~18m) 612/834 tested (58 survived, 34 timed out)
Mutation testing 73% (elapsed: ~50m, remaining: ~17m) 614/834 tested (58 survived, 34 timed out)
Mutation testing 73% (elapsed: ~50m, remaining: ~17m) 616/834 tested (58 survived, 34 timed out)
Mutation testing 73% (elapsed: ~50m, remaining: ~17m) 617/834 tested (58 survived, 35 timed out)
Mutation testing 74% (elapsed: ~50m, remaining: ~17m) 618/834 tested (58 survived, 36 timed out)
Mutation testing 74% (elapsed: ~50m, remaining: ~17m) 619/834 tested (58 survived, 36 timed out)
Mutation testing 74% (elapsed: ~51m, remaining: ~17m) 621/834 tested (58 survived, 37 timed out)
Mutation testing 74% (elapsed: ~51m, remaining: ~17m) 621/834 tested (58 survived, 37 timed out)
Mutation testing 74% (elapsed: ~51m, remaining: ~17m) 622/834 tested (58 survived, 38 timed out)
Mutation testing 74% (elapsed: ~51m, remaining: ~17m) 624/834 tested (58 survived, 39 timed out)
Mutation testing 75% (elapsed: ~51m, remaining: ~17m) 626/834 tested (58 survived, 39 timed out)
Mutation testing 75% (elapsed: ~51m, remaining: ~17m) 628/834 tested (59 survived, 39 timed out)
Mutation testing 75% (elapsed: ~52m, remaining: ~16m) 631/834 tested (59 survived, 39 timed out)
Mutation testing 75% (elapsed: ~52m, remaining: ~16m) 633/834 tested (60 survived, 39 timed out)
Mutation testing 76% (elapsed: ~52m, remaining: ~16m) 635/834 tested (62 survived, 39 timed out)
Mutation testing 76% (elapsed: ~52m, remaining: ~16m) 637/834 tested (62 survived, 39 timed out)
Mutation testing 76% (elapsed: ~52m, remaining: ~16m) 639/834 tested (63 survived, 39 timed out)
Mutation testing 76% (elapsed: ~52m, remaining: ~15m) 642/834 tested (63 survived, 39 timed out)
Mutation testing 77% (elapsed: ~53m, remaining: ~15m) 644/834 tested (64 survived, 39 timed out)
Mutation testing 77% (elapsed: ~53m, remaining: ~15m) 646/834 tested (66 survived, 39 timed out)
Mutation testing 77% (elapsed: ~53m, remaining: ~15m) 648/834 tested (67 survived, 39 timed out)
Mutation testing 78% (elapsed: ~53m, remaining: ~15m) 651/834 tested (68 survived, 39 timed out)
Mutation testing 78% (elapsed: ~53m, remaining: ~14m) 653/834 tested (69 survived, 39 timed out)
Mutation testing 78% (elapsed: ~53m, remaining: ~14m) 655/834 tested (70 survived, 39 timed out)
Mutation testing 78% (elapsed: ~54m, remaining: ~14m) 657/834 tested (70 survived, 39 timed out)
Mutation testing 79% (elapsed: ~54m, remaining: ~14m) 660/834 tested (71 survived, 39 timed out)
Mutation testing 79% (elapsed: ~54m, remaining: ~14m) 662/834 tested (72 survived, 39 timed out)
Mutation testing 79% (elapsed: ~54m, remaining: ~13m) 664/834 tested (72 survived, 39 timed out)
Mutation testing 79% (elapsed: ~54m, remaining: ~13m) 666/834 tested (73 survived, 39 timed out)
Mutation testing 80% (elapsed: ~54m, remaining: ~13m) 668/834 tested (73 survived, 39 timed out)
Mutation testing 80% (elapsed: ~55m, remaining: ~13m) 671/834 tested (73 survived, 39 timed out)
Mutation testing 80% (elapsed: ~55m, remaining: ~13m) 673/834 tested (73 survived, 39 timed out)
Mutation testing 80% (elapsed: ~55m, remaining: ~13m) 674/834 tested (73 survived, 39 timed out)
Mutation testing 81% (elapsed: ~55m, remaining: ~12m) 676/834 tested (73 survived, 40 timed out)
Mutation testing 81% (elapsed: ~55m, remaining: ~12m) 678/834 tested (73 survived, 40 timed out)
Mutation testing 81% (elapsed: ~55m, remaining: ~12m) 680/834 tested (73 survived, 40 timed out)
Mutation testing 81% (elapsed: ~56m, remaining: ~12m) 682/834 tested (73 survived, 40 timed out)
Mutation testing 82% (elapsed: ~56m, remaining: ~12m) 685/834 tested (73 survived, 40 timed out)
Mutation testing 82% (elapsed: ~56m, remaining: ~12m) 687/834 tested (73 survived, 40 timed out)
Mutation testing 82% (elapsed: ~56m, remaining: ~11m) 689/834 tested (73 survived, 40 timed out)
Mutation testing 82% (elapsed: ~56m, remaining: ~11m) 691/834 tested (73 survived, 40 timed out)
Mutation testing 83% (elapsed: ~56m, remaining: ~11m) 693/834 tested (74 survived, 40 timed out)
Mutation testing 83% (elapsed: ~57m, remaining: ~11m) 696/834 tested (74 survived, 40 timed out)
Mutation testing 83% (elapsed: ~57m, remaining: ~11m) 698/834 tested (74 survived, 40 timed out)
Mutation testing 83% (elapsed: ~57m, remaining: ~10m) 700/834 tested (76 survived, 40 timed out)
Mutation testing 84% (elapsed: ~57m, remaining: ~10m) 702/834 tested (78 survived, 40 timed out)
Mutation testing 84% (elapsed: ~57m, remaining: ~10m) 704/834 tested (79 survived, 40 timed out)
Mutation testing 84% (elapsed: ~57m, remaining: ~10m) 705/834 tested (79 survived, 41 timed out)
Mutation testing 84% (elapsed: ~58m, remaining: ~10m) 706/834 tested (79 survived, 41 timed out)
Mutation testing 84% (elapsed: ~58m, remaining: ~10m) 708/834 tested (79 survived, 42 timed out)
Mutation testing 84% (elapsed: ~58m, remaining: ~10m) 708/834 tested (79 survived, 42 timed out)
Mutation testing 85% (elapsed: ~58m, remaining: ~10m) 709/834 tested (79 survived, 43 timed out)
Mutation testing 85% (elapsed: ~58m, remaining: ~10m) 711/834 tested (79 survived, 44 timed out)
Mutation testing 85% (elapsed: ~58m, remaining: ~10m) 712/834 tested (79 survived, 45 timed out)
Mutation testing 85% (elapsed: ~59m, remaining: ~9m) 714/834 tested (79 survived, 45 timed out)
Mutation testing 85% (elapsed: ~59m, remaining: ~9m) 716/834 tested (80 survived, 45 timed out)
Mutation testing 86% (elapsed: ~59m, remaining: ~9m) 718/834 tested (80 survived, 45 timed out)
Mutation testing 86% (elapsed: ~59m, remaining: ~9m) 721/834 tested (82 survived, 45 timed out)
Mutation testing 86% (elapsed: ~59m, remaining: ~9m) 723/834 tested (83 survived, 45 timed out)
Mutation testing 86% (elapsed: ~59m, remaining: ~9m) 723/834 tested (83 survived, 45 timed out)
Mutation testing 87% (elapsed: ~1h 0m, remaining: ~8m) 726/834 tested (83 survived, 46 timed out)
Mutation testing 87% (elapsed: ~1h 0m, remaining: ~8m) 728/834 tested (83 survived, 46 timed out)
Mutation testing 87% (elapsed: ~1h 0m, remaining: ~8m) 730/834 tested (83 survived, 46 timed out)
Mutation testing 87% (elapsed: ~1h 0m, remaining: ~8m) 731/834 tested (83 survived, 47 timed out)
Mutation testing 87% (elapsed: ~1h 0m, remaining: ~8m) 732/834 tested (83 survived, 47 timed out)
Mutation testing 87% (elapsed: ~1h 0m, remaining: ~8m) 733/834 tested (83 survived, 48 timed out)
Mutation testing 88% (elapsed: ~1h 1m, remaining: ~8m) 734/834 tested (83 survived, 49 timed out)
Mutation testing 88% (elapsed: ~1h 1m, remaining: ~8m) 734/834 tested (83 survived, 49 timed out)
Mutation testing 88% (elapsed: ~1h 1m, remaining: ~8m) 735/834 tested (83 survived, 50 timed out)
Mutation testing 88% (elapsed: ~1h 1m, remaining: ~8m) 737/834 tested (83 survived, 51 timed out)
Mutation testing 88% (elapsed: ~1h 1m, remaining: ~8m) 738/834 tested (83 survived, 52 timed out)
Mutation testing 88% (elapsed: ~1h 1m, remaining: ~8m) 738/834 tested (83 survived, 52 timed out)
Mutation testing 88% (elapsed: ~1h 2m, remaining: ~7m) 740/834 tested (83 survived, 53 timed out)
Mutation testing 88% (elapsed: ~1h 2m, remaining: ~7m) 741/834 tested (83 survived, 54 timed out)
Mutation testing 88% (elapsed: ~1h 2m, remaining: ~7m) 742/834 tested (83 survived, 55 timed out)
Mutation testing 89% (elapsed: ~1h 2m, remaining: ~7m) 743/834 tested (83 survived, 55 timed out)
Mutation testing 89% (elapsed: ~1h 2m, remaining: ~7m) 744/834 tested (83 survived, 56 timed out)
Mutation testing 89% (elapsed: ~1h 2m, remaining: ~7m) 745/834 tested (83 survived, 56 timed out)
Mutation testing 89% (elapsed: ~1h 3m, remaining: ~7m) 746/834 tested (83 survived, 57 timed out)
Mutation testing 89% (elapsed: ~1h 3m, remaining: ~7m) 747/834 tested (83 survived, 58 timed out)
Mutation testing 89% (elapsed: ~1h 3m, remaining: ~7m) 748/834 tested (83 survived, 59 timed out)
Mutation testing 89% (elapsed: ~1h 3m, remaining: ~7m) 750/834 tested (83 survived, 59 timed out)
Mutation testing 90% (elapsed: ~1h 3m, remaining: ~7m) 751/834 tested (83 survived, 60 timed out)
Mutation testing 90% (elapsed: ~1h 3m, remaining: ~6m) 753/834 tested (83 survived, 60 timed out)
Mutation testing 90% (elapsed: ~1h 4m, remaining: ~6m) 755/834 tested (83 survived, 60 timed out)
Mutation testing 90% (elapsed: ~1h 4m, remaining: ~6m) 758/834 tested (83 survived, 60 timed out)
Mutation testing 91% (elapsed: ~1h 4m, remaining: ~6m) 760/834 tested (83 survived, 60 timed out)
Mutation testing 91% (elapsed: ~1h 4m, remaining: ~6m) 762/834 tested (83 survived, 60 timed out)
Mutation testing 91% (elapsed: ~1h 4m, remaining: ~5m) 764/834 tested (83 survived, 60 timed out)
Mutation testing 91% (elapsed: ~1h 4m, remaining: ~5m) 766/834 tested (83 survived, 60 timed out)
Mutation testing 92% (elapsed: ~1h 5m, remaining: ~5m) 769/834 tested (83 survived, 60 timed out)
Mutation testing 92% (elapsed: ~1h 5m, remaining: ~5m) 771/834 tested (83 survived, 60 timed out)
Mutation testing 92% (elapsed: ~1h 5m, remaining: ~5m) 773/834 tested (83 survived, 60 timed out)
Mutation testing 92% (elapsed: ~1h 5m, remaining: ~4m) 775/834 tested (84 survived, 60 timed out)
Mutation testing 93% (elapsed: ~1h 5m, remaining: ~4m) 778/834 tested (84 survived, 60 timed out)
Mutation testing 93% (elapsed: ~1h 5m, remaining: ~4m) 780/834 tested (84 survived, 60 timed out)
Mutation testing 93% (elapsed: ~1h 6m, remaining: ~4m) 782/834 tested (84 survived, 60 timed out)
Mutation testing 94% (elapsed: ~1h 6m, remaining: ~4m) 784/834 tested (84 survived, 60 timed out)
Mutation testing 94% (elapsed: ~1h 6m, remaining: ~3m) 787/834 tested (84 survived, 60 timed out)
Mutation testing 94% (elapsed: ~1h 6m, remaining: ~3m) 789/834 tested (84 survived, 60 timed out)
Mutation testing 94% (elapsed: ~1h 6m, remaining: ~3m) 791/834 tested (84 survived, 60 timed out)
Mutation testing 95% (elapsed: ~1h 6m, remaining: ~3m) 793/834 tested (84 survived, 60 timed out)
Mutation testing 95% (elapsed: ~1h 7m, remaining: ~3m) 795/834 tested (84 survived, 60 timed out)
Mutation testing 95% (elapsed: ~1h 7m, remaining: ~3m) 798/834 tested (84 survived, 60 timed out)
Mutation testing 95% (elapsed: ~1h 7m, remaining: ~2m) 800/834 tested (84 survived, 60 timed out)
Mutation testing 96% (elapsed: ~1h 7m, remaining: ~2m) 802/834 tested (84 survived, 60 timed out)
Mutation testing 96% (elapsed: ~1h 7m, remaining: ~2m) 804/834 tested (84 survived, 60 timed out)
Mutation testing 96% (elapsed: ~1h 7m, remaining: ~2m) 807/834 tested (84 survived, 60 timed out)
Mutation testing 97% (elapsed: ~1h 8m, remaining: ~2m) 809/834 tested (84 survived, 60 timed out)
Mutation testing 97% (elapsed: ~1h 8m, remaining: ~1m) 811/834 tested (84 survived, 60 timed out)
Mutation testing 97% (elapsed: ~1h 8m, remaining: ~1m) 813/834 tested (84 survived, 60 timed out)
Mutation testing 97% (elapsed: ~1h 8m, remaining: ~1m) 816/834 tested (86 survived, 60 timed out)
Mutation testing 98% (elapsed: ~1h 8m, remaining: ~1m) 818/834 tested (86 survived, 60 timed out)
Mutation testing 98% (elapsed: ~1h 8m, remaining: ~1m) 820/834 tested (86 survived, 60 timed out)
Mutation testing 98% (elapsed: ~1h 9m, remaining: ~1m) 822/834 tested (86 survived, 60 timed out)
Mutation testing 98% (elapsed: ~1h 9m, remaining: <1m) 824/834 tested (87 survived, 60 timed out)
Mutation testing 99% (elapsed: ~1h 9m, remaining: <1m) 827/834 tested (87 survived, 60 timed out)
Mutation testing 99% (elapsed: ~1h 9m, remaining: <1m) 829/834 tested (88 survived, 60 timed out)
Mutation testing 99% (elapsed: ~1h 9m, remaining: <1m) 831/834 tested (88 survived, 60 timed out)
Mutation testing 99% (elapsed: ~1h 9m, remaining: <1m) 833/834 tested (88 survived, 60 timed out)

All tests
  ✓ All tests (killed 686)

[Survived] ConditionalExpression
src/AttributeMap.ts:14:9
-       if (typeof a !== 'object') {
+       if (false) {

[Survived] BlockStatement
src/AttributeMap.ts:14:32
-       if (typeof a !== 'object') {
-         a = {};
-       }
+       if (typeof a !== 'object') {}

[Survived] ConditionalExpression
src/AttributeMap.ts:17:9
-       if (typeof b !== 'object') {
+       if (false) {

[Survived] BlockStatement
src/AttributeMap.ts:17:32
-       if (typeof b !== 'object') {
-         b = {};
-       }
+       if (typeof b !== 'object') {}

[Survived] ConditionalExpression
src/AttributeMap.ts:30:11
-         if (a[key] !== undefined && b[key] === undefined) {
+         if (true && b[key] === undefined) {

[Survived] ConditionalExpression
src/AttributeMap.ts:41:9
-       if (typeof a !== 'object') {
+       if (false) {

[Survived] BlockStatement
src/AttributeMap.ts:41:32
-       if (typeof a !== 'object') {
-         a = {};
-       }
+       if (typeof a !== 'object') {}

[Survived] ConditionalExpression
src/AttributeMap.ts:44:9
-       if (typeof b !== 'object') {
+       if (false) {

[Survived] BlockStatement
src/AttributeMap.ts:44:32
-       if (typeof b !== 'object') {
-         b = {};
-       }
+       if (typeof b !== 'object') {}

[Survived] ConditionalExpression
src/AttributeMap.ts:70:11
-         if (attr[key] !== base[key] && base[key] === undefined) {
+         if (true && base[key] === undefined) {

[Survived] BooleanLiteral
src/AttributeMap.ts:80:16
-       priority = false,
+       priority = true,

[Survived] ConditionalExpression
src/AttributeMap.ts:97:12
-       return Object.keys(attributes).length > 0 ? attributes : undefined;
+       return true ? attributes : undefined;

[Survived] EqualityOperator
src/AttributeMap.ts:97:12
-       return Object.keys(attributes).length > 0 ? attributes : undefined;
+       return Object.keys(attributes).length >= 0 ? attributes : undefined;

[Survived] ConditionalExpression
src/Delta.ts:20:32
-     if (typeof a !== 'object' || a === null) {
+     if (typeof a !== 'object' || false) {

[Survived] ConditionalExpression
src/Delta.ts:23:32
-     if (typeof b !== 'object' || b === null) {
+     if (typeof b !== 'object' || false) {

[Survived] BlockStatement
src/Delta.ts:45:51
-     static unregisterEmbed(embedType: string): void {
-       delete this.handlers[embedType];
-     }
+     static unregisterEmbed(embedType: string): void {}

[Survived] ConditionalExpression
src/Delta.ts:74:9
-       if (typeof arg === 'string' && arg.length === 0) {
+       if (true && arg.length === 0) {

[Survived] ConditionalExpression
src/Delta.ts:80:7
-         typeof attributes === 'object' &&
+         true &&

[Survived] ConditionalExpression
src/Delta.ts:99:9
-       if (typeof length === 'number' && length <= 0) {
+       if (true && length <= 0) {

[Survived] ConditionalExpression
src/Delta.ts:105:7
-         typeof attributes === 'object' &&
+         true &&

[Survived] ConditionalExpression
src/Delta.ts:157:9
-       if (index === this.ops.length) {
+       if (false) {

[Survived] ConditionalExpression
src/Delta.ts:242:7
-         firstOther != null &&
-         typeof firstOther.retain === 'number' &&
-         firstOther.attributes == null
+         false

[Survived] ConditionalExpression
src/Delta.ts:242:7
-         firstOther != null &&
-         typeof firstOther.retain === 'number' &&
+         true &&

[Survived] LogicalOperator
src/Delta.ts:242:7
-         firstOther != null &&
-         typeof firstOther.retain === 'number' &&
+         firstOther != null || typeof firstOther.retain === 'number' &&

[Survived] ConditionalExpression
src/Delta.ts:242:7
-         firstOther != null &&
+         true &&

[Survived] EqualityOperator
src/Delta.ts:242:7
-         firstOther != null &&
+         firstOther == null &&

[Survived] ConditionalExpression
src/Delta.ts:243:7
-         typeof firstOther.retain === 'number' &&
+         true &&

[Survived] EqualityOperator
src/Delta.ts:243:7
-         typeof firstOther.retain === 'number' &&
+         typeof firstOther.retain !== 'number' &&

[Survived] StringLiteral
src/Delta.ts:243:36
-         typeof firstOther.retain === 'number' &&
+         typeof firstOther.retain === "" &&

[Survived] BlockStatement
src/Delta.ts:245:7
-       ) {
-         let firstLeft = firstOther.retain;
-         while (
-           thisIter.peekType() === 'insert' &&
-           thisIter.peekLength() <= firstLeft
-         ) {
-           firstLeft -= thisIter.peekLength();
-           ops.push(thisIter.next());
-         }
-         if (firstOther.retain - firstLeft > 0) {
-           otherIter.next(firstOther.retain - firstLeft);
-         }
-       }
+       ) {}

[Survived] ConditionalExpression
src/Delta.ts:248:9
-           thisIter.peekType() === 'insert' &&
-           thisIter.peekLength() <= firstLeft
+           false

[Survived] ConditionalExpression
src/Delta.ts:248:9
-           thisIter.peekType() === 'insert' &&
+           true &&

[Survived] EqualityOperator
src/Delta.ts:248:9
-           thisIter.peekType() === 'insert' &&
+           thisIter.peekType() !== 'insert' &&

[Survived] StringLiteral
src/Delta.ts:248:33
-           thisIter.peekType() === 'insert' &&
+           thisIter.peekType() === "" &&

[Survived] EqualityOperator
src/Delta.ts:249:9
-           thisIter.peekLength() <= firstLeft
+           thisIter.peekLength() < firstLeft

[Survived] ConditionalExpression
src/Delta.ts:281:30
-                 const action = thisOp.retain == null ? 'insert' : 'retain';
+                 const action = true ? 'insert' : 'retain';

[Survived] StringLiteral
src/Delta.ts:281:65
-                 const action = thisOp.retain == null ? 'insert' : 'retain';
+                 const action = thisOp.retain == null ? 'insert' : "";

[Survived] ConditionalExpression
src/Delta.ts:291:19
-                     action === 'retain',
+                     true,

[Survived] ConditionalExpression
src/Delta.ts:291:19
-                     action === 'retain',
+                     false,

[Survived] EqualityOperator
src/Delta.ts:291:19
-                     action === 'retain',
+                     action !== 'retain',

[Survived] StringLiteral
src/Delta.ts:291:30
-                     action === 'retain',
+                     action === "",

[Survived] ConditionalExpression
src/Delta.ts:309:13
-               !otherIter.hasNext() &&
-               isEqual(delta.ops[delta.ops.length - 1], newOp)
+               false

[Survived] ArithmeticOperator
src/Delta.ts:310:31
-               isEqual(delta.ops[delta.ops.length - 1], newOp)
+               isEqual(delta.ops[delta.ops.length + 1], newOp)

[Survived] BlockStatement
src/Delta.ts:311:13
-             ) {
-               const rest = new Delta(thisIter.rest());
-               return delta.concat(rest).chop();
-             }
+             ) {}

[Survived] ConditionalExpression
src/Delta.ts:319:11
-             typeof otherOp.delete === 'number' &&
+             true &&

[Survived] ConditionalExpression
src/Delta.ts:321:51
-               (typeof thisOp.retain === 'object' && thisOp.retain !== null))
+               (typeof thisOp.retain === 'object' && true))

[Survived] ConditionalExpression
src/Delta.ts:340:9
-       if (this.ops === other.ops) {
+       if (false) {

[Survived] BlockStatement
src/Delta.ts:340:33
-       if (this.ops === other.ops) {
-         return new Delta();
-       }
+       if (this.ops === other.ops) {}

[Survived] ConditionalExpression
src/Delta.ts:349:24
-             const prep = delta === other ? 'on' : 'with';
+             const prep = true ? 'on' : 'with';

[Survived] StringLiteral
src/Delta.ts:349:49
-             const prep = delta === other ? 'on' : 'with';
+             const prep = delta === other ? 'on' : "";

[Survived] MethodExpression
src/Delta.ts:364:24
-               opLength = Math.min(otherIter.peekLength(), length);
+               opLength = Math.max(otherIter.peekLength(), length);

[Survived] UnaryOperator
src/Delta.ts:416:13
-             : -1;
+             : +1;

[Survived] ConditionalExpression
src/Delta.ts:448:22
-             } else if (op.retain && op.attributes) {
+             } else if (true) {

[Survived] LogicalOperator
src/Delta.ts:448:22
-             } else if (op.retain && op.attributes) {
+             } else if (op.retain || op.attributes) {

[Survived] ConditionalExpression
src/Delta.ts:456:18
-         } else if (typeof op.retain === 'object' && op.retain !== null) {
+         } else if (true) {

[Survived] LogicalOperator
src/Delta.ts:456:18
-         } else if (typeof op.retain === 'object' && op.retain !== null) {
+         } else if (typeof op.retain === 'object' || op.retain !== null) {

[Survived] ConditionalExpression
src/Delta.ts:456:18
-         } else if (typeof op.retain === 'object' && op.retain !== null) {
+         } else if (true && op.retain !== null) {

[Survived] ConditionalExpression
src/Delta.ts:456:51
-         } else if (typeof op.retain === 'object' && op.retain !== null) {
+         } else if (typeof op.retain === 'object' && true) {

[Survived] BlockStatement
src/Delta.ts:498:28
-           if (thisOp.delete) {
-             // Our delete either makes their delete redundant or removes their retain
-             continue;
-           } else if (otherOp.delete) {
+           if (thisOp.delete) {} else if (otherOp.delete) {

[Survived] ConditionalExpression
src/Delta.ts:507:13
-               typeof otherData === 'object' && otherData !== null
+               true

[Survived] LogicalOperator
src/Delta.ts:507:13
-               typeof otherData === 'object' && otherData !== null
+               typeof otherData === 'object' || otherData !== null

[Survived] ConditionalExpression
src/Delta.ts:507:13
-               typeof otherData === 'object' && otherData !== null
+               true && otherData !== null

[Survived] ConditionalExpression
src/Delta.ts:507:46
-               typeof otherData === 'object' && otherData !== null
+               typeof otherData === 'object' && true

[Survived] LogicalOperator
src/Delta.ts:511:13
-               typeof thisData === 'object' &&
-               thisData !== null &&
-               typeof otherData === 'object' &&
+               typeof thisData === 'object' && thisData !== null || typeof otherData === 'object' &&

[Survived] ConditionalExpression
src/Delta.ts:511:13
-               typeof thisData === 'object' &&
-               thisData !== null &&
+               true &&

[Survived] LogicalOperator
src/Delta.ts:511:13
-               typeof thisData === 'object' &&
-               thisData !== null &&
+               typeof thisData === 'object' || thisData !== null &&

[Survived] ConditionalExpression
src/Delta.ts:511:13
-               typeof thisData === 'object' &&
+               true &&

[Survived] ConditionalExpression
src/Delta.ts:512:13
-               thisData !== null &&
+               true &&

[Survived] ConditionalExpression
src/Delta.ts:513:13
-               typeof otherData === 'object' &&
+               true &&

[Survived] ConditionalExpression
src/Delta.ts:514:13
-               otherData !== null
+               true

[Survived] ConditionalExpression
src/Delta.ts:517:17
-               if (embedType === Object.keys(otherData)[0]) {
+               if (true) {

[Survived] ConditionalExpression
src/Delta.ts:519:19
-                 if (handler) {
+                 if (true) {

[Survived] BooleanLiteral
src/Delta.ts:546:47
-     transformPosition(index: number, priority = false): number {
+     transformPosition(index: number, priority = true): number {

[Survived] ConditionalExpression
src/Delta.ts:557:44
-         } else if (nextType === 'insert' && (offset < index || !priority)) {
+         } else if (nextType === 'insert' && (false || !priority)) {

[Survived] ConditionalExpression
src/Delta.ts:570:5
-   if (typeof module === 'object') {
+   if (true) {

[Survived] ConditionalExpression
src/Delta.ts:570:5
-   if (typeof module === 'object') {
+   if (false) {

[Survived] EqualityOperator
src/Delta.ts:570:5
-   if (typeof module === 'object') {
+   if (typeof module !== 'object') {

[Survived] StringLiteral
src/Delta.ts:570:23
-   if (typeof module === 'object') {
+   if (typeof module === "") {

[Survived] BlockStatement
src/Delta.ts:570:33
-   if (typeof module === 'object') {
-     module.exports = Delta;
-     module.exports.default = Delta;
-   }
+   if (typeof module === 'object') {}

[Survived] ConditionalExpression
src/Op.ts:18:16
-       } else if (typeof op.retain === 'object' && op.retain !== null) {
+       } else if (false) {

[Survived] StringLiteral
src/Op.ts:18:37
-       } else if (typeof op.retain === 'object' && op.retain !== null) {
+       } else if (typeof op.retain === "" && op.retain !== null) {

[Survived] ConditionalExpression
src/Op.ts:18:49
-       } else if (typeof op.retain === 'object' && op.retain !== null) {
+       } else if (typeof op.retain === 'object' && true) {

[Survived] EqualityOperator
src/Op.ts:18:49
-       } else if (typeof op.retain === 'object' && op.retain !== null) {
+       } else if (typeof op.retain === 'object' && op.retain === null) {

[Survived] ConditionalExpression
src/OpIterator.ts:44:11
-             nextOp.retain !== null
+             true

[Survived] ConditionalExpression
src/OpIterator.ts:81:43
-           (typeof op.retain === 'object' && op.retain !== null)
+           (typeof op.retain === 'object' && true)

[Survived] BlockStatement
src/OpIterator.ts:82:9
-         ) {
-           return 'retain';
-         } else {
+         ) {} else {

[Survived] ConditionalExpression
src/OpIterator.ts:92:9
-       if (!this.hasNext()) {
+       if (false) {

[Survived] ConditionalExpression
src/OpIterator.ts:94:16
-       } else if (this.offset === 0) {
+       } else if (false) {

Ran 0.93 tests per mutant on average.
-----------------|---------|----------|-----------|------------|----------|----------|
File             | % score | # killed | # timeout | # survived | # no cov | # errors |
-----------------|---------|----------|-----------|------------|----------|----------|
All files        |   89.45 |      686 |        60 |         88 |        0 |        0 |
 AttributeMap.ts |   87.50 |       91 |         0 |         13 |        0 |        0 |
 Delta.ts        |   88.98 |      493 |        40 |         66 |        0 |        0 |
 Op.ts           |   84.00 |       15 |         6 |          4 |        0 |        0 |
 OpIterator.ts   |   95.28 |       87 |        14 |          5 |        0 |        0 |
-----------------|---------|----------|-----------|------------|----------|----------|
[32m14:16:26 (2239) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/delta/reports/mutation/mutation.html
[32m14:16:26 (2239) INFO MutationTestExecutor[39m Done in 69 minutes 59 seconds.

real	70m0.753s
user	95m13.467s
sys	4m4.669s
