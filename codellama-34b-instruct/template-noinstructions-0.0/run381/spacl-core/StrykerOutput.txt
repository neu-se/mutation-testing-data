*** using precomputed mutations ***
[32m01:26:39 (2512) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m01:26:39 (2512) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m01:26:39 (2512) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m01:26:40 (2512) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m01:26:40 (2512) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m01:26:40 (2512) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 200 mutants from MUTATION_TESTING/template-noinstructions_codellama-34b-instruct_0.0/mutants.json ***
failed to parse replacement spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === undefined: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /^[a-zA-Z0-9_/:~.$*-]*$/: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /^[a-zA-Z0-9_/:~.$*-]+$/: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /^[a-zA-Z0-9_/:~.$+*-]*$/: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement spec.match(version === '1' || version === '1.0'
      ? /[*+][^/]|[^/][*+]/
      : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null: SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
failed to parse replacement spec.match(/[^/]:|:\/|:$/) === null: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
Mutant 0 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) === null
Mutant 1 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined
Mutant 2 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined && spec.match(/^.+\/$/) !== ''
failed to parse replacement spec.replace(/[*+][^/]|[^/][*+]/, ''): SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
Mutant 3 in matcher.ts: spec replaced with spec.replace(/\*/g, '+')
Mutant 4 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 5 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 || string.endsWith('/')
Mutant 6 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 1 && !string.endsWith('/')
Mutant 7 in matcher.ts: string.endsWith replaced with string.startsWith
Mutant 8 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 9 in matcher.ts: string.endsWith replaced with string.lastIndexOf
Mutant 10 in matcher.ts: '/' replaced with '\\'
Mutant 11 in matcher.ts: super[Symbol.match] replaced with this[Symbol.match]
Mutant 12 in matcher.ts: super[Symbol.match] replaced with Matcher[Symbol.match]
Mutant 13 in matcher.ts: string replaced with string.slice(1)
Mutant 14 in matcher.ts: string replaced with string.substring(1)
Mutant 15 in matcher.ts: string replaced with string.substr(1)
Mutant 16 in matcher.ts: max > 0 || any replaced with max > 0 && any
Mutant 17 in matcher.ts: max > 0 || any replaced with max > 0 || !any
Mutant 18 in matcher.ts: max > 0 || any replaced with max > 0 && !any
Mutant 19 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 2
Mutant 20 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 3
Mutant 21 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 4
Mutant 22 in matcher.ts: min > 0 replaced with min < 0
Mutant 23 in matcher.ts: min > 0 replaced with min === 0
Mutant 24 in matcher.ts: min > 0 replaced with min !== 0
Mutant 25 in matcher.ts: true replaced with false
Mutant 26 in matcher.ts: true replaced with !string.endsWith('/')
Mutant 27 in matcher.ts: true replaced with string.endsWith('$')
Mutant 28 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc)
Mutant 29 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg + acc + '$')
Mutant 30 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + '/'
Mutant 31 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + '.'
Mutant 32 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg + acc + '*'
Mutant 33 in matcher.ts: '$' replaced with '\\$'
Mutant 34 in matcher.ts: '$' replaced with '\\\\$'
Mutant 35 in matcher.ts: '$' replaced with '\\\\\\$'
Mutant 36 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1)) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 37 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('/')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 38 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().join('')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
failed to parse replacement spec.split('/').slice(1).reverse().join('/'): SyntaxError: Invalid regular expression: //').slice(1).reverse().join('//: Unmatched ')'
failed to parse replacement spec.split('/').slice(1).reverse().map(s => s.replace(/[*+]/g, '')): SyntaxError: Invalid regular expression: //').slice(1).reverse().map(s => s.replace(//: Unmatched ')'
Mutant 39 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 40 in matcher.ts: '/' replaced with '\\'
Mutant 41 in matcher.ts: 1 replaced with 0
Mutant 42 in matcher.ts: 1 replaced with -1
Mutant 43 in matcher.ts: 1 replaced with Infinity
failed to parse replacement part.replace(/([^/]+)/g, '\\$1'): SyntaxError: Invalid regular expression: //([^//: Unterminated character class
Mutant 44 in matcher.ts: part replaced with part.replace(/([.$])/g, '\\$1')
Mutant 45 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) === null
Mutant 46 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:.+/) !== null && part.match(/:.+/) !== undefined
Mutant 47 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 48 in matcher.ts: /:.+/ replaced with /:.?/
Mutant 49 in matcher.ts: part.slice(1) replaced with part.slice(0)
Mutant 50 in matcher.ts: part.slice(1) replaced with part.slice(1, -1)
Mutant 51 in matcher.ts: part.slice(1) replaced with part.slice(-1)
Mutant 52 in matcher.ts: 1 replaced with 2
failed to parse replacement '/([^/]+)/': SyntaxError: Invalid regular expression: //([^//: Unterminated character class
failed to parse replacement '/([^/]+)/?': SyntaxError: Invalid regular expression: //([^//: Unterminated character class
Mutant 53 in matcher.ts: /([.$])/g replaced with /([^.$])/g
Mutant 54 in matcher.ts: /([.$])/g replaced with /([^.$])*/g
Mutant 55 in matcher.ts: '\\$1' replaced with '\\\\$1'
Mutant 56 in matcher.ts: '\\$1' replaced with '$1'
Mutant 57 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 58 in policy.ts: this.rules replaced with this.rules.concat()
Mutant 59 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.query(path, verb, ctx) === true)
Mutant 60 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb)
Mutant 61 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(verb, ctx)
Mutant 62 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, ctx)
Mutant 63 in policy.ts: path replaced with path.toLowerCase()
Mutant 64 in policy.ts: path replaced with path.split('/').pop()
Mutant 65 in policy.ts: verb replaced with "verb"
Mutant 66 in policy.ts: verb replaced with "verb" + " "
Mutant 67 in policy.ts: verb replaced with "verb" + " " + "*"
Mutant 68 in policy.ts: ctx replaced with null
Mutant 69 in policy.ts: ctx replaced with undefined
Mutant 70 in policy.ts: ctx replaced with "foo"
Mutant 71 in policy.ts: res === false replaced with res === true
Mutant 72 in policy.ts: res === false replaced with res !== false
Mutant 73 in policy.ts: res === false replaced with !res
Mutant 74 in policy.ts: res === true replaced with res === false
Mutant 75 in policy.ts: res === true replaced with res !== true
Mutant 76 in policy.ts: res === true replaced with res !== false
Mutant 77 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 78 in policy.ts: this.rules replaced with this.rules.concat()
Mutant 79 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.matches(path, ctx))
Mutant 80 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, null)
Mutant 81 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.clone())
Mutant 82 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.reverse())
Mutant 83 in policy.ts: path replaced with path.toLowerCase()
Mutant 84 in policy.ts: path replaced with path.substring(1)
Mutant 85 in policy.ts: path replaced with path.split('/').pop()
Mutant 86 in policy.ts: ctx replaced with undefined
Mutant 87 in policy.ts: ctx replaced with ''
Mutant 88 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(false)
Mutant 89 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(true, false)
Mutant 90 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(false, true)
Mutant 91 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.name]
Mutant 92 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, null]
Mutant 93 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, new Policy(policy.name, policy.rules)]
Mutant 94 in policymap.ts: policies replaced with policies.slice()
Mutant 95 in policymap.ts: policies replaced with policies.filter(policy => policy.name === name)
Mutant 96 in policymap.ts: policies replaced with policies.map(policy => policy.name)
Mutant 97 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 98 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, undefined)
Mutant 99 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, new Policy())
Mutant 100 in policymap.ts: policy.name replaced with policy.name.toLowerCase()
Mutant 101 in policymap.ts: policy.name replaced with policy.name.substring(1)
Mutant 102 in policymap.ts: policy.name replaced with policy.name.split('').reverse().join('')
Mutant 103 in policymap.ts: policy replaced with null
Mutant 104 in policymap.ts: policy replaced with undefined
Mutant 105 in policymap.ts: policy replaced with new Policy()
Mutant 106 in policymap.ts: this.get replaced with this.set
Mutant 107 in policymap.ts: this.get replaced with this.has
Mutant 108 in policymap.ts: this.get replaced with this.size
Mutant 109 in policymap.ts: name replaced with "name"
Mutant 110 in policymap.ts: name replaced with name.toUpperCase()
Mutant 111 in policymap.ts: name replaced with name.split("").reverse().join("")
Mutant 112 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb)
Mutant 113 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(verb, path)
Mutant 114 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, ctx, null)
Mutant 115 in policymap.ts: path replaced with path.toLowerCase()
Mutant 116 in policymap.ts: path replaced with path.substring(1)
Mutant 117 in policymap.ts: path replaced with path.split('/').pop()
Mutant 118 in policymap.ts: verb replaced with "verb"
Mutant 119 in policymap.ts: verb replaced with "verb" + "random"
Mutant 120 in policymap.ts: verb replaced with "verb" + "invalid"
Mutant 121 in policymap.ts: ctx replaced with null
Mutant 122 in policymap.ts: ctx replaced with undefined
Mutant 123 in policymap.ts: ctx replaced with {}
Mutant 124 in policymap.ts: this.get replaced with this.set
Mutant 125 in policymap.ts: this.get replaced with this.has
Mutant 126 in policymap.ts: this.get replaced with this.size
Mutant 127 in policymap.ts: name replaced with "name"
Mutant 128 in policymap.ts: name replaced with name.toUpperCase()
Mutant 129 in policymap.ts: name replaced with name.split("").reverse().join("")
Mutant 130 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx)
Mutant 131 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx, null)
Mutant 132 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, ctx, undefined)
Mutant 133 in policymap.ts: path replaced with path.toLowerCase()
Mutant 134 in policymap.ts: path replaced with path.substring(1)
Mutant 135 in policymap.ts: path replaced with path.split('/').pop()
Mutant 136 in policymap.ts: ctx replaced with undefined
Mutant 137 in policymap.ts: ctx replaced with null
Mutant 138 in policymap.ts: ctx replaced with new Error('Policy not found')
Mutant 139 in rule.ts: verbs replaced with verbs.keys()
Mutant 140 in rule.ts: verbs replaced with verbs.values()
Mutant 141 in rule.ts: verbs replaced with Object.keys(verbs)
Mutant 142 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 143 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb]
Mutant 144 in rule.ts: !(verb in this.verbs) replaced with !this.verbs[verb]
Mutant 145 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.keys()) {
  this.verbs[verb] = false;
}
Mutant 146 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.values()) {
  this.verbs[verb] = false;
}
Mutant 147 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb of verbs.entries()) {
  this.verbs[verb] = false;
}
Mutant 148 in rule.ts: verbs replaced with verbs.slice()
Mutant 149 in rule.ts: verbs replaced with Object.keys(verbs)
Mutant 150 in rule.ts: verbs replaced with verbs.map(verb => verb)
Mutant 151 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !this.verbs[verb]
Mutant 152 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 153 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && this.verbs[verb] === false
Mutant 154 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.match(this.regex))
Mutant 155 in rule.ts: this.matches(path, ctx) replaced with this.matches(ctx.match(this.regex))
Mutant 156 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.match(this.regex) && ctx.match(this.regex))
Mutant 157 in rule.ts: this.matches replaced with !this.matches
Mutant 158 in rule.ts: path replaced with path.toLowerCase()
Mutant 159 in rule.ts: path replaced with path.substring(1)
Mutant 160 in rule.ts: path replaced with path.split('/').pop()
Mutant 161 in rule.ts: ctx replaced with null
Mutant 162 in rule.ts: ctx replaced with undefined
Mutant 163 in rule.ts: ctx replaced with {}
Mutant 164 in rule.ts: this.regex replaced with this.regex.test(path)
Mutant 165 in rule.ts: this.regex replaced with this.regex.exec(path)
Mutant 166 in rule.ts: this.regex replaced with this.regex.match(path)
Mutant 167 in rule.ts: match === null replaced with match === undefined
Mutant 168 in rule.ts: match === null replaced with match.length === 0
Mutant 169 in rule.ts: match === null replaced with match.indexOf('') === 0
Mutant 170 in rule.ts: count > 0 replaced with count < 0
Mutant 171 in rule.ts: count > 0 replaced with count === 0
Mutant 172 in rule.ts: count > 0 replaced with count > 1
Mutant 173 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 174 in rule.ts: ctx === undefined replaced with ctx === null
Mutant 175 in rule.ts: ctx === undefined replaced with ctx === undefined || ctx === null
Mutant 176 in rule.ts: index < count replaced with index <= count
Mutant 177 in rule.ts: index < count replaced with index > count
Mutant 178 in rule.ts: index < count replaced with index == count
Mutant 179 in rule.ts: index++ replaced with index--
Mutant 180 in rule.ts: index++ replaced with index += 2
Mutant 181 in rule.ts: index++ replaced with index = 0
Mutant 182 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined || match[index + 1] === prop
Mutant 183 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined && match[index + 1] !== prop
Mutant 184 in rule.ts: this.verbs replaced with this.verbs.slice()
Mutant 185 in rule.ts: this.verbs replaced with this.verbs.filter(Boolean)
Mutant 186 in rule.ts: this.verbs replaced with this.verbs.map(verb => !verb)
[32m01:26:40 (2512) INFO Instrumenter[39m Instrumented 6 source file(s) with 187 mutant(s)
[32m01:26:41 (2512) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m01:26:42 (2512) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m01:26:42 (2512) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m01:26:46 (2512) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4050 ms, overhead 0 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~10m) 3/187 tested (2 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~10m) 6/187 tested (2 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~9m) 9/187 tested (3 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~9m) 12/187 tested (4 survived, 0 timed out)
Mutation testing 8% (elapsed: <1m, remaining: ~9m) 15/187 tested (4 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~8m) 19/187 tested (4 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~8m) 22/187 tested (4 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~8m) 25/187 tested (5 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~8m) 28/187 tested (5 survived, 0 timed out)
Mutation testing 16% (elapsed: ~1m, remaining: ~8m) 31/187 tested (5 survived, 0 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~7m) 35/187 tested (5 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~7m) 38/187 tested (5 survived, 0 timed out)
Mutation testing 21% (elapsed: ~2m, remaining: ~7m) 41/187 tested (5 survived, 0 timed out)
Mutation testing 23% (elapsed: ~2m, remaining: ~7m) 44/187 tested (5 survived, 0 timed out)
Mutation testing 25% (elapsed: ~2m, remaining: ~7m) 47/187 tested (7 survived, 0 timed out)
Mutation testing 27% (elapsed: ~2m, remaining: ~7m) 51/187 tested (9 survived, 0 timed out)
Mutation testing 28% (elapsed: ~2m, remaining: ~6m) 54/187 tested (9 survived, 0 timed out)
Mutation testing 30% (elapsed: ~3m, remaining: ~6m) 57/187 tested (9 survived, 0 timed out)
Mutation testing 32% (elapsed: ~3m, remaining: ~6m) 61/187 tested (11 survived, 0 timed out)
Mutation testing 34% (elapsed: ~3m, remaining: ~6m) 64/187 tested (12 survived, 0 timed out)
Mutation testing 35% (elapsed: ~3m, remaining: ~6m) 67/187 tested (12 survived, 0 timed out)
Mutation testing 37% (elapsed: ~3m, remaining: ~5m) 71/187 tested (12 survived, 0 timed out)
Mutation testing 39% (elapsed: ~3m, remaining: ~5m) 74/187 tested (12 survived, 0 timed out)
Mutation testing 41% (elapsed: ~4m, remaining: ~5m) 77/187 tested (12 survived, 0 timed out)
Mutation testing 43% (elapsed: ~4m, remaining: ~5m) 81/187 tested (15 survived, 0 timed out)
Mutation testing 44% (elapsed: ~4m, remaining: ~5m) 84/187 tested (16 survived, 0 timed out)
Mutation testing 46% (elapsed: ~4m, remaining: ~5m) 87/187 tested (16 survived, 0 timed out)
Mutation testing 48% (elapsed: ~4m, remaining: ~4m) 91/187 tested (16 survived, 0 timed out)
Mutation testing 50% (elapsed: ~4m, remaining: ~4m) 94/187 tested (16 survived, 0 timed out)
Mutation testing 51% (elapsed: ~5m, remaining: ~4m) 97/187 tested (17 survived, 0 timed out)
Mutation testing 54% (elapsed: ~5m, remaining: ~4m) 101/187 tested (18 survived, 0 timed out)
Mutation testing 55% (elapsed: ~5m, remaining: ~4m) 104/187 tested (18 survived, 0 timed out)
Mutation testing 57% (elapsed: ~5m, remaining: ~4m) 107/187 tested (18 survived, 0 timed out)
Mutation testing 59% (elapsed: ~5m, remaining: ~3m) 111/187 tested (18 survived, 0 timed out)
Mutation testing 60% (elapsed: ~5m, remaining: ~3m) 114/187 tested (18 survived, 0 timed out)
Mutation testing 62% (elapsed: ~6m, remaining: ~3m) 117/187 tested (20 survived, 0 timed out)
Mutation testing 64% (elapsed: ~6m, remaining: ~3m) 121/187 tested (20 survived, 0 timed out)
Mutation testing 66% (elapsed: ~6m, remaining: ~3m) 124/187 tested (20 survived, 0 timed out)
Mutation testing 68% (elapsed: ~6m, remaining: ~2m) 128/187 tested (20 survived, 0 timed out)
Mutation testing 70% (elapsed: ~6m, remaining: ~2m) 131/187 tested (21 survived, 0 timed out)
Mutation testing 71% (elapsed: ~6m, remaining: ~2m) 134/187 tested (24 survived, 0 timed out)
Mutation testing 73% (elapsed: ~7m, remaining: ~2m) 138/187 tested (24 survived, 0 timed out)
Mutation testing 75% (elapsed: ~7m, remaining: ~2m) 141/187 tested (25 survived, 0 timed out)
Mutation testing 77% (elapsed: ~7m, remaining: ~2m) 144/187 tested (25 survived, 0 timed out)
Mutation testing 79% (elapsed: ~7m, remaining: ~1m) 148/187 tested (26 survived, 0 timed out)
Mutation testing 80% (elapsed: ~7m, remaining: ~1m) 151/187 tested (28 survived, 0 timed out)
Mutation testing 82% (elapsed: ~7m, remaining: ~1m) 154/187 tested (28 survived, 0 timed out)
Mutation testing 83% (elapsed: ~8m, remaining: ~1m) 157/187 tested (28 survived, 0 timed out)
Mutation testing 86% (elapsed: ~8m, remaining: ~1m) 161/187 tested (29 survived, 0 timed out)
Mutation testing 87% (elapsed: ~8m, remaining: ~1m) 164/187 tested (29 survived, 0 timed out)
Mutation testing 89% (elapsed: ~8m, remaining: ~1m) 167/187 tested (29 survived, 0 timed out)
Mutation testing 90% (elapsed: ~8m, remaining: <1m) 170/187 tested (29 survived, 0 timed out)
Mutation testing 92% (elapsed: ~8m, remaining: <1m) 173/187 tested (29 survived, 0 timed out)
Mutation testing 94% (elapsed: ~9m, remaining: <1m) 177/187 tested (30 survived, 0 timed out)
Mutation testing 96% (elapsed: ~9m, remaining: <1m) 180/187 tested (30 survived, 0 timed out)
Mutation testing 96% (elapsed: ~9m, remaining: <1m) 181/187 tested (31 survived, 0 timed out)
Mutation testing 98% (elapsed: ~9m, remaining: <1m) 184/187 tested (31 survived, 1 timed out)

All tests
  ✓ All tests (killed 155)

[Survived] PrecomputedMutator
src/matcher.ts:29:9
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined) {

[Survived] PrecomputedMutator
src/matcher.ts:29:9
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/$/) !== null && spec.match(/^.+\/$/) !== undefined && spec.match(/^.+\/$/) !== '') {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (min !== 0) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.replace(/([.$])/g, '\\$1')) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.+/) !== null && part.match(/:.+/) !== undefined) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.?/) !== null) {

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.concat()) {

[Survived] PrecomputedMutator
src/policy.ts:33:30
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.concat()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.filter(rule => rule.matches(path, ctx))) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.toLowerCase(), ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:12:26
-       for (const policy of policies) {
+       for (const policy of policies.slice()) {

[Survived] PrecomputedMutator
src/policymap.ts:13:16
-         this.set(policy.name, policy)
+         this.set(policy.name.toLowerCase(), policy)

[Survived] PrecomputedMutator
src/policymap.ts:30:9
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path, verb, ctx, null)

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:41:9
-         ? policy.matches(path, ctx)
+         ? policy.matches(path, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:41:9
-         ? policy.matches(path, ctx)
+         ? policy.matches(path, ctx, null)

[Survived] PrecomputedMutator
src/policymap.ts:41:9
-         ? policy.matches(path, ctx)
+         ? policy.matches(path, ctx, undefined)

[Survived] PrecomputedMutator
src/policymap.ts:41:24
-         ? policy.matches(path, ctx)
+         ? policy.matches(path.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/rule.ts:25:24
-       for (const verb of verbs) {
+       for (const verb of verbs.values()) {

[Survived] PrecomputedMutator
src/rule.ts:35:5
-       for (const verb of verbs) {
-         this.verbs[verb] = false
-       }
+       for (const verb of verbs.values()) {
+     this.verbs[verb] = false;
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.slice()) {

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.map(verb => verb)) {

[Survived] PrecomputedMutator
src/rule.ts:50:22
-       if (this.matches(path, ctx) && verb in this.verbs) {
+       if (this.matches(path.toLowerCase(), ctx) && verb in this.verbs) {

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (ctx === undefined || ctx === null) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

Ran 0.99 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   83.42 |      155 |         1 |         31 |        0 |        0 |
 matcher.ts   |   84.21 |       48 |         0 |          9 |        0 |        0 |
 policy.ts    |   79.41 |       27 |         0 |          7 |        0 |        0 |
 policymap.ts |   83.33 |       40 |         0 |          8 |        0 |        0 |
 rule.ts      |   85.42 |       40 |         1 |          7 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m01:36:23 (2512) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m01:36:23 (2512) INFO MutationTestExecutor[39m Done in 9 minutes 44 seconds.

real	9m45.585s
user	13m20.796s
sys	1m0.908s
