Your task is to apply mutation testing to the following code:
```
                const dirLink = this.getLinkParent(steps);
                if(dirLink) {
                    const name = steps[steps.length - 1];
                    link = this.createLink(dirLink, name, false, perm);
                    return link.getNode();
                }
            }

            throwError(ENOENT, 'getNodeByIdOrCreate', pathToFilename(id))
        }
    }

    private wrapAsync(method: (...args) => void, args: any[], callback: TCallback<any>) {
        validateCallback(callback);
        setImmediate(() => {
            try {
                callback(null, method.apply(this, args));
            } catch(err) {
                callback(err);
            }
        });
    }

    private _toJSON(link = this.root, json = {}, path?: string) {
        for(let name in link.children) {
            let child = link.getChild(name);
            let node = child.getNode();
            if(node.isFile()) {
                let filename = child.getPath();
                if(path) filename = relative(path, filename);
                json[filename] = node.getString();
            } else if(node.isDirectory()) {
                this._toJSON(child, json, path);
            }
        }
        return json;
    }

    toJSON(paths?: TFilePath | TFilePath[], json = {}, isRelative = false) {
        let links: Link[] = [];

        if(paths) {
            if(!(paths instanceof Array)) paths = [paths];
            for(let path of paths) {
                const filename = pathToFilename(path);
                const link = this.getResolvedLink(filename);
                if(!link) continue;
                links.push(link);
            }
        } else {
            links.push(this.root);
        }

        if(!links.length) return json;
        for(let link of links) this._toJSON(link, json, isRelative ? link.getPath() : '');
        return json;
    }

    // fromJSON(json: {[filename: string]: string}, cwd: string = '/') {
    fromJSON(json: {[filename: string]: string}, cwd: string = process.cwd()) {
        for(let filename in json) {
            const data = json[filename];
            filename = resolve(filename, cwd);
            const steps = filenameToSteps(filename);
            if(steps.length > 1) {
                const dirname = sep + steps.slice(0, steps.length - 1).join(sep);
                this.mkdirpBase(dirname, MODE.DIR);
            }
            this.writeFileSync(filename, data);
        }
    }

    reset() {
        this.ino = 0;
        this.inodes = {};
        this.releasedInos = [];
        this.fds = {};
        this.releasedFds = [];
        this.openFiles = 0;

        this.root = this.createLink();
        this.root.setNode(this.createNode(true));
    }

    // Legacy interface
    mountSync(mountpoint: string, json: {[filename: string]: string}) {
        this.fromJSON(json, mountpoint);
    }

    private openLink(link: Link, flagsNum: number, resolveSymlinks: boolean = true): File {
        if(this.openFiles >= this.maxFiles) { // Too many open files.
            throw createError(EMFILE, 'open', link.getPath());
        }

        // Resolve symlinks.
        let realLink: Link = link;
        if(resolveSymlinks) realLink = this.resolveSymlinks(link);
        if(!realLink) throwError(ENOENT, 'open', link.getPath());

        const node = realLink.getNode();
        if(<PLACEHOLDER>)
            throwError(EISDIR, 'open', link.getPath());

        // Check node permissions
        if(!(flagsNum & O_WRONLY)) {
            if(!node.canRead()) {
                throwError(EACCES, 'open', link.getPath());
            }
        }
        if(flagsNum & O_RDWR) {

        }

        const file = new this.props.File(link, node, flagsNum, this.newFdNumber());
        this.fds[file.fd] = file;
        this.openFiles++;

        if(flagsNum & O_TRUNC) file.truncate();

        return file;
    }

    private openFile(filename: string, flagsNum: number, modeNum: number, resolveSymlinks: boolean = true): File {
        const steps = filenameToSteps(filename);
        let link: Link = this.getResolvedLink(steps);

        // Try creating a new file, if it does not exist.
        if(!link) {
            // const dirLink: Link = this.getLinkParent(steps);
            const dirLink: Link = this.getResolvedLink(steps.slice(0, steps.length - 1));
            // if(!dirLink) throwError(ENOENT, 'open', filename);
            if(!dirLink) throwError(ENOENT, 'open', sep + steps.join(sep));

            if((flagsNum & O_CREAT) && (typeof modeNum === 'number')) {
                link = this.createLink(dirLink, steps[steps.length - 1], false, modeNum);
            }
        }

        if(link) return this.openLink(link, flagsNum, resolveSymlinks);
    }

    private openBase(filename: string, flagsNum: number, modeNum: number, resolveSymlinks: boolean = true): number {
        const file = this.openFile(filename, flagsNum, modeNum, resolveSymlinks);
        if(!file) throwError(ENOENT, 'open', filename);
        return file.fd;
    }

    openSync(path: TFilePath, flags: TFlags, mode: TMode = MODE.DEFAULT): number {
        // Validate (1) mode; (2) path; (3) flags - in that order.
        const modeNum = modeToNumber(mode);
        const fileName = pathToFilename(path);
        const flagsNum = flagsToNumber(flags);
        return this.openBase(fileName, flagsNum, modeNum);
    }

    open(path: TFilePath, flags: TFlags, /* ... */                      callback: TCallback<number>);
    open(path: TFilePath, flags: TFlags, mode: TMode,                   callback: TCallback<number>);
    open(path: TFilePath, flags: TFlags, a: TMode|TCallback<number>,    b?: TCallback<number>) {
        let mode: TMode = a as TMode;
        let callback: TCallback<number> = b as TCallback<number>;

        if(typeof a === 'function') {
            mode = MODE.DEFAULT;
            callback = a;
        }
        mode = mode || MODE.DEFAULT;

        const modeNum = modeToNumber(mode);
        const fileName = pathToFilename(path);
        const flagsNum = flagsToNumber(flags);

        this.wrapAsync(this.openBase, [fileName, flagsNum, modeNum], callback);
    }

    private closeFile(file: File) {
        if(!this.fds[file.fd]) return;

        this.openFiles--;
        delete this.fds[file.fd];
        this.releasedFds.push(file.fd);
    }

    closeSync(fd: number) {
        validateFd(fd);
        const file = this.getFileByFdOrThrow(fd, 'close');
        this.closeFile(file);
    }

    close(fd: number, callback: TCallback<void>) {
        validateFd(fd);
        this.wrapAsync(this.closeSync, [fd], callback);
    }

    private openFileOrGetById(id: TFileId, flagsNum: number, modeNum?: number): File {
        if(typeof id === 'number') {
            const file = this.fds[id];
            if(!file)
                throw createError(ENOENT);
            return file;
        } else {
```

by replacing the PLACEHOLDER with a buggy code fragment that has different
behavior than the original code fragment, which was:
```
node.isDirectory() && (flagsNum !== FLAGS.r)
```
Please consider changes such as using different operators, changing constants,
referring to different variables, object properties, functions, or methods.  

Provide three answers as fenced code blocks containing a single line of code,
using the following template:

Option 1: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 2: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Option 3: The PLACEHOLDER can be replaced with:
```
<code fragment>
```
This would result in different behavior because <brief explanation>.

Please conclude your response with "DONE."