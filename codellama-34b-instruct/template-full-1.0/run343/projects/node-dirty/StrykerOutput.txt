*** using precomputed mutations ***
[32m00:33:05 (2628) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m00:33:05 (2628) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m00:33:05 (2628) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m00:33:05 (2628) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m00:33:05 (2628) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m00:33:05 (2628) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 245 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with typeof val === 'undefined'
Mutant 1 in dirty.js: val === undefined replaced with val == null
Mutant 2 in dirty.js: val === undefined replaced with !val
Mutant 3 in dirty.js: key replaced with NaN
Mutant 4 in dirty.js: key replaced with Math.random()
Mutant 5 in dirty.js: key replaced with this._data.lastKey()
Mutant 6 in dirty.js: key replaced with key--
Mutant 7 in dirty.js: key replaced with key ^ 0x1337
Mutant 8 in dirty.js: this.path replaced with !this.path
Mutant 9 in dirty.js: this.path replaced with this._queue.size
Mutant 10 in dirty.js: this._queue.get replaced with this._data.get
Mutant 11 in dirty.js: this._queue.get replaced with this._queue.size
Mutant 12 in dirty.js: this._queue.get replaced with this._queue.clear
Mutant 13 in dirty.js: key replaced with `null`
Mutant 14 in dirty.js: key replaced with `""`
Mutant 15 in dirty.js: key replaced with `"key"`
Mutant 16 in dirty.js: cb replaced with 1 + cb
Mutant 17 in dirty.js: cb replaced with cb + 1
Mutant 18 in dirty.js: cb replaced with cb && 1
Mutant 19 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(this._queue)
Mutant 20 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(this._queue.get(key))
Mutant 21 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(this._queue.set(key))
Mutant 22 in dirty.js: key replaced with key + 1
Mutant 23 in dirty.js: key replaced with undefined
Mutant 24 in dirty.js: cbs replaced with cbs.length
Mutant 25 in dirty.js: cbs replaced with cbs.push(cb)
Mutant 26 in dirty.js: cbs replaced with null
Mutant 27 in dirty.js: cb replaced with cb()
Mutant 28 in dirty.js: cb replaced with false
Mutant 29 in dirty.js: cb replaced with true
Mutant 30 in dirty.js: cb replaced with null
Mutant 31 in dirty.js: this.emit replaced with this.emitUnless
Mutant 32 in dirty.js: this.emit replaced with this.emitAuto
Mutant 33 in dirty.js: this.emit replaced with this.emitContinuously
Mutant 34 in dirty.js: 'drain' replaced with 'error'
Mutant 35 in dirty.js: 'drain' replaced with 'close'
Mutant 36 in dirty.js: 'drain' replaced with 'finish'
Mutant 37 in dirty.js: this._data.get replaced with key + '_mod'
Mutant 38 in dirty.js: key replaced with String.fromCodePoint(key)
Mutant 39 in dirty.js: key replaced with null
Mutant 40 in dirty.js: key replaced with Symbol()
Mutant 41 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 42 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, false, cb)
Mutant 43 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, 0, cb)
Mutant 44 in dirty.js: undefined replaced with null
Mutant 45 in dirty.js: undefined replaced with ''
Mutant 46 in dirty.js: undefined replaced with []
Mutant 47 in dirty.js: cb replaced with cb()
Mutant 48 in dirty.js: cb replaced with undefined
Mutant 49 in dirty.js: cb replaced with this.get(key)
Mutant 50 in dirty.js: this._data replaced with this._queue
Mutant 51 in dirty.js: this._data replaced with this._data.values()
Mutant 52 in dirty.js: this._data replaced with this._data.keys()
Mutant 53 in dirty.js: fn(key, val) === false replaced with fn(key, val) !== false
Mutant 54 in dirty.js: fn(key, val) === false replaced with val === fn(key)
Mutant 55 in dirty.js: fn(key, val) === false replaced with fn(key) && val === false
Mutant 56 in dirty.js: fn(key, val) replaced with fn(key, val + 1)
Mutant 57 in dirty.js: fn(key, val) replaced with fn(key, val + Math.random())
Mutant 58 in dirty.js: fn(key, val) replaced with fn(key, val - Math.random())
Mutant 59 in dirty.js: key replaced with key + 1
Mutant 60 in dirty.js: key replaced with key + 1 + 'foo'
Mutant 61 in dirty.js: key replaced with function () {
  return key + 1;
}
Mutant 62 in dirty.js: val replaced with null
Mutant 63 in dirty.js: val replaced with undefined
Mutant 64 in dirty.js: val replaced with 0
Mutant 65 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(undefined), cb)
Mutant 66 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key.toLowerCase())), cb)
Mutant 67 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key).toString()), cb)
Mutant 68 in dirty.js: key replaced with key2
Mutant 69 in dirty.js: key replaced with "key"
Mutant 70 in dirty.js: key replaced with Math.random()
Mutant 71 in dirty.js: updater(this.get(key)) replaced with this.get(key) + updater
Mutant 72 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key + updater))
Mutant 73 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key) + 1)
Mutant 74 in dirty.js: updater replaced with null
Mutant 75 in dirty.js: updater replaced with NaN
Mutant 76 in dirty.js: this.get(key) replaced with null
Mutant 77 in dirty.js: this.get(key) replaced with "undefined"
Mutant 78 in dirty.js: this.get(key) replaced with 0
Mutant 79 in dirty.js: key replaced with {}
Mutant 80 in dirty.js: cb replaced with null
Mutant 81 in dirty.js: cb replaced with {}
Mutant 82 in dirty.js: cb replaced with () => {}
Mutant 83 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with false
Mutant 84 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size === 0 && this._inFlightWrites <= 0
Mutant 85 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with typeof this._queue.size !== 'undefined' && this._queue.size > 0
Mutant 86 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('data', () => this.close())
Mutant 87 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('error', () => this.close())
Mutant 88 in dirty.js: 'drain' replaced with 'end'
Mutant 89 in dirty.js: 'drain' replaced with 'finish'
Mutant 90 in dirty.js: 'drain' replaced with 'error'
Mutant 91 in dirty.js: () => this.close() replaced with () => {
  this.close();
  this.destroy();
}
Mutant 92 in dirty.js: () => this.close() replaced with () => {
  this.on('drain', this.close);
}
Mutant 93 in dirty.js: () => this.close() replaced with () => {
  this.once('drain', this.close);
}
Mutant 94 in dirty.js: this._readStream replaced with this._writeStream
Mutant 95 in dirty.js: this._readStream replaced with this._queue.size ^ 2
Mutant 96 in dirty.js: this._readStream replaced with this._writeStream.write('')
Mutant 97 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.pipe()
Mutant 98 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end()
Mutant 99 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.destroy(new Error('Intentional failure'))
Mutant 100 in dirty.js: !this.path replaced with this.path = 42
Mutant 101 in dirty.js: !this.path replaced with this.path.toUpperCase()
Mutant 102 in dirty.js: !this.path replaced with this.path.toString()
Mutant 103 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size)
Mutant 104 in dirty.js: this.emit('load', 0) replaced with this.emit('error', new Error('Simulated error'))
Mutant 105 in dirty.js: this.emit('load', 0) replaced with this.emit('write_close')
Mutant 106 in dirty.js: 'load' replaced with 'loaded'
Mutant 107 in dirty.js: 'load' replaced with 'data'
Mutant 108 in dirty.js: 'load' replaced with 'end'
Mutant 109 in dirty.js: err.code === 'ENOENT' replaced with err === undefined
Mutant 110 in dirty.js: err.code === 'ENOENT' replaced with err == 'ENOENT'
Mutant 111 in dirty.js: err.code === 'ENOENT' replaced with err ^= 'ENOENT'
Mutant 112 in dirty.js: this.emit('load', 0) replaced with this.emit('drain')
Mutant 113 in dirty.js: this.emit replaced with this.emitError
Mutant 114 in dirty.js: 'load' replaced with 'error'
Mutant 115 in dirty.js: 'load' replaced with 'write_close'
Mutant 116 in dirty.js: 'load' replaced with 'read_close'
Mutant 117 in dirty.js: 0 replaced with 1
Mutant 118 in dirty.js: 0 replaced with null
Mutant 119 in dirty.js: 0 replaced with this._data.size
Mutant 120 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error(err))
Mutant 121 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 122 in dirty.js: this.emit('error', err) replaced with this.emit('error')
Mutant 123 in dirty.js: this.emit replaced with this.emit.emit
Mutant 124 in dirty.js: this.emit replaced with undefined.emit
Mutant 125 in dirty.js: 'error' replaced with 'foo'
Mutant 126 in dirty.js: 'error' replaced with null
Mutant 127 in dirty.js: err replaced with null
Mutant 128 in dirty.js: err replaced with ''
Mutant 129 in dirty.js: err replaced with undefined
Mutant 130 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') !== -1
Mutant 131 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') < 0
Mutant 132 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.length - chunk.lastIndexOf('\n') < 0
Mutant 133 in dirty.js: buffer.split replaced with buffer.slice
Mutant 134 in dirty.js: buffer.split replaced with buffer.substring
Mutant 135 in dirty.js: '\n' replaced with '\r'
Mutant 136 in dirty.js: '\n' replaced with ''
Mutant 137 in dirty.js: '\n' replaced with ' '
Mutant 138 in dirty.js: !rowStr replaced with rowStr.length > 1
Mutant 139 in dirty.js: !rowStr replaced with rowStr.length === 0
Mutant 140 in dirty.js: !rowStr replaced with rowStr.indexOf('key') !== -1
Mutant 141 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('An empty line indicates a corrupted database'))
Mutant 142 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('The database is not healthy'))
Mutant 143 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('The database is missing data'))
Mutant 144 in dirty.js: 'error' replaced with 'drain'
Mutant 145 in dirty.js: 'error' replaced with 'close'
Mutant 146 in dirty.js: 'error' replaced with 'finish'
Mutant 147 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Unexpected EOF')
Mutant 148 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Corrupted database')
Mutant 149 in dirty.js: new Error('Empty lines never appear in a healthy database') replaced with new Error('Unexpected token')
Mutant 150 in dirty.js: this.emit replaced with this
Mutant 151 in dirty.js: this.emit replaced with this._data
Mutant 152 in dirty.js: this.emit replaced with emit
Mutant 153 in dirty.js: row.val === undefined replaced with row.val === null
Mutant 154 in dirty.js: row.val === undefined replaced with row.val === NaN
Mutant 155 in dirty.js: row.val === undefined replaced with !row.val
Mutant 156 in dirty.js: row.key replaced with row.val
Mutant 157 in dirty.js: row.key replaced with undefined
Mutant 158 in dirty.js: row.key replaced with row.key * 2
Mutant 159 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.val, row.val)
Mutant 160 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, row.val + 1)
Mutant 161 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, null)
Mutant 162 in dirty.js: this._data.set replaced with this._data[key] = row.val
Mutant 163 in dirty.js: row.key replaced with key + 1
Mutant 164 in dirty.js: row.key replaced with key - 1
Mutant 165 in dirty.js: row.key replaced with key * 2
Mutant 166 in dirty.js: row.val replaced with row.value
Mutant 167 in dirty.js: row.val replaced with row["val"]
Mutant 168 in dirty.js: buffer.length replaced with buffer.length + 1
Mutant 169 in dirty.js: buffer.length replaced with buffer.length - 1
Mutant 170 in dirty.js: buffer.length replaced with buffer.length === 0
Mutant 171 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the beginning of the db: ${buffer}`))
Mutant 172 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer} and some other data`))
Mutant 173 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error())
Mutant 174 in dirty.js: 'error' replaced with 'close'
Mutant 175 in dirty.js: 'error' replaced with 'finish'
Mutant 176 in dirty.js: 'error' replaced with 'end'
Mutant 177 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer}, ${this._data.size}`)
Mutant 178 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${this._data.size}`)
Mutant 179 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.length}`)
Mutant 180 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.length)
Mutant 181 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', Object.keys(this._data).length)
Mutant 182 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size * 2)
Mutant 183 in dirty.js: this.emit replaced with this.fake
Mutant 184 in dirty.js: this.emit replaced with this.emit = null
Mutant 185 in dirty.js: this.emit replaced with this.addEventListener
Mutant 186 in dirty.js: 'read_close' replaced with ''
Mutant 187 in dirty.js: 'read_close' replaced with 'error'
Mutant 188 in dirty.js: !this._queue.size replaced with this._queue.size == 0
Mutant 189 in dirty.js: !this._queue.size replaced with this._queue.size > 0
Mutant 190 in dirty.js: !this._queue.size replaced with this._queue.length
Mutant 191 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites > 0
Mutant 192 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites === 0
Mutant 193 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites >= 0
Mutant 194 in dirty.js: this.emit replaced with this.fn
Mutant 195 in dirty.js: this.emit replaced with this["emit"]
Mutant 196 in dirty.js: 'drain' replaced with 'empty'
Mutant 197 in dirty.js: 'drain' replaced with 'write'
Mutant 198 in dirty.js: 'drain' replaced with 'error'
Mutant 199 in dirty.js: 'write_close' replaced with 'write_end'
Mutant 200 in dirty.js: 'write_close' replaced with 'error'
Mutant 201 in dirty.js: 'write_close' replaced with 'drain'
Mutant 202 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size <= 1 || this._waitForDrain
Mutant 203 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size % 2 === 0 || this._waitForDrain
Mutant 204 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size < 0 || this._waitForDrain
Mutant 205 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [val, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 206 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [key, val] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 207 in dirty.js: for (const [key, cbs] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
} replaced with for (const [cbs, key] of this._queue) {
  this._queue.delete(key);
  const data = `${JSON.stringify({
    key,
    val: this._data.get(key)
  })}\n`;
  ++this._inFlightWrites;
  this._waitForDrain = !this._writeStream.write(data, err => {
    if (!cbs.length && err != null) this.emit('error', err);
    if (--this._inFlightWrites <= 0 && !this._waitForDrain) this.emit('drain');
    for (const cb of cbs) cb(err);
  });
  if (this._waitForDrain) break;
}
Mutant 208 in dirty.js: this._queue replaced with this._queue.keys()
Mutant 209 in dirty.js: this._queue replaced with this._queue.length
Mutant 210 in dirty.js: this._queue replaced with this._queue[Symbol.iterator]()
Mutant 211 in dirty.js: key replaced with key + '_bug'
Mutant 212 in dirty.js: key replaced with key.slice(0, -1)
Mutant 213 in dirty.js: key replaced with Object.values(key)
Mutant 214 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.set(key)
}
Mutant 215 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) + 1
}
Mutant 216 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: 'undefined'
}
Mutant 217 in dirty.js: !cbs.length && err != null replaced with !!cbs.length && err != null
Mutant 218 in dirty.js: !cbs.length && err != null replaced with err != null && cbs.length
Mutant 219 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Duplicate key'))
Mutant 220 in dirty.js: this.emit('error', err) replaced with this.emit('error', undefined)
Mutant 221 in dirty.js: this.emit('error', err) replaced with this.emit('drain', undefined)
Mutant 222 in dirty.js: this.emit replaced with null
Mutant 223 in dirty.js: this.emit replaced with undefined
Mutant 224 in dirty.js: 'error' replaced with 'null'
Mutant 225 in dirty.js: 'error' replaced with 'error' + 1
Mutant 226 in dirty.js: err replaced with null
Mutant 227 in dirty.js: err replaced with false
Mutant 228 in dirty.js: err replaced with this._writeStream.emit('error', err)
Mutant 229 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with --this._inFlightWrites >= 0 && this._waitForDrain
Mutant 230 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with --this._waitForDrain && !(this._inFlightWrites > 0)
Mutant 231 in dirty.js: 'drain' replaced with 'error'
Mutant 232 in dirty.js: 'drain' replaced with 'end'
Mutant 233 in dirty.js: 'drain' replaced with 'close'
Mutant 234 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb2 of cbs) cb(err);
Mutant 235 in dirty.js: cbs replaced with cb.shift()
Mutant 236 in dirty.js: cbs replaced with cb.pop()
Mutant 237 in dirty.js: cbs replaced with cb()
Mutant 238 in dirty.js: cb replaced with cbs[0]
Mutant 239 in dirty.js: err replaced with null
Mutant 240 in dirty.js: err replaced with ""
Mutant 241 in dirty.js: err replaced with undefined
Mutant 242 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
Mutant 243 in dirty.js: this._waitForDrain replaced with this._waitForDrain === false
Mutant 244 in dirty.js: this._waitForDrain replaced with this._waitForDrain !== false
[32m00:33:05 (2628) INFO Instrumenter[39m Instrumented 2 source file(s) with 245 mutant(s)
[32m00:33:05 (2628) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m00:33:07 (2628) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m00:33:07 (2628) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m00:33:07 (2628) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 529 ms, overhead 0 ms).
Mutation testing 7% (elapsed: <1m, remaining: ~1m) 19/245 tested (10 survived, 0 timed out)
Mutation testing 12% (elapsed: <1m, remaining: ~2m) 30/245 tested (10 survived, 0 timed out)
Mutation testing 16% (elapsed: <1m, remaining: ~2m) 41/245 tested (10 survived, 0 timed out)
Mutation testing 24% (elapsed: <1m, remaining: ~2m) 60/245 tested (11 survived, 0 timed out)
Mutation testing 32% (elapsed: <1m, remaining: ~1m) 79/245 tested (13 survived, 0 timed out)
Mutation testing 38% (elapsed: ~1m, remaining: ~1m) 94/245 tested (24 survived, 0 timed out)
Mutation testing 42% (elapsed: ~1m, remaining: ~1m) 105/245 tested (26 survived, 0 timed out)
Mutation testing 43% (elapsed: ~1m, remaining: ~1m) 107/245 tested (26 survived, 2 timed out)
Mutation testing 45% (elapsed: ~1m, remaining: ~1m) 111/245 tested (26 survived, 4 timed out)
Mutation testing 46% (elapsed: ~1m, remaining: ~1m) 115/245 tested (26 survived, 5 timed out)
Mutation testing 48% (elapsed: ~1m, remaining: ~1m) 119/245 tested (26 survived, 7 timed out)
Mutation testing 56% (elapsed: ~2m, remaining: ~1m) 138/245 tested (39 survived, 7 timed out)
Mutation testing 64% (elapsed: ~2m, remaining: ~1m) 157/245 tested (53 survived, 7 timed out)
Mutation testing 71% (elapsed: ~2m, remaining: <1m) 176/245 tested (59 survived, 7 timed out)
Mutation testing 80% (elapsed: ~2m, remaining: <1m) 196/245 tested (72 survived, 7 timed out)
Mutation testing 82% (elapsed: ~2m, remaining: <1m) 202/245 tested (75 survived, 7 timed out)
Mutation testing 86% (elapsed: ~2m, remaining: <1m) 212/245 tested (78 survived, 8 timed out)
Mutation testing 91% (elapsed: ~3m, remaining: <1m) 224/245 tested (85 survived, 8 timed out)
Mutation testing 93% (elapsed: ~3m, remaining: <1m) 230/245 tested (90 survived, 9 timed out)
Mutation testing 94% (elapsed: ~3m, remaining: <1m) 232/245 tested (90 survived, 10 timed out)
Mutation testing 98% (elapsed: ~3m, remaining: <1m) 241/245 tested (93 survived, 12 timed out)

All tests
  ✓ All tests (killed 136)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (typeof val === 'undefined') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (!val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:19
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.clear(key) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(`null`) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(`""`) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(`"key"`) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:11
-         if (cb) cbs.push(cb);
+         if (1 + cb) cbs.push(cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:11
-         if (cb) cbs.push(cb);
+         if (cb + 1) cbs.push(cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:35:11
-         if (cb) cbs.push(cb);
+         if (cb && 1) cbs.push(cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key.toLowerCase())), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key).toString()), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (false) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (typeof this._queue.size !== 'undefined' && this._queue.size > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('data', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:7
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('end', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('finish', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => {
+     this.on('drain', this.close);
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => {
+     this.once('drain', this.close);
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:101:9
-           this.emit('load', 0);
+           this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:114:31
-               this.emit('load', 0);
+               this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error(err));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             undefined.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('foo', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit(null, err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', '');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('\n') < 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:15
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.length - chunk.lastIndexOf('\n') < 0) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('An empty line indicates a corrupted database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('The database is not healthy'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('The database is missing data'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('drain', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('close', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('finish', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Unexpected EOF'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Corrupted database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:34
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Unexpected token'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this._data('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 emit('error', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (!row.val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:145:39
-                 this._data.set(row.key, row.val);
+                 this._data.set(row.key, row["val"]);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the beginning of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer} and some other data`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('close', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('finish', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}, ${this._data.size}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${this._data.size}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.length}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:158:21
-             this.emit('read_close');
+             this.emit('');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size == 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size > 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.length) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites > 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites === 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites >= 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:40
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.fn('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:40
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this["emit"]('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('empty');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('write');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('error');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size % 2 === 0 || this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:182:9
-       if (!this._queue.size || this._waitForDrain) return;
+       if (this._queue.size < 0 || this._waitForDrain) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:184:30
-       for (const [key, cbs] of this._queue) {
+       for (const [key, cbs] of this._queue[Symbol.iterator]()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!!cbs.length && err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (err != null && cbs.length) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Duplicate key'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('drain', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) null('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) undefined('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('null', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error' + 1, err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', false);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', this._writeStream.emit('error', err));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:31
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cbs[0](err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb("");

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain !== false) break;

Ran 0.95 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   60.41 |      136 |        12 |         97 |        0 |        0 |
 dirty.js |   60.41 |      136 |        12 |         97 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m00:36:39 (2628) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m00:36:39 (2628) INFO MutationTestExecutor[39m Done in 3 minutes 34 seconds.

real	3m36.051s
user	2m10.486s
sys	0m22.629s
