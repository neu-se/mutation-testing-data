*** using precomputed mutations ***
[32m15:31:48 (2628) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m15:31:48 (2628) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m15:31:49 (2628) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m15:31:49 (2628) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m15:31:49 (2628) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m15:31:49 (2628) INFO ProjectReader[39m Found 2 of 664 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 269 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_0.5/mutants.json ***
Mutant 0 in dirty.js: val === undefined replaced with val == null
Mutant 1 in dirty.js: val === undefined replaced with !val
Mutant 2 in dirty.js: val === undefined replaced with typeof val === 'undefined'
Mutant 3 in dirty.js: key replaced with null
Mutant 4 in dirty.js: key replaced with undefined
Mutant 5 in dirty.js: key replaced with key + '_'
Mutant 6 in dirty.js: key replaced with "key" + Math.random()
Mutant 7 in dirty.js: key replaced with key.toUpperCase()
Mutant 8 in dirty.js: key replaced with key + "a"
Mutant 9 in dirty.js: val replaced with null
Mutant 10 in dirty.js: val replaced with undefined
Mutant 11 in dirty.js: val replaced with 0
Mutant 12 in dirty.js: this.path replaced with this.path.toLowerCase()
Mutant 13 in dirty.js: this.path replaced with this.path.split('/').pop()
Mutant 14 in dirty.js: key replaced with key + 1
Mutant 15 in dirty.js: key replaced with key - 1
Mutant 16 in dirty.js: key replaced with key.toUpperCase()
Mutant 17 in dirty.js: cb replaced with !cbs.length
Mutant 18 in dirty.js: cb replaced with cbs.length === 0
Mutant 19 in dirty.js: cb replaced with null
Mutant 20 in dirty.js: cb replaced with () => {}
Mutant 21 in dirty.js: cb replaced with () => {
  throw new Error('test error');
}
Mutant 22 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, [])
Mutant 23 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, cbs.slice())
Mutant 24 in dirty.js: this._queue.set(key, cbs) replaced with this._queue.set(key, cbs.concat())
Mutant 25 in dirty.js: key replaced with key++
Mutant 26 in dirty.js: key replaced with key--
Mutant 27 in dirty.js: key replaced with key + 1
Mutant 28 in dirty.js: cbs replaced with cbs.slice()
Mutant 29 in dirty.js: cbs replaced with cbs.filter(Boolean)
Mutant 30 in dirty.js: cbs replaced with cbs.map(cb => cb())
Mutant 31 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
}
Mutant 32 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('drain', 1);
}
Mutant 33 in dirty.js: () => {
  if (cb) cb();
  this.emit('drain');
} replaced with () => {
  if (cb) cb();
  this.emit('drain', 'foo');
}
Mutant 34 in dirty.js: cb replaced with !cb
Mutant 35 in dirty.js: cb replaced with cb && false
Mutant 36 in dirty.js: cb replaced with cb || true
Mutant 37 in dirty.js: 'drain' replaced with 'error'
Mutant 38 in dirty.js: 'drain' replaced with 'close'
Mutant 39 in dirty.js: 'drain' replaced with 'load'
Mutant 40 in dirty.js: key replaced with this._data.get(key)
Mutant 41 in dirty.js: key replaced with this._data.get(undefined)
Mutant 42 in dirty.js: key replaced with this._data.get(null)
Mutant 43 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, null, cb)
Mutant 44 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, undefined, null)
Mutant 45 in dirty.js: this.set(key, undefined, cb) replaced with this.set(key, undefined, () => {})
Mutant 46 in dirty.js: key replaced with key + 'x'
Mutant 47 in dirty.js: key replaced with undefined
Mutant 48 in dirty.js: key replaced with 'key'
Mutant 49 in dirty.js: undefined replaced with null
Mutant 50 in dirty.js: undefined replaced with 'null'
Mutant 51 in dirty.js: undefined replaced with {}
Mutant 52 in dirty.js: cb replaced with null
Mutant 53 in dirty.js: cb replaced with undefined
Mutant 54 in dirty.js: cb replaced with 0
Mutant 55 in dirty.js: this._data replaced with this._queue
Mutant 56 in dirty.js: this._data replaced with this._data.keys()
Mutant 57 in dirty.js: fn(key, val) === false replaced with fn(key, val) === true
Mutant 58 in dirty.js: fn(key, val) === false replaced with key === val
Mutant 59 in dirty.js: fn(key, val) === false replaced with val === undefined
Mutant 60 in dirty.js: fn(key, val) replaced with fn(key, this._data.get(key))
Mutant 61 in dirty.js: fn(key, val) replaced with fn(key, val + 1)
Mutant 62 in dirty.js: key replaced with key + 1
Mutant 63 in dirty.js: key replaced with key - 1
Mutant 64 in dirty.js: key replaced with key * 2
Mutant 65 in dirty.js: val replaced with null
Mutant 66 in dirty.js: val replaced with ''
Mutant 67 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key)), null)
Mutant 68 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key)), undefined)
Mutant 69 in dirty.js: this.set(key, updater(this.get(key)), cb) replaced with this.set(key, updater(this.get(key)), () => {})
Mutant 70 in dirty.js: key replaced with undefined
Mutant 71 in dirty.js: key replaced with null
Mutant 72 in dirty.js: key replaced with this.get(key)
Mutant 73 in dirty.js: updater(this.get(key)) replaced with updater(this._data.get(key))
Mutant 74 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key + 'foo'))
Mutant 75 in dirty.js: updater(this.get(key)) replaced with updater(this.get(key) + 'foo')
Mutant 76 in dirty.js: updater replaced with updater + 1
Mutant 77 in dirty.js: updater replaced with updater * 2
Mutant 78 in dirty.js: updater replaced with updater / 2
Mutant 79 in dirty.js: this.get(key) replaced with this.set(key, undefined)
Mutant 80 in dirty.js: this.get(key) replaced with this.get(key + 'suffix')
Mutant 81 in dirty.js: this.get(key) replaced with this.set(key, undefined, () => {})
Mutant 82 in dirty.js: key replaced with this.get(key + 1)
Mutant 83 in dirty.js: key replaced with this.get(key - 1)
Mutant 84 in dirty.js: cb replaced with null
Mutant 85 in dirty.js: cb replaced with cb()
Mutant 86 in dirty.js: cb replaced with cb.call(this)
Mutant 87 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size || this._inFlightWrites > 1
Mutant 88 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size || this._inFlightWrites === 0
Mutant 89 in dirty.js: this._queue.size || this._inFlightWrites > 0 replaced with this._queue.size || this._inFlightWrites < 0
Mutant 90 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('close')
Mutant 91 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('error')
Mutant 92 in dirty.js: this.once('drain', () => this.close()) replaced with this.once('end')
Mutant 93 in dirty.js: 'drain' replaced with 'close'
Mutant 94 in dirty.js: 'drain' replaced with 'error'
Mutant 95 in dirty.js: 'drain' replaced with 'finish'
Mutant 96 in dirty.js: () => this.close() replaced with () => this.close(true)
Mutant 97 in dirty.js: () => this.close() replaced with () => this.close(false)
Mutant 98 in dirty.js: this.close replaced with this.destroy
Mutant 99 in dirty.js: this.close replaced with this._writeStream.end
Mutant 100 in dirty.js: this.close replaced with this._writeStream.close
Mutant 101 in dirty.js: this._readStream replaced with this._writeStream
Mutant 102 in dirty.js: this._readStream replaced with this._data
Mutant 103 in dirty.js: this._readStream replaced with this._queue
Mutant 104 in dirty.js: this._writeStream replaced with this._writeStream.destroy()
Mutant 105 in dirty.js: this._writeStream replaced with this._writeStream.end()
Mutant 106 in dirty.js: this._writeStream replaced with this._writeStream.emit('error', new Error('Test error'))
Mutant 107 in dirty.js: this._writeStream.end replaced with this._writeStream.destroy
Mutant 108 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.end()
Mutant 109 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.destroy(new Error('Intentional error'))
Mutant 110 in dirty.js: () => this._writeStream.destroy() replaced with () => this._writeStream.write('corrupted data')
Mutant 111 in dirty.js: !this.path replaced with this.path === undefined
Mutant 112 in dirty.js: !this.path replaced with this.path.length === 0
Mutant 113 in dirty.js: !this.path replaced with this.path.startsWith('foo')
Mutant 114 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 115 in dirty.js: this.emit('load', 0) replaced with this.emit('load', '0')
Mutant 116 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 'drain')
Mutant 117 in dirty.js: 'load' replaced with 'error'
Mutant 118 in dirty.js: 'load' replaced with 'close'
Mutant 119 in dirty.js: 'load' replaced with 'drain'
Mutant 120 in dirty.js: 0 replaced with 1
Mutant 121 in dirty.js: 0 replaced with "error"
Mutant 122 in dirty.js: 0 replaced with new Error()
Mutant 123 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'EACCES'
Mutant 124 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOENT' && this.path !== '.'
Mutant 125 in dirty.js: err.code === 'ENOENT' replaced with err.code === 'ENOENT' && this.path !== '..'
Mutant 126 in dirty.js: this.emit('load', 0) replaced with this.emit('load', 1)
Mutant 127 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size)
Mutant 128 in dirty.js: this.emit('load', 0) replaced with this.emit('load', this._data.size * 2)
Mutant 129 in dirty.js: 'load' replaced with 'error'
Mutant 130 in dirty.js: 'load' replaced with 'drain'
Mutant 131 in dirty.js: 'load' replaced with 'close'
Mutant 132 in dirty.js: 0 replaced with 1
Mutant 133 in dirty.js: 0 replaced with null
Mutant 134 in dirty.js: 0 replaced with undefined
Mutant 135 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error())
Mutant 136 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 137 in dirty.js: this.emit('error', err) replaced with this.emit('error', undefined)
Mutant 138 in dirty.js: 'error' replaced with 'data'
Mutant 139 in dirty.js: 'error' replaced with 'end'
Mutant 140 in dirty.js: 'error' replaced with 'load'
Mutant 141 in dirty.js: err replaced with err.message
Mutant 142 in dirty.js: err replaced with err.code
Mutant 143 in dirty.js: err replaced with new Error(err)
Mutant 144 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.lastIndexOf('\n') > -1
Mutant 145 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.includes('\n')
Mutant 146 in dirty.js: chunk.lastIndexOf('\n') === -1 replaced with chunk.indexOf('\n') > -1
Mutant 147 in dirty.js: '\n' replaced with '\t'
Mutant 148 in dirty.js: '\n' replaced with ''
Mutant 149 in dirty.js: '\n' replaced with ' '
Mutant 150 in dirty.js: '\n' replaced with '\r\n'
Mutant 151 in dirty.js: '\n' replaced with ''
Mutant 152 in dirty.js: '\n' replaced with '\n\r'
Mutant 153 in dirty.js: arr.pop replaced with arr.shift
Mutant 154 in dirty.js: arr.pop replaced with arr.length - 1
Mutant 155 in dirty.js: !rowStr replaced with rowStr.length === 0
Mutant 156 in dirty.js: !rowStr replaced with rowStr === ''
Mutant 157 in dirty.js: !rowStr replaced with rowStr === null
Mutant 158 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('Empty lines are not allowed in the database'))
Mutant 159 in dirty.js: this.emit('error', new Error('Empty lines never appear in a healthy database')) replaced with this.emit('error', new Error('The database contains empty lines'))
Mutant 160 in dirty.js: 'error' replaced with 'warning'
Mutant 161 in dirty.js: 'error' replaced with 'info'
Mutant 162 in dirty.js: 'error' replaced with 'debug'
Mutant 163 in dirty.js: JSON.parse replaced with JSON.stringify
Mutant 164 in dirty.js: JSON.parse replaced with eval
Mutant 165 in dirty.js: JSON.parse replaced with console.log
Mutant 166 in dirty.js: rowStr replaced with rowStr.toUpperCase()
Mutant 167 in dirty.js: rowStr replaced with rowStr.split(',')
Mutant 168 in dirty.js: !('key' in row) replaced with row.key === undefined
Mutant 169 in dirty.js: !('key' in row) replaced with !row.hasOwnProperty('key')
Mutant 170 in dirty.js: !('key' in row) replaced with row.key !== 'key'
Mutant 171 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error('Corrupted row'))
Mutant 172 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Corrupted row: ${rowStr.slice(0, 10)}...`))
Mutant 173 in dirty.js: this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`)) replaced with this.emit('error', new Error(`Corrupted row: ${rowStr.replace(/\n/g, '')}`))
Mutant 174 in dirty.js: 'error' replaced with 'warn'
Mutant 175 in dirty.js: 'error' replaced with 'close'
Mutant 176 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Corrupted row: ${rowStr}`)
Mutant 177 in dirty.js: new Error(`Could not load corrupted row: ${rowStr}`) replaced with new Error(`Could not load row: ${rowStr}`)
Mutant 178 in dirty.js: row.val === undefined replaced with row.val == undefined
Mutant 179 in dirty.js: row.val === undefined replaced with row.val !== undefined
Mutant 180 in dirty.js: row.val === undefined replaced with !row.hasOwnProperty('val')
Mutant 181 in dirty.js: row.key replaced with row.val
Mutant 182 in dirty.js: row.key replaced with row.key + 1
Mutant 183 in dirty.js: row.key replaced with this._data.get(row.key)
Mutant 184 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.val, row.val)
Mutant 185 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, undefined)
Mutant 186 in dirty.js: this._data.set(row.key, row.val) replaced with this._data.set(row.key, null)
Mutant 187 in dirty.js: this._data.set replaced with this._data.clear
Mutant 188 in dirty.js: row.key replaced with row.val
Mutant 189 in dirty.js: row.key replaced with row.key + 1
Mutant 190 in dirty.js: row.key replaced with row.key.toLowerCase()
Mutant 191 in dirty.js: row.val replaced with row.val + 1
Mutant 192 in dirty.js: row.val replaced with row.val - 1
Mutant 193 in dirty.js: row.val replaced with row.val * 2
Mutant 194 in dirty.js: buffer.length replaced with buffer.length + 1
Mutant 195 in dirty.js: buffer.length replaced with buffer.length - 1
Mutant 196 in dirty.js: buffer.length replaced with buffer.length * 2
Mutant 197 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`))
Mutant 198 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`))
Mutant 199 in dirty.js: this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`)) replaced with this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.split(' ').join('')}`))
Mutant 200 in dirty.js: 'error' replaced with 'end'
Mutant 201 in dirty.js: 'error' replaced with 'close'
Mutant 202 in dirty.js: 'error' replaced with 'drain'
Mutant 203 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`)
Mutant 204 in dirty.js: new Error(`Corrupted row at the end of the db: ${buffer}`) replaced with new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`)
Mutant 205 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size + 1)
Mutant 206 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size - 1)
Mutant 207 in dirty.js: this.emit('load', this._data.size) replaced with this.emit('load', this._data.size * 2)
Mutant 208 in dirty.js: 'load' replaced with 'loaded'
Mutant 209 in dirty.js: 'load' replaced with 'load_complete'
Mutant 210 in dirty.js: 'load' replaced with 'load_error'
Mutant 211 in dirty.js: this._data.size replaced with this._data.length
Mutant 212 in dirty.js: this._data.size replaced with this._data.size()
Mutant 213 in dirty.js: this._data.size replaced with this._data.keys().length
Mutant 214 in dirty.js: 'read_close' replaced with 'write_close'
Mutant 215 in dirty.js: 'read_close' replaced with 'error'
Mutant 216 in dirty.js: 'read_close' replaced with 'drain'
Mutant 217 in dirty.js: !this._queue.size replaced with this._queue.length
Mutant 218 in dirty.js: !this._queue.size replaced with this._queue.size === 0
Mutant 219 in dirty.js: !this._queue.size replaced with this._queue.isEmpty()
Mutant 220 in dirty.js: this._inFlightWrites <= 0 replaced with this._inFlightWrites > 0
Mutant 221 in dirty.js: this._inFlightWrites <= 0 replaced with this._queue.size > 0
Mutant 222 in dirty.js: 'drain' replaced with 'drained'
Mutant 223 in dirty.js: 'drain' replaced with 'drain' + 'ed'
Mutant 224 in dirty.js: 'drain' replaced with 'drain' + 'ing'
Mutant 225 in dirty.js: 'write_close' replaced with 'close'
Mutant 226 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size && !this._waitForDrain
Mutant 227 in dirty.js: !this._queue.size || this._waitForDrain replaced with this._queue.size > 0 || this._waitForDrain
Mutant 228 in dirty.js: !this._queue.size || this._waitForDrain replaced with !this._queue.isEmpty() || this._waitForDrain
Mutant 229 in dirty.js: this._queue replaced with this._data
Mutant 230 in dirty.js: this._queue replaced with this._queue.size
Mutant 231 in dirty.js: this._queue replaced with this._queue.values()
Mutant 232 in dirty.js: key replaced with key + 1
Mutant 233 in dirty.js: key replaced with key * 2
Mutant 234 in dirty.js: key replaced with key.toString()
Mutant 235 in dirty.js: JSON.stringify replaced with JSON.parse
Mutant 236 in dirty.js: JSON.stringify replaced with key + ''
Mutant 237 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.set(key)
}
Mutant 238 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) + 1
}
Mutant 239 in dirty.js: {
  key,
  val: this._data.get(key)
} replaced with {
  key,
  val: this._data.get(key) * 2
}
Mutant 240 in dirty.js: this._data.get replaced with this._data.size
Mutant 241 in dirty.js: key replaced with this._data.get(key + 'foo')
Mutant 242 in dirty.js: key replaced with this._data.get(key, 'bar')
Mutant 243 in dirty.js: !cbs.length && err != null replaced with cbs.length > 0 && err != null
Mutant 244 in dirty.js: !cbs.length && err != null replaced with !cbs.length || err != null
Mutant 245 in dirty.js: !cbs.length && err != null replaced with cbs.length > 0 || err != null
Mutant 246 in dirty.js: this.emit('error', err) replaced with this.emit('error', null)
Mutant 247 in dirty.js: this.emit('error', err) replaced with this.emit('error', new Error('Custom error message'))
Mutant 248 in dirty.js: this.emit('error', err) replaced with this.emit('error', err.message)
Mutant 249 in dirty.js: 'error' replaced with 'drain'
Mutant 250 in dirty.js: 'error' replaced with 'close'
Mutant 251 in dirty.js: 'error' replaced with 'finish'
Mutant 252 in dirty.js: err replaced with err.message
Mutant 253 in dirty.js: err replaced with err.code
Mutant 254 in dirty.js: err replaced with err.stack
Mutant 255 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites < 0 && !this._waitForDrain
Mutant 256 in dirty.js: --this._inFlightWrites <= 0 && !this._waitForDrain replaced with this._inFlightWrites <= 0
Mutant 257 in dirty.js: 'drain' replaced with 'drained'
Mutant 258 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.reverse()) cb(err);
Mutant 259 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.filter(cb => cb !== undefined)) cb(err);
Mutant 260 in dirty.js: for (const cb of cbs) cb(err); replaced with for (const cb of cbs.map(cb => cb + 1)) cb(err);
Mutant 261 in dirty.js: cbs replaced with cbs.slice()
Mutant 262 in dirty.js: cbs replaced with cbs.concat()
Mutant 263 in dirty.js: cbs replaced with cbs.map()
Mutant 264 in dirty.js: err replaced with null
Mutant 265 in dirty.js: err replaced with "error"
Mutant 266 in dirty.js: this._waitForDrain replaced with !this._waitForDrain
Mutant 267 in dirty.js: this._waitForDrain replaced with this._waitForDrain === false
Mutant 268 in dirty.js: this._waitForDrain replaced with this._waitForDrain ? true : false
[32m15:31:49 (2628) INFO Instrumenter[39m Instrumented 2 source file(s) with 269 mutant(s)
[32m15:31:49 (2628) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m15:31:50 (2628) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m15:31:50 (2628) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m15:31:51 (2628) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 0 seconds (net 524 ms, overhead 0 ms).
Mutation testing 7% (elapsed: <1m, remaining: ~2m) 19/269 tested (5 survived, 0 timed out)
Mutation testing 11% (elapsed: <1m, remaining: ~2m) 30/269 tested (9 survived, 0 timed out)
Mutation testing 14% (elapsed: <1m, remaining: ~3m) 38/269 tested (11 survived, 0 timed out)
Mutation testing 20% (elapsed: <1m, remaining: ~2m) 54/269 tested (15 survived, 0 timed out)
Mutation testing 27% (elapsed: <1m, remaining: ~2m) 73/269 tested (21 survived, 0 timed out)
Mutation testing 32% (elapsed: ~1m, remaining: ~2m) 88/269 tested (24 survived, 0 timed out)
Mutation testing 39% (elapsed: ~1m, remaining: ~1m) 107/269 tested (34 survived, 0 timed out)
Mutation testing 43% (elapsed: ~1m, remaining: ~1m) 118/269 tested (35 survived, 0 timed out)
Mutation testing 46% (elapsed: ~1m, remaining: ~1m) 126/269 tested (37 survived, 2 timed out)
Mutation testing 48% (elapsed: ~1m, remaining: ~1m) 131/269 tested (39 survived, 3 timed out)
Mutation testing 53% (elapsed: ~1m, remaining: ~1m) 144/269 tested (48 survived, 4 timed out)
Mutation testing 60% (elapsed: ~2m, remaining: ~1m) 163/269 tested (57 survived, 4 timed out)
Mutation testing 68% (elapsed: ~2m, remaining: ~1m) 183/269 tested (69 survived, 4 timed out)
Mutation testing 75% (elapsed: ~2m, remaining: <1m) 202/269 tested (75 survived, 4 timed out)
Mutation testing 77% (elapsed: ~2m, remaining: <1m) 209/269 tested (78 survived, 5 timed out)
Mutation testing 78% (elapsed: ~2m, remaining: <1m) 210/269 tested (78 survived, 6 timed out)
Mutation testing 83% (elapsed: ~2m, remaining: <1m) 225/269 tested (86 survived, 7 timed out)
Mutation testing 84% (elapsed: ~3m, remaining: <1m) 227/269 tested (86 survived, 8 timed out)
Mutation testing 87% (elapsed: ~3m, remaining: <1m) 235/269 tested (87 survived, 9 timed out)
Mutation testing 94% (elapsed: ~3m, remaining: <1m) 254/269 tested (96 survived, 9 timed out)
Mutation testing 95% (elapsed: ~3m, remaining: <1m) 256/269 tested (97 survived, 10 timed out)
Mutation testing 97% (elapsed: ~3m, remaining: <1m) 262/269 tested (100 survived, 12 timed out)

All tests
  ✓ All tests (killed 152)

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (val == null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (!val) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:28:9
-       if (val === undefined) {
+       if (typeof val === 'undefined') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key + 1) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:34:35
-         const cbs = this._queue.get(key) || [];
+         const cbs = this._queue.get(key - 1) || [];

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:7
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.slice());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:7
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.concat());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.slice());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:36:28
-         this._queue.set(key, cbs);
+         this._queue.set(key, cbs.filter(Boolean));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) cb();
+     this.emit('drain', 1);
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:39:20
-         setImmediate(() => { if (cb) cb(); this.emit('drain'); });
+         setImmediate(() => {
+     if (cb) cb();
+     this.emit('drain', 'foo');
+   });

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:5
-       this.set(key, undefined, cb);
+       this.set(key, undefined, null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:5
-       this.set(key, undefined, cb);
+       this.set(key, undefined, () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:62:30
-       this.set(key, undefined, cb);
+       this.set(key, undefined, 0);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, val) === true) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:70:11
-         if (fn(key, val) === false) break;
+         if (fn(key, this._data.get(key)) === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:5
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), () => {});

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:19
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this._data.get(key)), cb);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:80:43
-       this.set(key, updater(this.get(key)), cb);
+       this.set(key, updater(this.get(key)), null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size || this._inFlightWrites > 1) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:87:9
-       if (this._queue.size || this._inFlightWrites > 0) {
+       if (this._queue.size || this._inFlightWrites < 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('close', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('error', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:17
-         this.once('drain', () => this.close());
+         this.once('finish', () => this.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(true));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:26
-         this.once('drain', () => this.close());
+         this.once('drain', () => this.close(false));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:32
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:88:32
-         this.once('drain', () => this.close());
+         this.once('drain', () => this._writeStream.close());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.destroy()) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:9
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream.end()) this._writeStream.end(() => this._writeStream.destroy());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:92:50
-       if (this._writeStream) this._writeStream.end(() => this._writeStream.destroy());
+       if (this._writeStream) this._writeStream.end(() => this._writeStream.end());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:113:15
-             if (err.code === 'ENOENT') {
+             if (err.code === 'ENOENT' && this.path !== '.') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:113:15
-             if (err.code === 'ENOENT') {
+             if (err.code === 'ENOENT' && this.path !== '..') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:114:13
-               this.emit('load', 0);
+               this.emit('load', this._data.size);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:114:13
-               this.emit('load', 0);
+               this.emit('load', this._data.size * 2);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', new Error());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:11
-             this.emit('error', err);
+             this.emit('error', undefined);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('data', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('end', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:21
-             this.emit('error', err);
+             this.emit('load', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', err.code);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:118:30
-             this.emit('error', err);
+             this.emit('error', new Error(err));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:122:33
-             if (chunk.lastIndexOf('\n') === -1) return;
+             if (chunk.lastIndexOf('') === -1) return;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr.length === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr === '') {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:126:17
-               if (!rowStr) {
+               if (rowStr === null) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('Empty lines are not allowed in the database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:15
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('error', new Error('The database contains empty lines'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('warning', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('info', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:127:25
-                 this.emit('error', new Error('Empty lines never appear in a healthy database'));
+                 this.emit('debug', new Error('Empty lines never appear in a healthy database'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:133:32
-                 row = JSON.parse(rowStr);
+                 row = JSON.parse(rowStr.split(','));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (row.key === undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:134:19
-                 if (!('key' in row)) {
+                 if (!row.hasOwnProperty('key')) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error('Corrupted row'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${rowStr.slice(0, 10)}...`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:15
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${rowStr.replace(/\n/g, '')}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('warn', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:25
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('close', new Error(`Could not load corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Corrupted row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:138:34
-                 this.emit('error', new Error(`Could not load corrupted row: ${rowStr}`));
+                 this.emit('error', new Error(`Could not load row: ${rowStr}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (row.val == undefined) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:142:17
-               if (row.val === undefined) {
+               if (!row.hasOwnProperty('val')) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:151:15
-             if (buffer.length) {
+             if (buffer.length * 2) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:13
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.split(' ').join('')}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('end', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('close', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:23
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('drain', new Error(`Corrupted row at the end of the db: ${buffer}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.slice(0, -1)}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:152:32
-               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer}`));
+               this.emit('error', new Error(`Corrupted row at the end of the db: ${buffer.toUpperCase()}`));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.length) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.size === 0) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:168:11
-         if (!this._queue.size) {
+         if (this._queue.isEmpty()) {

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites > 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:13
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._queue.size > 0) this.emit('drain');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('drained');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('drain' + 'ed');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:169:50
-           if (this._inFlightWrites <= 0) this.emit('drain');
+           if (this._inFlightWrites <= 0) this.emit('drain' + 'ing');

[Survived] PrecomputedMutator
lib/dirty/dirty.js:185:26
-         this._queue.delete(key);
+         this._queue.delete(key.toString());

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:13
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (cbs.length > 0 && err != null) this.emit('error', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', new Error('Custom error message'));

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:41
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('drain', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('close', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:51
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('finish', err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err.message);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err.code);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:189:60
-           if (!cbs.length && err != null) this.emit('error', err);
+           if (!cbs.length && err != null) this.emit('error', err.stack);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:9
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.reverse()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:9
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.filter(cb => cb !== undefined)) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.slice()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:26
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs.concat()) cb(err);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:191:34
-           for (const cb of cbs) cb(err);
+           for (const cb of cbs) cb(null);

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (!this._waitForDrain) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain === false) break;

[Survived] PrecomputedMutator
lib/dirty/dirty.js:193:11
-         if (this._waitForDrain) break;
+         if (this._waitForDrain ? true : false) break;

Ran 0.96 tests per mutant on average.
----------|---------|----------|-----------|------------|----------|----------|
File      | % score | # killed | # timeout | # survived | # no cov | # errors |
----------|---------|----------|-----------|------------|----------|----------|
All files |   60.97 |      152 |        12 |        105 |        0 |        0 |
 dirty.js |   60.97 |      152 |        12 |        105 |        0 |        0 |
----------|---------|----------|-----------|------------|----------|----------|
[32m15:35:34 (2628) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/node-dirty/reports/mutation/mutation.html
[32m15:35:34 (2628) INFO MutationTestExecutor[39m Done in 3 minutes 45 seconds.

real	3m47.180s
user	2m22.140s
sys	0m24.847s
