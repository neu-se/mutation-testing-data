*** using precomputed mutations ***
[32m15:37:25 (2474) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m15:37:25 (2474) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m15:37:25 (2474) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m15:37:26 (2474) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m15:37:26 (2474) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m15:37:26 (2474) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 178 mutants from MUTATION_TESTING/template-full_mixtral-8x7b-instruct_0.0/mutants.json ***
failed to parse replacement spec.search(/[^a-zA-Z0-9_/:~.$+*-]/) !== -1: SyntaxError: Invalid regular expression: //[^a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /[^a-zA-Z0-9_/:~.$+*-]/.test(spec): SyntaxError: Invalid regular expression: //[^a-zA-Z0-9_//: Unterminated character class
failed to parse replacement !spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/): SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
failed to parse replacement /^[a-zA-Z0-9_/:~.$+*]*$/: SyntaxError: Invalid regular expression: //^[a-zA-Z0-9_//: Unterminated character class
Mutant 0 in matcher.ts: spec.match(/^\//) === null replaced with spec.startsWith('/') === false
failed to parse replacement /[/][/]/: SyntaxError: Invalid regular expression: //[//: Unterminated character class
failed to parse replacement /[*][/]/: SyntaxError: Invalid regular expression: //[*][//: Unterminated character class
failed to parse replacement version === '1' || version === '1.1' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/: SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
failed to parse replacement spec.match(version === '1' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null: SyntaxError: Invalid regular expression: //[*+][^//: Unterminated character class
failed to parse replacement spec.match(/[^/]:|:\/|:$/g) !== null: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
failed to parse replacement spec.match(/[^/]:|:\/|:\s/) !== null: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
failed to parse replacement spec.match(/[^/]:|:\/|:/) !== null: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
failed to parse replacement /[^/][:]|:\/|:$/: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
failed to parse replacement /[^/]:|:\/*|:$/: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
failed to parse replacement /[^/]:|:\/|:[a-zA-Z]/: SyntaxError: Invalid regular expression: //[^//: Unterminated character class
failed to parse replacement spec.match(/^.+[^/]$/) !== null: SyntaxError: Invalid regular expression: //^.+[^//: Unterminated character class
failed to parse replacement spec.match(/^.+[^/]$/) === null: SyntaxError: Invalid regular expression: //^.+[^//: Unterminated character class
Mutant 1 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.endsWith('/')
failed to parse replacement /^.+[^/]+$/: SyntaxError: Invalid regular expression: //^.+[^//: Unterminated character class
failed to parse replacement /^.+[^/]{2,}$/: SyntaxError: Invalid regular expression: //^.+[^//: Unterminated character class
Mutant 2 in matcher.ts: spec replaced with 'spec'.slice(1)
Mutant 3 in matcher.ts: spec replaced with 'spec'.toUpperCase()
Mutant 4 in matcher.ts: spec replaced with './' + spec
Mutant 5 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string[string.length - 1] === '/'
Mutant 6 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with /^\/$|[^/]+$/.test(string)
Mutant 7 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.slice(-1) === '/'
Mutant 8 in matcher.ts: '/' replaced with './'
Mutant 9 in matcher.ts: string replaced with "string".length
Mutant 10 in matcher.ts: string replaced with this.spec
Mutant 11 in matcher.ts: string replaced with Math.random()
Mutant 12 in matcher.ts: max > 0 || any replaced with min > 0
Mutant 13 in matcher.ts: max > 0 || any replaced with any
Mutant 14 in matcher.ts: max > 0 || any replaced with max === 1 || any
Mutant 15 in matcher.ts: final && opt && min < 1 replaced with !final || !opt || min >= 1
Mutant 16 in matcher.ts: final && opt && min < 1 replaced with final && opt && min === 0
Mutant 17 in matcher.ts: min > 0 replaced with part === ''
Mutant 18 in matcher.ts: min > 0 replaced with parts.length > 0
Mutant 19 in matcher.ts: min > 0 replaced with any
Mutant 20 in matcher.ts: true replaced with false
Mutant 21 in matcher.ts: true replaced with min > 0
Mutant 22 in matcher.ts: true replaced with min + max
Mutant 23 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc - seg
Mutant 24 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc.concat(seg)
Mutant 25 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => seg.repeat(acc.length)
Mutant 26 in matcher.ts: '$' replaced with '/'
failed to parse replacement ['/', ...spec.split('/').slice(1)].reverse(): SyntaxError: Invalid regular expression: //', ...spec.split('//: Unterminated group
Mutant 27 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('').filter(x => x === '/').map(x => spec.slice(spec.indexOf(x) + 1)).reverse()
Mutant 28 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(1).filter(x => x).reverse()
Mutant 29 in matcher.ts: '/' replaced with './'
Mutant 30 in matcher.ts: '/' replaced with '/|'
Mutant 31 in matcher.ts: '/' replaced with '/\\'
Mutant 32 in matcher.ts: 1 replaced with 0
Mutant 33 in matcher.ts: part.match(/:.+/) !== null replaced with part.search(/:.+/) > -1
Mutant 34 in matcher.ts: part.match(/:.+/) !== null replaced with /:.+/.test(part)
Mutant 35 in matcher.ts: part.match(/:.+/) !== null replaced with part.includes(':')
Mutant 36 in matcher.ts: part.match replaced with part.test
failed to parse replacement /:[^/]+/: SyntaxError: Invalid regular expression: //:[^//: Unterminated character class
Mutant 37 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 38 in matcher.ts: /:.+/ replaced with /:[a-zA-Z0-9_]+/
Mutant 39 in matcher.ts: props.push replaced with window.props.push
Mutant 40 in matcher.ts: part.slice(1) replaced with '1'
Mutant 41 in matcher.ts: part.slice(1) replaced with Math.random()
Mutant 42 in matcher.ts: part.slice(1) replaced with new Date().getTime()
Mutant 43 in matcher.ts: part.slice replaced with globalThis[part]
Mutant 44 in matcher.ts: 1 replaced with part.slice(1)
Mutant 45 in matcher.ts: 1 replaced with part.slice(2)
Mutant 46 in matcher.ts: 1 replaced with part.slice(0)
Mutant 47 in matcher.ts: '/([^/]+)' replaced with '/(\\d+)'
failed to parse replacement `/${part.replace(/[^\w]/g, '\\$1')}/`: SyntaxError: Invalid regular expression: //${part.replace(//: Unterminated group
Mutant 48 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/[${part}]/`
Mutant 49 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.split('').join('\\.')}/`
failed to parse replacement /([^/])/g: SyntaxError: Invalid regular expression: //([^//: Unterminated character class
Mutant 50 in matcher.ts: '\\$1' replaced with '\\x01'
Mutant 51 in matcher.ts: props.reverse replaced with props.sort
Mutant 52 in matcher.ts: props.reverse replaced with ['someProp']
Mutant 53 in policy.ts: this.rules.push replaced with this.rules.length = this.rules.length + 1
Mutant 54 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 55 in policy.ts: this.rules replaced with this.rules.concat()
Mutant 56 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query([path, 'dummyVerb', ctx])
Mutant 57 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, Object.assign({}, ctx))
Mutant 58 in policy.ts: rule.query replaced with rule['query']
Mutant 59 in policy.ts: path replaced with '<PLACEHOLDER>'
Mutant 60 in policy.ts: path replaced with null
Mutant 61 in policy.ts: path replaced with this.rules[0].query
Mutant 62 in policy.ts: ctx replaced with null
Mutant 63 in policy.ts: res === false replaced with res !== true
Mutant 64 in policy.ts: res === false replaced with this.rules.length === 0
Mutant 65 in policy.ts: res === false replaced with rule.denies(path, verb, ctx)
Mutant 66 in policy.ts: res === true replaced with allow = res
Mutant 67 in policy.ts: res === true replaced with allow = true || res
Mutant 68 in policy.ts: res === true replaced with allow = this.rules.some(rule => rule.query(path, verb, ctx) === true)
Mutant 69 in policy.ts: this.rules replaced with this.rules.slice(0)
Mutant 70 in policy.ts: rule.matches(path, ctx) replaced with rule.query(path, "*", ctx)
Mutant 71 in policy.ts: rule.matches(path, ctx) replaced with true
Mutant 72 in policy.ts: rule.matches(path, ctx) replaced with rule.name === path
Mutant 73 in policy.ts: rule.matches(path, ctx) replaced with rule.matches({})
Mutant 74 in policy.ts: rule.matches(path, ctx) replaced with rule.matches([])
Mutant 75 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(1)
Mutant 76 in policy.ts: rule.matches replaced with rule['matches']
Mutant 77 in policy.ts: path replaced with './path'
Mutant 78 in policy.ts: path replaced with ctx.path
Mutant 79 in policy.ts: path replaced with rule.matches(path, ctx).toString()
Mutant 80 in policy.ts: ctx replaced with undefined
Mutant 81 in policy.ts: ctx replaced with {}
Mutant 82 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 83 in policy.ts: this.rules.map replaced with this.rules.reduce
Mutant 84 in policy.ts: this.rules.map replaced with this.rules.slice
Mutant 85 in policy.ts: rule => rule.clone() replaced with rule => ({
  ...rule
})
Mutant 86 in policymap.ts: policy => [policy.name, policy] replaced with policy => policy.name
Mutant 87 in policymap.ts: policy => [policy.name, policy] replaced with policy => ({
  name: policy.name,
  policy: policy
})
Mutant 88 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy, policy.name]
Mutant 89 in policymap.ts: policies replaced with []
Mutant 90 in policymap.ts: policies replaced with this
Mutant 91 in policymap.ts: this.set(policy.name, policy) replaced with this.set(['name', policy])
Mutant 92 in policymap.ts: policy.name replaced with 'random_string'
Mutant 93 in policymap.ts: policy replaced with null
Mutant 94 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(['', '', ctx])
Mutant 95 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, undefined, ctx)
Mutant 96 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, undefined)
Mutant 97 in policymap.ts: policy.query replaced with policy.query || true
Mutant 98 in policymap.ts: policy.query replaced with policy.query ?? false
Mutant 99 in policymap.ts: path replaced with ''
Mutant 100 in policymap.ts: path replaced with this.path
Mutant 101 in policymap.ts: path replaced with path[0]
Mutant 102 in policymap.ts: verb replaced with 'unrelated'
Mutant 103 in policymap.ts: verb replaced with 1234
Mutant 104 in policymap.ts: verb replaced with () => {}
Mutant 105 in policymap.ts: ctx replaced with null
Mutant 106 in policymap.ts: ctx replaced with {}
Mutant 107 in policymap.ts: name replaced with Math.random()
Mutant 108 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches('/', ctx)
Mutant 109 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path, undefined)
Mutant 110 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(this.get('another_policy').matches(path))
Mutant 111 in policymap.ts: policy.matches replaced with policy.query
Mutant 112 in policymap.ts: policy.matches replaced with policy.name
Mutant 113 in policymap.ts: path replaced with '/random_path'
Mutant 114 in policymap.ts: path replaced with Math.random()
Mutant 115 in policymap.ts: path replaced with ctx.path
Mutant 116 in policymap.ts: ctx replaced with null
Mutant 117 in policymap.ts: ctx replaced with {}
Mutant 118 in rule.ts: verbs replaced with Object.keys(this.verbs)
Mutant 119 in rule.ts: verbs replaced with this.verbs.slice()
Mutant 120 in rule.ts: verbs replaced with this.verbs.filter(verb => verb !== undefined)
Mutant 121 in rule.ts: !(verb in this.verbs) replaced with this.verbs.hasOwnProperty(verb)
Mutant 122 in rule.ts: !(verb in this.verbs) replaced with Object.prototype.hasOwnProperty.call(this.verbs, verb)
Mutant 123 in rule.ts: !(verb in this.verbs) replaced with this.verbs[verb] !== undefined
Mutant 124 in rule.ts: verbs replaced with Object.keys(this.verbs)
Mutant 125 in rule.ts: verbs replaced with this.verbs.slice()
Mutant 126 in rule.ts: verbs replaced with this.verbs.filter(verb => verb in this.verbs)
Mutant 127 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.regex.test(path) && verb in this.verbs
Mutant 128 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.verbs.hasOwnProperty(verb)
Mutant 129 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.regex.test(path) && Object.keys(this.verbs).includes(verb)
Mutant 130 in rule.ts: this.matches(path, ctx) replaced with this.matches([])
Mutant 131 in rule.ts: this.matches(path, ctx) replaced with this.matches(this.regex.props)
Mutant 132 in rule.ts: ctx replaced with null
Mutant 133 in rule.ts: ctx replaced with {}
Mutant 134 in rule.ts: path.match replaced with path.includes
Mutant 135 in rule.ts: this.regex replaced with this.regex.source
Mutant 136 in rule.ts: match === null replaced with match === undefined
Mutant 137 in rule.ts: match === null replaced with match.length === 0
Mutant 138 in rule.ts: match === null replaced with this.regex.test(path) === false
Mutant 139 in rule.ts: count > 0 replaced with match.length > 0
Mutant 140 in rule.ts: count > 0 replaced with count >= this.regex.props.length
Mutant 141 in rule.ts: count > 0 replaced with Object.keys(ctx).length > 0
Mutant 142 in rule.ts: ctx === undefined replaced with this.regex.props.length === 0
Mutant 143 in rule.ts: ctx === undefined replaced with ctx['undefined']
Mutant 144 in rule.ts: ctx === undefined replaced with Object.keys(ctx).length === 0
Mutant 145 in rule.ts: index < count replaced with index <= count
Mutant 146 in rule.ts: index < count replaced with index >= 0
Mutant 147 in rule.ts: index < count replaced with index > -1
Mutant 148 in rule.ts: index++ replaced with index += 1
Mutant 149 in rule.ts: index++ replaced with this.regex.props.length - 1
Mutant 150 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop == null
Mutant 151 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with match[index + 1] !== undefined && match[index + 1] !== prop
Mutant 152 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with match[index + 1] !== this.regex.props[index]
Mutant 153 in rule.ts: this.verbs replaced with Object.keys(this.verbs).reduce((obj, key) => {
  obj[key] = this.verbs[key];
  return obj;
}, {})
Mutant 154 in rule.ts: this.verbs replaced with JSON.parse(JSON.stringify(this.verbs))
Mutant 155 in rule.ts: this.verbs replaced with this.verbs.bind(this)
[32m15:37:26 (2474) INFO Instrumenter[39m Instrumented 6 source file(s) with 156 mutant(s)
[32m15:37:27 (2474) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m15:37:28 (2474) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m15:37:28 (2474) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m15:37:32 (2474) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4194 ms, overhead 0 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~8m) 3/156 tested (1 survived, 0 timed out)
Mutation testing 3% (elapsed: <1m, remaining: ~8m) 6/156 tested (1 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~9m) 8/156 tested (1 survived, 0 timed out)
Mutation testing 7% (elapsed: <1m, remaining: ~8m) 11/156 tested (2 survived, 0 timed out)
Mutation testing 8% (elapsed: <1m, remaining: ~8m) 14/156 tested (2 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~7m) 18/156 tested (3 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~7m) 21/156 tested (3 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~7m) 24/156 tested (3 survived, 0 timed out)
Mutation testing 17% (elapsed: ~1m, remaining: ~7m) 27/156 tested (3 survived, 0 timed out)
Mutation testing 18% (elapsed: ~1m, remaining: ~7m) 29/156 tested (3 survived, 0 timed out)
Mutation testing 20% (elapsed: ~1m, remaining: ~7m) 32/156 tested (3 survived, 0 timed out)
Mutation testing 23% (elapsed: ~2m, remaining: ~6m) 36/156 tested (6 survived, 0 timed out)
Mutation testing 25% (elapsed: ~2m, remaining: ~6m) 39/156 tested (8 survived, 0 timed out)
Mutation testing 26% (elapsed: ~2m, remaining: ~6m) 42/156 tested (8 survived, 0 timed out)
Mutation testing 28% (elapsed: ~2m, remaining: ~6m) 45/156 tested (8 survived, 0 timed out)
Mutation testing 30% (elapsed: ~2m, remaining: ~6m) 48/156 tested (8 survived, 0 timed out)
Mutation testing 32% (elapsed: ~2m, remaining: ~5m) 51/156 tested (8 survived, 0 timed out)
Mutation testing 34% (elapsed: ~3m, remaining: ~5m) 54/156 tested (8 survived, 0 timed out)
Mutation testing 36% (elapsed: ~3m, remaining: ~5m) 57/156 tested (10 survived, 0 timed out)
Mutation testing 38% (elapsed: ~3m, remaining: ~5m) 60/156 tested (12 survived, 0 timed out)
Mutation testing 40% (elapsed: ~3m, remaining: ~5m) 63/156 tested (12 survived, 0 timed out)
Mutation testing 42% (elapsed: ~3m, remaining: ~5m) 66/156 tested (12 survived, 0 timed out)
Mutation testing 44% (elapsed: ~3m, remaining: ~4m) 69/156 tested (12 survived, 0 timed out)
Mutation testing 46% (elapsed: ~4m, remaining: ~4m) 72/156 tested (13 survived, 0 timed out)
Mutation testing 48% (elapsed: ~4m, remaining: ~4m) 75/156 tested (13 survived, 0 timed out)
Mutation testing 50% (elapsed: ~4m, remaining: ~4m) 78/156 tested (14 survived, 0 timed out)
Mutation testing 51% (elapsed: ~4m, remaining: ~4m) 81/156 tested (14 survived, 0 timed out)
Mutation testing 53% (elapsed: ~4m, remaining: ~4m) 84/156 tested (14 survived, 0 timed out)
Mutation testing 55% (elapsed: ~4m, remaining: ~3m) 87/156 tested (14 survived, 0 timed out)
Mutation testing 58% (elapsed: ~5m, remaining: ~3m) 91/156 tested (15 survived, 0 timed out)
Mutation testing 60% (elapsed: ~5m, remaining: ~3m) 94/156 tested (15 survived, 0 timed out)
Mutation testing 62% (elapsed: ~5m, remaining: ~3m) 97/156 tested (15 survived, 0 timed out)
Mutation testing 64% (elapsed: ~5m, remaining: ~3m) 100/156 tested (15 survived, 0 timed out)
Mutation testing 66% (elapsed: ~5m, remaining: ~2m) 103/156 tested (15 survived, 0 timed out)
Mutation testing 67% (elapsed: ~5m, remaining: ~2m) 106/156 tested (15 survived, 0 timed out)
Mutation testing 69% (elapsed: ~6m, remaining: ~2m) 109/156 tested (15 survived, 0 timed out)
Mutation testing 71% (elapsed: ~6m, remaining: ~2m) 112/156 tested (15 survived, 0 timed out)
Mutation testing 73% (elapsed: ~6m, remaining: ~2m) 115/156 tested (15 survived, 0 timed out)
Mutation testing 76% (elapsed: ~6m, remaining: ~2m) 119/156 tested (15 survived, 0 timed out)
Mutation testing 78% (elapsed: ~6m, remaining: ~1m) 122/156 tested (15 survived, 0 timed out)
Mutation testing 80% (elapsed: ~6m, remaining: ~1m) 125/156 tested (15 survived, 0 timed out)
Mutation testing 82% (elapsed: ~7m, remaining: ~1m) 128/156 tested (15 survived, 0 timed out)
Mutation testing 83% (elapsed: ~7m, remaining: ~1m) 131/156 tested (15 survived, 0 timed out)
Mutation testing 85% (elapsed: ~7m, remaining: ~1m) 134/156 tested (15 survived, 0 timed out)
Mutation testing 87% (elapsed: ~7m, remaining: ~1m) 137/156 tested (16 survived, 0 timed out)
Mutation testing 89% (elapsed: ~7m, remaining: <1m) 140/156 tested (17 survived, 0 timed out)
Mutation testing 91% (elapsed: ~7m, remaining: <1m) 143/156 tested (17 survived, 0 timed out)
Mutation testing 93% (elapsed: ~8m, remaining: <1m) 146/156 tested (17 survived, 0 timed out)
Mutation testing 95% (elapsed: ~8m, remaining: <1m) 149/156 tested (18 survived, 0 timed out)
Mutation testing 95% (elapsed: ~8m, remaining: <1m) 149/156 tested (18 survived, 0 timed out)
Mutation testing 98% (elapsed: ~8m, remaining: <1m) 153/156 tested (19 survived, 1 timed out)

All tests
  ✓ All tests (killed 134)

[Survived] PrecomputedMutator
src/matcher.ts:15:9
-       if (spec.match(/^\//) === null) {
+       if (spec.startsWith('/') === false) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('./')) {

[Survived] PrecomputedMutator
src/matcher.ts:65:11
-         if (final && opt && min < 1) {
+         if (final && opt && min === 0) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.search(/:.+/) > -1) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (/:.+/.test(part)) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.includes(':')) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:[a-zA-Z0-9_]+/) !== null) {

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.concat()) {

[Survived] PrecomputedMutator
src/policy.ts:33:19
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb, Object.assign({}, ctx))

[Survived] PrecomputedMutator
src/policy.ts:33:19
-         const res = rule.query(path, verb, ctx)
+         const res = rule['query'](path, verb, ctx)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice(0)) {

[Survived] PrecomputedMutator
src/policy.ts:49:11
-         if (rule.matches(path, ctx)) {
+         if (rule['matches'](path, ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:7:24
-       super(policies.map((policy) => [policy.name, policy]))
+       super(policies.map(policy => [policy.name, policy, policy.name]))

[Survived] PrecomputedMutator
src/rule.ts:60:30
-       const match = path.match(this.regex)
+       const match = path.match(this.regex.source)

[Survived] PrecomputedMutator
src/rule.ts:61:9
-       if (match === null) {
+       if (this.regex.test(path) === false) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 1) {

[Survived] PrecomputedMutator
src/rule.ts:71:13
-           if (prop === undefined || match[index + 1] !== prop) {
+           if (match[index + 1] !== undefined && match[index + 1] !== prop) {

[Survived] PrecomputedMutator
src/rule.ts:83:24
-       for (const verb in this.verbs) {
+       for (const verb in Object.keys(this.verbs).reduce((obj, key) => {
+     obj[key] = this.verbs[key];
+     return obj;
+   }, {})) {

[Survived] PrecomputedMutator
src/rule.ts:83:24
-       for (const verb in this.verbs) {
+       for (const verb in JSON.parse(JSON.stringify(this.verbs))) {

Ran 0.99 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   86.54 |      134 |         1 |         21 |        0 |        0 |
 matcher.ts   |   84.91 |       45 |         0 |          8 |        0 |        0 |
 policy.ts    |   81.82 |       27 |         0 |          6 |        0 |        0 |
 policymap.ts |   96.88 |       31 |         0 |          1 |        0 |        0 |
 rule.ts      |   84.21 |       31 |         1 |          6 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m15:46:11 (2474) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m15:46:11 (2474) INFO MutationTestExecutor[39m Done in 8 minutes 46 seconds.

real	8m47.436s
user	11m40.915s
sys	0m51.649s
