*** using precomputed mutations ***
[32m21:19:52 (2508) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m21:19:52 (2508) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m21:19:52 (2508) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m21:19:53 (2508) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m21:19:53 (2508) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m21:19:53 (2508) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 218 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) !== null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with !spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/)
Mutant 2 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) == null
Mutant 3 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-.]*$/
Mutant 4 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]*[a-zA-Z0-9_/:~.$+*-.]$/
Mutant 5 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-.]*[^a-zA-Z0-9_/:~.$+*-.]$/
Mutant 6 in matcher.ts: spec.match(/^\//) === null replaced with /^\\/.test(spec) !== null
Mutant 7 in matcher.ts: spec.match(/^\//) === null replaced with spec.charAt(0) !== '/'
Mutant 8 in matcher.ts: spec.match replaced with spec.search
Mutant 9 in matcher.ts: spec.match replaced with spec.includes
Mutant 10 in matcher.ts: spec.match replaced with spec.find
Mutant 11 in matcher.ts: spec.match(/\/\//) !== null replaced with spec.match(/(\/\/)/) !== null
Mutant 12 in matcher.ts: spec.match(/\/\//) !== null replaced with spec.match(/[/]{2}/) !== null
Mutant 13 in matcher.ts: /\/\// replaced with /\/\/+/
Mutant 14 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) === null
Mutant 15 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) == null
Mutant 16 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) !== undefined
Mutant 17 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/[^/]:|:\/|:$/) == 'something'
Mutant 18 in matcher.ts: /[^/]:|:\/|:$/ replaced with /[^/]:|\/:|:$/
Mutant 19 in matcher.ts: /[^/]:|:\/|:$/ replaced with /:\/|[^/]:|:$/
Mutant 20 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+?\./) !== null
Mutant 21 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+?[^\/]/) !== null
Mutant 22 in matcher.ts: /^.+\/$/ replaced with /^[^/]+\/$/
Mutant 23 in matcher.ts: /^.+\/$/ replaced with /^.+\/+$/
Mutant 24 in matcher.ts: /^.+\/$/ replaced with /^.+\/+\*$/
Mutant 25 in matcher.ts: spec replaced with undefined
Mutant 26 in matcher.ts: spec replaced with '/'
Mutant 27 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length < 1 || !string.endsWith('/')
Mutant 28 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with !string.endsWith('/*')
Mutant 29 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length === 0
Mutant 30 in matcher.ts: string.endsWith replaced with string.includes
Mutant 31 in matcher.ts: '/' replaced with 'B'
Mutant 32 in matcher.ts: string replaced with 42
Mutant 33 in matcher.ts: string replaced with undefined
Mutant 34 in matcher.ts: string replaced with null
Mutant 35 in matcher.ts: max > 0 || any replaced with min > 0
Mutant 36 in matcher.ts: max > 0 || any replaced with parts.length > 0
Mutant 37 in matcher.ts: max > 0 || any replaced with props.length > 0
Mutant 38 in matcher.ts: final && opt && min < 1 replaced with final && !opt && min < 1
Mutant 39 in matcher.ts: final && opt && min < 1 replaced with final && opt && min > 1
Mutant 40 in matcher.ts: final && opt && min < 1 replaced with final && !opt && min === 1
Mutant 41 in matcher.ts: min > 0 replaced with min >= 1
Mutant 42 in matcher.ts: min > 0 replaced with min !== 1
Mutant 43 in matcher.ts: min > 0 replaced with (min & 1) === 0
Mutant 44 in matcher.ts: flatten replaced with max--
Mutant 45 in matcher.ts: true replaced with false
Mutant 46 in matcher.ts: true replaced with null
Mutant 47 in matcher.ts: true replaced with undefined
Mutant 48 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => acc + seg)
Mutant 49 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => acc.concat(seg))
Mutant 50 in matcher.ts: parts.reduce((acc, seg) => seg + acc, '$') replaced with parts.reduce((acc, seg) => seg.concat(acc))
Mutant 51 in matcher.ts: parts.reduce replaced with parts.length
Mutant 52 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + seg
Mutant 53 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + '*' + seg
Mutant 54 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + Math.random()
Mutant 55 in matcher.ts: '$' replaced with '$$'
Mutant 56 in matcher.ts: '$' replaced with '/\\'
Mutant 57 in matcher.ts: '$' replaced with '/'
Mutant 58 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).reverse().split('').reverse().join('')) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 59 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).map(segment => segment.toUpperCase())) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 60 in matcher.ts: for (const part of spec.split('/').slice(1).reverse()) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
} replaced with for (const part of spec.split('/').slice(1).filter(segment => segment.match(/[a-zA-Z]/))) {
  switch (part) {
    case '+':
      min++;
      max++;
      break;
    case '++':
      max++;
      break;
    case '*':
      min++;
      any = true;
      break;
    case '**':
      any = true;
      break;
    default:
      flatten();
      opt = false;
      if (part.match(/:.+/) !== null) {
        props.push(part.slice(1));
        parts.push('/([^/]+)');
      } else {
        parts.push(`/${part.replace(/([.$])/g, '\\$1')}`);
      }
  }
}
Mutant 61 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('\n').slice(1).reverse()
Mutant 62 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').slice(2).reverse()
Mutant 63 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('*').slice(1).reverse()
Mutant 64 in matcher.ts: '/' replaced with '\/'
Mutant 65 in matcher.ts: part replaced with part + '/'
Mutant 66 in matcher.ts: part replaced with part.split('/').pop()
Mutant 67 in matcher.ts: part.match(/:.+/) !== null replaced with part.search(/:.+/) !== -1
Mutant 68 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/:\w+/) !== null
Mutant 69 in matcher.ts: part.match(/:.+/) !== null replaced with part.match(/\W+/) !== null
Mutant 70 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 71 in matcher.ts: /:.+/ replaced with /:+/
Mutant 72 in matcher.ts: /:.+/ replaced with /:([^/]+)/
Mutant 73 in matcher.ts: part.slice(1) replaced with part[1]
Mutant 74 in matcher.ts: part.slice(1) replaced with part.substr(1)
Mutant 75 in matcher.ts: part.slice(1) replaced with part.substring(1)
Mutant 76 in matcher.ts: 1 replaced with 0
Mutant 77 in matcher.ts: 1 replaced with -1
Mutant 78 in matcher.ts: 1 replaced with props.length
Mutant 79 in matcher.ts: parts.push replaced with parts.add
Mutant 80 in matcher.ts: parts.push replaced with parts.insert
Mutant 81 in matcher.ts: parts.push replaced with parts.replace
Mutant 82 in matcher.ts: '/([^/]+)' replaced with '/([^/]+?)'
Mutant 83 in matcher.ts: '/([^/]+)' replaced with '/(.*)'
Mutant 84 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '')}`
Mutant 85 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '$12')}`
Mutant 86 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part.replace(/([.$])/g, '$2')}`
Mutant 87 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([$/])/g, '\\$1')
Mutant 88 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([^$/])/g, '\\$1')
Mutant 89 in matcher.ts: '\\$1' replaced with '\\' + $1
Mutant 90 in matcher.ts: '\\$1' replaced with ' життя'
Mutant 91 in matcher.ts: props.reverse replaced with props.length
Mutant 92 in policy.ts: this.rules.push replaced with this.rules = rules
Mutant 93 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 94 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.func(path, verb, ctx))
Mutant 95 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.prop)
Mutant 96 in policy.ts: rule.query(path, verb, ctx) replaced with rule.query(path, verb, ctx.method(path, verb))
Mutant 97 in policy.ts: rule.query replaced with !rule.query
Mutant 98 in policy.ts: path replaced with !path
Mutant 99 in policy.ts: path replaced with path.toLowerCase()
Mutant 100 in policy.ts: path replaced with path + 'foo'
Mutant 101 in policy.ts: verb replaced with verb.toLowerCase()
Mutant 102 in policy.ts: verb replaced with verb.slice(1)
Mutant 103 in policy.ts: verb replaced with verb.length
Mutant 104 in policy.ts: ctx replaced with ctx + 1
Mutant 105 in policy.ts: ctx replaced with ctx ? true : false
Mutant 106 in policy.ts: ctx replaced with ctx = 1
Mutant 107 in policy.ts: res === false replaced with res !== true
Mutant 108 in policy.ts: res === false replaced with !res
Mutant 109 in policy.ts: res === false replaced with res === null
Mutant 110 in policy.ts: res === true replaced with res > true
Mutant 111 in policy.ts: res === true replaced with res <= true
Mutant 112 in policy.ts: res === true replaced with res !== true
Mutant 113 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 114 in policy.ts: this.rules replaced with this.rules.reverse()
Mutant 115 in policy.ts: this.rules replaced with this.rules.filter(() => true)
Mutant 116 in policy.ts: rule.matches(path, ctx) replaced with !rule.matches(path, ctx)
Mutant 117 in policy.ts: rule.matches(path, ctx) replaced with rule.notMatches(path, ctx)
Mutant 118 in policy.ts: rule.matches(path, ctx) replaced with rule.doesNotMatch(path, ctx)
Mutant 119 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path.slice(1), ctx)
Mutant 120 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path.splice(0, 0, "foo"), ctx)
Mutant 121 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path, ctx.unshift())
Mutant 122 in policy.ts: rule.matches replaced with rule.allow
Mutant 123 in policy.ts: path replaced with path.substring(0)
Mutant 124 in policy.ts: path replaced with path.split("/").length - 1
Mutant 125 in policy.ts: path replaced with path.substr(1)
Mutant 126 in policy.ts: ctx replaced with n, ctx
Mutant 127 in policy.ts: ctx replaced with undefined
Mutant 128 in policy.ts: this.rules.map replaced with this.rules.slice
Mutant 129 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 130 in policy.ts: this.rules.map replaced with this.rules.reduce
Mutant 131 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(false)
Mutant 132 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(rule.name + ' clone')
Mutant 133 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(rule.x * 2)
Mutant 134 in policy.ts: rule.clone replaced with !rule.clone
Mutant 135 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name.toLowerCase(), policy]
Mutant 136 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name.split(' ').join(''), policy]
Mutant 137 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name.slice(1), policy]
Mutant 138 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy of policies.entries()) {
  this.set(policy.name, policy);
}
Mutant 139 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy of policies.reverse()) {
  this.set(policy.name, policy);
}
Mutant 140 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (const policy of policies.slice(1)) {
  this.set(policy.name, policy);
}
Mutant 141 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, null)
Mutant 142 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, undefined)
Mutant 143 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name, Policy.prototype)
Mutant 144 in policymap.ts: policy.name replaced with policy.name.length
Mutant 145 in policymap.ts: policy.name replaced with policy.name.toUpperCase()
Mutant 146 in policymap.ts: policy.name replaced with policy.name + 'extra-text'
Mutant 147 in policymap.ts: policy replaced with null
Mutant 148 in policymap.ts: policy replaced with undefined
Mutant 149 in policymap.ts: policy replaced with new Policy()
Mutant 150 in policymap.ts: name replaced with null
Mutant 151 in policymap.ts: name replaced with ''
Mutant 152 in policymap.ts: name replaced with 'unknown'
Mutant 153 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path.slice(1), verb, ctx)
Mutant 154 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path.toUpperCase(), verb, ctx)
Mutant 155 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path.substring(0, 1), verb, ctx)
Mutant 156 in policymap.ts: path replaced with path[0]
Mutant 157 in policymap.ts: path replaced with path.length
Mutant 158 in policymap.ts: path replaced with path.toLowerCase()
Mutant 159 in policymap.ts: verb replaced with not(verb)
Mutant 160 in policymap.ts: verb replaced with verb + 1
Mutant 161 in policymap.ts: verb replaced with verb - 1
Mutant 162 in policymap.ts: ctx replaced with ctx.map(x => x + 1)
Mutant 163 in policymap.ts: ctx replaced with ctx.filter(x => x > 0)
Mutant 164 in policymap.ts: ctx replaced with ctx.slice(1)
Mutant 165 in policymap.ts: this.get replaced with this.has
Mutant 166 in policymap.ts: name replaced with name.toUpperCase()
Mutant 167 in policymap.ts: name replaced with name.split(' ').join()
Mutant 168 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path.toUpperCase(), ctx)
Mutant 169 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + "foo", ctx)
Mutant 170 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path.split("").reverse().join(""), ctx)
Mutant 171 in policymap.ts: policy.matches replaced with !policy.matches
Mutant 172 in policymap.ts: policy.matches replaced with policy.matches && otherPolicy.matches
Mutant 173 in policymap.ts: path replaced with path.substring(1)
Mutant 174 in policymap.ts: path replaced with path.length + 1
Mutant 175 in policymap.ts: path replaced with path.indexOf("/")
Mutant 176 in policymap.ts: ctx replaced with !ctx
Mutant 177 in policymap.ts: ctx replaced with ctx && "foo"
Mutant 178 in policymap.ts: ctx replaced with ctx ? "foo" : "bar"
Mutant 179 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 180 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs && this.verbs[verb]
Mutant 181 in rule.ts: !(verb in this.verbs) replaced with !this.verbs[verb]
Mutant 182 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb in verbs) {
  this.verbs[verb] = false;
}
Mutant 183 in rule.ts: verbs replaced with verbs.slice(1)
Mutant 184 in rule.ts: verbs replaced with verbs.map(v => !v)
Mutant 185 in rule.ts: verbs replaced with verbs.filter(v => v)
Mutant 186 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.matches(path, ctx) || !(verb in this.verbs)
Mutant 187 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !(verb in this.verbs)
Mutant 188 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 189 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.replace(this.regex, ''), ctx)
Mutant 190 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, null)
Mutant 191 in rule.ts: this.matches(path, ctx) replaced with this.matches(path, ctx.slice())
Mutant 192 in rule.ts: path replaced with regex.test(path)
Mutant 193 in rule.ts: path replaced with typeof path
Mutant 194 in rule.ts: ctx replaced with null
Mutant 195 in rule.ts: ctx replaced with undefined
Mutant 196 in rule.ts: path.match replaced with path.search
Mutant 197 in rule.ts: this.regex replaced with this.regex.source
Mutant 198 in rule.ts: this.regex replaced with this.regex.exec
Mutant 199 in rule.ts: this.regex replaced with this.regex.test
Mutant 200 in rule.ts: match === null replaced with match instanceof Matcher
Mutant 201 in rule.ts: count > 0 replaced with count < 0
Mutant 202 in rule.ts: count > 0 replaced with count === 0
Mutant 203 in rule.ts: count > 0 replaced with count + 1
Mutant 204 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 205 in rule.ts: ctx === undefined replaced with spec instanceof Matcher
Mutant 206 in rule.ts: ctx === undefined replaced with match[index + 1] !== prop
Mutant 207 in rule.ts: index < count replaced with index >= count
Mutant 208 in rule.ts: index < count replaced with index < 0
Mutant 209 in rule.ts: index < count replaced with index > count
Mutant 210 in rule.ts: index++ replaced with index += 10
Mutant 211 in rule.ts: index++ replaced with index -= 10
Mutant 212 in rule.ts: index++ replaced with index = index + 10
Mutant 213 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined || match[index + 1] === prop
Mutant 214 in rule.ts: for (const verb in this.verbs) {
  rule.verbs[verb] = this.verbs[verb];
} replaced with for (const verb in this.verbs && this.verbs[verb]) {
  rule.verbs[verb] = this.verbs[verb];
}
Mutant 215 in rule.ts: this.verbs replaced with newVerbs
Mutant 216 in rule.ts: this.verbs replaced with Object.assign({}, this.verbs)
Mutant 217 in rule.ts: this.verbs replaced with JSON.parse(JSON.stringify(this.verbs))
[32m21:19:53 (2508) INFO Instrumenter[39m Instrumented 6 source file(s) with 218 mutant(s)
[32m21:19:53 (2508) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m21:19:54 (2508) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m21:19:54 (2508) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m21:19:59 (2508) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4156 ms, overhead 1 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~11m) 3/218 tested (2 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~11m) 6/218 tested (2 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~11m) 9/218 tested (3 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~11m) 12/218 tested (4 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~11m) 15/218 tested (6 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~11m) 18/218 tested (6 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~10m) 22/218 tested (7 survived, 0 timed out)
Mutation testing 11% (elapsed: ~1m, remaining: ~10m) 25/218 tested (8 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~10m) 28/218 tested (8 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~10m) 31/218 tested (9 survived, 0 timed out)
Mutation testing 15% (elapsed: ~1m, remaining: ~9m) 34/218 tested (10 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~9m) 38/218 tested (10 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~9m) 41/218 tested (10 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~9m) 44/218 tested (11 survived, 0 timed out)
Mutation testing 21% (elapsed: ~2m, remaining: ~9m) 47/218 tested (11 survived, 0 timed out)
Mutation testing 22% (elapsed: ~2m, remaining: ~8m) 50/218 tested (11 survived, 0 timed out)
Mutation testing 24% (elapsed: ~2m, remaining: ~8m) 54/218 tested (11 survived, 0 timed out)
Mutation testing 26% (elapsed: ~3m, remaining: ~8m) 57/218 tested (11 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~8m) 60/218 tested (11 survived, 0 timed out)
Mutation testing 28% (elapsed: ~3m, remaining: ~8m) 63/218 tested (11 survived, 0 timed out)
Mutation testing 30% (elapsed: ~3m, remaining: ~8m) 66/218 tested (12 survived, 0 timed out)
Mutation testing 32% (elapsed: ~3m, remaining: ~7m) 70/218 tested (15 survived, 0 timed out)
Mutation testing 33% (elapsed: ~3m, remaining: ~7m) 73/218 tested (18 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~7m) 76/218 tested (20 survived, 0 timed out)
Mutation testing 36% (elapsed: ~4m, remaining: ~7m) 79/218 tested (20 survived, 0 timed out)
Mutation testing 37% (elapsed: ~4m, remaining: ~7m) 82/218 tested (20 survived, 0 timed out)
Mutation testing 39% (elapsed: ~4m, remaining: ~6m) 86/218 tested (20 survived, 0 timed out)
Mutation testing 40% (elapsed: ~4m, remaining: ~6m) 89/218 tested (20 survived, 0 timed out)
Mutation testing 42% (elapsed: ~4m, remaining: ~6m) 92/218 tested (20 survived, 0 timed out)
Mutation testing 43% (elapsed: ~5m, remaining: ~6m) 95/218 tested (21 survived, 0 timed out)
Mutation testing 45% (elapsed: ~5m, remaining: ~6m) 99/218 tested (21 survived, 0 timed out)
Mutation testing 46% (elapsed: ~5m, remaining: ~6m) 102/218 tested (23 survived, 0 timed out)
Mutation testing 48% (elapsed: ~5m, remaining: ~5m) 105/218 tested (23 survived, 0 timed out)
Mutation testing 49% (elapsed: ~5m, remaining: ~5m) 108/218 tested (23 survived, 0 timed out)
Mutation testing 51% (elapsed: ~5m, remaining: ~5m) 112/218 tested (23 survived, 0 timed out)
Mutation testing 52% (elapsed: ~6m, remaining: ~5m) 115/218 tested (25 survived, 0 timed out)
Mutation testing 54% (elapsed: ~6m, remaining: ~5m) 118/218 tested (26 survived, 0 timed out)
Mutation testing 55% (elapsed: ~6m, remaining: ~4m) 122/218 tested (26 survived, 0 timed out)
Mutation testing 57% (elapsed: ~6m, remaining: ~4m) 125/218 tested (27 survived, 0 timed out)
Mutation testing 58% (elapsed: ~6m, remaining: ~4m) 128/218 tested (27 survived, 0 timed out)
Mutation testing 60% (elapsed: ~6m, remaining: ~4m) 131/218 tested (27 survived, 0 timed out)
Mutation testing 61% (elapsed: ~7m, remaining: ~4m) 135/218 tested (27 survived, 0 timed out)
Mutation testing 63% (elapsed: ~7m, remaining: ~4m) 138/218 tested (29 survived, 0 timed out)
Mutation testing 64% (elapsed: ~7m, remaining: ~4m) 141/218 tested (30 survived, 0 timed out)
Mutation testing 66% (elapsed: ~7m, remaining: ~3m) 145/218 tested (30 survived, 0 timed out)
Mutation testing 67% (elapsed: ~7m, remaining: ~3m) 148/218 tested (30 survived, 0 timed out)
Mutation testing 69% (elapsed: ~7m, remaining: ~3m) 151/218 tested (30 survived, 0 timed out)
Mutation testing 71% (elapsed: ~8m, remaining: ~3m) 155/218 tested (30 survived, 0 timed out)
Mutation testing 72% (elapsed: ~8m, remaining: ~3m) 158/218 tested (30 survived, 0 timed out)
Mutation testing 73% (elapsed: ~8m, remaining: ~2m) 161/218 tested (31 survived, 0 timed out)
Mutation testing 75% (elapsed: ~8m, remaining: ~2m) 165/218 tested (31 survived, 0 timed out)
Mutation testing 77% (elapsed: ~8m, remaining: ~2m) 168/218 tested (32 survived, 0 timed out)
Mutation testing 78% (elapsed: ~8m, remaining: ~2m) 171/218 tested (32 survived, 0 timed out)
Mutation testing 80% (elapsed: ~9m, remaining: ~2m) 175/218 tested (32 survived, 0 timed out)
Mutation testing 81% (elapsed: ~9m, remaining: ~2m) 178/218 tested (32 survived, 0 timed out)
Mutation testing 83% (elapsed: ~9m, remaining: ~1m) 181/218 tested (32 survived, 0 timed out)
Mutation testing 84% (elapsed: ~9m, remaining: ~1m) 184/218 tested (32 survived, 0 timed out)
Mutation testing 86% (elapsed: ~9m, remaining: ~1m) 188/218 tested (33 survived, 0 timed out)
Mutation testing 87% (elapsed: ~9m, remaining: ~1m) 191/218 tested (33 survived, 0 timed out)
Mutation testing 88% (elapsed: ~10m, remaining: ~1m) 194/218 tested (33 survived, 0 timed out)
Mutation testing 90% (elapsed: ~10m, remaining: ~1m) 197/218 tested (33 survived, 0 timed out)
Mutation testing 92% (elapsed: ~10m, remaining: <1m) 201/218 tested (34 survived, 0 timed out)
Mutation testing 93% (elapsed: ~10m, remaining: <1m) 204/218 tested (34 survived, 0 timed out)
Mutation testing 94% (elapsed: ~10m, remaining: <1m) 207/218 tested (34 survived, 0 timed out)
Mutation testing 96% (elapsed: ~10m, remaining: <1m) 210/218 tested (34 survived, 0 timed out)
Mutation testing 98% (elapsed: ~11m, remaining: <1m) 214/218 tested (36 survived, 0 timed out)
Mutation testing 99% (elapsed: ~11m, remaining: <1m) 217/218 tested (37 survived, 0 timed out)

All tests
  ✓ All tests (killed 180)

[Survived] PrecomputedMutator
src/matcher.ts:12:9
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (!spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/)) {

[Survived] PrecomputedMutator
src/matcher.ts:12:9
-       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null) {
+       if (spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) == null) {

[Survived] PrecomputedMutator
src/matcher.ts:15:9
-       if (spec.match(/^\//) === null) {
+       if (spec.charAt(0) !== '/') {

[Survived] PrecomputedMutator
src/matcher.ts:18:9
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/(\/\/)/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:18:9
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/[/]{2}/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:18:20
-       if (spec.match(/\/\//) !== null) {
+       if (spec.match(/\/\/+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:20
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/:\/|[^/]:|:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:29:20
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/+$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:39:9
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length === 0) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('B')) {

[Survived] PrecomputedMutator
src/matcher.ts:67:18
-         } else if (min > 0) {
+         } else if (min >= 1) {

[Survived] PrecomputedMutator
src/matcher.ts:92:33
-     for (const part of spec.split('/').slice(1).reverse()) {
+     for (const part of spec.split('\/').slice(1).reverse()) {

[Survived] PrecomputedMutator
src/matcher.ts:93:13
-       switch (part) {
+       switch (part.split('/').pop()) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.search(/:.+/) !== -1) {

[Survived] PrecomputedMutator
src/matcher.ts:111:13
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:\w+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:([^/]+)/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substr(1))

[Survived] PrecomputedMutator
src/matcher.ts:112:22
-             props.push(part.slice(1))
+             props.push(part.substring(1))

[Survived] PrecomputedMutator
src/policy.ts:32:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:33:30
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policy.ts:33:36
-         const res = rule.query(path, verb, ctx)
+         const res = rule.query(path, verb.toLowerCase(), ctx)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.reverse()) {

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.filter(() => true)) {

[Survived] PrecomputedMutator
src/policy.ts:49:24
-         if (rule.matches(path, ctx)) {
+         if (rule.matches(path.substring(0), ctx)) {

[Survived] PrecomputedMutator
src/policymap.ts:7:24
-       super(policies.map((policy) => [policy.name, policy]))
+       super(policies.map(policy => [policy.name.toLowerCase(), policy]))

[Survived] PrecomputedMutator
src/policymap.ts:7:24
-       super(policies.map((policy) => [policy.name, policy]))
+       super(policies.map(policy => [policy.name.split(' ').join(''), policy]))

[Survived] PrecomputedMutator
src/policymap.ts:12:5
-       for (const policy of policies) {
-         this.set(policy.name, policy)
-       }
+       for (const policy of policies.reverse()) {
+     this.set(policy.name, policy);
+   }

[Survived] PrecomputedMutator
src/policymap.ts:30:22
-         ? policy.query(path, verb, ctx)
+         ? policy.query(path.toLowerCase(), verb, ctx)

[Survived] PrecomputedMutator
src/policymap.ts:39:29
-       const policy = this.get(name)
+       const policy = this.get(name.split(' ').join())

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of verbs.filter(v => v)) {

[Survived] PrecomputedMutator
src/rule.ts:60:30
-       const match = path.match(this.regex)
+       const match = path.match(this.regex.source)

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 10) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index = index + 10) {

[Survived] PrecomputedMutator
src/rule.ts:83:24
-       for (const verb in this.verbs) {
+       for (const verb in Object.assign({}, this.verbs)) {

[Survived] PrecomputedMutator
src/rule.ts:83:24
-       for (const verb in this.verbs) {
+       for (const verb in JSON.parse(JSON.stringify(this.verbs))) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   82.57 |      180 |         0 |         38 |        0 |        0 |
 matcher.ts   |   78.26 |       72 |         0 |         20 |        0 |        0 |
 policy.ts    |   83.72 |       36 |         0 |          7 |        0 |        0 |
 policymap.ts |   88.64 |       39 |         0 |          5 |        0 |        0 |
 rule.ts      |   84.62 |       33 |         0 |          6 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m21:31:11 (2508) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m21:31:11 (2508) INFO MutationTestExecutor[39m Done in 11 minutes 18 seconds.

real	11m19.815s
user	15m17.483s
sys	1m7.447s
