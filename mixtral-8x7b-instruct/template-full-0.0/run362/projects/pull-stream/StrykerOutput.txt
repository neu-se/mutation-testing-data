*** using precomputed mutations ***
[32m11:41:23 (2795) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m11:41:23 (2795) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m11:41:23 (2795) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m11:41:23 (2795) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m11:41:23 (2795) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m11:41:25 (2795) INFO ProjectReader[39m Found 31 of 1504 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 671 mutants from MUTATION_TESTING/template-full_mixtral-8x7b-instruct_0.0/mutants.json ***
Mutant 0 in index.js: sources replaced with Object.keys(sources)
Mutant 1 in index.js: sources replaced with sources.length
Mutant 2 in index.js: throughs replaced with throughs * 2
Mutant 3 in index.js: throughs replaced with Object.assign({}, throughs)
Mutant 4 in index.js: throughs replaced with throughs.hasOwnProperty
Mutant 5 in index.js: sinks replaced with sinks = {}
Mutant 6 in index.js: sinks replaced with sinks.get
Mutant 7 in index.js: sinks replaced with Math.random()
Mutant 8 in pull.js: typeof a === 'function' && a.length === 1 replaced with a instanceof Function && a.length === 1
Mutant 9 in pull.js: typeof a === 'function' && a.length === 1 replaced with arguments[0] === 1
Mutant 10 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (let i = 0; i < length; i++) args[i] = arguments[i];
Mutant 11 in pull.js: for (var i = 0; i < length; i++) args[i] = arguments[i]; replaced with for (const i = 0; i < length; i++) args[i] = arguments[i];
Mutant 12 in pull.js: i < length replaced with i <= length
Mutant 13 in pull.js: i < length replaced with i > -1
Mutant 14 in pull.js: i < length replaced with i in arguments
Mutant 15 in pull.js: i++ replaced with i--
Mutant 16 in pull.js: i++ replaced with i + 1
Mutant 17 in pull.js: i++ replaced with arguments[i + 1]
Mutant 18 in pull.js: args == null replaced with args === undefined
Mutant 19 in pull.js: args == null replaced with length <= 0
Mutant 20 in pull.js: args == null replaced with typeof args !== 'object'
Mutant 21 in pull.js: length replaced with 0
Mutant 22 in pull.js: length replaced with ref.length
Mutant 23 in pull.js: length replaced with Math.floor(Math.random() * length)
Mutant 24 in pull.js: pull(read, ref[0]) replaced with pull(ref[i])
Mutant 25 in pull.js: pull(read, ref[0]) replaced with pull(ref.shift())
Mutant 26 in pull.js: pull(read, ref[0]) replaced with pull(ref.pop())
Mutant 27 in pull.js: pull replaced with ref[0]
Mutant 28 in pull.js: pull replaced with read
Mutant 29 in pull.js: read replaced with 0
Mutant 30 in pull.js: read replaced with null
Mutant 31 in pull.js: read replaced with () => {}
Mutant 32 in pull.js: ref[0] replaced with ref[1]
Mutant 33 in pull.js: ref[0] replaced with ref.pop()
Mutant 34 in pull.js: ref[0] replaced with ref.length - 1
Mutant 35 in pull.js: pull(read, ref[0], ref[1]) replaced with pull([read, ref[1], ref[0]])
Mutant 36 in pull.js: pull replaced with ref[1]
Mutant 37 in pull.js: pull replaced with ref[length - 1]
Mutant 38 in pull.js: read replaced with 1
Mutant 39 in pull.js: read replaced with this
Mutant 40 in pull.js: read replaced with Math.random()
Mutant 41 in pull.js: ref[0] replaced with ref.shift()
Mutant 42 in pull.js: ref[0] replaced with ref.pop()
Mutant 43 in pull.js: ref[0] replaced with ref.slice(1)
Mutant 44 in pull.js: ref[1] replaced with ref[0]
Mutant 45 in pull.js: ref[1] replaced with ref.pop()
Mutant 46 in pull.js: ref[1] replaced with ref.shift()
Mutant 47 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull([read, ref[1], ref[2], ref[0]])
Mutant 48 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull([read, ref[0], ref[2], ref[2]])
Mutant 49 in pull.js: pull(read, ref[0], ref[1], ref[2]) replaced with pull([read, ref[0], undefined, ref[2]])
Mutant 50 in pull.js: read replaced with 1
Mutant 51 in pull.js: read replaced with Math.random()
Mutant 52 in pull.js: read replaced with i
Mutant 53 in pull.js: ref[0] replaced with ref[i]
Mutant 54 in pull.js: ref[0] replaced with ref.shift()
Mutant 55 in pull.js: ref[0] replaced with ref.pop()
Mutant 56 in pull.js: ref[1] replaced with ref[1] - 0
Mutant 57 in pull.js: ref[1] replaced with ref[i]
Mutant 58 in pull.js: ref[1] replaced with ref['1']
Mutant 59 in pull.js: ref[2] replaced with ref[3]
Mutant 60 in pull.js: ref[2] replaced with ref.pop()
Mutant 61 in pull.js: ref[2] replaced with ref.shift()
Mutant 62 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull([].concat.apply([], ref.slice(0, 4)))
Mutant 63 in pull.js: pull(read, ref[0], ref[1], ref[2], ref[3]) replaced with pull(ref.slice(0, 4))
Mutant 64 in pull.js: read replaced with function () {
  return read;
}
Mutant 65 in pull.js: read replaced with null
Mutant 66 in pull.js: read replaced with Math.random()
Mutant 67 in pull.js: ref[0] replaced with ref.slice(0, 1)[0]
Mutant 68 in pull.js: ref[1] replaced with ref[1] - 0
Mutant 69 in pull.js: ref[1] replaced with ref['1']
Mutant 70 in pull.js: ref[1] replaced with ref.slice(1)[0]
Mutant 71 in pull.js: ref[2] replaced with ref[3 - i % 2]
Mutant 72 in pull.js: ref[2] replaced with ref[Math.floor(Math.random() * length)]
Mutant 73 in pull.js: ref[3] replaced with ref[4]
Mutant 74 in pull.js: ref[3] replaced with ref.pop()
Mutant 75 in pull.js: ref[3] replaced with ref.length--
Mutant 76 in pull.js: ref.unshift replaced with ref.push
Mutant 77 in pull.js: ref.unshift replaced with ref.pop
Mutant 78 in pull.js: ref.unshift replaced with ref.shift
Mutant 79 in pull.js: read replaced with null
Mutant 80 in pull.js: read replaced with undefined
Mutant 81 in pull.js: read replaced with {}
Mutant 82 in pull.js: pull.apply(null, ref) replaced with pull.apply(this)
Mutant 83 in pull.js: pull.apply(null, ref) replaced with pull.apply({})
Mutant 84 in pull.js: pull.apply replaced with pull.bind
Mutant 85 in pull.js: pull.apply replaced with pull.call
Mutant 86 in pull.js: null replaced with this
Mutant 87 in pull.js: null replaced with 0
Mutant 88 in pull.js: null replaced with arguments
Mutant 89 in pull.js: ref replaced with ref.slice()
Mutant 90 in pull.js: ref replaced with null
Mutant 91 in pull.js: ref replaced with {}
Mutant 92 in pull.js: read && typeof read.source === 'function' replaced with read !== null && typeof read.source === 'function'
Mutant 93 in pull.js: read && typeof read.source === 'function' replaced with read && typeof read.source === 'object'
Mutant 94 in pull.js: read && typeof read.source === 'function' replaced with read && read.hasOwnProperty('source')
Mutant 95 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (let i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 96 in pull.js: for (var i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
} replaced with for (const i = 1; i < length; i++) {
  var s = arguments[i];
  if (typeof s === 'function') {
    read = s(read);
  } else if (s && typeof s === 'object') {
    s.sink(read);
    read = s.source;
  }
}
Mutant 97 in pull.js: i < length replaced with i <= length
Mutant 98 in pull.js: i < length replaced with i > 0
Mutant 99 in pull.js: i < length replaced with i in arguments
Mutant 100 in pull.js: i++ replaced with i += 2
Mutant 101 in pull.js: i++ replaced with --i
Mutant 102 in pull.js: typeof s === 'function' replaced with s instanceof Function
Mutant 103 in pull.js: typeof s === 'function' replaced with s.constructor === Function
Mutant 104 in pull.js: typeof s === 'function' replaced with 'function' === toString.call(s)
Mutant 105 in pull.js: s replaced with s + 1
Mutant 106 in pull.js: s replaced with typeof s
Mutant 107 in pull.js: s replaced with s !== s
Mutant 108 in pull.js: read replaced with 1
Mutant 109 in pull.js: read replaced with arguments[0]
Mutant 110 in pull.js: read replaced with this
Mutant 111 in pull.js: s && typeof s === 'object' replaced with 's' in window
Mutant 112 in pull.js: s && typeof s === 'object' replaced with s instanceof Object
Mutant 113 in pull.js: s && typeof s === 'object' replaced with Array.isArray(s)
Mutant 114 in pull.js: s.sink replaced with s.source
Mutant 115 in pull.js: read replaced with null
Mutant 116 in pull.js: read replaced with 123
Mutant 117 in pull.js: read replaced with this
Mutant 118 in collect.js: arr.push replaced with arr.unshift
Mutant 119 in collect.js: arr.push replaced with arr.concat
Mutant 120 in collect.js: item replaced with item + 1
Mutant 121 in collect.js: item replaced with Math.random()
Mutant 122 in collect.js: item replaced with arr[arr.length] = item
Mutant 123 in drain.js: !done replaced with done === undefined
Mutant 124 in drain.js: !done replaced with typeof done === 'undefined'
Mutant 125 in drain.js: !done replaced with !read
Mutant 126 in drain.js: abort replaced with read(null, function (end, data) {
  if (end) {
    return sink.abort();
  }
})
Mutant 127 in drain.js: abort replaced with read(null, function (end, data) {
  if (end) {
    throw new Error('Stream ended');
  }
})
Mutant 128 in drain.js: sink.abort replaced with doneLackingErr.message = 'New error message'
Mutant 129 in drain.js: loop replaced with read()
Mutant 130 in drain.js: loop replaced with true
Mutant 131 in drain.js: loop replaced with loop = false
Mutant 132 in drain.js: end = end || abort replaced with end = end && abort
Mutant 133 in drain.js: end = end || abort replaced with end = abort
Mutant 134 in drain.js: end = end || abort replaced with loop = false
Mutant 135 in drain.js: done replaced with done(null)
Mutant 136 in drain.js: end === true ? null : end replaced with end ? null : end
Mutant 137 in drain.js: end === true ? null : end replaced with end || true
Mutant 138 in drain.js: end === true ? null : end replaced with end ? undefined : end
Mutant 139 in drain.js: end && end !== true replaced with end !== true
Mutant 140 in drain.js: end && end !== true replaced with end == false
Mutant 141 in drain.js: end && end !== true replaced with !op(data)
Mutant 142 in drain.js: console.warn replaced with console.error
Mutant 143 in drain.js: console.warn replaced with console.log
Mutant 144 in drain.js: console.warn replaced with console.clear
Mutant 145 in drain.js: doneLackingErr replaced with null
Mutant 146 in drain.js: doneLackingErr replaced with true
Mutant 147 in drain.js: doneLackingErr replaced with readLackingErr
Mutant 148 in drain.js: op && false === op(data) || abort replaced with op && true === op(data) || abort
Mutant 149 in drain.js: op replaced with false
Mutant 150 in drain.js: op replaced with 1 + op
Mutant 151 in drain.js: data replaced with []
Mutant 152 in drain.js: data replaced with null
Mutant 153 in drain.js: data replaced with op && op(data)
Mutant 154 in drain.js: read(abort || true, done || function () {}) replaced with read(false, done || function () {})
Mutant 155 in drain.js: read(abort || true, done || function () {}) replaced with read(abort, undefined)
Mutant 156 in drain.js: read(abort || true, done || function () {}) replaced with read(abort, done || function () {})
Mutant 157 in drain.js: abort || true replaced with read ? read(abort, cb || function () {}) : true
Mutant 158 in drain.js: abort || true replaced with abort && true
Mutant 159 in drain.js: abort || true replaced with global.abort || true
Mutant 160 in drain.js: done || function () {} replaced with done && function () {}
Mutant 161 in drain.js: done || function () {} replaced with function () {
  throw new Error('Bang!');
}
Mutant 162 in drain.js: done || function () {} replaced with done || true
Mutant 163 in drain.js: !loop replaced with loop = false
Mutant 164 in drain.js: !loop replaced with loop = true
Mutant 165 in drain.js: next replaced with null
Mutant 166 in drain.js: !cbed replaced with cbed === true
Mutant 167 in drain.js: !cbed replaced with false
Mutant 168 in drain.js: !cbed replaced with cbed && true
Mutant 169 in drain.js: 'function' == typeof err replaced with err !== undefined
Mutant 170 in drain.js: 'function' == typeof err replaced with true
Mutant 171 in drain.js: 'function' == typeof err replaced with read !== undefined
Mutant 172 in drain.js: read replaced with read.bind(this)
Mutant 173 in drain.js: read replaced with read || function () {}
Mutant 174 in drain.js: read replaced with read(abort, cb || function () {}) || true
Mutant 175 in drain.js: read(abort, cb || function () {}) replaced with read(false, cb || function () {})
Mutant 176 in drain.js: read(abort, cb || function () {}) replaced with read(abort, function () {})
Mutant 177 in drain.js: read(abort, cb || function () {}) replaced with read(abort, cb && cb())
Mutant 178 in drain.js: abort replaced with false
Mutant 179 in drain.js: abort replaced with null
Mutant 180 in drain.js: abort replaced with read
Mutant 181 in drain.js: cb || function () {} replaced with function () {
  throw new Error('Aborting read stream');
}
Mutant 182 in drain.js: cb || function () {} replaced with cb && cb()
Mutant 183 in find.js: !cb replaced with cb === null
Mutant 184 in find.js: test replaced with test + ''
Mutant 185 in find.js: test replaced with function () {
  return test;
}
Mutant 186 in find.js: test replaced with global.test
Mutant 187 in find.js: test(data) replaced with test(true)
Mutant 188 in find.js: test(data) replaced with this.test(data)
Mutant 189 in find.js: test replaced with data.test
Mutant 190 in find.js: data replaced with Math.random()
Mutant 191 in find.js: data replaced with arguments[0]
Mutant 192 in find.js: cb(null, data) replaced with cb([data, null])
Mutant 193 in find.js: cb(null, data) replaced with cb(data || null)
Mutant 194 in find.js: cb(null, data) replaced with cb(undefined)
Mutant 195 in find.js: null replaced with data
Mutant 196 in find.js: null replaced with 1
Mutant 197 in find.js: null replaced with cb
Mutant 198 in find.js: data replaced with null
Mutant 199 in find.js: ended replaced with this.ended
Mutant 200 in find.js: ended replaced with data.ended
Mutant 201 in find.js: ended replaced with prop('ended')
Mutant 202 in find.js: cb(err === true ? null : err, null) replaced with cb(new Error('An error occurred'))
Mutant 203 in find.js: cb(err === true ? null : err, null) replaced with cb(1)
Mutant 204 in find.js: cb(err === true ? null : err, null) replaced with cb(typeof err)
Mutant 205 in find.js: err === true ? null : err replaced with 5
Mutant 206 in find.js: err === true ? null : err replaced with typeof err
Mutant 207 in log.js: console.log replaced with console.error
Mutant 208 in log.js: console.log replaced with alert
Mutant 209 in log.js: data replaced with 1 * data
Mutant 210 in log.js: data replaced with data + ''
Mutant 211 in log.js: data replaced with data || []
Mutant 212 in on-end.js: drain(null, done) replaced with drain(false, done)
Mutant 213 in on-end.js: drain(null, done) replaced with drain(null, function () {
  done();
})
Mutant 214 in on-end.js: drain(null, done) replaced with drain(1, done)
Mutant 215 in on-end.js: drain replaced with drain.length
Mutant 216 in on-end.js: drain replaced with drain + ''
Mutant 217 in on-end.js: null replaced with 1
Mutant 218 in on-end.js: null replaced with true
Mutant 219 in on-end.js: null replaced with () => {}
Mutant 220 in on-end.js: done replaced with () => done()
Mutant 221 in reduce.js: !cb replaced with cb === undefined
Mutant 222 in reduce.js: !cb replaced with typeof cb === 'undefined'
Mutant 223 in reduce.js: !cb replaced with cb && cb instanceof Function
Mutant 224 in reduce.js: reducer(acc, data) replaced with reducer(acc + data)
Mutant 225 in reduce.js: acc replaced with acc + data
Mutant 226 in reduce.js: acc replaced with undefined
Mutant 227 in reduce.js: acc replaced with this.acc
Mutant 228 in reduce.js: data replaced with data + 1
Mutant 229 in reduce.js: data replaced with !data
Mutant 230 in reduce.js: data replaced with acc || data
Mutant 231 in reduce.js: cb(err, acc) replaced with cb(acc, err)
Mutant 232 in reduce.js: cb(err, acc) replaced with cb(acc || {})
Mutant 233 in reduce.js: cb(err, acc) replaced with cb(acc += err)
Mutant 234 in reduce.js: err replaced with acc
Mutant 235 in reduce.js: err replaced with undefined
Mutant 236 in reduce.js: err replaced with {}
Mutant 237 in reduce.js: acc replaced with acc + 1
Mutant 238 in reduce.js: acc replaced with undefined
Mutant 239 in reduce.js: acc replaced with Math.random()
Mutant 240 in reduce.js: arguments.length === 2 replaced with arguments.length >= 2
Mutant 241 in reduce.js: arguments.length === 2 replaced with acc !== undefined
Mutant 242 in reduce.js: arguments.length === 2 replaced with reducer && typeof reducer === 'function'
Mutant 243 in reduce.js: end replaced with false
Mutant 244 in reduce.js: cb replaced with acc = cb
Mutant 245 in reduce.js: cb replaced with acc += cb
Mutant 246 in reduce.js: end === true ? null : end replaced with end ? undefined : end
Mutant 247 in reduce.js: source replaced with source || {}
Mutant 248 in reduce.js: source replaced with source.length
Mutant 249 in reduce.js: source replaced with acc
Mutant 250 in count.js: end replaced with i === max
Mutant 251 in count.js: end replaced with 0
Mutant 252 in count.js: end replaced with end && end > i
Mutant 253 in count.js: end replaced with i
Mutant 254 in count.js: end replaced with i + 1
Mutant 255 in count.js: end replaced with null
Mutant 256 in count.js: i > max replaced with i === max
Mutant 257 in count.js: i > max replaced with i >= max
Mutant 258 in count.js: i > max replaced with i + 1 > max
Mutant 259 in count.js: cb replaced with i = i + 1
Mutant 260 in count.js: true replaced with i > max + 1
Mutant 261 in count.js: cb(null, i++) replaced with cb(i + 1)
Mutant 262 in count.js: cb(null, i++) replaced with cb(Math.random())
Mutant 263 in count.js: cb(null, i++) replaced with cb(i < max ? i : max)
Mutant 264 in count.js: null replaced with i
Mutant 265 in count.js: null replaced with i + 1
Mutant 266 in count.js: null replaced with Math.random()
Mutant 267 in count.js: i++ replaced with i + 1
Mutant 268 in count.js: i++ replaced with Math.random()
Mutant 269 in empty.js: true replaced with false
Mutant 270 in empty.js: true replaced with null
Mutant 271 in empty.js: true replaced with abort
Mutant 272 in error.js: err replaced with true
Mutant 273 in error.js: err replaced with 1
Mutant 274 in error.js: err replaced with cb(err || 'An error occurred')
Mutant 275 in infinite.js: end replaced with 0
Mutant 276 in infinite.js: end replaced with generate()
Mutant 277 in infinite.js: end replaced with cb && cb(generate())
Mutant 278 in infinite.js: cb replaced with 1 / cb
Mutant 279 in infinite.js: end replaced with 1 / end
Mutant 280 in infinite.js: end replaced with end || true
Mutant 281 in infinite.js: end replaced with Math.abs(end)
Mutant 282 in infinite.js: cb(null, generate()) replaced with cb(undefined, generate(1))
Mutant 283 in infinite.js: cb(null, generate()) replaced with cb(null, Math.random())
Mutant 284 in infinite.js: null replaced with 1 / generate()
Mutant 285 in infinite.js: null replaced with 'error'
Mutant 286 in infinite.js: null replaced with generate(true)
Mutant 287 in infinite.js: generate() replaced with 1 / generate()
Mutant 288 in infinite.js: generate() replaced with generate(null)
Mutant 289 in infinite.js: generate() replaced with Math.random()
Mutant 290 in infinite.js: generate replaced with generate * 2
Mutant 291 in keys.js: object replaced with object.toString()
Mutant 292 in keys.js: object replaced with Object.values(object)
Mutant 293 in keys.js: object replaced with Math.random()
Mutant 294 in once.js: abort replaced with true
Mutant 295 in once.js: abort replaced with value
Mutant 296 in once.js: abort replaced with abortCb(cb, abort, onAbort)
Mutant 297 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(onAbort)
Mutant 298 in once.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb(true, null))
Mutant 299 in once.js: cb replaced with () => cb()
Mutant 300 in once.js: cb replaced with cb.bind(null, true)
Mutant 301 in once.js: cb replaced with value && cb
Mutant 302 in once.js: abort replaced with false
Mutant 303 in once.js: abort replaced with value
Mutant 304 in once.js: abort replaced with onAbort
Mutant 305 in once.js: onAbort replaced with onAbort()
Mutant 306 in once.js: onAbort replaced with 1
Mutant 307 in once.js: onAbort replaced with abortCb
Mutant 308 in once.js: value != null replaced with value === undefined
Mutant 309 in once.js: value != null replaced with typeof value === 'undefined'
Mutant 310 in once.js: value != null replaced with value !== null
Mutant 311 in once.js: cb(null, _value) replaced with cb(undefined, _value)
Mutant 312 in once.js: _value replaced with undefined
Mutant 313 in once.js: true replaced with false
Mutant 314 in once.js: true replaced with value
Mutant 315 in once.js: true replaced with cb
Mutant 316 in values.js: !array replaced with array.length === 0
Mutant 317 in values.js: !array replaced with typeof array === 'undefined'
Mutant 318 in values.js: !array replaced with Array.isArray(array) === false
Mutant 319 in values.js: abort replaced with true
Mutant 320 in values.js: abort replaced with i >= array.length
Mutant 321 in values.js: abort replaced with array.length === i
Mutant 322 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(null, abort, onAbort)
Mutant 323 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, true, onAbort)
Mutant 324 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, abort, 'incorrect value')
Mutant 325 in values.js: cb replaced with function () {
  cb(true);
}
Mutant 326 in values.js: cb replaced with null
Mutant 327 in values.js: cb replaced with cb.bind(this)
Mutant 328 in values.js: abort replaced with false
Mutant 329 in values.js: abort replaced with null
Mutant 330 in values.js: abort replaced with i
Mutant 331 in values.js: onAbort replaced with false
Mutant 332 in values.js: onAbort replaced with null
Mutant 333 in values.js: onAbort replaced with i
Mutant 334 in values.js: true replaced with false
Mutant 335 in values.js: true replaced with i >= array.length
Mutant 336 in values.js: true replaced with null
Mutant 337 in values.js: !Array.isArray(array) replaced with array instanceof Array === false
Mutant 338 in values.js: !Array.isArray(array) replaced with Array.prototype.isPrototypeOf(array) === false
Mutant 339 in values.js: !Array.isArray(array) replaced with Object.prototype.toString.call(array) !== '[object Array]'
Mutant 340 in values.js: array replaced with array.length
Mutant 341 in values.js: array replaced with Object.keys(array)[0]
Mutant 342 in values.js: array replaced with global.array
Mutant 343 in values.js: array replaced with []
Mutant 344 in values.js: abort replaced with i >= array.length
Mutant 345 in values.js: abort replaced with array.length === i
Mutant 346 in values.js: abort replaced with array.shift() !== undefined
Mutant 347 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb([])
Mutant 348 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, onAbort)
Mutant 349 in values.js: abortCb(cb, abort, onAbort) replaced with abortCb(cb, i, array)
Mutant 350 in values.js: cb replaced with false
Mutant 351 in values.js: cb replaced with array[i++]
Mutant 352 in values.js: abort replaced with false
Mutant 353 in values.js: abort replaced with i
Mutant 354 in values.js: abort replaced with new Error('Aborting...')
Mutant 355 in values.js: onAbort replaced with () => {}
Mutant 356 in values.js: onAbort replaced with null
Mutant 357 in values.js: onAbort replaced with function () {
  throw new Error('onAbort called');
}
Mutant 358 in values.js: i >= array.length replaced with i > array.length
Mutant 359 in values.js: i >= array.length replaced with array.hasOwnProperty(i)
Mutant 360 in values.js: i >= array.length replaced with i + 1 in array
Mutant 361 in values.js: cb replaced with false
Mutant 362 in values.js: true replaced with false
Mutant 363 in values.js: true replaced with i >= array.length + 1
Mutant 364 in values.js: true replaced with array[i + 1]
Mutant 365 in values.js: cb(null, array[i++]) replaced with cb(array[i])
Mutant 366 in values.js: cb(null, array[i++]) replaced with cb(array[i + 1])
Mutant 367 in values.js: null replaced with 0
Mutant 368 in values.js: null replaced with i
Mutant 369 in values.js: array[i++] replaced with array[i]
Mutant 370 in values.js: array[i++] replaced with array[i + 1]
Mutant 371 in async-map.js: !map replaced with map === null
Mutant 372 in async-map.js: !map replaced with map.length > 0
Mutant 373 in async-map.js: !map replaced with typeof map === 'undefined'
Mutant 374 in async-map.js: map replaced with map || {}
Mutant 375 in async-map.js: map replaced with map || function (data) {
  return data;
}
Mutant 376 in async-map.js: map replaced with map || id(null)
Mutant 377 in async-map.js: aborted replaced with true
Mutant 378 in async-map.js: aborted replaced with null
Mutant 379 in async-map.js: aborted replaced with read
Mutant 380 in async-map.js: aborted replaced with new Error('Artificial error for mutation testing')
Mutant 381 in async-map.js: aborted replaced with true
Mutant 382 in async-map.js: aborted replaced with null
Mutant 383 in async-map.js: abort replaced with true
Mutant 384 in async-map.js: abort replaced with null
Mutant 385 in async-map.js: abort replaced with abortCb && abortCb(abort)
Mutant 386 in async-map.js: !busy replaced with false
Mutant 387 in async-map.js: !busy replaced with busy === true
Mutant 388 in async-map.js: !busy replaced with typeof busy === 'undefined'
Mutant 389 in async-map.js: abort replaced with true
Mutant 390 in async-map.js: abort replaced with 'error'
Mutant 391 in async-map.js: abort replaced with data
Mutant 392 in async-map.js: busy replaced with false
Mutant 393 in async-map.js: busy replaced with map
Mutant 394 in async-map.js: abort replaced with data
Mutant 395 in async-map.js: abort replaced with null
Mutant 396 in async-map.js: abort replaced with function () {
  return true;
}
Mutant 397 in async-map.js: end replaced with data
Mutant 398 in async-map.js: end replaced with undefined
Mutant 399 in async-map.js: aborted replaced with data
Mutant 400 in async-map.js: aborted replaced with null
Mutant 401 in async-map.js: aborted replaced with data
Mutant 402 in async-map.js: aborted replaced with null
Mutant 403 in async-map.js: aborted replaced with new Error('Forced error')
Mutant 404 in async-map.js: aborted replaced with true
Mutant 405 in async-map.js: aborted replaced with data.aborted
Mutant 406 in async-map.js: aborted replaced with map.aborted
Mutant 407 in async-map.js: cb replaced with null
Mutant 408 in async-map.js: cb replaced with data
Mutant 409 in async-map.js: aborted replaced with data
Mutant 410 in async-map.js: aborted replaced with null
Mutant 411 in async-map.js: aborted replaced with {}
Mutant 412 in async-map.js: abortCb replaced with abortCb = null
Mutant 413 in async-map.js: aborted replaced with {}
Mutant 414 in async-map.js: aborted replaced with 'aborted'
Mutant 415 in async-map.js: aborted replaced with function () {
  return true;
}
Mutant 416 in async-map.js: err replaced with undefined
Mutant 417 in async-map.js: next(err, cb) replaced with next(cb(err))
Mutant 418 in async-map.js: next(err, cb) replaced with next(null, cb)
Mutant 419 in async-map.js: next(err, cb) replaced with next(cb(data))
Mutant 420 in async-map.js: err replaced with data
Mutant 421 in async-map.js: err replaced with null
Mutant 422 in async-map.js: err replaced with new Error('Artificial error')
Mutant 423 in async-map.js: cb replaced with cb(null, undefined)
Mutant 424 in async-map.js: cb replaced with cb(null, data.toUpperCase())
Mutant 425 in async-map.js: cb(null, data) replaced with cb([data, null])
Mutant 426 in async-map.js: cb(null, data) replaced with cb(data)
Mutant 427 in async-map.js: cb(null, data) replaced with cb(undefined)
Mutant 428 in async-map.js: null replaced with data
Mutant 429 in async-map.js: null replaced with 1
Mutant 430 in async-map.js: null replaced with map(data, cb)
Mutant 431 in async-map.js: data replaced with null
Mutant 432 in async-map.js: data replaced with data.toUpperCase()
Mutant 433 in async-map.js: data replaced with map(data)
Mutant 434 in filter-not.js: tester replaced with null
Mutant 435 in filter-not.js: tester replaced with 1
Mutant 436 in filter-not.js: tester replaced with 'test'
Mutant 437 in filter-not.js: test replaced with data
Mutant 438 in filter-not.js: test replaced with 1 === 0
Mutant 439 in filter-not.js: test replaced with Math.random() > 0.5
Mutant 440 in filter-not.js: function (data) {
  return !test(data);
} replaced with data => !data % test(data)
Mutant 441 in filter-not.js: test replaced with data => data === null
Mutant 442 in filter-not.js: test replaced with data => data.length === 0
Mutant 443 in filter-not.js: data replaced with data.prop
Mutant 444 in filter-not.js: data replaced with null
Mutant 445 in filter-not.js: data replaced with Math.random() > 0.5
Mutant 446 in filter.js: tester replaced with /^$/.test
Mutant 447 in filter.js: tester replaced with false
Mutant 448 in filter.js: tester replaced with Math.random
Mutant 449 in filter.js: test replaced with !test
Mutant 450 in filter.js: test replaced with test.toString()
Mutant 451 in filter.js: test replaced with function () {
  return true;
}
Mutant 452 in filter.js: !end && !test(data) replaced with end || !test(data)
Mutant 453 in filter.js: !end && !test(data) replaced with test.length > 0 && test(data)
Mutant 454 in filter.js: test replaced with data.test
Mutant 455 in filter.js: test replaced with test || true
Mutant 456 in filter.js: data replaced with data || {}
Mutant 457 in filter.js: data replaced with data + ''
Mutant 458 in filter.js: data replaced with test.fn(data)
Mutant 459 in filter.js: next(end, cb) replaced with next(null)
Mutant 460 in filter.js: next(end, cb) replaced with next(5)
Mutant 461 in filter.js: next(end, cb) replaced with next(cb(end, data, 'extra argument'))
Mutant 462 in filter.js: end replaced with null
Mutant 463 in filter.js: end replaced with {}
Mutant 464 in filter.js: end replaced with data
Mutant 465 in filter.js: cb replaced with cb(end, null)
Mutant 466 in filter.js: cb(end, data) replaced with cb(cb(null, data))
Mutant 467 in filter.js: cb(end, data) replaced with cb(cb(true))
Mutant 468 in filter.js: cb(end, data) replaced with cb(cb(test(data)))
Mutant 469 in filter.js: end replaced with null
Mutant 470 in filter.js: end replaced with data
Mutant 471 in filter.js: end replaced with function () {}
Mutant 472 in filter.js: data replaced with null
Mutant 473 in filter.js: data replaced with data.toString()
Mutant 474 in filter.js: data replaced with read(end, cb)
Mutant 475 in flatten.js: abort replaced with false
Mutant 476 in flatten.js: abort replaced with 0
Mutant 477 in flatten.js: abort replaced with _read
Mutant 478 in flatten.js: read(err || abort, cb) replaced with read(err && abort, cb)
Mutant 479 in flatten.js: read replaced with _read
Mutant 480 in flatten.js: err || abort replaced with abort || err
Mutant 481 in flatten.js: cb replaced with () => cb
Mutant 482 in flatten.js: cb replaced with cb(null, true)
Mutant 483 in flatten.js: cb replaced with cb(null, _read)
Mutant 484 in flatten.js: read(abort, cb) replaced with read(false, cb)
Mutant 485 in flatten.js: abort replaced with false
Mutant 486 in flatten.js: abort replaced with 'aborted'
Mutant 487 in flatten.js: abort replaced with this
Mutant 488 in flatten.js: cb replaced with () => cb
Mutant 489 in flatten.js: cb replaced with function () {
  cb;
}
Mutant 490 in flatten.js: _read replaced with false
Mutant 491 in flatten.js: _read replaced with 0
Mutant 492 in flatten.js: _read replaced with null
Mutant 493 in flatten.js: nextChunk replaced with nextStream
Mutant 494 in flatten.js: err replaced with stream
Mutant 495 in flatten.js: err replaced with null
Mutant 496 in flatten.js: err replaced with data
Mutant 497 in flatten.js: err === true replaced with err !== true
Mutant 498 in flatten.js: err === true replaced with err == 1
Mutant 499 in flatten.js: err replaced with stream
Mutant 500 in flatten.js: err replaced with null
Mutant 501 in flatten.js: err replaced with 42
Mutant 502 in flatten.js: cb(null, data) replaced with cb(false, data)
Mutant 503 in flatten.js: cb(null, data) replaced with cb(data, null)
Mutant 504 in flatten.js: cb(null, data) replaced with cb(_read, data)
Mutant 505 in flatten.js: null replaced with 1
Mutant 506 in flatten.js: null replaced with 'error'
Mutant 507 in flatten.js: null replaced with _read
Mutant 508 in flatten.js: data replaced with []
Mutant 509 in flatten.js: data replaced with _read
Mutant 510 in flatten.js: data replaced with Math.random()
Mutant 511 in flatten.js: end replaced with false
Mutant 512 in flatten.js: end replaced with stream
Mutant 513 in flatten.js: end replaced with values(stream) || true
Mutant 514 in flatten.js: cb replaced with _read = null
Mutant 515 in flatten.js: end replaced with false
Mutant 516 in flatten.js: end replaced with new Error('Stream ended')
Mutant 517 in flatten.js: end replaced with cb
Mutant 518 in flatten.js: stream && 'object' === typeof stream replaced with stream !== null
Mutant 519 in flatten.js: stream && 'object' === typeof stream replaced with stream && typeof stream === 'object'
Mutant 520 in flatten.js: stream && 'object' === typeof stream replaced with true
Mutant 521 in flatten.js: values replaced with [1, 2, 3]
Mutant 522 in flatten.js: values replaced with Math.random
Mutant 523 in flatten.js: stream replaced with stream || null
Mutant 524 in flatten.js: stream replaced with stream.slice(0)
Mutant 525 in flatten.js: stream replaced with [].concat(stream)
Mutant 526 in flatten.js: 'function' !== typeof stream replaced with stream === null
Mutant 527 in flatten.js: 'function' !== typeof stream replaced with stream.constructor.name !== 'Function'
Mutant 528 in flatten.js: 'function' !== typeof stream replaced with !stream.hasOwnProperty('constructor') || stream.constructor.name !== 'Function'
Mutant 529 in flatten.js: once replaced with Math.random
Mutant 530 in flatten.js: once replaced with once.sync
Mutant 531 in flatten.js: stream replaced with function () {
  return null;
}
Mutant 532 in flatten.js: stream replaced with Math.random()
Mutant 533 in flatten.js: stream replaced with this
Mutant 534 in flatten.js: nextChunk replaced with nextStream
Mutant 535 in flatten.js: nextChunk replaced with _read = null
Mutant 536 in map.js: !mapper replaced with mapper === null
Mutant 537 in map.js: !mapper replaced with mapper.length > 0
Mutant 538 in map.js: !mapper replaced with typeof mapper === 'function'
Mutant 539 in map.js: mapper replaced with mapper || function () {}
Mutant 540 in map.js: mapper replaced with mapper + ''
Mutant 541 in map.js: mapper replaced with mapper * 1
Mutant 542 in map.js: data replaced with data + 1
Mutant 543 in map.js: data replaced with data.toUpperCase()
Mutant 544 in map.js: data replaced with mapper(data)
Mutant 545 in map.js: err replaced with new Error('Intentionally inserted error')
Mutant 546 in map.js: err replaced with undefined
Mutant 547 in map.js: err replaced with null
Mutant 548 in map.js: cb(end, data) replaced with cb(undefined)
Mutant 549 in map.js: cb(end, data) replaced with cb([])
Mutant 550 in map.js: cb(end, data) replaced with cb({
  end: data,
  data: end
})
Mutant 551 in map.js: end replaced with false
Mutant 552 in map.js: end replaced with undefined
Mutant 553 in map.js: end replaced with data
Mutant 554 in map.js: data replaced with data + 1
Mutant 555 in map.js: data replaced with data.toString()
Mutant 556 in map.js: data replaced with mapper(data)
Mutant 557 in non-unique.js: unique(field, true) replaced with unique(field, false)
Mutant 558 in non-unique.js: unique replaced with field => field.length > 0
Mutant 559 in non-unique.js: field replaced with field * 2
Mutant 560 in non-unique.js: field replaced with 'field'
Mutant 561 in non-unique.js: field replaced with global.field
Mutant 562 in non-unique.js: true replaced with false
Mutant 563 in non-unique.js: true replaced with field.length > 0
Mutant 564 in non-unique.js: true replaced with Math.random() > 0.5
Mutant 565 in take.js: 'number' === typeof test replaced with 'string' === typeof test
Mutant 566 in take.js: 'number' === typeof test replaced with test === null
Mutant 567 in take.js: cb replaced with false
Mutant 568 in take.js: err || true replaced with err && false
Mutant 569 in take.js: err || true replaced with err || data
Mutant 570 in take.js: err || true replaced with undefined
Mutant 571 in take.js: ended && !end replaced with ended || !end
Mutant 572 in take.js: ended && !end replaced with this.ended && !end
Mutant 573 in take.js: ended && !end replaced with test(data) && ended && !end
Mutant 574 in take.js: cb replaced with cb(true)
Mutant 575 in take.js: cb replaced with cb(null, undefined)
Mutant 576 in take.js: cb replaced with cb(null, data, ended)
Mutant 577 in take.js: ended replaced with false
Mutant 578 in take.js: ended = end replaced with ended = 1
Mutant 579 in take.js: ended = end replaced with global.ended = end
Mutant 580 in take.js: ended = end replaced with ended += end
Mutant 581 in take.js: read(ended, cb) replaced with read(false, cb)
Mutant 582 in take.js: read(ended, cb) replaced with read(ended, data, cb)
Mutant 583 in take.js: read(ended, cb) replaced with read(cb(ended))
Mutant 584 in take.js: ended replaced with false
Mutant 585 in take.js: ended replaced with global.ended
Mutant 586 in take.js: ended replaced with this.ended
Mutant 587 in take.js: cb replaced with cb(null, data, true)
Mutant 588 in take.js: cb replaced with cb(true)
Mutant 589 in take.js: ended = ended || end replaced with ended = end
Mutant 590 in take.js: ended = ended || end replaced with ended = ended && end
Mutant 591 in take.js: ended = ended || end replaced with ended = test(data)
Mutant 592 in take.js: ended replaced with false
Mutant 593 in take.js: !test(data) replaced with test(data) === true
Mutant 594 in take.js: test replaced with !test
Mutant 595 in take.js: data replaced with data + 1
Mutant 596 in take.js: data replaced with null
Mutant 597 in take.js: data replaced with this.data
Mutant 598 in take.js: cb(null, data) replaced with cb(data, null)
Mutant 599 in take.js: null replaced with 1
Mutant 600 in take.js: null replaced with data
Mutant 601 in take.js: null replaced with new Error('Forced error')
Mutant 602 in take.js: data replaced with null
Mutant 603 in take.js: data replaced with undefined
Mutant 604 in take.js: data replaced with 0
Mutant 605 in take.js: cb replaced with cb(true)
Mutant 606 in take.js: cb replaced with cb(null, data, 'extra')
Mutant 607 in take.js: cb(null, data) replaced with cb(data, null)
Mutant 608 in take.js: cb(null, data) replaced with cb(data + 1)
Mutant 609 in take.js: cb(null, data) replaced with cb(function () {
  return data;
})
Mutant 610 in take.js: null replaced with 1
Mutant 611 in take.js: data replaced with null
Mutant 612 in take.js: data replaced with this
Mutant 613 in take.js: data replaced with test(data)
Mutant 614 in through.js: a || !onEnd replaced with a && onEnd
Mutant 615 in through.js: a || !onEnd replaced with !a
Mutant 616 in through.js: a || !onEnd replaced with true
Mutant 617 in through.js: abort === true ? null : abort replaced with true
Mutant 618 in through.js: abort === true ? null : abort replaced with 42
Mutant 619 in through.js: abort === true ? null : abort replaced with abort.toString()
Mutant 620 in through.js: end replaced with false
Mutant 621 in through.js: once replaced with through.once
Mutant 622 in through.js: end replaced with true
Mutant 623 in through.js: end replaced with null
Mutant 624 in through.js: end replaced with data
Mutant 625 in through.js: !end replaced with true
Mutant 626 in through.js: !end replaced with a
Mutant 627 in through.js: !end replaced with end && Math.random() < 0.5
Mutant 628 in through.js: op replaced with op ? op : data
Mutant 629 in through.js: op replaced with op || data
Mutant 630 in through.js: data replaced with null
Mutant 631 in through.js: data replaced with data.slice()
Mutant 632 in through.js: data replaced with {}
Mutant 633 in through.js: once replaced with through
Mutant 634 in through.js: once replaced with op
Mutant 635 in through.js: end replaced with undefined
Mutant 636 in through.js: end replaced with null
Mutant 637 in through.js: end replaced with cb(end, data)
Mutant 638 in through.js: cb(end, data) replaced with cb([data, end])
Mutant 639 in through.js: end replaced with undefined
Mutant 640 in through.js: end replaced with null
Mutant 641 in through.js: end replaced with 'not end'
Mutant 642 in through.js: data replaced with null
Mutant 643 in through.js: data replaced with data.toString()
Mutant 644 in unique.js: prop replaced with data => data[field]
Mutant 645 in unique.js: field replaced with field.call(null)
Mutant 646 in unique.js: field replaced with '' + field
Mutant 647 in unique.js: field replaced with field || true
Mutant 648 in unique.js: field replaced with 1 * field
Mutant 649 in unique.js: field replaced with global[field]
Mutant 650 in unique.js: data replaced with field(data.toUpperCase())
Mutant 651 in unique.js: data replaced with prop('nonexistentProperty')(data)
Mutant 652 in unique.js: seen[key] replaced with field(data)
Mutant 653 in unique.js: seen[key] replaced with seen.hasOwnProperty(key)
Mutant 654 in abort-cb.js: abort replaced with false
Mutant 655 in abort-cb.js: abort replaced with abort || 'error'
Mutant 656 in abort-cb.js: abort replaced with global.abort
Mutant 657 in abort-cb.js: abort === true ? null : abort replaced with true
Mutant 658 in abort-cb.js: abort === true ? null : abort replaced with abort ? null : 'aborting'
Mutant 659 in abort-cb.js: abort === true ? null : abort replaced with Math.random()
Mutant 660 in prop.js: key.exec replaced with key.test
Mutant 661 in prop.js: data replaced with data.prop
Mutant 662 in prop.js: data replaced with this.data
Mutant 663 in prop.js: data replaced with global.data
Mutant 664 in tester.js: test.test replaced with 1 * test.test
Mutant 665 in tester.js: data replaced with null
Mutant 666 in tester.js: data replaced with 1
Mutant 667 in tester.js: prop replaced with null
Mutant 668 in tester.js: prop replaced with 1
Mutant 669 in tester.js: test replaced with test && {}
Mutant 670 in tester.js: test replaced with test || {}
[32m11:41:25 (2795) INFO Instrumenter[39m Instrumented 31 source file(s) with 671 mutant(s)
[32m11:41:26 (2795) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m11:41:27 (2795) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m11:41:27 (2795) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m11:41:29 (2795) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 1 second (net 1797 ms, overhead 1 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~11m) 10/671 tested (2 survived, 0 timed out)
Mutation testing 1% (elapsed: <1m, remaining: ~16m) 13/671 tested (4 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~21m) 15/671 tested (5 survived, 1 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~25m) 17/671 tested (5 survived, 3 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~27m) 20/671 tested (7 survived, 4 timed out)
Mutation testing 3% (elapsed: ~1m, remaining: ~25m) 25/671 tested (12 survived, 4 timed out)
Mutation testing 4% (elapsed: ~1m, remaining: ~24m) 31/671 tested (18 survived, 4 timed out)
Mutation testing 5% (elapsed: ~1m, remaining: ~23m) 36/671 tested (22 survived, 4 timed out)
Mutation testing 6% (elapsed: ~1m, remaining: ~21m) 43/671 tested (22 survived, 4 timed out)
Mutation testing 7% (elapsed: ~1m, remaining: ~19m) 52/671 tested (23 survived, 4 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~19m) 59/671 tested (24 survived, 4 timed out)
Mutation testing 9% (elapsed: ~2m, remaining: ~18m) 65/671 tested (28 survived, 4 timed out)
Mutation testing 10% (elapsed: ~2m, remaining: ~18m) 71/671 tested (34 survived, 4 timed out)
Mutation testing 11% (elapsed: ~2m, remaining: ~18m) 76/671 tested (39 survived, 4 timed out)
Mutation testing 12% (elapsed: ~2m, remaining: ~17m) 82/671 tested (45 survived, 4 timed out)
Mutation testing 12% (elapsed: ~2m, remaining: ~17m) 87/671 tested (50 survived, 4 timed out)
Mutation testing 13% (elapsed: ~2m, remaining: ~17m) 93/671 tested (56 survived, 4 timed out)
Mutation testing 14% (elapsed: ~3m, remaining: ~17m) 98/671 tested (60 survived, 4 timed out)
Mutation testing 15% (elapsed: ~3m, remaining: ~17m) 103/671 tested (62 survived, 5 timed out)
Mutation testing 16% (elapsed: ~3m, remaining: ~17m) 109/671 tested (63 survived, 5 timed out)
Mutation testing 17% (elapsed: ~3m, remaining: ~16m) 115/671 tested (67 survived, 6 timed out)
Mutation testing 18% (elapsed: ~3m, remaining: ~16m) 122/671 tested (70 survived, 6 timed out)
Mutation testing 19% (elapsed: ~3m, remaining: ~15m) 130/671 tested (74 survived, 6 timed out)
Mutation testing 19% (elapsed: ~4m, remaining: ~16m) 132/671 tested (74 survived, 7 timed out)
Mutation testing 19% (elapsed: ~4m, remaining: ~16m) 133/671 tested (74 survived, 8 timed out)
Mutation testing 20% (elapsed: ~4m, remaining: ~16m) 140/671 tested (75 survived, 9 timed out)
Mutation testing 21% (elapsed: ~4m, remaining: ~16m) 145/671 tested (80 survived, 9 timed out)
Mutation testing 23% (elapsed: ~4m, remaining: ~15m) 155/671 tested (84 survived, 9 timed out)
Mutation testing 24% (elapsed: ~4m, remaining: ~15m) 162/671 tested (87 survived, 9 timed out)
Mutation testing 24% (elapsed: ~5m, remaining: ~15m) 167/671 tested (88 survived, 9 timed out)
Mutation testing 25% (elapsed: ~5m, remaining: ~14m) 174/671 tested (90 survived, 10 timed out)
Mutation testing 26% (elapsed: ~5m, remaining: ~14m) 180/671 tested (95 survived, 10 timed out)
Mutation testing 27% (elapsed: ~5m, remaining: ~14m) 187/671 tested (96 survived, 10 timed out)
Mutation testing 28% (elapsed: ~5m, remaining: ~13m) 194/671 tested (97 survived, 10 timed out)
Mutation testing 29% (elapsed: ~5m, remaining: ~13m) 200/671 tested (97 survived, 10 timed out)
Mutation testing 30% (elapsed: ~6m, remaining: ~13m) 207/671 tested (97 survived, 10 timed out)
Mutation testing 31% (elapsed: ~6m, remaining: ~13m) 212/671 tested (102 survived, 10 timed out)
Mutation testing 32% (elapsed: ~6m, remaining: ~13m) 218/671 tested (105 survived, 10 timed out)
Mutation testing 33% (elapsed: ~6m, remaining: ~12m) 227/671 tested (109 survived, 10 timed out)
Mutation testing 35% (elapsed: ~6m, remaining: ~12m) 238/671 tested (109 survived, 10 timed out)
Mutation testing 36% (elapsed: ~6m, remaining: ~11m) 247/671 tested (113 survived, 10 timed out)
Mutation testing 37% (elapsed: ~7m, remaining: ~11m) 253/671 tested (116 survived, 10 timed out)
Mutation testing 38% (elapsed: ~7m, remaining: ~11m) 259/671 tested (122 survived, 10 timed out)
Mutation testing 40% (elapsed: ~7m, remaining: ~10m) 269/671 tested (122 survived, 10 timed out)
Mutation testing 40% (elapsed: ~7m, remaining: ~11m) 270/671 tested (122 survived, 11 timed out)
Mutation testing 40% (elapsed: ~7m, remaining: ~11m) 271/671 tested (122 survived, 12 timed out)
Mutation testing 41% (elapsed: ~7m, remaining: ~11m) 276/671 tested (123 survived, 13 timed out)
Mutation testing 41% (elapsed: ~8m, remaining: ~11m) 281/671 tested (125 survived, 14 timed out)
Mutation testing 42% (elapsed: ~8m, remaining: ~10m) 288/671 tested (128 survived, 14 timed out)
Mutation testing 43% (elapsed: ~8m, remaining: ~10m) 294/671 tested (130 survived, 14 timed out)
Mutation testing 43% (elapsed: ~8m, remaining: ~10m) 295/671 tested (130 survived, 15 timed out)
Mutation testing 44% (elapsed: ~8m, remaining: ~10m) 299/671 tested (132 survived, 16 timed out)
Mutation testing 45% (elapsed: ~8m, remaining: ~10m) 304/671 tested (137 survived, 16 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~10m) 310/671 tested (141 survived, 16 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~10m) 313/671 tested (143 survived, 16 timed out)
Mutation testing 46% (elapsed: ~9m, remaining: ~10m) 314/671 tested (143 survived, 17 timed out)
Mutation testing 47% (elapsed: ~9m, remaining: ~10m) 320/671 tested (146 survived, 18 timed out)
Mutation testing 48% (elapsed: ~9m, remaining: ~10m) 325/671 tested (151 survived, 18 timed out)
Mutation testing 49% (elapsed: ~9m, remaining: ~10m) 331/671 tested (157 survived, 18 timed out)
Mutation testing 50% (elapsed: ~10m, remaining: ~9m) 336/671 tested (162 survived, 18 timed out)
Mutation testing 50% (elapsed: ~10m, remaining: ~9m) 342/671 tested (168 survived, 18 timed out)
Mutation testing 52% (elapsed: ~10m, remaining: ~9m) 353/671 tested (169 survived, 18 timed out)
Mutation testing 53% (elapsed: ~10m, remaining: ~8m) 362/671 tested (169 survived, 18 timed out)
Mutation testing 54% (elapsed: ~10m, remaining: ~9m) 363/671 tested (169 survived, 19 timed out)
Mutation testing 54% (elapsed: ~10m, remaining: ~9m) 364/671 tested (169 survived, 20 timed out)
Mutation testing 54% (elapsed: ~11m, remaining: ~9m) 369/671 tested (170 survived, 21 timed out)
Mutation testing 55% (elapsed: ~11m, remaining: ~9m) 370/671 tested (170 survived, 22 timed out)
Mutation testing 56% (elapsed: ~11m, remaining: ~8m) 377/671 tested (175 survived, 23 timed out)
Mutation testing 56% (elapsed: ~11m, remaining: ~8m) 379/671 tested (176 survived, 24 timed out)
Mutation testing 56% (elapsed: ~11m, remaining: ~8m) 381/671 tested (177 survived, 25 timed out)
Mutation testing 57% (elapsed: ~11m, remaining: ~8m) 383/671 tested (179 survived, 25 timed out)
Mutation testing 58% (elapsed: ~12m, remaining: ~8m) 394/671 tested (181 survived, 26 timed out)
Mutation testing 59% (elapsed: ~12m, remaining: ~8m) 397/671 tested (182 survived, 26 timed out)
Mutation testing 59% (elapsed: ~12m, remaining: ~8m) 401/671 tested (182 survived, 28 timed out)
Mutation testing 61% (elapsed: ~12m, remaining: ~7m) 412/671 tested (184 survived, 28 timed out)
Mutation testing 62% (elapsed: ~12m, remaining: ~7m) 422/671 tested (187 survived, 28 timed out)
Mutation testing 64% (elapsed: ~12m, remaining: ~6m) 435/671 tested (187 survived, 28 timed out)
Mutation testing 65% (elapsed: ~13m, remaining: ~6m) 438/671 tested (187 survived, 28 timed out)
Mutation testing 65% (elapsed: ~13m, remaining: ~6m) 440/671 tested (187 survived, 29 timed out)
Mutation testing 66% (elapsed: ~13m, remaining: ~6m) 444/671 tested (187 survived, 30 timed out)
Mutation testing 67% (elapsed: ~13m, remaining: ~6m) 450/671 tested (187 survived, 31 timed out)
Mutation testing 67% (elapsed: ~13m, remaining: ~6m) 452/671 tested (187 survived, 32 timed out)
Mutation testing 67% (elapsed: ~13m, remaining: ~6m) 453/671 tested (187 survived, 33 timed out)
Mutation testing 68% (elapsed: ~14m, remaining: ~6m) 458/671 tested (190 survived, 34 timed out)
Mutation testing 69% (elapsed: ~14m, remaining: ~6m) 464/671 tested (195 survived, 34 timed out)
Mutation testing 69% (elapsed: ~14m, remaining: ~6m) 469/671 tested (197 survived, 34 timed out)
Mutation testing 70% (elapsed: ~14m, remaining: ~6m) 472/671 tested (197 survived, 35 timed out)
Mutation testing 71% (elapsed: ~14m, remaining: ~5m) 479/671 tested (198 survived, 35 timed out)
Mutation testing 72% (elapsed: ~14m, remaining: ~5m) 485/671 tested (199 survived, 35 timed out)
Mutation testing 73% (elapsed: ~15m, remaining: ~5m) 491/671 tested (199 survived, 35 timed out)
Mutation testing 73% (elapsed: ~15m, remaining: ~5m) 495/671 tested (199 survived, 35 timed out)
Mutation testing 74% (elapsed: ~15m, remaining: ~5m) 497/671 tested (199 survived, 37 timed out)
Mutation testing 74% (elapsed: ~15m, remaining: ~5m) 500/671 tested (200 survived, 37 timed out)
Mutation testing 75% (elapsed: ~15m, remaining: ~5m) 505/671 tested (201 survived, 38 timed out)
Mutation testing 76% (elapsed: ~15m, remaining: ~4m) 511/671 tested (201 survived, 38 timed out)
Mutation testing 76% (elapsed: ~16m, remaining: ~4m) 515/671 tested (201 survived, 38 timed out)
Mutation testing 77% (elapsed: ~16m, remaining: ~4m) 520/671 tested (204 survived, 39 timed out)
Mutation testing 78% (elapsed: ~16m, remaining: ~4m) 527/671 tested (207 survived, 39 timed out)
Mutation testing 79% (elapsed: ~16m, remaining: ~4m) 533/671 tested (208 survived, 39 timed out)
Mutation testing 80% (elapsed: ~16m, remaining: ~4m) 539/671 tested (209 survived, 39 timed out)
Mutation testing 81% (elapsed: ~16m, remaining: ~3m) 548/671 tested (210 survived, 39 timed out)
Mutation testing 82% (elapsed: ~17m, remaining: ~3m) 552/671 tested (210 survived, 40 timed out)
Mutation testing 82% (elapsed: ~17m, remaining: ~3m) 556/671 tested (210 survived, 41 timed out)
Mutation testing 83% (elapsed: ~17m, remaining: ~3m) 562/671 tested (212 survived, 41 timed out)
Mutation testing 85% (elapsed: ~17m, remaining: ~3m) 571/671 tested (213 survived, 41 timed out)
Mutation testing 85% (elapsed: ~17m, remaining: ~2m) 577/671 tested (213 survived, 42 timed out)
Mutation testing 87% (elapsed: ~17m, remaining: ~2m) 590/671 tested (215 survived, 42 timed out)
Mutation testing 89% (elapsed: ~18m, remaining: ~2m) 602/671 tested (217 survived, 42 timed out)
Mutation testing 91% (elapsed: ~18m, remaining: ~1m) 615/671 tested (217 survived, 42 timed out)
Mutation testing 92% (elapsed: ~18m, remaining: ~1m) 621/671 tested (221 survived, 42 timed out)
Mutation testing 93% (elapsed: ~18m, remaining: ~1m) 629/671 tested (224 survived, 42 timed out)
Mutation testing 94% (elapsed: ~18m, remaining: ~1m) 635/671 tested (227 survived, 42 timed out)
Mutation testing 95% (elapsed: ~18m, remaining: <1m) 639/671 tested (229 survived, 42 timed out)
Mutation testing 95% (elapsed: ~19m, remaining: <1m) 641/671 tested (229 survived, 44 timed out)
Mutation testing 96% (elapsed: ~19m, remaining: <1m) 648/671 tested (229 survived, 44 timed out)
Mutation testing 97% (elapsed: ~19m, remaining: <1m) 654/671 tested (230 survived, 44 timed out)
Mutation testing 98% (elapsed: ~19m, remaining: <1m) 661/671 tested (232 survived, 44 timed out)
Mutation testing 99% (elapsed: ~19m, remaining: <1m) 665/671 tested (235 survived, 44 timed out)
Mutation testing 99% (elapsed: ~19m, remaining: <1m) 666/671 tested (235 survived, 45 timed out)

All tests
  ✓ All tests (killed 389)

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (done === undefined) {

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (typeof done === 'undefined') {

[Survived] PrecomputedMutator
sinks/drain.js:8:7
-     if (!done) {
+     if (!read) {

[Survived] PrecomputedMutator
sinks/drain.js:14:22
-       if(abort) return sink.abort()
+       if(abort) return doneLackingErr.message = 'New error message'()

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end !== true) {

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(end == false) {

[Survived] PrecomputedMutator
sinks/drain.js:27:23
-                 else if(end && end !== true) {
+                 else if(!op(data)) {

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.error(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.log(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:17
-                   console.warn(doneLackingErr)
+                   console.clear(doneLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(null)

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(true)

[Survived] PrecomputedMutator
sinks/drain.js:28:30
-                   console.warn(doneLackingErr)
+                   console.warn(readLackingErr)

[Survived] PrecomputedMutator
sinks/drain.js:34:15
-                 read(abort || true, done || function () {})
+                 read(false, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:15
-                 read(abort || true, done || function () {})
+                 read(abort, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(abort && true, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:20
-                 read(abort || true, done || function () {})
+                 read(global.abort || true, done || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:34:35
-                 read(abort || true, done || function () {})
+                 read(abort || true, done || true)

[Survived] PrecomputedMutator
sinks/drain.js:52:8
-       if(read) return read(abort, cb || function () {})
+       if(read.bind(this)) return read(abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:8
-       if(read) return read(abort, cb || function () {})
+       if(read || function () {}) return read(abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:8
-       if(read) return read(abort, cb || function () {})
+       if(read(abort, cb || function () {}) || true) return read(abort, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:21
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(false, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:21
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(abort, function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:26
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(false, cb || function () {})

[Survived] PrecomputedMutator
sinks/drain.js:52:26
-       if(read) return read(abort, cb || function () {})
+       if(read) return read(null, cb || function () {})

[Survived] PrecomputedMutator
sinks/find.js:9:6
-     if(!cb)
+     if(cb === null)

[Survived] PrecomputedMutator
sinks/find.js:15:13
-       if(test(data)) {
+       if(test(arguments[0])) {

[Survived] PrecomputedMutator
sinks/log.js:7:5
-       console.log(data)
+       console.error(data)

[Survived] PrecomputedMutator
sinks/log.js:7:5
-       console.log(data)
+       alert(data)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(1 * data)

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(data + '')

[Survived] PrecomputedMutator
sinks/log.js:7:17
-       console.log(data)
+       console.log(data || [])

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain(false, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:10
-     return drain(null, done)
+     return drain(1, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(1, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(true, done)

[Survived] PrecomputedMutator
sinks/on-end.js:6:16
-     return drain(null, done)
+     return drain(() => {}, done)

[Survived] PrecomputedMutator
sinks/reduce.js:6:6
-     if(!cb) cb = acc, acc = null
+     if(cb === undefined) cb = acc, acc = null

[Survived] PrecomputedMutator
sinks/reduce.js:6:6
-     if(!cb) cb = acc, acc = null
+     if(typeof cb === 'undefined') cb = acc, acc = null

[Survived] PrecomputedMutator
sinks/reduce.js:16:12
-           if(end) return cb(end === true ? null : end)
+           if(false) return cb(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return acc = cb(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:24
-           if(end) return cb(end === true ? null : end)
+           if(end) return acc += cb(end === true ? null : end)

[Survived] PrecomputedMutator
sinks/reduce.js:16:27
-           if(end) return cb(end === true ? null : end)
+           if(end) return cb(end ? undefined : end)

[Survived] PrecomputedMutator
sinks/reduce.js:17:26
-           acc = data; sink(source)
+           acc = data; sink(source || {})

[Survived] PrecomputedMutator
sources/count.js:6:8
-       if(end) return cb && cb(end)
+       if(0) return cb && cb(end)

[Survived] PrecomputedMutator
sources/count.js:6:8
-       if(end) return cb && cb(end)
+       if(end && end > i) return cb && cb(end)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(i)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(i + 1)

[Survived] PrecomputedMutator
sources/count.js:6:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(null)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i === max)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i >= max)

[Survived] PrecomputedMutator
sources/count.js:7:8
-       if(i > max)
+       if(i + 1 > max)

[Survived] PrecomputedMutator
sources/infinite.js:5:8
-       if(end) return cb && cb(end)
+       if(0) return cb && cb(end)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(1 / end)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(end || true)

[Survived] PrecomputedMutator
sources/infinite.js:5:29
-       if(end) return cb && cb(end)
+       if(end) return cb && cb(Math.abs(end))

[Survived] PrecomputedMutator
sources/infinite.js:6:12
-       return cb(null, generate())
+       return cb(undefined, generate(1))

[Survived] PrecomputedMutator
sources/infinite.js:6:12
-       return cb(null, generate())
+       return cb(null, Math.random())

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, generate(null))

[Survived] PrecomputedMutator
sources/infinite.js:6:21
-       return cb(null, generate())
+       return cb(null, Math.random())

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:14
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb(true, null))

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(() => cb(), abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb.bind(null, true), abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:22
-         return abortCb(cb, abort, onAbort)
+         return abortCb(value && cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, false, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, value, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:26
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, onAbort, onAbort)

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, onAbort())

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, 1)

[Survived] PrecomputedMutator
sources/once.js:7:33
-         return abortCb(cb, abort, onAbort)
+         return abortCb(cb, abort, abortCb)

[Survived] PrecomputedMutator
sources/once.js:8:8
-       if(value != null) {
+       if(value !== null) {

[Survived] PrecomputedMutator
sources/once.js:10:7
-         cb(null, _value)
+         cb(undefined, _value)

[Survived] PrecomputedMutator
sources/values.js:5:6
-     if(!array)
+     if(array.length === 0)

[Survived] PrecomputedMutator
sources/values.js:5:6
-     if(!array)
+     if(typeof array === 'undefined')

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(true) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(i >= array.length) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:10
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(array.length === i) return abortCb(cb, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(null, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, true, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:24
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, 'incorrect value')

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(function () {
+     cb(true);
+   }, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(null, abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:32
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb.bind(this), abort, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, false, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, null, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:36
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, i, onAbort)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, false)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, null)

[Survived] PrecomputedMutator
sources/values.js:7:43
-         if(abort) return abortCb(cb, abort, onAbort)
+         if(abort) return abortCb(cb, abort, i)

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(false)

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(i >= array.length)

[Survived] PrecomputedMutator
sources/values.js:8:17
-         return cb(true)
+         return cb(null)

[Survived] PrecomputedMutator
sources/values.js:10:6
-     if(!Array.isArray(array))
+     if(array instanceof Array === false)

[Survived] PrecomputedMutator
sources/values.js:10:6
-     if(!Array.isArray(array))
+     if(Array.prototype.isPrototypeOf(array) === false)

[Survived] PrecomputedMutator
sources/values.js:10:6
-     if(!Array.isArray(array))
+     if(Object.prototype.toString.call(array) !== '[object Array]')

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(array.length))

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(Object.keys(array)[0]))

[Survived] PrecomputedMutator
sources/values.js:10:21
-     if(!Array.isArray(array))
+     if(!Array.isArray(global.array))

[Survived] PrecomputedMutator
sources/values.js:21:10
-         cb(null, array[i++])
+         cb(0, array[i++])

[Survived] PrecomputedMutator
throughs/async-map.js:7:6
-     if(!map) return id
+     if(map === null) return id

[Survived] PrecomputedMutator
throughs/async-map.js:7:6
-     if(!map) return id
+     if(typeof map === 'undefined') return id

[Survived] PrecomputedMutator
throughs/async-map.js:8:14
-     map = prop(map)
+     map = prop(map || {})

[Survived] PrecomputedMutator
throughs/async-map.js:8:14
-     map = prop(map)
+     map = prop(map || function (data) {
+     return data;
+   })

[Survived] PrecomputedMutator
throughs/async-map.js:8:14
-     map = prop(map)
+     map = prop(map || id(null))

[Survived] PrecomputedMutator
throughs/async-map.js:12:10
-         if(aborted) return cb(aborted)
+         if(null) return cb(aborted)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(new Error('Artificial error for mutation testing'))

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(true)

[Survived] PrecomputedMutator
throughs/async-map.js:12:29
-         if(aborted) return cb(aborted)
+         if(aborted) return cb(null)

[Survived] PrecomputedMutator
throughs/async-map.js:15:12
-           if(!busy) read(abort, function (err) {
+           if(false) read(abort, function (err) {

[Survived] PrecomputedMutator
throughs/async-map.js:15:12
-           if(!busy) read(abort, function (err) {
+           if(typeof busy === 'undefined') read(abort, function (err) {

[Survived] PrecomputedMutator
throughs/async-map.js:23:19
-             else cb(abort)
+             else cb(function () {
+     return true;
+   })

[Survived] PrecomputedMutator
throughs/async-map.js:29:31
-             else if(aborted) cb(aborted)
+             else if(aborted) cb(data)

[Survived] PrecomputedMutator
throughs/async-map.js:29:31
-             else if(aborted) cb(aborted)
+             else if(aborted) cb(new Error('Forced error'))

[Survived] PrecomputedMutator
throughs/async-map.js:36:36
-                   abortCb && abortCb(aborted)
+                   abortCb && abortCb({})

[Survived] PrecomputedMutator
throughs/async-map.js:36:36
-                   abortCb && abortCb(aborted)
+                   abortCb && abortCb('aborted')

[Survived] PrecomputedMutator
throughs/async-map.js:36:36
-                   abortCb && abortCb(aborted)
+                   abortCb && abortCb(function () {
+     return true;
+   })

[Survived] PrecomputedMutator
throughs/filter.js:15:23
-             if(!end && !test(data))
+             if(!end && !test || true(data))

[Survived] PrecomputedMutator
throughs/filter.js:15:28
-             if(!end && !test(data))
+             if(!end && !test(data || {}))

[Survived] PrecomputedMutator
throughs/filter.js:15:28
-             if(!end && !test(data))
+             if(!end && !test(data + ''))

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(null)

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(5)

[Survived] PrecomputedMutator
throughs/filter.js:16:41
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(cb(end, data, 'extra argument'))

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(null, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next({}, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:46
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(data, cb)

[Survived] PrecomputedMutator
throughs/filter.js:16:51
-               return sync ? loop = true : next(end, cb)
+               return sync ? loop = true : next(end, cb(end, null))

[Survived] PrecomputedMutator
throughs/flatten.js:13:11
-             read(err || abort, cb)
+             read(err && abort, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:13:16
-             read(err || abort, cb)
+             read(abort || err, cb)

[Survived] PrecomputedMutator
throughs/flatten.js:22:17
-               if (err === true) nextStream()
+               if (err == 1) nextStream()

[Survived] PrecomputedMutator
throughs/flatten.js:28:16
-             else cb(null, data)
+             else cb(false, data)

[Survived] PrecomputedMutator
throughs/flatten.js:35:23
-               return cb(end)
+               return cb(new Error('Stream ended'))

[Survived] PrecomputedMutator
throughs/flatten.js:35:23
-               return cb(end)
+               return cb(cb)

[Survived] PrecomputedMutator
throughs/flatten.js:36:14
-             if(stream && 'object' === typeof stream)
+             if(stream && typeof stream === 'object')

[Survived] PrecomputedMutator
throughs/flatten.js:37:29
-               stream = values(stream)
+               stream = values(stream || null)

[Survived] PrecomputedMutator
throughs/flatten.js:37:29
-               stream = values(stream)
+               stream = values(stream.slice(0))

[Survived] PrecomputedMutator
throughs/flatten.js:37:29
-               stream = values(stream)
+               stream = values([].concat(stream))

[Survived] PrecomputedMutator
throughs/flatten.js:38:20
-             else if ('function' !== typeof stream)
+             else if (stream.constructor.name !== 'Function')

[Survived] PrecomputedMutator
throughs/map.js:7:6
-     if(!mapper) return id
+     if(mapper === null) return id

[Survived] PrecomputedMutator
throughs/map.js:8:17
-     mapper = prop(mapper)
+     mapper = prop(mapper || function () {})

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(field * 2, true)

[Survived] PrecomputedMutator
throughs/non-unique.js:7:17
-     return unique(field, true)
+     return unique(global.field, true)

[Survived] PrecomputedMutator
throughs/take.js:19:26
-           last = false; cb(err || true)
+           last = false; cb(err || data)

[Survived] PrecomputedMutator
throughs/take.js:24:51
-         if(ended && !end) last ? terminate(cb) : cb(ended)
+         if(ended && !end) last ? terminate(cb) : cb(false)

[Survived] PrecomputedMutator
throughs/take.js:28:14
-             if(ended = ended || end) {
+             if(ended = end) {

[Survived] PrecomputedMutator
throughs/take.js:28:14
-             if(ended = ended || end) {
+             if(ended = ended && end) {

[Survived] PrecomputedMutator
throughs/take.js:30:16
-               cb(ended)
+               cb(false)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(true)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(42)

[Survived] PrecomputedMutator
throughs/through.js:10:11
-       onEnd(abort === true ? null : abort)
+       onEnd(abort.toString())

[Survived] PrecomputedMutator
throughs/through.js:15:10
-         if(end) once(end)
+         if(false) once(end)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(true)

[Survived] PrecomputedMutator
throughs/through.js:15:20
-         if(end) once(end)
+         if(end) once(null)

[Survived] PrecomputedMutator
throughs/through.js:17:24
-           if(!end) op && op(data)
+           if(!end) op && op ? op : data(data)

[Survived] PrecomputedMutator
throughs/through.js:17:24
-           if(!end) op && op(data)
+           if(!end) op && op || data(data)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op(null)

[Survived] PrecomputedMutator
throughs/through.js:17:27
-           if(!end) op && op(data)
+           if(!end) op && op({})

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(undefined)

[Survived] PrecomputedMutator
throughs/through.js:18:19
-           else once(end)
+           else once(null)

[Survived] PrecomputedMutator
throughs/unique.js:13:8
-       if(seen[key]) return !!invert //false, by default
+       if(seen.hasOwnProperty(key)) return !!invert //false, by default

[Survived] PrecomputedMutator
util/abort-cb.js:2:6
-     cb(abort)
+     cb(abort || 'error')

[Survived] PrecomputedMutator
util/prop.js:6:33
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.test(data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(data.prop); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(this.data); return v && v[0] }

[Survived] PrecomputedMutator
util/prop.js:6:42
-       ? function (data) { var v = key.exec(data); return v && v[0] }
+       ? function (data) { var v = key.exec(global.data); return v && v[0] }

[Survived] PrecomputedMutator
util/tester.js:9:13
-       : prop (test) || id
+       : prop (test || {}) || id

[Survived] PrecomputedMutator
index.js:14:14
-   for(var k in throughs)
+   for(var k in Object.assign({}, throughs))

[Survived] PrecomputedMutator
pull.js:5:7
-     if (typeof a === 'function' && a.length === 1) {
+     if (a instanceof Function && a.length === 1) {

[Survived] PrecomputedMutator
pull.js:7:5
-       for(var i = 0; i < length; i++)
-         args[i] = arguments[i]
+       for (let i = 0; i < length; i++) args[i] = arguments[i];

[Survived] PrecomputedMutator
pull.js:7:20
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i <= length; i++)

[Survived] PrecomputedMutator
pull.js:7:20
-       for(var i = 0; i < length; i++)
+       for(var i = 0; i in arguments; i++)

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (args === undefined) {

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (length <= 0) {

[Survived] PrecomputedMutator
pull.js:10:11
-         if (args == null) {
+         if (typeof args !== 'object') {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (0) {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (ref.length) {

[Survived] PrecomputedMutator
pull.js:20:15
-         switch (length) {
+         switch (Math.floor(Math.random() * length)) {

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(ref[i])

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(ref.shift())

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return pull(ref.pop())

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return ref[0](read, ref[0])

[Survived] PrecomputedMutator
pull.js:21:22
-         case 1: return pull(read, ref[0])
+         case 1: return read(read, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(0, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(null, ref[0])

[Survived] PrecomputedMutator
pull.js:21:27
-         case 1: return pull(read, ref[0])
+         case 1: return pull(() => {}, ref[0])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref[1])

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref.pop())

[Survived] PrecomputedMutator
pull.js:21:33
-         case 1: return pull(read, ref[0])
+         case 1: return pull(read, ref.length - 1)

[Survived] PrecomputedMutator
pull.js:22:41
-         case 2: return pull(read, ref[0], ref[1])
+         case 2: return pull(read, ref[0], ref.pop())

[Survived] PrecomputedMutator
pull.js:23:41
-         case 3: return pull(read, ref[0], ref[1], ref[2])
+         case 3: return pull(read, ref[0], ref['1'], ref[2])

[Survived] PrecomputedMutator
pull.js:23:49
-         case 3: return pull(read, ref[0], ref[1], ref[2])
+         case 3: return pull(read, ref[0], ref[1], ref.pop())

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull([].concat.apply([], ref.slice(0, 4)))

[Survived] PrecomputedMutator
pull.js:24:22
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(ref.slice(0, 4))

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(function () {
+     return read;
+   }, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(null, ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:27
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(Math.random(), ref[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:33
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref.slice(0, 1)[0], ref[1], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1] - 0, ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref['1'], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:41
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref.slice(1)[0], ref[2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[3 - i % 2], ref[3])

[Survived] PrecomputedMutator
pull.js:24:49
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[Math.floor(Math.random() * length)], ref[3])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref[4])

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref.pop())

[Survived] PrecomputedMutator
pull.js:24:57
-         case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])
+         case 4: return pull(read, ref[0], ref[1], ref[2], ref.length--)

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.push(read)

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.pop(read)

[Survived] PrecomputedMutator
pull.js:26:9
-           ref.unshift(read)
+           ref.shift(read)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(null)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift(undefined)

[Survived] PrecomputedMutator
pull.js:26:21
-           ref.unshift(read)
+           ref.unshift({})

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply(this)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.apply({})

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.bind(null, ref)

[Survived] PrecomputedMutator
pull.js:27:16
-           return pull.apply(null, ref)
+           return pull.call(null, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(this, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(0, ref)

[Survived] PrecomputedMutator
pull.js:27:27
-           return pull.apply(null, ref)
+           return pull.apply(arguments, ref)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, ref.slice())

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, null)

[Survived] PrecomputedMutator
pull.js:27:33
-           return pull.apply(null, ref)
+           return pull.apply(null, {})

[Survived] PrecomputedMutator
pull.js:34:7
-     if (read && typeof read.source === 'function') {
+     if (read !== null && typeof read.source === 'function') {

[Survived] PrecomputedMutator
pull.js:34:7
-     if (read && typeof read.source === 'function') {
+     if (read && typeof read.source === 'object') {

[Survived] PrecomputedMutator
pull.js:34:7
-     if (read && typeof read.source === 'function') {
+     if (read && read.hasOwnProperty('source')) {

[Survived] PrecomputedMutator
pull.js:38:3
-     for (var i = 1; i < length; i++) {
-       var s = arguments[i]
-       if (typeof s === 'function') {
-         read = s(read)
-       } else if (s && typeof s === 'object') {
-         s.sink(read)
-         read = s.source
-       }
-     }
+     for (let i = 1; i < length; i++) {
+     var s = arguments[i];
+     if (typeof s === 'function') {
+       read = s(read);
+     } else if (s && typeof s === 'object') {
+       s.sink(read);
+       read = s.source;
+     }
+   }

[Survived] PrecomputedMutator
pull.js:38:19
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i <= length; i++) {

[Survived] PrecomputedMutator
pull.js:38:19
-     for (var i = 1; i < length; i++) {
+     for (var i = 1; i in arguments; i++) {

[Survived] PrecomputedMutator
pull.js:40:9
-       if (typeof s === 'function') {
+       if (s instanceof Function) {

[Survived] PrecomputedMutator
pull.js:40:9
-       if (typeof s === 'function') {
+       if (s.constructor === Function) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if ('s' in window) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (s instanceof Object) {

[Survived] PrecomputedMutator
pull.js:42:16
-       } else if (s && typeof s === 'object') {
+       } else if (Array.isArray(s)) {

[Survived] PrecomputedMutator
pull.js:43:7
-         s.sink(read)
+         s.source(read)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(null)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(123)

[Survived] PrecomputedMutator
pull.js:43:14
-         s.sink(read)
+         s.sink(this)

Ran 0.93 tests per mutant on average.
----------------|---------|----------|-----------|------------|----------|----------|
File            | % score | # killed | # timeout | # survived | # no cov | # errors |
----------------|---------|----------|-----------|------------|----------|----------|
All files       |   64.83 |      389 |        46 |        236 |        0 |        0 |
 sinks          |   66.67 |       84 |         4 |         44 |        0 |        0 |
  collect.js    |  100.00 |        5 |         0 |          0 |        0 |        0 |
  drain.js      |   58.33 |       31 |         4 |         25 |        0 |        0 |
  find.js       |   91.67 |       22 |         0 |          2 |        0 |        0 |
  log.js        |    0.00 |        0 |         0 |          5 |        0 |        0 |
  on-end.js     |   44.44 |        4 |         0 |          5 |        0 |        0 |
  reduce.js     |   75.86 |       22 |         0 |          7 |        0 |        0 |
 sources        |   53.72 |       52 |        13 |         56 |        0 |        0 |
  count.js      |   57.89 |       11 |         0 |          8 |        0 |        0 |
  empty.js      |  100.00 |        0 |         3 |          0 |        0 |        0 |
  error.js      |  100.00 |        3 |         0 |          0 |        0 |        0 |
  infinite.js   |   50.00 |        7 |         1 |          8 |        0 |        0 |
  keys.js       |  100.00 |        3 |         0 |          0 |        0 |        0 |
  once.js       |   40.91 |        5 |         4 |         13 |        0 |        0 |
  values.js     |   50.91 |       23 |         5 |         27 |        0 |        0 |
 throughs       |   78.80 |      202 |        21 |         60 |        0 |        0 |
  async-map.js  |   73.02 |       41 |         5 |         17 |        0 |        0 |
  filter-not.js |  100.00 |        9 |         3 |          0 |        0 |        0 |
  filter.js     |   65.52 |       15 |         4 |         10 |        0 |        0 |
  flatten.js    |   81.97 |       46 |         4 |         11 |        0 |        0 |
  map.js        |   90.48 |       17 |         2 |          2 |        0 |        0 |
  non-unique.js |   75.00 |        6 |         0 |          2 |        0 |        0 |
  take.js       |   89.80 |       43 |         1 |          5 |        0 |        0 |
  through.js    |   60.00 |       16 |         2 |         12 |        0 |        0 |
  unique.js     |   90.00 |        9 |         0 |          1 |        0 |        0 |
 util           |   64.71 |        9 |         2 |          6 |        0 |        0 |
  abort-cb.js   |   83.33 |        5 |         0 |          1 |        0 |        0 |
  prop.js       |    0.00 |        0 |         0 |          4 |        0 |        0 |
  tester.js     |   85.71 |        4 |         2 |          1 |        0 |        0 |
 index.js       |   87.50 |        7 |         0 |          1 |        0 |        0 |
 pull.js        |   37.27 |       35 |         6 |         69 |        0 |        0 |
----------------|---------|----------|-----------|------------|----------|----------|
[32m12:01:27 (2795) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/pull-stream/reports/mutation/mutation.html
[32m12:01:27 (2795) INFO MutationTestExecutor[39m Done in 20 minutes 3 seconds.

real	20m5.372s
user	7m31.038s
sys	1m32.186s
