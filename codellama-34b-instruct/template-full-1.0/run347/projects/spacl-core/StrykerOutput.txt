*** using precomputed mutations ***
[32m12:25:58 (2457) INFO ConfigReader[39m No config file specified. Running with command line arguments.
[32m12:25:58 (2457) INFO ConfigReader[39m Use `stryker init` command to generate your config file.
[33m12:25:58 (2457) WARN PluginLoader[39m Error during loading "@stryker-mutator/karma-runner" plugin:
  Cannot find module 'karma'
Require stack:
- /home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/node_modules/@stryker-mutator/util/dist/src/require-resolve.js
[33m12:25:58 (2457) WARN OptionsValidator[39m Unknown stryker config option "usePrecomputed".
[33m12:25:58 (2457) WARN OptionsValidator[39m Possible causes:
     * Is it a typo on your end?
     * Did you only write this property as a comment? If so, please postfix it with "_comment".
     * You might be missing a plugin that is supposed to use it. Stryker loaded plugins from: ["@stryker-mutator/*"]
     * The plugin that is using it did not contribute explicit validation. 
     (disable "warnings.unknownOptions" to ignore this warning)
[32m12:25:58 (2457) INFO ProjectReader[39m Found 6 of 571 file(s) to be mutated.
*** using precomputed mutator ***
*** retrieving 224 mutants from MUTATION_TESTING/template-full_codellama-34b-instruct_1.0/mutants.json ***
Mutant 0 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:^.$+*-]*$/) === null
Mutant 1 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]{4,12}$/) === null
Mutant 2 in matcher.ts: spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/) === null replaced with spec.match(/^[a-zA-Z0-9_/:~.$+*-]*$/.repeat(2)) === null
Mutant 3 in matcher.ts: spec.match replaced with spec.search
Mutant 4 in matcher.ts: spec.match replaced with spec.replace
Mutant 5 in matcher.ts: spec.match replaced with spec.replaceAll
Mutant 6 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]?$/
Mutant 7 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]{2,}$/
Mutant 8 in matcher.ts: /^[a-zA-Z0-9_/:~.$+*-]*$/ replaced with /^[a-zA-Z0-9_/:~.$+*-]|[0-9]{5}$/
Mutant 9 in matcher.ts: spec.match replaced with ''.match
Mutant 10 in matcher.ts: spec.match replaced with null.match
Mutant 11 in matcher.ts: spec.match replaced with undefined.match
Mutant 12 in matcher.ts: /^\// replaced with /^[/]/
Mutant 13 in matcher.ts: spec.match replaced with spec.search
Mutant 14 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with spec.match(/[*+][^/]|[^/][*+]/) !== null
Mutant 15 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with props.length > 0
Mutant 16 in matcher.ts: spec.match(version === '1' || version === '1.0' ? /[*+][^/]|[^/][*+]/ : /\*[^*/]|\+[^+/]|[^/*]\*|[^/+]\+|\*\*\*|\+\+\+/) !== null replaced with parts.length > 0
Mutant 17 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/:.:/) !== null
Mutant 18 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/:$/) !== null
Mutant 19 in matcher.ts: spec.match(/[^/]:|:\/|:$/) !== null replaced with spec.match(/(:._)/) !== null
Mutant 20 in matcher.ts: spec.match replaced with spec.search
Mutant 21 in matcher.ts: spec.match replaced with spec.replace
Mutant 22 in matcher.ts: spec.match replaced with spec.startsWith
Mutant 23 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) == null
Mutant 24 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/) !== undefined
Mutant 25 in matcher.ts: spec.match(/^.+\/$/) !== null replaced with spec.match(/^.+\/$/)?.length > 0
Mutant 26 in matcher.ts: /^.+\/$/ replaced with /[a-zA-Z0-9_]/
Mutant 27 in matcher.ts: spec replaced with spec, version + 1
Mutant 28 in matcher.ts: spec replaced with spec.replace(/\*+/, '+')
Mutant 29 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length >= 1 && string.endsWith('/')
Mutant 30 in matcher.ts: string.length > 1 && string.endsWith('/') replaced with string.length > 0 && string.endsWith('/')
Mutant 31 in matcher.ts: string.endsWith replaced with string.includes
Mutant 32 in matcher.ts: string.endsWith replaced with string.indexOf
Mutant 33 in matcher.ts: string.endsWith replaced with string.substring
Mutant 34 in matcher.ts: '/' replaced with '\\'
Mutant 35 in matcher.ts: '/' replaced with '|'
Mutant 36 in matcher.ts: '/' replaced with '$'
Mutant 37 in matcher.ts: max > 0 || any replaced with any && max === 0
Mutant 38 in matcher.ts: max > 0 || any replaced with max > 0 || !any
Mutant 39 in matcher.ts: max > 0 || any replaced with max === 0 || !any
Mutant 40 in matcher.ts: final && opt && min < 1 replaced with final && opt && min < 2
Mutant 41 in matcher.ts: final && opt && min < 1 replaced with final && !opt && min < 1
Mutant 42 in matcher.ts: final && opt && min < 1 replaced with final || opt && min < 1
Mutant 43 in matcher.ts: min > 0 replaced with min = max
Mutant 44 in matcher.ts: min > 0 replaced with max = min
Mutant 45 in matcher.ts: min > 0 replaced with min = max + 1
Mutant 46 in matcher.ts: true replaced with false
Mutant 47 in matcher.ts: true replaced with undefined
Mutant 48 in matcher.ts: true replaced with null
Mutant 49 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + seg
Mutant 50 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => acc + seg.length
Mutant 51 in matcher.ts: (acc, seg) => seg + acc replaced with (acc, seg) => ' ' + acc + ' ' + seg
Mutant 52 in matcher.ts: '$' replaced with '\''
Mutant 53 in matcher.ts: '$' replaced with '\\\\'
Mutant 54 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/').reverse()
Mutant 55 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('/')[0]
Mutant 56 in matcher.ts: spec.split('/').slice(1).reverse() replaced with spec.split('.')
Mutant 57 in matcher.ts: spec.split replaced with spec.replace
Mutant 58 in matcher.ts: spec.split replaced with spec.match
Mutant 59 in matcher.ts: spec.split replaced with spec.search
not replacing spec.split with spec.replace
not replacing spec.split with spec.replace
not replacing spec.split with spec.replace
not replacing spec.split with spec.replace
not replacing spec.split with spec.match
not replacing spec.split with spec.match
not replacing spec.split with spec.match
not replacing spec.split with spec.match
not replacing spec.split with spec.search
not replacing spec.split with spec.search
not replacing spec.split with spec.search
not replacing spec.split with spec.search
Mutant 60 in matcher.ts: '/' replaced with '\\'
Mutant 61 in matcher.ts: '/' replaced with ':'
Mutant 62 in matcher.ts: 1 replaced with "1.1".match(/\d+/)[0]
Mutant 63 in matcher.ts: part replaced with '/[^/]+'
Mutant 64 in matcher.ts: part replaced with '[^/]+'
Mutant 65 in matcher.ts: part replaced with '(?:[^/]+?)'
Mutant 66 in matcher.ts: part.match replaced with !part.match
Mutant 67 in matcher.ts: /:.+/ replaced with /:.*/
Mutant 68 in matcher.ts: /:.+/ replaced with /:[a-zA-Z]+/
Mutant 69 in matcher.ts: /:.+/ replaced with /:.+}/
Mutant 70 in matcher.ts: part.slice(1) replaced with part.slice(2)
Mutant 71 in matcher.ts: part.slice(1) replaced with part.slice(3)
Mutant 72 in matcher.ts: part.slice(1) replaced with part.slice(1) + part.slice(2)
Mutant 73 in matcher.ts: 1 replaced with 0
Mutant 74 in matcher.ts: 1 replaced with undefined
Mutant 75 in matcher.ts: '/([^/]+)' replaced with '/([^/]+)/'
Mutant 76 in matcher.ts: '/([^/]+)' replaced with '/([^/]+?)/'
Mutant 77 in matcher.ts: '/([^/]+)' replaced with '/([^/]+.)/'
Mutant 78 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part}*`
Mutant 79 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part}+`
Mutant 80 in matcher.ts: `/${part.replace(/([.$])/g, '\\$1')}` replaced with `/${part}.`
Mutant 81 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([^.$])/g, '\\$1')
Mutant 82 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([$])/g, '\\$1')
Mutant 83 in matcher.ts: part.replace(/([.$])/g, '\\$1') replaced with part.replace(/([.*$])/g, '\\$1')
Mutant 84 in matcher.ts: /([.$])/g replaced with /([e.$])/g
Mutant 85 in matcher.ts: /([.$])/g replaced with /([.$])/i
Mutant 86 in matcher.ts: /([.$])/g replaced with /([.])/g
Mutant 87 in matcher.ts: '\\$1' replaced with '\\$1' + 'a'
Mutant 88 in matcher.ts: '\\$1' replaced with '\\$1' + 1
Mutant 89 in matcher.ts: '\\$1' replaced with '\\$1' + '\\$1'
Mutant 90 in policy.ts: this.rules.push replaced with this.rules.unshift
Mutant 91 in policy.ts: this.rules.push replaced with this.rules.concat
Mutant 92 in policy.ts: this.rules.push replaced with this.rules.splice
Mutant 93 in policy.ts: this.rules replaced with rules = {}
Mutant 94 in policy.ts: this.rules replaced with rules = {
  "test": false,
  "example": true
}
Mutant 95 in policy.ts: this.rules replaced with rules = ["test", "example", "foo"]
Mutant 96 in policy.ts: path replaced with !path
Mutant 97 in policy.ts: path replaced with path + 'extra'
Mutant 98 in policy.ts: path replaced with path[0]
Mutant 99 in policy.ts: verb replaced with !verb
Mutant 100 in policy.ts: verb replaced with 1 - verb
Mutant 101 in policy.ts: verb replaced with verb ? 0 : 1
Mutant 102 in policy.ts: ctx replaced with 1 + ctx
Mutant 103 in policy.ts: ctx replaced with ctx.length
Mutant 104 in policy.ts: ctx replaced with ctx.replace('-', '_')
Mutant 105 in policy.ts: res === false replaced with res !== false
Mutant 106 in policy.ts: res === false replaced with !res
Mutant 107 in policy.ts: res === false replaced with res === true
Mutant 108 in policy.ts: res === true replaced with res !== true
Mutant 109 in policy.ts: res === true replaced with res !== false
Mutant 110 in policy.ts: res === true replaced with res == null
Mutant 111 in policy.ts: this.rules replaced with this.rules.slice()
Mutant 112 in policy.ts: this.rules replaced with this.rules.length
Mutant 113 in policy.ts: this.rules replaced with this.rules.filter(rule => rule.path === path)
Mutant 114 in policy.ts: rule.matches(path, ctx) replaced with !rule.matches(path, ctx)
Mutant 115 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path.split(''), 0)
Mutant 116 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(ctx, path)
Mutant 117 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(this.rules[0])
Mutant 118 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path.slice(0, -1))
Mutant 119 in policy.ts: rule.matches(path, ctx) replaced with rule.matches(path.toLowerCase())
Mutant 120 in policy.ts: path replaced with path + " "
Mutant 121 in policy.ts: path replaced with rule.clone()
Mutant 122 in policy.ts: ctx replaced with null
Mutant 123 in policy.ts: ctx replaced with undefined
Mutant 124 in policy.ts: ctx replaced with "INVALID"
Mutant 125 in policy.ts: this.rules.map replaced with this.rules.filter
Mutant 126 in policy.ts: this.rules.map replaced with this.rules.slice
Mutant 127 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(null, false)
Mutant 128 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(null, true)
Mutant 129 in policy.ts: rule => rule.clone() replaced with rule => rule.clone(null, rule.name)
Mutant 130 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, null]
Mutant 131 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, new Policy(policy.name, "")]
Mutant 132 in policymap.ts: policy => [policy.name, policy] replaced with policy => [policy.name, policy.flags & Policy.Flag.ENABLED ? policy.flags | Policy.Flag.DISABLED : policy.flags & ~Policy.Flag.ENABLED]
Mutant 133 in policymap.ts: for (const policy of policies) {
  this.set(policy.name, policy);
} replaced with for (let policy of policies) {
  this.set(policy.name, policy);
}
Mutant 134 in policymap.ts: policies replaced with policies.filter(policy => policy.name === name)
Mutant 135 in policymap.ts: policies replaced with policies.slice(0, name.length)
Mutant 136 in policymap.ts: policies replaced with policies.concat(name)
Mutant 137 in policymap.ts: this.set(policy.name, policy) replaced with this.set(policy.name)
Mutant 138 in policymap.ts: this.set(policy.name, policy) replaced with this.set(context)
Mutant 139 in policymap.ts: this.set(policy.name, policy) replaced with this.set(this[policy.name])
Mutant 140 in policymap.ts: this.set replaced with this.add
Mutant 141 in policymap.ts: this.set replaced with this.clear
Mutant 142 in policymap.ts: policy.name replaced with policy
Mutant 143 in policymap.ts: policy.name replaced with policy.nonExistentProperty
Mutant 144 in policymap.ts: policy.name replaced with null
Mutant 145 in policymap.ts: policy replaced with null
Mutant 146 in policymap.ts: policy replaced with "policy"
Mutant 147 in policymap.ts: policy replaced with policy.name
Mutant 148 in policymap.ts: this.get replaced with this.size
Mutant 149 in policymap.ts: this.get replaced with this.set
Mutant 150 in policymap.ts: this.get replaced with this.has
Mutant 151 in policymap.ts: name replaced with this.get(name.toUpperCase())
Mutant 152 in policymap.ts: name replaced with this.get(name.substr(1))
Mutant 153 in policymap.ts: name replaced with this.get(name.slice(1))
Mutant 154 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(!path, verb, ctx)
Mutant 155 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query(path, verb, !ctx)
Mutant 156 in policymap.ts: policy.query(path, verb, ctx) replaced with policy.query("example.com", verb, ctx)
Mutant 157 in policymap.ts: path replaced with !path
Mutant 158 in policymap.ts: path replaced with path + 'foo'
Mutant 159 in policymap.ts: path replaced with path.substring(1)
Mutant 160 in policymap.ts: verb replaced with !verb
Mutant 161 in policymap.ts: verb replaced with verb + 1
Mutant 162 in policymap.ts: verb replaced with verb.toUpperCase()
Mutant 163 in policymap.ts: ctx replaced with null
Mutant 164 in policymap.ts: ctx replaced with undefined
Mutant 165 in policymap.ts: ctx replaced with {}
Mutant 166 in policymap.ts: this.get replaced with this.has
Mutant 167 in policymap.ts: name replaced with "foo"
Mutant 168 in policymap.ts: name replaced with name.toLowerCase()
Mutant 169 in policymap.ts: name replaced with name + "xyz"
Mutant 170 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + ctx)
Mutant 171 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path + 'hello world')
Mutant 172 in policymap.ts: policy.matches(path, ctx) replaced with policy.matches(path.substring(2))
Mutant 173 in policymap.ts: policy.matches replaced with !policy.matches
Mutant 174 in policymap.ts: policy.matches replaced with policy.matches = false
Mutant 175 in policymap.ts: path replaced with -path + path.split("")
Mutant 176 in policymap.ts: path replaced with -path + `${path}`.split("")
Mutant 177 in policymap.ts: path replaced with -path + path.length
Mutant 178 in policymap.ts: ctx replaced with !ctx
Mutant 179 in policymap.ts: ctx replaced with ctx + 1
Mutant 180 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (const _verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 181 in rule.ts: for (const verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
} replaced with for (let verb of verbs) {
  if (!(verb in this.verbs)) {
    this.verbs[verb] = true;
  }
}
Mutant 182 in rule.ts: !(verb in this.verbs) replaced with verb in this.verbs
Mutant 183 in rule.ts: !(verb in this.verbs) replaced with verb.length
Mutant 184 in rule.ts: !(verb in this.verbs) replaced with this.verbs.length
Mutant 185 in rule.ts: for (const verb of verbs) {
  this.verbs[verb] = false;
} replaced with for (const verb2 of verbs) {
  this.verbs[verb] = false;
}
Mutant 186 in rule.ts: verbs replaced with verbs[0]
Mutant 187 in rule.ts: verbs replaced with Object.keys(verbs)
Mutant 188 in rule.ts: verbs replaced with Object.values(verbs)
Mutant 189 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with !this.matches(path, ctx) && verb in this.verbs
Mutant 190 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) || verb in this.verbs
Mutant 191 in rule.ts: this.matches(path, ctx) && verb in this.verbs replaced with this.matches(path, ctx) && !(verb in this.verbs)
Mutant 192 in rule.ts: this.matches(path, ctx) replaced with this.matches(path + ctx)
Mutant 193 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.split(ctx))
Mutant 194 in rule.ts: this.matches(path, ctx) replaced with this.matches(path.substring(ctx.length))
Mutant 195 in rule.ts: path replaced with path.substring(1)
Mutant 196 in rule.ts: path replaced with path.length - 1
Mutant 197 in rule.ts: path replaced with path[0]
Mutant 198 in rule.ts: path.match replaced with path.search
Mutant 199 in rule.ts: path.match replaced with path.slice
Mutant 200 in rule.ts: path.match replaced with path.split
Mutant 201 in rule.ts: this.regex replaced with this.regex.match
Mutant 202 in rule.ts: this.regex replaced with this.regex.test
Mutant 203 in rule.ts: this.regex replaced with this.regex.constructor
Mutant 204 in rule.ts: match === null replaced with match[0] === null
Mutant 205 in rule.ts: match === null replaced with match.slice(1) === null
Mutant 206 in rule.ts: match === null replaced with match.indexOf(path) === -1
Mutant 207 in rule.ts: count > 0 replaced with count < 0
Mutant 208 in rule.ts: count > 0 replaced with count === 0
Mutant 209 in rule.ts: count > 0 replaced with count > 1
Mutant 210 in rule.ts: ctx === undefined replaced with ctx !== undefined
Mutant 211 in rule.ts: ctx === undefined replaced with !ctx
Mutant 212 in rule.ts: ctx === undefined replaced with ctx === false
Mutant 213 in rule.ts: index < count replaced with index > count
Mutant 214 in rule.ts: index < count replaced with index - count
Mutant 215 in rule.ts: index < count replaced with index / count
Mutant 216 in rule.ts: index++ replaced with index--
Mutant 217 in rule.ts: index++ replaced with index += 2
Mutant 218 in rule.ts: index++ replaced with index = 0
Mutant 219 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop !== undefined || match[index + 1] !== prop
Mutant 220 in rule.ts: prop === undefined || match[index + 1] !== prop replaced with prop === undefined && match[index + 1] !== prop
Mutant 221 in rule.ts: this.verbs replaced with "xyz"
Mutant 222 in rule.ts: this.verbs replaced with 42
Mutant 223 in rule.ts: this.verbs replaced with null
[32m12:25:59 (2457) INFO Instrumenter[39m Instrumented 6 source file(s) with 224 mutant(s)
[32m12:25:59 (2457) INFO ConcurrencyTokenProvider[39m Creating 1 test runner process(es).
[32m12:26:00 (2457) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m12:26:00 (2457) INFO DryRunExecutor[39m Starting initial test run (command test runner with "perTest" coverage analysis). This may take a while.
[32m12:26:04 (2457) INFO DryRunExecutor[39m Initial test run succeeded. Ran 1 tests in 4 seconds (net 4188 ms, overhead 1 ms).
Mutation testing 1% (elapsed: <1m, remaining: ~12m) 3/224 tested (0 survived, 0 timed out)
Mutation testing 2% (elapsed: <1m, remaining: ~12m) 6/224 tested (0 survived, 0 timed out)
Mutation testing 4% (elapsed: <1m, remaining: ~11m) 9/224 tested (0 survived, 0 timed out)
Mutation testing 5% (elapsed: <1m, remaining: ~11m) 12/224 tested (0 survived, 0 timed out)
Mutation testing 6% (elapsed: <1m, remaining: ~11m) 15/224 tested (1 survived, 0 timed out)
Mutation testing 8% (elapsed: ~1m, remaining: ~11m) 18/224 tested (1 survived, 0 timed out)
Mutation testing 9% (elapsed: ~1m, remaining: ~11m) 21/224 tested (2 survived, 0 timed out)
Mutation testing 10% (elapsed: ~1m, remaining: ~11m) 24/224 tested (2 survived, 0 timed out)
Mutation testing 12% (elapsed: ~1m, remaining: ~10m) 27/224 tested (3 survived, 0 timed out)
Mutation testing 13% (elapsed: ~1m, remaining: ~10m) 30/224 tested (3 survived, 0 timed out)
Mutation testing 14% (elapsed: ~1m, remaining: ~10m) 33/224 tested (4 survived, 0 timed out)
Mutation testing 16% (elapsed: ~2m, remaining: ~10m) 36/224 tested (6 survived, 0 timed out)
Mutation testing 17% (elapsed: ~2m, remaining: ~10m) 39/224 tested (6 survived, 0 timed out)
Mutation testing 18% (elapsed: ~2m, remaining: ~10m) 42/224 tested (6 survived, 0 timed out)
Mutation testing 20% (elapsed: ~2m, remaining: ~9m) 46/224 tested (6 survived, 0 timed out)
Mutation testing 21% (elapsed: ~2m, remaining: ~9m) 49/224 tested (6 survived, 0 timed out)
Mutation testing 23% (elapsed: ~2m, remaining: ~9m) 52/224 tested (6 survived, 0 timed out)
Mutation testing 24% (elapsed: ~3m, remaining: ~9m) 55/224 tested (6 survived, 0 timed out)
Mutation testing 25% (elapsed: ~3m, remaining: ~9m) 58/224 tested (6 survived, 0 timed out)
Mutation testing 27% (elapsed: ~3m, remaining: ~8m) 61/224 tested (6 survived, 0 timed out)
Mutation testing 28% (elapsed: ~3m, remaining: ~8m) 64/224 tested (7 survived, 0 timed out)
Mutation testing 29% (elapsed: ~3m, remaining: ~8m) 67/224 tested (7 survived, 0 timed out)
Mutation testing 31% (elapsed: ~3m, remaining: ~8m) 70/224 tested (9 survived, 0 timed out)
Mutation testing 32% (elapsed: ~4m, remaining: ~8m) 73/224 tested (9 survived, 0 timed out)
Mutation testing 34% (elapsed: ~4m, remaining: ~7m) 77/224 tested (9 survived, 0 timed out)
Mutation testing 35% (elapsed: ~4m, remaining: ~7m) 80/224 tested (9 survived, 0 timed out)
Mutation testing 37% (elapsed: ~4m, remaining: ~7m) 83/224 tested (9 survived, 0 timed out)
Mutation testing 38% (elapsed: ~4m, remaining: ~7m) 86/224 tested (12 survived, 0 timed out)
Mutation testing 39% (elapsed: ~4m, remaining: ~7m) 89/224 tested (12 survived, 0 timed out)
Mutation testing 41% (elapsed: ~5m, remaining: ~7m) 92/224 tested (13 survived, 0 timed out)
Mutation testing 42% (elapsed: ~5m, remaining: ~7m) 95/224 tested (13 survived, 0 timed out)
Mutation testing 44% (elapsed: ~5m, remaining: ~6m) 99/224 tested (13 survived, 0 timed out)
Mutation testing 45% (elapsed: ~5m, remaining: ~6m) 102/224 tested (13 survived, 0 timed out)
Mutation testing 46% (elapsed: ~5m, remaining: ~6m) 105/224 tested (13 survived, 0 timed out)
Mutation testing 48% (elapsed: ~5m, remaining: ~6m) 108/224 tested (13 survived, 0 timed out)
Mutation testing 49% (elapsed: ~6m, remaining: ~6m) 111/224 tested (13 survived, 0 timed out)
Mutation testing 50% (elapsed: ~6m, remaining: ~5m) 114/224 tested (14 survived, 0 timed out)
Mutation testing 52% (elapsed: ~6m, remaining: ~5m) 118/224 tested (14 survived, 0 timed out)
Mutation testing 54% (elapsed: ~6m, remaining: ~5m) 121/224 tested (14 survived, 0 timed out)
Mutation testing 55% (elapsed: ~6m, remaining: ~5m) 124/224 tested (14 survived, 0 timed out)
Mutation testing 56% (elapsed: ~6m, remaining: ~5m) 127/224 tested (14 survived, 0 timed out)
Mutation testing 58% (elapsed: ~7m, remaining: ~5m) 130/224 tested (14 survived, 0 timed out)
Mutation testing 59% (elapsed: ~7m, remaining: ~4m) 133/224 tested (14 survived, 0 timed out)
Mutation testing 61% (elapsed: ~7m, remaining: ~4m) 137/224 tested (15 survived, 0 timed out)
Mutation testing 62% (elapsed: ~7m, remaining: ~4m) 140/224 tested (15 survived, 0 timed out)
Mutation testing 63% (elapsed: ~7m, remaining: ~4m) 143/224 tested (15 survived, 0 timed out)
Mutation testing 65% (elapsed: ~7m, remaining: ~4m) 146/224 tested (15 survived, 0 timed out)
Mutation testing 66% (elapsed: ~8m, remaining: ~4m) 149/224 tested (15 survived, 0 timed out)
Mutation testing 68% (elapsed: ~8m, remaining: ~3m) 153/224 tested (15 survived, 0 timed out)
Mutation testing 69% (elapsed: ~8m, remaining: ~3m) 156/224 tested (15 survived, 0 timed out)
Mutation testing 70% (elapsed: ~8m, remaining: ~3m) 159/224 tested (15 survived, 0 timed out)
Mutation testing 72% (elapsed: ~8m, remaining: ~3m) 162/224 tested (15 survived, 0 timed out)
Mutation testing 73% (elapsed: ~8m, remaining: ~3m) 165/224 tested (15 survived, 0 timed out)
Mutation testing 75% (elapsed: ~9m, remaining: ~2m) 169/224 tested (16 survived, 0 timed out)
Mutation testing 76% (elapsed: ~9m, remaining: ~2m) 172/224 tested (16 survived, 0 timed out)
Mutation testing 78% (elapsed: ~9m, remaining: ~2m) 175/224 tested (16 survived, 0 timed out)
Mutation testing 79% (elapsed: ~9m, remaining: ~2m) 178/224 tested (16 survived, 0 timed out)
Mutation testing 80% (elapsed: ~9m, remaining: ~2m) 181/224 tested (16 survived, 0 timed out)
Mutation testing 82% (elapsed: ~9m, remaining: ~2m) 184/224 tested (17 survived, 0 timed out)
Mutation testing 83% (elapsed: ~10m, remaining: ~1m) 188/224 tested (17 survived, 0 timed out)
Mutation testing 85% (elapsed: ~10m, remaining: ~1m) 191/224 tested (18 survived, 0 timed out)
Mutation testing 86% (elapsed: ~10m, remaining: ~1m) 194/224 tested (18 survived, 0 timed out)
Mutation testing 87% (elapsed: ~10m, remaining: ~1m) 197/224 tested (18 survived, 0 timed out)
Mutation testing 89% (elapsed: ~10m, remaining: ~1m) 200/224 tested (18 survived, 0 timed out)
Mutation testing 90% (elapsed: ~10m, remaining: ~1m) 203/224 tested (18 survived, 0 timed out)
Mutation testing 91% (elapsed: ~11m, remaining: <1m) 206/224 tested (18 survived, 0 timed out)
Mutation testing 93% (elapsed: ~11m, remaining: <1m) 209/224 tested (18 survived, 0 timed out)
Mutation testing 94% (elapsed: ~11m, remaining: <1m) 212/224 tested (19 survived, 0 timed out)
Mutation testing 96% (elapsed: ~11m, remaining: <1m) 216/224 tested (20 survived, 0 timed out)
Mutation testing 97% (elapsed: ~11m, remaining: <1m) 218/224 tested (21 survived, 0 timed out)
Mutation testing 97% (elapsed: ~11m, remaining: <1m) 219/224 tested (21 survived, 1 timed out)
Mutation testing 99% (elapsed: ~12m, remaining: <1m) 222/224 tested (21 survived, 1 timed out)

All tests
  ✓ All tests (killed 202)

[Survived] PrecomputedMutator
src/matcher.ts:15:20
-       if (spec.match(/^\//) === null) {
+       if (spec.match(/^[/]/) === null) {

[Survived] PrecomputedMutator
src/matcher.ts:26:9
-       if (spec.match(/[^/]:|:\/|:$/) !== null) {
+       if (spec.match(/:$/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:29:9
-       if (spec.match(/^.+\/$/) !== null) {
+       if (spec.match(/^.+\/$/)?.length > 0) {

[Survived] PrecomputedMutator
src/matcher.ts:39:30
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.indexOf('/')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('\\')) {

[Survived] PrecomputedMutator
src/matcher.ts:39:46
-       if (string.length > 1 && string.endsWith('/')) {
+       if (string.length > 1 && string.endsWith('|')) {

[Survived] PrecomputedMutator
src/matcher.ts:92:44
-     for (const part of spec.split('/').slice(1).reverse()) {
+     for (const part of spec.split('/').slice("1.1".match(/\d+/)[0]).reverse()) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:.*/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:111:24
-           if (part.match(/:.+/) !== null) {
+           if (part.match(/:[a-zA-Z]+/) !== null) {

[Survived] PrecomputedMutator
src/matcher.ts:115:26
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
+             parts.push(`/${part.replace(/([.*$])/g, '\\$1')}`)

[Survived] PrecomputedMutator
src/matcher.ts:115:39
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
+             parts.push(`/${part.replace(/([e.$])/g, '\\$1')}`)

[Survived] PrecomputedMutator
src/matcher.ts:115:39
-             parts.push(`/${part.replace(/([.$])/g, '\\$1')}`)
+             parts.push(`/${part.replace(/([.$])/i, '\\$1')}`)

[Survived] PrecomputedMutator
src/policy.ts:18:5
-       this.rules.push(...rules)
+       this.rules.unshift(...rules)

[Survived] PrecomputedMutator
src/policy.ts:48:24
-       for (const rule of this.rules) {
+       for (const rule of this.rules.slice()) {

[Survived] PrecomputedMutator
src/policymap.ts:12:5
-       for (const policy of policies) {
-         this.set(policy.name, policy)
-       }
+       for (let policy of policies) {
+     this.set(policy.name, policy);
+   }

[Survived] PrecomputedMutator
src/policymap.ts:39:29
-       const policy = this.get(name)
+       const policy = this.get(name.toLowerCase())

[Survived] PrecomputedMutator
src/rule.ts:25:5
-       for (const verb of verbs) {
-         if (!(verb in this.verbs)) {
-           this.verbs[verb] = true
-         }
-       }
+       for (let verb of verbs) {
+     if (!(verb in this.verbs)) {
+       this.verbs[verb] = true;
+     }
+   }

[Survived] PrecomputedMutator
src/rule.ts:35:24
-       for (const verb of verbs) {
+       for (const verb of Object.values(verbs)) {

[Survived] PrecomputedMutator
src/rule.ts:66:11
-         if (ctx === undefined) {
+         if (!ctx) {

[Survived] PrecomputedMutator
src/rule.ts:69:27
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index - count; index++) {

[Survived] PrecomputedMutator
src/rule.ts:69:42
-         for (let index = 0; index < count; index++) {
+         for (let index = 0; index < count; index += 2) {

Ran 1.00 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   90.63 |      202 |         1 |         21 |        0 |        0 |
 matcher.ts   |   86.67 |       78 |         0 |         12 |        0 |        0 |
 policy.ts    |   95.00 |       38 |         0 |          2 |        0 |        0 |
 policymap.ts |   96.00 |       48 |         0 |          2 |        0 |        0 |
 rule.ts      |   88.64 |       38 |         1 |          5 |        0 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m12:38:08 (2457) INFO HtmlReporter[39m Your report can be found at: file:///home/runner/work/llm-mutation-testing/llm-mutation-testing/spacl-core/reports/mutation/mutation.html
[32m12:38:08 (2457) INFO MutationTestExecutor[39m Done in 12 minutes 10 seconds.

real	12m11.400s
user	16m17.044s
sys	1m11.326s
